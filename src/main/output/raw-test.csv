"DocId","PublishDate","VisitDate","SiteId","SiteName","SiteUrl","Url","Content"
"D460","2020-03-18","2023-03-24","S1","Computer Science Teacher","blog.acthompson.net","https://blog.acthompson.net/2023/03/finding-words-with-all-letters.html","Does anyone else lay in bed in the morning thinking about coding projects or is it just me? I’ve been playing around with a Wordle solver helper for a while now. It helps me find words based on what I know after each guess. One of the things I like to do is see how many possibilities there are based on different hints. Yesterday I had most of the letters but not in the right place. So this morning I was wondering about words that had the same letters but in different orders. Seemed like something I needed to write some code about. A key method is to compare all the letters in one string with the letters in a second string. At least the way I was thinking of handling it. It struck me that that is a great assignment for students. I don’t have any students handy so I asked ChatGPT to write that function. This is the prompt I gave it: Write a C# function that accepts two strings and returns true if all of the letters in the first string are included, in any order, in the second string. Return false if any of the letters in the first string are not included in the second string. That is a lot like what I would assign a student. ChatGPT gave me some very nice code. It wasn’t exactly like what I was writing in my head. It used foreach and ToCharArray which is probably the best and easiest way to do this. I was coding before either of those became common so my mind goes to for and while loops and the string SubString method. This was a good reminder for me. I left the rest of the program, which wasn’t a lot of code, to myself. Once written I had some fun with it. For example, the letters in Alfred also makeups the word flared. The letters in face are also used in café. Some groups of letters do not make up any words of course, This seems like it could be a fun project to give students. It was fun enough for me."
"D448","2019-12-19","2023-03-24","S1","Computer Science Teacher","blog.acthompson.net","https://blog.acthompson.net/2022/12/thoughts-on-optimization-of-code.html","Donald E. Knuth famously said ""Premature optimization is the root of all evil."" The important word there is “premature.” Optimization is not a bad thing. It isn’t always required though. The joke is that a programmer will spend hours coding a solution to a problem that can be solved in minutes manually. Is that a bad thing? It really depends on the circumstances. If one is getting paid by the hour one could easily argue that it is wrong. On the other hand if time is not really the issue and writing the code is fun – why not? There have been times in my career when optimization has been very important. I helped spec a computer for high speed/bandwidth data collection. It was critical that the computer be able to take the data and place it in memory without losing data. We actually analyzed the speed of various machine language instructions for optimization purposes. That’s pretty exceptional of course. I also remember writing a program of my own that took what seemed like a long time to process some data. I thought about trying to optimize it but as often as the program was to run it would not have been a good use of my time. Before I ran it again I got a new computer which made a bigger difference in execution time than I would probably have been able to get though “fixing” the code. Old habits from the days of slower computers stick with me though and I tend to think a lot about code execution. Recently I had ChatGPT write some code for me (Coding with ChatGPT–Armstrong Numbers) I looked at the code very closely since I was trying to come to some conclusions about how good the code was. I noticed that the C# version it gave me was highly dependent on modulus and division which are somewhat time consuming compared to addition and multiplication. The program I write didn’t use any modulus or division but a lot of multiplication and addition. Both used the same number of raising to a power of 3 so it doesn’t play an important role in performance differences. Having some time on my hands, I added some timing code to see if there was a difference. My program turns on to be much faster. Yea me. Of course both execution times are very small fractions of a second. Does it make sense to optimize this code? Probably not in this case. In fact, I would argue that the most understandable code may be a better goal for this project. That is a very subjective goal. Different people might come to honest but different conclusions. Another goal might be scalability – the ease of adapting the program for other Narcissistic numbers. The ChatGPT probably wins there. SO much depends on what we want to optimize: Speed of execution Ease of understanding Ease of enhancement/modification Possible other considerations(?) Getting all three may not always be possible. It’s an interesting question though and one developers do need to ask."
"D2","2027-12-17","2023-03-24","S1","Computer Science Teacher","blog.acthompson.net","https://blog.acthompson.net/2022/12/coding-with-chatgptarmstrong-numbers.html","Trying out ChatGPT seems to be all the rage these days in certain geek circles. I may even be late to the game but I tried a few things over the last couple of days. I started with one of my favorite little projects. Armstrong numbers are a form of narcissistic number which is a number that is the sum of its own digits each raised to the power of the number of digits. I first wrote a program to calculated these as an undergraduate when I wrote programs for it in about a half dozen different languages. I fed in the following prompt using C#, Visual Basic, and Python as the programming language. Write a [programming language] program to calculate three digit numbers were the sum of the cube of each digit equals the original number. The results for C# and VB were the same algorithm written in the specific syntax. The Python code was slightly different. You’ll probably not be surprised that the code ChatGPT showed me is very similar, if not identical, to code examples you can find with Google or Bing. The C#/VB plan depends highly on integer division and the modulus operator to break down the number into its digits. for (int I = 100; I < 1000; I++) { int sum = 0; int temp = I; while (temp > 0) { int digit = temp % 10; sum += digit * digit * digit; temp /= 10; } if (sum == I) { Console.WriteLine(I); } } The Python sample changes the integer into a string and used that to address the individual digits. for num in range(100, 1000): # Convert the number to a string so we can access each digit num_str = str(num) # Initialize a sum to store the sum of the cubes of the digits sum_of_cubes = 0 # Iterate through each digit in the number for digit in num_str: # Convert the digit back to an integer and add the cube of it to the sum sum_of_cubes += int(digit) ** 3 # If the sum of the cubes is equal to the original number, print it if sum_of_cubes == num: print(num) Note that the Python example nicely includes comments. A dead giveaway that a student didn’t write it. All samples come with simple explanations of how the code works. The explanations tend not to be very deep so oral questioning of a student would probably still show if the student understood the code or not. It looks like, for some simple, student exercises can be solved by ChatGPT. It is not much different from doing any other online search for the most part. How worried should teachers be about ChatGPT especially? I’m not sure. Cheating goes on all the time and there is a lot of sample code already out there for many common assignments. It’s going to be a bigger problem for educators who have very large numbers of students who can’t be familiar with the code their students write. Or who can’t ask them questions to make sure they understand what they turn in. I think I would ask ChatGPT to solve some of my assignments before I assign them just so I know what sort of answers I might see. Side note: Neither of the ways ChatGPT suggested is the way I solve this program. There are more than one ways to skin this cat."
"D306","2025-01-23","2023-03-24","S1","Computer Science Teacher","blog.acthompson.net","https://blog.acthompson.net/2023/01/what-jobs-are-safe-from-automation.html","“It's tough to make predictions, especially about the future.” – Yogi Berra That doesn't mean people don't try. Recent advances in Artificial Intelligence have a lot of people predicting what jobs are an are not likely to be replaced by computers. Technology is challenging the ideas about what jobs can and cannot be replaced by technology. Doug Peterson, who shares a lot of interesting articles, recently share this one predicting that leaders will not be replace. It's an optimistic article. 5 Reasons Leaders Shouldn't Worry That Generative A.I. Will Take Their Jobs | Inc.com A lot of jobs we once thought were completely safe are being seen in a new way lately. AIs are creating what looks to many like art for example. This is forcing us to take a hard look at how we define art. Some recent visits to museums had me already asking “what is art?” Today we joke about AI attempts to write short stories, poetry, and other narratives. A lot of our stories in movies an even books are formulaic. How long before AIs can write Hallmark Christmas movies I wonder? What used to be a joke may be a prediction of the future. A lot of people are speculating on the future end of the programmer profession. People have been predicting that would decades but we are closer to that than ever before. Software developers today think they are safe though because they (we) know that end users are terrible about describing what they want a program to do. Will the future bring courses and training on how to talk to AIs? Possibly. I can sure see the need for it. People who are not teachers are suggesting that AIs will take over for human teachers. As someone who spent 15 years teaching I am not so sure about that. I think the human touch will remain important for the future. Teaching is a lot about reading people and establishing relationships. Wil AI be able to do that? I am not sure anyone knows. One area I think people have an advantage over AI is that we are bad with risk analysis. What may seem like a flaw leads people with some luck, some imagination, and some hard work to beat the odds. We see potential needs when a pure look at the data would not see anything. And we are often willing to defy the odds for things we believe in. I am not sure AI will get there. Thinking about the possibilities of AI and what it means for the future of work is a critical topic. It’s something we need everyone, but especially students, to be thinking about."
"D460","2023-02-14","2023-03-24","S1","Computer Science Teacher","blog.acthompson.net","https://blog.acthompson.net/2023/02/people-are-bad-at-giving-instructions.html","One of the things that make me sure that programming will be around for awhile even with better and better artificial intelligences is that people are bad at giving instructions. Well, that may be unfair. They are reasonably good at giving instruction to other people but that is not the same as being good at giving instruction to the literal minded. The most famous instruction, I first heard it from Grace Hopper almost 50 years ago is the instruction for using shampoo “Lather, Rince, Repeat.” There is a lot left out there. Most obviously, repeat how many times? It also doesn’t say if one should wet their hair first. In computer terms, an infinite loop without setting initial conditions. I recently bought a new cover for a light switch. The first instruction was to turn off the circuit breaker for the switch. Good advice. On the other hand, the instructions did not say to reset the circuit breaker when finished installing the cover. A literal minded installer would never have a working switch. Of course, people figure these things out. We are aware of the larger context and are good at filling in missing pieces. Computers are not that good at any of this. Part of what we teaching when teaching programming is how to give instructions. Not just how to translate those instructions into code but to fully understand and describe the steps needed to complete at task. I believe these are necessary skills. I think they will translate to other fields. Not that I have proof but it seems logical. In any case, we’re going to have to get good at giving instructions if we are going to tell AIs what code to write."
