"Count","PublishDate","VisitDate","Url","Content"
"1","2013-11-04","2023-03-24","https://computinged.wordpress.com/2013/11/04/summit-on-cs-education-in-south-carolina/","Duncan Buell and Lonnie Emard have an op-ed piece in today’s The State about the summit we’re co-hosting this weekend as part of our ECEP Alliance efforts in South Carolina. ECEP is bringing in Cameron Wilson from Code.org, Dale Reed from University of Illinois-Chicago who is a leader in the Exploring CS effort there, and Marie desJardins to talk about her efforts in Maryland (as well as Rick Adrion and me, to talk about efforts in Massachusetts and Georgia). There is still space available, if readers in South Carolina would like to join us — see the invitation here. This Friday and Saturday, IT-oLogy, together with the University of South Carolina, will host the Computing Education in South Carolina Summit. This event, funded in part with an Expanding Computing Education Pathways grant from the National Science Foundation, will provide outreach to policymakers in government and education about the importance of teaching “real computer science” in South Carolina and the fact that the state is not so far behind national leaders that it could not itself become a national leader. The prediction is that three out of five job openings in the computer/information sciences, life/physical sciences, engineering and mathematics fields are asking for university degrees in computer science, and starting salaries nationally for computer science graduates are better than $60,000 a year. In spite of these inducements, enrollments in computer science are low, and the nation is producing only one-third of the university graduates in computer science as there are jobs available. via Columbia, SC: Buell, Emard: Summit can help make SC a leader in ‘real computer science’ education | Letters to the Editor | The State."
"2","2022-12-05","2023-03-24","https://computinged.wordpress.com/2022/12/05/a-workshop-on-slow-reveal-graphs-for-social-studies-teachers/","My collaborator, Tammy Shreiner, is running a workshop for social studies educators on teaching with Slow Reveal Graphs. The idea of slow reveal graphs is that visualizations are just too complex for students to pick out all the visual elements. Instead, a slow reveal graph is presented in stages, and at each stage, students are prompted to reflect (and discuss, or write about), “What do you notice now? What do you wonder about?” Tammy has been building a bunch of slow reveal graphs that really fascinating. I’m particularly amazed at the ones that she and her colleague Bradford Dykes have been building. They are taking hand-drawn visualizations (like the fascinating ones by W.E.B. Du Bois) and recreating them in R, so that they can generate the slow reveal process. She’s offering a workshop in January that I highly recommend. Dear friends, I am writing to share information about a professional learning opportunity focused on teaching primary source data visualizations using the “slow reveal” process. The PLO will take place on Zoom over two Saturdays, January 21 and 28, 9:00-noon. It is open to teachers inside and outside of Michigan. Please share the attached flyer with your social studies teacher colleagues. A sneak peak of the website that we will share with participants is below. Thanks for sharing! Tammy"
"3","2022-12-04","2023-03-24","https://computinged.wordpress.com/2022/12/04/launching-pcas-the-first-two-compfor-classes-and-hiring-our-first-lecturer/","I last gave an update on the Program in Computing for the Arts and Sciences (PCAS) here in February (see blog post). Since then, it’s become real. I was hired as of July 1 as the Director of PCAS. My Computing Education Task Force co-chair, Gus Evrard, is the Associate Director. We even have a website: https://lsa.umich.edu/computingfor I am building and teaching our first two courses now. I love our course code: COMPFOR. It stands for “COMPuting FOR…” The two courses are: I have never worked harder than this semester– building these two courses, teaching both courses at the same time, learning how to be a program director (e.g., explicit classes and workshops on academic leadership, on evaluating faculty, and on how University of Michigan budgets work), and creating the program. I am having enormous fun. I plan to write more about the two courses here and our innovations in teaching them. Here’s a brief summary. We are using teaspoon languages to introduce concepts, Snap for programming assignments, and Runestone ebooks for helping students to transfer their knowledge from blocks to traditional textual languages (Python, Processing, and SQL). I gave a talk for the CS for Michigan Conference a few weeks ago, and for the attendees, I created a page connecting to some of what we’re building and a narrative account of a couple of the units: https://guzdial.engin.umich.edu/cs4mi-pcas/. We have been given permission to hire our first lecturer: https://careers.umich.edu/job_detail/226551/leo-lecturer-i-compfor-111-and-compfor-121. Right now, it’s a one year position for 2023-2024, but if enrollments grow, we have been encouraged to request three year positions starting in Fall 2024. Please do forward this job announcement to anyone you think might be interested. It’s also available in other places like CRA: https://cra.org/job/university-of-michigan-lecturer/."
"4","2022-02-22","2023-03-24","https://computinged.wordpress.com/2022/02/22/updates-developing-the-university-of-michigan-lsa-program-in-computation-for-the-arts-and-science/","This blog is pretty old. I started it in June 2009 — almost 13 years ago. The pace of posting has varied from every day (today, I can’t understand how I ever did that!) to once every couple of months (most recently). There are things happening around here that are worth sharing and might be valuable to some readers, but I’m not finding much time to write. So, the posts the rest of this week will be quick updates with links for more information. During most of the pandemic, I co-chaired (with Gus Evrard, a Physics professor and computational cosmologist) the Computing Education Task Force (website) for the University of Michigan’s College of Literature, Science, and the Arts (LSA). LSA is huge — about 20K students. (I blogged about this effort in April of last year.) Our job was to figure out what LSA was doing in computing education, and what else was needed. Back in November, I talked here about the three themes that we identified as computing education in LSA: Our report was released last month. You can see the release statement here, and the full report here. It’s a big report, covering dozens of interviews, a hundred survey responses, and a huge effort searching over syllabi and course descriptions to find where computing is in LSA. We made recommendations about creating a new program, new courses, new majors and minors, and coordinating computing education across LSA. Now, we’re in the next phase — acting on the recommendations. LSA bought me out of my teaching for this semester, and it’s my full-time job to define a computing education program for LSA and to create the first courses in the program. We’re calling it the Program for Computing in the Arts and Science (PCAS). I’m designing courses for the Computing for Expression and Computing for Justice themes, in an active dialogue (drawing on the participatory design methods I learned from Betsy DiSalvo) with advisors from across LSA. (There are courses in LSA that can serve as introductions to the Computing for Discovery theme, and Gus is leading the effort to coordinate them.) The plan is to put up the program this summer, and I’ll start teaching the new courses in the Fall."
"5","2021-04-26","2023-03-24","https://computinged.wordpress.com/2021/04/26/the-bigger-part-of-computing-education-is-outside-of-engineering-education/","My Blog@CACM post this month is about the differences I’ve seen between computing education and engineering education (see link here). Engineering education has a goal of producing professional engineers. I describe in the post how ASEE is about the profession of engineering, and developing an engineering identity is a critical goal of engineering education. Computing education is about producing software engineers, but that’s only part of what computing education is about. SIGCSE is about learning and teaching of computing, and as computing educators, we teach students with diverse identities. They overlap, but the part of computing education that is outside the intersection with engineering education is much bigger than the part inside. Computing education for me is about helping people to understand computing (see the Call for Papers for the International Computing Education Research conference) — not just CS education at the undergraduate level. Preparing future software engineers is certainly part of computing education, but sometimes computing educators only see engineering education goals. Computing education has a bigger scope and range than engineering education. Here are three areas where we need to focus on the bigger part outside engineering. 1. K-12 is for everyone. Computing education in elementary and secondary school should be about more than producing software professionals. There are certainly CS teachers who disagree with me. An example is Scott Portnoff’s critique of CS curricula that does not adequately prepare students for the AP CS A exam and the CS major. I agree that we should offer CS courses at secondary school that give students adequate preparation for post-secondary CS education, if students want to go on to a CS major and become a computing professional. But K-12 has to serve everyone, and the most important goals for K-12 CS education are goals for what everyone should learn about computing. We want students: I am personally much more interested in K-12 teachers using computing to teach everything else better. Computational science and mathematics are powerful for helping scientists and mathematicians gain insight. We should use computing in the same way to advance student learning in STEM, social studies, and other disciplines — without turning those other classes into CS classes. This is the difference that Shuchi Grover is talking about with her two kinds of CT: learning about CS vs using computing to learn other things. 2. Courses for non-CS Majors. I’m co-chairing a task force on computing education for the University of Michigan’s College of Literature, Sciences, & Arts (LSA) (see a blog post on this effort and our website with our NEW preliminary report). I’m learning about the ways that LSA faculty use computing and how they want their students to learn about and use computing. Their purposes are so different from what we teach in classes about computer science or data science. Sure, computational scientists analyze data like data scientists, but they also create models that turn their theories into simulations (which can then generate data). Computational artists use computing to tell engaging stories in new ways. Computational journalists investigate and discover truth with computing. LSA faculty care a great deal about their students critiquing how our computing systems and infrastructure may be unjust and inequitable. (Interesting note: The word “justice” does not appear in the new Computing Curriculum 2020, and the word “equity” appears only once.) There are computer scientists who tell me that there is only one computer science for all students. Their argument is that better engineering practices help everyone — if those computational scientists, journalists, and artists just programmed like software engineers, the world would be a better place. Their code would be more robust, more secure, and more extensible. That is likely true, but that perspective is misunderstanding the role of code in doing science and making art. You don’t critique the poet for not writing like a journalist or a novelist. These are different activities with different goals. We should teach non-CS majors with courses that serve their needs, speak to their identities, and support their values. We should not require all artists and scientists to think, act, and program like engineers just to take computing classes. A CS educator in the Bay area once tried to convince me that the most important purpose for courses for non-CS majors was to identify the potential for being great programmers. He claimed that there are programmers who are two magnitudes better than their peers, and identifying them is the most important thing we can do to support and advance the software companies on which our world economy depends. He argued that we should teach non-CS majors in order to identify and promote future engineers, not for their own purposes. I see his argument, but I do not agree that scientists, journalists, and artists are less important than engineers. As I consider this pandemic, I think about the role that computing has played in medicine, logistics, and media. Of course, we have relied heavily on software engineering, but I don’t believe that it’s more important than all the other roles that computing played. 3. Supporting diverse identities. There is a disconnect between efforts to broaden participation in computing and framing CS classes as engineering education. As I mentioned in my Blog@CACM post, I taught my first EER course this last semester and read a lot of EER papers. A big focus in engineering education is developing an engineering identity, i.e., helping students to see themselves as members of the engineering community of practice and as future professional engineers. One of my favorite papers that we read this semester was “Feminist Theory in Three Engineering Education Journals: 1995–2008” by Beddoes and Borrego. They define different branches of feminism. “Liberal feminism” is the goal for women to be treated the same as men, to get access to the same jobs at the same pay. “Standpoint feminism” points out that “liberal feminism” is too much about fitting women into the jobs and cultures of men, as opposed to asking how things would be different if created from a feminist standpoint. The professional identity of software engineering is male and White. That’s true from the demographics of who is in the Tech industry, but it’s also true from a historical perspective on the systemic bias in computing. Computing has become dominated by men, with many studies and books describing how women were forced out (see for example The Computer Boys Take Over and Programmed Inequality). Our tools privilege one part of the world. Every one of our mainstream programming languages is built on English keywords. That’s a barrier for 85% of the people on Earth. (Related point: I recommend Manuel Pérez Quiñones’ TED talk “Why I want My Voice Assistant to Speak Spainglish” in which he suggests that the homogenous background of American software engineers leads to few bilingual user interfaces — surprising when 60% of the human race is.) There’s the disconnect. We want students in computing with diverse perspectives and identities. But engineering education is about developing an identity as a future professional engineer. Professional software engineering is male and White. How do we prepare diverse students to be future software engineers when that professional identity conflicts with their identities? We should teach computing, even for CS majors, in ways that go beyond the engineering education goal of developing a professional engineering identity. We might argue that we want everyone to have the opportunity to participate in CS, but that’s taking the “liberal” perspective. Broadening participation should not be about fitting everyone into the same identity. It’s not enough to say that everyone has the chance to learn the programming languages that are based in English, that are grounded in Western epistemologies, and where the contributions of women have been marginalized. We need to find ways to accept and support the unique identities of diverse people. One way to support a “standpoint” perspective on computing education might be to support activity over identity in our CS curriculum. At Georgia Tech, the undergraduate computer science degree is based on Threads (see website). There are threads for Intelligence, People, Media, Devices, and Theory — eight of them in all. A BS in CS at Georgia Tech is any two threads, so there are 28 paths to a degree. This allows students to define their professional identity in terms of what they are going to DO with computing. “I’m studying People and Devices” is something a student might say who wants to create consumer computational devices like Echo or Roomba. The Threads curriculum allows students to make choices about professional identity, in terms of how they want to contribute to society. Of course, some of our students want to become software engineers at a FAANG company. That’s great, and we should support them and prepare them for those roles. But we should not require those identities. Computing education is about more than producing software engineers who have the traditional engineering identity. The Bigger Part of Computing Education. I claimed at the start of this post that “computing education that is outside the intersection with engineering education is much bigger than the part inside.” All the studies I have seen say that’s true. While CS undergraduate enrollment has been exploding, the number of end-user programmers is likely a magnitude larger than the number of professional software developers. K-12 is about 50 million students in the United States, and computing education is available to most of them. The number of computing education students who are NOT seeking an engineering identity or profession is much larger than those who are. That’s the more-than-engineering challenge for computing education. My thanks to Leo Porter, Cynthia Lee, Adrienne Decker, Briana Morrison, Ben Shapiro, Bahare Naimipour, Tamara Nelson-Fromm, and Amber Solomon who gave me comments on earlier drafts of this post."
"6","2020-06-01","2023-03-24","https://computinged.wordpress.com/2020/06/01/goals-for-cs-education-include-getting-students-in-the-door-but-desired-outcomes-still-unclear/","ACM Inroads has published an essay by Scott Portnoff “A New Pedagogy to Address the Unacknowledged Failure of American Secondary CS Education” (see link here). The Inroads editors made a mistake in labeling this an “article.” It’s an opinion or editorial (op-ed) piece. Portnoff presents a single perspective with little support for his sometimes derogatory claims. I have signed a letter to the editors making this argument. Portnoff is disparaging towards a group of scholars that I admire and learn from: Joanna Goode, Jane Margolis, and Gail Chapman. He makes comments about them like “had CSEA educators been familiar with both CS education and the literature.” Obviously, they are familiar with the research literature. They are leading scholars in the field. Portnoff chides the CSEA educators for not knowing about the “Novice Programmer Failure problem” — which is a term that I believe he invented. It does not appear in the research literature that I can find. In this blog, I want to try to get past his bluster and aggressive rhetoric. Let’s consider his argument seriously. In the first part, he suggests that current approaches to secondary school CS education in the United States are failing. His measure of success is success rates on the Advanced Placement Computer Science Principles exam. He also talks about going on to succeed in other CS courses and about succeeding at industry internships, but he only offers data about AP CSP. He sees the reason for the failure of US CS education in high school is that we have de-emphasized programming. He sees programming as being critical to success in the AP exams, in future CS classes, and in industry jobs. Without an emphasis on programming, we will likely continue to see low pass rates on the AP CS Principles exam among female and under-represented minority students. In the second part, Portnoff lays out his vision for a curriculum that would address these failings and prepare students for success. He talks about using tools like CodingBat (see link here) so that students get enough practice to develop proficiency. He wants a return to a focus on programming. What Portnoff misses that there is not consensus around a single point of failure or a set of goals about CS Education. In general, I agree with his approach for what he’s trying to do. I value the work of the CSEA educators because the problems that they’re addressing are harder ones that need more attention. The biggest problem in US high school CS education is that almost nobody takes it. Less than 5% of US high school students attend any CS classes (see this blog post for numbers), and the students we currently have are overwhelmingly male, white/Asian, and from wealthier schools. Of course, we want students to succeed at the Advanced Placement exams, at further CS courses, and at industry jobs. But if we can’t get students in the door, the rest of that barely matters. It’s not hard to create high-quality education only for the most prepared students. Getting diverse students in the door is a different problem than preparing students for later success. CSEA knows more about serving students in under-served communities than I do. They know more about how to frame CS in such a way that principals will accept it and teachers will teach it. That’s a critical need. We need more of that, and we probably need a wide range of approaches that achieve those goals. A focus on programming is critical for later success in the areas that Portnoff describes. The latest research supporting that argument comes from Joanna Goode (as I described in this blog post), one of the educators Portnoff critiques. Joanna was co-author on a paper showing that AP CS A success is more likely to predict continuation in CS than AP CSP success. I’m also swayed by the Weston et al. article showing that learning to program led to greater retention among female students in the NCWIT Aspirations awards programs (see link here). I also agree with Portnoff that learning to program requires getting enough practice to achieve some level of automaticity. CodingBat is one good way to achieve that. But that takes a lot of motivation to keep practicing that long and hard. We achieve reading literacy because there are so many cultural incentives to read. What will it take to achieve broad-based programming literacy, and not just among the most privileged? Portnoff tells us that his experience suggests that his approach will work. I’m not convinced — I think it might work with the most motivated students. He teaches in the same school district where the ExploringCS class was born. But Portnoff teaches in one of LAUSD’s premier magnet schools, which may mean that he is seeing a different set of students. An important goal for CS Education is to get students in the door. I’m not sure that Portnoff agrees with that goal, but I think that many involved in CS education would. There is less consensus about the desired outcomes from CS education. I don’t think that CSEA has the same definition of success that Portnoff does. They care about getting diverse students to have their first experience with computer science. They care about students developing an interest, even an affinity for computing. They care more about creating a technically-informed citizenry than producing more software developers. Portnoff doesn’t speak to whether CSEA is achieving their desired outcomes. He only compares them to his goals which are about continuing on in CS. There is a tension between preparing students for more CS (e.g., success in advanced classes and in jobs) and engaging and recruiting students. In a National Academy study group I’m working in, we talk about the tension between professional authenticity (being true to the industry) and personal authenticity (being personally motivating). The fact that so few students enroll in CS, even when it’s available in their school, is evidence that our current approaches aren’t attractive. They are not personally authentic. We need to make progress on both fronts, but considering how over-full undergraduate CS classes are today, figuring out the recruitment problem is the greater challenge to giving everyone equitable access to CS education. I just learned about a new paper in Constructionism 2020 from David Weintrop, Nathan Holbert, and Mike Tissenbaum (see link here) that makes this point well, better than I can here. “Considering Alternative Endpoints: An Exploration in the Space of Computing Educations” suggests that we need to think about multiple goals for computing education, and we too often focus just on the software development role: While many national efforts tend to deploy rhetoric elevating economic concerns alongside statements about creativity and human flourishing, the programs, software, curricula, and infrastructure being designed and implemented focus heavily on providing learners with the skills, practices, and mindset of the professional software developer. We contend that computing for all efforts must take the “for all” seriously and recognize that preparing every learner for a career as a software developer is neither realistic nor desirable. Instead, those working towards the goal of universal computing education should begin to consider alternative endpoints for learners after completing computing curricula that better reflect the plurality of ways the computing is impacting their current lives and their futures. "
"7","2020-05-04","2023-03-24","https://computinged.wordpress.com/2020/05/04/sigcse-2020-papers-freely-available-ap-csa-over-ap-csp-for-diversifying-computing-and-a-tour-of-computing-ed-research-in-one-hour/","My Blog@CACM post for this month was about my first stop on my tour of SIGCSE 2020 papers (see link here). While the SIGCSE 2020 conference was cancelled, the papers are freely available now through the end of June — see all the proceedings here. I’ve started going through the proceedings myself. The obvious place to start such a tour is with the award-winning papers. My Blog@CACM post is on the paper from An Nguyen and Colleen M. Lewis of Harvey Mudd College on the negative impact of competitive enrollment policies (having students enroll to get into CS, or requiring a higher-than-just-passing GPA to get into the computing major) on students’ sense of belonging, self-efficacy, and perceptions of the department. I said that this was the first stop on my tour, but that’s not really true. I’d already looked up the paper Does AP CS Principles Broaden Participation in Computing?: An Analysis of APCSA and APCSP Participants (see link here), because I’d heard about it from co-author Joanna Goode. I was eager to see the result. They show that AP CS Principles is effectively recruiting much more diverse students than the AP CS A course (which is mostly focused on Java programming). But, AP CS A students end up with more confidence in computing and much more interest in computing majors and tech careers. Maybe CSA students had more interest to begin with — there is likely some selection bias here. This result reminds me of the Weston et al result (see blog post here) showing that the female high school students they studied continued on to tech and computing majors and careers if they had programming classes. I’ve been reading The Model of Domain Learning: Understanding the Development of Expertise (see Amazon link) which offers one explanation of what’s going on here. Pat Alexander’s Model of Domain Learning points out that domain knowledge is necessary to have sustained interest in a domain. You can draw students in with situational interest (having activities that are exciting and engage novices), but you only get sustained interest if they also learn enough about the domain. Maybe AP CSP has more situational interest, but doesn’t provide enough of the domain knowledge (like programming) that leads to continued success in computing. In my SIGCSE 2020 Preview blog post (posted just two days before the conference was posted), I mentioned the cool session that Colleen Lewis was organizing where she was going to get 25 authors to present the entire 700+ page Cambridge Handbook of Computing Education Research in 75 minutes. Unfortunately, that display of organizational magic didn’t occur. However, in a demonstration of approximately the same level of organizational magic, Colleen got the authors to submit videos, and she compiled a 55 minute version (which is still shorter than reading the entire tome) — see it on YouTube here. There are lots of other great papers in the proceedings that I’m eager to get into. A couple that are high on my list: Please share in the comments your favorite papers with links to them."
"8","2019-10-14","2023-03-24","https://computinged.wordpress.com/2019/10/14/results-from-longitudinal-study-of-female-persistence-in-cs-ap-cs-matters-after-school-programs-and-internships-do-not/","NCWIT has been tracking their Aspirations in Computing award applicants for several years. The Aspirations award is given to female students to recognize their success in computing. Tim Weston, Wendy DuBow, and Alexis Kaminsky have just published a paper in ACM TOCE (see link here) about their six year study with some 500 participants — and what they found led to persistence into CS in College. The results are fascinating and somewhat surprising — read all the way to the end of the abstract copied here: While demand for computer science and information technology skills grows, the proportion of women entering computer science (CS) fields has declined. One critical juncture is the transition from high school to college. In our study, we examined factors predicting college persistence in computer science and technology related majors from data collected from female high school students. We fielded a survey that asked about students’ interest and confidence in computing as well as their intentions to learn programming, game design, or invent new technology. The survey also asked about perceived social support from friends and family for pursuing computing as well as experiences with computing, including the CS Advanced Placement (AP) exam, out-of-school time activities such as clubs, and internships. Multinomial regression was used to predict persistence in computing and tech majors in college. Programming during high school, taking the CS Advanced Placement exam, and participation in the Aspirations awards program were the best predictors of persistence three years after the high school survey in both CS and other technology-related majors. Participation in tech-related work, internships, or after-school programs was negatively associated with persistence, and involvement with computing sub-domains of game design and inventing new applications were not associated with persistence. Our results suggest that efforts to broaden participation in computing should emphasize education in computer programming. There’s also an article at Forbes on the study which includes recommendations on what works for helping female students to persist in computing, informed by the study (see link here). I blogged on this article for CACM here. That AP CS is linked to persistence is something we’ve seen before, in earlier studies without the size or length of this study. It’s nice to get that revisited here. I’ve not seen before that high school work experience, internships, and after-school programs did not work. The paper makes a particular emphasis on programming: While we see some evidence for students’ involvement in computing diverging and stratifying after high school, it seems that involvement in general tech-related fields other than programming in high school does not transfer to entering and persisting in computer science in college for the girls in our sample. Understanding the centrality of programming is important to the field’s push to broaden participation in computing. (Italics in original.) This is an important study for informing what we do in high school CS. Programming is front-and-center if we want girls to persist in computing. There are holes in the study. I keep thinking of factors that I wish that they’d explored, but they didn’t — nothing about whether the students did programming activities that were personally or socially meaningful, nothing about role models, and nothing about mentoring or tutoring. This paper makes a contribution in that we now know more than we did, but there’s still lots to figure out.   "
"9","2022-05-26","2023-03-24","https://computinged.wordpress.com/2022/05/26/ruthe-farmers-important-big-idea-the-last-mile-education-fund-to-increase-diversity-in-stem/","I met Ruthe Farmer (Wikipedia page) when she represented the Girl Scouts in the early days of the NSF Broadening Participation in Computing (BPC) alliances. She played a significant role in NCWIT. I had many opportunities to interact with her in her roles at NCWIT and CSforAll. Ruthe organized the White House summit with ECEP in 2016 (see blog post) when she was with the Office of Science and Technology Policy in the Obama administration. Her latest project may be the one that’s closest to my heart. Ruthe has founded and is CEO of the Last Mile Education Fund. Their mission is: The Last Mile Education Fund offers a disruptive approach to increasing diversity in tech and engineering fields by addressing critical gaps in financial support for low-income underrepresented students within four semesters of graduation. I was still at Georgia Tech when I heard about the completion microgrant program at Georgia State. Georgia State was (and still is) making headlines for their use of big data to boost retention and get students graduated. Georgia State is the kind of institution where over half of their students are classified as low-income. There is a huge social benefit when GSU can improve their retention statistics. The completion grant program was started in 2011 and focuses on students who could graduate (e.g., their grades were fine), but they had run out of money before they finished. The grant program gave no more than $2,500 per student (Inside Higher Education article). Today, we know that the average grant has actually been $900. That’s a shockingly low cost for getting students the rest of the way to their college degree. It’s a great idea, and deserves to be applied more broadly than one university. The Last Mile Education Fund especially focuses on getting students from diverse backgrounds into STEM careers. These last gaps in funding are among the barriers that keep girls out from STEM careers (where Ruthe’s focus was in the Girl Scouts and NCWIT) but also low-income students and people of color. I was reminded to write about the Last Mile Education Fund by Alfred Thompson’s blog (see post here). He’s got a lot more information about the Last Mile Education Fund there. I am a first generation graduate. My parents and I had no idea how to even apply to college. I am forever grateful that Wayne State University found me in my high school, guided me to applying, and gave me a scholarship to attend. I’m a privileged white guy. Not everybody gets the opportunities I had. It’s critical to extend the opportunity of a higher education degree to a broader and more diverse audience. The Last Mile Education Fund is important for closing the gap for students from diverse backgrounds. I’m a monthly supporter, and I encourage you to consider giving, too."
"10","2016-12-02","2023-03-24","https://computinged.wordpress.com/2016/12/02/researchpractice-partnerships-and-finding-the-sweet-spots-notes-from-the-ecep-and-white-house-summit/","I wrote back in October about the summit on state implementation of the CS for All initiative which we at Expanding Computing Education Pathways (ECEP) alliance organized with the White House Office of Science and Technology Policy (OSTP). You can see the agenda here and a press release on the two days of meetings here. I have been meaning to write about some of the lessons I learned in those two days, but have been simply slammed this month. I did finally write about some of the incremental steps that states are taking towards CS for All in my Blog@CACM post for November. That post is about the models of teacher certification that are developing, the CSNYC school-based mandate, and New Hampshire’s micro-certifications. In this post, I want to tell you about a couple of the RPC ideas that I found most compelling. The first part of the day at the Eisenhower Executive Office Building (EEOB) on the White House grounds was organized by the Research+Practice Collaboratory (RPC). I was the moderator for the first panel of the day, where Phil Bell, Nichole Pinkard, and Dan Gallagher talked about the benefits of combining research plus practice. I was excited to hear about the amazing work that Nichole Pinkard (pictured above) is doing in Chicago, working with Brenda Wilkerson in Chicago Public Schools. Nichole is a learning scientist who has been developing innovative approaches to engaging urban youth (see her Digital Youth Network website). She has all these cool things she’s doing to make the CS for All efforts in Chicago work. She’s partnering with Chicago parks and libraries — other than schools, they’re the ones who cover the city and connect with all kids. She’s partnering with Comcast to create vans that can go to parks to create hotspots for connectivity. Because she’s a researcher working directly with schools, they can do things that researchers alone would find hard to do — like when a student shows up to a CS activity, she can email the student’s parents to tell them the next steps to make sure that they continue the activity at home. There was a second panel on “Finding the Sweet Spot: What Problems of Practice are Ripe for Knowledge Generation?” I didn’t know Shelley Pasnik from the Center for Children and Technology, and she had an idea I really liked that connected to one of Nichole’s points. Shelley emphasizes “2Gen learning,” having students bring with them parents or even grandparents so that there are two generations of learners involved. The older generation can learn alongside the student, and keep the student focused on the activity. I know that the RPC folks are producing a report on their activity at the summit, so I’m sure we’ll be hearing more about their work."
"11","2016-10-28","2023-03-24","https://computinged.wordpress.com/2016/10/28/ecep-and-white-house-symposium-on-state-implementation-of-cs-for-all/","I was thrilled when I got this message two weeks ago:  We have been working for months now on a big meeting organized by ECEP with the Research+Practice Collaboratory and Ruthe Farmer of the White House Office of Science and Technology Policy (OSTP). The goal is to organize state and federal leaders in growing CS for All in the states. Here’s my written-for-ECEP description of the agenda (not official, not vetted by OSTP, etc.): Friday The first part of the Friday sessions at the White House Office of Science and Technology Policy (OSTP) is aimed at strengthening connections between research and practice. The NSF’s CS10K efforts and the President’s CS for All Initiative have created an unprecedented rise in the implementation of CS education efforts across the United States. Making education reform systematic and sustainable requires cross-sector efforts with shared goals and meaningful data collection that can inform practice. We need to make sure that we are building and using evidence-based knowledge about what’s happening in our CS for All efforts. CS for all is a rare education research opportunity. The American education canon does not change often. We need to create research-practice partnerships to improve our understanding of what works and why. The Research+Practice Collaboratory (Bronwyn Bevan, Phil Bell, Bill Penuel) will be bringing in a group of learning sciences researchers (including Shuchi Grover, Nichole Pinkard, and Kylie Peppler) and practitioners to work with the ECEP state teams. The goal is to learn how research-practice partnerships can help the field identify key questions and areas for building and sustaining evidence-based practice. The afternoon session is focused on understanding where the state’s are today. ECEP Evaluators, Sagefox, will share with state groups benchmark data. We will review data on the evaluation of the efforts to make Exploring CS, CS Principles, Bootstrap, and Code.org curricula and professional development available across the country. As a group, we will review state efforts in computer science education implementation and reform. States identify their greatest successes and identify their most pressing needs. The evening session at OSTP is focused on making the President’s CS for All initiative work at the state level. In the United States, K-12 curriculum and policies are decided at the state-level. Obama Administration officials will help the state teams to understand the goals of the CS for All initiative. Four state teams will share their successes and efforts, which differ considerably from one another as they meet the unique challenges and objectives of their state’s education system. Saturday The CS for All initiative means that we all students in all schools in all districts get access to CS education. Each of our 16 states and Puerto Rico will summarize their successes and lessons learned in 3 minute madness talks. We’ll have two panels — one on negotiating state structures and processes when implementing CS for All, and one on how to make sure that we broaden participation while we aim for CS for All (to avoid being CS Just For Rich Kids). We will have a luncheon keynote from Cameron Wilson of Code.org on how they are aiming to create CS education that reaches all students. The CS for All initiative requires us to reach all students in a system and sustainable way. State teams develop and share their strategies to reach broader and deeper."
"12","2022-12-03","2023-03-24","https://computinged.wordpress.com/2022/12/03/doing-a-little-housekeeping-and-rebranding/","I discovered today that I have written over 2,500 blog posts here on WordPress, starting in June 2009. There was a time when I was writing daily. This is the first post I’ve written here since June. From a pace of a new post every day, to once every six months. Our lives change so much from year to year. Thirteen years feels like so many changes ago. I live in a different state, working for a different University. Even the name of the department where I work has changed — I was in the School of Interactive Computing at Georgia Tech. Now I’m in the Division of Computer Science and Engineering in the College of Engineering at the University of Michigan and I direct the Program in Computing for the Arts and Sciences. I changed the name of this blog once before. When I started out here in 2009, there were few websites and blogs on computing education. I just called it the Computing Education Blog. But as the field grew and there were more and more terrific sites helping teachers do computing education, I renamed the site Computing Education Research Blog. My focus was on the research, and not on how to be a great computing educator. Today, there are many great resources even on Computing Education Research. I particularly recommend https://csedresearch.org/. I attended one of their on-line panels this last week — such interesting ideas and such a wonderful and diverse group of researchers. I have been reticent to post under a banner saying “Computing Education Research” because this site has pretty broad visibility now. There are many more subscribers than the first few years. Newcomers might come here with that title and expect to read a newsletter or an authoritative perspective on the field — that’s an overwhelming responsibility. I recognize that I’m a senior (read: “old”) voice in the field, but I am just one of many voices in the field. Like any academic, I want to share what we’re working on and what I’m thinking about. I do not want to my posts here to appear like I’m speaking for the field. So, I have renamed the blog for a second time: Computing Ed Research – Guzdial’s Take. This blog represents my perspective. That’s how I’ve always thought of the blog, but I want to make it explicit. I have updated the Guzdial Papers page for the first time in a decade, and changed the About page. Thanks for reading!"
"13","2022-06-28","2023-03-24","https://computinged.wordpress.com/2022/06/28/new-icer-paper-award-for-lasting-impact-guest-blog-post-from-quintin-cutts/","I serve on the ACM SIGCSE International Computing Education Research (ICER) conference steering committee. Quintin Cutts is Chair of the Steering Committee. I offered to share his announcement of a new Lasting Impact paper award here in the blog. This is an invitation to nominate a paper for the ICER Lasting Impact Award 2022, or to offer to serve on the judging panel. Which ICER paper has caused you to change the way you teach, or the direction of your research? Which has helped you to see and understand CS education more clearly? Has it also had an impact right across the community? I know which paper I would nominate, if I were allowed (but I’m not! – see below). It’s been a game-changer for me, and across CS education. Which one has done this for you and others? 1. Description of the award The ICER Lasting Impact Award recognizes an outstanding paper published in the ICER Conference that has had meaningful impact on computing education. Significant impact can be demonstrated through citations, adoptions and/or adaptations of techniques and practices described in the paper by others, techniques described in the paper that have become widely recognized as best practices, further theoretical or empirical studies based on the original work, or other evidence the paper is an outstanding work in the domain of computing education research. The paper must have been published in ICER at least 10 years prior (i.e., for the 2022 award, papers must have been published in or before ICER 2011.) 2. Requirements for nominating a paper a. An ACM Digital Library link to the paper being nominated. b. A brief summary of the technical content of the paper and a brief explanation of its significance (limit 750 words). c. Signatories to the summary and significance statement, with at least two current SIGCSE members. The name, contact email address and affiliation of each person who has agreed to sign the endorsement is acceptable. 3. Nominating yourself as a potential award judge Please consider nominating yourself as a potential judge. We are seeking judges who have significant experience in the ICER community. We will ask judges to serve who do not have nominated papers, to avoid conflicts of interest. 4. Additional Notes a. ICER Steering Committee members cannot nominate papers. b. The ICER Steering Committee chair, Quintin Cutts, will run the process this year, and his papers cannot be nominated. c. In this inaugural year of the Award, we will not have a pre-defined rubric. We will ask the judges to report the rationale for their decision, and the report will be made public when we announce the winner. 5. Timetable (all times, 23.59 AoE) 17th July: Nominations close. 18th July: Judging panel selected from the candidate pool, depending on the number of nominations and conflicts. Papers sent out to the judges. 2nd August: Judging panel sits to deliberate and makes a decision, which is passed to PC chairs. Winner notified. The award will be presented at the ICER 2022 conference in Lugano, Switzerland either in person or on-line. 6. Submitting nominations Please send both paper nominations and judging self-nominations to me, Quintin Cutts at Quintin.Cutts@glasgow.ac.uk"
"14","2022-06-20","2023-03-24","https://computinged.wordpress.com/2022/06/20/programming-in-blocks-let-far-more-people-code-but-not-like-software-engineers-response-to-the-ofsted-report/","A May 2022 report from the UK government Research Review Series: Computing makes some strong claims about block-based programming that I think are misleading. The report is summarizing studies from the computing education research literature. Here’s the paragraph that I’m critiquing: Block-based programming languages can be useful in teaching programming, as they reduce the need to memorise syntax and are easier to use. However, these languages can encourage pupils to develop certain programming habits that are not always helpful. For example, small-scale research from 2011 highlighted 2 habits that ‘are at odds with the accepted practice of computer science’ (footnote). The first is that these languages encourage a bottom-up approach to programming, which focuses on the blocks of the language and not wider algorithm design. The second is that they may lead to a fine-grained approach to programming that does not use accepted programming constructs; for example, pupils avoiding ‘the use of the most important structures: conditional execution and bounded loops’. This is problematic for pupils in the early stages of learning to program, as they may carry these habits across to other programming languages. I completely agree with the first sentence — there are benefits to using block-based programming in terms of reducing the need to memorize syntax and increasing usability. There is also evidence that secondary school students learn computing better in block-based programming than in text-based programming (see blog post). Blanchard, Gardner-McCune, and Anthony found (a Best Paper awardee from SIGCSE 2020) that university students learned better when they used both blocks and text than when they used blocks alone. The two critiques of block-based programming in the paragraph are: Key Point #1: Block-based programming doesn’t cause either of those critiques. What about programming with blocks rather than text could cause either of these to be true? I’m programming a lot in Snap! these days for two new introductory computing courses I’m developing at the University of Michigan. I’ve been enjoying the experience. I don’t think that either of these critiques are true about my code or that of the students helping me develop the courses. I regularly do top-down programming where I define high-level custom blocks, as I design my program overall. Not only do I use conditional execution and bounded loops regularly, but Snap allows me to create new kinds of control structures, which has been a terrific help as I create block-based versions of our Teaspoon languages. My experience is only evidence that those two statements need not be true, just because the language is block-based. I completely believe that the studies being cited in this research report saw and accurately describe exactly these points — that students worked bottom-up and that they rarely used conditioned execution and bounded loops. I’m not questioning the studies. I’m questioning the inference. I don’t believe at all that those are caused by block-based languages. Key Point #2: Block-Based Programming is Scaffolding, but not Instant Expertise. For those not familiar, here are two education research terms that will be useful in making my argument. Let’s call the task that students were facing in the studies reviewed in the report: “Building a program using good design and with conditioned execution.” If we asked students to achieve this task in a text-based language, we would be asking them to perform the task without scaffolding. Here’s what I would expect: Fewer people succeed. More people drop-out. Pretty common CS Ed result. If you just compare performance text vs. blocks, text looks better. For a full picture, you also have to look at who got left out. So let’s go back to the actual studies. Why didn’t we see good design in students’ block-based programs? Because the far edge of the ZPD is not necessarily expert practice. Without scaffolding (block-based programming languages), many students are not able to succeed at all. Giving them the scaffolding doesn’t make them experts. The scaffolding can take them as far as the ZPD allows. It may take more learning experiences before we can get to good design and conditioned execution — if that even makes sense. Key Point #3: Good software engineering practice is the wrong goal. Is “building a program using good design and with conditioned execution” really the task that students were engaging in? Is that what we want student to succeed at? Not everyone who learns to program is going to be a software engineer. (See the work I cite often on “alternative endpoints.”) Using good software engineering practices as the measure of success doesn’t make sense, as Ben Shapiro wrote about these kinds of studies several years ago on Twitter (see his commentary here, shared with his permission). A much more diverse audience of students are using block-based programming than ever used text-based programming. They are going to solve different problems for different purposes in different ways (a point I made in this blog post several years ago). Few US teachers in K-12 are taught how to teach good software engineering practice — that’s simply not their goal (a point that Aman Yadav made to me when discussing this post). We know from many empirical studies that most Scratch programs are telling a story. Why would you need algorithmic design and conditioned execution for that task? They’re not doing complicated coding, but the little bit of coding that they’re using is powerful and is engaging for students — and relatively few students are getting that. I’m far more concerned about the inequitable access to computing education than I am about whether students are becoming good software engineers. Summary: It’s inaccurate to suggest that block-based programming causes bad programming habits. Block-based programming makes programming far more accessible than it ever has been before. Of course, we’re not going to see expert practice as used in text-based languages for traditional tasks. These are diverse novices using a different kind of notation for novel tasks. Let’s encourage the learning and engagement appropriate for each student."
"15","2018-08-20","2023-03-24","https://computinged.wordpress.com/2018/08/20/all-students-learning-programming-do-better-with-block-based-languages-and-the-impact-is-greatest-for-female-and-minority-students/","I learned about this study months ago, and I was so glad to see it published in ICLS 2018 this last summer. The paper is “Blocks or Text? How Programming Language Modality Makes a Difference in Assessing Underrepresented Populations” by David Weintrop, Heather Killen, and Baker Franke. Here’s the abstract: Broadening participation in computing is a major goal in contemporary computer science education. The emergence of visual, block-based programming environments such as Scratch and Alice have created a new pathway into computing, bringing creativity and playfulness into introductory computing contexts. Building on these successes, national curricular efforts in the United States are starting to incorporate block-based programming into instructional materials alongside, or in place of, conventional text-based programming. To understand if this decision is helping learners from historically underrepresented populations succeed in computing classes, this paper presents an analysis of over 5,000 students answering questions presented in both block-based and text-based modalities. A comparative analysis shows that while all students perform better when questions are presented in the block-based form, female students and students from historically underrepresented minorities saw the largest improvements. This finding suggests the choice of representation can positively affect groups historically marginalized in computing. Here’s the key idea as I see it. They studied over 5,000 high school students learning programming. They compared students use block-based and text-based programming questions. Everyone does better with blocks, but the difference is largest for female students and those from under-represented groups. Here’s the key graph from the paper:  So, why wouldn’t we start teaching programming with blocks? There is an issue that students might think that it’s a “toy” and not authentic — Betsy DiSalvo saw that with her Glitch students. But a study with 5K students suggests that the advantages of blocks swamp the issues of inauthenticity. The International Conference on the Learning Sciences (ICLS) 2018 Proceedings are available here."
"16","2015-01-12","2023-03-24","https://computinged.wordpress.com/2015/01/12/african-american-students-prefer-graphical-or-text-based-programming-languages-depending-on-career-goals/","One of the results from Betsy DiSalvo’s dissertation on Glitch (see a post on that work) that I found most interesting was that there wasn’t a clear winner between graphical, drag-and-drop programming (Alice) and text-based programming (Python). She has now written up that part of the dissertation work, and it’s linked below.  To determine appropriate computer science curricula, educators sought to better understand the different affordances of teaching with a visual programming language (Alice) or a text-based language (Jython). Although students often preferred one language, that language wasn’t necessarily the one from which they learned the most. via IEEE Xplore Abstract – Graphical Qualities of Educational Technology: Using Drag-and-Drop and Text-Based Programs for Intro…."
"17","2022-06-14","2023-03-24","https://computinged.wordpress.com/2022/06/14/getting-feedback-on-teaspoon-languages-from-cs-educators-and-researchers-at-the-raspberry-pi-foundation-seminar-series/","In May, I had the wonderful opportunity to speak at the Raspberry Pi Foundation Seminar series. I’ve attended some of these seminars before. I highly recommend them (see past seminars here). It’s a terrific format. The speaker presents for up to a half hour, then everyone gets put into a breakout room for small group discussions. The participants and speaker come back for 30-35 minutes of intensive Q&A — at least, it feels “intensive” from the speaker’s perspective. The questions you get have been vetted through the breakout room process. They’re insightful, and sometimes critical, but always in a constructive way. I was excited about this opportunity because I wanted to make it a hands-on session where the CS teachers and researchers who attended might actually use some Teaspoon Languages and give me feedback on them. I have rarely had the opportunity to work with CS teachers, so I was excited for the opportunity. Sue Sentance wrote up a very nice blog post describing my talk (thank you!) — see here. The video of the talk and discussion is available. You can watch the whole thing, or, you can read the blog post then skip ahead to where the conversation takes place (around 26:00 in the video). If you have been wondering, “Why isn’t Mark just using Logo, Scratch, Snap, or NetLogo? We already have great tools! Why invent new languages that are clearly less powerful than what we already have?”, then you should jump to 34:38 and see Ken Kahn (inventor of ToonTalk) push me on this point. The whole experience was terrific for me, and I hope that it’s valuable for the viewer and attendees as well. The questions and comments indicated understanding and appreciation for what I’m trying to do, and the concerns and criticisms are valuable input for me and my team. Thanks to Sue, Diana Kirby, the Raspberry Pi Foundation, and all the attendees!"
"18","2022-05-25","2023-03-24","https://computinged.wordpress.com/2022/05/25/three-types-of-computing-education-research-cs-more-than-cs-and-everyone/","In February, I was invited to give a lecture at the University of Washington’s Allen School. I had a great day visiting there, even though it was all on Zoom. My talk is available on YouTube: I got a chance to talk to Jeff Heer and Amy Ko before my visit. The U-W CSE department had been thinking about making a push into computing education research. They suggested that I describe the lay of the land — and particularly, to identify where I fit in that space. What I do these days (e.g. Teaspoon languages for history and mathematics classes) isn’t in the mainstream of computing education research, and it was important to tell people unfamiliar with the field, “There’s a lot more out there, and most of it doesn’t look like this.” CS Education research dates back to the late 1960’s (see the history chapter that Ben du Boulay and I wrote). ACM SIGCSE started in 1968 with a particular focus on how to teach Computer Science and Information Technology majors. Much of what SIGCSE has published is focused even more specifically on the first course, which we now call CS1. This is a big and important space. These majors will be significant drivers of the world’s infrastructure. There is a growing trend in computing education research to look at people who are learning programming (like in the first circles), but not for the purpose of becoming technology professionals. This includes K-12 CS teachers, end-user programmers, and conversational programmers. This kind of research sometimes appears in venues like CHI, CSCW, and VL/HCC, and occasionally in venues like SIGCSE, RESPECT, and ITiCSE. These circles aren’t scaled correctly by size of potential student population. By most measures, the outer circle (of people learning programming but who aren’t going to become technology professionals) is at least ten times the size of the student population inside the first circles. My research is one level further out. I’m interested in studying what should we be teaching to everyone, whether or not they’re going to program like professionals, and how do we facilitate that learning. These students might not use the same tools or languages, and certainly have different goals for studying computing. I offer three reasons for the broader “everyone” to learn computing (drawn from the work of C.P. Snow, Alan Perlis, Peter Naur, and Seymour Papert — see this earlier blog post): This outer circle is far bigger in terms of number of students potentially impacted than any of the inner circles. But it’s also where we know the least in terms of research results. Take a look at the talk for more on this way of thinking about the field, and how I connect that to existing research. I’d be interested in your perspective on this framing."
"19","2021-12-22","2023-03-24","https://computinged.wordpress.com/2021/12/22/helping-social-studies-teachers-to-teach-data-literacy-with-teaspoon-languages/","Last year, Tammy Shreiner and I received NSF funding to develop and evaluate computational supports for helping social studies teachers to teach data literacy and computing(see post here). We’re excited about what we’re doing and what we’re learning. Here’s an update on where we’re at on the project. We have a chapter in the new book by Aman Yadav and Ulf Dalvad Berthelsen Computational Thinking in Education: A Pedagogical Perspective. This is the publication where we introduce the idea of Teaspoon Languages. Teaspoon languages are a form of task-specific languages (TSP => Teaspoon — see?). Teaspoon languages: We say that we’re adding a teaspoon of computing to other subjects. The goal is to address the goal of “CS for All” by integrating computing into other subjects, by placing the non-CS subjects first. We believe that programming can be useful in learning other subjects. Our primary goal is to meet learning objectives outside of CS using programming. Teachers (and students eventually) will be learning foundational CS content — but not necessarily the content we typically teach in CS classes. All students should learn that a program is non-WYSIWYG, that it’s a specification of a computational process that gets interpreted by a computational agent, that programming languages can be in many forms, and that all students can be successful at programming. Our chapter, “Integrating Computing through Task-Specific Programming for Disciplinary Relevance: Considerations and Examples” (see link here) offers two use cases of how we imagine teaspoon languages to work in classrooms (history and language arts in these examples). The first use case is around DV4L, our Data Visualization for Learning tool. The second is around a chatbot language that we developed —- and have long since discarded. We develop our teaspoon languages in a participatory design process, where teachers try our prototypes in authentic tasks as design probes, and then they tell us what we got wrong and what they really want. Our current iteration is called Charla-bots and is notable for having user-definable languages. We have a variety of Charla-bot languages now, with English, Spanish, and mixed keywords. Our vision for teaspoon languages is a contrast with the “Hour of Code” approach. The “Hour of Code” is a one hour programming activity that many schools use in every grade, typically once a year during CS Ed Week (in early December). The great idea is to build familiarity and confidence in programming by showing students real computer science every year. The teaspoon languages approach is to imagine one or two little learning programming activity in every social studies, language arts, and mathematics class every year. Each of these languages is tiny and different. The goal is that by the time that US students take a CS class (typically, in high school or undergraduate), they will have had many programming experiences, have seen a variety of types of programming languages, and have a sense that “programming isn’t hard.” The second paper, “Using Participatory Design Research to Support the Teaching and Learning of Data Literacy in Social Studies” (see link here) was just presented in October by Tammy at CUFA, the College and University Faculty Assembly 2021 of the National Council of the Social Studies. (We have a longer form of this paper that we have just submitted to a journal.) This is an exciting paper for me because it’s exactly addressing the critical challenge in our work. We can design and implement all kinds of prototype Teaspoon languages, but to achieve our goals, teachers in disciplines other than CS have to see value and adopt them. The paper is about our workshops with practicing social studies teachers. Tammy has a goal to teach social studies teachers how to teach data literacy. She has built a large online education resource (OER) on teaching data literacy in social studies. Learning data literacy involves being able to read, comprehend, and argue with data visualizations, but also being able to create them. That’s where we come in. Her OER links to several tools for creating data visualizations, like Timeline JS, CODAP, and GapMinder. Most of them were not created for social studies teachers or classes. When we run these workshops, our tools are just in-the-mix. We offer scaffolding for using all of them. These are our design probes. The teachers use the tools and then tell us what they really want. These are our data, and we analyze them in detail —- as in this paper. Let’s jump to the bottom line: We’re not there yet. The teachers love the OER, but get confused about why should do in their classes. They find the tools for data visualization fascinating, but overwhelming. They like DV4L a lot: One pre-service teacher explained that they preferred our prototype over other tools because “(with the prototype DV4L) I found myself asking questions connected to the data itself, rather than asking questions in order to figure out how to work the visual.” Recently, I held a focus group with some social studies teachers who told me that they won’t use any computational tools —- they believe in teaching data visualization, but all created with pencil and ruler. That’s our challenge: Can we be more powerful, more enticing, and easy enough to beat out pencil and ruler? Our tool, DV4L, is purpose-built for these teachers, and they appreciate its advantages — and yet, few are adopting. That’s where we need to work next. If you know a social studies teacher who would want to keep informed about our work and perhaps participate in our workshops or studies, please have them sign up on our mailing list. Thank you! Often, what teachers tell us they really want suggests new features or entirely new tools. We have two ongoing studies where we are looking for design feedback from social studies teachers. If you know social studies teachers who would like to play with something new (and we’ll pay them for their time), would you please forward these to them? We’re looking for K-12 Social Studies teachers to try out our new timeline visualization tool, TimelineBuilder. TimelineBuilder has been made with teachers and usability in mind. In it, ‘events’ are added to a timeline using a form-based interface. Changes to the timeline can be seen automatically, with events showing up as soon as they are added. This study will consist of completing 2 surveys and 3 asynchronous activities guided by worksheets. All participants will be compensated with a $20 gift card for survey and activity completion. There is an additional option to be invited to a focus group, which will provide additional compensation. If you are interested in participating in this study, you can complete the consent form and 1st survey here. (Plain text Link: https://forms.gle/gwxfn5bRgTjyothF6 ) Please contact Mark Guzdial (mjguz@umich.edu) or Tamara Nelson-Fromm (tamaranf@umich.edu) with any questions. The University of Michigan Institutional Review Board Health Sciences and Behavioral Sciences has determined that this study is exempt from IRB oversight. Through our work with social studies educators thus far, we have designed the tools DV4L-Basic and DV4L-Scripting specifically to support data literacy standards in social studies classrooms. If you are a social studies middle or high school teacher, we would love to hear your feedback. If you can spare less than an hour of your time to participate in our study, we will send you a $50 gift card for your time and valuable feedback. If you are interested but want more details, please visit/complete the consent form here: https://forms.gle/yo3yWGThQ1wnhu7g7 For questions or concerns, please contact Mark Guzdial (mjguz@umich.edu) or Bahare Naimipour (baharen@umich.edu). Guzdial, M. and Tamara L. Shreiner. 2021. “Integrating Computing through Task-Specific Programming for Disciplinary Relevance: Considerations and Examples.” In Computational Thinking in Education: A Pedagogical Perspective, Aman Yadav and Ulf Dalvad Berthelsen (Eds). PDF of Submitted. Shreiner, Tamara L., Mark Guzdial, and Bahare Naimipour. 2021. “Using Participatory Design Research to Support the Teaching and Learning of Data Literacy in Social Studies.” Presented at CUFA, the College and University Faculty Assembly 2021 of the National Council of the Social Studies. PDF"
"20","2020-09-14","2023-03-24","https://computinged.wordpress.com/2020/09/14/lets-use-programming-in-social-studies-classes-nsf-funding-for-our-work-in-task-specific-programming-languages/","If we want all students to learn computer science (CS for All), we have to go to where the students are. Unfortunately, that’s not computer science class. In most US states, less than 5% of high school students take a course in computer science. Programming is applicable and useful in many domains today, so one answer is to use programming in science, mathematics, social studies, and other non-CS classes. We take programming to where the students are, and hope to increase their interest and knowledge about CS. I love that idea and have been working towards that goal for the last four years. But it’s a hard sell. I told the story in 2018 (see post here) about how the mathematics teachers rejected our pre-calculus course that integrated computing. How do we help non-CS teachers to see value in computing integrated into their classes? That’s the question Tammy Shreiner at Grand Valley State and I get three years to explore, thanks to a new grant from the US National Science Foundation in the research strand of the “CS for All” Program. Tammy teaches a course on “Data Literacy for Social Studies Teachers” at GVSU, and she (with her colleague Bradford Dykes) have been building an open educational resource (OER) to support data literacy education in social studies classes. We have been working with her to build usable and useful data visualization tools for her curriculum. Through the grant, we’re going to follow her students for three years: From taking her pre-service class, out into their field experiences, and then into their first classes. At each stage, we’re going to offer mentoring and workshops to encourage teachers to use the things we’ve showed them. In addition, we’ll work on assessments to see if students are really developing skills and positive attitudes about data literacy and programming. Just a quick glimpse into the possibilities here. AP CS Principles exam-takers are now about 25% female. AP US History is 56% female exam takers. There are fives times as many Black AP US History exam-takers as AP CSP exam-takers. It’s a factor of 14 for Hispanic students. Everyone takes history. Programming activities in a history class reach a far more diverse audience. I have learned so much in the last couple of years about what prevents teachers from adopting curriculum and technology — it’s way more complicated than just including it in their pre-service classes. Context swamps pre-service teaching. The school the teacher goes to influences what they adopt more than what they learned pre-service. I’ve known Anne Ottenbreit-Leftwich for years for her work in growing CS education in Indiana, but just didn’t realize that she is an expert on technology adoption by teachers — I draw on her papers often now. Here’s one early thread of this story. Bahare Naimipour, an EER PhD student working with me, is publishing a paper at FIE next month about our early participatory design sessions with pre-service social studies teachers. The two tools that teachers found most interesting were CODAP and Vega-Lite. Vega-Lite is interesting here because it really is programming, but it’s a declarative language with a JSON syntax. The teachers told us that it was powerful, flexible — and “overwhelming.” How could we create a scaffolded path into Vega-Lite? We’ve been developing a data visualization tool explicitly designed for history inquiry (you may remember seeing it back here). We always show at least two visualizations, because historical problems start from two accounts or two pieces of data that conflict. As you save graphs in your inquiry to the right, you’re likely going to lose track of what’s what. Click on one of them. This is a little declarative script, in a Vega-lite-inspired JSON syntax. It’s in a task-specific programming language, but this isn’t a program you write. This is a program the describes the visualization — code as a concise way of describing process. We now have a second version where you can edit the code, or use the pull-down menus. These are linked representations. Changing the menu changes the code and updates the graph. Changing the code updates the menu and the graph. Now the code is also malleable. Is this enough to draw students and teachers into programming? Does it make Vega-Lite less overwhelming? Does it lead to greater awareness of what programming is, and greater self-efficacy about programming tasks? We just had our first in-service teacher workshop with these tools in August. One teacher just gushed over them. “These are so great! How did I not know that they existed before?” That’s easy — they didn’t exist six months ago! We’re building things and putting them in front of teachers for feedback as quickly as we can, in a participatory design process. We make lots of mistakes, and we’re trying to document those, too. We’re about applying an HCI process to programming experience design — UX for PX. If you know a social studies teacher who would want to keep informed about our work and perhaps participate in our workshops, please have them sign up on our mailing list. Thank you!"
"21","2018-10-26","2023-03-24","https://computinged.wordpress.com/2018/10/26/what-would-convince-faculty-in-other-disciplines-that-programming-is-useful/","Recently I came across an article from the journal Issues in Information Systems, “Faculty perspectives on the information technology and analytics requirements of business students.” The authors surveyed 204 business faculty from 20 different universities. They found that “[N]early a third of respondents (32.6%) felt that computer programming skills should not be required at all. Interestingly, the same number (32.6%) also believe that Calculus should not be required of business students.” Below is the table with the results. About a third of faculty actually thought that all business students should take a three credit hour course in programming, but a third also felt that it shouldn’t be required at all. Details in the table below:  I’ve been working with the Georgia Department of Education on a new kind of pre-calculus course that uses computing to demonstrate the pre-calc concepts in a variety of contexts, e.g., scalar multiplication of a vector by reducing red in all the pixels in a picture, matrix multiplication by doing transforms of objects in 3-D space, periodicity of functions (like trigonometric functions) to generate sounds, etc. We did a careful mapping of each pre-calculus learning objective to relevant computing demonstrations, with multiple possible computing contexts for each pre-calculus learning objective. The course was rejected by the mathematics oversight board today. They didn’t buy it at all. Among the responses: “The description of the course states that it is ‘designed to prepare students for calculus and other college level mathematics courses,’ which they believe it does not” and “Members feel that computer science is not mathematics and should not be replacing a mathematics course.” I’m struck by these two stories. For me, programming is this useful new notation that can enhance learning in many disciplines. I’m swayed by the results with Bootstrap and with the CT-STEM effort at Northwestern. I hadn’t realized the extent to which the teachers in the non-CS disciplines were not buying the story. These create an interesting set of research questions to me. Why are faculty in non-CS disciplines dubious about the advantages of programming for their students? What do they think programming is? Maybe they’re right — maybe “programming” as we are currently defining it isn’t worth the credit hours for their students. How could we re-define programming (and programming languages and tools) to make it more useful?"
"22","2022-05-17","2023-03-24","https://computinged.wordpress.com/2022/05/17/college-board-stops-sharing-data-on-advanced-placement-computer-science-exams/","Barb Ericson has been gathering data on the Advanced Placement exams in Computer Science for a decade. The College Board made available data about who took the exam (demographic statistics) and how well they did for each state, for AP CS Level A and then for AP CS Principles when that exam started. When she first started in 2010, she would download each state’s reports, then copy the data from the PDF’s into her Excel spreadsheets. By the time she processed the 2020 data, it was mostly mechanized. Her annual reports on the AP CS exam results were posted here until 2018. She now makes her reports and her archived data collection available at her blog. However, the 2020 data she has posted are now the last data that are available. The College Board is no longer sharing data on AP CS exams. The archive is gone, and the 2021 data are not posted. Researchers can request the data. Barb did several months ago. She still hasn’t received it. She was told that they would sign an agreement with the University of Michigan to give her access to the data — but not to her personally. She would also have to promise that she wouldn’t share the data. Barb talked to someone at the College Board who explained that this is a cost-saving measure — but that doesn’t make much sense. The College Board still produces all the reports and distributes them to the states. They have just stopped making them publicly available. I agree with Joanna Goode in this tweet from April: Hold up. For a decade+, the College Board published Advanced Placement racial+gender participation data. After using public $ to develop #APCSPrinciples and claiming increased CS 'diversity', they have now removed access to the data. What's going on @CollegeBoard? #CSforAll The National Science Foundation paid for the development of the AP CS Principles exam explicitly to broaden participation in computer science. The goal was to create an AP CS exam that any high school could teach, that would be welcoming, and that would encourage more and more diverse students to discover computing. But now, the data showing us whether that’s working are being hidden. Why?"
"23","2019-03-04","2023-03-24","https://computinged.wordpress.com/2019/03/04/barbara-ericsons-ap-cs-report-for-2018-and-her-new-blog-cs4all-home-blog/","Barb has written her blog post about the 2018 AP data (see 2017 report here and 2016 report here), and this year, she’s using it to launch her own blog! Find it at https://cs4all.home.blog/ Every year I gather and report on the data for AP CS from the College Board which is at http://research.collegeboard.org/programs/ap/data/ There was a huge increase in Advanced Placement (AP) Computer Science Principles (CSP) exam takers nationally (from 43,780 in 2017 to 70, 864 in 2018 – a 62% increase). The Computer Science A (CSA) exam also grew (from 56,088 in 2017 to 60,040 in 2018 – a 7% increase). Source: AP CS Report for 2018"
"24","2018-01-08","2023-03-24","https://computinged.wordpress.com/2018/01/08/analysis-of-2017-ap-cs-exam-participation-from-barbara-ericson/","Like last year, I’m pleased that we can rely on others to write the blog post on Barbara Ericson’s annual AP CS exam data analyses. The College of Computing at Georgia Tech just wrote a nice description of the findings here: Positive Signs, But Diversity Still Lagging in AP Computer Science Exam Participation, and quoted in part below. Barb’s detailed analyses can be found here, and her detailed gender and race analyses are here. Barb has been doing more visualizations of her data. The GVU Center at Georgia Tech produced this nice summary of 20 years of AP CS A data, by state. Of the images she’s produced, this is the one that I find most compelling — the number of exam-takers per 100,00 people in the state. There are some big goose eggs and many single digit numbers out there.  According to Barbara Ericson, Georgia Tech research scientist and author of the analysis, the introduction this year of a new AP CS P course and exam contributed to the increases. “This is exactly what we hoped for. The CS principles course is on par with a college-level intro course for non-CS majors, so it is more accessible to more people,” said Ericson. Officials had estimated nearly 20,000 AP CS P exams would be taken this year. However, Ericson said the actual number topped 40,000. “Although overall growth in female and minority participation in the AP CS A exam was relatively flat this year, we’re hopeful that the introduction of the P exam will help swell A exam participation rates in the next few years.” Despite marginal growth among underrepresented students, overall participation in the AP CS A exam grew by 11.2 percent year-over-year in 2017. A record 60,519 U.S. high school students took the exam with an overall pass rate of 61.8 percent, up more than a percentage point from the previous year. “It’s great to see growth across the board, but there’s still a long way to go before AP computer science is as available in U.S. classrooms as, say, AP Physics or Calculus,” said Ericson. More than 170,000 students took the AP Physics 1 exam this year, while more than 316,000 took the AP Calculus AB exam."
"25","2016-10-10","2023-03-24","https://computinged.wordpress.com/2016/10/10/maryland-school-district-showcases-computer-science-education-at-all-levels-eceps-role-in-infrastructure/","The Expanding Computing Education Pathways (ECEP) Alliance, funded by NSF to support broadening participation in computing through state-level efforts, is one of the more odd projects I’ve been part of. I don’t know how to frame the research aspect of what we’re doing. We’re not learning about learning or teaching, nor about computer science. We’re learning a lot about how policy makers think about CS, how education is structured in different states (and how CS is placed within that structure), and how decision-making happens around STEM education. It’s not the kind of story that the press loves. We’re not building curriculum. We don’t work directly with students or teachers. We fund others to do summer camps and provide professional development. We help states figure out how to measure what’s going on in their state with computing education. We help organize (and sometimes fund) meetings, and we get states sharing with each other how to talk to policy makers and industry leaders. So it’s nice when we get a blurb like the below, in a story about the terrific efforts to grow CS for All in Charles County, MD. It’s amazing how much Charles County has accomplished in providing computing education in every school. I’m pleased that ECEP’s role got recognized in what’s going on there. Expanding Computer Education Pathways (ECEP) provided grant funding for summer camp computer programs. CCPS’s facilitators participate in their Train-the-Trainer webinars to design and plan an effective workshop, build an educator community, increase diversity in Computer Science and teach Computer Science content knowledge. ECEP also funded the Maryland Computer Science Summit in a joint effort with Maryland State Department of Education to bring over 200 attendees from every county in Maryland to share and set priorities for Computer Science education. Source: Maryland school district showcases computer science education at all levels | NSF – National Science Foundation"
"26","2022-02-25","2023-03-24","https://computinged.wordpress.com/2022/02/25/updates-contextualized-approaches-to-introduction-to-computing-from-the-center-for-inclusive-computing-at-northeastern-university/","From Nov 2020 to Nov 2021, I was a Technical Consultant for the Center for Inclusive Computing at Northeastern University, directed by Carla Brodley. (Website here.) CIC works directly with CS departments to create significant improvements in female participation in computer science programs. I’m no longer in the TC role, but I’m still working with CIC and Carla. I’ll be participating in a workshop that they’re running on Monday March 21. I’ll be talking about Media Computation in Python, and probably show some of the things we’re working on for the new classes here at Michigan. https://www.khoury.northeastern.edu/event/contextual-approaches-to-introduction-to-computing/ Contextual Approaches to Introduction to Computing Monday 3/21/22, 3pmEST/12pmPST Moderator: Carla Brodley; Speakers: Valerie Barr, Mark Guzdial, Ben Hescott, Ran Libeskind-Hadas, Jakita Thomas Brought to you by the Center for Inclusive Computing at Northeastern University  In this 1.5 hour virtual workshop, faculty from five different universities in the U.S. will present their approach to creating and offering an introductory computer science class (CS0 or CS1) for students with no prior exposure to computing. The key differentiator of these approaches is that the introduction is contextualized in one area outside of computing throughout the semester. Using the context of areas such as cooking, business, biology, media arts, and digital humanities, these courses appeal to students across the university and have realized spectacular results for student retention in CS0/CS1, persistence to taking additional CS courses, and declaring a major or minor in computing. The importance of attracting students to computing after they enter university is critical to moving the needle on increasing the demographic diversity of students who graduate in computing. Interdisciplinary introductory computing classes provide a pathway to students discovering and enjoying computing after they start university. They also help students with no prior coding experience gain familiarity with computing before taking additional courses required for the CS major. The workshop will begin with a short presentation by each faculty member on their approach to contextualized CS0/CS1 and will touch upon the university politics involved in its creation, the curriculum, and the outcomes. We will then split into smaller breakout sessions five times to enable participants to meet with each of the five presenters for questions and more in-depth conversations."
"27","2022-02-24","2023-03-24","https://computinged.wordpress.com/2022/02/24/updates-dr-barbara-ericson-awarded-sigcse-2022-outstanding-contributions-to-education/","March 2-5 is the ACM SIGCSE Technical Symposium for 2022 in Providence, RI. (Schedule is here.) I am absolutely thrilled that my collaborator, co-author, and wife is receiving the Outstanding Contributions to Education award! She is giving a keynote on Friday morning. Her abstract is below. She’s got more papers there, on CS Awesome, on her ebooks, and on Sisters Rise Up. I’m not going to summarize them here. I’ll let you look them up in the schedule. A couple of observations about the SIGCSE Awards this year that I love. Both Barb and the Lifetime Service to the Computer Science Education Community awardee, Simon, earned their PhD’s later in life, both within the last 10 years. Barb is the first Assistant Professor to win the Outstanding Contributions award in the 40 year history of the award. I have one Lightning Talk. The work I’m doing these days is computing education, but it’s not in the mainstream of CS education — I focus on computing education for people who don’t want to study CS. So, I’m doing a five minute lightning talk on Teaspoon languages as provocation to come talk to me about this approach to integrating computing into non-CS subjects. You can see the YouTube version here. This is my attempt to show that each Teaspoon language can be learned in 10 minutes — I describe all of two of them in less than five minutes! Friday, March 4 / 8:15 – 9:45 Ballroom A-E (RICC) Barbara Ericson (University of Michigan) Improving Diversity in Computing through Increased Access and Success My goal is to increase diversity in computing. In this talk I explain why diversity is important to me. My strategy to improve diversity is to increase access and success. This work includes teacher professional development, summer camps, weekend workshops with youth serving organizations, curriculum development, helping states make systemic changes to computing education, publicizing gender and race issues in Advanced Placement Computer Science, creating free and interactive ebooks, testing new types of practice problems/tools, and offering near-peer mentoring programs. Barbara Ericson is an Assistant Professor in the School of Information at the University of Michigan. She conducts research at the intersection of computing education, the learning sciences and HCI, to improve students’ access to and success in computing. With her husband and colleague, Dr. Mark Guzdial, she received the 2010 ACM Karl V. Karlstrom Outstanding Educator Award for their work on media computation. She was the 2012 winner of the A. Richard Newton Educator Award for her efforts to attract more females to computing. She is also an ACM Distinguished Member for Outstanding Educational Contributions to Computing."
"28","2020-07-13","2023-03-24","https://computinged.wordpress.com/2020/07/13/changing-computer-science-education-to-eliminate-structural-inequities-and-in-response-to-a-pandemic/","George Floyd’s tragic death has sparked a movement to learn about race and to eliminate structural inequities and racism. My email is flooded with letters and statements demanding change and recommending actions. These include a letter from Black scholars and other members of the ACM to the leadership of the ACM (see link here), the Black in Computing Open Letter and Call to Action (see link here, and the Hispanics in Computing supportive response link here). The letter about addressing institutional racism in the SIGCHI community from the Realizing that All Can be Equal (R.A.C.E) is powerful and enlightening (see link here). I’m reading daily about race. I’m not an expert, or even particularly well-informed yet. One of the books I’m reading is Me and White Supremacy by Layla F. Saad (see Amazon link here) where the author warns against: Using perfectionism to avoid doing the work and fearing using your voice or showing up for antiracism work until you know everything perfectly and can avoid being called out for making mistakes. This post is the start of a four part series about what we should be changing in computing education towards eliminating structural inequities. We too often build computing education for the most privileged, for the majority demographic groups. It’s past time to support alternative pathways into computing. Even if you’re not driven by concerns about racial injustice, I ask you to take my proposals seriously because of the pandemic. We don’t know how to teach CS remotely at this enormous scale over the next year, and the least-privileged students will be hurt the most by this. We must CS teach differently so that we eliminate the gap between the most and least privileged of our students. Here’s what we need to do. Amber Solomon, a PhD student working with Betsy DiSalvo and me, reviewed my first two posts about race in CS Education (at Blog@CACM and here a few weeks ago). Amber has written on intersectionality in CS education, and is writing a dissertation about the role of embodied representations in CS education (see a post here about her most recent paper). She recommended more on learning about race: Two videos: Tiffani Williams wrote a Blog@CACM post in June that made an important point about the term “underrepresented minority” (see link here). She argues that it’s a racist term and we should strike it from our language. Reason #1: URM is racist language because it denies groups the right to name themselves. Reason #2: URM is racist language because it blinds us to the differences in circumstances of members in the group. Reason #3: URM is racist language because it implies a master-slave relationship between overrepresented majorities and underrepresented minorities. In Me and White Supremacy, Saad uses BIPOC (Black, Indigenous, and People of Color), but points out that that is mostly a shorthand for “people lacking white privilege.” She argues, as does Williams, that the term BIPOC ignores the differences in experience between people in those groups. I am striving to be careful in my language and be thoughtful when I use terms like “BIPOC” and “underrepresented.” Amy Ko has made some strong and insightful posts in the last month about the injustice and exclusion in CS education (see Microsoft presentation slides here). She wrote a powerful post about why her undergraduate major in Information Technology at the University of Washington is racist (see link here). Obviously, her point is that it’s not just her program — certainly the vast majority of computing majors are racist in the ways that she describes. There are mechanisms that are better, like the lottery I described recently to reduce the bias in admission to the major. Amy’s points are inspiring this blog post series. Manuel Pérez-Quiñones has started blogging, with posts on what CS departments should do to dismantle racism (see link here) and about why CS departments should create more student organizations to combat racism (see link here). His first post has a quote that inspires me: First, it should come as no surprise that many things we assume to be fair, standard, or just plain normal in reality are not. Even our notion of “fair” has been constructed from a point of view that prioritizes fairness for certain groups. Not only is history written by the victors; laws, structures, and other pieces of society are developed by them too. To expect them to be fair or equitable is naive at best. Chad Jenkins shared with me a video of his keynote from the RSS 2018 Conference where he suggests that CS departments need to change their research focus, too, to incorporate a value for equity and human values. The Chair of our department’s Diversity, Equity, and Inclusion (DEI) Committee, Wes Weimer, is pushing for all Computer Science departments to be transparent about how they’re doing on their goals to make CS more diverse and equitable, and what their plans are. The Computer Science & Engineering division at the University of Michigan is serving as an example by making its annual DEI report publicly available here. In the comments, please share your department’s DEI report. Let’s follow Wes’s lead and makes this the common, annual practice. Manuel’s point isn’t just about departments. We as individual teachers of computer science and computing make choices which we think are “fair, standard” but actually support and enforce structural inequities. We have to change how we teach. CS for All has published a statement on anti-racism and injustice (see link here) where they say: We pledge to repeatedly speak out against our historical pedagogies and approaches to computer science instruction that are grounded and designed to weed out all but a small prerogative subset of the US population. Chad Jenkins mailed me the statement from the University of Maryland’s CS department about their recommendations to improve diversity and inclusion. I loved this quote, which will be the theme for this series of posts: Creating a task force within the Education Committee for a full review of the computer science curriculum to ensure that classes are structured such that students starting out with less computing background can succeed, as well as reorienting the department teaching culture towards a growth mindset We currently teach computer science in ways that “weed out all but a small prerogative subset of the US population” (CS for All). We need to teach so that “students starting out with less computing background can succeed” (UMdCS). We teach in ways that assume a fixed mindset — we presume that some students have a “Geek Gene” and there’s nothing much that teaching can do to change that. We know the opposite — teaching can trump genetics. Even if you don’t care about race or believe that we have created structural inequities in CS education, I ask you to change because of the pandemic. Teaching on-line will likely hurt our students with the least preparation (see post here). We have to teach differently this year when students will have fewer resources, and we are literally inventing our classes anew in remote forms. If we don’t teach differently, we will increase the gap between those more or less computing background. While I am just learning about race, I have been studying for years how to teach computing to people with less computing background. This is what this series of posts is about. In the next three posts, I make concrete recommendations about how we should teach differently to reduce inequity. I hope that you are inspired by the desire to eliminate racial inequities, but if not, I trust that you will recognize the need to teach differently because of the pandemic. Here’s an example of a structural inequity that weeds out students with less computing background. The AP CS Principles exam (see website here) is meant to be agnostic about what programming language the students are taught, so the programming problems on the actual exam are given in a pseudocode — either text or block-based (randomly). There is no interpreter generally available for the pseudocode, so students learn one language (maybe Snap! or Scratch or MIT App Inventor) and answer questions in another one. Advanced Placement (AP) classes are generally supposed to replicate the experience of introductory courses at College. AP CSP is supposed to map to a non-CS majors’ intro to computing course. How many of these teach in language X, but then ask students to take their final exam in language Y which they’ve never used? Allison Elliott Tew’s dissertation (see link here) is one of the only studies I know where students completed a validated instrument both in a pseudocode and in whatever language they learned (Java, MATLAB, and Python in her study). She found that the students who scored the best on the pseudocode exam had the closest match in scores between the pseudocode exam and the intro language exam — averaging a difference in 2.31 answers out of the 27 questions on the exams (see table below.). But the average difference increases dramatically. For the bottom two quartiles, the difference is 17% (4.8 questions out of 27) and 22% (6.2 questions out of 27). It’s not too difficult for students in the best-performing quartile to transfer their knowledge to the pseudocode, but it’s a significant challenge for the lowest-performing two quartiles. These results suggest predict that giving the AP CSP exam in a pseudocode is a barrier, which is easily handled by the most prepared students and is much more of a barrier for the least prepared students. I went to a bunch of meetings around the AP CSP exam when it was first being set up. At a meeting where the pseudocode plans were announced, I raised the issue of Allison’s results. The response from the College Board was that, while it was a concern, it was not likely going to be a significant problem for the average student. That’s true, and I accepted it at the time. But now, we’re aware of the structural inequities that we have erected that “weed out all but a small prerogative subset of the US population” (CS for All). It’s not acceptable that switching to a pseudocode dramatically increases the odds that students in the bottom half fail the AP CSP exam, when they might have passed if they were given the language that they learned. Further, studies of block-based and text languages in the context of AP CSP support the argument that students overall do better in a block-based language (see this post here as an example). Every text-based problem decreases the odds that female, Black, and Hispanic students will pass the exam (using the race labels the students use to self-identify on the exam). If the same problem was in a block-based language, they would likely do better. Using pseudocode on the AP CSP exam is like a tax. Everyone has to manage a bit more difficulty by mapping to a new language they’ve never used. But it’s a regressive tax. It’s much more easily handled by the most privileged and most prepared students. AP CSP is an important program that is making computing education available to students who otherwise might never access a CS course. We should grow this program. But we should scrap the AP CSP exam in its current form. I understand that the College Board and the creators of the AP CSP exam were aiming with the pseudocode, mixed-modality exam to create freedom for schools and teachers to teach with whatever the language and curriculum they wanted. However, we now know that that flexibility comes at a cost, and that cost is greater for students with less computing background, with less preparation, and who are female, Black, or Hispanic. This is structural inequity."
"29","2020-06-08","2023-03-24","https://computinged.wordpress.com/2020/06/08/lets-talk-about-race-in-cs-education-more-resources/","I don’t usually invite external review on my blog posts for CACM, but I did this month because it’s such an important topic and I know too little about it — “CS Teachers, It’s (Past) Time To Learn About Race” (see link here). Many thanks to Melissa Perez, Carl Haynes, Leigh Ann DeLyser, Betsy DiSalvo, Leo Porter, Chad Jenkins, Wes Weimer, Barbara Ericson, Matthew Guzdial, Katie Guzdial, and Manuel Perez Quinones. We have to change CS Education. We do not talk enough about BIPOC (Black, Indigenous, and People of Color) students and faculty in CS education. We have to reflect that Black Lives Matter in our teaching practice. We have to become explicitly anti-racist (a term I just learned this last week, see the book link here) — actively seeking to address historic and systemic inequities (see piece at CNN too). One of the reviewer’s comments was that, by offering some small suggestions (like changing how we grade), I might dissuade people from bigger changes. It’s a valid concern. I’m hoping that people will take me at my word: I’m just learning here, and I hope that you will educate me (and each other) by sharing other ideas and resources. Please do share more ideas in the comments to this post. Here are a few more that have come my way since that post that I wanted to share: The issues of race, culture, and members of underserved groups are particularly critical for us to consider as we move into the 2020-2021 academic year during a worldwide pandemic. As we move classes on-line, we are putting at a greater disadvantage underserved populations. We have to be sensitive and thoughtful that our response to pandemic doesn’t exacerbate our existing structural inequities. Let’s worry less about cheating, and more about We have privilege and resources, and we should use them to address inequities. TL;DR: I know too little about race, and I have not considered the historic and systemic inequities in CS education when I make my daily teaching decisions. I haven’t read all of the above, but I’m working on it daily. Please do share valuable resources you have found in the comments. Let’s learn about race in CS education and make change to improve learning for everyone."
"30","2020-06-15","2023-03-24","https://computinged.wordpress.com/2020/06/15/how-do-teachers-teach-recursion-with-embodiment-and-why-wont-students-trace-their-programs-icls-2020-preview/","This coming week was supposed to be the International Conference of the Learning Sciences (ICLS) 2020 in Nashville (see conference website here). But like most conferences during the pandemic, the face-to-face meeting was cancelled (see announcement here). The on-line sessions are being announced on the ICLS2020 Twitter feed here. I’m excited that two of my students had papers accepted at ICLS 2020. I haven’t published at ICLS since 2010. It’s nice to get back involved in the learning sciences community. Here’s a preview of their papers. I’ve written here about Amber Solomon’s work on studying the role of space and embodiment in CS learning. This is an interesting question. We live in a physical world and think in terms of physical things, and we have to use that to understand the virtual, mostly invisible, mostly non-embodied world of computing. At ICER 2018, she used a taxonomy of gestures used in science learning to analyze the gestures she saw in a high school computer science classroom (see link here). Last summer at ITiCSE, she published a paper on how making CS visible in the classroom (through gesture and augmented reality) may reduce defensive climate (see link here). In her dissertation, she’s studying how teachers teach recursion and how learners learn recursion, with a focus on spatial symbol systems. Her paper at ICLS 2020 is the first of these studies: Embodied Representations in Computing Education: How Gesture,Embodied Language, and Tool Use Support Teaching Recursion. She watched hours of video of teachers teaching recursion, and did a deep dive on two of them. I’m fascinated by Amber’s findings. Looking at what teachers say and gesture about recursion from the perspective of physical embodiment, I’m amazed that students ever learn computer science. There are so many metaphors and assumptions that we make. One of the teachers says, when explaining a recursive function: “Then it says “… “now I have to call.” Let’s think about this from the perspective of the physical world (which is where we all start when trying to understand computing): For most computer scientists, this may seem like explaining that the sky is blue or that gravel exists. It’s obvious what all of this means, isn’t it? It is to us, but we had to learn it. Maybe not everyone does. Remember how very few students take or succeed at computer science (for example, see this blog post), and what enormously high failure and drop-out rates we have in CS. Maybe only the students who pick up on these metaphors are the ones succeeding? Katie Cunningham’s first publication as a PhD student was her replication and extension of the Leeds Working group study, showing that students who trace program code successfully line-by-line are able to answer more accurately questions about the code (see blog post here). But one of her surprising results was that students who start tracing and give up do worse on prediction questions than those students who never traced at all. In her ITICSE 2019 paper (see post here), she got the chance to ask those students who stopped tracing why they did. She was extending that with a think-aloud protocol, when something unusual happened. Two data science students, who were successful at programming, frankly refused to trace code. Her paper “I’m not a computer”: How identity informs value and expectancy during a programming activity is an exploration of why students would flat out refuse to trace code — and yet successfully program. She uses Eccle’s Expectancy Value Theory (which comes up pretty often in our thinking, see this blog post) to describe why the cost of tracing outweighs the utility for these students, which is defined in terms of their sense of identity — what they see themselves doing in the future. Sure, there will be some programs that they won’t be able to debug or understand because they won’t trace line-by-line. But maybe they’ll never actually have to deal with code that complex. Is this so bad? Katie’s live session is 2:00-2:40pm Eastern time on June 23. The video link will be available on the conference website to registered attendees. A pre-print version of her paper is available here. Both of these papers give us new insight into the unexpected consequences of how we teach computing. We currently expect students to figure out how their teachers are relating physical space and computation, through metaphors that we don’t typically explain. We currently teach computing expecting students to be able to trace code line-by-line, though some students will not do it (and maybe don’t really need to). If we want to grow who can succeed at computing education, we need to think through who might be struggling with how we’re teaching now, and how we might do better."
"31","2018-08-10","2023-03-24","https://computinged.wordpress.com/2018/08/10/adaptive-parsons-problems-and-the-role-of-ses-and-gesture-in-learning-computing-icer-2018-preview/","Next week is the 2018 International Computing Education Research Conference in Espoo, Finland. The proceedings are (as of this writing) available here: https://dl.acm.org/citation.cfm?id=3230977. Our group has three papers in the 28 accepted this year. These are the final studies from Barb Ericson’s dissertation (I blogged about her defense here). In her experiment, she compared four conditions: Students learning through writing code, through fixing code, through solving Parsons problems, and through solving her new adaptive Parsons problems. She had a control group this time (different from her Koli Calling paper) that did turtle graphics between the pre-test and post-test, so that she could be sure that there wasn’t just a testing effect of pre-test followed by a post-test. The bottom line was basically what she predicted: Learning did occur, with no significant difference between treatment groups, but the Parsons problems groups took less time. Our ebooks now include some of her adaptive Parsons problems, so she can compare performance across many students on adaptive and non-adaptive forms of the same problem. She finds that students solve the problems more and with fewer trials on the adaptive problems. So, adaptive Parsons problems lead to the same amount of learning, in less time, with fewer failures. (Failures matter, since self-efficacy is a big deal in computer science education.) (Link to last version I reviewed.) This study is a response to the paper Steve Cooper presented at ICER 2015 (see blog post here), where they found that spatial reasoning training erased performance differences between higher and lower socioeconomic status (SES) students, while the comparison class had higher-SES students performing better than lower-SES students. Miranda and Amber wanted to test this relationship at a larger scale. Why should wealthier students do better in CS? The most common reason I’ve heard is that wealthier students have more opportunities to study CS — they have greater access. Sometimes that’s called preparatory privilege. Miranda and Amber and their team wanted to test whether access is really the right intermediate variable. They gave students at two different Universities four tests: David and Lauren did the factor analysis and structural equation modeling to compare two hypotheses: Does higher SES lead to greater access which leads to greater success in CS, or does higher SES lead to higher spatial reasoning which leads to greater success in CS? Neither hypothesis accounted for a significant amount of the differences in CS performance, but the spatial reasoning model did better than the access model. There are some significant limitations of this study. The biggest is that they gathered data at universities. A lot of SES variance just disappears when you look at college students — they tend to be wealthier than average. Still, the result is important for challenging the prevailing assumption about why wealthier kids do better in CS. More, spatial reasoning is an interesting variable because it’s rather inexpensively taught. It’s expensive to prepare CS teachers and get them into all schools. Steve showed that we can teach spatial reasoning within an existing CS class and reduce SES differences. (Link to last version I saw.) We were a bit surprised (quite pleasantly!) that this paper got into ICER. I love the paper, but it’s different from most ICER papers. Amber is interested in the role that gestures play in teaching CS. She started this paper from a taxonomy of gestures seen in other STEM classes. She observed a CS classroom and used her observations to provide concrete examples of the gestures seen in other kinds of classes. This isn’t a report of empirical findings. This is a report of using a lens borrowed from another field to look at CS learning and teaching in a new way. My favorite part of of this paper is when Amber points out what parts of CS gestures don’t really fit in the taxonomy. It’s one thing to point to lines of code – that’s relatively concrete. It’s another thing to “point” to reference data, e.g., when explaining a sort and you gesture at the two elements you’re comparing or swapping. What exactly/concretely are we pointing at? Arrays are neither horizontal nor vertical — that distinction doesn’t really exist in memory. Arrays have no physical representation, but we act (usually) as if they’re laid out horizontally in front of us. What assumptions are we making in order to use gestures in our teaching? And what if students don’t share in those assumptions?"
"32","2018-03-12","2023-03-24","https://computinged.wordpress.com/2018/03/12/announcing-barbara-ericsons-defense-on-effectiveness-and-efficiency-of-parsons-problems-and-dynamically-adaptive-parsons-problems-next-stop-university-of-michigan/","Today, Barbara Ericson defends her dissertation. I usually do a blog post talking about the defending student’s work as I’ve blogged about it in the past, but that’s really hard with Barb. I’ve written over 90 blog posts referencing Barb in the last 9 years. That happens when we have been married for 32 years and collaborators on CS education work for some 15 years. Barb did her dissertation on adaptive Parsons problems, but she could have done it on Project Rise Up or some deeper analysis of her years of AP CS analyses. She chose well. Her results are fantastic, and summarized below. (Yes, she does have six committee members, including two external members.) Starting September 1, Barbara and I will be faculty at the University of Michigan. Barb will be an assistant professor in the University of Michigan School of Information (UMSI). I will be a professor in the Computer Science and Engineering (CSE) Division of the Electrical Engineering and Computer Science Department, jointly with their new Engineering Education Research program. Moving from Georgia Tech and Atlanta will be hard — all three of our children will still be here as we leave. We are excited about the opportunities and new colleagues that we will have in Ann Arbor. Title: Evaluating the Effectiveness and Efficiency of Parsons Problems and Dynamically Adaptive Parsons Problems as a Type of Low Cognitive Load Practice Problem Barbara J. Ericson Human-Centered Computing School of Interactive Computing College of Computing Georgia Institute of Technology Date: Monday, March 12, 2018 Time: 12pm – 3pm Location: TSRB 222 Committee: Dr. Jim Foley (Advisor, School of Interactive Computing, Georgia Institute of Technology) Dr. Amy Bruckman (School of Interactive Computing, Georgia Institute of Technology) Dr. Ashok K. Goel (School of Interactive Computing, Georgia Institute of Technology) Dr. Richard Catrambone (School of Psychology, Georgia Institute of Technology) Dr. Alan Kay (Computer Science Department, University of California, Los Angeles) Dr. Mitchel Resnick (Media Laboratory, Massachusetts Institute of Technology) Abstract: Learning to program can be difficult and time consuming. Learners can spend hours trying to figure out why their program doesn’t compile or run correctly. Many countries, including the United States, want to train thousands of secondary teachers to teach programming. However, busy in-service teachers do not have hours to waste on compiler errors or debugging. They need a more efficient way to learn. One way to reduce learning time is to use a completion task. Parsons problems are a type of code completion problem in which the learner must place blocks of correct, but mixed up, code in the correct order. Parsons problems can also have distractor blocks, which are not needed in a correct solution. Distractor blocks include common syntax errors like a missing colon on a for loop or semantic errors like the wrong condition on a loop. In this dissertation, I conducted three studies to compare the efficiency and effectiveness of solving Parsons problems, fixing code, and writing code. (Editor’s note: I blogged on her first study here.) I also tested two forms of adaptation. For the second study, I added intra-problem adaptation, which dynamically makes the current problem easier. For the last study, I added inter-problem adaptation which makes the next problem easier or harder depending on the learner’s performance. The studies provided evidence that students can complete Parsons problems significantly faster than fixing or writing code while achieving the same learning gains from pretest to posttest. The studies also provided evidence that adaptation helped more learners successfully solve Parsons problems. These studies were the first to empirically test the efficiency and effectiveness of solving Parsons problems versus fixing and writing code. They were also the first to explore the impact of both intra-problem and inter-problem adaptive Parsons problems. Finding a more efficient and just as effective form of practice could reduce the frustration that many novices feel when learning programming and help prepare thousands of secondary teachers to teach introductory computing courses."
"33","2020-02-10","2023-03-24","https://computinged.wordpress.com/2020/02/10/barbara-ericsons-analysis-of-the-2019-advanced-placement-cs-data/","Barb spoke at CornellTech’s “To Code and Beyond” workshop on January 10 on her analysis of the Advanced Placement CS data (both A and CS Principles). She’s shared the slides and her analysis at her blog. As usual, the analyses are fascinating and dismal. It’s amazing to see how few people are really getting access to AP CS. This year, she did a bunch of intersectional analyses which were eye opening. Here’s a couple of the results that I found surprising. Only 9 states had more than 10 Black Women pass the AP CS A exam. Only 14 states had more than 10 Hispanic Women pass the AP CSA exam. Those aren’t percentages — that’s a raw number of exam-takers who passed. AP CSP numbers are larger, but still disappointing."
"34","2019-06-17","2023-03-24","https://computinged.wordpress.com/2019/06/17/an-ebook-for-java-ap-cs-review-guest-blog-post-from-barbara-ericson/","My research partner, co-author, and wife, Barbara Ericson, has been building an ebook (like the ones we’ve been making for AP CSP, as mentioned here and here) for students studying Advanced Placement (AP) CS Level A. We wanted to write a blog post about it, to help more AP CS A students and teachers find it. She kindly wrote this blog post on the ebooks I started creating a free interactive ebook for the Advanced Placement (AP) Computer Science (CS) A course in 2014. See http://tinyurl.com/JavaReview-new. The AP CSA course is intended to be equivalent to a first course for computer science majors at the college level. It covers programming fundamentals (variables, strings, conditionals, loops), one and two dimensional arrays, lists, recursion, searching, sorting, and object-oriented programming in Java. The AP CSA ebook was originally intended to be used as a review for the AP CSA exam. I had created a web-site that thousands of students were using to take practice multiple-choice exams, but that web-site couldn’t handle the load and kept crashing. Our team at Georgia Tech was creating a free interactive ebook for Advanced Placement Computer Science Principles (CSP) course on the Runestone platform. The Runestone platform was easily handling thousands of learners per day, so I moved the multiple choice questions into a new interactive ebook for AP CSA. I also added a short description of each topic on the AP CSA exam and several practice exams. Over the years, my team of undergraduate and high school students and I have added more content to the Java Review ebook and thousands of learners have used it. It includes text, pictures, videos, executable and modifiable Java code, multiple-choice questions, fill-in-the-blank problems, mixed-up code problems (Parsons problems), clickable area problems, short answer questions, drag and drop questions, timed exams, and links to other practice sites such as CodingBat (https://codingbat.com/java) and the Java Tutor (http://pythontutor.com/java.html#mode=edit). It also includes free response (write code) questions from past exams. Fill-in-the-blank problems ask a user to type in the answer to a question and the answer is checked against a regular expression. See https://tinyurl.com/fillInBlankEx. Mixed-up code problems (Parsons problems) provide the correct code to solve a problem, but the code is broken into code blocks and mixed up. The learner must drag the blocks into the correct order. See https://tinyurl.com/ParsonsEx. I studied Parsons problems for my dissertation and invented two types of adaptation to modify the difficulty of Parsons problems to keep learners challenged, but not frustrated. Clickable area questions ask learners to click on either lines of code or table elements to answer a question. See https://tinyurl.com/clickableEx. Short answer questions allow users to type in text in response to a question. See https://tinyurl.com/shortAnsEx. Drag and drop questions allow the learner to drag a definition to a concept. See https://tinyurl.com/y68cxmpw. Timed exams give the learner practice a set amount of time to finish an exam. It shows the questions in the exam one at a time and doesn’t give the learner feedback about the correctness of the answer until after the exam. See https://tinyurl.com/timedEx. I am currently analyzing the log file data from both the AP CSA and CSP ebooks. Learners typically attempt to answer the practice type questions, but don’t always run the example code or watch the videos. In an observation study I ran as part of my dissertation work, teachers said that they didn’t run the code if the got the related practice question correct. They also didn’t always watch the videos, especially if the video content was also in the text. Usage of the ebook tends to drop from the first chapter to the last instructional chapter, but increases again in the practice exam chapters at the end of the ebook. Usage also drops across the instructional material in a chapter and then increases again in the practice item subchapters near the end of each chapter. Beryl Hoffman, an Associate Professor of Computer Science at Elms College and a member of the Mobile CSP team, has been creating a new AP CSA ebook based on my AP CSA ebook, but revised to match the changes to the AP CSA course for 2019-20202. See https://tinyurl.com/csawesome. One of the reasons for creating this new ebook is to help Mobile CSP teaches prepare to teach CSA. The Mobile CSP team is piloting this book currently with CSP teachers."
"35","2019-02-25","2023-03-24","https://computinged.wordpress.com/2019/02/25/our-work-at-sigcse-2019-ebooks-jobs-privilege-what-is-research-and-what-is-literacy/","There was a time before each SIGCSE Symposium or ICER Conference that I would write a blog post about all the cool things being presented from Georgia Tech (see for example SIGCSE 2018 and SIGCSE 2017 posts). But now, the list of things at SIGCSE 2019 from Georgia Tech and University of Michigan (my new home) is enormous. I’m going to take a different strategy — the selfish and easier strategy. Let me just tell you about the things that I know about because I work with the authors. All the proceedings are available here. I highly encourage everyone to check out the SIGCSE 2019 Best Paper award-winning presentations (see list here). I’m particularly excited that Andreas Stefik’s (with Richard Ladner, William Allee, and Sean Mealin) project on developing CS Principles materials for blind and visually-impaired students is being recognized. We need to take more seriously making computing accessible to a broader range of students. "
"36","2018-02-21","2023-03-24","https://computinged.wordpress.com/2018/02/21/sigcse-2018-preview-black-women-in-cs-rise-up-4-cs-community-college-to-university-cs-and-gestures-for-learning-cs/","While I’m not going to be at this year’s SIGCSE, we’re going to have a bunch of us there presenting cool stuff. On Wednesday, Barb Ericson is going to this exciting workshop, CS Education Infrastructure for All: Interoperability for Tools and Data Analytics, organized by Cliff Shaffer, Peter Brusilovsky, Ken Koedinger, and Stephen Edwards. Barb is eager to talk about her adaptive Parsons Problems and our ebook work. My PhD student, Amber Solomon, is presenting at RESPECT 2018 (see program here) on a paper with Dekita Moon, Amisha Roberts, and Juan Gilbert, Not Just Black and Not Just a Woman: Black Women Belonging in Computing. They talk about how expectations of being Black in CS and expectations as a woman in CS come into conflict for the authors. On Thursday, Barb is presenting her paper (with Tom McKlin) Helping Underrepresented Students Succeed in AP CSA and Beyond, which are the amazing results from the alumni study from her Project Rise Up effort to help underrepresented students succeed at Advanced Placement CS A. When Barb was deciding on her dissertation topic, she considered making Rise Up her dissertation topic, or adaptive Parsons problems. She decided on the latter, so you might think about this paper as the dissertation final chapter if she had made Rise Up her dissertation focus. Project Rise Up grew from Barb’s interest in AP CS A and her careful, annual analysis of success rates in AP CS A for various demographics (here is her analysis for 2017). It had a strong impact (and was surprisingly inexpensive), as seen in the follow-on statistics and the quotes from the students now years after Rise Up. I recommend going to the talk — she has more than could fit into the paper. On Friday, my PhD student, Katie Cunningham, is presenting with her colleagues from California State University Monterey Bay and Hartnell College, Upward Mobility for Underrepresented Students: A Model for a Cohort-Based Bachelor’s Degree in Computer Science. The full author list is Sathya Narayanan, Katie, Sonia Arteaga, William J. Welch, Leslie Maxwell, Zechariah Chawinga, and Bude Su. They’re presenting the “CSin3” program which drew in students from traditionally underrepresented groups and helped them earn CS degrees with remarkable success: A three year graduation rate of 71%, compared to a 22% four-year graduation rate, as well as job offers from selective tech companies. The paper describes the features of the program that made it so successful, like its multi-faceted support outside the classroom, the partnership between a community college and a university, and keeping a cohort model. The paper has been recognized with a SIGCSE 2018 Best Paper Award in the Curricula, Programs, Degrees, and Position Papers track. On Friday, my colleague Betsy DiSalvo is going to present at the NSF Showcase some of the great work that she and her student, Kayla des Portes, have been doing with Maker Oriented Learning for Undergraduate CS. On Saturday, my EarSketch colleagues are presenting their paper: Authenticity and Personal Creativity: How EarSketch Affects Student Persistence with Tom McKlin, Brian Magerko, Taneisha Lee, Dana Wanzer, Doug Edwards, and Jason Freeman. Also on Saturday, Amber with her undergraduate researchers, Vedant Pradeep and Sara Li, are presenting a poster which is also a data collection activity, so I hope that many of you will stop by. Their poster is The Role of Gestures in Learning Computer Science. They are interested in how gesture can help with CS learning and might be an important evaluation tool — students who understand their code, tend to gesture differently when describing their code than students who have less understanding. They want to show attendees what they’ve seen, but more importantly, they want feedback on the gestures they’ve observed “in the wild.” Have you seen these? Have you seen other gestures that might be interesting and useful to Amber and her team? What other kinds of gestures do you use when explaining CS concepts? Please come by and help inform them about the gestures you see when teaching and learning CS."
"37","2018-02-02","2023-03-24","https://computinged.wordpress.com/2018/02/02/why-i-am-not-going-to-sigcse-2018/","I am not going to SIGCSE 2018. I haven’t missed SIGCSE in a lot of years, and I’m sorry to miss it this year. SIGCSE is the biggest computing education conference in the world, and it’s the best place to hear what’s going on in CS classes and the United States — and to possibly influence what’s going on. I’m particularly sorry because I owe Owen Astrachan a beer and dinner. I lost our bet about Code.org and CSP Curricula. I have to find another time to pay up. I’m not going because it’s a time of change for me. I don’t know for sure what I’m going to be doing next. This post is another in the (perhaps wearisome) series of posts where I explored what a post-full professor should do and my failure CV. There are two forcing functions for the change: SIGCSE may not be as big a part of my academic life, depending on what comes next for me. I may do more Engineering Education Research in the future. I may get more involved in preparing future CS teachers. My research directions are changing. I will continue to work towards Computing Education for All, and I’m interested in studying and developing different ways of getting there. The proposals I’m submitting these days are about doing work that looks like Bootstrap. I’d like to do more in applying computing (specifically, programming) as a notation and tool for learning in disciplines other than computer science. Venues other than SIGCSE may be the right places for this kind of work. It’s going to be a great SIGCSE, and I’m thrilled that my student, Katie Cunningham, is co-author on a paper that will be receiving a Best Paper Award. Sorry I won’t be there to see all my SIGCSE friends this year. "
"38","2015-06-17","2023-03-24","https://computinged.wordpress.com/2015/06/17/code-org-grows-cs-ed-partnership-to-reduce-the-babble-in-cs-ed/","I wrote my May Blog@CACM post on the “Babble of Computing Education,” about the wide variety of perspectives, definitions, and cross-purposes going on in the US in computing education. At the end, I talk about the new Code.org partnership with the College Board and how this may reduce the Babble — the definition of CS Principles will become Code.org. Owen Astrachan, co-PI of the NSF CS Principles grant, and I have a bet for dinner and beer that we made on Facebook. I predict that in the first offering of the AP CS Principles exam, more than 50% of the schools that teach CSP and send students to the exam will be using Code.org curricula. He thinks that there will be greater diversity. I don’t know how the new partnerships announced below fit into our bet. BJC, PLTW, and other curricula are now going to be promoted by Code.org as their partners. Will a school adopt BJC because Code.org recommends it? I think that’s likely. Will the school believe that they are adopting a curriculum out of Berkeley or a Code.org curriculum? I expect the latter. From schools’ perspective, all the eleven new partners will be Code.org curricula. The definition of CS Principles will become Code.org. That’s not necessarily a bad thing — that may provide a corporate face that will assure administrators in schools who don’t know CS. “Code.org’s courses already reach millions of students globally in grades K-8,” Partovi said. “But as we expand in high school, we work region by region, and we can’t do it all. We’re leading a movement and we need partners to help.” When Code.org meets with school districts, it will now also highlight the new partnerships as alternative ways to teach computer science versus utilizing Code.org’s own programs. via Code.org inks 11 new partnerships to help expand computer science education – GeekWire."
"39","2016-07-22","2023-03-24","https://computinged.wordpress.com/2016/07/22/college-of-computing-using-google-funding-to-close-cs-diversity-gap-barb-ericsons-project-rise-up-4-cs/","Project Rise Up 4 CS and Sisters Rise Up 4 CS are really great ideas (see previous blog posts on the work presented at SIGCSE and at RESPECT) — though I’m obviously biased in my opinion. I’m grateful that Google continues to support Barb’s project, and the College did a nice write up about her efforts. In fact, according to ongoing data analysis by Barbara Ericson, director of computing outreach for the Institute for Computing Education (ICE) for the Georgia Tech College of Computing, “The disparity here is so great that in 2015 10 U.S. states had fewer than 10 girls take the Advanced Placement (AP) Computer Science (CS) A course exam while 23 states had fewer than 10 black students take the exam.” In an interview with the New York Times late last year Ericson said working to solve tech industry’s gender and racial diversity gap is important “because we don’t have enough people studying computer science in the United States to fill the projected number of jobs in the field.” To address this problem and prepare more high school students for computer science careers, the College of Computing established RISE Up 4 CS in 2012. Leveraging Google RISE Award funding, the RISE Up 4 CS program offers twice-a-week webinars and monthly in person sessions at Georgia Tech to prepare underrepresented students to succeed in taking the APCS A course exam and class. For the webinars, students use a free interactive e-book developed by Ericson to learn about searching and sorting data, and the fundamentals of JAVA. Source: College of Computing Using Google Funding to Close CS Diversity Gap | Georgia Tech – College of Computing"
"40","2014-03-05","2023-03-24","https://computinged.wordpress.com/2014/03/05/sigcse-preview-project-rise-up-4-cs-increasing-the-number-of-black-students-who-pass-ap-cs-a-by-paying-them/","I’m guessing that Barbara’s paper on Friday 1:45-3 (in Hanover FG – whole program here) is going to be controversial. She’s working on a problem we’ve had in GaComputes for years. Besides Betsy DiSalvo’s work on Glitch, we’ve made little progress in increasing numbers of Black students taking AP CS A and even less progress in getting more of them to pass the test. She’s had significant progress this last year using an approach that NMSI used successfully in Texas and elsewhere. She’s offering $100 to Black students who attend extra sessions to help them pass the exam and who do pass the exam. She’s expanding the program now with a Google RISE grant. Her approach is informed by Betsy’s work – it’s about going beyond interests to values and giving students help in navigating past their motivations to not-learn. She does have aspects of the project in place to counteract the disincentives of cash payments for academic achievement. In the final interviews, students didn’t talk about the money. It may be that the money wasn’t an incentive as much as a face-saving strategy. (Barb’s preview talk was also recorded as part of a GVU Brown Bag.) Project Rise Up 4 CS: Increasing the Number of Black Students who Pass Advanced Placement CS A This paper describes Project Rise Up 4 CS, an attempt to increase the number of Black students in Georgia that pass the Advanced Placement (AP) Computer Science (CS) A exam. In 2012 Black students had the lowest pass rates on the AP CS A exam both in Georgia and nationally. Project Rise Up 4 CS provided Black students with role models, hands-on learning, competitions, a financial incentive, and webinars on AP CS A content. The first cohort started in January of 2013 and finished in May 2013. Of the 27 students who enrolled in the first cohort, 14 met all of the completion requirements, and 9 (69%) of the 13 who took the exam passed. For comparison, in 2012 only 22 (16%) of 137 Black students passed the exam in Georgia. In 2013, 28 (22%) of 129 Black students passed the exam in Georgia. This was the highest number of Black students to pass the AP CS A exam ever in Georgia and a 27% increase from 2012. In addition, students who met the completion requirements for Project Rise Up 4 CS exhibited statistically significant changes in attitudes towards computing and also demonstrated significant learning gains. This paper discusses the motivation for the project, provides project details, presents the evaluation results, and future plans."
"41","2017-11-17","2023-03-24","https://computinged.wordpress.com/2017/11/17/parsons-problems-have-same-learning-gains-as-writing-or-fixing-code-in-less-time-koli-calling-2017-preview/","On Saturday, Barbara Ericson will be presenting at Koli Calling her paper (with Lauren Margulieux and Jeff Rick), “Solving Parsons Problems Versus Fixing and Writing Code.” The basic design of her experiment is pretty simple. Everybody gets a pretest where they answer multiple-choiced questions, write some code, fix some code, and solve some Parsons problems. (I’ve written about Parsons Problems here before.) Then there are three instructional treatments with three different kinds of problem-solving practice: Then they take an isomorphic (same basic problems with context and constants changed) post-test, go away, and come back one week later for a retention test (which is isomorphic to both the pretest and the first posttest: multiple choice questions, Parsons, fix code, write code). So we have students who study with Parsons Problems getting tested by writing and fixing code. Here’s the bottom line from their abstract: “We found that solving two-dimensional Parsons problems with distractors took significantly less time than fixing code with errors or than writing the equivalent code. Additionally, there was no statistically significant difference in the learning performance, or in student retention of the knowledge one week later.” That’s it. It’s simple but profound. Below is the timing table from the paper. The Parsons Problems took effort, but always less time — sometimes they took only half the time of fixing or writing code, and other times it was only a few percentage less. But it was always less. One takeaway idea is: If Parsons leads to the same learning in less time, why wouldn’t every teacher use more Parsons problems? A second one that we’ve been thinking alot about is: Can we provide more Parsons problems so that in the same amount of time that students were writing code, they actually learn more? Efficiency matters, as Elizabeth Patitsas’s work suggests — more efficient learning may mean less belief in Geek Gene by CS teachers. "
"42","2016-02-29","2023-03-24","https://computinged.wordpress.com/2016/02/29/sigcse-2016-preview-parsons-problems-and-subgoal-labeling-and-improving-female-pass-rates-on-the-ap-cs-exam/","Our research group has two papers at this year’s SIGCSE Technical Symposium. Subgoals help students solve Parsons Problems by Briana Morrison, Lauren Margulieux, Barbara Ericson, and Mark Guzdial. (Thursday 10:45-12, MCCC: L5-L6) This is a continuation of our subgoal labeling work, which includes Lauren’s original work showing how subgoal labels improved learning, retention and transfer in learning App Inventor (see summary here), the 2015 ICER Chairs Paper Award-winning paper from Briana and Lauren showing that subgoals work for text languages (see this post for summary), and Briana’s recent dissertation proposal where she explores the cognitive load implications for learning programming (see this post for summary). This latest paper shows that subgoal labels improve success at Parson’s Problems, too. One of the fascinating results in this paper is that Parson’s Problems are more sensitive as a learning assessment than asking students to write programs. Sisters Rise Up 4 CS: Helping Female Students Pass the Advanced Placement Computer Science A Exam by Barbara Ericson, Miranda Parker, and Shelly Engelman. (Friday 10:45-12, MCCC: L2-L3) Barb has been developing Project Rise Up 4 CS to support African-American students in succeeding at the AP CS exam (see post here from RESPECT and this post here from last year’s SIGCSE). Sisters Rise Up 4 CS is a similar project targeting female students. These are populations that have lower pass rates than white or Asian males. These are examples of supporting equality and not equity. This paper introduces Sisters Rise Up 4 CS and contrasts it with Project Rise Up 4 CS. Barb has resources to support people who want to try these interventions, including a how-to ebook at http://ice-web.cc.gatech.edu/ce21/SRU4CS/index.html and an ebook for students to support preparation for the AP CS A."
"43","2017-09-01","2023-03-24","https://computinged.wordpress.com/2017/09/01/the-role-of-emotion-in-computing-education-icer-2017-recap/","I wrote my Blog@CACM post in August about the two ICER 2017 paper awards: Rich et al.’s paper is particularly significant to me because it has me re-thinking my beliefs about elementary school computer science. I have expressed significant doubt about teaching computer science in early primary grades — it’s expensive, there are even more teachers to prepare than in secondary schools, and it’s not clear that it does any longterm good. If a third grader learns something about Scratch, will they have learned something that they can use later in high school? Katie Rich presented not just trajectories but Big Ideas. Like Big Ideas for sequential programming include precision and ordering. It’s certainly plausible that a third grader who learns that precision and ordering in programs matters, might still remember that years later. I can believe that Big Ideas might transfer (at least, within computing) over years. I was struck by a recurring theme of emotion in the papers at ICER 2017. We have certainly had years where cognition has been a critical discussion, or objects, or programming languages, or student’s process. This year, I noticed that many of these papers were thinking about beliefs and feelings. I find this set of papers interesting for highlight an important research question: What’s the most significant issue influencing student success or withdrawal from computer science? Is it the programming language they use (blocks vs text, anyone?), the kind of error messages they see, the context in which the instruction is situated, or whether they use pair programming? Or is the most significant issue what the students believe about what they’re doing? And maybe all of those other issues (from blocks to pairs) are really just inputs to the function of student belief? (Be sure to check out Amy Ko’s summary of ICER 2017.)"
"44","2014-12-08","2023-03-24","https://computinged.wordpress.com/2014/12/08/iste-debate-should-we-teach-computer-science-in-elementary-school/","Both sides in this debate make good points. Of course, I’m on Pat Yongpradit’s side — computing education is very important and should be in all schools. But I totally see his opponent’s position (and I’ve made similar arguments myself about why the US is not ready for mandatory CS education): it’s expensive, teachers are not well-prepared, and it’s not obvious (to schools or teachers) how computer science helps with the primary goals of literacy and numeracy. I’m not saying that elementary students are not capable of using or even mastering code. But I believe that really teaching — not just introducing — coding is simply beyond the scope of what most K-5 schools and their students are able to do, and it’s even asking a lot of middle schools when both lab time and class time are so limited. What’s more, pushing students into the study of abstract concepts before they are developmentally ready will not make them any more prepared for the rest of the 21st century than they are now. via ISTE | Should we teach computer science in elementary school?."
"45","2015-08-17","2023-03-24","https://computinged.wordpress.com/2015/08/17/icer-2015-blocks-win-programming-language-design-ui-design/","ICER 2015 at the University of Nebraska, Omaha was fantastic. Brian Dorn did a terrific job hosting all of us. The Doctoral Consortium went really well. We had 20 students from US, Chile, Germany, and UK. Below is a picture from the “Up against the wall bubble sort” where experienced students went to one side, and newer students went to the other, and the former gave advice to the latter.    Georgia Tech had even more going on at ICER and RESPECT than I mentioned in my earlier blog posts (like here and here). The GVU Center did a nice write up about all of us here. The biggest thrill at ICER for the GT crowd was Briana Morrison receiving the Chairs Award (one of two best paper awards at ICER) for the paper that I blogged about here. Below is the whole GT contingent at ICER (including chair Brian Dorn, GT alum).  The other best paper award, the peoples’ choice John Henry Award, went to Kristin Searle and Yasmin Kafai (see paper here) about the e-textiles work with American Indians that I blogged about here. Kristin had so many interesting insights, like the boys in her project telling her that “I don’t own” the projects they made because they felt no ownership over the programming environment they were using. The quality of the papers was very good (you can see the list of all of them here). My favorite paper from my review packet was presented Monday morning, Spatial Skills in Introductory Computer Programming. Steve Cooper and Sheryl Sorby with two undergraduates at Stanford did the study that I’ve been wanting to see for ages (see blog post where I talk about it). Training an experimental group in spatial skills improved performance over a control group. Surprisingly, SES and race differences disappeared in the experimental group! This is an important result. But one session blew me away — it changed how I think about blocks programming.    I came away from that three papers realizing that blocks programming is likely the best modality to use in elementary school programming, and perhaps even when starting to program in high school, and maybe even for end-user programmers. But even more important, I realized that Amy Ko’s comments about programming languages as being a powerful and unusable user interface (see her blog post here) is the critical insight about programming today. David showed us that blocks can dramatically increase readability of programs. Diana showed us that the user interface dramatically influences the readability of the blocks. At the novice programming level, blocks-based languages are the most promising direction today, and designing good blocks languages is as much a user interface design problem as it is a programming language design problem. "
"46","2015-08-05","2023-03-24","https://computinged.wordpress.com/2015/08/05/icer-2015-preview-first-ebook-paper/","ICER 2015 (see website here) is August 9-13 in Omaha, Nebraska. The event starts for me and Barbara Ericson, Miranda Parker, and Briana Morrison on Saturday August 8. They’re all in the Doctoral Consortium, and I’m one of the co-chairs this year. (No, I’m not a discussant for any of my students.) The DC kickoff dinner is on Saturday, and the DC is on Sunday. My thanks to my co-chair Anthony Robins and to our discussants Tiffany Barnes, Steve Cooper, Beth Simon, Ben Shapiro, and Aman Yadav. A huge thanks to the SIGCSE Board who fund the DC each year. We’ve got two papers in ICER this year, and I’ll preview each of them in separate blog posts. The papers are already available in the ACM digital library (see listing here), and I’ll put them on my Guzdial Papers page as soon as the Authorizer updates with them. I’m very excited that the first CSLearning4U project paper is being presented by Barbara on Tuesday. (See our website here, the initial blog post when I announced the project here, and the announcement that the ebook is now available). Her paper, “Analysis of Interactive Features Designed to Enhance Learning in an Ebook,” presents the educational psychology principles on memory and learning that we’re building on, describes features of the ebooks that we’re building, and presents the first empirical description of how the Runestone ebooks that we’re studying (some that we built, some that others have built) are being used. My favorite figure in the paper is this one:  This lists all the interactive practice elements of one chapter of a Runestone ebook along the horizontal axis (in the order in which they appear in the book left-to-right), and the number of users who used that element vertically. The drop-off from left-to-right is the classic non-completion rate that we see in MOOCs and other online education. Notice the light blue bars labelled “AC-E”? That’s editing code (in executable Active Code elements). Notice all the taller bars around those light blue bars? That’s everything else. What we see here is that fewer and fewer learners edit code, while we still see learners doing other kinds of learning practice, like Parsons Problems and multiple choice problems. Variety works to keep more users engaged for longer. A big chunk of the paper is a detailed analysis of learners using Parsons Problems. Barbara did observational studies and log file analyses to gauge how difficult the Parsons problems were. The teachers solved them in one or two tries, but they had more programming experience. The undergraduate and high schools students had more difficulty — some took over 100 tries to solve a problem. Her analysis supports her argument that we need adaptive Parsons Problems, which is a challenge that she’s planning on tackling next."
"47","2015-04-01","2023-03-24","https://computinged.wordpress.com/2015/04/01/launching-our-teacher-ebook-for-learning-python-and-cs-principles/","Back in September 2011, I announced that we received NSF funding to try to “beat the book.” (See post here.) Could we create an electronic (Web-based) book that was better for CS teacher learning than reading a physical book? Took us three years, but I’m confident that the answer is now, “Yes.” Our ebook is hosted by Brad Miller’s Runestone tools and site. We use worked examples (as mentioned here) interleaved with practice, as Trafton and Reiser recommend. We have coding in the book as well as Philip Guo’s visualizations. There are audio tours to provide multi-modality code explanations (see modality effect), and Parson’s problems to provide low cognitive load practice (see mention here). We support book clubs that set their own schedule, in order to create social pressure to complete, but at a scale that makes sense for teachers. 2011 was a long time ago. That original post didn’t even mention MOOCs. We ran two studies in the Fall, one on learning with novices and one on usability (which involved several of you — thank you for responding to my call for participants!). I’m not going to say anything about those results here, pending review and publication. We have updated the book based on the results of those studies. I don’t know if we beat the MOOC. We’re running at about a 50% completion rate, but we’ll only really know when we go to scale. I am pleased to announce the book is ready for release! Please send this url to any teacher you think might want to learn about teaching CS (especially for the AP CS Principles — see learning objectives here) in Python: http://ebooks.cc.gatech.edu/TeachCSP-Python/ Thanks! Our next steps are to develop a student ebook. By Fall, we hope to have a teacher and a student CSP ebook, which may make for an additional incentive for teachers to complete."
"48","2019-07-14","2023-03-24","https://computinged.wordpress.com/2019/07/14/how-to-reduce-the-defensive-climate-and-what-students-really-need-to-understand-code-iticse-2019-preview/","This year, we’re presenting two papers at the 2019 ACM SIGCSE Innovation and Technology in CS Education (ITICSE) conference in Aberdeen, Scotland. I’ve been to ITICSE several times and enjoy it every time, but I can’t always justify the trip. This year, Barbara Ericson, Katie Cunningham, and I are all in Germany for a Dagstuhl Seminar on Notional Machines the week before, so we took the opportunity to submit and are fortunate to be invited to present. Making CS Learning Visible: Case Studies on How Visibility of Student Work Supports a Community of Learners in CS Classrooms by Amber Solomon, Vanessa Oguamanam, Mark Guzdial, and Betsy DiSalvo When I taught CS Ed Research this last semester (see the blog post about open questions from the class), the students so resonated with Lecia Barker’s papers about defensive climate (the classic paper is here). The story about how CS classes are “characterized by competitiveness rather cooperation, judgments about others, superiority, and neutrality rather than empathy” still rings true, 17 years after first written. Several of my students proposed research to follow-up on the original study. Amber and Vanessa are also motivated by the concerns about defensive climate in CS classes, but they don’t want to measure it. They are suggesting an intervention. They suggest that a community of learners approach would reduce defensive climate. Key to creating a community of CS learners, they propose, is making student work and process visible. Vanessa works in marker-oriented curricula, where student work is physical and the work process is visible. Amber did the evaluation of the AR design studio classroom that I’ve written about previously. In both of these case studies, they observed student communication patterns that were different from the defensive climate studies and more in keeping with a community of learners culture. Defensive climate is still a problem, and changing culture and community is the way to address it. Novice Rationales for Sketching and Tracing, and How They Try to Avoid It by Katie Cunningham, Shannon Ke, Mark Guzdial, and Barbara Ericson At ICER 2017, Katie presented a study of how students trace their programs on paper (see ICER 2017 paper here, and my blog post summary here). She had some fascinating and surprising results. For example, if students traced their programs only part way and then guessed at the final result, they were more likely to get the problem wrong than if they’d never traced before. But why? Why would students trace the program part way and then stop — only to get it wrong? That’s what Katie explored in this follow-up paper. She had an innovative experimental design. She replicated her original tracing experiment, then pulled out about a dozen interesting participants, and invited them back for a retrospective interview. She could show them the original problem and what they traced — and then ask them why? Here’s one of the answers: They thought that they “got the hang of it.” They recognized a goal or pattern. They just recognized wrong. One of my favorite parts of the paper is completely visual. Katie had a terrific idea — let’s ask the teacher of the class to trace the problems. Here’s one of the traces that the teacher did:  Here are some examples of what students did:  Notice a distinct lack of similarity? Why? Why don’t students trace like the instructor did? This is a qualitative study, so it’s rich with interview data. I recommend reading the whole paper. There’s a neat part at the end where Katie points out, “Program visualizations do X. When students trace, they do Y. Why are these things so different?”"
"49","2019-03-11","2023-03-24","https://computinged.wordpress.com/2019/03/11/research-questions-from-the-cs-education-research-class-february-2019/","Each time I teach the CS Education Research class, we have one session where we brainstorm the questions that this class thinks are interesting and still open (see 2017 edition here and 2015 edition here). This is my first time teaching the class at the University of Michigan. It’s a joint undergraduate and graduate class. We have 22 students total (11 from each of undergrad/grad) — which is terrific for a special topics class on education research! We put up five terms on the white board as seeds for the questions. Questions were placed strategically near a given term or between two terms. I can’t represent between very well here, so I’m going to organize questions in terms of the closest term (by my eyeball of the photos I took of the whiteboards) and close to the bottom/top of the list to suggest connection to next/prior. These questions are amazing — I’m really impressed by the insights about what’s interesting, quality of questions, and breadth of topics. #proudTeacher Is there a difference in climate between liberal arts and engineering based CS? Does that climate impact diversity? What factors make near-peer mentors more effective? Is there a correlation in “defensive climate” in other subjects with factors like % of male faculty, % minorities in the field, etc.? How can we get CS educators to change their practices? How does having diverse/representative course staff impact student attitudes about CS and retention in CS classes/degrees? How do initiatives of active learning bridge the communities of students learning CS from different backgrounds? How do visually impaired programmers become part of the larger community of programming practice? How does the ordering of topics in an Informatics-centric CS1 vs. a CS-centric CS1 effect performance on a pseudocode test of overlapping concepts? Would question proofing before posting on Piazza increase frequency of questions posted and in turn motivate help-seeking behavior? How do non-CS majors develop their knowledge and practice of debugging? How does the interest of a lecturer impact how students learn within the course? Should we force tenure-track professors to teach who don’t want to teach? Can student lecturers make the same impact on student learning and attitudes as professional lecturers and/or tenure-track faculty? What are effect of class sizes and teaching methods on CS student learning? Does teacher belief that their students have (or don’t have) a “Geek Gene” affect student performance? How do the language learned in CS classes and their relevancy in industry affect retention rate (if at all)? What is the best programming language for introduction to CS, and how would you define “best”? Do we want to teach everyone computer science or computational thinking? Would subgoal-labeled assertion-evidence slides improve student retention in an introductory data structures course? Empirically, how does increasing the emphasis on reading code (vs primarily writing code) affect student learning? Does a focus on reading make the fMRI distinction on reading prose or reading code decrease faster (that is, with less experience as a function of time)? What metaphors in teaching lead to the most successful learning of notional machines? What metaphors do students invent, and which lead to the most successful learning of notional machines? What is the role of communicating the redesign of a CS1 for recruitment (matriculation) and retention? If you improve your CS1 and you tell prospective students that you changed it, does that change recruitment or retention? Or do prior attitudes/opinions outweigh the re-design? How can we better understand students’ mental models of notional machines? How do measure student disconnect in MOOCs? How can we integrate lecture videos with student hands-on practice in data science or programming MOOCs? Does engagement on Piazza (common on-line discussion forum) impact CS student performance? Should course staff promote discussions or start discussions on Piazza? Are benefits to students different if it’s staff starting the discussions or students? How does national or state standardization of CS class topics or curriculum effect enrollment rates and diversity in high school CS classes? How do parents’ education level/career influence student choices in CS, e.g. ,to take a CS class, to get a CS degree, to seek a CS job, etc.? Do students with learning disabilities (e.g., dyslexia) view code differently? Could we use fMRI or eye tracking to measure this? Why don’t more lower-income students go into CS? What percentage of current CS students are lower-income? How many lower-income students have the opportunity to learn CS and don’t take it? What would it cost to implement a CS program in all high schools in Michigan?"
"50","2017-11-03","2023-03-24","https://computinged.wordpress.com/2017/11/03/open-research-questions-in-computing-education-2017-edition/","When I last taught the Computing Education Research question class in 2015, we generated a list of open research questions (see post here). We’ve got even more students this time in the class, so our list of questions is even longer. We tried to cluster them, so similar questions should be near each other . What areas/findings of CS education research transfer to online learning? What doesn’t work the same? Would more students pursue CS if it was incorporated into other introductory classes (different domains)? Would more collaboration in two CS classes help reduce the defensive climate? Do certain spoken languages allow for more effective learning of computing? If so, which ones? Why don’t girls/minorities enter CS classes even if offered at their K12/undergrad school? In underrepresented communities, is CS education a priority? If not, why not? Does learning computing earlier quicken abstract reasoning? How can you tell if a middle-schooler is learning computational thinking? What is computational thinking, operationally? How can we get the attrition rate to decrease in CS education? Do we offer fewer jobs in industry? Force more people to teach CS? How do retain CS teachers? Would teaching testing strategies from CS1 increase code writing skills? Would undergrads be better programmers if they used weakly-typed languages before using strongly-typed languages? Would students be better programmers if they learned ML or R first? Or if they learned to diagram programs first? Can short informal CS Ed interventions (e.g., in museums, public spaces, etc.) have any effect on CS learning and/or self-efficacy and/or attitudes towards computing? How can teach undergraduate students how to better understand documentation? Should we explore creating language documentation specific to intro classes? How does learning functional vs. procedural programming first effect development of computational literacy? How can we increase diversity in online CS education? What kind of Community of Learners gravitates towards online education? How can we make informal computational learning accessible to a wide audience? Is it a positive or negative thing to have different forms of education for different communities within CS? Would a computing course focused on creative activities have better recruitment/retention of diverse students? Does physical computing engage students in a different way than traditional programming? How do computational scientists think about code differently than computer scientists? Can we teach computing to an elderly community of learners? Would more diversity in Maker and Tinkerer spaces increase the diversity in CS?"
"51","2015-11-20","2023-03-24","https://computinged.wordpress.com/2015/11/20/research-questions-from-cs-ed-research-class/","My CS Ed research class did lots of reading in the first half, and then are developing research plans in the second half. In between, I asked the students to develop research questions (faces deliberately obscured in picture of the class above), and several colleagues asked me, “Please share what they came up with!” "
"52","2017-08-18","2023-03-24","https://computinged.wordpress.com/2017/08/18/teachers-are-not-the-same-as-students-and-the-role-of-tracing-icer-2017-preview/","The International Computing Education Research conference starts today at the University of Washington in Tacoma. You can find the conference schedule here, and all the proceedings in the ACM Digital Library here. In past years, all the papers have been free for the first couple weeks after the conference, so grab them while they are outside the paywall. Yesterday was the Doctoral Consortium, which had a significant Georgia Tech presence. My colleague Betsy DiSalvo was one of the discussants. Two of my PhD students were participants: We have two research papers being presented at ICER this year. Miranda Parker and Kantwon Rogers will be presenting Students and Teachers Use An Online AP CS Principles EBook Differently: Teacher Behavior Consistent with Expert Learners (see paper here) which is from Miranda C. Parker, Kantwon Rogers, Barbara J. Ericson, and me. Miranda and Kantwon studied the ebooks that we've been creating for AP CSP teachers and students (see links here). They're asking a big question: ""Can we develop one set of material for both high school teachers and students, or do they need different kinds of materials?"" First, they showed that there was statistically significantly different behaviors between teachers and students (e.g. different number of interactions with different types of activities). Then, they tried to explain why there were differences. We develop a model of teachers as expert learners (e.g., they know more knowledge so they can create more linkages, they know how to learn, they know better how to monitor their learning) and high school students as more novice learners. They dig into the log file data to find evidence consistent with that explanation. For example, students repeatedly try to solve Parsons problems long after they are likely to get it right and learn from it, while teachers move along when they get stuck. Students are more likely to run code and then run it again (with no edits in between) than teachers. At the end of the paper, they offer design suggestions based on this model for how we might develop learning materials designed explicitly for teachers vs. students. Katie Cunningham will be presenting Using Tracing and Sketching to Solve Programming Problems: Replicating and Extending an Analysis of What Students Draw (see paper here) which is from Kathryn Cunningham, Sarah Blanchard, Barbara Ericson, and me. The big question here is: ""Of what use is paper-and-pen based sketching/tracing for CS students?"" Several years ago, the Leeds' Working Group (at ITiCSE 2004) did a multi-national study of how students solved complicated problems with iteration, and they collected the students' scrap paper. (You can find a copy of the paper here.) They found (not surprisingly) that students who traced code were far more likely to get the problems right. Barb was doing an experiment for her study of Parsons Problems, and gave scrap paper to students, which Katie and Sarah analyzed. First, they replicate the Leeds' Working Group study. Those who trace do better on problems where they have to predict the behavior of the code. Already, it's a good result. But then, Katie and Sarah go further. For example, they find it's not always true. If a problem is pretty easy, those who trace are actually more likely to get it wrong, so the correlation goes the other way. And those who start to trace but then give up are even more likely to get it wrong than those who never traced at all. They also start to ask a tantalizing question: Where did these tracing methods come from? A method is only useful if it gets used — what leads to use? Katie interviewed the two teachers of the class (each taught about half of the 100+ students in the study). Both teachers did tracing in class. Teacher A's method gets used by some students. Teacher B's method gets used by no students! Instead, some students use the method taught by the head Teaching Assistant. Why do some students pick up a tracing method, and why do they adopt the one that they do? Because it's easier to remember? Because it's more likely to lead to a right answer? Because they trust the person who taught it? More to explore on that one."
"53","2016-05-16","2023-03-24","https://computinged.wordpress.com/2016/05/16/implementing-design-studio-pedagogy-with-an-augmented-reality-cs-classroom/","Architecture and art is often taught in a design studio setting, where students work in a large, open space where everyone can see what everyone else is doing all the time — for collaboration, for inspiration, and for camaraderie. Colleen Kehoe wrote her dissertation on advantages of these pedagogies for learning and how they might be used in CS classes. Colleen was part of establishing the use of design gallery walks (where students work is displayed for the whole class to review and comment on) in some of our HCI classes. The challenge to using design studio pedagogies in most CS classes is that our work lives just on the screen, where the only ones who can see it are those right in front of the screen. This semester, we built a design studio classroom using augmented reality technology, and taught a recitation section of a Media Computation course using it.  The room was created by Blair MacIntyre with students Ashwin Kacchara and Ryan Jones. They used technology from Microsoft Research called RoomAlive, which uses Kinects to scan the room and develop a model to drive the projectors. Blair and his students defined a set of virtual displays for each student’s work. When students were in the room, they programmed in Pythy from Steve Edwards, a browser-based Python IDE that supports the Media Computation library. Ryan modified Pythy so that the last picture generated from student work was saved to a database, then he and Ashwin used RoomAlive to display those images around the room. The effect was that the wall was covered with the latest of students’ work for all to see. Betsy DiSalvo is an expert on design pedagogies. She guided the design of the room and me (as the teacher in the room) in figuring out how to use the room. Amber Solomon is a first year PhD student working with me who evaluated the project. Betsy has been working with Amber during the evaluation, since I’m conflicted as the teacher of the class. Amber’s done an amazing job, observing literally hours of the design studio recitation section and a comparison recitation section, then interviewing almost all of the students in the design studio classroom. They’ve written one article already, for the IEEE Virtual Reality 2016 Workshop on K-12 Embodied Learning through Virtual & Augmented Reality (KELVAR) which is available through the workshop website.  I had a great time teaching in the class. I was able to move around the room, pointing to student work as examples of things I wanted to highlight. I knew the room was really working the first time that a student produced a humorous picture (turning Donald Trump into a Shrek-like green). Students started laughing, grabbing one another to get their attention. Then another student pulled our his phone to Snapchat the image. How often do CS students use Snapchat to share other students’ CS work? I’m writing this now because Amber is now finishing her interviews, and we’re already getting some surprising results. I don’t want to give away too much, because I hope she’s going to publish another fascinating paper on her results. We were worried about the effect of the technology on the students. Would it frighten students off? Would it be too unusual? Amber says that students didn’t find it unusual or novel. The biggest surprise for me so-far: It helped students in getting help. In any CS class, you can provide help, but it’s hard to get students to take it. There is a whole literature on help-seeking behavior. For a student to seek help, the student has to first admit that he needs help — and that can trigger imposter syndrome. Students told Amber that they were willing to ask for help because their work (and everyone else’s) was visible, so everyone knew who needed help. One student told Amber, “I liked it alot. It projects like the last image someone produced. You could see who had already, like, fully understood the topic and, like, who had completed the task and then you could ask them for help if you needed too, or people who are struggling you could help them.” We’re grateful for support for this project from Microsoft Research and from a GVU/IPaT Engagement Seed Grant."
"54","2020-06-22","2023-03-24","https://computinged.wordpress.com/2020/06/22/managing-cs-major-enrollment-boom-with-a-lottery-a-lottery-by-definition-is-fair/","I am excited to see that the University of California, San Diego is now managing their over-enrollment in the computer science major with a lottery — see the article here. Instead of enrolling students holistically or based on GPA, the department selects at random — assuming they exceed the 3.3 CSE GPA threshold. With the lottery system, all students are equally considered despite differences in their experience, drive, and ability. When asked about the implications of the new system — and possible disadvantage to high-performing students — CSE Chair Dean Tullsen explained, “a lottery, by definition, is fair.” “I think there’s this false assumption that the students who work harder are the ones who are getting the 4.0s, that hard work directly translates to a higher grade. [The lottery system will] admit a lot of hard-working students who weren’t getting in before,” CSE Vice-Chair for Undergraduate Education Christine Alvarado added. This is a much more fair system than simply allowing in the top GPA students. It probably doesn’t make Tech companies happier, but it’s not clear that it makes them less happy. They will still get lots of potential employees who are above the bar. Those employees will likely be more diverse than the graduates being produced from CS programs today. The students getting the top grades in the early classes are typically those with more opportunity to learn CS, more wealth, and more privilege. A lottery says that anyone who is prepared for the courses can take them. "
"55","2020-01-21","2023-03-24","https://computinged.wordpress.com/2020/01/21/is-there-a-geek-gene-are-cs-grades-bi-modal-moving-computing-ed-research-forward/","This month’s Communications of the ACM published Elizabeth Patitsas’s ICER paper about bimodality in CS grades (or rather, the lack thereof) as a research highlight, Evidence that Computer Science Grades are not Bimodal. It’s a big deal to have computing education in this position in the ACM flagship publication, and thanks to Shriram Krishnamurthi for his efforts in making this happen. I wrote about Elizabeth’s paper when it was originally published at ICER at this blog post. Elizabeth wrote a guest blog post here on these topics (see here). These are important issues — Wired has just published an article talking about the Geek Gene with a great discussion of Betsy DiSalvo’s work (see post here about some of Betsy’s work). I wrote the introductory page to the article (available here). I point out that Elizabeth’s article doesn’t end the debate, but it does move forward how we address questions about how we teach and how students learn: This paper does not prove there is no Geek Gene. There may actually be bimodality in CS grades at some (or even many) institutions. What this paper does admirably is to use empirical methods to question some of our long-held (but possibly mistaken) beliefs about CS education. Through papers like these, we will learn to measure and improve computing education, by moving it from folk wisdom to evidence-based decision-making."
"56","2016-04-13","2023-03-24","https://computinged.wordpress.com/2016/04/13/where-cs-teachers-see-bimodality-guest-blog-post-from-elizabeth-patitsas/","When I saw Elizabeth’s debrief, I asked her if I could share it on here. She graciously prepared this guest blog post, with more detail to explain what she did. Thanks, Elizabeth! About a year ago, I used a number of venues to recruit participants for an anonymous study about the distributions of grades in CS classes. The study involved a minor deception, and because we do not have the emails of all the participants, I’m posting the debrief openly. —————————— Dear study participant, You’re getting this email because about a year ago you participated in my research project, “An investigation of the grades distributions in university computer science”. In this project, I showed you a series of six histograms and I asked you how often you saw that distribution’s shape in your own teaching, as well as how you’d categorize the distribution (normal, bimodal, etc). I’m writing to you know to let you know this study involved a minor deception. We were actually most interested whether you’d label some ambiguous distributions as “normal” versus “bimodal”. We’ve now completed our analysis, and we want to debrief you before we write up our results for publication. As you may know, there is a common perception amongst CS educators that grades distributions are bimodal. However, upon statistical analysis of the grades distribution available to us, we discovered that most of our grades distributions pass statistical tests of normality and very few of them of them pass the statistical tests of bimodality (see link for more). We were curious why the perception of bimodal grades is so prevalent, even when grades may actually be normally-distributed. Ahadi and Lister argued at ICER 2013 that the perception of bimodal grades comes from CS educators believing that some students possess an innate gift/talent to do computer science. Regular readers of Mark’s blog would know this as the “Geek Gene Hypothesis”: the notion that when it comes to CS, you either can get it, or you can’t. Ahadi and Lister argued that when people see two “peaks” in their grades, it’s because they’re expecting to see two different populations to be represented: the students who get it, and the students who don’t. Usually, bimodal distributions represent data where you’ve sampled two different populations together at the same time. If CS grades were bimodal, that could imply we have two different populations of students (e.g. those who get it + those who don’t). Whereas if CS grades are normal, it would imply (but not prove) our students form a spectrum, where most students understand some — but not all — of the material. In the study you participated in, all six histograms were randomly-generated normal distributions with a small sample size (and so looked noisy). We wanted to test two things: For a random half of the participants, before you categorized the distributions, we asked you “It is a commonly-held belief that CS grades distributions are bimodal. Do you find this to be the case in your teaching?” The other half of the participants saw this question after categorizing the distributions. This priming was used to test RQ2. If our consent form had said the true intent of the study, then all participants would have been primed, rather than a random half. Our minor deception about the purpose of the study was necessary to answer this research question. We delayed the debriefing until after our analysis was complete, on the assumption you’d want to know the preliminary results of the study. We indeed found that participants who agreed more strongly with the statement “Some students are innately predisposed to do better at CS than others” were statistically significantly more likely to label ambiguous distributions as bimodal. Participants who had been primed were more likely to label distributions as bimodal — and this effect was stronger if they also agreed that CS ability was innate. To ensure participant anonymity, we did not collect names and emails on the SurveyMonkey survey. As a result we have no way to link your responses to your identity. We will be submitting our results for publication in the coming months, and will happily disseminate the paper once it is published. If you’d like to receive a copy of the paper once it’s published, add your email to this form. If you have any further questions, please contact us. Thank you, Elizabeth Patitsas Jesse Berlin Michelle Craig Steve Easterbrook"
"57","2014-10-13","2023-03-24","https://computinged.wordpress.com/2014/10/13/the-10k-rule-stands-deliberate-practice-leads-to-expertise-and-teaching-can-trump-genetics/","A recent article in Slate (see here) suggests that practice may not lead to expertise, that the “10,000 hour rule” is wrong. The “10,000 hour rule” was popularized by Malcolm Gladwell in his book Outliers (see excerpt here), but really comes from an important paper by K. Anders Ericsson and colleagues, “The Role of Deliberate Practice in the Acquisition of Expert Performance.” Ericsson claimed that 10,000 hours of deliberate practice results in expert-level performance. The Slate article is based mostly on a new meta-analysis (see here) by Macnamara, Hambrick (also a co-author on the Slate article), and Oswald which reviewed and combined studies on expertise. They found that practice always was positively correlated with better performance, but did not explain all of (or even most of) the difference in expertise between study participants. The Slate article authors suggest, then, that deliberate practice is not as important as genetics or innate talent. Deliberate practice left more of the variation in skill unexplained than it explained…There is now compelling evidence that genes matter for success, too…What all of this evidence indicates is that we are not created equal where our abilities are concerned. The paper and article make two big mistakes that leave the “10,000 hour rule” as valid and valuable. The first is that practice is not the same as deliberate practice, and the second is that the fallback position can’t be genetics/innate talent. In general, their argument hinges on practice hours all being of equal value, which shows a lack of appreciation for the role of teaching. Ericsson was pretty clear in his paper that all practice is not created equal. Deliberate practice is challenging, focused on the skills that most need to be developed, with rapid feedback. (Here’s a nice blog post explaining deliberate practice.) Simply putting in 10,000 hours of practice in an activity does not guarantee expertise. Ericsson and the Slate authors would be in agreement on this point. I’m sure that we’ve all seen musicians or athletes (and if we’re honest, we’ve probably all been like those musicians or athletes) who sometimes just “phone it in” during practice, or even during a game. I used to coach my daughters’ soccer teams, and I can absolutely assure you that there were hours in games and rehearsals where some of my players really didn’t make any progress. They found ways of getting through practice or games without really trying. In the Macnamara paper, whether practice was “deliberate” or not was determined by asking people. They collected practice logs, surveys, and interviews. The participants in the studies self-reported whether the practice was deliberate. Imagine someone telling the interviewer or writing in their log, “Yeah, well, about 5,000 of those 10,000 hours, I was really lazy and not trying very hard.” It’s impossible to really distinguish practice from deliberate practice in this data set. The bottom-line is that the Macnamara study did not test Ericsson’s question. They tested a weak form of the “10,000 hour rule” (that it’s just “practice,” not “deliberate practice”) and found it wanting. But their explanation, that it’s genetics, is not supported by their evidence. The Slate authors argue that, if practice doesn’t explain expertise, then it must be genetics. They cite two studies that show that identical twins seem to have similar music and drawing talent compared to fraternal twins. But that’s correlation and doesn’t prove causation — there may be any number of things on which the identical twins aren’t similar. (See this great Radiolab podcast exploring these kinds of miraculous misconceptions.) If you’re going to make the genetics/innate argument, you have to start tracking participants at birth. Otherwise, there’s an awful lot that might add to expertise that’s not going to get counted in any practice logs. I took classes on how to coach soccer. One of the lessons in those classes was, “It’s a poor coach who makes all practices into scrimmage.” Rather, we were taught to have students do particular drills to develop particular skills. (Sound like deliberate practice?) For example, if my players were having trouble dribbling, I might have them dribble a ball in a line around cones, across distances, through obstacles. Can you imagine a child who one day might play in a soccer team with official practices — but before those practices and perhaps even before joining a team might dribble a ball around the neighborhood? Wouldn’t that be developing expertise? And yet, it wouldn’t be counted in player logs or practice hours. A kid who did lots of dribbling might come into a team and seem like a superstar with all kinds of innate talent. One might think that the kid had the “Soccer gene.” To start counting hours-towards-expertise anything later than birth is discounting the impact of learning in the pre-school years on up. We know that pre-school years make a difference (see this website that Diana Franklin sent me, and the argument for pre-school in this recent Freakonomics podcast). A wide variety of activities can develop skills that can be influence expertise. If you don’t start tracking students from birth, then it’s hard to claim that you’ve counted in the practice log everything that’s relevant for expertise. The claim that expertise is determined at birth is a common claim among CS educators. Most CS teachers to whom I’ve asked the question are convinced some people “can’t” learn to code, that it’s genetic or innate to learn programming. That’s where the myth of the “Geek Gene” came from (Raymond Lister has written several times on that). Couldn’t it be that there are dribbling-around-the-neighborhood activities that lead toward CS expertise? Consider the famous pre-programming activity of writing the instructions out for making a peanut-butter-and-jelly sandwich (like here). If we believe that that kind of practice helps to develop CS expertise, then other “writing instructions out” activities might lead towards CS expertise. Maybe people who seem to have genetic/innate ability in CS just did a lot of those kinds of activities before they got to our classes. The clock on developing expertise doesn’t start when students walk through our door. In the end, it’s very difficult to prove or disprove that genetics accounts for expertise in cognitive skill. I don’t think Macnamara et al. settled the score. But my point about deliberate practice actually points to a much bigger issue. Teachers Matter is the two word title of a 2012 OECD report (available here). There is a difference between great teachers and poor teachers, and the difference can be seen in terms of student performance. If you believe that (and there’s gobs of evidence that says you should), then it seems obvious that all practice is not created equal. Hours spent in practice with a good teacher are going to contribute more to expertise than hours spent without a teacher. Look back at that definition of “deliberate practice” — who’s going to pick the activities that most address your needs or provide the immediate feedback? The definition of deliberate practice almost assumes that there’s going to be teacher in the loop. An open question is just how far we can get with excellent teaching. How much can we use teaching to get beyond genetic disparities? Is teaching more powerful than genetics? That’s an important question, and far more important than the classic CS question whether P=NP. I believe that there are limits. There are genetic problems that teaching alone can’t address. But we don’t know what those limits are. We certainly have evidence that we can use teaching to get past some differences that have been chalked up to genetics or being innate. Consider the fact that men have better spatial skills than women. Is it innate, or is it learned? It’s not clear (see discussion on that here). But the important point is: it doesn’t matter. Terlecki, Newcombe, and Little have found that they can teach women to perform as well as men on visual skills and that the improvements in spatial ability both transfers and persists (see the journal article version here). The point is that spatial skills are malleable, they can be developed. Why should we think that other cognitive skills aren’t? The claims of the Slate authors and Macnamara et al ignore the power of a great teacher to go beyond simple rote practice to create deliberate opportunities to learn. The words teach, teacher, and teaching don’t appear in either article. Here’s my argument summarized. The Slate authors and Macnamara et al. dismiss the 10K hour rule too lightly, and their explanation of genetic/innate basis for expertise is too simple. Practice is not the same as deliberate practice, or practice with a teacher. Expertise is learned, and we start learning at birth with expertise developing sometimes in ways not directly connected to the later activity. The important part is that we are able to learn to overcome some genetic/innate disparities with good teaching. We shouldn’t be giving up on developing expertise because we don’t have the genes. We should be thinking about how we can teach in order to develop expertise."
"58","2019-10-21","2023-03-24","https://computinged.wordpress.com/2019/10/21/how-to-change-undergraduate-computing-to-engage-and-retain-more-women/","My Blog@CACM post for this month talks about the Weston et al paper (from last week), and about a new report from the Reboot Representation coalition (see their site here). The report covers what the Tech industry is doing to close the gender gap in computing and “what works” (measured both empirically and from interviews with people running programs addressing gender issues). I liked the emphasis in the report on redesigning the experience of college students (especially female) who are majoring in computing. Some of their emphases: The report is interesting — I recommend it."
"59","2019-06-03","2023-03-24","https://computinged.wordpress.com/2019/06/03/the-gender-imbalance-in-ai-is-greater-than-in-cs-and-thats-a-big-problem/","My colleague, Rada Mihalcea, sent me a copy of a new (April 2019) report from the AI Now Institute on Discriminating Systems: Gender, Race, and Power in AI (see link here) which describes the diversity crisis in AI: There is a diversity crisis in the AI sector across gender and race. Recent studies found only 18% of authors at leading AI conferences are women, and more than 80% of AI professors are men. This disparity is extreme in the AI industry: women comprise only 15% of AI research staff at Facebook and 10% at Google. There is no public data on trans workers or other gender minorities. For black workers, the picture is even worse. For example, only 2.5% of Google’s workforce is black, while Facebook and Microsoft are each at 4%. Given decades of concern and investment to redress this imbalance, the current state of the field is alarming. Without a doubt, those percentages do not match the distribution of gender and ethnicity in the population at large. But we already know that participation in CS does not match the population. How do the AI distributions match the distribution of gender and ethnicity among CS researchers? A sample to compare to is the latest graduates with CS PhDs. Take a look at the 2018 Taulbee Survey from the CRA (see link here). 19.3% of CS PhD’s went to women. That’s terrible gender diversity when compared to the population, and AI (at 10%, 15%, or 18%) is doing worse. Only 1.4% of new CS PhD’s were Black. From an ethnicity perspective, Google, Facebook, and Microsoft are doing surprisingly well. The AI Now Institute report is concerned about intersectionality. “The overwhelming focus on ‘women in tech’ is too narrow and likely to privilege white women over others.” I heard this concern at the recent NCWIT Summit (see link here). The issues of women are not identical across ethnicities. The other direction of intersectionality is also a concern. My student, Amber Solomon, has published on how interventions for Black students in CS often focus on Black males: Not Just Black and Not Just a Woman: Black Women Belonging in Computing (see link here). I had not seen previously a report on diversity in just one part of CS, and I’m glad to see it. AI (and particularly the sub-field of machine learning) is growing in importance. We know that having more diversity in the design team makes it more likely that a broader range of issues are considered in the design process. We also know that biased AI technologies are already being developed and deployed (see the Algorithmic Justice League). A new Brookings Institute Report identifies many of the biases and suggests ways of avoiding them (see report here). AI is one of the sub-fields of computer science where developing greater diversity is particularly important. "
"60","2021-08-16","2023-03-24","https://computinged.wordpress.com/2021/08/16/icer-2021-preview-the-challenges-of-validated-assessments-developing-rich-conceptualizations-and-understanding-interest/","The International Computing Education Research Conference (ICER) 2021 is this week (website here). It should have been in Charleston, South Carolina (one of my favorite cities), but it will instead be all on-line. Unlike previous years, if you are not already registered, you’re unfortunately out of luck. As seen in Matthias Hauswirth’s terrific guest blog post from last week (see here), getting set up in Clowdr is complicated. ICER won’t have the resources to bring people on-line and get them through the half hour prep sessions on-the-fly. There will be no “onsite” registration. However, all the papers should be available in the ACM Digital Library (free for some time), and I think all the videos of the talks will be made available after the fact, so you can still gain a lot from the conference. Let me point out a few of the highlights that I’m excited about. (As of this writing, the papers are not yet appearing in the ACM DL — all the DOI links are failing for me. I’ll include the links here in hopes that everything is fixed soon.) Our keynoter is Tammy Clegg, whom I got to know when she was a PhD student at Georgia Tech. She’s now at U. Maryland doing amazing work around computation and relevant science learning. I’m so looking forward to hearing what she has to say to the ICER community. Miranda Parker, Allison Elliott Tew, and I have a paper “Uses, Revisions, and the Future of Validated Assessments in Computing Education: A Case Study of the FCS1 and SCS1.” This is a paper that we planned to write when Miranda first developed the SCS1 (first published in 2016). We created the SCS1 in order to send it out to the world for use in research. We hoped that we could sometime later do in CS what Richard Hake did in Physics, when he used the FCI to make some strong statements about teaching practices with a pool of 6,000 students (see paper here). Hake’s paper had a huge impact, as it started making the case to shift from lecture to active learning. Could we use the collected use of the SCS1 to make some strong arguments for improving CS learning? We decided that we couldn’t. The FCI was used in pretty comparable situations, and it’s tightly focused on force. CS1 is far too broad, and FCS1 and SCS1 are being used in so many different places — not all of which it’s been validated for. Our retrospective paper is kind of a systemic literature review, but it’s done from the perspective of tracing these two instruments and how they’ve been used by the research community. One of the papers that I got a sneak peek at was “When Wrong is Right: The Instructional Power of Multiple Conceptions” by Lauren Margulieux, Paul Denny, Katie Cunningham, Mike Deutsch, and Ben Shapiro. The paper is exploring the tensions between direct instruction and more student-directed approaches (like constructionism and inquiry learning) (see a piece I did in 2015 about these tensions). The basic argument of this new paper is that just telling students the right answer is not enough to develop rich understanding. We have to figure out how to help students to be able to hold and compare multiple conceptions (not all of which is canonical or held by experts), so that they can compare and contrast, and use the right one at the right time. I’m chair for a session on interest. While I haven’t seen the papers yet, I got to watch the presentations (which are already loaded in Clowdr). “Children’s Implicit and Explicit Stereotypes on the Gender, Social Skills, and Interests of a Computer Scientist” by de Wit, Hermans, and Aivaloglou is a report on a really interesting experiment. They look at how kids associate gender with activities (e.g., are boys more connected to video games than girls?). The innovative part is that they asked the questions and timed the answers. A quick answer likely connects to implicit beliefs. If they take a long time to answer, maybe they told you what they thought you wanted to hear? The second paper “All the Pieces Matter: The Relationship of Momentary Self-efficacy and Affective Experiences with CS1 Achievement and Interest in Computing” by Lishinski and Rosenberg asks about what leads to students succeeding and wanting to continue in computing. They look at students affective state coming into CS1 (e..g, how much do they like computing? How much do they think that they can succeed in computing?), and relate that to students’ experiences and affective state after the class. They make some interesting claims about gender — that gender gaps are really self-efficacy gaps. One of the more unusual sessions is a pair of papers from IT University of Copenhagen that make up a whole session. ICER doesn’t often give over a whole session to a single research group on multiple papers. One is “Computing Educational Activities Involving People Rather Than Things Appeal More to Women (Recruitment Perspective)” and the other is “Computing Educational Activities Involving People Rather Than Things Appeal More to Women (CS1 Appeal Perspective).” The pitch is that framing CS1 as being about people rather than things leads to better recruitment (first paper) and more success in CS1 (second paper) in terms of gender diversity. It’s empirical support for a hypothesis that we’ve heard before, and the authors frame the direction succinctly: “CS is about people not things.” Is that succinct enough to get CS faculty to adopt this and teach CS differently?"
"61","2021-08-13","2023-03-24","https://computinged.wordpress.com/2021/08/13/the-drawbacks-of-the-one-second-conference-trip-or-how-to-prepare-for-icer-2021-guest-blog-post-from-matthias-hauswirth/","I miss physical conferences. But there are some things about them I do not miss at all. I don’t miss sprinting through airports to catch a connecting flight. I don’t miss standing in line at immigration for over an hour, just to enter the next long line to get through customs. And I don’t miss sitting in a tight middle seat for ten hours straight. With today’s virtual conferences the trips are more pleasant. I can travel there with a single mouse click. It’s a one-second trip. And I love that! * However, by eliminating the trip to the conference, we also eliminated an opportunity to prepare for the conference while being stuck in airports, planes, stations, and trains. My physical conference trips used to provide ample idle time. I used that time to contact colleagues to schedule a dinner, lunch, or coffee at the conference; to read the conference program and highlight the talks I wanted to see; to check out the map of the venue to know where to find the relevant rooms; and even to read a paper or two to prepare for talking to the authors at the conference. That kind of preparation takes more than a second. And without the time provided by those arduous trips, I might show up ill prepared and miss out on half of the fun. So here is my plan. For my next one-second conference trip, I will allocate a little bit of extra time to prepare. Not crammed into an airplane seat, but at home, in a comfy chair, with a nice cup of coffee. Oh, and if your next conference trip takes you to ICER 2021 this coming Monday, here are some suggestions from the ICER Chairs for how to prepare for this conference, which will be hosted in the most recent version of Clowdr: In Clowdr you will find a lot of content, including the entire program. We recommend that inside Clowdr you “star” events you are interested in to create your personal schedule. There is a page for each paper and poster/lightning talk. On each paper page you already find the presentation as an embedded video, on each ICER poster page there’s the poster pitch video and the PDF of the poster, and on each ICER lightning talk page you find the talk slide. Have a quick look to plan your personal schedule. And while you’re there, why not already leave a message or comment for the authors in the chat at the right of the paper/poster’s page? Note that the links to the papers in the ACM DL are not yet active; we expect ACM to make the DOIs work and the papers visible in the DL by the start of the conference. We are confident that with an hour or so of up-front effort you will get much more out of the conference! (We suspect, though, that you will end up spending more than an hour because the content draws you in!) ICER 2021 is a compact conference packed with exciting content and interaction. Log in now to make the most of it! *) I also very much love the minimal carbon footprint, low cost, and reduced health risks of virtual conferences."
"62","2016-03-02","2023-03-24","https://computinged.wordpress.com/2016/03/02/sigcse-2016-preview-miranda-parker-replicated-the-fcs1/","I’ve been waiting a long time to write this post, though I do so even now with some trepidation. In 2010, Allison Elliott Tew completed her dissertation on building FCS1, the first language-independent and validated measure of introductory computer science knowledge (see this post summarizing the work). The FCS1 was a significant accomplishment, but it didn’t get used much. Allison had concerns about the test becoming freely available and no longer useful as a research instrument. Miranda Parker joined our group and replicated the FCS1. She created an isomorphic test (which we’re calling SCS1 for Secondary CS1 instrument — it comes after the first). She then followed a rigorous process for replicating a validated instrument, including think-aloud protocols to check usability (do the problems read as she meant them?), large-scale counter-balanced study using both tests, and analysis, including correlational and item-response theory (IRT) analysis. Her results support that SCS1 is effectively identical to FCS1, but also point out the weaknesses of both tests and why we need more and better assessments. (Note: Complaining in this paragraph — some readers might just want to skip this.) As the first time anyone had ever replicated a validated CS research instrument, the process is a significant result. SIGCSE reviewers did not agree. The Associate Chair’s comment on our rejected paper said, “Two reviewers had concerns about appropriateness of this paper for SIGCSE: #XXX because it didn’t directly address improved learning, and #YYY because replicating the FCS1 wasn’t deemed to be as noteworthy as the original work.” An assessment tool doesn’t improve learning, and a first-ever replication is not publishable. Miranda was hesitant to release SCS1 for use (e.g., post in my blog, send emails on CSEd-Research email lists) until the result was peer-reviewed. A disadvantage that my students have suffered for having an advisor who blogs — some reviewers have rejected my students’ papers because my blogging made it discoverable who did the research, and thus our papers can’t be sufficiently anonymized to meet those reviewers’ standards. So, I haven’t talked about SCS1, despite my pleasure and pride in Miranda’s accomplishment. I’m posting this now because Miranda does have a poster on SCS1 at the SIGCSE 2016 Technical Symposium. Come see her at the 3-5 pm Poster Session on Friday. Miranda had a major success in her first year as a PhD student, and the research community now has a new validated research instrument. Here’s the trepidation part: her paper on the replication process was just rejected for ITICSE. There’s no Associate Chair for ITICSE, so there’s no meta-review that gives the overall reasons. One reviewer raised some concerns about the statistics, which we’ll have to investigate. Another reviewer strongly disagrees with the idea of a replication, much like the #YYY reviewer at SIGCSE. One reviewer complained that this paper was awfully similar to a paper by Elliott Tew and Guzdial, so maybe it shouldn’t be published. I’m not sure how we convince SIGCSE and ITICSE reviewers that replication is important and something that most STEM disciplines are calling for more of. (Particularly aggravating point: Because FCS1 is not freely available, the reviewer doesn’t believe that FCS1 is “valid, consistent, and reliable” without inspecting it — as if you can tell those characteristics just by looking at the test?) I’m talking about SCS1 now because she has her poster accepted, so she has a publication on that. We really want to publish her process and in particular, the insights we now have about both instruments. We’ll have to wait to publish that — and I hope the reviewers of the next conference don’t give us grief because I talked about the result here. Contact Miranda at scs1assessment@gmail.com for access to the test."
"63","2021-08-02","2023-03-24","https://computinged.wordpress.com/2021/08/02/why-arent-more-girls-in-the-uk-choosing-to-study-computing-and-technology-guest-blog-post-by-peter-kemp/","The Guardian raised the question in the title in this article in June. Pat Yongpradit sent it to me and Peter Kemp, and Peter’s response was terrific — insightful and informed by data. I asked him if I could share it here as a guest post, and he graciously agreed. We’ve just started a 3 year project, scaricomp, that aims to look at girls’ performance and participation in computer science in English schools. There’s not much to see at the moment, as we started in April, but we’re hoping to sample 5000+ students across schools with large numbers of students taking CS and/or high numbers of females in the CS cohorts. I’ll let you know when we have some analysis in hand. You reference The Guardian article’s quote: “In 2019, 17,158 girls studied computer science, compared with the 20,577 girls who studied ICT in 2018”. It’s worth noting that the 2018 ICT figure was the end of the line for ICT, numbers in previous years were much higher, and the female figure was actually ~40% of the overall ICT entries, whilst it represents about 20% of the GCSE CS cohort, i.e. females were proportionally better represented in ICT than CS. For a fuller picture of the changing numbers and demographics in English computing, see slide 8 of this, or the video presentation). It’s also worth noting that since the curriculum change in 2012/13 we’ve lost the majority of time dedicated to teaching computing (including CS) at age 14-16, I’ve argued that this has had a disproportionate impact on girls and poorer students (page 45-48). To add a bit of context from England: Students typically pick 8-10 subjects for GCSE, though their ‘options’ might be limited. Most schools will insist that students take Maths, English Language, English Literature, Physics, Chemistry, Biology, and often: French or German, and History or Geography. This leaves students with one or two actual ‘options’. Many schools are also imposing entry requirements on GCSE CS, only letting the high achieving students (often focusing on maths) onto the course; this will likely have an impact in access to the curriculum for poorer students who are less likely to achieve well in mathematics. Why don’t females pick CS in the same way they picked ICT? This might well be linked to curriculum, role models, contextualisation etc. One of the reasons given for the curriculum change in 2012 was that students were being “bored to death” by ICT, with ICT generally being the application of software products to solve problems and the implication of technology on the world. The application of technology to the world lends itself to the contextualisation of the curriculum and the assessment materials. There was a lot of project-based assessment with real world scenarios for students to engage with, e.g. making marketing materials for businesses, using spreadsheets to organise holiday bookings etc https://web.archive.org/web/20161130183550if_/http://www.aqa.org.uk/subjects/computer-science-and-it/gcse/information-and-communication-technology-4520) . The GCSE CS is a different beast. It can be contextualised, but this is probably more difficult to do as there is an awful lot of material to cover and the assessment methodology is entirely exam based and on paper for the largest exam boards. Anecdotally we hear of schools cutting down on programming time on computers, as the exam is handwritten. Data looking at what females ‘liked’ in the old ICT curriculum is quite limited, but what does exist places some of the ‘non-CS’ elements quite highly. So, the actual curriculum content might have a part to play here. Having taught ICT (and CS) for many years, most students I knew really enjoyed the ICT components. I’d argue that the pre-reform discourse around ICT being: “useless, boring, easy”, CS being: “useful, exciting, rigorous” was an easy political position to take, and not reflective of reality where schools had competent teachers. We now find ourselves in a position where we probably have a little too much CS, and not enough digital literacy / ICT for the general needs of students. I and people like Miles Berry (p49) have argued for more generalist qualification which maintains elements of CS. Though there appears to be little political will to make this happen. To add another suggestions as to why we’re seeing females disengaging, within the English context, we see females substantially underachieving at GCSE in comparison to their other subjects and males of similar ‘abilities’ (ability here being similar grade profiles in other subjects). Why this is remains unclear, we see similar under achievement in Maths and Physics. My fear is that encouraging females to take CS might lead them to having their self-efficacy knocked and therefore make them less likely to pursue further study or a career in tech. We also found that females from poorer backgrounds were more likely to pick GCSE CS than their middle-class peers, we speculate that this might be the result of different cultural/family pressures and a keener engagement with the ’employability’ and ‘good pay’ discourse that often surrounds the representation of studying CS, however true this might be for these groups in reality. More research on the above coming soon through scaricomp. Additionally, in terms of the UK picture, you’ll probably want to check in with Sue Sentance and the Gender Balance in Computing Project. One of their theories for the decline in computing is that CS is being timetabled at the same time as other (generally) more attractive subjects for females. I’m not sure if they’ve started this part of the research yet, but it’s worth checking in. They are running interventions across the country, but I don’t believe that they are trying to do a nationally representative survey."
"64","2019-10-07","2023-03-24","https://computinged.wordpress.com/2019/10/07/an-analysis-of-supports-and-barriers-to-offering-computer-science-in-georgia-public-high-schools-miranda-parkers-defense/","Miranda Parker defends her dissertation this Thursday. It’s a really fascinating story, trying to answer the question: Why does a high school in Georgia decide (or not) to offer computer science? She did a big regression analysis, and then four detailed case studies. Readers of this blog will know Miranda from her guest blog post on the Google-Gallup polls, her SCS1 replication of the multi-lingual and validated measure of CS1 knowledge, her study of teacher-student differences in using ebooks, and her work exploring the role of spatial reasoning to relate SES and CS performance (work that was part of her dissertation study). I’m looking forward to flying down to Atlanta and being there to cheer her on to the finish. Title: An Analysis of Supports and Barriers to Offering Computer Science in Georgia Public High Schools Miranda Parker Human-Centered Computing Ph.D. Candidate School of Interactive Computing College of Computing Georgia Institute of Technology Date: Thursday, October 10, 2019 Time: 10AM to 12PM EST Location: 85 5th Street NE, Technology Square Research Building (TSRB), 2nd floor, Room 223 Committee: Dr. Mark Guzdial (Advisor), School of Interactive Computing, Georgia Institute of Technology Dr. Betsy DiSalvo, School of Interactive Computing, Georgia Institute of Technology Dr. Rebecca E. Grinter, School of Interactive Computing, Georgia Institute of Technology Dr. Willie Pearson, Jr., School of History and Sociology, Georgia Institute of Technology Dr. Leigh Ann DeLyser, CSforAll Consortium Abstract: There is a growing international movement to provide every child access to high-quality computing education. Despite the widespread effort, most children in the US do not take any computing classes in primary or secondary schools. There are many factors that principals and districts must consider when determining whether to offer CS courses. The process through which school officials make these decisions, and the supports and barriers they face in the process, is not well understood. Once we understand these supports and barriers, we can better design and implement policy to provide CS for all. In my thesis, I study public high schools in the state of Georgia and the supports and barriers that affect offerings of CS courses. I quantitatively model school- and county-level factors and the impact these factors have on CS enrollment and offerings. The best regression models include prior CS enrollment or offerings, implying that CS is likely sustainable once a class is offered. However, large unexplained variances persist in the regression models. To help explain this variance, I selected four high schools and interviewed principals, counselors, and teachers about what helps, or hurts, their decisions to offer a CS course. I build case studies around each school to explore the structural and people-oriented themes the participants discussed. Difficulty in hiring and retaining qualified teachers in CS was one major theme. I frame the case studies using diffusion of innovations providing additional insights into what attributes support a school deciding to offer a CS course. The qualitative themes gathered from the case studies and the quantitative factors used in the regression models inform a theory of supports and barriers to CS course offerings in high schools in Georgia. This understanding can influence future educational policy decisions around CS education and provide a foundation for future work on schools and CS access."
"65","2016-10-26","2023-03-24","https://computinged.wordpress.com/2016/10/26/google-gallup-reports-on-race-and-gender-gaps-in-cs-guest-blog-post-from-miranda-parker/","Google’s latest reports from their collaboration with Gallup lines up with Miranda Parker’s research interests in privilege in CS education (see preview of her RESPECT 2015 paper here). I invited her to write a guest blog post introducing the new reports. I’m grateful that she agreed. Google, in collaboration with Gallup, has recently released new research about racial and gender gaps in computer science K-12 classrooms. A lot of the report confirms what we already knew: there are structural and social barriers that limit access to CS for black, Hispanic, and female students. I don’t mind the repeated results though–it helps form an even stronger argument that there is a dearth of diversity in computing classrooms across the country. The report does highlight interesting tidbits that may not have been as obvious before. For example, black and Hispanic students are 1.5 and 1.7 times more likely than white students to be “very interested” in learning computer science. This knowledge, combined with the data that black and Hispanic students are less likely to have access to learning CS, creates a compelling argument for growing programs focused at these groups. Research like this continues to push the envelope of what is known about racial and gender gaps in computer science. However, it may be time to dig deeper than visible identities and explore if there are other variables that, independently or together with the other traits, create a stronger argument for why the diversity gap exists. Does socioeconomic status better explain racial gaps? What about spatial ability? These are variables that we at Georgia Tech are looking at, as we hypothesize about what can be done to level the playing field in computing.   Today, we’re releasing new research from our partnership with Gallup that investigates the demographic inequities in K-12 computer science (CS) education in two reports, Diversity Gaps in Computer Science: Exploring the Underrepresentation of Girls, Blacks and Hispanics and Trends in the State of Computer Science in U.S. K-12 Schools. We surveyed 16,000 nationally representative groups of students, parents, teachers, principals, and superintendents in the U.S. Our findings explore the CS learning gap between white students and their Black and Hispanic peers as well as between boys and girls and confirm just how much demographic differences matter. We’re excited to share this data to bring awareness to issues on the ground in order to help expand CS education in meaningful ways. Source: Racial and gender gaps in computer science learning: New Google-Gallup research"
"66","2015-08-10","2023-03-24","https://computinged.wordpress.com/2015/08/10/respect-2015-preview-the-role-of-privilege-in-cs-education/","On Friday, August 14, the first RESPECT conference will be held in Charlotte, NC — the first international meeting of the IEEE Special Technical Community on Broadening Participation with technical co-sponsorship by the IEEE Computer Society (see conference website here). RESPECT stands for Research on Equity and Sustained Participation in Engineering, Computing, and Technology. We have two papers in RESPECT which I’ll summarize in a couple of blog posts. I’m less familiar with IEEE rules on paper referencing and publishing, so I’ll make a copy available as soon as I get the rules sorted out. Miranda Parker has just finished her first year as a Human-Centered Computing PhD student at Georgia Tech, working with me. She’s done terrific work in her first year which I hope to be talking more about as she publishes. At RESPECT 2015, she’ll be presenting her first paper as a PhD student, “A critical research synthesis of privilege in computing education.” Miranda defines privilege as: Privilege is an unearned, unasked-for advantage gained because of the way society views an aspect of a student’s identity, such as race, ethnicity, gender, socioeconomic status, and language. Her short paper is a review of the literature on how we measure privilege, where its impact has been measured in other STEM fields, and where there are holes in the computing education literature. She’s using studies of privilege in other STEM fields to help define new research directions in computing education. It’s just the sort of contribution you’d want a first year PhD student to make. She’s surveying literature that we don’t reference much, and using that survey to identify new directions — for her, as well as the field."
"67","2020-02-17","2023-03-24","https://computinged.wordpress.com/2020/02/17/including-race-in-cs-education-research-and-discussion/","I was talking with one of my colleagues here at Michigan about the fascinating recent journal article from Tim Weston and collaborators based on NCWIT Aspirations award applicants, which I blogged about here. I was telling him about the results — what correlated with women’s persistence in technology and computing, and what didn’t or was negatively correlated. He said that he was dubious. I asked why. He said, “What about the Black girls?” His argument that the NCWIT Aspirations awards tends to be white and tends to be in wealthy, privileged school districts. Would those correlations be the same if you looked at Black women, or Latina women? I went back to the Weston et al. paper. They write: Although all respondents were female, they were diverse in race and ethnicity. Because we know that there are differentiated experiences for students of color in secondary and post-secondary education in the US, and especially women of color, we wanted to make sure we captured any differences in outcomes in our analysis. To do so, we created a variable called Under-represented Minority in Computing (URMC) status that grouped students by race/ethnicity. URMC indicated persons from groups historically under-represented in computing–African-American, Hispanic, or Native American. White, Asian and students of two or more races were coded as “Majority” in this variable. Unfortunately, further disaggregation by specific race/ethnicity was not possible due to low numbers. Thus, even though the numbers in the respondent pool were not high enough to disaggregate by specific race/ethnicity, we could still identify trends by over-representation and under-representation. 18% of their population was tagged URMC. URMC was included as a variable in their analyses, and their results suggest that being in the URMC group did not influence persistence significantly. If I understand their regressions right, that doesn’t tell us if the correlations were different by race/ethnicity. URMC wasn’t a significant factor in the outcomes, but that is not the same as thinking that those other variables differ by race and ethnicity. Do Black females have a different relationship with video games or with community than white females, for example? Or with Latina students? While the analysis did not leave race out of the analysis entirely, there was not enough diversity there to answer my colleague’s question. I do agree with the authors that we would expect differentiated experiences. If our analysis does not include race, can we account for the differentiated experiences? It’s hard to include race in many of our post-secondary CS ed analyses simply because the number of non-white and non-Asian students is so small. We couldn’t say that Media Computation was successful with a diverse student body until University of Illinois Chicago published their results. Georgia Tech has few students from under-served groups in the CS classes we were studying. There’s a real danger that we’re going to make strong claims about what works and doesn’t work in computer science based only on what works for students in the majority groups. We need to make sure that we include race in our CS education discussions, that we’re taking into account these differentiated experiences. If we don’t, we risk that any improvements or optimizations we make on the basis of these results will only work with the privileged students, or worse yet, may even exacerbate the differentiated experiences."
"68","2020-12-29","2023-03-24","https://computinged.wordpress.com/2020/12/29/the-goal-of-the-first-cs-course-should-be-to-promote-confidence-if-were-going-to-increase-diversity-in-cs-paying-off-on-a-bet/","This should be a thing: If you make a public bet on Twitter, and lose, you should have to write a blog post explaining how you got it wrong. Let me set the stage for the bet. There are studies suggesting that the Advanced Placement (AP) Computer Science A exam has a significantly different impact on students’ majors than other AP exams. (For non-US readers: AP tests provide an opportunity for secondary school students to earn post-secondary school credit.) AP CS A exam-takers are more likely to go on to take more CS courses or become a CS major — more likely than, say, students taking AP Calculus or AP US History exams to become mathematics or history majors. But does that extend to the newer AP CS exam, AP CS Principles? AP CS Principles was designed to be less about the kinds of programming that CS majors do in their first year, and more about a broader understanding of computing and its effects (see College Board site here). There were several of us talking about this in the Spring. On April 1, 2019, I tweeted to Jeff Forbes (see link): “I bet that AP CS Principles has no impact on CS or STEM majors. It’s such a different course (eg doesn’t map to CS courses on most campuses).” He took that bet, and he was right. A study released by the College Board shows that there is a causal relationship between taking AP CS Principles and majoring in CS in undergraduate (see report link here). The impact is large. Overall, students who take AP CS Principles are three times more likely to major in computer science in college. AP CSP students who are female are twice as likely to major in CS. I wasn’t crazy for expecting that AP CS Principles would not have such a big impact on recruitment and retention. At SIGCSE 2020, Joanna Goode and co-authors published a paper showing that (see blog post link here) AP CS Principles is effectively recruiting much more diverse students than the AP CS A course (which is mostly focused on Java programming). But, AP CS A students end up with more confidence in computing and much more interest in computing majors and tech careers. ACM TOCE in 2019 published a paper using NCWIT Aspirations award winners (see blog post link here) showing that taking the CS Advanced Placement A exam was one of the best predictors of persistence three years after the high school survey in both CS and other technology-related majors. The TOCE paper authors made a particular emphasis on the importance of programming: “It seems that involvement in general tech-related fields other than programming in high school does not transfer to entering and persisting in computer science in college for the girls in our sample.” So I had good reason to believe that non-programming-intensive courses might not have a big impact on recruitment into the CS major and retention. But I accept the evidence that I was wrong. What else is going on? Here’s another recent piece of evidence that supports Jeff’s belief that AP CS Principles (and classes like that) could be having a big impact. Philip Boda and Steve McGee have a paper coming out in SIGCSE 2021 showing that the Exploring CS course (see website here) is having a significant impact in driving up AP CS A participation and diversity (see paper here), which continues to have a large impact on majoring in CS. Exploring CS, like AP CS Principles, is de-emphasizes programming in favor of a broader understanding of computing and helping students to see themselves as successful at CS. Neither of these papers offers an explanation for why AP CSP or ECS is having this positive impact. They’re both large scale quantitative stories. You’d think that I might have learned my lesson from this last failed bet. Nah. I’ve got guesses. My guesses might be wrong, as they were in this case. I’m a post-positivist. I don’t think we’ll ever get to the place where we know the complete truth, but we should keep trying, keeping making hypotheses, and we can keep getting closer. Here’s my hypothesis for what’s going on, stated as a prediction: A first course will be successful at promoting recruitment into CS as a major or career and at retaining students in CS if it increases students self-efficacy about programming tasks. The critical part is for students to increase their confidence that they can be successful at programming tasks. AP CS A easily does this, which is why it has such great results in recruitment and retention. Not all classes or experiences do, as the NCWIT study suggests. AP CS Principles and ExploringCS are all about increasing student confidence, helping them to see themselves as successful at computing. I don’t know how little programming a student needs to do to increase their self-efficacy. Maybe it’s enough to see programs and what programming is about. Recent research in computing education has been focusing on self-efficacy as one of the most important variables predicting student recruitment and retention in CS. Alex Lishinski and his co-authors showed that self-efficacy had different relationships for female and male CS students (see paper link here) and that programming projects influenced students’ sense of self-efficacy, which in turn influenced performance in the CS class (see paper link here). Jamie Gorson and Nell O’Rourke found (in an ICER 2020 paper that I blogged about here) that CS students had deflated self-efficacy, in part, because they had unreasonable expectations of what real programmers do. Dr. Katie Cunningham, soon to be a post-doc joining Nell’s lab, showed in her dissertation how students simply give up on programming tasks that they don’t think that they’ll be successful at (see blog post on Katie’s dissertation defense). Self-efficacy is likely an important variable in recruitment and retention, particularly of female students, and it’s one that we can manipulate with better designed education. I’m not the first person to to suggest this relationship. In a study with over 5 million participants, Peter Kemp and colleagues suggest that female participation in secondary school computer science in England is being negatively impacted because of female students’ low self-efficacy in CS — and that this is because of the CS classes (see paper link here). In England, curriculum in Information and Communications Technology is being faded out in favor of a Computer Science focus. They write in their paper “Female Performance and Participation in Computer Science: A National Picture”: The move to introduce CS into the English curriculum and the removal of the ICT qualifications look to be having a negative impact on female participation and attainment in computing. Using the theory of self-efficacy, we argue that the shift towards CS might decrease the number of girls choosing further computing qualifications or pursuing computing as a career. Computing curriculum designers and teachers need to carefully consider the inclusive nature of their computing courses. I made my bet because I thought that the programming-light focus of AP CS Principles (or even ExploringCS) would have less of an impact on CS recruitment and retention than the programming-intensive focus of AP CS A. I now believe I was wrong. I would now bet that the amount of programming probably isn’t the critical variable at all. It’s whether students come out of these courses saying, “I can do this. I can program.” That’s the critical variable for recruitment and retention that I believe AP CS Principles and Exploring CS are influencing successfully."
"69","2020-11-30","2023-03-24","https://computinged.wordpress.com/2020/11/30/purpose-first-programming-a-programming-learning-approach-for-learners-who-care-most-about-what-code-achieves-katie-cunninghams-defense/","On Wednesday, Katie Cunningham is defending her dissertation, “Purpose-First Programming: A Programming Learning Approach for Learners Who Care Most About What Code Achieves.” I’m proud of the work Katie has done with Barb and me over the years. Let me relate the story here, with links to the blog posts. I first met Katie through through an on-line essay she wrote explaining the issues of gender and CS to her faculty (see my blog post referencing at link here). After she graduated, she worked on the CSin3 project at California State University at Monterey Bay which helped Latino and Latina students get undergraduate degrees in CS in three years. The paper she and the CSin3 team wrote won a Best Paper award at SIGCSE 2018 (see paper here). Katie started her PhD research studying how students traced code when trying to understand and predict program behavior. She published her findings at ICER 2017 (see blog post). As you’d expect, students who traced programs line-by-line were more likely to get prediction problems (What is the output? What is this variable’s value?) correct. But not always. Most intriguing: Students who stopped mid-way through a trace were more likely to get the problems wrong than those who never traced at all. In her next study, she replicated the original experiment and then brought into the lab those students who had stopped mid-way in order to ask them “why?” A common answer was that the students were trying to see the “pattern” of the program, and once they saw the pattern, they were able to predict the answer. The problem is that the students were novices. They didn’t know many patterns. They often guessed wrong. Katie presented this paper at ITiCSE 2019 (see blog post). Katie did a think-aloud study where she could watch students tracing, and something unexpected and interesting happened — two participants refused to trace. These were data science students who did program successfully, but they were unwilling to trace code at the line-by-line level. She wrote an ICLS 2020 paper about their reasons (see blog post). She decided to study that population. A 2018 CHI paper by another U-M student, April Wang, had talked about how computing education fails conversational programmers (see paper here). Katie decided to build a new kind of curriculum that addressed her data science students and April’s conversational programmers. How do you teach programming to students who (1) don’t want to become professional programmers and (2) are dissuaded from high cognitive load activities like tracing code? This is a very different problem than most of CS education at the undergraduate level where we have eager CS majors who want to get software development jobs. Katie was dealing with issues both of motivation and of cognitive load. Katie invented purpose-first programming. I don’t want to say too much about it here — her dissertation and her future papers will go more into it. I’ll give you a sense for her process. She used Github repositories and expert interviews to identify a few programming plans (just like Elliot Soloway and Jim Spohrer studied years ago) that were in common use in a domain that her participants cared about. She then taught those plans. Students modified and combined the plans to create programs that the students found useful. Rather than start with syntax or semantics, she started with the program’s purpose. The results were very positive in terms of learning, performance, and affect. Rather than be turned away, they wanted more. One student asked if she could create a whole set of curricula like this, each for a different purpose. That’s the idea exactly. Katie may be on her way to inventing the Duolingo of programming. Katie already has a post-doc lined up. She’ll be a CI Fellow with Nell O’Rourke at Northwestern. The defense will be on Zoom — feel free to come and cheer her on! The School of Information is pleased to announce the oral defense of Kathryn Cunningham: Title: Purpose-First Programming: A Programming Learning Approach for Learners Who Care Most About What Code Achieves Date: Wednesday, December 2nd Time: 10 am – 12 pm EST Place: This defense will be held virtually for the public to attend. Please use this link. Barbara Ericson and Mark Guzdial, serving as committee chairs, will preside over the oral defense. All are welcome to (virtually) attend!"
"70","2015-04-03","2023-03-24","https://computinged.wordpress.com/2015/04/03/let-me-tell-you-what-i-know-about-gender-and-cs/","Nice story and presentation from Katie Cunningham about how she informed her faculty about why there are so few women in CS, and what they can do about it. I based the main arc of my presentation on a book chapter by Whitecraft and Williams that Greg Wilson of Software Carpentry was kind enough to forward to me. It’s an evenhanded look at much of the research in this area, including theories that are often out of favor in most places I frequent. It served as a great overview, though I felt it could have focused more on issues involving differences in prior programming experience pre-college and intimidation brought on by “nerdy strutting“. (Update: I just discovered a fantastic 2012 report by NCWIT that can also serve as a great overview. It covers cultural issues more comprehensively, with more recent research and more focus on the pre-college years.) via Computer Science, Education, Fog: Let me tell you what I know about gender and CS."
"71","2019-03-18","2023-03-24","https://computinged.wordpress.com/2019/03/18/code-smells-might-suggest-a-different-and-better-notional-machine/","There is a body of research that looks for “code smells” in Scratch projects. “Code smells” are characteristics of code that suggest a deeper problem (see Wikipedia description here). I have argued that these shouldn’t be applied to Scratch, that we’re confusing software engineering with what students are doing with computing (see post here). One of the smells is having code lying around that isn’t actually executed from the Go button, the green flag in Scratch. The argument is that code that’s not executed from the Go button is unreachable. That’s a very main() oriented definition of what matters. There was a discussion on Twitter about that “smell” and why it’s inappropriate to apply to Scratch. I know that when I program in GP (another block-based program), I often leave little bits of maintenance code lying around that I might use to set the world’s state. There’s another possibility for code lying around that isn’t connected and thus doesn’t executd properly — it should execute properly. There’s evidence that novice students are pretty comfortable with the idea of programs/functions/codechunks executing in parallel. They want more than one main() at once. It’s our programming systems that can’t handle this idea well. Our languages need to step up to the notional machines that students can and want to use. For example, in Squeak eToys, it’s pretty common to create multiple scripts to control one object. In the below example, one script is continually telling the car to turn, and the other script is continually telling the car to go forward. The overall effect is that the car turns in circles.  I was on Kayla DesPortes dissertation committee (now at NYU!). She asked novice programmers to write a script to make two lights on an Arduino to blink. She gave them the code to blink one light: In a Forever loop, they raise the voltage on a pin high, then wait a bit, then lower the voltage, then wait a bit. That makes a single light blink. The obvious thing that more than half of the participants in her study did was to duplicate the code — either putting it in parallel or putting in sequence. One block blinked the light on one pin, and the other block blinked the light on the other pin. However, both blocks were Forever loops. Only script can execute on Arduino at a time.  On the Arduino, what the students did was buggy. It “smelled” because the second or parallel Forever block would never execute. These examples suggest that parallel execution of scripts might be normal and even expected for novices. Maybe parallel execution is an attribute of a notional machine that is natural and even easier for students than trying to figure out how to do everything in one loop. Maybe concurrency is more natural than sequentiality. Something that “smells” to a software engineer might actually be easier to understand for a layperson."
"72","2019-01-07","2023-03-24","https://computinged.wordpress.com/2019/01/07/a-little-bit-of-computing-goes-a-long-way-the-sigcse-50th-anniversary-issue-of-acm-inroads/","This year is the 50th SIGCSE Technical Symposium, and Jane Prey was guest editor for a special issue of ACM Inroads on 50 years of ACM SIGCSE. You can see the current issue here, but yes, it’s behind a paywall — ACM Inroads is meant to be a membership benefit. I’m really fascinated by this issue. Sally Fincher does a nice job telling the story of ICER. I enjoyed Susan Rodgers’ and Valerie Barr’s reflections. I’m still trying to understand all of Zach Dodds’ references in his SIGCSE 2065 future-retrospective. I found some of the articles frustrating and disagreed with some of the claims (e.g., I don’t think it’s true that AP CS enrollments plummeted after introducing Java), but discussion can be good for the community. I was asked to write a piece about What we care about now, and what we’ll care about in the future. My bottom line is a claim that John Maloney (of Squeak, Scratch, and GP fame) reminded me is a favorite phrase of the great Logo (and many other things) designer, Brian Silverman: A little bit of computing goes a long way. The important part of Scratch is that computationalists find value in it, i.e., that they can make something that they care about in Scratch. What we see in Scratch is the same process we see among the computationalists in computational photography, journalism, and science. They don’t need all of computer science. They can find value and make something useful with just some parts of computing. Scratch projects smell wonderful to Scratch computationalists. There’s been a thread on Twitter recently about the use of software engineering principles to critique Scratch projects (see the thread starting here). Researchers in software engineering claim that Scratch code “smells,” e.g., has bad practices associated with it. There’s even a website that will analyze your Scratch project in terms of these software engineering practices, DrScratch. The website claims that it is measuring computational thinking skills — I see no evidence of that at all. These software engineering researchers are misunderstanding users and genres of programming. They ought to read Turkle and Papert’s Epistemological Pluralism and the Revaluation of the Concrete. People code for different purposes, with different ways of appropriating code. The standards of the software engineer are not appropriate to apply to children. Not everybody is going to be a professional software developer, and they don’t need to be. Increasingly, people are only going to use parts of computer science, and they will achieve fluency in those. That’s a wonderful and powerful thing. A little bit of computing goes a long way."
"73","2017-07-19","2023-03-24","https://computinged.wordpress.com/2017/07/19/the-general-purpose-blocks-programming-language-gp-is-now-in-beta/","GP, the powerful new blocks-based programming language (that I wrote about here, helped show at SIGCSE 2017, and used for MediaComp in a new kind of ebook here), is available for beta-testing as the Scratch 2017 conference starts in Bordeaux, France. You can access GP at http://www.gpblocks.org. You can run projects in your browser on the website, or download the application. GP is a free, general-purpose blocks language that is powerful yet easy to learn. GP can: generate high-quality graphics computationally manipulate images and sounds analyze text files or CSV data sets simulate physical, biological, or economic systems access the web and use cloud data connect to hardware via the serial port deploy projects on the web or as stand-alone apps Source: About · GP Blocks"
"74","2016-06-13","2023-03-24","https://computinged.wordpress.com/2016/06/13/introducing-gp-a-general-purpose-block-language/","GP is a new blocks-based programming language being developed by John Maloney (most well-known for developing Scratch), Jens Mönig (developer of Snap!), and Yoshiki Ohshima (one of the developers of Squeak EToys) in Alan Kay’s group. They are all part of the new partnership between Alan Kay and Y-Combinator Research: HARC (Human Advancement Research Community). GP started in the SAP-funded CDG (Communications Design Group). GP is not yet released, and there’s not much publicly available on it yet. The GP Team published a paper and poster in the Blocks and Beyond Workshop at last year’s VL/HCC on GP. The best introductory article on GP so-far is on the Scratch Wiki at MIT based on John’s presentation at the Scratch conference last year. What makes GP remarkable is that it aims to be a general purpose language. John’s vision for GP is to be the language that students might move to after Scratch, with the highest possible ceilings. Think about GP as Python or Smalltalk in blocks — and even more the latter than the former. From the virtual machine (VM) on which it runs to the class browser, GP feels like a blocks-based form of Smalltalk. Because GP is VM-based, it’s portable — there are versions for Mac, Windows, iOS, and even a JavaScript implementation of the VM so that GP runs in the browser. GP is an exploration of the question, “How far can we go with a blocks-based programming language? Do we have to move students to a textual programming language to let them develop everything from data analyses to real applications?” GP users can do a lot with GP’s built-in blocks. However, as they grow in mastery, some users may wish to add new blocks to GP (e.g. to manipulate images), or even to extend the GP programming environment itself (e.g. by adding an image editor). GP is designed to be extended in itself using the same blocks language that users already know. However, unlike Smalltalk or Snap!, the GP language itself cannot be extended (e.g. to add a new control structure) without modifying the virtual machine. Keeping the GP language simple and fixed is intended to ease the learning path for beginners. When you first start up GP, it looks like Scratch. The blocks palette is different, because it’s covering a larger space of blocks. GP includes blocks for dealing with data (e.g., JSON, comma-separated values), media generation and manipulation, connections to the network and external devices, and the ability to create and coordinate multiple objects.  There are even blocks in there for manipulating pixels in an image and samples in a sound. GP is the first blocks-based language in which I’ve been able to do both sound and pixel Media Computation examples. I built the first version of MediaComp blocks for GP, then John figured out which ones were actually useful and then re-implemented them in GP much more efficiently than what I did. I’m introducing GP here with the GP Team’s permission in order to show you a prototype ebook I’ve been building the last few months. You can play with GP at http://home.cc.gatech.edu/GPBlocks. This is the browser-based version which is offered with no guarantees — the browser version will likely change dramatically as GP is still being developed, and even the examples in the ebook may break over time. (Note: These browser-based examples are best viewed in Firefox on a desktop or laptop computer; they do not yet work on iOS or Android tablets.) Here’s a brief series of snapshots to give you a sense of what makes GP so interesting and powerful compared to most other blocks-based languages. In the stage area (upper right-hand corner) right-click (control-click on a Mac) to bring up the stage menu.  The menu options for a workspace and to browse will elicit warm feelings of recognition for Smalltalk and Self programmers. Go ahead and click on the browse menu item.  Scanning the classes along the left hand side you realize that this is a full Smalltalk-like language. All the pieces are there and inspectable. The middle panes show the instance variables in the class (top) and the methods for the class (bottom). The rightmost pane shows the code for the method — in blocks! One of the big goals of GP is that all of GP is written in GP. Even the lowest levels of GP (e.g., how bitmaps and blocks are constructed) can be manipulated in GP, all in blocks. Those methods are real code and “live.” Change them and you change how GP is working immediately. Right now, that’s super dangerous — there is no “editing” mode. Move a block out of place, and the method is changed at that moment. Beware of re-defining how Integers work! The GP team is currently working to complete this part of GP, allowing the GP programming system to be used to modify itself, like Smalltalk. The GP team is also exploring the stages between blocks and text. At the top right hand corner of GP is a slider between blocks and text. Switch it to text, and all of GP is presented and usable in a textual form. (There’s even an interesting middle stage between blocks and text.)  I’ve been using GP for about nine months. During the Spring semester, I’ve been using GP with an undergraduate research assistant, David Tran, to build a prototype of a new kind of ebook structure. Play around (muck/MOHQ around) in the GPBlocks MOHQ, and in the next blog post, I’ll explain what it is and what we’re exploring in it. My thanks to the GP team for review and comments on drafts of this post."
"75","2022-02-23","2023-03-24","https://computinged.wordpress.com/2022/02/23/updates-nsf-funding-for-teaspoon-languages-for-discrete-mathematics/","A few months before the pandemic started, Dr. Elise Lockwood at Oregon State reached out to me. She’d heard that I was interested in programming for teaching non-CS subjects, and that’s what she was doing. I loved what she was doing, and we started having regular chats. Elise is a mathematics education researcher who has been studying how students come to understand counting problems. Like “If you have three letters and four digits, how many license plates can you make?” Or “How many two letter words can you make from the letters ROCKET, if you don’t allow double letters?” She’s been exploring having students learn counting problems by manipulating Python programs to generate all the possible combinations, then counting them. (Check out her recent papers on her Google Scholar page, especially those with her student Adaline De Chenne.) As I said, I loved what she was doing, but Python seemed heavy-handed for this. I was starting to work on our Teaspoon languages. Could we build lighter-weight languages for the same problems? As I kept reading Elise’s papers, I started working on two possible designs. In one of them (called Counting Sheets), we play off of students’ understanding of spreadsheets. You can just describe what you want in each column, and the system will exhaustively generate every combination: Or you can use an “=“ formula that knows how to do very simple operations with sets. Here’s a solution to the two letter words from ROCKET without repeating problem: This is one of the tools that we’ve been building in support for both Spanish and English keywords (like Pixel Equations, that I talked about last September): Elise found Counting Sheets intriguing, but she was worried if it would work to make the iterative structures implicit and declarative. Would students need to see the iteration to be able to reason about the counting processes? So, I built a second Teaspoon language, called Programmed Counting. Here, the loops are explicit, like Python, but the only variable type is a set, and the words and phrases of the language come from counting problems. Elise was a real sport, trying out the languages as I generated prototypes and finding the holes in what I was doing. We met face-to-face only once, when I went to Portland for SIGCSE 2020 — the one that got cancelled the very morning it was supposed to start. I had lunch with Elise, and we worked for a few hours on the designs. Barb and I went home the next day, and the big pandemic lockdown started right afterwards. Will these work for learning? We don’t know — but we just got funding from NSF to find out! “We” here is me and PhD student Emma Dodoo, and we’ll be involving Adaline as a consultant. Elise is currently a rotator at NSF, so she’s involved only from the sidelines because of NSF COI issues. Our plan is to run experiments with various combinations of the Teaspoon languages (one or both), standalone and with Python. Do we need Python if we have the Teaspoon languages? Do the Teaspoon languages serve as scaffolding to introduce concepts before starting into Python? Below is the abstract on the new IUSE grant, as an overview of the project. University of Michigan CSE Communications wrote a nice article about the work, available here. Huge thanks to Jessie Houghton, Angela Li, and Derrick White who turned my LiveCode prototypes into functioning Web versions. Programming is a powerful tool that scientists, engineers, and mathematicians use to gain insight into their problems. Educators have shown how programming integrated into other subjects can be a powerful tool to enhance learning, from algebra to language arts. However, the cost is learning the programming language. Few students in the US learn programming — less than 5% of high school students nationwide. Most students do not have the opportunity to use programming to support ™ learning. This project is investigating a new approach to designing and implementing programming languages in classrooms: Task-specific programming (TSP) languages. TSP languages are explicitly design for integration in specific classes, to meet teacher needs, and to be usable with less than 10 minutes of instruction. TSP languages can make the power of programming to enhance learning more accessible. This project will test the value of TSP languages in discrete mathematics, which is a gateway course in some computer science programs. The proposed project tests the use of two different TSP languages and contrasting that with a traditional programming language, Python. The proposed work will contribute to understanding about (1) the role of programming in learning in discrete mathematics, (2) the value of task-specific languages to scaffold learning, (3) how alternative representational forms for programming influence student use of TSP languages, and (4) how the use of TSP languages alone or in combination with traditional languages enhance students’ sense of authenticity and ability to transfer knowledge."
"76","2021-09-06","2023-03-24","https://computinged.wordpress.com/2021/09/06/media-computation-today-runestone-snap-python-3-and-a-teaspoon-language/","I don’t get to teach Media Computation1 since I moved to the University of Michigan, so I haven’t done as much development on the curriculum and infrastructure as I might like if I were teaching it today. I did get a new version of JES (Jython Environment for Students) released in March 2020 (blog post here), but have rarely even started JES since then. But using Jython for Media Computation is so 2002. Where is Media Computation going today? I’ve written a couple of blog posts about where Media Computation is showing up outside of JES and undergraduate CS. Jens Moenig has been doing amazing things with doing Media Computation in Snap! — see this blog post from last year on his Snap!Con keynote talk. SAP is now offering a course From Media Computation to Data Science using Snap! (see link here). Barbara Ericson’s work with Runestone ebooks (see an example blog post here) includes image manipulation in Python inside the browser at an AP CS Principles level (see example here). The amazing CS Awesome ebook that Beryl Hoffman and Jen Rosato have been doing with Barb for AP CS A includes in-browser coding of Java for the Picture Lab (see example here). I was contacted this last January by Russ Tuck and Jonathan Senning. They’re at Gordon College where they teach Media Computation, but they wanted to do it in Python 3 instead of Jython. You can find it here. It works SO well! I miss having the image and sound explorers, but my basic demos with both images and sounds work exactly as-is, with no code changes. Bravo to the Gordon College team! Most of my research these days is grounded in Task-Specific Programming languages, which I’ve blogged about here (here’s a thread of examples here and here’s an announcement of funding for the work in social studies). We now refer to the project as Teaspoon Computing or Teaspoon Languages — task-specific programming => TSP => Teaspoon. We’re adding a teaspoon of computing into other subjects. Tammy Shreiner and I have contributed a chapter on Teaspoon computing to a new book by Aman Yadav and Ulf Dalvad Berthelsen (see announcement of the book here). We have a new Teaspoon language, Pixel Equations, that uses Media Computation to support an Engineering course in a Detroit Public School. Here, students choose a picture as input, then (1) enter the boolean equations for what pixels to select and (2) enter equations for new red, green, and blue values for those pixels. The conditionals and pixel loops are now implicit. In several of our tools, we’re now exploring bilingual or multilingual interfaces, inspired by Sara Vogel’s work on translanguaging (see paper here) and Manuel Pérez-Quiñones’s recent work on providing interfaces for bilingual users (see his TED talk here and his ACM Interactions paper here). You can see in the screenshot below that colors can be referenced in either English or Spanish names. We’re now running participatory design sessions with teachers using Pixel Equations. I’m planning a series of blog posts on all our Teaspoon languages work, but it’ll take a while until I get there. "
"77","2020-03-02","2023-03-24","https://computinged.wordpress.com/2020/03/02/final-likely-version-of-jes-released/","JES 6.0 is now available at https://github.com/gatech-csl/jes/releases/tag/6.0. JES is the Jython Environment for Students — it’s a Python IDE implemented in Java and with support for Media Computation built in. It was a lot of work for a bunch of people. Here are the notes from the release as a summary and acknowledgement for all the effort that brought this version fruition. This is likely the final version of JES, unless a Jython 3.0 is developed. This version was brought to completion by Nigel Charleston, based on the beta work of Veronica Day and Audrey Zhang (see discussion at this blog post https://computinged.wordpress.com/2019/07/22/beta-release-of-new-jes-jython-environment-for-students-now-available-media-computation-for-python-ide/). Many thanks to R. Benjamin Shapiro for helping us with many technical questions. JES 6.0 updates Jython to 2.7beta, uses the latest version of JMusic (from https://jythonmusic.me/), fixes many bugs, will run with Java 8, and creates a new facility to generate pictures from a collection of pixels and sounds from a collection of samples. The Mac version is a little more complicated to run than usual. You will need to have Java 8 installed to run JES. Thanks to Brian Howard and Michael Stewart for helping to figure this out. The rest of the Mac version installation instructions can be found at the release page. JES was originally written by a team of Georgia Tech undergraduates taking Senior Design in Summer 2002. It’s been in use and (sporadic) development for almost 18 years now. The previous version of JES was downloaded over 71K times (see counts here). I would not have predicted in 2002 that JES would still be used in 2020, with little maintenance and no additional funding. Software has to be continually maintained, right? I claim no great genius behind the design. How did it happen that it’s still working and being used? An even more interesting example is our Squeak-based Wikis (Swikis) which were first developed in 1997. Jeff Rick created the version that we used in classes, and wrote about the process in what I think is the first ACM publication on wikis in 2000. Even after he graduated in 2007, they just kept going. The server http://coweb.cc.gatech.edu/ is still running today — I can find at least one Swiki there dating from 2002. I’ve patched the Swiki software only once or twice since Jeff graduated. Jeff did a great job designing Swiki, but I suspect that even he’d be surprised at how long they’ve run with essentially no maintenance. What are the characteristics of educational technology that remains viable and usable (i.e., useful and actively used) with very little maintenance for well over a decade? Schools are under-resourced, as I talked about in the Thorndike vs Dewey blog post. It’s great to have educational software that just keeps going without maintenance. Maybe that it’s a certain class of software that works like this. Is it that JES and Swiki do so little, such that they’re really just frameworks on which to hang others’ content? Maybe that’s why they’ve been able to keep going for so long? Your thoughts would be welcome."
"78","2019-07-22","2023-03-24","https://computinged.wordpress.com/2019/07/22/beta-release-of-new-jes-jython-environment-for-students-now-available-media-computation-for-python-ide/","Veronica Day and Audrey Zhang are two undergraduate researchers with whom I have been working here at University of Michigan to update JES (Jython Environment for Students), the Python IDE for Media Computation. We last updated it in 2015 (see announcement post here), so it’s long overdue. The last version has been downloaded over 50K times (see counts here). I’m grateful to Veronica and Audrey for their hard work. Besides working their way through the bug list on GitHub, and adding contributed features into the main trunk (like Ben Shapiro’s support for Mac retina displays – many thanks, Ben!), they have added support that I’ve been wanting for awhile. We can now create pictures from a collection of pixels and sounds from a collection of samples. This allows for a more functional style of media manipulations. In the example below, we makePicture by filtering for only certain pixels with a list comprehension ([px for px in getPixels(p) if getRed(px)<120]).  Please try out the beta version of JES and let us know of errors. Thanks http://web.eecs.umich.edu/~mjguz/uploads/jes-5.02b5/ We plan to update a few more parts of this version before the 6.0 release. In particular, we’d like to upgrade to the latest Jython and the latest JMusic. I’m expecting some of our regression tests to fail on that, so there will be some tweaks yet. This may be our last release of JES. Jython is no longer in development (see post here). I’ll have to try again to get Media Computation to work in CPython (see last try here) and/or move to one of the browser-based Python implementations."
"79","2015-05-15","2023-03-24","https://computinged.wordpress.com/2015/05/15/jes-5-02-now-released-maintenance-release/","JES 5.02 is now released at https://github.com/gatech-csl/jes/releases/tag/5.020. I have links to all the main downloads at http://mediacomputation.org . In addition, You can find all the fourth edition Powerpoint slides (including a 68Mb zip of all of them) at http://coweb.cc.gatech.edu/mediaComp-teach/60. I’ve put some of the Peer Instruction question slides into the chapter PPT slide decks, but you can find more at the instructors-only website (see the Media Computation website for more on the teacher website). Most of the changes are in the early chapters. Chapter 3 on text and language manipulation is all new. The latter chapter PPT slide decks have a few new slides in each deck, including:"
"80","2021-11-26","2023-03-24","https://computinged.wordpress.com/2021/11/26/computer-science-was-always-supposed-to-be-taught-to-everyone-but-not-about-getting-a-job-a-historical-perspective/","I gave four keynote talks in the last two months, at SIGITE, Models 2021 Educators’ Symposium, VL/HCC, and CSERC. I’m honored to be invited to them, but I do suspect that four keynotes in six weeks suggest some “personal issues” in planning and saying “No.” Some of these were recorded, but I don’t believe than any of them are publicly available The keynotes had a similar structure and themes. (A lot easier than four completely different keynotes!) My activities in computing education these days are organized around two main projects: My goal was to put both of these efforts in a historical context. My argument is that computer science was originally invented to be taught to everyone, but not for economic advantage. I see the LSA effort and our Teaspoon languages connected to the original goals for computer science. The talks were similar to my SIGCSE 2019 keynote (blog post about that talk here, and video version here), but puts some of the early history in a different perspective. I’m not going to go into the LSA Computing Education effort or Teaspoon languages here. I’m writing this up because I hope that it’s a perspective on the early history that might be useful to others. I start out with C.P. Snow. My PhD advisor, Elliot Soloway, would have all of his students read this book, “The Two Cultures.” Snow was a scientist who bemoaned the split between science and humanities in Western culture. Snow mostly blamed the humanities. That wasn’t Elliot’s point for having us read his book. Elliot wanted us to think about “Who could use what we have to teach, but might not even enter our classroom?” This is George Forsythe. Donald Knuth claims that George Forthye first published the term “computer science” in a paper in the Journal of Engineering Education in 1961. Forsythe argued (in a 1968 article) that the most valuable parts of a scientific or technical education were facility with natural language, mathematics, and computer science. In 1961, the MIT Sloan School held a symposium on “Computers and the World of the Future.” It was an amazing event. Attendees included Gene Amdahl, John McCarthy, Alan Newell, and Grace Hopper. Martin Greenberger’s book in 1962 included transcripts of all the lectures and all the discussants’ comments. C.P. Snow’s chapter (with Norbert Wiener of Cybernetics as discussant) predicted a world where software would rule our lives, but the people who wrote the software would be outside the democratic process. He wrote, “A handful of people, having no relation to the will of society, having no communication with the rest of society, will be taking decisions in secret which are going to affect our lives in the deepest sense.” He argued that everyone needed to learn about computer science, in order to have democratic control of these processes. In 1967, Turing laureate Peter Naur made a similar argument (quoting from Michael Caspersen’s paper): “Once informatics has become well established in general education, the mystery surrounding computers in many people’s perceptions will vanish. This must be regarded as perhaps the most important reason for promoting the understanding of informatics. This is a necessary condition for humankind’s supremacy over computers and for ensuring that their use do not become a matter for a small group of experts, but become a usual democratic matter, and thus through the democratic system will lie where it should, with all of us.” The Danish computing curriculum explicitly includes informing students about the risks of technology in society. Alan Perlis (first ACM Turing Award laureate) made a different argument in his chapter. He suggested that everyone at University should learn to program because it changes how we understand everything else. He argued that you can’t think about integral calculus the same after you learn about computational iteration. He described efforts at Carnegie Tech to build economics models and learn through simulating them. He was foreshadowing modern computational science, and in particular, computational social science. Perlis’s discussants include J.C.R. Licklider, grandfather of the Internet, and Peter Elias. Michael Mateas has written a fascinating analysis of their discussion (see paper here) which he uses to contextualize his work on teaching computation as an expressive medium. In 1967, Perlis with Herb Simon and Alan Newell published a definition for computer science in the journal Science. They said that CS was “the study of computers and all the phenomena surrounding them.” I love that definition, but it’s too broad for many computer scientists. I think most people would accept that as a definition for “computing” as a field of study. Then, we fast forward to 2016 when then-President Obama announced the goal of “CS for All.” He proposed: Computer science (CS) is a “new basic” skill necessary for economic opportunity and social mobility. I completely buy the necessity part and the basic skill part, and it’s true that CS can provide economic opportunity and social mobility. But that’s not what Perlis, Simon, Newell, Snow, and Forsythe were arguing for. They were proposing “CS for All” decades before Silicon Valley. There is value in learning computer science that is older and more broadly applicable than the economic benefits. The first name that many think of when talking about teaching computing to everyone is Seymour Papert. Seymour believed, like Alan Perlis, “that children can learn to program and learning to program can affect the way that they learn everything else.” The picture in the lower right of this slide is important. On the right is Gary Stager, who kindly shared this picture with me. On the left is Wally Feurzeig who implemented the programming language Logo with Danny Bobrow, when Seymour was a consultant to their group at BBN. In the center is Cynthia Solomon who collaborated with Seymour on the invention of the Turtle (originally a robot, seen at the top) and the development of Logo curriculum. Cynthia was the lead author of a recent paper describing the history of Logo (see link here), which included the example of early Logo use on the upper right of this slide, which generates random sentences. Logo is named for the Greek word logos for “word.” The first examples of Logo were about manipulating natural language. Logo has always been used as an expressive medium (music, graphics, storytelling, and animation), as well as for learning mathematics (see the great book Turtle Geometry). This is the context in which I think about the work with the LSA Computing Education Task Force. Our question was: At an R1 University with a Computer Science & Engineering undergraduate degree and an undergraduate BS in Information (with tracks in information analysis and user experience (UX) design), what else might undergraduates need? What are the purposes for computing that are broader and older than the economic advantages of professional software development? We ended up defining three themes of what LSA faculty do with computing and what they want their students to know: We develop our Teaspoon languages to meet the needs of teachers in teaching non-CS and even non-STEM classes. We argue that there are computing education learning objectives that we address with Teaspoon languages, even if they don’t include common languages features like for, while, and if statements. A common argument against our work in Teaspoon languages is that we’re undertaking a Sisyphean task. Computing is what it is, programming languages are what they are, and education is not going to be a driving force for changing anything in computing. And yet, that’s exactly how the desktop user interface was invented. Alan Kay (another Turing laureate in this story), Adele Goldberg, and Dan Ingalls led the development of Smalltalk in Xerox PARC in the 1970’s. The goal for Smalltalk was to realize Alan’s vision of a Dynabook, using the computer as a tool for learning. The WIMP (overlapping Windows, Icons, Menus, and mouse Pointer) interface was invented in order to achieve computing education goals. For the purposes of education, the user interface that you are using right now was invented. The Smalltalk work tells us that we don’t have to accept computing as it is. Computing education today focuses mostly on preparing students to be professional software developers, using the tools of professional software development. That’s important and useful, but often eclipses other, broader goals for learning computing. The earliest goals for computing education are different from those in most of today’s computing education. We should question our goals, our tools, and our assumptions. Computing for everyone is likely going to look different than the computing we have today which has been defined for a narrow set of goals and for far fewer people than “all.”"
"81","2021-07-12","2023-03-24","https://computinged.wordpress.com/2021/07/12/considering-the-danish-informatics-curriculum-comparing-national-computer-science-curricula/","Michael Caspersen invited me to review a chapter on the Danish Informatics curriculum (see a link here). He asked me to compare it to existing school CS curriculum with which I’m familiar. That was an interesting idea — how does anyone relate curricula across diverse contexts, even between nations? I gave it a shot. I most likely missed, in that there are many curricula that I don’t know or don’t know well enough. I welcome comments on other CS curricula. The Danish Informatics curriculum is unique for its focus on four competence areas: I am not familiar with any curriculum that encompasses all four competencies. I’m most familiar with elementary and high school curricula in the United States. Each US state has control over its own school system (i.e., there is no national curriculum) though many are influenced by recommendations from the Computer Science Teachers Association (CSTA) (see link here) and the K12 CS Framework (link here). In the United States, most computing curricula focus on technological knowledge and skills and computational thinking and modeling. The former is important because the economic argument for computing education in schools is the most salient in the United States. The latter most often appears as a focus on learning computing skills without programming, e.g., like in the CS Unplugged activities from Tim Bell at the University of Canterbury (link). Modeling is surprising rare in most state curricula. Calls for modeling and simulation are common in US mathematics and science education frameworks like the Next Generation Science Standards (link), but these have influenced few state curricula around computing education. Efforts to integrate computing to serve the needs of mathematics and science education are growing, but only a handful of states actively promote computing education to support mandatory education. For example, Indiana has include computing learning objectives in their state’s science education standards, in order to develop more integrated approaches. I don’t know of any state curricula that include digital empowerment nor digital design and design processes. These are critically important. Caspersen’s arguments for the Danish Informatics curriculum build on quotes from Henry Kissinger and Peter Naur, but could also build on the work of C.P. Snow and Alan Perlis (the first ACM Turing Award laureate). In 1961, Snow and Perlis both argued for mandatory computing (though at the University level). Perlis argued that computing gave us new ways to understand the world. He would have recognized the digital design and design processes competency area. Snow warned that everyone should learn computing in order to understand how computing is influencing our world. He wrote: “A handful of people, having no relation to the will of society, having no communication with the rest of society, will be taking decisions in secret which are going to affect our lives in the deepest sense.” He would recognize the concerns of Kissinger and Naur, and the importance of digital empowerment. The Danish Informatics curriculum is unique in its breadth and for considering the social aspects of computing artifacts and design. It encompasses important needs for citizens of the 21st Century."
"82","2021-06-21","2023-03-24","https://computinged.wordpress.com/2021/06/21/katie-cunninghams-purpose-first-programming-glass-box-scaffolding-for-learning-to-code/","Last month, Katie Cunningham presented her CHI 2021 paper “Avoiding the Turing Tarpit: Learning Conversational Programming by Starting from Code’s Purpose.” The video of her presentation is available here. This is the final study from her dissertation work, about which I blogged here. Katie is trying to support the kinds of programming learners whom she discovered in her work on tracing — students who want to write programs, but have no interest in understanding the details of how programs work. As one said to her (which became the title of her ICLS 2020 paper), “I’m not a computer.” Block-based programming won’t work for her learners because, like most conversational programmers, the authenticity of the language they’re learning matters. They don’t want to use blocks. They want to see the code that developers see — a form of what Cindy Hmelo-Silver and I called “glass-box scaffolding.” Katie focused on one particular purpose: writing Python code to scrape Web pages using Beautiful Soup. She and Rahul Bejarano dug into Beautiful Soup code on Github and identified a set of code chunks (“plans”) that were really used for this purpose and which could be recombined in useful ways. She then developed a curriculum as a Runestone ebook for teaching those plans where she taught students how to combine them (using Parsons Problems) and, importantly, how to tailor them for specific needs. Here’s a figure from her paper with an example plan with a description of the “slots” for tailoring. My favorite part of this study is her analysis of how students debugged using these plans. They did make mistakes, and they fixed them. They reasoned about their programs in terms of the plans. In a think aloud, they talked about the names of the plans and the slots, and where they tailored the plan wrong. It’s not that they were just copying and pasting chunks of Python code. They were reasoning about the chunks — but they were not doing much reasoning about Python. In some sense, she defined a task-specific programming language whose components happened to be defined in terms of visible lines of Python code. My favorite outcome of the study is that students came away excited and felt that they were doing something “realistic” — from a half hour lesson. One participant asked if she could do this kind of learning for different purposes every week, a kind of DuoLingo for programming. Those are strong results from a short intervention. It is a pretty amazing intervention. I blogged for CACM this month on how we we predict about knowledge transferring between programming languages may be based on an assumption of mathematics background which might have been true in the 1970’s but is less likely to be true today (see post here). I suggest that we need to develop ways of teaching programming that doesn’t relate to mathematics, that instead connect to the programmer’s purpose and task. Katie’s work is what I had in mind as an example."
"83","2019-11-18","2023-03-24","https://computinged.wordpress.com/2019/11/18/making-the-case-for-adaptive-parsons-problems-and-task-specific-programming-koli-calling-2019-preview/","I am excited to be presenting at the 19th Koli Calling International Conference on Computing Education Research (see site here). Both Barbara Ericson and I have papers this year. This was my third submission to Koli, and my first acceptance. Both of us had multiple rejections from ICER this year (see my blog post on ICER), so we updated and revised based on reviews, and were thrilled to get papers into Koli. By Barbara Ericson, Austin McCall, and Kathryn Cunningham. Barb is presenting the capstone to her dissertation work on adaptive Parsons problems (see blog post on her dissertation work here). This paper captures the iterative nature of her study. Early on, she did detailed think-aloud/interview protocols with teachers to understand how people used her adaptive Parsons problems. At the end, she looked at log files to get a sense of use at scale. Abstract: In a Parsons problem the learner places mixed-up code blocks in the correct order to solve a problem. Parsons problems can be used for both practice and assessment in programming courses. While most students correctly solve Parsons problems, some do not. Un- successful practice is not conducive to learning, leads to frustration, and lowers self-efficacy. Ericson invented two types of adaptation for Parsons problems, intra-problem and inter-problem, in order to decrease frustration and maximize learning gains. In intra-problem adaptation, if the learner is struggling, the problem can dynamically be made easier. In inter-problem adaptation, the next problem’s difficulty is modified based on the learner’s performance on the last problem. This paper reports on the first observational studies of five undergraduate students and 11 secondary teachers solving both intra-problem adaptive and non-adaptive Parsons problems. It also reports on a log file analysis with data from over 8,000 users solving non-adaptive and adaptive Parsons problems. The paper reports on teachers’ understanding of the intra-problem adaptation process, their preference for adaptive or non-adaptive Parsons problems, their perception of the usefulness of solving Parsons problems in helping them learn to fix and write similar code, and the effect of adaptation (both intra-problem and inter-problem) on problem correctness. Teachers understood most of the intra-problem adaptation process, but not all. Most teachers preferred adaptive Parsons problems and felt that solving Parsons problems helped them learn to fix and write similar code. Analysis of the log file data provided evidence that learners are nearly twice as likely to correctly solve adaptive Parsons problems than non-adaptive ones. By Mark Guzdial and Bahare Naimipour This is my first paper on the work I’m publishing on the new work I’m doing in task-specific programming. I mostly discuss my first prototype (see link here) and some of what math teachers are telling me (see link here). We also include a report on Bahare’s and my work with social studies educators A good bit of this paper is putting task-specific programming in a computing education context. I see what I’m doing as pushing further microworlds. Typically, a microworld is built on top of a general-purpose language, e.g., Logo for Papert and Boxer for diSessa. Thus, the de- signer of the microworld could assume familiarity with the syntax and semantics of the programming language, and perhaps some general programming concepts like mutable variables and control structures. The problem here is that Logo and Boxer, like any general-purpose programming language, take time to develop proficiency. A task-specific programming language (TSPL) aims to provide the same easy-to-understand operations for a microworld, but with a language designed for a particular purpose. Here’s the abstract: Abstract: A task-specific programming language (TSPL) is a domain-specific programming language (in programming languages terms) designed for a particular user task (in human-computer interaction terms). Users of task-specific programming are able to use the tool to complete useful tasks, without prior training, in a short enough period that one can imagine fitting it into a normal class (e.g., around 10 minutes). We are designing a set of task-specific programming languages for use in social studies and precalculus courses. Our goal is offer an alternative to more general purpose programming languages (such as Scratch or Python) for integrating computing into other disciplines. An example task-specific programming language for precalculus offers a concrete context: An image filter builder for learning basic matrix arithmetic (addition and subtraction) and matrix multiplication by a scalar. TSPLs allow us to imagine a research question which we couldn’t ask previously: How much computing might students learn if they used a multiple TSPLs in each subject in each primary and secondary school grade? Eventually the papers are going to appear in the ACM Digital Library. I have a preprint version of Barb’s paper here, and a longer form (with bigger screenshots) of my paper here."
"84","2019-08-12","2023-03-24","https://computinged.wordpress.com/2019/08/12/social-studies-teachers-programming-when-high-schools-choose-to-teach-cs-and-new-models-of-cognition-and-intelligence-in-programming-an-icer-2019-preview/","My group will be presenting two posters at ICER this year. Barbara is co-author on a paper, A Spaced, Interleaved Retrieval Practice Tool that is Motivating and Effective, with Iman Yeckehzaare and Paul Resnick . This is about a spaced practice tool that 32% of the students in an introductory programming course used more than they needed to, and the number of hours of use had a measurable positive effect on the final exam grade. All of our other papers were rejected this year, but we’re in good company — the accept rate was around 18%. But I do want to talk about a set of papers that will be presented by others at ICER 2019. These are papers that I heard about, then I asked the authors for copies. I’m excited about all three of them. How Do Students Talk About Intelligence? An Investigation of Motivation, Self-efficacy, and Mindsets in Computer Science by Jamie Gorson and Eleanor O’Rourke (see released version of the paper here) One of the persistent questions in computing education research is why growth mindset interventions are not always effective (see blog post here). We get hard-to-interpret results. I met Jamie and Nell at the Northwestern Symposium on Computer Science and the Learning Sciences in April (amazing event, see here for more details). Nell worked with Carol Dweck during her graduate studies. Jamie and Nell found mixed mindsets among the CS students that they studied. Some of the students they studied had growth mindsets about intelligence, but their talk about programming practices showed more fixed mindset characteristics. Other students self-identified as having some of both growth and fixed mindset beliefs. In particular, some students talked about intelligence in CS in ways that are unproductive when it came to the practice of programming. For example, some students talked about the best programmers as being able to write the whole code in one sitting, or never getting any errors. A more growth mindset approach to programming would be evidenced by talking about building programs in pieces, expecting errors, and improving through effort over time. This is a really helpful finding. It gives us new hypotheses to explore about why growth mindset interventions haven’t been as successful in CS as in other disciplines. Few disciplines have this strong distinction between their knowledge and their practice as acutely as we do in CS. It’s no wonder that we see these mixed mindsets. Toward Context-Dependent Models of Productive Knowledge in Programming Cognition, by Brian A. Danielak I’ve known Brian since he was a PhD student, and have been hoping that he’d start to publish some of his dissertation work. I got to read one chapter of it, and found it amazingly insightful. Brian explained how what we might see as a “random walk” of syntax was actually purposeful and rational behavior. I was excited to hear about this paper, and I enjoyed reading it. It’s such an unusual paper for ICER! It’s empirical, but has no methods section. A big part of it is connecting to prior literature, but it’s not about a formal literature review. Brian is making an argument about how we characterize knowledge and student success in CS. He points out that we often talk about students being wrong and having misconceptions, which is less productive than figuring out what they understand and where their alternative conceptions work or fail. I see his work following on to the work of Rich et al. (mentioned in this blog post) on CS learning trajectories. There are so many things to learn in CS, and sometimes, just getting started on the trajectory is a big step. Spatial Encoding Strategy Theory: The Relationship between Spatial Skill and STEM Achievement by Lauren Margulieux. Lauren is doing some impressive theoretical work here. She’s considering the work exploring the relationship between spatial reasoning and CS learning/performance, then constructs a theory explaining the observed results. Since it’s Lauren, the theory is thorough and covers well the known results in this space. I wrote her that I didn’t think that theory explains things that we expect are related to spatial reasoning, but we don’t yet have empirical evidence to support it. For example, when programmers simulate a program in their mind, their mental models may have a spatial component to them, but I don’t know of empirical work that explores that dimension of CS performance. But again, since it’s Lauren, I wouldn’t be surprised if her presentation addresses this point, beyond what was in the paper. (Also, read Lauren’s own summary of the paper here.) I am looking forward to the discussion of these papers at ICER!"
"85","2018-05-07","2023-03-24","https://computinged.wordpress.com/2018/05/07/why-are-cs-students-so-hard-to-nudge-a-theory-for-why-its-so-hard-to-promote-a-growth-mindset-in-cs1/","Pearson took a lot of heat recently for trying to improve students’ mindset in My Programming Lab. I’m slightly worried about the ethics of their “embedded experiment.” I’m more worried that it didn’t work. Titled “Embedding Research-Inspired Innovations in EdTech: An RCT of Social-Psychological Interventions, at Scale,” the study placed 9,000 students using MyLab Programming into three groups, each receiving different messages from the software as they attempted to solve questions. Some students received “growth-mindset messages,” while others received “anchoring of effect” messages. (A third control group received no messaging at all.) The intent was to see if such messages encouraged students to solve more problems. Neither the students nor the professors were ever informed of the experiment, raising concerns of consent. The “growth mindset messages” emphasized that learning a skill is a lengthy process, cautioning students offering wrong answers not to expect immediate success. One example: “No one is born a great programmer. Success takes hours and hours of practice.” “Anchoring of effect” messages told students how much effort is required to solve problems, such as: “Some students tried this question 26 times! Don’t worry if it takes you a few tries to get it right.” As Education Week reports, the interventions offered seemingly no benefit to the students. Students who received no special messages attempted to solve more problems (212) than students in either the growth-mindset (174) or anchoring groups (156). The researchers emphasized this could have been due any of a variety of factors, as the software is used differently in different schools. Source: Pearson Embedded a ‘Social-Psychological’ Experiment in Students’ Educational Software [Updated] Beth Simon and her colleagues tried a similar experiment, reported at ICER 2008. They did get informed consent. They tried a similar kind of “nudge” to get students to adopt a growth mindset. It didn’t work for Beth et al., either. I advised Kantwon Rogers’ MS in HCI project, where he tried to nudge CS1 students (both on-line and off-line) to have a greater sense of “belongingness” in CS. Similar to these previous studies, he sent email prompts to students — some just encouraged study skills, and others promoted a sense that they belongs and could succeed in CS. In almost all of his conditions, belongingness dropped. What’s going on here? Why are CS students so impervious to these prompts that have been successful in other settings? I have a theory. There’s a notion in the behavioral sciences literature that you get more success changing behavior or promoting attitudes by reducing barriers than by prompting for desired behavior or attitudes. The analogy is to a large boulder that you want to move: You can push it and push it, or you can just dig away the dirt from the bottom. The latter is likely to get the boulder rolling without as much effort. Here’s my theory: Introductory CS classes have systemic issues that encourage a fixed mindset and discourage a sense of belonging. There are too many signals to students that they can’t succeed, that they can’t get better, and that they don’t belong — perhaps especially in times of rising enrollment. Mere nudges are not going to move the boulder. We’re going to have to remove the barriers to belonging, self-efficacy, and the sense that students can succeed at CS. "
"86","2017-12-06","2023-03-24","https://computinged.wordpress.com/2017/12/06/us-national-academics-report-investigates-the-growth-of-computer-science-undergraduate-enrollments/","The new National Academies report on the growth of CS undergraduate enrollments came out last month. It’s important because it reflects the recommendations of scholars across disciplines in dealing with our enormous enrollment growth (see Generation CS report for more findings on the surge). I wrote about this report in my Blog@CACM post for this month, The Real Costs of a Computer Science Teacher are Opportunity Costs, and Those Are Enormous. The report talks about how hard it is to hire new faculty to deal with the enrollment boom, because the Tech industry is increasing its share of new PhD’s and recruiting away existing faculty. Eric Roberts at Stanford was part of the report writing, and points out that the committee did not reach agreement that there is a problem with participation by underrepresented minorities. Quoting Eric’s message to SIGCSE-members, “the committee did not find comparable evidence that departmental limitations have historically had a negative effect on participation by underrepresented minorities. In fact, the total number of degrees awarded to students in the largest of the underrepresented demographic groups (African American and Latino/Latina) has roughly matched the percentages at which students from those communities obtain bachelor’s degrees.” It’s surprising, and Eric’s note goes on to explain why that result is so concerning. The report does say clearly, “Institutions should take deliberate actions to support diversity in their computer science and related programs.” Since 2006, computer science departments in the U.S and Canada have experienced a surge in the number of undergraduate majors and course enrollments. The resulting strain on departmental and institutional resources has been significant for many departments, especially with respect to faculty hiring and overall workload. The National Academy of Sciences (NAS) has recently addressed the issue with the release a report titled “Assessing and Responding to the Growth of Computer Science Undergraduate Enrollments.” The NAS report discusses strategies central for managing enrollment and resources, and makes recommendations for departments and institutions. Its findings and recommendations provide much-needed guidelines on how institutions can allocate resources to meet growing student demand and to adequately support their computer science department in the increasingly central role of computer science in education and research. “The way colleges and universities respond to the surge in student interest and enrollment can have a significant impact on the health of the field,” said Susanne Hambrusch, co-chair of the report’s committee and a professor of computer science at Purdue University. “While there is no one-size-fits-all answer, all institutions need to make strategic plans to address realistically and effectively the growing demand for the courses.” Source: NAS Report Investigates the Growth of Computer Science Undergraduate Enrollments"
"87","2017-03-03","2023-03-24","https://computinged.wordpress.com/2017/03/03/generation-cs-cra-releases-report-on-surge-in-computer-science-enrollments/","The Computing Research Association has released their report on the surge in CS enrollments. They’re naming this surge “Generation CS.” Across the United States and Canada, universities and colleges are facing a significant increase in enrollment in both undergraduate computer science (CS) courses and programs. The current enrollment surge has exceeded previous CS booms, and there is a general sense that the current growth in enrollment is substantially different than that of the mid-1980s and late 1990s. To investigate the current situation, the Computing Research Association (CRA) produced an enrollment survey to measure, assess, and better understand enrollment trends and their impact on computer science units, diversity, and more. The survey was administered in parallel with CRA’s annual Taulbee Survey of doctoral-granting units and ACM’s annual NDC Study of non-doctoral granting units in computing. Analysis of the survey is presented in a new report, “Generation CS: CS Enrollments Surge Since 2006,” available for download and online at: http://cra.org/data/generation-cs/. Source: CRA Releases Report on Surge in Computer Science Enrollments – CRA"
"88","2017-03-08","2023-03-24","https://computinged.wordpress.com/2017/03/08/sigcse-2017-preview-gp-ebooks-earsketch-cs-for-all-and-more-from-georgia-tech/","I have written individual blog posts for each paper or other contributions at conferences like ICER or SIGCSE. Then sometimes, like this year, that’s just overwhelming. So please excuse me for talking about a bunch (I may not even get all of it) of Georgia Tech related CS Education work at SIGCSE 2017 this year. (Conference website is here, and program is here. The on-line program is really nice, which is here.) Wednesday 7-10 pm: Room 618-619 I’m helping to organize a workshop with John Maloney, Yoshiki Ohshima, and Jens Mönig on GP. I blogged about GP here, and about the use of GP for Media Computation in a minimal manuals structure here. The workshop will be the first SIGCSE activity with GP. The plan is to move it into a public form next summer, and the team is looking for people who want to start using it for their classes. Thursday 10:45-12: Room 6E I was part of an effort at last year’s CRA Conference at Snowbird to get CS departments to participate in President Obama’s “CS for All” initiative (see blog post here). This year, Barbara Ericson, Rick Adrion, and Megean Garvin will tell us about how their CS departments are working to promote CS for All. I’m the moderator. Thursday 1:45-3:00: Room 615 Brian Magerko and Jason Freeman will present on EarSketch, which I just blogged about here. They are also presenting on Creativity in Authentic STEAM Education with EarSketch on Friday 1:45-3 in Room 612. And then again Saturday 10-10:45 as a demo, EarSketch, a web-application to teach Computer Science through Music Thursday 3-4:30 pm: NSF Showcase in Exhibition Space Barb, Miranda Parker, and I will present our ebooks. I blogged about our ICER 2016 paper on ebooks here and our WiPSCE 2015 paper here). Thursday 5:30-6:20 pm: Room 613-614 I’m part of a BOF led by Pat Yongpradit of Code.org with Leigh Ann DeLyser of CSNYC and Kathi Fisler at Brown. The BOF session will allow researchers to discuss opportunities in K-12 CS ed research within five areas related to the implementation and future of the framework: Friday 7-10 pm: Room 612 Barb, Brad Miller, and Paul Resnick will present on the Runestone platform that we build our ebooks on. Brad built Runestone, and Paul uses and extends it frequently for his Informatics course at U. Michigan. This is the first time that they’re teaching others how to use the platform, which is a great sign of the maturation of Runestone — from researcher and early-adopters into something that all CS educators can use. Zane Cochran, a student of my colleague Betsy DiSalvo, will present some of his work on using maker spaces to improve CS education. Saturday 10:45-12: Room 611 My PhD student, Miranda Parker (who has been working on privilege issues and on the SCS1), and Leigh Ann Delyser (of CSNYC and CS for All fame) will present on the new K-12 CS Framework (see blog post here) and the research support for it. Saturday 3-6 pm: Room 618-619 Briana Morrison is leading the effort with Cynthia Lee, Leo Porter, Beth Simon, and me to present CS teaching practices for which we have an evidence-base. We’re drawing a lot on our New Faculty Workshops material. Saturday 3-6 pm: Room 612 (YES! Dueling workshops!) Barb is working with Rebecca Dovi and Ria Galanos on how to teach CS teacher professional learning opportunities. Barb is using a lot of the material that she’s developed for “Train the Trainer” sessions as part of ECEP."
"89","2016-06-15","2023-03-24","https://computinged.wordpress.com/2016/06/15/an-ebook-integrating-minimal-manuals-with-constructionism-worked-examples-and-inquiry-mohq/","Our computing education research group at Georgia Tech has been developing and evaluating ebooks for several years (see this post with discussion of some of them). We publish on them frequently, with a new paper just accepted to ICER 2016 in Melbourne. We use the Runestone Interactive platform which allows us to create ebooks with a lot of different kinds of learning activities — not just editing and running code (which I’ve been arguing for awhile is really important to support a range of abilities and motivations), but including editing and running code. It’s a heavyweight platform. I have been thinking about alternative models of ebooks — maybe closer to e-pamphlets. Since I was working with GP (see previous post) and undergraduate David Tran was interested in working with me on a GP project, we built a prototype of a minimalist medium for learning CS. I call it a MOHQ: Minimal manual Organized around Hypertext Questions: http://home.cc.gatech.edu/gpblocks. (Suggestion: Use Firefox if you can for playing with browser GP. WAY faster for the JavaScript execution than either Chrome or Safari on my Mac.) John Carroll came up with the idea of minimal manuals back in the 1980’s (see the earliest paper I found on the idea). The goal is to help people to use complicated computing devices with the minimum of overhead. Each page of the manual starts with a task — something that a user would want to do. The goal is to put the instruction for how to achieve that task all on that one page. The idea of minimalist instruction is described here: http://www.instructionaldesign.org/theories/minimalism.html. The four principles of minimal instruction design are: There’s good evidence that minimal manuals really do work (see http://doc.utwente.nl/26430/1/Lazonder93minimal.pdf). Learners become more productive more quickly with minimal manuals, with surprisingly high scores on transfer and retention. A nice attribute of minimal manuals is that they’re geared toward success. They likely increase self-efficacy, a significant problem in CS education. The goal of most minimal instruction is to be able to do something. What about learning conceptual knowledge? I started exploring minimal manuals as a model for designing CS educational media after a challenge from Alan Kay. Alan asked me to think about how we would teach people to be autodidacts. One of the approaches used to encourage autodidactism is inquiry-based learning. Could we structure a minimal manual around questions that they might have or that we want students to ask themselves? We structure our Runestone ebooks around an Examples+Practice framework. We provide a worked example (typically executable code, but sometimes a program visualization), and then ask (practice) questions about that example. We provide one or two practice exercises for every example. Based on Lauren Margeliux’s work, the point of the practice is to get students to think about the example, to engage with it, and to explain it to themselves. It’s less important that they do the questions — I want the students to read the questions and think about them, and Lauren’s work suggests that even the feedback may not be all that important. Finally, one of the aspects that I like about Runestone is that every example in an active code area is a complete Python interpreter. Modify the code anyway you want. Erase all of it and build something new if you want. It’s constructionist. We want students to construct with the examples and go beyond them. The prototype MOHQ that David Tran and I built (http://home.cc.gatech.edu/gpblocks) is an implementation of this integration of minimal manuals with constructionism, inquiry, and worked examples. Each page in the MOHQ: Using the minimal design principles to structure the explanation: The top page offers several questions that I hope are interesting to a student. Every page offers a project that aims to answer that question. GP is a good choice here because it’s blocks-based (low cognitive load) and I can do MediaComp in it (which is what I wanted to teach in this prototype). #1: Minimize the amount of reading and other passive forms of training by allowing users to fill in the gaps themselves. Each page has a video of David or me solving the problem in GP. Immediately afterward is a link to jump directly into the GP project exactly where the video ended. Undo something, redo something, start over and build something else. The point is to watch a video (where we try to explain what we’re doing, but we’re certainly not filling in all the gaps), then figure out how it works on your own. Then we offer a couple of practice questions to challenge the learner: Did you really understand what was going on here? #2: Include error recognition and recovery activities in the instruction. Error recovery is easy when everything is in the browser — just hit the back button. You can’t save. You can’t damage anything. (We tell people this explicitly on every page.) #3: Make all learning activities self-contained and independent of sequence. This is the tough one. I want people to actually learn something in a MOHQ, that pixels have red, green, and blue components, and chromakey is about replacing one color with a background image, and that removing every other sample increases the frequency of a sound — and more general ideas, e.g., that elements in a collection can be referenced by index number. So, all the driving questions from the home page start with, “Okay, you can just dive in here, but you might want to first go check out these other pages.” You don’t have to, but if you want to understand better what’s going on here, you might want to start with simpler questions. We also want students to go on — to ask themselves new questions, to go try other projects. After each project, we offer some new questions that we hope that students might ask themselves. The links are explicitly prompts. “You might be thinking about these questions. Even if you weren’t, you might want to. Let’s see where we can explore next.” Here’s the map of pages that we have out there right now. We built it in a Wiki which facilitated creating the network of pages that we want. This isn’t a linear book.  There’s maybe a dozen pages out there, but even with that relatively small size, it took most of a semester to pull these together. Producing the videos and building these pages by hand (even in a Wiki) was a lot of work. The tough part was every time we changed our minds about something — and had to go back through all of the previously built pages and update them. Since this is a prototype (i.e., we didn’t know what we wanted when we started), that happened quite often. If we were going to add more to the GP MOHQ, I’d want to use a tool for generating pages from a database as we did with STABLE, the Smalltalk Apprenticeship-Based Learning Environment. I would appreciate your thoughts about MOHQ. Call this an expert review of the idea."
"90","2015-09-25","2023-03-24","https://computinged.wordpress.com/2015/09/25/student-and-teacher-csp-ebooks-are-now-available/","We now have TWO ebooks supporting CS Principles (see website here) now available — one for teachers and one for students. Our teacher ebook summer study is now ended. (Announcement about launching the study is here.) We’re crunching the data now. We’ve already learned a lot about what teachers want in an ebook. We learned where our user interface wasn’t obvious, and where we needed to explain more. We learned that teachers expect end-of-chapter exercises. We have used what we have learned so far to produce the two new ebooks. STUDENT CSP EBOOK: About a year ago, we received additional NSF funding (from the Improving Undergraduate STEM Education (IUSE) program) to develop a student version of our CSP ebook. We have been running participatory design studies and gathering usability surveys from students to get input on what a student ebook should look like. We have now released the first version of the student ebook. The student CSP ebook is available at http://interactivepython.org/runestone/static/StudentCSP/index.html It doesn’t require a login, but we recommend that teachers have their students login. Without a login, we store saved answers on the local computer, but if the student logs in, we save the answers by the student’s username. The course name is StudentCSP. We recommend that teachers create a custom version of the student ebook for your students. This allows teachers to customize the ebook, assign homework, and view student’s progress, and even create additional assessments for students. New Version TEACHER CSP EBOOK: We iterated on our teacher ebook at the same time that we were developing the student ebook. We hypothesize that the student CSP ebook may actually encourage teachers to complete the teacher ebook. We can imagine that teachers who use the student ebook might want to stay one step ahead of the students, e.g., “My students are starting Chapter 3 on Monday, so I better finish Chapter 3 this weekend.” We have now created a second version of our teacher CSP ebook. This one is in lockstep with the student CSP ebook, includes all the end-of-chapter exercise answers and teacher notes (e.g., on how to teach particular concepts, common student difficulties, etc.). We are not making the second teacher ebook available openly (because it includes answers to the student problems). Teachers, please contact us at cslearn4u@gmail.com with the name and location of your school, and we’ll send you the URL. We recommend that teachers create their own course for their students. See http://interactivepython.org/runestone/static/overview/instructor.html for why a teacher might want to build a custom course and how to do it."
"91","2018-06-28","2023-03-24","https://computinged.wordpress.com/2018/06/28/visiting-ntnu-in-trondheim-norway-june-3-21/","Barbara and I are just back from a three week trip to NTNU in Trondheim, Norway. Katie Cunningham came with us (here’s a blog post about some of her work). Three weeks is enough time to come up with a dozen ideas for blog posts, but I don’t have the cycles for that. So let me just give you the high-level view, with pictures and links to learn more. We went at the beginning of June because Barb and I (and the University of Michigan) are part of the IPIT network (International Partnerships for Excellent Education and Research in Information Technology) that had its kick-off meeting June 3-5. The partnership is about software engineering and computing education research, with a focus student and faculty exchange and meetings at each others’ institutions: NTNU, U. Michigan, Tsinghua University, and Nanjing University. I learned a lot about software engineering that I didn’t know before, especially about DevOps. If you ever get the chance to go to a meeting organized by Letizia Jaccheri of NTNU, GO! She was the organizer for IPIT, co-chair of IDC 2018, and our overall host for our three weeks there. She has a wonderful sense for blending productivity with fun. During the IDC 2018 poster session, she brought in high school students dressed as storybook characters, just to wander around and “bring in a bit of whimsy.” For a bigger example, she wanted IPIT to connect with the NTNU campus at Ålesund, which just happens to be near the Geiranger fjord, one of the most beautiful in Norway. So, she flew the whole meeting to Ålesund from Trondheim! We took a large cruise-ship like boat with meeting rooms down the fjord. We got in some 5-6 hours of meetings, while also seeing amazing waterfalls and other views, and then visited the Ålesund campus the next day before flying home. We got work done and WOW!  For the next week and a half, we got to know the computing education research folks at NTNU. We were joined at the end of the first week by Elisa Rubegni from the University of Lincoln, and Roberto Martinez-Maldonado came by a couple days later. Barb, Elisa, and I held a workshop on the first Monday after IPIT. A couple days later, we had a half-day meeting with Michalis Giannakos’s group and Roberto, then Elisa led us all in a half-day design exercise (pictured below — Elisa, Sofia, Javi, and Katie). In between, we had individual meetings. I think I met with every one of the PhD students there working in computing education research. (And, in our non-meeting time, Barb and I were writing NSF proposals!)  Michalis’s group is doing some fascinating work. Let me tell you about some of the projects that most intrigued me.  Then came FabLearn with an amazing keynote by Leah Buechley on art, craft, and computation. I have a long list of things to look up after her talk, including Desmos, computer controlled cutting machines (which I had never heard of before) which are way cheaper than 3-D printers but still allow you to do computational craft, and http://blog.recursiveprocess.com/ which is all about learning coding and mathematics. She made an argument that I find fascinating — that art is what helps diverse students reflect their identity and culture in their school, and that’s why students who get art classes (controlling for SES) are more likely to succeed in school and go onto post-secondary schooling. Can computing make it easier to bring art back into school? Can computing then play a role in engaging children with school again?   The next reason we were at NTNU was to attend the EXCITED Centre advisory board meeting. Barb and I were there for the launch of EXCITED in January 2017. It’s a very ambitious project, starting from students making informed decisions to go into CS/IT, helping students develop identities in CS, learning through construction, increasing diversity in CS, and moving into careers. We got to hang out with Arnold Pears, Mats Daniels, and Aletta Nylén of UpCERG (Upssala Computing Education Research Group), the world’s largest CER group. Finally, for the last four days, we attended the Interaction, Design and Children Conference, IDC 2018. I wrote my Blog@CACM post for this month about my experiences there. I saw a lot there that’s relevant to people who read this blog. My favorite paper there tested the theory of concreteness fading on elementary school students learning computing concepts. Here’s a picture of a slide (not in the paper) that summarizes the groups in the experiment.  I’ll end with my favorite moment in IDC 2018, not in the Blog@CACM post. We met Letizia’s post-doc, Javier “Javi” Gomez at the end of our first week in Trondheim. Summer weather in Trondheim is pretty darn close to winter in Atlanta. One day, we woke up to 44F and rain. But we lucked out — the weekends were beautiful. On our first Saturday, Letizia invited us all to a festival near her home, and we met Javi and Elisa. That evening (but still bright sunlight), Javi, Elisa, Barb, and I took a wonderful kayaking trip down the Nidelva river. So it was a special treat to be at IDC 2018 to see Javi get TWO awards for his contributions, one for his demo and an honorable mention for his note. The note was co-authored by Letizia, and was her first paper award (as she talks about in the lovely linked blog post). It was wonderful to be able to celebrate the success of our new friends. On the way back, Barb and I stopped in London to spend a couple days with Alan Kay and his wife, Bonnie MacBird. If I could come up with a dozen blog post ideas from 3 weeks, it’s probably like two dozen per day with Alan and Bonnie, and we had two days with them. Visiting a science museum with an exhibit on early computers (including an Alto!) is absolutely amazing when you’re with Alan. But those blog posts will have to wait until after my blog hiatus."
"92","2017-03-29","2023-03-24","https://computinged.wordpress.com/2017/03/29/visit-to-researchers-at-excited-center-at-ntnu/","In January, Barbara Ericson and I were invited to visit the new ExcITED Center at NTNU in Trondheim, Norway. ExcITED is the Centre for Excellent IT Education. It was a whirlwind trip, fitting it in after the start of our semester at Georgia Tech, but really wonderful. We got there just as NTNU was celebrating their new Department of Computer Science with an “IDIovation” celebration which included some great research talks and (a highlight for me) a live coding computer music performance. The whole event was recorded and is available here. Our host for the visit was Michail Giannakos, who is a learning scientist interested in a variety of educational technologies. We got a chance to meet with several of the faculty and many of the students working in ExcITED. Like I said, it was a whirlwind trip, so please excuse me if I only mention a few of the projects we saw — the ones that particularly stuck with me, despite the jet-lag. One team at ExcITED is logging student interactions with the IDE that they use in their classes at the University, like the BlueJ Blackbox effort. What makes what they’re doing remarkable is that they’re immediately turning the data around, to present a process mirror to the students. They show students a visualization of what they have been doing. The goal is to encourage reflection, to get students to realize when they’re spending too much time on one phase of their work, or maybe not enough (e.g., in testing). The challenge is mapping from the low-level user interactions to higher-level visualizations that might inform students. There are several projects that are working with children who are programming in Scratch (which can be localized to Norwegian). The one that most captured my attention was where students were programming these beautiful robotic sculptures, created by professional artists. The team is exploring how this influences student motivation. How does motivation change when the robots under the students’ control are neither student-generated nor stereotypically “robotic”?  The Tiles project by Simone Mora, Francesco Gianni, and Monica Divitini aims to engage designers in ubiquitous computing. They have these cool cards that they use in an activity with designers to get them thinking about the kinds of everyday items in which computation might be embedded. They want designers to think about how sensors and actuators might be used to support user activity.   They’re now working to extend these cards with ties to JavaScript code that would actually allow designers to build the things that they designed. It’s an innovative activity to engage designers with embedded computing and then to carry the designs to prototype. On the weekend after our visit, the chair of the department, Letizia Jaccheri, took Barb and I off to ski in Sweden in Åre. We arrived on a Thursday, spoke at IDIovation that night, met with ExcITED researchers on Friday, traveled to Sweden to ski on Saturday, back on Sunday, and flew home on Monday. An absolutely amazing trip for which we were both grateful to have had the opportunity!"
"93","2018-03-19","2023-03-24","https://computinged.wordpress.com/2018/03/19/constructivism-vs-constructivism-vs-constructionism/","I wrote the below in 1997. I’m surprised that I still find references to it from time-to-time. That website may be going away soon, so I thought I’d put it here (only very slightly edited) in case others may find it useful. I’d like to offer my take on the meaning of these words. I hear them used in so many ways that I often get confused what others mean by them. Constructivism, the cognitive theory, was invented by Jean Piaget. His idea was that knowledge is constructed by the learner. There was a prevalent idea at the time (and perhaps today as well) that knowledge is transmitted, that the learner was copying ideas read or heard in lecture directly into his or her mind. Piaget theorized that that’s not true. Instead, learning is the compilation of complex knowledge structures. The learner must consciously make an effort to derive meaning, and through that effort, meaning is constructed through the knowledge structures. Piaget liked to emphasize learning through play, but the basic cognitive theory of constructivism certainly supports learning through lecture — as long as that basic construction of meaning takes place. I don’t know who invented the notion of Constructivism, the educational philosophy, but it says that each students constructs their own, unique meaning for everything that is learned. This isn’t the same as what Piaget said. Piaget’s theory does not rule out the possibility that you and I may construct exactly the same meaning (i.e., exactly the same knowledge constructions) for some concept or domain. The philosophy of constructivism say that learners will construct their own unique meanings for concepts, so it is not at all reasonable to evaluate students as to how well they have all met some normative goal. (Radical constructivists go so far as to say that the whole concept of a curriculum makes no sense since we cannot teach anyone anything — students will always simply create their own meaning, regardless of what teachers do.) Philosophical constructivists emphasize having students take control of their own learning, and they de-emphasize lecture and other transmissive forms of instruction. This philosophical approach gets complicated by varying concepts of reality: If we all interpret things differently, is there any correct reality? From my perspective, the assumption of constructivists is currently an untestable hypothesis. We know of no way to peer into someone’s mental constructions. Until we can, we do not know if you and I think about the concept of velocity differently or the same. Constructionism is more of an educational method which is based on the constructivist learning theory. Constructionism, invented by Seymour Papert who was a student of Piaget’s, says that learning occurs “most felicitously” when constructing a public artifact “whether a sand castle on the beach or a theory of the universe.” (Quotes from his chapter “Situating Constructionism” in the book “Constructionism” edited by Papert and Idit Harel.) Seymour does lean toward the constructivist learning philosophy in his writings, where he talks about the difficulty of conveying a complex concept when the reader is going to construct their own meaning. In general, though, his claim is more about method. He believes that students will be more deeply involved in their learning if they are constructing something that others will see, critique, and perhaps use. Through that construction, students will face complex issues, and they will make the effort to problem-solve and learn because they are motivated by the construction. The confusion that I and others have about these terms stems from (a) similar looking words and (b) meaning at different levels of the word construct. Piaget was talking about how mental constructions get formed, philosophical constructivists talk about how these constructions are unique (noun construction), and Papert is simply saying that constructing is a good way to get mental constructions built. Levels here are shifting from the physical (constructionism) to the mental (constructivism), from theory to philosophy to method, from science to approach to practice."
"94","2019-07-15","2023-03-24","https://computinged.wordpress.com/2019/07/15/so-whats-a-notional-machine-anyway-a-guest-blog-post-from-ben-shapiro/","Last week, we had a Dagstuhl Seminar about the concept of notional machines, as I mentioned in an earlier blog post about the work of Ben Shapiro and his student Abbie Zimmermann-Niefield. There is an amazing amount being written about the seminar already (see the Twitter stream here), with a detailed description from Amy Ko here in her blog and several posts from Felienne on her blog. I have written my own summary statement on the CACM Blog (see post here). It seems appropriate to let Ben have the summary word here, since I started the seminar with a reference to his work. I’m heading back to Boulder from a Dagstuhl seminar on Notional Machines and Programming Language Semantics in Education. The natural question to ask is: what is a notional machine? I don’t think we converged on an answer, but here’s my take: A notional machine is an explanation of the rules of a programmable system. The rules account for what makes a program a valid one and how a system will execute it. Why this definition? Well, for one, it’s consistent with how du Boulay, coiner of the term notional machine, defined it at the workshop (“the best lie that explains what the computer does”). Two, it has discriminant utility (i.e. precision): the definition allows us to say that some things are notional machines and some are not. Three, it is consistent with a reasonable definition of formal semantics, and thus lets us imagine a continuum of notional machines that include descriptions of formal semantics, but also descriptions that are too imprecise — too informal — to be formal semantics but that still have explanatory value. The first affordance is desirable because it allows us to avoid a breaking change in nomenclature. It would be good if people reading research papers about notional machines (see Juha Sorva’s nice review), including work on how people understand them, how teachers generate or select them, etc., don’t need to wrestle with what contemporary uses of the term mean in comparison to how du Boulay used the term thirty years ago. It may make it easier for the research community to converge on a shared sense of notional machine, unlike, say, computational thinking, where this has not been possible. The second affordance, discriminant utility, is useful because it gives us a reason to want to have a term like notional machine in our vocabulary when we already have other useful and related terms like explanation and model and pedagogical content knowledge. Why popularize a new term when you already have perfectly good ones? A good reason to do so is because you’d like to refer to a distinct set of things than those terms refer to. The scope of our workshop was explicitly pedagogical: it was about notional machines “in education.” It was common within the workshop for people to refer to notional machines as pedagogical devices. It is often the case that notional machines are invented for pedagogical purposes, but other contexts may also give rise to them. Consider the case of Newtonian mechanics. Newton’s laws, and the representations that we construct around them (e.g. free body diagrams), were invented before Einstein described relativity. Newton’s laws weren’t intended as pedagogical tools but as tools to describe the laws of the universe, within the scales of size and velocity that were accessible to humans at the time. Today we sequence physics curriculum to offer up Newtonian physics before quantum because we believe it is easier to understand. But in many cases, even experts will continue to use it, even if they have studied (and hopefully understand) quantum physics. This is because in many cases, the additional complexity of working within a quantum model offers no additional utility over using the simpler abstractions that Newtonian physics provides. It doesn’t help one to predict the behavior of a system any better within the context of use, but likely does impose additional work on the system doing the calculation. So, while pedagogical contexts may be a primary locus for the generation, selection, and learning of notional machines, they are not solely of pedagogical value. Within the workshop, I noticed that people often seemed to want their definitions, taxonomies, and examples of notional machines to include entities and details beyond those encompassed by the definition I have provided above. For example, some participants suggested that action rules can be, or be part of, notional machines. An example of an action rule might be “use descriptive variable names” or “make sure to check for None when programming in Python.” While both of these practices can be quite helpful, my definition of notional machines accepts neither of them. It rejects them because they aren’t about the rules by which a computer executes a program. In most languages, what one names variables does not matter, so long as one uses a name consistently within the appropriate scope. “Make sure to check for None” is a good heuristic for writing a correct program, but not an account of the rules a programming environment uses to run a program. In contrast, “dereferencing a null pointer causes a crash” is a valid notional machine, or at least a fragment of one. Why do I want to exclude these things? Because a) I think it’s valuable to have a term that refers to the ways we communicate about what programming languages are and how the programs written in them will behave. And b) a broader definition will refer to just about everything that has anything to do with the practice of programming. That doesn’t seem worth having another term in our lexicon, and it would be less helpful for designing and interpreting research studies for computing education. The third affordance is desirable because it may allow us to form stronger bridges to the programming languages research world. It allows us to examine — and value — the kinds of artifacts that they produce (programming languages and semantics for those languages) while also studying the contradictions between the values embedded in the production of those artifacts and the values that drive our own work. Programming languages (PL) researchers are generally quite focused on demonstrating the soundness of designs they create, but typically pay little attention to the usability of the artifacts they produce. Research languages and written (with Greek) semantics have difficult user interfaces, at least to those of us sitting on the outside of that community. How can we create a research community that includes the people, practices, and artifacts of PL and that conducts research on learning? One way is to decide to treat the practices and artifacts of PL researchers, such as writing down formal semantics, an instance of something that computing education researchers care about: producing explanations of how programming systems work. PL researchers describing languages’ semantics aren’t doing something that is very different in kind than what educators do when they explain how programming languages work. But (I think) they usually do so with greater precision and less abstraction than educators do. Educators’ abstractions may be metaphorical (e.g. “There’s a little man inside the box that reads what you wrote, and follows your instructions, line by line…”) but at least if we use my definition, they are of the same category as the descriptions that semanticists write down. As such, the range of things that can be notional machines, in addition to the programming languages they describe, may serve as boundary objects to link our communities together. I think we can learn a lot from each other. That overlap presents opportunities. It’s an opportunity for us to learn from each other and an opportunity to conduct new lines of research. Imagine that we are faced with the desire to explain a programming system. How would a semanticist explain this system? How would an experienced teacher? An inexperienced teacher? What do the teachers’ explanations tell us about what’s important? What does a semanticist’s explanation tell us about what’s the kernel of truth that must be conveyed? How do these overlap? How do they diverge? What actually works for students? Can pedagogical explanations be more precise (and less metaphorical) and still be as helpful to students? Are more precise definitions actually more helpful to students than less precise ones? If so, what does one need to know to write a formal semantics? How does one learn to do that? How does one teach educators to do that? How can we design better programming languages, where better is defined as being easier to understand or use? How can we design better programming languages when we have different theories of what it means to program well? How do we support and assess learning of programming, and design programming languages and notional machines to explain them, when we have different goals for what’s important to accomplish with programming? There are many other questions we could ask too. Several groups at the workshop held breakout sessions to brainstorm these, but I think it’s best to let them tell their own stories. In summary, I think the term notional machines has value to computing education research, but only if we can come to a consensus about what the term means, and what it doesn’t. That’s my definition and why I’ve scoped it how I have. What’s your take? If you’d like to read more (including viewpoints different than mine), make sure to check out Felienne’s and Amy’s blog posts on this same topic. Thank you to Shriram, Mark, Jan, and Juha for organizing the workshop, and to the other participants in the workshop for many lively and generous conversations. Thanks as well to the wonderful Dagstuhl staff. "
"95","2019-07-08","2023-03-24","https://computinged.wordpress.com/2019/07/08/learning-to-build-machine-learning-applications-without-code-as-an-example-of-computing-education-research/","Ben Shapiro shared a nice video that his student Abbie Zimmermann-Niefield made about their new paper at IDC. They built a system that allows kids to build applications with machine learning to detect (in this example) good from bad soccer passes.  The video (and paper) are perfect for IDC. It’s a wonderful example of giving students a new computational medium to build new kinds of applications that they couldn’t previously. But the video also raised a bunch of questions for me. Abbie at one point talks about users of her system as “learners.” What are they learning? David Moon put his finger on some of the issues for me with his tweet: ""How can kids develop a rich understanding of the ML-rich world around us? How can kids use ML as a tool for creativity, making, and play? Usually when we talk about ML, we're talking about…students in CS. But you don't need to know how to code to apply ML to problems."" pic.twitter.com/2796yvQiKA — David Moon (@dmoon1221) June 28, 2019  You don’t have to code to build ML applications. But then, is it programming? In the About page for this blog, I have defined computing education research as studying how people come to understand computing, and how to improve that process. What are the students coming to understand in Abbie and Ben’s application? Is studying how students come to build, understand, and debug their ML applications an example of computing education research? I exchanged some messages with Ben, and came to an understanding of what he’s doing — which in turn gave me a new understanding of what I do. In a blog post inspired by Juha Sorva, I suggested a refinement of my original definition. “Coming to understand computing” means to develop a workable mental model or to learn a notional machine of a computing system. Programming is about intentionally defining a process for a computational agent to execute at another time. A notional machine is an explanation for the behavior of a system — it’s a teacher’s attempt to influence the mental model that the student is forming about the system. I learned more about notional machines at a later Dagstuhl, and I’m excited to be attending a Dagstuhl Seminar this week where I’ll learn a lot more about notional machines. Abbie’s participants are developing a mental model of how the system works — it’s not very elaborate, and it’s mostly wrong. One student tells Abbie that she needs to have more both good and bad examples to make the system more accurate. Okay, but why? Ben says that they want to reach the point where students develop a working mental model of the system: About why they need to oversample some kinds of events, to be able to choose between different kinds of machine learning models, to be able able to judge what makes for a good data set, and to decide how to test the system to determine if it’s classifying all the desired inputs correctly. Really, these are all the kinds of things we want students building any kind of program to think about — did I build this correctly (what I wanted it to be), how do I know, and how do I test to make sure? Whether it’s by constructing data or by writing code, it’s still about intentionally defining a process for a computational agent, and then testing that process to determine if it matches the desired function. It’s a fascinating question (which I expect we’ll be discussing this week) about what notional machines one uses to explain machine learning models. It’s an important computing education research question: what mental models do students form about machine learning systems? A different one is: what notional machines do we teach in order to improve the mental models that students develop about machine learning models? Now, does it matter if students can’t see the code? I don’t think so. It probably matters for CS major undergraduates (which Ben, Peter, and Rebecca have argued elsewhere), but for the general population? What does it mean to “see the code” anyway? The lack of code might make the notional machine harder to teach. There is no code to point at when explaining an algorithm (see Amber Solomon’s work on the role of gestures in teaching CS). Maybe you wouldn’t explain an algorithm. Maybe instead you’d point at examples and point at key features of those examples. Maybe. It’s an open and interesting research question. So. Computing education is about helping students to develop mental models of computing systems. These models must be workable to the point of being usable for intentional construction and debugging. Studying how students build machine learning applications without code is also computing education research."
"96","2020-10-05","2023-03-24","https://computinged.wordpress.com/2020/10/05/hyperblocks-come-to-snap/","Jens Moenig kindly shared with me a video announcing HyperBlocks that he’s added to the next version of Snap! The idea of hyperblocks is to support vector and matrix operations in Snap!, as in APL or MATLAB. I’m interested in the research question whether vector operations are easier or harder for students, including considering who the students are (e.g., does more math background make vector operations easier?) and how we define easier or harder (e.g., is it about startup costs, or the ability to build larger and more sophisticated programs?). My suspicion based on the work of folks like L.A. Miller, John Pane, Diana Franklin, Debbie Fields, and Yasmin Kafai is that vector operations would be easier. Students find iteration hard. Users have found it easier to describe operations on sets than to define a process which applies the operation to specific elements. It’s a fascinating area for future research. And, you can do Media Computation more easily (as Jens shows) which is a real win in my book! They also have an online course, on using Snap! from Media Computation to Data Science: https://open.sap.com/courses/snap2 Soon after Jens sent me this video, I got to see him do this in real-time at Snap!Con, and then he and Brian Harvey won the NTLS Education Leadership Award for their work on Snap! (see link here). Congratulations to them both! So here’s the question that I wonder: Who does Snap! work for, and who doesn’t it? These are important questions to consider in pursuit of tools that enable CS for All. UX for PX – how do we design the user experience of the programming experience. P.S. Jens just sent me the link to his Snap!Con talk video: https://youtu.be/K1qR4vTAw4w"
"97","2020-03-11","2023-03-24","https://computinged.wordpress.com/2020/03/11/ebooks-handbooks-strong-themes-and-undergraduate-research-sigcse-2020-preview/","A few items on things that we’re doing at SIGCSE 2020. Yes, SIGCSE 2020 is still have a face-to-face meeting. Attendance looks to be down by at least 30% because of coronavirus fears. Barbara Ericson (and Brad Miller, who won’t be there) are presenting a paper on their amazingly successful Runestone open-source platform for publishing ebooks: Runestone: A Platform for Free, On-line, and Interactive Ebooks on Sat Mar 14, 2020 11:10 AM – 11:35 AM in D135. They are also hosting a workshop to help others to develop with Runestone: Workshop #401: Using and Customizing Ebooks for Computing Courses with Runestone Interactive on Sat Mar 14, 2020 3:30 PM – 6:30 PM in C120. I’m part of the massive special session on Thursday 1:45 PM – 3:00 PM in B113 that Colleen Lewis is organizing: Session 2H: The Cambridge Handbook of Computing Education Research Summarized in 75 minutes. Colleen, who must have done graduate work in organizational management (or perhaps cat herding), has organized 25 authors (!) to present the entire Handbook in a single session. Even if I wasn’t one of the presenters, I’d go just to see if we can all pull it off! It’s going to be kind of like watching NASCAR — you’re on the edge of your seat as everyone tries to avoid crashing into one another. Bravo to Bob Sloan who got this panel accepted this year: Session 6K: CS + X Meets CS 1: Strongly Themed Intro Courses on Fri Mar 13, 2020 3:45 PM – 5:00 PM in Portland Ball Room 255. The panelists are teachers and developers who have put together contextualized introductions to computing, like Media Computation. The panelists have done interesting classes, and I’m eager to hear what they have to say about them. I am collaborating with Sindhu Kutty on her interesting summer reading group to engage undergraduates in CS research. (Read as: we meet occasionally to work on assessment, but Sindhu is really doing all the work.) The evidence suggests that she’s able to give undergraduates a better understanding of CS graduate research, at a larger scale (e.g. a couple dozen students to one faculty member) than typical undergraduate research programs. It seems like it might feel a bit safer and easier to try for female students. She was going to present a poster at RESPECT on Wednesday Undergraduate Student Research With Low Faculty Cost, but it’s now going to be virtual. I’m not sure how it’s going to work right now."
"98","2019-10-04","2023-03-24","https://computinged.wordpress.com/2019/10/04/computing-education-research-issues-in-task-specific-programming-precalculus-tsp-part-5-of-5/","I am exploring task-specific programming as a direct outgrowth of my work on GaComputes, ECEP, and ebooks. I’ve worked hard at helping computing education to grow in the US, but it’s not growing much (see my September Blog@CACM post for stats on that). There are too few people learning with the power of computing. It’s because we make programming so hard. We need to make programming more accessible, and one way to do that is to make it easier. Why do we need to make it more accessible? My answer is: in order for people to use computer science for learning everything else. In 2009, when Matthias and Shriram wrote “Why computer science doesn’t matter” (see paper here), I hated it. Of course, computer science matters! Now I realize that they’re right. Nobody gets turned away from college admissions because they didn’t have high school CS. MANY students get turned away because they can’t pass Algebra 1. Other students don’t finish their degrees because they can’t get past Calculus. This other stuff really matters. I believe that we can use programming to help learn the stuff that really matters. A key insight for me is that what students really use in Bootstrap:Algebra or even in Scratch is a small piece of programming. (I talked about this a good bit in my SIGCSE keynote.) We can reduce how much of programming we teach and still get huge benefits. Essentially, the students in Scratch and Bootstrap:Algebra are doing task-specific programming. I’m just going one step further to strip away even the trappings of a more general programming language. I’m making it as small as I can (but large enough to cover a learner’s task), so that we can increase usability, and thus increase the probability that we can apply programming to improve learning outcomes in other disciplines. But it’s still programming, so the insights and theories of computing education research (CER) deeply influence this work on task-specific programming. In turn, task-specific programming offers the opportunity to ask some of our CER questions in new contexts. Here are two examples. At the Dagstuhl Seminar on Notional Machines (see post by Ben Shapiro), there was a key moment for me. Someone said something there about “Part of the notional machine for algebra.” I stopped and went all academic on them. “Wait a minute — if that’s a real rule used for evaluating algebra, then it’s not a notional machine. Notional machines are simplifications. That’s real algebra, not a notional machine.” There was a bit of a fight after that. It’s kind of a blur now. In my two prototypes, I want the mathematics to be the notional machine. The notional machine for the image filter builder is matrix arithmetic and scalar multiplication. Underneath, it’s doing something more complicated, but I want students to completely understand what’s going on in terms of matrices. The notional machine for the texture wave builder is a bit more complicated. My goal is for the notional machine to be just the wave function, but it’s a bit more than that. It’s also how the wave function maps to RGB values in a picture, and I’m actually not sure I have it right yet. If you have a wave where you just manipulate red here, and a wave that manipulates gray there (where red=green=blue at all pixels), then how do I combine the red component with the gray component in some reasonable way? I’ve tried a few ways already. I’ve thought about adding another task-specific language, just to let the students specify the mapping. Of course, these are really simple programming models (no variables, no user-defined functions), so the notional machines are really simple, too. As much as possible, the notional machine is the context itself — math, or math+graphics. When does learning this notional machine help you learn other notional machines later? And what have you learned if you learn those? Does task-specific programming help you learn more within the task domain? I hope that learning the matrix notional machine for image filters helps you with matrix manipulation later. Do students really learn precalculus from these prototypes? If you learn the notional machine for task-specific programming, does that help you learn other notional machines later? There still is a computational notional machine embedded in there, e.g., about controlling the computational agent, about order of execution, and so on. Does that knowledge transfer to other computational contexts? My student Katie Cunningham is studying the use of structure-behavior-function (SBF) models for understanding how students come to understand programs. (I defined SBF models here). In short, this theoretical framing helps us understand the relationships between students learning to read code, to write code, to trace code, and to explain code in plain English. Task-specific programming doesn’t fit the same way in that model. There is no writing of code. There is structure to the programs, but more of it is embedded in the environment than in the textual language. One of the insights from the participatory design sessions that we’ve had with teachers is that the environment is so much more powerful than the language. Consider the statement in my wave texture generator Set Gray to 4sin(5(x-3))+0. That does completely define the structure and transformation. However, the below picture is is so much more powerful and is what students really see — multiple, linked representations that explain that one line of code:  Behavior is complicated. As I said above, I want the behavior to be the notional machine of the mathematics. To trace the operation above, a student might plug in values for X to see what Y is generated, and check the plot and the wave to see if it makes sense. But it’s not like variable tracing. But the explain in plain English task of figuring out the function is still there. Check out this image filter program:  Readers who know Media Computation or graphics will likely recognize that as the program to compute the negation of an image. How do we help students to do that? How do we help students to see the program and figure out what it does at a macroscopic level? I built tools into the wave texture builder to make it possible to see the role of each wave in the overall texture, but if you were to describe a texture as a “tightly-woven red and green plaid,” I’m not sure how you’d get that purpose/function from the definition of the waves The problem of figuring out the function is pretty much the same in task-specific programming. So this is the end of the series. I’ve described two prototypes for task-specific programming in precalculus (matrix transformations and wave functions), and explored the implications of task-specific programming for research about programming, in education, and in relation to computing education research (this post). I did these as blog posts, in part, because I’m not yet sure where I might publish and fund this work. I’m seeing more clearly the point that Greg Nelson and Amy Ko talked about at ICER last year (see paper here). This is design-first work. It’s hard to find a home for that. I’d appreciate your advice. Where is there a research community that’s concerned about these kinds of things? Where should I be publishing this work? Where should I be looking for funding? "
"99","2019-03-02","2023-03-24","https://computinged.wordpress.com/2019/03/02/a-crowdsourced-blog-post-about-my-sigcse-keynote-computing-education-as-a-foundation-for-21st-century-literacy/","I had an unusual (and lazy) idea for my SIGCSE Keynote. I didn’t have the time or energy to write a blog post. How about if I asked everyone to tweet my talk, and I’ll just copy-paste them together? I got a response — too large of a response. There were well over 1000 tweets! I couldn’t review all of them. I selected a set that covered the key points in the talk, grouped around topics/order in the talk. All the slides are available on Slideshare.net here. A complete “live blogging” account is here. Mark @Guzdial receiving his @SIGCSE_TS award from Judy Sheard #SIGCSE2019 pic.twitter.com/ITwcNcOM7O — Shuchi Grover (@shuchig) March 1, 2019  Love that @guzdial uses the Perlis, Newell, and Simon def of CS: ""The study of computers and all the phenomena that arise around them"" – I use that in #SCRIPT workshops for #CSforALL #sigcse2019 @SCSatCMU — Leigh Ann DeLyser (@lsudol) March 1, 2019  ""CS was invented to be a tool to be used to learn everything a STEM (or any other) student needs to know."" @guzdial going through the history of CS ed #SIGCSE2019 — Meg Ray (@teach_python) March 1, 2019  So many new things to read thanks to @guzdial #SIGCSE2019 pic.twitter.com/AYBQZEDIvn — Anne Leftwich (@anneleftwich) March 1, 2019  George E Forsythe was cited by Mark @guzdial as the person that coined the term #ComputerScience Here is an article by Donald Knuth outlining Forsythe's contributions: https://t.co/B02bhNHoLT #SIGCSE2019 #SIGCSE19 — Phill Conrad (@pconrad) March 1, 2019  Alan Perlis.. the father of the idea of computer science for all! #CSForAll #sigcse2019 #guzdialkeynote @guzdial pic.twitter.com/D1QD6BS8Jv — Shuchi Grover (@shuchig) March 1, 2019  Kay & Goldberg (1977) — a mindblowing article with powerful idea of computing in learning that @rdp_life gave to me to read .. the paper was cited in Grover & Pea (2013) #guzdialkeynote @guzdial @SIGCSE_TS #sigcse2019 — Shuchi Grover (@shuchig) March 1, 2019  ""Computing is the master simulator. "" @guzdial #SIGCSE2019 — Lisa Kaczmarczyk (@lisakaczmarczyk) March 1, 2019  Computing can be and effect the way the student sees everything else – @guzdial at #sigcse2019 pic.twitter.com/uSJFn6TNSu — Miles Berry FCCT (@mberry) March 1, 2019  This student was modeling the fall of a rock off a building with a mental for loop after learning physics though programming! #sigcse2019 pic.twitter.com/oZabhwXBNK — Katie Cunningham (@katieirenec) March 1, 2019  ""If we teach CS in other courses, can we teach enough?"" asks @guzdial – I like his analogy to visiting a foreign country: how much of the country's language do you need to know to get by? better to know more, but you don't need to be fully fluent to enjoy your time #SIGCSE2019 — Mine CetinkayaRundel (@minebocek) March 1, 2019  Mention of @swcarpentry and @gvwilson by @guzdial in his #SIGCSE2019 keynote, pointing out that there are many more end-user programmers than professional programmers — Neil Brown (@neilccbrown) March 1, 2019  It was! Ha! — Neil Brown (@neilccbrown) March 1, 2019  Love how @guzdial summarized #CSforIN @ECEP_CS helped us develop and find out how many Indiana students were taking CS #SIGCSE2019 get the full landscape report here: https://t.co/rkM2ytmrII pic.twitter.com/SyTRPa1JcX — Anne Leftwich (@anneleftwich) March 1, 2019  We are really really gender imbalanced. Oh yeah. My classroom is 99% males sadly. @guzdial @SIGCSE_TS #SIGCSE2019 pic.twitter.com/9NRiVYLUDW — R G (@rgrasser22) March 1, 2019  CS AP is one the most male dominated AP exams….by a lot. @guzdial @ericson_barbara #SIGCSE2019 pic.twitter.com/xlJDfozYUb — Josh Weese (@weeserj13) March 1, 2019  Just a little context courtesy of @guzdial #SIGCSE2019 #CSforALL pic.twitter.com/yRQ16sRNHS — Meg Ray (@teach_python) March 1, 2019  Shout out from @guzdial during the keynote to programs successfully using #computing to help students learn other subjects better – @Bootstrapworld and more. Adding that in South Africa using @OracleAcademy found students’ maths scores improved as a result. #SIGCSE2019 pic.twitter.com/cynKRyLAkT — Alison Derbenwick (@aderbenwick) March 1, 2019  Overlaps between Computational thinking and engineering thinking.—@guzdial #guzdialkeynote #sigcse2019 @sigcse2019 pic.twitter.com/sgjYGEnJCI — Shuchi Grover (@shuchig) March 1, 2019  Computing is a way for computational, engineering, scientific, historical, and other forms of thinking. @guzdial #SIGCSE2019 pic.twitter.com/kEOh3sSUkk — Josh Weese (@weeserj13) March 1, 2019  ""There is incredible learning power in even a small subset of programming."" –@guzdial #SIGCSE2019 — Katie Cunningham (@katieirenec) March 1, 2019  @guzdial details learning programming. This isn’t just K8 for programming (@KatietheCurious et al). This is learning in all CS. Most Scratch projects are stories (@katyaskit & Fields). #SIGCSE2019 pic.twitter.com/dRIorNWPkt — Anne Leftwich (@anneleftwich) March 1, 2019  How can programming help people learn other topics better? –@guzdial #sigcse2019 @Bootstrapworld cited as one great example — Katie Cunningham (@katieirenec) March 1, 2019  Love @guzdial demos digitizing sound with harmonicas and ukulele #ofcourse #SIGCSE2019 #myfavoritecsprofessor pic.twitter.com/OmxwgtVl5I — Anne Leftwich (@anneleftwich) March 1, 2019  Now @guzdial is using @gpblocks in his #SIGCSE2019 keynote (cc @moenig) to display real-time visualisation of sound waves and fourier transform as an example of aiding learning via programming. He has a harmonica, and his ukulele is presumably hidden behind the podium… — Neil Brown (@neilccbrown) March 1, 2019  Musical etch-a-sketch at @guzdial keynote (not to mention live music performance!) #SIGCSE2019 pic.twitter.com/4CVJWNlbBy — Miranda Parker (@parkermiranda) March 1, 2019  the money shot — @guzdial demoing computational transformations of audio with his uke! #SIGCSE2019 pic.twitter.com/FSKmGuEx2r — andrea forte (@andicat) March 1, 2019  Visualized ukelele and harmonica solo by @guzdial pic.twitter.com/kiReRmny0d — Josh Weese (@weeserj13) March 1, 2019  ""Make a prediction"". Then, ""look at your thumb!""#SIGCSE2019 pic.twitter.com/Rgb6oQe6Ap — Katie Cunningham (@katieirenec) March 1, 2019  ""Computing is the 21st century literacy, because we can use it to learn everything else"" @guzdial #SIGCSE2019 pic.twitter.com/5pNH8dUCbD — Engaging Learning Lab – University of Florida (@EngLearnLab_UF) March 1, 2019  Make students make a prediction first, they'll remember it more @guzdial #SIGCSE2019 — Miranda Parker (@parkermiranda) March 1, 2019  You don't have to write code and program to learn from code. @guzdial #SIGCSE2019 — Miranda Parker (@parkermiranda) March 1, 2019  If we want to get computing education to everyone, we need to increase our efficiency in teaching it – @guzdial #SIGCSE2019 — Katie Cunningham (@katieirenec) March 1, 2019  The secret sauce: research-proven ways to improving #computing education *and learning* according to @guzdial. #SIGCSE2019 pic.twitter.com/5v1u6NxLM5 — Alison Derbenwick (@aderbenwick) March 1, 2019  I had several requests for the code I ran in the demo in JES (which is available here): The sound visualization GP project is here. You can get GP at http://gpblocks.org. ""We need to find what makes the great ideas of computing accessible"" @guzdial #SIGCSE2019 pic.twitter.com/9Noa4Qbr2x — Engaging Learning Lab – University of Florida (@EngLearnLab_UF) March 1, 2019  There's a lot of programming paradigms we haven't tried yet in K-12. What about theorem solvers, logic programming, etc? We need to grow and mutate, and not just use technologies that work for software engineers. – @guzdial #SIGCSE2019 — Katie Cunningham (@katieirenec) March 1, 2019  We aren’t going to have sustainable CS education anywhere in the world without having preservice teachers learning to teach computer science. @guzdial #SIGCSE2019 #CSforALL — Diane Levitt (@diane_levitt) March 1, 2019  @misrael09 called out by @guzdial for her research on including students with disabilities in #CSforALL at #SIGCSE2019 keynote pic.twitter.com/Bda2aNTqPf — Meg Ray (@teach_python) March 1, 2019  Mark @guzdial during Q&A: Q: Should every college student take CS0? A: No. I agree with Perlis: every student should take some programming. Not the same course the future software developers are going to take. A course that makes sense to them.#SIGCSE2019 #SIGCSE19 — Phill Conrad (@pconrad) March 1, 2019  If all university graduates knew something about programming, we create a literate culture, and that will make future young people want to learn programming. And, all pre-service teachers would know something about programming! –@guzdial #SIGCSE2019 — Katie Cunningham (@katieirenec) March 1, 2019  Ok this is food for thought: @guzdial believes every UG student needs to know programming, but not CS. “This is how we create a computational culture. If you want CS in elementary schools, start with the university.” #SIGCSE2019 #CSforALL pic.twitter.com/tjqJunzSnc — Diane Levitt (@diane_levitt) March 1, 2019  We go to teachers and say ‘here’s the tool’, it’s very rare for us to go to then and ask ‘what do you want in a tool?’ – @guzdial at #SIGCSE2019 — Miles Berry FCCT (@mberry) March 1, 2019  CS ""in their own language, in their own terms""– @guzdial #SIGCSE2019 A statement that goes beyond the immediate context of integration into school disciplines. What would CSed look like on people's own terms and in their own languages? #translanguaging — Sara Vogel (@saraevogel) March 1, 2019  Awesome quote from @guzdial : “I would like to use computing to help you with your problems- what problems have you got?” #SIGCSE2019 — Jennifer Kay (@jenniferskay) March 1, 2019  ""Math concepts do not have to be abstract, we can use computing to make them more concrete."" @guzdial @SIGCSE_TS #sigcse2019 — John Dougherty (@jdcshaverford) March 1, 2019  Mark @guzdial gesticulating during his #SIGCSE2019 keynote #manygestures #guzdialkeynote @SIGCSE_TS (with his ukulele that’s never very far away) pic.twitter.com/0dQNKdpnya — Shuchi Grover (@shuchig) March 1, 2019  Draw on research in science education and maths education to move cs education forward + we need more people in schools of education @guzdial at #SIGCSE2019 – agree 100% on both points!! — Sue Sentance (@suesentance) March 1, 2019 "
"100","2020-02-21","2023-03-24","https://computinged.wordpress.com/2020/02/21/call-for-participation-at-the-2nd-excited-summer-school-on-research-in-computing-education/","Sharing a note from Birgit Rognebakke Krogstie: Call for participation at the 2nd Excited Summer School on Research in Computing Education We are happy to announce the second Excited Summer School on Research in Computing Education, which will take place 8-12 June 2020 at NTNU campus Gløshaugen in Trondheim, Norway. The school is intended for PhD students and post docs. There will be varied sessions led by experts in the computing education field, combining presentations with discussion and hands-on groupwork. Topics range from how to teach beginner-level programming courses to the inclusion of environmental sustainability in IT education. The school is a great arena for network building and informal discussion with fellow students as well as with the invited experts. For more information, see our web site: https://www.ntnu.edu/excited/call-for-participants-excited-summer-school-2020. Application deadline: 10 March 2020."
"101","2020-02-03","2023-03-24","https://computinged.wordpress.com/2020/02/03/learning-the-craft-of-cs-education-recommending-the-cs-ed-podcast/","I’ve just finished listening to the first three episodes of the new podcast on CS Education from Dr. Kristin Stephens-Martinez (click here for the podcast homepage). If you teach computer science, I highly recommend it to you. It’s not about CS education per se, except in the sense that research often informs the education topics being discussed. Rather, it’s a nuts-and-bolts discussion of issues relevant to the craft of being a CS educator. Kristin is terrific as the interviewer on the podcast. She plays all of us — teaching CS, looking for tips, trying to get what she can from these experts. I’m going to show up later in the series. I don’t know remember what I said! I hope that Kristin is kind to me in the post-production phase, because I don’t think I’m typically as grounded and offering concrete advise as these first three were. I’ll find out in the next few weeks. TL;DR: If you teach CS, go listen to the CS-Ed podcast. You’ll get something useful out of it that’s worth your time."
"102","2019-09-02","2023-03-24","https://computinged.wordpress.com/2019/09/02/how-the-cheesecake-factory-is-like-healthcare-and-cs-education/","Stephen Dubner of the Freakonomics Podcast did an interview with Atul Gawande, author of the Checklist Manifesto. Atul is a proponent of a methodical process — from a behavioral economist perspective, not from an optimization perspective. People make mistakes, and if we’re methodical (like the use of checklists), we’re less likely to make those mistakes. If we can turn our process into a “recipe,” then we will make fewer mistakes and have more reliable results. Here’s a segment of the interview where he argues for that process in healthcare. DUBNER: Okay, what’s the difference between a typical healthcare system and say, a restaurant chain like the Cheesecake Factory? GAWANDE: You’re referring to the article I wrote about the Cheesecake Factory…Basically what I was talking about was the idea that, here’s this restaurant chain. And yes, it’s highly caloric, but the Cheesecake Factorys here have as much business as a medium-sized hospital — $100 million in business a year. And they would cook to order every meal people had. And in order to make that happen, they have to run a whole process that they have real cooks, but then they have managers. I was talking to one of the managers there about how he would make healthcare work. And his answer was, “Here’s what I would do, but of course you guys do this. I would look to see what the best people are doing. I would find a way to turn that into a recipe, make sure everybody else is doing it, and then see how far we improve and try learning again from that.” He said, “You do that, right?” And we don’t. We don’t do that. Here’s where Gawande’s approach ties to education. Later in the interview: DUBNER: And do you ever in the middle of, let’s say, a surgery think about, “Oh, here’s what I will be writing about this day?” GAWANDE: You know, I don’t really; I’m in the flow. One of the things that I love about surgery is: it is, I have to confess, the least stressful thing I do, because at this point I’ve done thousands of the operations I do. Ninety-seven to 98 percent go pretty much as expected, and the 2 percent that don’t, I know the 10 different ways that are most common that they’ll go wrong and I have approaches to it. So it’s kind of freeing in a certain way. I think about teaching like this. I have been teaching computing since 1980. I actively seek out new teaching methods. Teaching CS is fun for me — because I know lots of ways to do it, I have choices which keeps it interesting. I have mentioned the fascinating work on measuring teacher PCK (Pedagogical Content Knowledge) by checking how accurately teachers can predict how students will get exam questions wrong. I know lots of ways students can get computer science wrong. I still get surprises, but because I’m familiar with how students can get things wrong, I have a starting place for supporting students in constructing stronger conceptions. We can teach this. The model of expertise that Gawande describes is achievable for CS teachers. We can teach new CS teachers methods that they can choose from. We can teach them common student mental models of programming, how to diagnose weaker understandings, and ways to help them improve their mental models. We can make a checklist of what a CS teacher needs to know and be able to do."
"103","2013-05-13","2023-03-24","https://computinged.wordpress.com/2013/05/13/the-critical-part-of-pck-what-students-get-wrong/","I’ve written before about computer science pedagogical content knowledge (PCK). Phil Sadler and his colleagues just published a wonderful study about the value of PCK. He found that science teachers need to know science, but the most effective science teachers also know what students get wrong — their misconceptions, what the learning difficulties are, and what are the symptoms of misunderstandings. I got a chance to ask him about this paper, and he said one of the implications of the work that he sees is that he offers a way to measure PCK, and measuring something important about teaching is hard and useful. For the study described in their paper, Sadler and his colleagues asked teachers to answer each question twice, once to give the scientifically correct answer, and the second time to predict which wrong answer their students were likeliest to choose. Students were then given the tests three times throughout the year to determine whether their knowledge improved. The results showed that students’ scores showed the most improvement when teachers were able to predict their students’ wrong answers. “Nobody has quite used test questions before in this way,” Sadler said. “What I had noticed, even before we did this study, was that the most amazing science teachers actually know what their students’ wrong ideas are. It occurred to us that there might be a way to measure this kind of teacher knowledge easily without needing to spend long periods of time observing teachers in their classrooms.” via Understanding student weaknesses | Harvard Gazette."
"104","2020-02-24","2023-03-24","https://computinged.wordpress.com/2020/02/24/bdsi-a-new-validated-assessment-for-basic-data-structures-guest-blog-post-from-leo-porter-and-colleagues/","Leo Porter, Michael Clancy, Cynthia Lee, Soohyun Nam Liao, Cynthia Taylor, Kevin C. Webb, and Daniel Zingaro have developed a new concept inventory that they are making available to instructors and researchers. They have written this guest blog post to describe their new instrument and explain why you should use it. I’m grateful for their contribution! We recently published a Concept Inventory for Basic Data Structures at ICER 2019 [1] and hope it will be of use to you in your classes and/or research. The BDSI is a validated instrument to measure student knowledge of Basic Data Structure Concepts [1]. To validate the BDSI, we engaged faculty at a diverse set of institutions to decide on topics, help with question design, and ensure the questions are valued by instructors. We also conducted over one hundred interviews with students in order to identify common misconceptions and to ensure students properly interpret the questions. Lastly, we ran pilots of the instrument at seven different institutions and performed a statistical evaluation of the instrument to ensure the questions are properly interpreted and discriminate between students’ abilities well. What Our Assessment Measures The BDSI measures student performance on Basic Data Structure concepts commonly found in a CS2 course. To arrive at the topics and content of the exam, we worked with fifteen faculty at thirteen different institutions to ensure broad applicability. The resulting topics on the CI include: Interfaces, Array-Based Lists, Linked-Lists, and Binary Search Trees. If you are curious about the learning goals or want more details on the process we used in arriving at these goals, please see our SIGCSE 2018 publication [2]. Why Validated Assessments are Great for Instructors Suppose you want to know how well your students understand various topics in your CS2 course. How could you figure out how much your students are learning relative to other schools? You could, perhaps, get a final exam from another school and use it in your class to compare results, but invariably, the final exam may not be a good fit. Moreover, you may find flaws in some of the questions and wonder if students interpret them properly. Instead, you can use a validated assessment. The advantage of using a validated assessment is there is general agreement that it is measuring what you want to measure and it accurately measures student thinking. As such, you can compare your findings to results from other schools who have used the instrument to determine if your students are learning particular topics better or worse than cohorts and similar institutions. Why Validated Assessments are Great for Researchers As CS researchers, we often experiment with new ways to teach courses. For example, many people use Media Computation or Peer Instruction (PI), two complementary pedagogical approaches developed over the past several decades. It’s important to establish whether these changes are helping our students. Do more students pass? Do fewer students withdraw? Do more students continue studying CS? Does it boost outcomes for under-represented groups? Answering these questions using a variety of courses can give us insight into whether what we do corresponds with our expectations. One important question is: using our new approach, do students learn more than before? Unfortunately, answering this is complicated by the lack of standardized, validated assessments. If students score 5% higher on an exam when studying with PI vs. not studying with PI, all we know is that PI students did better on that exam. But exams are designed by one instructor, for one course at one institution, not for the purposes of cross-institution, cross-cohort comparisons. They are not validated. They do not take into account the perspectives of other CS experts. When students answer a question on an exam correctly, we assume that it’s because they know the material; when they answer incorrectly, we assume it’s because they don’t know the material. But we don’t know: maybe the exam contains incidental cues that subtly influence how students respond. A Concept Inventory (CI) solves these problems. Its rigorous design process leads to an assessment that can be used across schools and cohorts, and can be used to validly compare teaching approaches. How to Obtain the BDSI The BDSI is available via the google group. If you’re interested in using it, please join the group and add a post with your name, institution, and how you plan to use the BDSI. How to Use the BDSI The BDSI is designed to be given as a post-test after students have completed the covered material. Because the BDSI was validated as a full instrument, it is important to use the entire assessment, and not alter or remove any of the questions. We ask that instructors not make copies of the assessment available to students after giving the BDSI, to try to avoid the questions becoming public. We likewise recommend giving participation credit, but not correctness credit, to students for taking the BDSI, to avoid incentivizing cheating. We have found giving the BDSI as part of a final review session, collecting the assessment from students, and then going over the answers to be a successful methodology for having students take it. Want to Learn More? If you’re interested in learning more about how to build a CI, please come to our talk at SIGCSE 2020 (from 3:45-4:10pm on Thursday, March 12th) or read our paper [3]. If you are interested in learning more about how to use validated assessments, please come to our Birds of a Feather session on “Using Validated Assessments to Learn About Your Students” at SIGCSE 2020 (5:30-6:20pm on Thursday, March 12th) or our tutorial on using the BDSI at CCSC-SW 2020 (March 20-21). [1] Leo Porter, Daniel Zingaro, Soohyun Nam Liao, Cynthia Taylor, Kevin C. Webb, Cynthia Lee, and Michael Clancy. 2019. BDSI: A Validated Concept Inventory for Basic Data Structures. In Proceedings of the 2019 ACM Conference on International Computing Education Research (ICER ’19). [2] Leo Porter, Daniel Zingaro, Cynthia Lee, Cynthia Taylor, Kevin C. Webb, and Michael Clancy. 2018. Developing Course-Level Learning Goals for Basic Data Structures in CS2. In Proceedings of the 49th ACM Technical Symposium on Computer Science Education (SIGCSE ’18). [3] Cynthia Taylor, Michael Clancy, Kevin C. Webb, Daniel Zingaro, Cynthia Lee, and Leo Porter. 2020. The Practical Details of Building a CS Concept Inventory. In Proceedings of the 51st ACM Technical Symposium on Computer Science Education (SIGCSE ’20)."
"105","2020-01-27","2023-03-24","https://computinged.wordpress.com/2020/01/27/thorndike-won-dewey-lost-the-most-important-thing-to-know-about-the-us-education-system/","One cannot understand the history of education in the United States during the twentieth century unless one realizes that Edward L. Thorndike won and John Dewey lost. — Ellen Condliffe Lagemann I mentioned that “Thorndike won and Dewey lost” on Twitter a couple months ago. I realized that some education researchers didn’t know this story. I first learned about it in Lagemann’s intriguing book, An Elusive Science. Lagemann explains that Dewey was the pioneer at Chicago and Columbia, and recruited faculty and administrators that supported his perspective. But Thorndike came later and replaced those faculty. Unlike Dewey, Thorndike favored the separation of philosophy and psychology. Despite considerable disdain for educators and an extremely imperialistic view of psychology, which he thought supreme for studying and controlling human affairs, Thorndike formulated ideas that were more suited to translation into formulas for educational practice. A conservative person whose prose was clear, to the point, humorless, and colorless, Thorndike was about as different from Dewey as two men could be. (p. 56-57) Five years after Dewey left Chicago, Charles Hubbard Judd took his place. While Judd and Thorndike were rivals, they had similar views about the role and definition of school. Over the years, Judd also recruited a faculty that was as supportive of his views as the Dewey group had been supportive of the views of their chief. (p. 68) Although both thought experimentation was necessary in education, Dewey saw the school as the laboratory of education, whereas Judd saw the school as primarily the place for the implementation of real laboratory findings…Whereas Dewey saw teachers and researchers as more alike than different, wanting both to be skilled students of education, Judd believed that the improvement of education required the professionalization of education, which, in turn, necessitated tha teachers and researchers fulfill distinct roles. (69-70) Audrey Watters has written a great blog post about the tension: Ed-tech has always been more Thorndike than Dewey because education has been more Thorndike than Dewey. That means more instructivism than constructionism. That means more multiple choice tests than projects. That means more surveillance than justice. If you do Web searches on “Thorndike won. Dewey lost,” you’ll find many relevant essays and papers. Dewey (wikipedia page) believed in educating the student, meeting them where they were, and helping them to develop in their community through teacher-driven innovations in the classroom. Thorndike (wikipedia page) was about administrative systems: grades, teacher requirements and credentialing, preparing students for vocations, testing (Thorndike is best known in psychology for his work on measurement), and teachers implementing what researchers invent. The US education system favors the latter. I like David Labaree’s paper “How Dewey Lost: The Victory of David Snedden and Social Efficiency in the Reform of American Education” which summarizes why Thorndike won. The pedagogically progressive vision of education — child-centered, inquiry based, and personally engaging — is a hothouse flower trying to survive in the stony environment of public education. It won’t thrive unless conditions are ideal, since, among other things, it requires committed, creative, energetic, and highly educated teachers, who are willing and able to construct education to order for students in the classroom; and it requires broad public and fiscal support for education as an investment in students rather than an investment in economic productivity. But the administrative progressive vision of education — as a prudent investment in a socially efficient future — is a weed. It will grow almost anywhere. When I look at computing education interventions, I see a lot informed by Dewey. Caring teachers, researchers working in partnership with practitioners (RPPs), and developers want students to engage and learn. That’s great, and as Audrey Watters has suggested, technology may be a way of making Dewey’s vision work in US classrooms today. But there’s likely a reason why Thorndike won. It wasn’t luck. The US school system is built following Thorndike’s vision because his vision was more in concert with US values. I’m not an expert on how US values have driven the US education system, but I can guess at some of the factors. The US system is driven by the promise of compulsory education for all, a belief in rugged individualism, and the value for a capitalistic society. Few students get access to computing education today (as I described in this blog post). The biggest barrier is that we’re too busy and resource-limited providing all the students the classes they need to meet current school requirements. See the principal in Miranda Parker’s dissertation who chooses to keep choir (which helps many students to get the credits they need to graduate) over CS (which only a few students might take). See the education faculty I talked about in my recent CACM blog, who are far too busy meeting state requirements for mathematics and science teachers to fit in CS which isn’t required to be taught pre-service. CS is something new that only a few students get excited about— that might be something Dewey would like since he values individuals finding their interests, but not Thorndike who values the education as a system for everybody. The lesson is that if we want to get computing education in front of US students, we need to figure out how to make it work within Thorndike’s system. We have to be efficient. We have to do it with few resources. We have to fit into existing models. Alternatively, we can try to move the US education system into a more Dewey-like model — but we have to realize how big a shift that is. Thorndike won almost 100 years ago. The US education system has a century of ingrained views that align with Thorndike. I wish I could argue for a more progressive view, but in the end: Thorndike won. Dewey lost."
"106","2019-12-16","2023-03-24","https://computinged.wordpress.com/2019/12/16/why-dont-high-schools-teach-cs-its-the-lack-of-teachers-but-its-way-more-than-that/","Back in October, I posted here about Miranda Parker’s defense. Back then, I tried to summarize all of Miranda’s work as a doctoral student in one sentence: Readers of this blog will know Miranda from her guest blog post on the Google-Gallup polls, her development of SCS1 as a replication of a multi-lingual and validated measure of CS1 knowledge, the study she did of teacher-student differences in using ebooks, and her work exploring the role of spatial reasoning to relate SES and CS performance (work that was part of her dissertation study). That was a seriously run-on sentence for an impressive body of work. On Friday, December 13, I had the great honor of placing an academic hood on Dr. Parker*. I haven’t really talked too much about Miranda’s dissertation findings yet. I really want to, but I also don’t want to steal the thunder from her future publications. So, with her permission, I’m going to just summarize some of my favorite parts. First, Miranda built several regression models to explain Georgia high schools teaching computer science in 2016. I predicted way back at her proposal that the biggest factor would be wealth — wealthy schools would teach CS and poorer schools wouldn’t. I was wrong. Yes, that’s a statistically significant factor, but it doesn’t explain much. The biggest factor is…teaching computer science in 2015. Schools that taught CS in 2015 were many times more likely to be teaching in 2016. Schools have to get started! Hadi Partovi made this argument to me once, that getting started in schools was the biggest part of the battle. Miranda’s model supports his argument. There’s much more to the story, but that’s the biggest takeaway for me on the quantitative analysis. But her model only explains a bit over 50% of the variance. What explains the rest? We figured that there would be many different factors. To make it manageable, Miranda chose just four high schools to study as case studies where she did multiple interviews. All four of the schools were predicted by her best model to teach computer science, but none of the did. Yes, as you’d expect, access to a teacher is the biggest factor, but it’s not as simple as just deciding to hire a CS teacher or train an existing teacher to teach CS. For example, one principal laid out for Miranda who could teach CS and who would take their class, and how to fill that gap in the schedule, and so on. In the end, he had a choice of offering choir or offering CS. There were students in choir. CS was a gamble. It wasn’t even a hard decision for that principal. Here is the story that most surprised me. At two of the schools Miranda studied, they teach lots of cyber security classes, but no computer science. As you would expect, there was a good bit of CS content in the cybersecurity classes. They had the teachers. Why not then teach CS, too? Because both of these schools were near Fort Gordon which has a huge cybersecurity district. Cybersecurity is a community value. It’s a sure thing when it comes to getting a job. What’s “computer science” in comparison? In my opinion, there is nothing like Miranda’s study in the whole world. There are the terrific Roehampton reports that give us a quantitative picture about CS in all of England. There are great qualitative studies like Stuck in the Shallow End that tell us what’s going on in high schools. Miranda did both and connected them — the large scale quantitative analysis, and then used that to pick four interesting high schools to dig into for qualitative analysis. It’s a story specific to Georgia, and each US state is going to be a different story. But it’s a whole state, the right level of analysis in the US. It’s a fascinating story, and I’m proud that she pulled it off. Keep an eye out for her publications about this work over the next couple years. * By the way, Dr. Parker is currently on the academic job market. "
"107","2020-03-30","2023-03-24","https://computinged.wordpress.com/2020/03/30/so-much-to-learn-about-emergency-remote-teaching-but-so-little-to-claim-about-online-learning/","The Chronicle of Higher Education published an article by Jonathan Zimmerman on March 10 arguing that we should use the dramatic shift to online classes due to Covid-19 pandemic as an opportunity to research online learning (see article here). For the first time, entire student bodies have been compelled to take all of their classes online. So we can examine how they perform in these courses compared to the face-to-face kind, without worrying about the bias of self-selection. It might be hard to get good data if the online instruction only lasts a few weeks. But at institutions that have moved to online-only for the rest of the semester, we should be able to measure how much students learn in that medium compared to the face-to-face instruction they received earlier. To be sure, the abrupt and rushed shift to a new format might not make these courses representative of online instruction as a whole. And we also have to remember that many faculty members will be teaching online for the first time, so they’ll probably be less skilled than professors who have more experience with the medium. But these are the kinds of problems that a good social scientist can solve. I strongly disagree with Zimmerman’s argument. There is a lot to study here. There is little to claim about online learning. What we are doing right now is not even close to best practice for online learning. I recommend John Daniels’ book Mega-Universities (Amazon link). One of his analyses is a contrast with online learning structured as “correspondence school” (e.g., send out high-quality materials, require student work, provide structured feedback) or as a “remote classroom” (e.g., video record lectures, replicate in-classroom structures). Remote classrooms tend to have lower-retention and increase costs as the number of students scale. Correspondence school models are expensive (in money and time) to produce, but scales well and has low cost for large numbers. What we’re doing is much closer to remote classrooms than correspondence school. Experience with MOOCs supports this analysis. Doing it well takes time and is expensive, and is carefully-structured. It’s not thrown together with less than a week’s notice. My first thought when I read Zimmerman’s essay was for the ethics of any experiment comparing to the enforced move to online classes versus face-to-face classe. Students and faculty did not choose to be part of this study. They are being forced into online classes. How can we possibly compare face-to-face classes that have been carefully designed, with hastily-assembled online versions that nobody wants at a time when the world is suffering a crisis. This isn’t a fair nor ethical comparison. Ian Milligan recommends that we change our language to avoid these kinds of comparisons, and I agree. He writes (see link here) that we should stop calling this “online learning” and instead call it “emergency remote teaching.” Nobody would compare “business as usual” to an “emergency response” in terms of learning outcomes, efficiency, student satisfaction, and development of confidence and self-efficacy. On the other hand, I do hope that education researchers, e.g., ethnographers, are tracking what happens. This is first-ever event, to move classes online with little notice. We should watch what happens. We should track, reflect, and learn about the experience. But we shouldn’t make claims about online learning. There is no experiment here. There is a crisis, and we are all trying to do our best under the circumstances. "
"108","2018-03-30","2023-03-24","https://computinged.wordpress.com/2018/03/30/how-to-study-for-a-cs-exam/","I just recently finished Make It Stick (Amazon link) which takes modern learning science and develops recommendations to learners on how to study in order to learn most effectively. As I read it, I was wondering, “What are the implications for how students should study for a computer science exam or quiz?” I did a Web search for “computer science study skills,” and the results were disappointing. Most of the recommendations are wrong (e.g., “take good notes” and “highlight passages in the book”) and were not specific to learning computer science. So, I wrote up some recommendations for my students. I have not tried to generalize these yet (but would be fun and useful to do so), and I haven’t gone back through Making it Stick to mine it for all the CS recommendations that one might invent from their lessons. Caveat: these are “evidence-based” as in the learning sciences behind them is pretty solid, but they are not “evidence-based” in the sense of actually testing these practices with learning CS. We know that some learning sciences or educational psychology results from other fields don’t map cleanly to CS (see Briana’s work). I don’t know of research evaluating study practices for learners studying computer science — but it would be great to have some! I’d be interested to hear how you help your students study computer science! Please do share your ideas and recommendations in the comments. Here are my suggestions for how to study for Monday’s quiz (with some advice that is useful for all your other CS quizzes). If you haven’t read the relevant chapters, do read them. If you have already, I don’t suggest re-reading them. There are better ways to study than re-reading. The Collage Project (and all your other homework) is good preparation for Monday’s Quiz. Finish that up this weekend, and you’ll have reviewed many of the ideas needed for Monday’s Quiz. Go over your homework assignments and past quizzes, and make sure that you now know everything you got wrong in the past. The best way to study is always by quizzing yourself. You’ll learn far more from quizzing yourself than from re-reading or reviewing your notes. Use the problems at the back of the chapter. Get with others in the class and challenge each other by inventing variations on programming problems you have seen before: At the beginning of each chapter is a list of Learning Objectives — media learning goals and CS learning goals. Write a sentence or two demonstrating that you have learned those objectives. Explain what the goal means, and show that you have achieved those goals. Elaboration helps you to connect ideas so that it’s easier to remember those ideas later. At the end of each chapter is the Programming Summary that lists the new programming ideas (new functions, new control structures) in that chapter. Make sure that you can use each of those. Just write a program, any program that uses each function at least once. In this class, you know more that one way of doing things. Take any program that you have written before, or that we have done in class, and rewrite it another way. This is both a form of elaboration and a form of quizzing. Ask on Piazza. Ask your friends. Come to office hours. When studying, all collaboration is strongly encouraged. Just talking through things (both what you understand and what you do not understand) with anyone will help you learn. Explain your programs to someone else. Summarizing your programs in English is a great way to make sure you understand the programs and to elaborate on your knowledge."
"109","2016-12-16","2023-03-24","https://computinged.wordpress.com/2016/12/16/graduating-dr-briana-morrison-posing-new-puzzles-for-computing-education-research/","I am posting this on the day that I am honored to “hood” Dr. Briana Morrison. “Hooding” is where doctoral candidates are given their academic regalia indicating their doctorate degree. It’s one of those ancient parts of academia that I find really cool. I like the way that the Wikiversity describes it: “The Hooding Ceremony is symbolic of passing the guard from one generation of doctors to the next generation of doctors.” I’ve written about Briana’s work a lot over the years here: But what I find most interesting about Briana’s dissertation work were the things that didn’t work: These kinds of results are so cool to me, because they point out what we don’t know about computing education yet. The prior results and theory were really clear. The study was well-designed and vetted by her committee. The results were contrary to what we expected. WHAT HAPPENED?!? It’s for the next group of researchers to try to figure out. The most interesting result of that kind in Briana’s dissertation is one that I’ve written about before, but I’d like to pull it all together here because I think that there are some interesting implications of it. To me, this is a Rainfall Problem kind of question. Here’s the experimental set-up. We’ve got six groups.  In the GENERATE condition, the participants get blanks, to encourage them to abstract for themselves. Typically, we’d expect (for research in other parts of STEM with subgoal labels) that GENERATE would lead to more learning than GIVEN labels, but it’s harder. We might get cognitive overload. In general, GIVEN labels beats out no labels. No problem — that’s what we expect given all the past work on subgoal labels. But when we consider all six groups, we get this picture.  Why would having the same context do worse with GIVEN labels than no labels? Why would the same context do much better with GENERATE labels, but worse when it’s different contexts? So, Briana, Lauren, and Adrienne Decker replicated the experiment with Adrienne’s students at RIT (ICER 2016). And they found:  The same strange “W” pattern, where we have this odd interaction between context and GIVEN vs. GENERATE that we just don’t have an explanation for. But here’s the really intriguing part: they also did the experiment with second semester students at RIT. All the weird interactions disappeared! Same context beat different context. GIVEN labels beat GENERATE labels. No labels do the worst. When students get enough experience, they figure things out and behave like students in other parts of STEM. The puzzle for the community is WHY. Briana has a hypothesis. Novice students don’t attend to the details that they need, unless you change the contexts. Without changing contexts, students even GIVEN labels don’t learn because they’re not paying enough attention. Changing contexts gets them to think, “What’s going on here?” GENERATE is just too hard for novices — the cognitive load of figuring out the code and generating labels is just overwhelming for students, so they do badly when we’d expect them to do better. Here we have a theory-conflicting result, that has been replicated in two different populations. It’s like the Rainfall Problem. Nobody expected the Rainfall Problem to be hard, but it was. More and more people tried it with their students, and still, it was hard. It took Kathi Fisler to figure out how to teach CS so that most students could succeed at the Rainfall Problem. What could we teach novice CS students so that they avoid the “W” pattern? Is it just time? Will all second semester students avoid the “W”? Dr. Morrison gave us a really interesting dissertation — some big wins, and some intriguing puzzles for the next researchers to wrestle with. Briana has now joined the computing education research group at U. Nebraska – Omaha, where I expect to see more great results."
"110","2015-11-11","2023-03-24","https://computinged.wordpress.com/2015/11/11/cognitive-load-as-a-significant-problem-in-learning-programming-briana-morrisons-dissertation-proposal/","Briana Morrison is defending her proposal today. One chapter of her work is based on her ICER 2015 paper that won the Chairs Award for best paper (see post here). Good luck, Briana! Title: Replicating Experiments from Educational Psychology to Develop Insights into Computing Education: Cognitive Load as a Significant Problem in Learning Programming Briana Morrison Ph.D. student Human Centered Computing College of Computing Georgia Institute of Technology Date: Wednesday, November 11, 2015 Time: 2 PM to 4 PM EDT Location: TSRB 223 Committee ————– Dr. Mark Guzdial, School of Interactive Computing (advisor) Dr. Betsy DiSalvo, School of Interactive Computing Dr. Wendy Newstetter, School of Interactive Computing Dr. Richard Catrambone, School of Psychology Dr. Beth Simon, Jacobs School of Engineering at University of California San Diego and Principal Teaching and Learning Specialist, Coursera Abstract ———– Students often find learning to program difficult. This may be because the concepts are inherently difficult due to the fact that the elements of learning to program are highly interconnected. Instructors may be able to lower the complexity of learning to program by designing instructional materials that use educational psychology principles. The overarching goal of this research is to gain more understanding and insight into the optimal conditions under which learning programming can be successful which is defined as students being able to apply their acquired knowledge and skills in new or familiar problem-solving situations. Cognitive load theory (CLT), and its associated effects, describe the role of the learner’s memory during the learning process. By minimizing undesirable loads within the instructional materials the learner’s memory can hold more relevant information, thereby improving the effectiveness of the learning process. This proposal uses cognitive load theory to improve learning in programming. First an instrument for measuring cognitive load components within introductory programming was developed and initially validated. We have explored reducing the cognitive load by changing the modality in which students receive the learning material. This had no effect on novices’ retention of knowledge or their ability to transfer knowledge. We then attempted to reduce the cognitive load by adding subgoal labels to the instructional material. This had some effect on the learning gains under some conditions. Students who learned using subgoal labels demonstrated higher learning gains than the other conditions on the programming assessment task. We also explored using a low cognitive load assessment task, a Parsons problem, to measure learning gains. This low cognitive load assessment task proved more sensitive than the open ended programming assessment tasks in capturing student learning. Students who were given subgoal labels regardless of context transfer condition out performed those in the other conditions. In my final, proposed study I change how we teach a programming construct through its format and content in order to reduce cognitive load. The changed construct is presumed to be a more natural cognitive fit for students based on previous research."
"111","2015-08-07","2023-03-24","https://computinged.wordpress.com/2015/08/07/icer-2015-preview-subgoal-labeling-works-for-text-too/","Briana Morrison is presenting the next stage of our work on subgoal labeled worked examples, with Lauren Margulieux. Their paper is “Subgoals, Context, and Worked Examples in Learning Computing Problem Solving.” As you may recall, Lauren did a terrific set of studies (presented at ICER 2012) showing how adding subgoal labels to videos of App Inventor worked examples had a huge effect on learning, retention, and transfer (see my blog post on this work here). Briana and Lauren are now teaming up to explore new directions in educational psychology space and new directions in computing education research. One of the important findings is that they replicated the earlier study, but now in a text-based language rather than a blocks-based language. On average, subgoal labels on worked examples improve performance over getting the same worked examples without subgoal labels. That’s the easy message. The rest of the results are much more puzzling. Being in the same context (e.g., seeing averaging test scores in the worked examples, then being asked to average test scores in the practice) did statiscally worse than having to shift contexts (e.g., from test scores to golf scores). Why might that be? Generating labels did seem to help performance. The Generate group had the highest attrition. That make sense, because increased complexity and cognitive load would predict that more participants would give up. But that drop-our rate makes it hard make strong claims. Now we’re comparing everyone in the other groups to only “those who gut it out” in the Generate group. The results are more suspect. There is more nuance and deeper explanations in Briana’s paper than I’m providing here. I find this paper exciting. We have an example here of well-established educational psychology principles not quite working as you might expect in computer science. I don’t think it puts the principles in question. It suggests to me that there may be some unique learning challenges in computer science, e.g., if the complexity of computer science is greater than in other studies, then it’s easier for us to reach cognitive overload. Briana’s line of research may help us to understand how learning computing is different from learning statistics or physics."
"112","2018-06-08","2023-03-24","https://computinged.wordpress.com/2018/06/08/a-generator-for-parsons-problems-on-latex-exams-and-quizzes/","I just finished teaching my Introduction to Media Computation a few weeks ago to over 200 students. After Barb finished her dissertation on Parsons problems this semester, I decided that I should include Parsons problems on my last quiz, on the final exam study guide, and on the final exam. Parsons problems are a great fit for this assessment task. We know that Parsons problems are a more sensitive measure of learning than code writing problems, they’re just as effective as code writing or code fixing problems for learning (so good for a study guide), and they take less time than code writing or fixing. Barb’s work used an interactive tool for providing adaptive Parsons problems. I needed to use paper for the quiz and final exam. There have been several Parsons problems paper-based implementation, and Barb guided me in developing mine. But I realized that there’s a challenge to doing a bunch of Parsons problems like this. Scrambling code is pretty easy, but what happens when you find that you got something wrong? The quiz, study guide, and final exam were all going to iterate several times as we developed them and tested them with the teaching assistants. How do I make sure that I always kept aligned the scrambled code and the right answer? I decided to build a gadget in LiveCode to do it.  I paste the correctly ordered code into the field on the left. When I press “Scramble,” a random ordering of the code appears (in a Verbatim LaTeX environment) along with the right answers, to be used in the LaTeX exam class. If you want to list a number of points to be associated with each correct line, you can put a number into the field above the solution field. If empty, no points will be explicitly allocated in the exam document. I’d then paste both of those fields into my LaTeX source document. (I usually also pasted in the original source code in the correct order, so that I could fix the code and re-run the scramble when I inevitably found that I did something wrong.)  The wording of the problem was significant. Barb coached me on the best practice. You allow students to write just the line number, but encourage them to write the whole line because the latter is going to be less cognitive load for them. Unscramble the code below that halves the frequency of the input sound. Put the code in the right order on the lines below. You may write the line numbers of the scrambled code in the right order, or you can write the lines themselves (or both). (If you include both, we will grade the code itself if there’s a mismatch.) The problem as the student sees it looks like this:  The exam class can also automatically generate a version of the exam with answers for used in grading. I didn’t solve any of the really hard problems in my script, like how do I deal with lines that could be put in any order. When I found that problem, I just edited the answer fields to list the acceptable options.  I am making the LiveCode source available here: http://bit.ly/scrambled-latex-src LiveCode generates executables very easily. I have generated Windows, MacOS, and Linux executables and put them in a (20 Mb, all three versions) zip here: http://bit.ly/scrambled-latex I used this generator probably 10-20 times in the last few weeks of the semester. I have been reflecting on this experience as an example of end-user programming. I’ll talk about that in the next blog post."
"113","2018-06-15","2023-03-24","https://computinged.wordpress.com/2018/06/15/are-you-talking-to-me-interaction-between-teachers-and-researchers-around-evidence-truth-and-decision-making/","In this blog, I’m talking about computing education research, but I’m not always sure and certainly not always clear about who I’m talking to. That’s a problem, but it’s not just my problem. It’s a general problem of research, and a particular problem of education research. What should we say when we’re talking to researchers, and what should we say when we’re talking to teachers, and where do we need to insert caveats or explain assumptions that may not be obvious to each audience? From what I know of philosophy of science, I’m a post-positivist. I believe that there is an objective reality, and the best tools that we humans have to understand it are empirical evidence and the scientific method. Observations and experiments have errors and flaws, and our perspectives are biased. All theory should be questioned and may be revised. But that’s not how everyone sees the world, and what I might say in my blog may be perceived as a statement of truth, when the strongest statement I might make is a statement of evidence-supported theory. It’s hard to bridge the gap between researchers and education. Lauren Margulieux shared on Twitter a recent Educational Researcher article that addresses the issue. It’s not about getting teachers access to journal articles, because those articles aren’t written to speak to nor address teachers’ concerns. There have to be efforts from both directions, to help teachers to grok researchers and researchers to speak to teachers. I have three examples to concretize the problem. I wrote a blog post earlier this month where I stated that iteration should be taught before recursion if one is trying to teach both. For me, this is a well-supported statement of theory. I have written about the work by Anderson and Wiedenbeck supporting this argument. I have also written about the terrific work by Pirolli exploring different ways to teach recursion, which fed into the work by Anderson. In the discussion on the earlier post, Shriram correctly pointed out that there are more modern ways to teach recursion, which might make it better to teach before iteration. Other respondents to that post point out the newer forms of iteration which are much simpler. Anderson and Wiedenbeck’s work was in the 1980’s. That sounds great — I would hope that we can do better than what we did 30 years ago. I do not know of studies that show that the new ways work better or differently than the ways of the 1980’s, and I would love to see them. By default, I do not assume that more modern ways are necessarily better. Lots of scientists do explore new directions that turn out to be cul-de-sacs in light of later evidence (e.g., there was a lot of research in learning styles before the weight of evidence suggested that they didn’t exist). I certainly hope and believe that we are coming up with better ways to teach and better theories to explain what’s going on. I have every reason to expect that the modern ways of teaching recursion are better, and that the FOR EACH loop in Python and Java works differently than the iteration forms that Anderson and Wiedenbeck studied. The problem for me is how to talk about it. I wrote that earlier blog post thinking about teachers. If I’m talking to teachers, should I put in all these caveats and talk about the possibilities that haven’t yet been tested with evidence? Teachers aren’t researchers. In order to do their jobs, they don’t need to know the research methods and the probabilistic state of the evidence base. They want to know the best practices as supported by the evidence and theory. The best evidence-based recommendation I know is to teach iteration before recursion. But had I thought about the fact that other researchers would be reading the blog, I would have inserted some caveats. I mean to always be implicitly saying to the researchers, “I’m open to being proven wrong about this,” but maybe I need to be more explicit about making statements about falsifiability. Certainly, my statement would have been a bit less forceful about iteration before recursion if I’d thought about a broader audience. I’m not consistent about how much evidence I require before I make a recommendation. For a while now, I have been using predictions before live coding demonstrations in my classes. It’s based on some strong evidence from Eric Mazur that I wrote about in 2011 (see blog post here). I recommend the practice often in my keynotes (see the video of me talking about predictions at EPFL from March 2018). I really don’t have strong evidence that this practice works in CS classes. It should be a pretty simple experiment to test the theory that predictions before seeing program execution demonstrations helps with learning. I don’t know that anybody has done this experiment. We know that predictions work well in physics education, but we know that lots of things from physics education do not work in CS education. (See Briana Morrison’s dissertation.) Teachers have to do lots of things for which we have no evidence. We don’t have enough research in CS Ed to guide all of our teaching practice. Robert Glaser once defined education as “Psychology Engineering,” and like all engineers, teachers have to do things for which we don’t have enough science. We make our best guess and take action. So, I’m recommending a practice for which I don’t have evidence in CS education. Sometimes when I give the talk on prediction, I point out that we don’t have evidence from CS. But not always. I probably should. Maybe it’s enough that we have good evidence from physics, and I don’t have to get into the subtle differences between PER and CER for teachers. Researchers should know that this is yet another example of a great question to be addressed. But there are too few Computing Education Researchers, and none that I know are bored and looking for new experiments to run. Another example of the complexity of talking to teachers about research is reflected in a series of blog posts (and other social media) that came out at the end of last year about the AP CS Principles results. I don’t see that anybody’s wrong here. We should be concerned that teachers and other education decision-makers may misinterpret the research results to say more than they do. All of that said, teachers, principals, and school administrators have to make decisions. They’re engineers in the field. They don’t have enough science. They may use data like pass rates to make choices about which curricula to use. From my perspective, without a horse in the race or a dog in the fight, it’s not something I’m worried about. I’m much more concerned about the decision whether to offer CSP at all. I want schools to offer CS, and I want them to offer high-quality CS. Both UTeach and Code.org offer high-quality CS, so that choice isn’t really a problem. I worry about schools that choose to offer no CSP or no CS at all. Researchers and teachers are solving different problems. There should be better communication. Researchers have to make explicit the things that teachers might be confused about, but they might not realize what the teachers are confused about. In computing education research and other interdisciplinary fields, researchers may have to explain to each other what assumptions they’re making, because their assumptions are different in different fields. Teachers may use research to make decisions because they have to make decisions. It’s better for them to use evidence than not to use evidence, but there’s a danger in using evidence to make invalid arguments — to say that the evidence implies more than it does. I don’t have a solution to offer here. I can point out the problem and use my blog to explore the boundary."
"114","2018-06-04","2023-03-24","https://computinged.wordpress.com/2018/06/04/teach-two-languages-if-you-have-to-balancing-ease-of-learning-and-learning-objectives/","My most recent CACM Blog post addresses a common question in computer science education: Should we teach two programming languages in a course to encourage abstraction, or just one? Does it hurt students to teach two? Does it help them to learn a second language earlier? My answer (in really short form) is “Just teach one, because it takes longer to learn one than you expect. If you teach two or more, students are going to struggle to develop deep understanding.” But if your learning objective is for students to learn two (or more languages), teach two or more languages. You’re going to have to pay the piper sometime. Delaying is better, because it’s easier and more effective to transfer deep knowledge than to try to transfer surface-level representations. The issue is like the question of recursion-first or iterative-control-structures-first. (See this earlier blog post.) If your students don’t have to learn iterative control structures, then teach recursion-only. Recursion is easier and more flexible. But if you have to teach both, teach iteration first. Yes, iteration is hard, and learning iteration-first makes recursion harder to learn later, but if you have to do it, iteration-first is the better order. There’s a lot we know about making computing easier to learn. But sometimes, we just can’t use it, because there are external forces that require certain learning objectives. I correct, continue, and explore tangents on this blog post here: https://computinged.wordpress.com/2018/06/15/are-you-talking-to-me-interaction-between-teachers-and-researchers-around-evidence-truth-and-decision-making/"
"115","2018-03-09","2023-03-24","https://computinged.wordpress.com/2018/03/09/exploring-the-question-of-teaching-recursion-or-iterative-control-structures-first/","Someone raised the question on the SIGCSE Members list: Which should we teach first, iteration or recursion? I offered this response: The research evidence suggests that one should teach iterative control structures before recursion, IF you’re going to teach both. If you are only going to teach one, recursion is easier for students. If you teach recursion first, the evidence (Kessler & Anderson, 1986; Wiedenbeck, 1989) suggests that it becomes harder to learn the iterative control structures. The push back I got was, “Surely, we have better data than 30 year old studies?!?” Here was my reply: I agree that it would be great to do these studies again. Given that we have an experiment and a successful replication, it could be an MS or advanced undergrad project to replicate one of those earlier experiments. For myself, I don’t expect much difference. As you say, student brains have stayed the same. While the languages have changed, the basic iterative control structures (for, while, repeat) haven’t changed much in modern languages from what they were in C and even Pascal. Curriculum may be a factor, and that would be interesting to explore. Two directions that I think would be great to explore in this space: (1) The Role of Block-Based Languages: As you say, the previous research found that iterative control structures are syntactically complicated for novices. But multiple studies have found that block-based iterative structures are much easier for novices than text-based versions. What if we went recursion->block iteration->text iteration? Would that scaffold the transition to the more complicated text-based iterative control structures? (2) The Role of High-Level Functions: I don’t know of any studies exploring high-level functions (like the ones that Kathi Fisler used to beat the Rainfall Problem, or even map/reduce/filter) in the development of understanding of recursion and iterative control structures. High-level functions have a fixed form, like for/repeat/while, but it’s a simpler, functional form. Could we teach high-level functions first, to lead into recursion or iterative control structures? Or maybe even teach recursion or iterative control structures as two different ways of implementing the high-level functions? In general, there are too many questions to explore and too few people asking these questions with empirical data. We might rely on our teaching experience to inform our answers to these questions, but as Neil Brown showed us (see CACM Blog post this month that talks about this result), higher-education CS teachers are actually way off when it comes to estimating what students find hard. SIGCSE-Members, please consider asking some of these questions on your campus with your students. There are well-formed questions here that could be answered in a laboratory study that could be encapsulated in a single semester. The students will get the opportunity to do empirical research with humans, which is a useful skill in many parts of computing."
"116","2014-02-28","2023-03-24","https://computinged.wordpress.com/2014/02/28/sigcse2014-preview-how-informal-cs-education-unfortunately-is-hidden-from-poor-families/","I’ve been excited to see this paper get published since Betsy first told me about the work. The paper described below (by Betsy DiSalvo, Cecili Reid, and Parisa Khanipour Roshan) looks at the terms that families commonly use to find on-line resources to help their children learn about computer science. They didn’t find Alice or Scratch or Blockly — none of the things that would be our first choices for CS education opportunities on-line. Betsy and her students show how we accidentally hide our resources from the uneducated and under-privileged, by presuming that the searchers are well-educated and privileged. They point out that this is one way that open education resources actually actually increase the socioeconomic gap, by not being easily discoverable by those without privilege. I got to see a preview of this talk, and the results are surprising — a video of the preview talk will be available here. Friday March 7, 3:45-5, in Room Hanover DE. They Can’t Find Us: The Search for Informal CS Education In this study we found that search terms that would likely be used by parents to find out-of-school computer science (CS) learning opportunities for their children yielded remarkably unproductive results. This is important to the field of CS education because, to date, there is no empirical evidence that demonstrates how a lack of CS vocabulary is a barrier to accessing informal CS learning opportunities. This study focuses on the experience of parents who do not have the privilege of education and technical experience when searching for learning opportunities for their children. The findings presented will demonstrate that issues of access to CS education go beyond technical means, and include ability to conduct suitable searches and identify appropriate computational learning tools. Out-of-school learning is an important factor in who is motivated and prepared to study computer science in college. It is likely that without early access to informal CS learning, fewer students are motivated to explore CS in formal classrooms. via SIGCSE2014 – OpenConf Peer Review & Conference Management System."
"117","2016-09-02","2023-03-24","https://computinged.wordpress.com/2016/09/02/preview-icer-2016-ebooks-design-based-research-and-replications-in-assessment-and-cognitive-load-studies/","The International Computing Education Research (ICER) Conference 2016 is September 8-12 in Melbourne, Australia (see website here). There were 102 papers submitted, and 26 papers accepted for a 25% acceptance rate. Georgia Tech computing education researchers are justifiably proud — we submitted three papers to ICER 2016, and we had three acceptances. We’re over 10% of all papers at ICER 2016. One of the papers extends the ebook work that I’ve reported on here (see here where we made them available and our paper on usability and usage from WiPSCE 2015). Identifying Design Principles for CS Teacher Ebooks through Design-Based Research (click on the title to get to the ACM DL page) by Barbara Ericson, Kantwon Rogers, Miranda Parker, Briana Morrison, and I use a Design-Based Research perspective on our ebooks work. We describe our theory for the ebooks, then describe the iterations of what we designed, what happened when we deployed (data-driven), and how we then re-designed. Two of our papers are replication studies — so grateful to the ICER reviewers and communities for seeing the value of replication studies. The first is Replication, Validation, and Use of a Language Independent CS1 Knowledge Assessment by Miranda Parker, me, and Shelly Engleman. This is Miranda’s paper expanding on her SIGCSE 2016 poster introducing the SCS1 validated and language-independent measure of CS1 knowledge. The paper does a great survey of validated measures of learning, explains her process, and then presents what one can and can’t claim with a validated instrument. The second is Learning Loops: A Replication Study Illuminates Impact of HS Courses by Briana Morrison, Adrienne Decker, and Lauren Margulieux. Briana and Lauren have both now left Georgia Tech, but they were still here when they did this paper, so we’re claiming them. Readers of this blog may recall Briana and Lauren’s confusing results from SIGCSE 2016 result that suggest that cognitive load in CS textual programming is so high that it blows away our experimental instructional treatments. Was that an aberration? With Adrienne Decker’s help (and student participants), they replicated the study. I’ll give away the bottom line: It wasn’t an aberration. One new finding is that students who did not have high school CS classes caught up with those who did in the experiment, with respect to understanding loops We’re sending three of our Human-Centered Computing PhD students to the ICER 2016 Doctoral Consortium. These folks will be in the DC on Sept 8, and will present posters to the conference on Sept 9 afternoon."
"118","2015-11-06","2023-03-24","https://computinged.wordpress.com/2015/11/06/preview-for-wipsce-2015-usability-and-usage-of-interactive-features-in-an-online-ebook-for-cs-teachers/","Next week in London, at WiPSCE 2015, the 10th Workshop in Primary and Secondary Computing Education, Barbara Ericson is going to present the pilot study of our teacher CSP ebook that Steven Moore (undergrad researcher here at Georgia Tech) ran last year. This is the pilot that came before our Spring trial (see post here) and which led to our student and teacher ebooks that we recently released (see post here). The authors of the paper are Barbara, Steven, Brianna Morrison, and me. Steven’s study had two parts to it. The first was a usability survey comparing three different ebook platforms: Runestone Interactive, Zyante, and CS Circles. You may recall the post here where I invited you to participate in that survey. Runestone did well in the survey, just beating out Zyante, and both were far ahead of CS Circles. The meat of the paper is the study of 10 teachers who qualified for our study (got less than 40% on a pretest) and read the 8 chapters we had ready for them. Every two chapters, there was a post-test on those two chapters. Some of the findings: Barbara did an extensive log file analysis of the participants, and we learned a lot from that. We learned where our books were not usable, e.g., when participants skipped over interactive features, or when they used the features wrong (e.g., clicking “Check Me” on a Parson’s problem, without ever moving pieces around). We used these findings in designing the current ebooks. This paper is exciting for us — it’s the first where we test our design claims. "
"119","2014-08-25","2023-03-24","https://computinged.wordpress.com/2014/08/25/help-us-figure-out-how-to-design-ebooks-to-be-usable/","Like the post I made last week, we’ve been working on a bunch of experiment setups during the summer, and are now looking for participants. This one is open to most readers of this blog. We have found that there is a lot of literature on how to design text to be readable on the screen. But for interactive ebooks with embedded elements like coding areas, visualizations, and Parson’s problems, we know less about usability. Steven Moore is an undergraduate researcher working with us, and he’s put together a collection of three different ebooks and a survey on preferences for each. We’d love to get participants to try out his ebook samples and survey, please. Hello, We are a research group at Georgia Tech developing new approaches to teaching computer science at a distance. In collaboration with researchers at Luther College, we have created a new kind of electronic book for learning Python. The book is entirely web-based and cross-platform, with special features, including programming within the book, program visualizations, videos, multiple-choice questions, and Parson’s problems (a special kind of programming problem). We are currently seeking individuals with 6 months or more experience with programming in a textual language. If you are willing to volunteer, you will need to complete a survey regarding the design and usability of three different interactive computer science e-books and specific components within those e-books. Links to the e-books will be provided within the survey and the whole study can be completed via most web browsers. The survey should take roughly forty-five minutes to complete. We would like you to complete it by September 30th, 2014. The risks involved are no greater than those involved in daily activities. You will receive a $15.00 gift card for completing the survey. Study records will be kept confidential and your participation in this study is greatly valued. If you are interested in participating, please contact Steven Moore at smoore46@gatech.edu. If you have any questions, please feel free to contact me, Mark Guzdial at guzdial@cc.gatech.edu."
"120","2014-08-21","2023-03-24","https://computinged.wordpress.com/2014/08/21/seeking-participants-for-modality-study-please-forward/","This is part of Briana Morrison’s dissertation work. She’s asking the question about the role of explaining programs in different modalities (e.g., visual vs. oral text) have on understanding. If you know potential applicants (e.g., maybe advertise it to your whole class?), please forward this to them. We’d appreciate it!  We need volunteers, age 18 and older, with no computer programming experience to help us determine the best way to explain code using videos.  No more than 2 hours of your time! Completing a portion of the study allows you to enter a raffle for one of four $50 Amazon Gift Cards Completion of entire study allows you to enter a raffle for one $100 Amazon Gift Card  Interested? Go to the following website:  https://www.surveymonkey.com/s/CLModality "
"121","2014-08-08","2023-03-24","https://computinged.wordpress.com/2014/08/08/icer-2014-preview-briana-morrison-and-an-instrument-for-measuring-cognitive-load/","The International Computing Education Research (ICER) conference 2014 is August 11-13 in Glasgow (see program here). My involvement starts Saturday August 9 when we have the welcome dinner for the doctoral consortium, which will be run all day on Sunday August 10 (Sally Fincher and I are chairing). The main conference presentations continue through noon on Wednesday August 13. The rest of August 13 and into Thursday August 14 will be a new kind of ICER session: Critical Research Review for work-in-progress. I’m presenting on some new work that I’m getting feedback on related to constructionism for adults. I’ll blog about that later. Briana Morrison is presenting her paper on developing an instrument to measure cognitive load (early version of paper available here), with co-authors Brian Dorn (my former student, now a chaired assistant professor at U. Nebraska-Omaha) and me. Briana’s research is looking at the impacts of modality on program understanding for students. Does audio vs. video vs. both have an impact on student understanding? She’s controlling for time in all her presentations, and plans to measure performance…and cognitive load. Is it harder for students to understand audio descriptions of program code, or to try to read text descriptions while trying to read text programs? There wasn’t a validated instrument for her to use to measure the components of cognitive load — so she created one. She took an existing instrument, and adapted it to computer science. She and Brian did the hard work of crunching all the correlations and load factors to make sure that the instrument is still valid after her adaptation. It’s an important contribution in terms of giving computing education researchers another validated tool for measuring something important about learning."
"122","2014-04-23","2023-03-24","https://computinged.wordpress.com/2014/04/23/call-for-participation-in-acm-sigcses-icer-2014-doctoral-consortium/","Sally Fincher and I are organizing this year’s Doctoral Consortium for students working in computing education. Do come join us in Glasgow! ICER DC Call for Proposals The ICER 2014 Doctoral Consortium provides an opportunity for doctoral students to explore and develop their research interests in a workshop environment with a panel of established researchers. We invite students to apply for this opportunity to share their work with students in a similar situation as well as senior researchers in the field. We welcome submissions from students at any stage of their doctoral studies. Sally Fincher, University of Kent at Canterbury Mark Guzdial, Georgia Institute of Technology Contact us at: icerdc2014@gmail.com  What is the Doctoral Consortium? The DC has the following objectives: The DC will be held on Sunday, August 10 2014. Students at any stage of their doctoral studies are welcome to apply and attend. The number of participants is limited to 12. Applicants who are selected will receive a limited partial reimbursement of travel, accommodation and subsistence (i.e., food) expenses of $600 (USD). Preparing and Submitting your Consortium Proposal Extended Abstract Candidates should prepare a 2-page research description covering central aspects of your PhD work, which follows the structure, details and format specified in the ICER Doctoral Consortium submission template Word<http://icer.hosting.acm.org/wp-content/uploads/2013/05/ICER2013-dc-template.doc> / LaTeX<http://icer.hosting.acm.org/wp-content/uploads/2013/05/ICER2013_dc_template.zip>. Key points include: Appendix 1. A letter of nomination from your primary dissertation advisor, that supports your participation in the DC, explains how your work connects with the ICER community, and describes the expected timeline for your completion of your doctorate. Appendix 2. Your concise current Curriculum Vita (1–2 pages) Once you have assembled – and tested – the PDF file, the entire submission file should be emailed to icerdc2014@gmail.com no later than 17:00 PDT on 21 May 2014. When submitting the applications, please put “ICER DC 2014 – <Last Name>” in the Subject line. Process Timeline: Friday 21st May – initial submission Monday 2nd June – notification of acceptance Monday 16th June – camera ready copy due  Doctoral Consortium Review Process The review and decision of acceptance will balance many factors. This includes the quality of your proposal, and where you are within your doctoral education program. It also includes external factors, so that the group of accepted candidates exhibit a diversity of backgrounds and topics. Your institution will also be taken into account, where we are unlikely to accept more than two students from the same institution. Confidentiality of submissions is maintained during the review process. All rejected submissions will be kept confidential in perpetuity. Upon Acceptance of your Doctoral Consortium Proposal Authors will be notified of acceptance or rejection on 2 June 2014, or shortly after. Authors of accepted submissions will receive instructions on how to submit publication-ready copy (this will consist of your extended abstract only), and will receive information about attending the Doctoral Consortium, about preparing your presentation and poster, about how to register for the conference, travel arrangements and reimbursement details. Registration benefits are contingent on attending the Doctoral Consortium. Please note that submissions will not be published without a signed form releasing publishing copyright to the ACM. Attaining permissions to use video, audio, or pictures of identifiable people or proprietary content rests with the author, not the ACM or the ICER conference. Before the Conference Since the goals of the Doctoral Consortium include building scholarship and community, participants will be expected to read all of the Extended Abstracts of your colleagues prior to the beginning of the consortium with a goal of preparing careful and thoughtful critique. Although many fine pieces of work may have to be rejected due to lack of space, being accepted into the Consortium involves a commitment to giving and receiving thoughtful commentary. At the Conference All participants are expected to attend all portions of the Doctoral Consortium. We will also be arranging an informal Welcome Dinner for participants and discussants on Saturday August 9, 2014 before the consortium begins. Please make your travel plans to join us this evening to get acquainted. Within the DC, each student will present his or her work to the group with substantial time allowed for discussion and questions by participating researchers and other students. Students will also present a poster of their work at the main conference. In addition to the conference poster, each student should bring a “one-pager” describing their research (perhaps a small version of the poster using letter or A4 paper) for sharing with faculty mentors and other students. After the Conference Accepted Doctoral Consortium abstracts will be distributed in the ACM Digital Library, where they will remain accessible to thousands of researchers and practitioners worldwide. ———– AUTHORS TAKE NOTE: The official publication date is the date the proceedings are made available in the ACM Digital Library. This date will be one week prior to the first day of the conference. The official publication date affects the deadline for any patent filings related to published work. ———— "
"123","2020-03-16","2023-03-24","https://computinged.wordpress.com/2020/03/16/how-do-we-test-the-cultural-assumptions-of-our-assessments/","I’m teaching a course on user interface software development for about 260 students this semester. We just had a Midterm where I felt I bobbled one of the assessment questions because I made cultural assumptions. I’m wondering how I could have avoided that. I’m a big fan of multiple choice, fill-in-the-blank, and Parsons problems on my assessments. I use my Parson problem generator a lot (see link here). For example, on this one, students had to arrange the scrambled parts of an HTML file in order to achieve a given DOM tree, and there were two programs in JavaScript (using constructors and prototypes) that they had to unscramble. I typically ask some definitional questions about user interfaces at the start, about ideas like signifiers, affordances, learned associations, and metaphors. Like Dan Garcia (see his CS-Ed Podcast), I believe in starting out the exam with some easy things, to buoy confidence. They’re typically only worth a couple points, and I try to make the distractors fun. Here’s an example: Since we watched in lecture a nice video starring Don Norman explaining “Norman doors,” I was pretty sure that anyone who actually attended lecture that day would know that the answer was the first one in the list. Still, maybe a half-dozen students chose the second item. Here’s the one that bothered me much more. I meant for the answer to be the first item on the list. In fact, almost the exact words were on the midterm exam review, so that students who studied the review guide would know immediately what we wanted. (I do know that working memory doesn’t actually store more for experts — I made a simplification to make the definition easier to keep in mind.) Perhaps a dozen student chose the second item: “Familiarity breeds contempt. Experts contempt for their user interfaces allows them to use them without a sense of cognitive overload.” I had several students ask me during the exam, “What’s contempt?” I realized that many of my students didn’t know the word or the famous phrase (dates back to Chaucer). Then one student actually wrote on his exam, “I’m assuming that contempt means learned contentment.” If you make that assumption, the item doesn’t sound ridiculous: “Familiarity breeds learned contentment. Experts learned contentment for their user interfaces allows them to use them without a sense of cognitive overload.” I had accidentally created an assessment that expected a particular cultural context. The midterm was developed over several weeks, and reviewed by my co-instructor, graduate student instructor, five undergraduate assistants, and three undergraduate graders. We’re a pretty diverse bunch. We had found and fixed perhaps a dozen errors in the exam during the development period. We’d never noted this problem. I’m not sure how I could have avoided this mistake. How does one remain aware of one’s own cultural assumptions? I’m thinking of the McLuhan quote: “I don’t know who discovered water, but it wasn’t a fish.” I feel bad for the students who got this problem wrong because they didn’t know the quote or the meaning of the word “contempt.” What do you think? How might I have discovered the cultural assumptions in my assessment? "
"124","2014-08-31","2023-03-24","https://computinged.wordpress.com/2014/08/31/nsf-i-corps-offers-funds-to-scale-and-support-learning-inventions/","Quite cool that this is available for education projects, too: NSF’s Innovation Corps Teams Program (I-Corps Teams: NSF 12-602) has created a new opportunity, called I-Corps for Learning Teams (I-Corps L). I-Corps L supports taking discoveries and promising practices from education research and development and promoting opportunities for widespread adoption, adaptation, and utilization. I-Corps L teams will receive support – in the form of mentoring and funding – to accelerate innovation in learning that can be successfully scaled, in a sustainable manner. There are a number of analogous elements between trying to bring product discoveries to market and getting learning innovations into broad practice. Getting the best evidence-based practices out to potential adopters, where those practices can benefit large numbers of students or learners, rather than just in a few classrooms or informal learning organizations, requires an entrepreneurial approach. I-Corps L can benefit education researchers by helping them to identify approaches that are effective in STEM teaching and learning. To be eligible to pursue funding through I-Corps L, applicants must have been associated with a prior award from NSF (in a STEM education field relevant to the proposed innovation) that is currently active or that has been active within five years from the date of the proposal submission. The lineage of the prior award extends to the PI, Co-PIs, Senior Personnel, Post-doctoral Researchers, Professional Staff or others who were supported under the award. To be considered for NSF’s I-Corps L Teams program, Executive Summaries (see below) must be submitted by September 30, 2014 to be considered for participation in the January 2015 cohort. Funding for each I-Corps L Team is $50,000 per award, for up to six months."
"125","2019-04-05","2023-03-24","https://computinged.wordpress.com/2019/04/05/opportunities-to-explore-research-questions-with-code-org-guest-post-from-baker-franke/","I wrote my Blog@CACM column this month as a response to the 60 Minutes segment on Code.org with Hadi Partovi, “Five Research Questions Raised by a Pre-Mortem on the 60 Minutes Segment on Code.org.” Baker Franke, research and evaluation manager at Code.org (see Felienne’s blog post about Baker here) responded on Facebook with an invitation to engage with Code.org on these (and other) research questions. He provided me with a longer form of his Facebook post, which I’m sharing here with his permission. Thanks, Baker! Hi Mark, These are all of course great questions and ones we really hope the community takes up. Some are things we’re actively tracking or working on with other research partners. So, some questions are actually more at the mid-mortem stage 🙂 or at least we can see trends. If you’d like me to share something I’m more than happy to. But for anyone out there who would like to dig in a little bit more please consider becoming a research partner. I recently gave a flash talk at the SPLICE workshop at SIGCSE ‘19 about how we do research partnerships. Here is a working document about Research Partnerships at Code.org. It explains with a bit more detail how we work with researchers and the kinds of data we do and don’t have. If you have ideas for killer research projects that make use of our platform let us (read: me) know. To offer a little something, I’ll take the bait on Mark’s first hypothesis: “Students with Code.org accounts don’t actually use the Code.org resources.” Answer: depends how you count! Actually it’s more like: depends where you want to draw the line on a full spectrum of activity we can log. We do try to track the difference between just visiting the site, logging in, doing an activity, starting a course with a teacher, and doing more. (Of course nothing would replace a well-designed implementation study, did I mention our research partnership program?) For example, in CS Fundamentals (K5), we’ve been looking at students who “start” the course (defined in next paragraph) v. those who reach a basic level of “coding proficiency,” but understanding and defining this is tricky and is an ongoing project (click this link to learn more about how we define it)We also track what we call “course started” v. “fully enrolled”. “Course started” is defined as a student user who (1) completes any single activity within one of our full courses (i.e. CSF, CSD, CSP, but not hour of code) and (2) who is in a teacher-section with 5 or more other students. Some exploratory analysis has shown that >= 5 students filters out a lot of noise that is probably not school-related activity. “Fully enrolled” is a metric that we’re also continuing to refine, and is a bit of misnomer because we can’t actually see what course the student is enrolled in at their school, but it means something like: “system activity data is indicative of this person probably actually going through the course in a classroom with a teacher.” We calculate it based on a student account (1) being in a section of >= 5 students (2) reaching a threshold of activity within each unit of the course — different thresholds for each unit depending on size, amount of unplugged, etc. — (3) over all units in the course. I think the important thing to highlight about these metrics is that they’re focused on activity indicative of students in classrooms, not just any old activity. Here are the numbers for the most recently completed school year.  Right now, our definition for “fully enrolled” is admittedly rough, and we’re going to refine it based on what we’re seeing in actual classrooms and publish a definition later this year with better numbers, but these numbers give a high level idea of what we’re seeing. So do students with Code.org accounts use the resources? Yeah, a lot do. It’s tempting to compare these numbers to, say, MOOC completion rates, but we’re not really a MOOC because our curricula aren’t actually online courses. It would be hard for a student to go through our courses without a teacher and a classroom of schoolmates. The difference between “started” and “fully enrolled” could be a teacher only using one unit of a course or a few activities. So where’s the line? Another way to slice this would be to look at started v. completed for students of teachers who went through our PD program. Wouldn’t that be interesting? Want to find out more? Did I mention our Research Partnership Program? Baker baker@code.org"
"126","2019-05-20","2023-03-24","https://computinged.wordpress.com/2019/05/20/learning-to-code-is-really-learning-to-code-something-no-one-just-learns-to-program/","I asked a group of social studies educators what programming language(s) they might want to use in their classes. One of the interesting themes in the responses was “the same as what’s in math and science classes.” One teacher said that she didn’t want a “weird hierarchy” where there’s one programming language in STEM and another in “history and English” for fear they’d be seen as “dumbed down.” Another said that maybe teaching JavaScript in history class “would make history cool.” There’s a belief in this theme that I think is wrong. Learning to program in science class probably won’t transfer without a bunch of work to programming in mathematics class, and programming STEM classes will probably be a very different thing than programming in the humanities classes. Even expert programmers learn to program in a domain, and have a hard time transferring that knowledge of programming between domains. Expertise is expertise in a domain. My advisor, Elliot Soloway, was involved in some of the early studies that supported this claim. The first paper was “The role of domain experience in software design” by Beth Adelson and Elliot Soloway from 1985. I quote from the abstract: A designer’s expertise rests on the knowledge and skills which develop with experience in a domain. As a result, when a designer is designing an object in an unfamiliar domain he will not have the same knowledge and skills available to him as when he is designing an object in a familiar domain. In this study, they took expert software designers in various fields, and have them design systems in other fields. They also asked novice designers to do some of the same tasks. For example, maybe we have a software designer who has been building banking software, and another who has been designing real-time control systems. Now, let’s ask both designers to design an elevator control system. What they found was that the designers in the new domain struggled. They stopped planning (e.g., making notes). When they were in the familiar domain, they would often visualize the working system (“simulation” in the paper). Novices didn’t. The experts didn’t when they were faced with a new domain. Experts in an unfamiliar domain looked much like novices. Now, experts in an unfamiliar domain were better than the novices at noticing constraints on the design, so something transferred. The second paper is even more striking. “Empirical Studies of Programming Knowledge” (1984) by Elliot Soloway and Kate Ehrlich. From the abstract: We suggest that expert programmers have and use two types of programming knowledge: (1) programming plans, which are generic program fragments that represent stereotypic action sequences in programming, and (2) rules of programming discourse, which capture the conventions in programming and govern the composition of the plans into programs. When we teach programming, we tend to focus on the syntax and semantics of the language. We don’t explicitly teach plans — chunks of code that do something useful. But we expect students to figure them out. We rarely teach discourse rules. The domain-specific knowledge lies in both plans and discourse rules. To test the claim about the importance of these discourse rules, they produce sets of two programs: Alpha and Beta. Alpha is a perfectly fine program. Beta breaks the rules. For example, if you see a variable initialized n := 0;, you would find it weird to later see read(n); (to input a new value for n). It’s not wrong. The code might work just fine — in fact, it does work just fine in the experimental construction of Beta. But the program breaks the rules of discourse. They write: Notice that both Alpha version and the Beta version are runnable programs that in almost all cases compute the same values. Moreover, to an untrained eye their differences may even not be apparent; they always only differ by a very few textual elements. Here’s an example of one Alpha and Beta — these both work. In this case, they do not do the same thing:  Beta isn’t wrong. It successfully computes minimum. However, it uses the variable max which is confusing. It breaks our discourse rule. The program does work. Different domains use different standards and different styles of programming. Engineers using MATLAB rarely use FOR or WHILE loops, for example. Graphic designers writing JavaScript code use far more exception handling than we ever expected. Soloway and Ehrlich showed these programs to “experts” (undergraduate juniors to graduate students) and novices (students in their first programming course). When asked questions about Alpha (e.g., “What goes in this missing line in the code?” Or “Do you remember that code that I showed you?”), experts do far better than novices. When asked questions about Beta, experts do essentially the same as novices (no statistically significant differences).  I find it particularly notable that the expert drop is steeper. Experts rely heavily on cues like variable names, even more than novices. CS expertise is really expertise in the discourse rules. If expert programmers “knew programming,” they should be able to just trace the code (“be a computer”) and answer the questions correctly. Instead, they struggle to understand what’s going on. They’re pretty much like a student in their first semester of programming. The experts know Alpha well because it’s just like all the other programs they’ve ever seen — they can pattern match, rather than reason about the code itself. The experts struggle with Beta. It’s kind of like the difference between humans and Econs. Econs can reason through code rationally. Humans rely on expectations. These results also suggest that the question of “Does tracing come before writing?” is moot. Tracing what? The program matters. Some programs are harder to trace than others — for everyone, and particularly, with expertise. There is no generic “tracing skill.” Conclusion: People don’t just learn “coding.” Programmers in general know plans and discourse rules. Break the rules and you just have the programming language — and even experts aren’t really good at just applying the syntax and semantics rules. No better than a novice. If you have enough expertise in different domains, then you can work in different domains. When you start programming in a new domain, you’re not that much different than a new programmer. The social studies teachers I’m working with have a sense that students can just “know JavaScript.” I don’t think that’s true. I think if I taught students to write JavaScript code to use Google’s Charts service for making data visualizations, it wouldn’t be much easier to teach them Web programming with React, to write scripts for Adobe Photoshop, nor to build simulations in Lively Web. It’s all JavaScript, and the syntax and semantics are the same in each — but in terms of what people really know and use (i.e., plans and discourse rules), it’s completely different."
"127","2015-10-30","2023-03-24","https://computinged.wordpress.com/2015/10/30/human-students-learn-from-engagement-and-econs-learn-from-lecture-nytimes-op-ed-in-defense-of-lecture/","I’m sympathetic to the author’s argument (linked below), that being able to understand an argument delivered as a lecture is difficult and worthwhile. Her characterization of active learning is wrong — it’s not “student-led discussion.” Actually, what she describes as good lecture is close to good active learning. Having students answering questions in discussion is good — but some students might disengage and not answer questions. Small group activities, peer led team learning, or peer instruction would be better to make sure that all students engage. But that’s not the critical flaw in her argument. Being able to listen to a complicated lecture is an important skill — but students (at least in STEM, at least in the US) don’t have that skill. We can complain about that. We can reform primary and secondary schooling so that students develop that skill. But if we want these students to learn, the ones who are in our classes today, we should use active learning strategies. Richard Thaler introduced the term “Econs” to describe the rational beings that inhabit traditional economic theory. (See a review of his book Misbehaving for more discussion on Econs.) Econs are completely rational. They develop the skills to learn from lecture because it is the most efficient way to learn. Unfortunately, we are not econs, and our classes are filled with humans. Humans are predictably irrational, as Daniel Ariely puts it. And there’s not much we can do about it. In his book Thinking, Fast and Slow, Daniel Kahneman complains that he knows how he is influenced by biases and too much System 1 thinking — and yet, he still makes the same mistakes. The evidence is clear that the students in our undergraduate classes today need help to engage with and learn STEM skills and concepts. The empirical evidence for the value of active learning over lecture is strong (see previous post). It works for humans. Lecture probably works for Econs. If we could find enough of them, we could run an experiment. In many quarters, the active learning craze is only the latest development in a long tradition of complaining about boring professors, flavored with a dash of that other great American pastime, populist resentment of experts. But there is an ominous note in the most recent chorus of calls to replace the “sage on the stage” with student-led discussion. These criticisms intersect with a broader crisis of confidence in the humanities. They are an attempt to further assimilate history, philosophy, literature and their sister disciplines to the goals and methods of the hard sciences — fields whose stars are rising in the eyes of administrators, politicians and higher-education entrepreneurs. Source: Lecture Me. Really. – The New York Times A similar argument to mine is below. This author doesn’t use the Humans/Econs distinction that I’m using. Instead, the author points out that lecturers too often teach only to younger versions of themselves. I will grant that nothing about the lecture format as Worthen describes it is inherently bad. But Worthen’s elegy to a format that bores so many students reminds me of a bad habit that too many professors have: building their teaching philosophies around younger versions of themselves, who were often more conscientious, more interested in learning, and more patient than the student staring at his phone in the back of their classrooms. Source: Professors shouldn’t only teach to younger versions of themselve"
"128","2015-08-21","2023-03-24","https://computinged.wordpress.com/2015/08/21/interesting-pushback-against-incentivizing-active-learning-in-cs-classes/","My Blog@CACM post this month makes a concrete proposal (quoted and linked below). We (all academic computing programs) should incentivize faculty to use active learning methods by evaluating teaching statements for hiring, tenure, and promotion more highly that reference active learning and avoid lecture. On my Facebook page, I linked to the article and tagged our Dean of Engineering, the Vice-Provost for Undergraduate Education, and the RPT Chair for our College, and asked, “Can we do this at Georgia Tech?” The pushback on my Facebook page was the longest thread I’ve ever been part of on Facebook. The issues raised were interesting and worth discussing: The discussion went on for four days (and hasn’t quite petered out yet). I do wonder if active learning methods will be forced upon faculty if we don’t willingly pick them up. The research evidence is overwhelming, with articles in Nature and hundreds of studies reviewed in the Proceedings of the National Academy of Sciences. How long before we get sued for teaching but not using the best teaching methods? One of the quotes in the blog post says, “At this point it is unethical to teach any other way.” We should take concrete steps towards doing the right thing, because it’s the right thing to do. Here is something concrete that we in academia can do. We can change the way we select teachers for computer science and how we reward faculty. All teaching statements for faculty hiring, promotion, and tenure should include a description of how the candidate uses active learning methods and explicitly reduces lecture. We create the incentive to teach better. We might simply add a phrase to our job ads and promotion and tenure policies like, “Teaching statements will be more valued that describe how the candidate uses active learning methods and seeks to reduce lecture.” via Be It Resolved: Teaching Statements Must Embrace Active Learning and Eschew Lecture | blog@CACM | Communications of the ACM."
"129","2018-12-17","2023-03-24","https://computinged.wordpress.com/2018/12/17/what-is-programming-as-literacy-what-does-it-look-like-and-what-should-we-worry-about-alan-kay-in-scientific-american/","Last month, I wrote a blog post about programming as a kind of literacy. I got some pushback. Really? Literacy? That programming in C stuff? Well, no, programming in C is not what I mean by a form of literacy. I recommended looking at some of what Alan Kay had written in Scientific American. I decided to do that for myself. Alan’s first article for Scientific American was in 1977, “Microelectronics and the Personal Computer,” about the idea of a personal computer and the explorations they were doing at Xerox PARC with Smalltalk. I liked this one a lot because it emphasizes simulations “the central property of computing.” The second was in 1984, “Computer Software.” Here’s where he defines literacy with the computer. It’s way more than just programming.  The third was in 1991, “Computers, Networks and Education.” This is the one where Alan really questioned whether things with computing were going in the right direction. For example, he worried about how people thought about “literacy” on the computer.  He returned to the importance of simulation.  And he was worried about people being critical of information that they find on the Internet (note that this is 1991, before Web browsers).  But in the end, Alan was hopeful, that we might develop a skeptical attitude with computing. "
"130","2018-11-05","2023-03-24","https://computinged.wordpress.com/2018/11/05/what-do-i-mean-by-computing-education-research-the-social-science-perspective/","As a new guy at the University of Michigan, I spend a lot of my time explaining who I am and what I mean by computing education research. In this and the next blog posts, I am sharing two of those explanations. The first one was a six minute lightning talk to the University of Michigan School of Information. My audience was well-versed in social sciences, so I explained who I was in those terms.   I ground a lot of my work in Lave and Wenger’s (1991) theory about Communities of Practice. Let me create a symbol here to represent a community of practice. My symbol has a light boundary where novices engage in legitimate peripheral participation, there is a darker area where full-fledged members of the community work, and the core where the experts live who represent the values and practices of the community.  When people think about computing education research, they mostly think about this community of practice: software development. How do we help students join the community of practice of software developers? That’s an interesting question, and I have done some work there (e.g., on how students come to understand multiple class object-oriented systems, like Model-View-Controller), but that’s not my focus.  Let’s set that community of practice aside (lower left), and consider another that I’m much more interested in: end-users who program. I’ve taught thousands of liberal arts, architecture/design, and business/management majors to program using Media Computation, a contextualized approach to computing that focuses on their interests and needs. I worked with Brian Dorn as he studied graphics designers who learn to program. End-user programmers are far more numerous than professional software developers. They use programming for different purposes, so we would expect them to use different practices, languages, libraries, and tools. That’s why we developed JES, a Python programming environment for our future end-users who are programming with media. I’m very interested in understanding and supporting the practices of end-user programmers.  Let’s keep that community of practice in consideration, and next consider a different one: High school teachers who teach computer science. They’re not about software development, either. They’re going to do something different (different practices) and have different values. High school teachers need to learn efficiently because they don’t have a lot of time to learn, and they want to learn effective methods for their students. Here’s where we work on ebooks, and subgoal labeling, and Barb’s Parsons problems. I’m interested in how we make computing education efficient and effective, and in understanding the underlying cognitive mechanisms at work. Why do some things work better for learning programming than others?  Here’s another community of practice I care about: scientists and engineers who use programming as a new way to do science. Again, different practices and values than software developers. How do we best support them? What tools do they need for their practices?  I would like students to have the same advantages as scientists and engineers, to be able to use code as a powerful and executable notation. Lately, I’ve been particularly focused on pre-calculus and economics. I know it’s stretching Lave and Wenger’s notion to think about classrooms as kinds of community of practice, so maybe the real community of practice is economists and professionals who use Computing. My specific interest is the edge of the community of practice, constructing legitimate peripheral participation for students who might use computing to aid in their entrance into the field. When does programming help with learning something else, and why does it help, and how can we make it more effective (e.g., use the best parts of programming that have the greatest leverage on supporting learning)? So let’s consider these communities of practice.  This is a really weird picture, from Lave and Wenger’s perspective. I’m saying that programming is a practice in all of these communities, but it’s different in each one. We actually do know practices like this: Reading and writing, and the use of mathematics.  I suggest that programming is a literacy. (I’m not the first, of course, and I don’t make the argument nearly as well as my colleague, Yasmin Kafai.) It’s a way of expressing thought, communicating with others, and testing and exploring new ideas.  And that’s what makes computing education a social justice issue. If we have really invented a new literacy, we need to make it available to everyone."
"131","2017-08-11","2023-03-24","https://computinged.wordpress.com/2017/08/11/leslie-lamport-tells-computer-scientists-to-go-create-ebooks-and-other-new-media/","Yes! Exactly! That’s why we’re trying to figure out new media for expressing, learning, and talking about computing. “If you succeed in attaining a position that allows you to do something great, if you do something that really is great, and if you realize that it’s great, there’s still one more hurdle: You have to convince others that it’s great,” he told the graduates. “This will require writing.” He exhorted graduates in biological physics; chemistry; computational linguistics; computer science; language and linguistics; mathematics and physics to find new modes of communication. “There must be wonderful ways in which a writer can interact with the reader that no one has thought of yet, ways that will convey ideas better and will make reading fun,” Lamport said. “I want you to go out and invent them.” Source: Computer scientist Leslie Lamport to grads: If you can’t write, it won’t compute | BrandeisNOW"
"132","2021-05-24","2023-03-24","https://computinged.wordpress.com/2021/05/24/call-for-special-issue-on-ct-in-early-childhood-guest-blog-post-from-wang-bers-and-lee/","In my blog post on what I got wrong in the 2010’s, I pointed to the many definitions of computational thinking (CT) that I had shared in this blog. I said that I hoped that I wouldn’t be offering any more, but I was probably wrong on that too. Below you will find (yet another) definition of CT, which is pretty intriguing. Early Childhood Research Quarterly Call for Papers Special Issue: Examining Computational Thinking in Early Childhood Guest Editors X. Christine Wang, State University of New York at Buffalo, wangxc@gmail.com Marina Bers, Tufts University, marina.bers@tufts.edu Victor R. Lee, Stanford University, vrlee@stanford.edu Described as the new literacy of the 21stcentury, computational thinking (CT) is broadly defined as systematic analysis, exploration, and testing of solutions to open-ended and often complex problems based on the analytical process rooted in the discipline of computer science. Driven by the increasing demands for computing professionals, CT has been popularized as a key goal of computer science teaching and learning in K-12 schools. On the one hand, much new research is currently exploring the relationships between CT and coding, CT in everyday unplugged activities, and CT and cognitive and socio-emotional domains of knowledge. On the other hand, there is also heated debate about the validity and applicability of CT, whether CT refers to a new set of competencies, and what value CT has in schooling. Because of the complicated nature of these explorations and conversations, CT has drawn considerable attention in educational research and practice, including early childhood education in recent years (Bers, 2018; Jung & Won, 2018; Toh et al., 2016; Xia & Zhong, 2018). To help advance this burgeoning area of research, this special issue seeks empirical and theoretical contributions about young children’s (ages 2-8) CT learning and teaching. We encourage researchers to explore, but not limit themselves to, one or more of the following topics: (1) Critical examinations of definitions and/or conceptualizations of CT in early childhood (2) Operationalizations of CT learning goals and practices in early childhood (3) Developmentally appropriate approaches in promoting CT in early childhood (4) Relationships between CT and other domains of learning and development (5) Assessment of CT learning and development in early childhood (6) Supports for early childhood educators who are bringing CT to young children (7) Equity and inclusion issues related to CT learning and teaching For this special issue, we are soliciting a wide range of manuscripts describing rigorous empirical studies, design studies, integrative reviews, theoretical perspectives, or evaluation studies. We welcome studies that employ diverse theoretical and methodological approaches. Submission Details We are inviting interested researchers to submit a short proposal prior to manuscript submission. The proposal should be no more than 500 words (excluding references, images, or figures) and must include the following information: (1) Title/Author(s), (2) Key Issues/Problems, (3) Methods/Processes, (4) Findings/Evidence-Based Claims, and (5) Relevance and Contribution to the Special Issue. Please submit your proposal via email to the Guest Editors with the subject line “ECRQ: CT in Early Childhood”: X. Christine Wang (wangxc@gmail.com), Marina Bers (marina.bers@tufts.edu), and Victor R. Lee (vrlee@stanford.edu). The guest editors will provide timely feedback and select proposed papers based on their quality and suitability for this special issue. Selected authors will then be invited to submit a full manuscript. All full manuscripts must be submitted via the EM system: https://www.editorialmanager.com/ecrq/default.aspx. After you log in and click on “Submit New Manuscript,” please select “VSI: CT in Early Childhood” on the “Select Article Type” page and proceed accordingly. Invitation to submit a full paper will not be a guarantee of acceptance. All manuscripts will undergo the standard ECRQ double-blind peer review procedure. For further information please contact Managing Guest Editor X. Christine Wang (wangxc@gmail.com) or Special Content Editor Gary Resnick (sevenalaris@msn.com). Deadlines Proposal submission: July 15, 2021 Invitation for manuscript submission: August 15, 2021 Manuscript Submission: December 15, 2021"
"133","2020-01-13","2023-03-24","https://computinged.wordpress.com/2020/01/13/computing-education-lessons-learned-from-the-2010s-what-i-got-wrong/","There’s a trend on Twitter over the last few weeks where people (especially the academics I follow) tweet about their accomplishments over the last 10 years. They write about the number of papers published, the number of PhD students graduated, and the amount of grant money they received. It’s a nice reflective activity which highlights many great things that have happened in the 2010’s. I started this blog in June 2009, so most of it has been written in the 2010’s. The most interesting thing I find in looking back is what I got wrong. There were lots of things that I thought were true, ideas that I worked on, but I later realized were wrong. Since I use this blog as a thinking space, it’s a sign of learning that I now realize that some of that thinking was wrong. And for better or worse, here’s a permanent Internet record. There are the easy ones — the ones I’ve been able to identify in blog posts as mistakes. There was the time I said Stanford was switching from Java to JavaScript. I should have fought for more CS in the K-12 CS Framework. And I should have been saying “multi-lingual” instead of “language independent” for years. And there was the blog post where I just listed the organizational mistakes I’d made. The more interesting mistakes are the ones that are more subtle (at least to me), that took me years to figure out, and that maybe I’m still figuring out: Creating pre-service CS teacher programs would be easy. I thought that we could create programs to develop more pre-service computer science teachers. We just needed the will to do it. You can find posts from me talking about this from 2010 and from 2015. I now realize that this is so hard that it’s unlikely to happen in most US states. My Blog@CACM post this month is about me getting schooled by a group of education faculty in December. We are much more likely to integrate CS into mathematics or science teacher programs than to have standalone CS teacher professional development — and even that will require an enormous effort. CS for All is about Access. I used to think that the barrier to more students taking CS was getting CS classes into high schools. You can find me complaining about how there were too few high school CS classes in 2016. I really bought into the goal of CS10K (as I talked about in 2014). By 2018, I realized that there was a difference between access and participation. But now we have Miranda Parker’s dissertation and we know that the problem is much deeper than just having teachers and classes. Even if you have classes, you might not get students taking them, or it may just be more of the same kinds of students (as the Roehampton Report has shown us). Diverse participation is really hard. Constructionism is the way to use computing in education. I grew up as a constructionist, both as a “technically precocious boy” and as a researcher. Seymour Papert wrote me a letter of recommendation when I graduated with my PhD. My post on constructionism is still one of the most-read. In 2011, I thought that the One Laptop Per Child project would work. I read Morgan Ames’ The Charisma Machine, and it’s pretty clear that it didn’t. The idea of building as a way of learning makes sense. It’s at the heart of Janet Kolodner’s Learning by Design, Yasmin Kafai’s work, Scratch, and lots of other successful approaches. But if you read Seymour carefully, you’ll see that his vision is mostly about learning mathematics and code, through teaching yourself code. That only goes so far. It doesn’t include everyone, and at the worst implementations of his vision, it leaves out teachers. I was in a design meeting once with Seymour, where he was arguing for making a new Logo implementation much more complicated. “Teachers will hate it!” several of us argued. “But some students will love it,” he countered. Seymour cared about the students who would seek out technical understanding, without (or in spite of) teachers, as he did. Constructionism in the Mindstorms sense only works for a small percentage of students, which is what Ames’ story tells us. Some students do want to understand the computer soup-to-nuts, and that’s great, and it’s worthwhile making that work for as many students as possible. But I believe that it still won’t be many students. Students care about lots of other things (from business to design, from history to geography) that don’t easily map to a focus on code and mathematics. I still believe in the value of having students program for learning lots of different things, but I’m no longer convinced that the “hard fun” of Logo is the most useful or productive path for using the power of computing for learning. I am less interested in making things for just a few precocious students, especially if teachers hate it. I believe in making things with teachers. The trick is to define Computational Thinking. Then there’s Computational Thinking. I thought that the problem was that we didn’t have a clear definition. If we had that, we could do studies in order to measure the value (if any) of CT. I blogged about definitions of it in 2011, in 2012, in 2016, and in 2019. I’ve written and lectured on Computational Thinking. The paper I wrote last Fall with Alan Kay, Cathie Norris, and Elliot Soloway may be the last that I will write on CT. I realized that CT is just not that interesting as a research topic (especially with no well-accepted definition) compared to the challenge of designing computation for better thinking. We can try to teach everyone about computational thinking, but that won’t get as far as improving the computing to help everyone’s thinking. Fix the environment, not the people. But I could be wrong on that, too."
"134","2018-02-19","2023-03-24","https://computinged.wordpress.com/2018/02/19/i-was-wrong-stanford-is-not-switching-to-javascript-from-java/","Last April, I wrote a blog post saying that Stanford was abandoning Java for JavaScript in their intro course (see post here). The post was initiated by an article in the Stanford Daily. The post caused quite an uproar, way more than I expected. More than one Stanford faculty member reached out to me about it. In particular, Marty Stepp told me that I was definitely wrong, that Stanford would mostly be teaching Java in a year. I promised that if I was wrong a year later, I would write another post correcting my first post. It’s been a year, and I was wrong. Stanford is NOT abandoning Java for JavaScript. I’m glad I was wrong, but it has nothing to do with Java or JavaScript. I heard about the possible switch to JavaScript several months before from a Stanford faculty member. When I saw the Stanford Daily article, I thought it was okay to talk about it. Marty told me at the time that I was wrong, and that the article was ill informed. Still another Stanford faculty member wrote me about the tensions over this issue. A lesson I learned from Mike Lach and others involved in the NGSS roll out is that all curricular decisions are political decisions. A framework might be based on scientific expertise, but what is actually taught is about choice and vision — different opinions of how we interpret where we are now and what we want in the future. If you haven’t heard about the politics of curricular choices before, I highly recommend Schoolhouse Politics. I am not at Stanford, so I don’t know how curricular decisions have been made and were made here. I based my post on talking with some Stanford faculty and reading the Stanford Daily article. I predicted that the forces pushing for JavaScript would end up changing the curriculum. They didn’t (or haven’t so far). The Stanford lecturers are excellent, and they are the ones actually teaching those classes. I’m glad that they get to continue teaching the classes the way that they think is most valuable. Below is what Marty wrote me about the courses at Stanford, and a link to the Stanford course offerings, showing that Stanford is still primarily a Java house: This calendar year our CS1 Java course is still quite clearly the dominant course. Nick Parlante is also teaching two smaller experimental offerings of a Python class in our winter and spring quarters. There may be another experimental JavaScript and/or Python course on the books for fall, but it certainly will not be the main class; the CS1 in Java will continue to be so throughout all of the next academic year. Currently no plan is under way to change that, though we certainly are open to evolving our courses in the long term like any other school would be. I would like to note that the state of intro at Stanford is exactly as was described to you by myself and others 10 months ago. http://explorecourses.stanford.edu/search?q=cs%20106a&view=catalog&academicYear&catalog&page=2&filter-coursestatus-Active=on&collapse"
"135","2017-04-21","2023-03-24","https://computinged.wordpress.com/2017/04/21/cs-department-updates-introductory-courses-java-is-gone/","See update here: Stanford is NOT switching from Java to JavaScript: I was mistaken Stanford has decided to move away from Java in their intro courses. Surprisingly, they have decided to move to JavaScript. Philip Guo showed that most top CS departments are moving to Python. The Stanford Daily article linked below doesn’t address any other languages considered. The SIGCSE-Members list recently polled all of their members to talk about what they’re currently teaching. The final spreadsheet of results is here. Python appears 60 times, C++ 54 times, Java 84 times, and JavaScript 28 times. I was surprised to see how common C++ is, and if Java is dying (or “showing its age,” as Eric Roberts is quoted below), it’s going out as the reigning champ. When Java came out in 1995, the computer science faculty was excited to transition to the new language. Roberts wrote the textbooks, worked with other faculty members to restructure the course and assignments and introduced Java at Stanford in 2002. “Java had stabilized,” Roberts said. “It was clear that many universities were going in that direction. It’s 2017 now, and Java is showing its age.” According to Roberts, Java was intended early on as “the language of the Internet”. But now, more than a decade after the transition to Java, Javascript has taken its place as a web language. Source: CS department updates introductory courses | Stanford Daily ADDENDUM: As you see from Nick Parlante’s comment below, the JavaScript version is only an experiment. From people I’ve talked to at Stanford, and from how I read the article quoted above (“more than a decade after the transition to Java, Javascript has taken its place”), I believe that Stanford is ending Java in CS106. I’m leaving the title as-is for now. I’ve offered to Marty Stepp that if CS106 is still predominantly Java in one year, I will post a new blog post admitting that I was wrong. Someone remind me in April 2018, please."
"136","2018-05-21","2023-03-24","https://computinged.wordpress.com/2018/05/21/computer-science-education-is-way-bigger-than-maker-education-a-post-in-lieu-of-a-talk-infyxroads/","I was scheduled to speak this Thursday in the final plenary panel of the Infosys Foundations USA CrossRoads 2018 conference (see program here). My father passed away on May 10, and we just had the funeral Friday May 18, so I apologized and cancelled the trip. I had already thought about what I wanted to say, so here’s a blog post in lieu of a panel presentation. The session is “Why Teach CS? Why Teach Making?” with Yasmin Kafai, Quincy Brown, and Colleen Lewis. The session was inspired in part by my blog post listing the reasons for teaching programming, and was framed in our preliminary discussions as a debate. Is there a difference between CS education and Maker education? Yasmin was tasked with making the argument that they are pretty much the same. I disagree with that position. Colleen was moderating, and Quincy was still keeping her cards close to her chest — I don’t know what position she’s going to take Thursday. If our goal is to teach the basics of programming, sure, maker education (where we teach students to make physical devices with embedded computation, such as e-textiles, robotics, or Lego Mindstorms devices) and the kind of computing education that I see reflected in the K-12 CS Framework is pretty much the same. There’s some CS education in there. Students learn the basics of sequential execution, conditionals, and looping. But that’s not the same as computer science education. If our goal is to change students attitudes towards technology, then sure, maker education may be even more effective than computing education for getting students to see the technology in their world. By making their own technology, students may increase their self-efficacy, and help them to feel that they can and should have control over the technology in their lives. But again, that’s not the same as teaching students computer science. The big ideas of computer science are much bigger than maker education. Here are three examples.  The questions that Alan Turing was trying to answer when he invented the Turing Machine were “What is computable? What are the limits of mathematics? What is not computable? Is even human intelligence computable?” These are as meta as you can get. This is the heart of computer science, as the science of abstraction. These aren’t ideas students currently explore in maker education. Maybe they could, but certainly don’t require a maker context. One of the most powerful ideas associated with Turing Machines is that any computer can simulate any other computer, including being many other computers with many processes. That’s the big idea that Alan Perlis was talking about in 1961 when he talked about computer science as the study of process. That’s one of the big ideas behind object-oriented programming as Alan Kay defined it. We don’t explore simulation in maker education, and it’s hard to imagine how we might.   Ada Lovelace was the world’s first computer programmer. More than that, she was the first to realize that computers were about programming anything. Quoting from her Wikipedia page: Ada saw something that Babbage in some sense failed to see. In Babbage’s world his engines were bound by number…What Lovelace saw—what Ada Byron saw—was that number could represent entities other than quantity. So once you had a machine for manipulating numbers, if those numbers represented other things, letters, musical notes, then the machine could manipulate symbols of which number was one instance, according to rules. It is this fundamental transition from a machine which is a number cruncher to a machine for manipulating symbols according to rules that is the fundamental transition from calculation to computation—to general-purpose computation—and looking back from the present high ground of modern computing, if we are looking and sifting history for that transition, then that transition was made explicitly by Ada in that 1843 paper. Maker education isn’t about general computation. It’s about computing associated with sensors and actuators. Computer science education is about computing everything, from numbers to letters to musical notes. Having to connect the computation to a device made by the student limits the space of what you might compute. Computer science is about representation and abstractions on representations. Everything can be defined in terms of bits. That’s a big idea. You can probably teach that concept in maker education, but it can be taught (and more easily) without tying it to maker education.  Most of us know Grace Hopper’s name today, but probably more for her iconic status and as the namesake for the Grace Hopper Conference than for what she actually did. Admiral Grace Hopper led the effort to create compiled programming languages, including (eventually) COBOL. There are so many big ideas in here, but let’s just take two. Bottomline: CS education is so much bigger than maker education. You can explore a lot of computer science using student-made devices as a context. Ben Shapiro has shown that he can have kids playing with powerful modern-day computing ideas from networking to machine learning, all using student-made devices. That’s serious CS education. But it’s not all of CS education, and you can do CS education apart from student-made devices. Maker and CS education are not one-to-one. There is an equity component here. We often talk about Ada Lovelace and Grace Hopper when we talk about the women who were part of the creation of computer science. We do them a disservice if we only remember them as early members of a category “women in computing.” It’s important to recognize what they actually did, what they contributed to computer science — and we should teach that. What Lovelace and Hopper did mattered, and we demonstrate that it mattered by teaching it and explaining why it’s important. Ideas like data representation and compilers are not today taught in maker education, are not easily taught in maker education, and can certainly be taught without maker education. The big ideas that Turing, Lovelace, and Hopper created and explored are not new. This shouldn’t be the realm of advanced CS any more. An important goal of computer science education should be to teach these foundational ideas of computer science. I don’t think we know how to get there yet, but that should be our goal. We should be teaching the computer science developed by the people we hold up as heroes, leaders, and role models. We can teach a lot with maker education, but let’s make sure that we don’t miss out on what CS education is about. Maker education is a great idea. It’s a terrific context for learning some of CS. If we only focus on the intersection of maker and CS education, we might miss the other, far bigger ideas that are in computer science."
"137","2017-10-18","2023-03-24","https://computinged.wordpress.com/2017/10/18/why-should-we-teach-programming-hint-its-not-to-learn-problem-solving/","This is a revision of the original post. Several readers pointed out on Twitter that my original post was insensitive. It read like an attack on Brenda, a woman of color, from a senior white guy (me). That was not my intent, and I apologize for that. I am grateful to Joseph P. Wilson who helped me understand how to avoid that impression. I can’t change the post that went out yesterday, but I will be more careful in future blog posts. At the CS for All Consortium Celebration Tuesday, Brenda Wilkerson gave the closing keynote. The full livestream of the CS for All Summit is available here, and it includes Brenda’s talk. I’m a huge fan of Brenda, and she’s done fabulous work in Chicago. She is a leader in bringing CS to All. I have not seen Brenda’s talk or any of the livestream. My experience of the Consortium Celebration was through reading the Twitter stream as I found time during the day. Brenda had one slide (which you can see in the tweet linked here) that I disagreed with, and because it’s an important point, I’m going to respond to it here. It says, “Computer science builds the mental discipline for breaking down problems, and solving them.” There are few studies that test this claim as “computer science,” but there have been lots of studies looking for transfer from teaching programming to general problem-solving skills. Probably the first study investigating this claim is Roy Pea and Midian Kurland’s paper On the cognitive effects of learning computer programming. You can find this claim in a paper by Henry Walker to which I responded in this blog. You can see it in posts all over the Internet, from this blog post to this article from a teacher in England. There is a strong belief out there that learning computer science, and programming called out specifically, leads to new problem-solving and “a new way to think.” There is simply not evidence in support of these claims. I talk about these in my book, I reference the Palumbo meta-review in this blog post, and NYTimes wrote about it this last spring. Like “learning styles” and “Latin teaches thinking,” this is a persistent myth that learning computing leads to problem-solving skills, and we have no support the claim. I tweeted in response to Brenda’s slide, and several CS teachers asked me, “So why teach programming or computing at all?” That’s a great question! Here are some of my top reasons: Certainly there are more reasons than these, and I’ve seen several in the response to this blog post, and some in the comments below. This was just one slide in Brenda’s talk. Her overall point was much more broader and more significant. I strongly agree with Brenda’s key point: CS for All is a social justice issue. Learning computing is so important that it is unjust to keep it from some students. Currently, CS is disproportionately unavailable to poorer students, to females, and to minority ethnic groups. We need CS for All."
"138","2015-02-23","2023-03-24","https://computinged.wordpress.com/2015/02/23/why-programming-in-a-non-majors-cs-course-is-unlikely-to-lead-to-computational-thinking-we-must-go-beyond-intuition-to-evidence/","The March 2015 issues of Inroads (linked here) has a special section on “The role of programming in a non-major, CS course.” I was disappointed by several of the articles in the special section for making arguments without empirical evidence, and decided to write my February Blog@CACM article on the need for evidence-based practice in computing education (see post linked here). I left out Henry Walker’s second article in the Blog@CACM post, and will discuss it here. In the first article, he argues against teaching programming because it would not leave enough time for other, more important topics. In the second one, he argues for teaching programming, if your learning objective is computational thinking. If a non-majors course in computer science seeks to help students sharpen their skills in computational thinking, then students must be able to write solutions precisely. Further, students must be able to analyze the correctness of solutions and compare alternative solutions. Such work requires precision in writing. English or another natural language allows precision, but does not require precision. Like in his first article, Henry offers no evidence for his claims. I do agree that programming requires greater precision than natural language. Henry argues for a value of the use of programming that is not supported by our research evidence. If defined in sufficient detail, pseudo-code can enforce rigorous thinking, but pseudo-code cannot be run to check correctness or test efficiency. Ultimately, the use of a programming language is essential if computing courses are to help students sharpen their problem-solving skills. In the decades of studies that have tried to find such transfer, the research evidence is that computing courses do not help students sharpen their problem-solving skills. I am not aware of studies that have rebutted David Palumbo’s 1990 review of the literature on programming and problem-solving (see paper reference here). It is possible to teach problem-solving skills using programming, but students do not gain general problem-solving skills from computing courses (with or without programming). Henry’s evidence that this does happen is an anecdote: An upper-level political science major who took my introductory computer science course indicated that her logical thinking in computer science had a clear payoff when she put arguments together for her papers in political science. As a rationalization for a teaching decision, this is weak evidence. It’s self-report from a single student. The student probably did learn something interesting and useful from the class. Maybe the student did gain in logical thinking. Given the preponderance of evidence against general problem-solving skills coming from a programming class, I’m skeptical. Maybe she just saw her existing skills in a new light because of the computer science class — a useful learning outcome. In any case, is the positive experience of one student justification for designing a course for dozens or hundreds? The conclusion of my Blog@CACM post still applies here. We don’t know what non-CS majors need or what they can learn. We shouldn’t just guess, because our intuition is very likely wrong — and it’s dangerous, since our experience (as mostly white, mostly male, CS faculty) is so different than those of most non-CS majors. We need the humility to admit that we don’t know. We must seek out evidence to inform our decision-making."
"139","2019-12-23","2023-03-24","https://computinged.wordpress.com/2019/12/23/whats-unique-about-cs-education-compared-to-other-dbers/","I was recently asked by an NSF program officer to answer the questions, “What makes CS education different than other discipline-based education research (DBER, like math ed, physics ed, or engineering ed)? What research questions might we ask (that we might not currently be asking) to improve practice in CS education?” If I’m going to write a long-form email reply, I might as well make it a blog post. I’m using the specific term, computer science education, not my preferred and more general computing education because the question was framed specifically about CS programs, not necessarily about information technology, information systems, cybersecurity, or other computing programs. Computer science education research has a quadruple-whammy right now that isn’t facing any other DBER that I know: The result is that we’re providing CS education to many students with few resources (teachers) and without a whole lot of data or use of evidence-based methods. From a research perspective, it’s also interesting that lots of students are resisting CS education — which is pretty common across STEM education. Students complain about algebra, calculus, physics, chemistry, and so on. The interesting twist is that students resisting CS ed are also then resisting the economic benefits, which makes it a bit more intriguing to study. The incentives are there, but many students still find the costs greater than the benefits. Some of the research questions that I find interesting which are unique to CS education research: With this post, I’m taking a break from the blog, both for the holidays and to deal with some intense proposal writing. It’s been an exciting year. I’m going to end with a picture from the recent Georgia Tech PhD graduation ceremony. Not only did I get to hood Dr. Miranda Parker, but Barbara and I watched our son, Dr. Matthew Guzdial, get his doctoral hood. It’s a nice bright spot to close out the year. I wish you a happy holiday season and a successful 2020."
"140","2019-02-22","2023-03-24","https://computinged.wordpress.com/2019/02/22/the-cambridge-university-press-handbook-of-computing-education-research-now-available/","After a long haul, it’s finally available. The snazzy promotion flyer is here (with discount code). You can order the book from the Publisher here. Or get it from Amazon here. I was an author of one chapter (on computing in other disciplines) and co-author with Ben du Boulay on the history chapter. While the overall process was hard work, it was enormous fun to work with Ben. I’ve read his work for many years (he invented the concept of a notional machine), but we still haven’t met face-to-face. Ben knows all of this literature on the European side of CER that I’m not well versed in, and he’s a delight to work with. I learned a lot and so enjoyed the process. This Handbook describes the extent and shape of Computing Education research today. Over fifty leading researchers from academia and industry (including Google and Microsoft) have contributed chapters that together define and expand the evidence base. The foundational chapters set the field in context, articulate expertise from key disciplines, and form a practical guide for new researchers. They address what can be learned empirically, methodologically and theoretically from each area. The topic chapters explore issues that are of current interest, why they matter, and what is already known. They include discussion of motivational context, implications for practice, and open questions which might suggest future research. The authors provide an authoritative introduction to the field and is essential reading for policy makers, as well as both new and established researchers."
"141","2018-04-06","2023-03-24","https://computinged.wordpress.com/2018/04/06/how-do-students-learn-the-notional-machine-developing-a-mental-model-of-program-behavior/","“To understand a program you must become both the machine and the program” – Perlis 1982, cited in Sorva 2013 I’ve been thinking for a few years now about an open research question in computing education. How do students come to understand how programs work? Put in a more technical way, How do students develop their mental model of the language’s notional machine? I have been thinking about this question in terms of Ashok Goel’s Structure-Behavior-Function (SBF) model of how people think about systems. There are studies of students learning notional machines (e.g., Raymond Lister and Juha Sorva are some of the top researchers here). What I don’t know is how it develops and how to help it develop. Lister tells us the stages of development (e.g., of tracing skill). Sorva tells us about theories of how to teach the notional machine, but with little evidence. We have models for how people learn to read and write code (e.g., Elliot Soloway’s plans). But we not have a cognitive model for how they develop a mental model of how the code works. I’m teaching Media Computation (n=234) this semester, and students had a disappointing performance on two programming problems on a recent quiz. (We have a 30 minute quiz every other week.) They didn’t really bomb, but an average of 82% on one programming problem (Problem #3 below) and 76% on the second (Problem #4) was lower than I was hoping for. Those are all mostly due to partial credit — only 25 of my 234 students got full credit on Problem #4. Worse yet, we had a “simple” matching problem where we offered four pictures and four programs — which program generated which picture? More than half the students got at least two wrong. The score on the matching problem was 72%, even lower than the programming task problems. My conclusion is that my students can’t yet read code and understand it. How do I teach my students to understand code? With my researcher hat on, I don’t have a solid answer. With my teacher hat on, I have to do something. So, I drew on what I know from the research to come up with a best guess solution. I decided to drop the next two lecture topics from the schedule, to instead re-focus on manipulation of pictures. I know from the learning sciences literature that it’s much better to go deeper than broader. Teaching for mastery is more important than teaching for coverage. Things that students know well are more likely to persist and transfer than things that students are merely familiar with. I decided to do a live-coded session revisiting the quiz. I had graded a bunch of the programming problems on the quiz. I saw several different strategies for solving those two problems. I had a unique teachable moment here — every student had attempted these two problems. They were primed for the right answer. I decided to solve the problems in a live-coding session (starting from a blank editor, and talking aloud as I wrote the code) in each of the ways that I saw students doing it — three ways for the first problem, four ways for the second problem. While I wrote, I drew pictures to describe the behavior, drawing from Sorva’s visualization approach and the SILC emphasis on sketching rather than diagrams. After writing each program, I tested it on a picture. Along the way, I answered questions and wrote additional examples based on those questions. This idea is based on Marton’s Variation Theory. You have to vary critical aspects of examples for students to figure out the differences. Janet Kolodner talks about a similar idea when she emphasizes contrasting cases for learning informed by case-based reasoning. In SBF terms, I was keeping the Function constant, but varying the Structure and Behavior. In Goal-Plan-Code terms, I was achieving the same Goal, but varying the underlying Plan and Code. Could an exploration of these variations/contrasts help students see how the code changes related to behavior changes? I don’t actually know how to evaluate the result as a researcher, but as a teacher, I got good response from students. I’m looking forward to seeing how they do on similar problems on future quizzes. The rest of this blog post is a static replay of the lecture. I’ll show you the slides I showed, the sketches I made, and the code I wrote (while talking aloud).     A student asked, “Could we do x first and then y?” Sure! At this point, I asked students to turn to the person next to them and ask, “Which one do you prefer? Which makes the most sense to you?” I always encourage students to discuss during peer instruction questions. I have never had such an explosion of noise as I did with this invitation. From wandering around the room, what I heard students discussing was, “This is what I did, and this is what I got wrong.” When we had the whole class discussion, the first and third approaches (all pixels or coordinates) were the preferences. Students who spoke up disliked the index approach — it felt “like there’s too much indirection” (said one student).     At this point, someone said that they did it by subtracting y from the height. I showed them that this approach mirrors. This is the first incorrect solution that I demonstrated. This was an unusual approach that I saw a few students try: They used nested loops to iterate through the bottom 2/3 of pixel coordinates, and then compute the top 1/3 to copy down. They iterated through the target and computed the source.  After I wrote that program, someone asked, “Couldn’t you make an empty picture and copy the top third into the new picture at the top and bottom?” With her guidance, I modified the program above to create a new version, which does exactly as she describes, leaving the middle third blank. So, this was the second incorrect version I wrote to respond to student queries. When I asked students a second time which version made the most sense to them, there was a bigger split. Indexing the array continued to be the least preferred one, but students liked both versions with nested loops, and many still preferred the first version."
"142","2016-10-21","2023-03-24","https://computinged.wordpress.com/2016/10/21/how-can-teachers-help-struggling-computationalists/","My Blog@CACM post for this month is about imagining the remedial teaching techniques of a school-based “Computing Lab” in the near future. It’s becoming obvious that computing is a necessary skill for 21st Century professionals. Expressing ideas in program code, and being able to read others’ program code, is a kind of literacy. Even if not all universities are including programming as part of their general education requirements yet, our burgeoning enrollments suggest that the students see the value of computational literacy. We also know that some students will struggle with computing classes. We do not yet have evidence of challenges in learning computation akin to dyslexia. Our research evidence so far suggests that all students are capable of learning computing, but differences in background and preparation will lead to different learning challenges. One day, we may have “Computing Labs” where students will receive extra help on learning critical computational literacy skills. What would happen in a remedial “Computing Lab”? It’s an interesting thought experiment. Source: Designing the Activities for a “Computing Lab” to Support Computational Literacy | blog@CACM | Communications of the ACM I list several techniques in the article, and I’m sure that we can come up with many more. Here’s one more each DO and DON’T for “Computer Lab” for struggling computationalists. "
"143","2020-10-19","2023-03-24","https://computinged.wordpress.com/2020/10/19/social-studies-teachers-using-programming-for-data-visualization-an-fie-2020-paper-preview/","The Frontiers in Education (FIE) 2020 conference starts Wednesday October 21 in Uppsala, Sweden — see program here. My student Bahare Naimipour will be presenting our paper “Engaging Pre-Service Teachers in Front-End Design: Developing Technology for a Social Studies Classroom” (see preprint here) by Bahare, me, and Tammy Shreiner. This work came long before the NSF work that we just got funded for (see blog post here), but it’s in the same line of research. The paper is about two of our participatory design sessions with pre-service social studies teachers in Tammy’s class on data literacy. In both of these sessions, we asked teachers to program in JavaScript or Vega-Lite to build a visualization, and in the second one, we also introduce CODAP, a visualization tool explicitly designed for middle and high school students. The paper is less about the technology and more about what the teachers told us about what they thought about tools for visualization in their class. Social studies teachers are such an interesting group to study. They’re not particularly interested in STEM, data, or computers. They want to teach social studies. Very few of our participants had ever seen any code. (One told us, “This looks a lot like setting up my MySpace page in middle school!”)They’re only interested if we can help them teach what they want to teach. It’s a hard audience to engage, in all the right ways. I’m going to highlight just two lessons we learned here: First: The results from the two participatory design sessions were remarkably different. Participatory design isn’t a “okay, we did that — check off the box” methodology. Each group of participants can be remarkably different. There’s no generalization here. Each session is useful, but I don’t know how many sessions we’d have to do to get anywhere near saturation. That’s okay — we learned design lessons from each session. Second: There is no one answer to how teachers think about programming. I have heard from many people that teachers find programming hard (see this CACM Blog post about that discussion), and I’ve hypothesized that to be true in this blog (see this post). So, now I’ve been in the room as social studies teachers have their first programming experiences and interviewing them afterwards, and….it’s complicated. Teachers tell us often in our sessions that programming is overwhelming, but several teachers also told us that CODAP (explicitly designed for their use, and not a programming tool) was overwhelming. The question is whether it’s worth the complexity — and for whom. We get contradictory responses from the teachers, which we report in this paper. One told us that she wanted a simpler tool for herself and JavaScript for her students: “I don’t mind keeping life simple for me, but I wanted to challenge my students and give them useful, new skills.” Another teacher told us the opposite: “I would like Java[script] because it would let me do more to the visualization. Vega-lite would be better for students because it seems far more simple.” We couldn’t fit in all the great stories and insights from these two participatory design sessions. Like the teacher who wants JavaScript in her class because, “That’s similar to what they use in math and science, right? I don’t want history to be the ‘dumbed-down’ programming.” I found that surprising, and wondered what the teachers would think of a block-based language. Another teacher told us that she wants to use programming in her history class, “Because maybe that would make history ‘cool.’” One of the tensions I found most interesting in these sessions was between the desire to know the tools and be comfortable in front of the class, and the desire to push their students to learn more. Some teachers told us that they preferred CODAP to any programming tool because they would be embarrassed to get a syntax error in front of their kids, which they realized would always be possible when programming. Other teachers told us that they were more concerned with going beyond basic tools — (paraphrasing one comment we received), “My students will already know Excel and Google Sheets. I want them to do more in my class.” Our work is ramping up now. We had another PD session with pre-service teachers in March, just before pandemic lockdown, which was our first one with our data visualization tool in the mix. We’ve just held our first workshop in August for in-service (practicing) teachers. We’ve got more workshops planned over the next year. You’ll likely be hearing more from these studies in future posts."
"144","2020-03-09","2023-03-24","https://computinged.wordpress.com/2020/03/09/defining-ourselves-out-of-existence-have-we-made-cs-too-hard-to-learn-and-teach/","It was this quote in a tweet from Miles Berry that really made me sit up and take notice of the latest news about the Computing at School initiative: “If computing increasingly means CS, it looks likely that hundreds of thousands of students, particularly girls and poorer students, will be disenfranchised from a digital education over the next few years.” He was quoting an article from the New Statesman which can be found here. It describes the history of the rise of the CS curriculum in England. The key paragraph for me is: The new curriculum was failing. While a tougher course had been introduced, few students were taking it and even fewer teachers could teach it. In many cases, even those who could felt uncomfortable doing so. The government read the reports and has decided to respond. There’s now an enormous investment in England in trying to train new teachers. The question is whether that’s the right investment. Meanwhile, in Scotland, the headline of this May 2019 article is “Teachers and students in decline: the computing ‘crisis’ in Scotland’s schools.” Experts are urging the Scottish Government to take radical steps to boost computing science education to prevent the subject from being squeezed out of schools. The teaching of computing in schools is in “crisis”, practitioners have told The Ferret, with classes shrinking and teachers in short supply. The latest official data shows that the number of children studying the subject declined last year, while the number of teachers has fallen over the last decade. Despite a national focus on delivering science and technology education and economic development, schools are finding it increasingly difficult to teach computing science to young people, critics say. Let’s explicitly consider the questions raised in these two articles. Have we defined CS education in such a way that it’s too hard to teach? That it’s not interesting to learn? Maybe that it’s too hard to learn? I’ve been writing in the last few months about the surprisingly low uptake of CS education in the United States (for example, in this CACM Blog post). No more than 5% of high school students in any US state are getting any CS classes, from the data available. There is value in setting high standards for CS education (as Alan Kay has been arguing), but that’s an argument for the end goal. Where do we start with CS education? How quickly can and will students learn CS education? What does it mean for something to be too hard to teach or too hard to learn? Overall, US is following a similar strategy as in England and Scotland for computing in K-12: standalone CS classes, heavy emphasis on in-service teacher development, and counting the number of students in CS classes and the number of teachers leading those classes. There is integrated CS in the US, but as far as I know, no state is tracking those numbers. Public policy tends to focus on things that can be measured. Most of the argument against integration says that too little CS is covered in integrated forms. 95% of US students getting no CS at all is even less coverage than CS in integrated forms. Let’s consider two hypotheses: Hypothesis #1: We know how to teach computer science in such a way that all students can learn what they need to be technically-literate citizens, or even to develop the prerequisite knowledge they need to be software professionals. We have not yet achieved this goal because we do not have enough teachers to implement the curriculum. Larger investments in teacher development (perhaps including stipends or better pay to CS teachers) would allow us to scale CS Ed to reach everyone. Hypothesis #2: We have defined computer science education in a way that is too hard to teach (so too few teachers are unwilling to teach it), and that is too hard to learn (which includes not being motivating enough to recruit students or engage student interest in order to achieve learning). Given the evidence we have in the US, England, and Scotland, which hypothesis is better supported? You may have a Hypothesis #3 or #4 which is also well-supported by the evidence — I am very interested in hearing it. In general, we tend to take the “insider view” of CS Ed, as Kahneman warned about (see excerpt here). If you step outside CS Ed, are we making progress along a trajectory that leads to CS education for all? And how long is that trajectory? If you were an Education faculty member and learned that CS had less than 5% of US high school students enrolled, wouldn’t it be reasonable to consider it a fad and likely to pass? As I wrote in my blog post about what I got wrong in the last decade, I no longer think that CS for All is a matter of access. We have to figure out how to improve participation. I’m in support of Hypothesis #2. We need to re-think what and how we teach CS education. Because of my work these days, I suspect that we made a mistake at the design level. I was involved in the early days of the AP CS Principles (AP CSP) process. Most of the AP CSP curricula I’m aware of were developed by and tested with some of the best CS teachers in the US. That design and development process doesn’t promise a curriculum that many teachers can teach and that most students will learn from. I just got back from a three day visit in Norway, where they are about to roll-out an integration of CS activities (explicitly programming) into mathematics, science, music, and arts & crafts classes. (See workshop about this topic here.). Maybe that would result in more students learning some computer science. Did US, England, and Scotland make a mistake by emphasizing standalone CS classes over integration?"
"145","2019-01-21","2023-03-24","https://computinged.wordpress.com/2019/01/21/standards-are-limiting-and-long-lasting-alan-kay-was-right/","Through the K-12 CS Framework process (December 2016, see the post here), Alan Kay kept saying that we needed real computer science and that the Framework shouldn’t be about consensus (see post here). I disagreed with him. I saw it as a negotiation between academic CS and K-12 CS. I was wrong. Now that I can see standards efforts rolling out, and can see what’s actually going into teacher professional development, I realize that Alan was right. Standards are being written to come up to but rarely surpass the Framework. All those ideas like bits and processes that I argued about — they were not in the Framework, so they are not appearing in Standards. The Framework serves to limit what’s taught. Teachers are experts on what is teachable, but that’s not what a Framework is supposed to be about. A Framework should be about what the field is about, about what’s important to know. Yes, it needs to be a consensus document, but not a consensus about what goes into classrooms. That’s the role of Standards. A Framework should be a consensus about what computing is. I think what drove a lot of our thinking about the Framework is that it should be achievable. There was a sense that states and organizations (like CSTA and ISTE) should be able to write standards that (a) meet the Framework’s goals and (b) could be measurably achieved in professional development — “Yup, the teachers understand that.” As I learn about the mathematics and science frameworks, it seems that their goal was to describe the field — they didn’t worry about achievable. Rather, the goal was that the Framework should be aspirational. “When we get education right for all children, it should look like this.” Standards are political documents (something Mike Lach taught me and that Joan Ferrini-Mundy told ECEP), based on Frameworks. Because the K-12 CS Framework is expected to reflect the end state goal, Standards are being written a step below those. Frameworks describe the goals, and Standards describe our current plans towards those goals. Since the Framework is not aiming to describe Computer Science, neither do the state Standards that I’m seeing. I told Alan about this realization a few weeks ago, and then the Georgia Standards came out for review (see page here). They are a case in point. Standards are political documents. It matters who was in the room to define these documents in this way. Here’s the exemplar standard from the Grade 6-8 band: Use technology resources to increase self-direction and self-regulation in learning, including for problem solving and collaboration (e.g., using the Internet to access online resources, edit documents collaboratively) Can technology resources increase self-direction and self-regulation in learning? Maybe — I don’t know of any literature that shows that. But even if it can, why are these in the Computer Science standards? The K-2 band comparable Standard is even more vague: Recognize that technology provides the opportunity to enhance relevance, increase confidence, offer authentic choice, and produce positive impacts in learning. I have no idea if computers can “increase confidence,” but given what we know about self-efficacy and motivation, I don’t think that’s a common outcome. Why is this in the Computer Science Standards? There are lots of uses of the word “information.” None of them define information. The closest is here (again, grades 6-8), which lists a bunch of big ideas (“logic, sets, and functions”) but the verb is only that students should be able to “discuss” them: Evaluate the storage and representation of data; Analyze how data is collected with both computational and non-computational tools and processes What’s missing in the Framework is also missing in the Georgia standards. There are strange phrases like “binary language,” which I don’t understand. This is from Georgia, where there is a strong video game development lobby. Thus, all students are expected (by Grades 6-8) to: Develop a plan to create, design, and build a game with digital content for a specific target market. And Develop a visual model of a game from the Game Design Document (GDD). And Create a functional game, using a game development platform, based on the storyboards, wireframes, and comprehensive layout. It’s clear that the Georgia Standards are the result of a political process. The bottom line is that I now wish that we had made sure that the K-12 CS Framework reflected computer scientists’ understanding of Computer Science. It instead reflected K-12 classroom computer science as defined in 2016. They presume languages like Scratch and curricula like AP CS Principles. That’s reasonable in Standards that describe what goes into the classroom tomorrow, but Frameworks should describe a broader, longer-range thinking. Our There are no plans that I’m aware of to define a new Framework. The Standards are still just being developed for many states, so they’re going to last for years. This is what Computer Science will be in the United States for the next couple decades, at least."
"146","2016-10-18","2023-03-24","https://computinged.wordpress.com/2016/10/18/k-12-cs-framework-best-as-we-can-expect-maybe-as-good-as-we-need/","The CS K-12 Framework was released Monday. This has been an 11 month long process — see first blog post about the framework, first blog post on the process, and the post after my last meeting with the writers as an advisor. The whole framework can be found here and a video about the framework can be found here:  A webinar about the Framework will be held on Wednesday, October 19, at 12 PM Pacific / 3 PM Eastern. Visit https://www.youtube.com/watch?v=wmxyZ1DFBwk for more details and to watch the webinar on the 19th. I believe that this framework is about as good as we can expect right now. Pat Yongpradit did an amazing job engaging a broad range of voices in a short time. The short time frame was forced on the process by the state policymakers who wanted a framework, something on which they could hang their state standards and curricula. The NGSS veterans did warn us what could happen if we got it wrong, if we went too fast. Maybe the framework process didn’t go too fast. The framework document is impressive — comprehensive, carefully constructed, with a rich set of citations. It’s teacher-centric, which may not be the best for a document to inform state standards, but that’s the constituency with the strongest voice in CS Ed today. There are too few CS Ed informed policymakers or district administrators to push back on things that might not work work. The CS Ed researchers are too few and too uncertain to have a strong voice in the process. Computer scientists (both professional and academic) generally ignored the process. The CS teachers had the greatest political influence. I predicted in January that this would be a “safe list,” a “subset of CS that most people can agree to.” I was wrong. There’s a lot in there that I don’t see as being about computation. Like “Create team norms, expectations, and equitable workloads to increase efficiency and effectiveness” — that’s a high school computing recommendation? Like “Include the unique perspectives of others and reflect on one’s own perspectives when designing and developing computational products” — you can achieve that in high school? Those “aspirational” statements (Pat’s word) mean that the writers went beyond defining a consensus document. They tried to push future CS education in the ways that they felt were important. Time will tell if they got it right. The framework fails if schools (especially under-resourced schools) decide that it’s too hard and give up, meaning that underprivileged kids will continue to get no CS education. If teachers and administrators work harder to provide more and better CS education because of this document, then the framework writers win. This is an important document that will have a large influence. Literally, millions of schoolchildren in several states are going to have their CS education defined by this document. Typing that statement gives me such a sinking feeling because we just don’t have the research evidence to support what’s in the framework. When I went to meetings, I too often heard, “Of course, teachers and students can do this, because it works in my program.” So few computing education programs (e.g., packages of curriculum, professional development, assessment, and all the things teachers need like pacing guides and standards crosswalks) have scaled yet in diverse populations. Maybe it works in your program. But will it work when it’s not your program anymore? When it’s a national program? When states and districts take it over and make it their own? Will it still work? And we want schools and districts to make things their own. That’s at the heart of the American educational system — we’re distributed and diverse, with thousands of experiments going on at once. I worry about how little knowledge about computing and computing education is out there, as guidance when schools and districts make it their own. So, yeah, I’m one of those uncertain researchers, mumbling in the corner of this process, worrying, “This could go so wrong.” Maybe it won’t. Maybe this will be the first step towards providing a computing education for everyone. The die is cast. Let’s see what happens. "
"147","2015-12-04","2023-03-24","https://computinged.wordpress.com/2015/12/04/the-tech-industry-consensus-and-changing-the-education-canon/","My most recent Blog@CACM post is on the K-12 CS Education Framework stakeholder’s meeting I attended last month in Chicago — see link here. The parts of the meeting where I learned the most were the first three talks, from Michael Lach, Heidi Schweingruber, and Michael Gilligan on mathematics and science education standards and what those efforts have to teach us in computer science. That’s what I wrote the Blog@CACM post on. At the break, I congratulated Mike Lach on an excellent talk. I told him that I appreciated his message that we have to go slow. The CS education effort is the first attempt in decades to change the American Education Canon — what we teach everyone in US public schools. He agreed, and pointed out that the last time we changed the canon was in response to the Civil Rights Movement. I was confused. He explained that the Civil Rights Movement led to the creation of the African-American History Month. That’s the last time that something got added to all US elementary schools. He said that we should be glad that there’s not that kind of anger and violence fueling the push for CS education — but on the other hand, there’s also not that same kind of consensus about the importance of CS education. Consider the two recent Google-Gallup poll reports. From one, we learn that parents think that computer science is about applications and Web search (see report here). In the second, we learn that parents (once they are told what computer science really is) want it for their kids, but administrators and principals are less enthusiastic (see report here). Commentators on the latter report have interpreted the result as suggesting that school leaders “underestimate demand” (see article here) and may be out of touch with what parents want. There’s another way to read these two reports together. Parents don’t really know what CS is, and they don’t understand what they’re trading off when they say that want CS education. They want their kids to know CS, but at what cost? School leaders have to deal with implementation issues, and they don’t see enough demand for computing education to give it a slice of their meager budgets. Computing education is being discussed today because of the technology industry. We would not be talking about CS in K-12 without technology industry needs. It’s the NYC tech industry who pushed for the initiative there (see their open letter). It’s the tech industry funding Code.org (see funders here). That’s not necessarily a bad thing to have the tech industry funding the effort to put computer science in schools, but it is a different thing than having a national consensus about changing public school education to include computer science. What I hear Mike Lach and others in mathematics and science education saying is that we need to build consensus if we want the implementation of CS education in schools to succeed."
"148","2020-07-20","2023-03-24","https://computinged.wordpress.com/2020/07/20/proposal-1-to-change-cs-education-to-reduce-inequity-teach-computer-science-to-advantage-the-students-with-less-background/","This is my second post in a series about how we have to change how we teach CS education to reduce inequity. I started this series with this post, making an argument based on race, but might also be made in terms of the pandemic. We have to change how we teach CS this year. The series has several inspirations, but the concrete one that I want to reference back to each week is the statement from the University of Maryland’s CS department: Creating a task force within the Education Committee for a full review of the computer science curriculum to ensure that classes are structured such that students starting out with less computing background can succeed, as well as reorienting the department teaching culture towards a growth mindset We as individual computing teachers make choices that influence whether students with less computing background can succeed. I often see choices being made that encourage the most capable students, but at the cost of the least prepared students. Part of this is because we see ourselves as preparing students for top software engineering jobs. The questions that get asked on technical interviews explicitly drive how many CS departments teach algorithms and theory. We want to encourage “excellence.” But whose excellence do we care about? Is Silicon Valley entrepreneurial perspectives the only ones that matter? The goal of “becoming a great software engineer” does not consider alternative endpoints for computing education (see post here). Not all our students want those kinds of jobs. Many of our students are much more interested in giving back to their community, rather than take the Silicon Valley jobs that our programs aim for (see post here). Please don’t teach students as if they are you. First, you (as a CS teacher, as someone who reads this blog) are wildly different than our normal student. Second, your memories of how you learned and what worked for you are likely wrong. Humans are terrible at reconstructing how their memory was at a prior time and what led to their learning. That’s why we need research. In this post, I will identify four of the methods that are differential, that advantage the students with less computing background — there are many more: When I talk to computer science teachers about peer instruction and how powerful it is for learning, the most common response is, “Oh, we already do that.” When I press them, they tell me that they “have class discussions” or “use undergraduate teaching assistants.” Nope, that’s not peer instruction. Peer instruction (PI) is a technical term meaning a very specific protocol. Digital Promise and UTeach are creating a set of CS teaching micro credentials, and the one that they have on PI defines it well (see link here). PI is where the teacher poses a question for the class for individual responses, students discuss their answers, students respond again, and the teacher reveals the answer and explains the answer. The evidence suggesting that PI really works is overwhelming, and it can be used in any CS class — see http://peerinstruction4cs.com/ for more information on how to do it. I use it regularly in Senior-level undergraduate courses and graduate courses. There are ways to do PI when teaching remotely, as I talked about in this post. I’m highlighting PI because the evidence suggests that it has a differential impact (see study here). It doesn’t hurt the top students, but it reduces failure rate (measured in multiple CS courses) for students with less background (see paper here). That’s exactly what we’re looking for in this series — how do we improve the odds of success for students who are not in the most privileged groups. I blogged last year about a paper (see post here) that showed female, Black, Latino/Latina, and first-generation students take CS because they want to help society. These students often do not see a connection between what’s being taught in CS classes and what they want. That’s because we often teach to prepare students for top software engineering jobs — it’s a mismatch between our goals and their goals. I don’t know if this is an issue in upper-level classes. Maybe students in upper-level classes have already figured out how CS connects to their goals and values. Or maybe we have already filtered out the CS students who care about community values by the upper-level and graduate courses. CS can certainly be used to advance social goals and community values. Teach that. In every CS class, for everything you teach, explain concretely how this concept or skill could be used to advance social good, cultural relevance, and community values. If you can’t, ask yourself why you’re teaching this concept or skill. If it’s just to promote a Silicon Valley jobs program, consider dropping it. We are all revising our classes this summer for fall. It’s a good time to do this review and update. Parsons problems (sometimes referred to as “mixed-up code problems”) are where students are given a programming problem, and given all the lines of code to solve the problem, but the lines are scrambled (I usually say “on refrigerator magnets”). The challenge is to assemble the correct program. My wife, Barbara Ericson, did her dissertation work (see post here) showing that Parsons problems were effective (led to the same learning as writing the programs from scratch or from debugging programs) and efficient (low time cost, low cognitive load). She also invented dynamically adaptive Parsons problems which are even better (for effectiveness and efficiency) than traditional Parsons problems. Parsons problems work on-line, so they fit into remote teaching easily. I’ve been doing paper-based (and Canvas-based) Parsons for exams and quizzes for several years now (see post here). Parsons problems work great in lower-level classes. There is relatively little research on using them in upper-level and graduate courses — I suspect that they could be useful, if only to break up the all-coding-all-the-time framing of CS classes. I’m highlighting Parsons problems for two reasons. Subgoal labelling is pretty amazing (see Wikipedia page). Even our first experiment with subgoal labelling for CS worked examples (see post here) has shown improvements in learning (measured immediately after instruction), retention (measured a week later), and transfer (student success on a new task without instruction). Since then, Lauren Margulieux, Briana Morrison, and Adrienne Decker have published a slew of great results. The one that makes it on this list is their most recent finding (see post here). Subgoal labeling in an introductory computing course, compared to one not using subgoal labeling, led to reduced drop or failure rates. That’s a differential benefit. There was not a statistically significant improvement on learning (measured in terms of exam scores), but it kept the students most at risk of failing or dropping out in the course. That’s teaching to advantage the students with less background in computing. We don’t know if it works for upper-level or graduate classes — my hypothesis is that it would."
"149","2018-11-30","2023-03-24","https://computinged.wordpress.com/2018/11/30/is-liveness-a-critical-factor-in-learning-computer-science-context-motivation-and-feedback-for-learning-programming/","My CACM Blog post for November is on the topic of Direct Instruction, why it’s better than Discovery Learning, and how we should teach programming “directly.” I wonder about the limitations of Direct Instruction. I don’t think everything can be learned with direct instruction, even with deliberate practice. At SIGCSE 2016, John Sweller made a provocative claim (that I haven’t yet found in his published papers). He said that humans must be able to learn higher-order thinking skills. We’d be dead if we didn’t. However, we cannot teach them. Students have to figure them out from experience. Is programming a similar kind of task? I have been studying Spanish on a streak of over 600 days in DuoLingo now. DuoLingo is the best direct instruction I’ve ever had. Everything I do is deliberate practice — it’s really good at figuring out what I’m not good at, and giving me more problems on that. I am nowhere near fluent. I know some words. I can read some. I’m getting better at hearing. I am not fluent. Maybe learning natural and programming languages both require more than direct instruction. What leads to fluency, in natural languages or programming languages? I suspect that part of it is context and motivation. You have to be in a position to want to say something (in a natural or programming language) in order to learn it. But I also think it’s about feedback. I don’t really learn Spanish well because I’m rarely in a position to use it. If I did, I’d get a response to what I said. Can anyone learn to program without trying to write some code and getting feedback on whether it works? The issue of feedback came up several times in the recent discussion about the relationship between teaching programming and teaching composition. Steven Tanimoto talks about the value of “liveness” in a programming environment (see paper here), which is about the ease of writing code and getting different kinds of feedback on the code. Maybe Liveness encapsulates the kinds of things we need for successful CS learning. Of course, even “liveness” doesn’t give the kind of feedback that a human reader can, but it does shorten the feedback timing loop.  "
"150","2016-11-09","2023-03-24","https://computinged.wordpress.com/2016/11/09/designing-for-wide-walls-with-contextualized-computing-education/","Nice blog post from Mitchel. The wide walls metaphor is an argument for contextualized computing education. Computing is a literacy, and we have to offer a variety of genres and purposes to engage students. But the most important lesson that I learned from Seymour isn’t captured in the low-floor/high-ceiling metaphor. For a more complete picture, we need to add an extra dimension: wide walls. It’s not enough to provide a single path from low floor to high ceiling; we need to provide wide walls so that kids can explore multiple pathways from floor to ceiling.Why are wide walls important? We know that kids will become most engaged, and learn the most, when they are working on projects that are personally meaningful to them. But no single project will be meaningful to all kids. So if we want to engage all kids—from many different backgrounds, with many different interests—we need to support a wide diversity of pathways and projects. Source: Mitchel Resnick: Designing for Wide Walls | Design.blog"
"151","2014-09-30","2023-03-24","https://computinged.wordpress.com/2014/09/30/a-biased-attempt-at-measuring-failure-rates-in-introductory-programming/","Do students fail intro CS at higher rates than in comparable classes (e.g., intro Physics, or Calculus, or History)? We’ve been trying to answer that question for years. I studied that question here at Georgia Tech (see my Media Computation retrospective paper at last year’s ICER). Jens Bennedsen and Michael Caspersen answered that question with a big international survey (see paper here). They recognized the limitations of their study — it was surveying on the SIGCSE member’s list and similar email lists (i.e., to teachers biased toward being informed about the latest in computing education), and they got few responses. This last year’s ITiCSE best paper awardee tried to measure failure rates again (see link below), by studying published accounts of pass rates. While they got a larger sample size this way, it’s even more limited than the Bennedsen and Caspersen study: This paper is exploring an important question, and does make a contribution. But it’s a much more limited study than what has come before. Whilst working on an upcoming meta-analysis that synthesized fifty years of research on predictors of programming performance, we made an interesting discovery. Despite several studies citing a motivation for research as the high failure rates of introductory programming courses, to date, the majority of available evidence on this phenomenon is at best anecdotal in nature, and only a single study by Bennedsen and Caspersen has attempted to determine a worldwide pass rate of introductory programming courses.In this paper, we answer the call for further substantial evidence on the CS1 failure rate phenomenon, by performing a systematic review of introductory programming literature, and a statistical analysis on pass rate data extracted from relevant articles. Pass rates describing the outcomes of 161 CS1 courses that ran in 15 different countries, across 51 institutions were extracted and analysed. An almost identical mean worldwide pass rate of 67.7% was found. Moderator analysis revealed significant, but perhaps not substantial differences in pass rates based upon: grade level, country, and class size. However, pass rates were found not to have significantly differed over time, or based upon the programming language taught in the course. This paper serves as a motivation for researchers of introductory programming education, and provides much needed quantitative evidence on the potential difficulties and failure rates of this course. via Failure rates in introductory programming revisited."
"152","2013-08-09","2023-03-24","https://computinged.wordpress.com/2013/08/09/in-remembrance-of-mediacomp-past-icer-2013-preview/","I get to teach our Media Computation in Python course, on Georgia Tech’s campus, in Spring 2014. I’ve had the opportunity to teach it on study abroad, and that was wonderful. I have not had the opportunity to teach it on-campus since 2007. Being gone from a course for seven years, especially a big one with an army of undergraduate TA’s behind it, is a long time. The undergraduate TA’s create all the assignments and the exams, in all of the introductory courses in the College of Computing. Bill Leahy, who is teaching it this summer semester, kindly invited me to meet with the TA’s in order to give me a sense for how the course works now. It’s a very different course than the one that I used to teach. It’s a relevant story because I’m presenting a paper at ICER 2013 on Monday 12 August that is a 10 year retrospective on the research on Media Computation. (I’m making a preview version of the paper available here, which I’ll take down when the ACM DL opens up the ICER 2013 papers.) It was 10 years ago that we posted our working document on creating MediaComp and our 2002 and 2003 published design papers, all of which are still available. We made explicit hypotheses about what we thought Media Computation would do. The ICER 2013 paper is a progress report. How’d we do? What don’t we know? In hindsight, some seem foolish. There are two meta-level points that I try to make in this paper. Lots of things change over 10 years, and not always in positive directions. Good lessons and practices of the past get forgotten. Sometimes change is good and comes from lessons learned that are well worth articulating and making explicit. And sometimes, we got it plain wrong in the past — there are ideas that are worth discarding. It’s worth reflecting back occasionally and figuring out how we got to where we are."
"153","2015-04-13","2023-03-24","https://computinged.wordpress.com/2015/04/13/where-have-all-the-teachers-gone-its-not-just-cs/","My first thought when seeing this article was, “Well, I’m glad it’s not just CS.” (See my post about how recruiting teachers is our biggest challenge in CS10K.) And my second thought was, “WHERE are we going to get all the teachers we need, across subjects?!?” And how are we going to retain them? Several big states have seen alarming drops in enrollment at teacher training programs. The numbers are grim among some of the nation’s largest producers of new teachers: In California, enrollment is down 53 percent over the past five years. It’s down sharply in New York and Texas as well. In North Carolina, enrollment is down nearly 20 percent in three years. “The erosion is steady. That’s a steady downward line on a graph. And there’s no sign that it’s being turned around,” says Bill McDiarmid, the dean of the University of North Carolina School of Education. Why have the numbers fallen so far, so fast? McDiarmid points to the strengthening U.S. economy and the erosion of teaching’s image as a stable career. There’s a growing sense, he says, that K-12 teachers simply have less control over their professional lives in an increasingly bitter, politicized environment. via Where Have All The Teachers Gone? : NPR Ed : NPR."
"154","2016-10-05","2023-03-24","https://computinged.wordpress.com/2016/10/05/call-for-ap-cs-principles-readers/","Guest blog post from Barbara Ericson, copying a message from Paul Tyman: Please consider signing up to an an AP CS Level A or CS Principles reader. We will need lots of new readers for the CSP exam. I did the pilot reading last year and it was interesting to see what the students submitted for their paper about a computing innovation and their code for the create task. The readings are really a great professional development opportunity for you. There is always an invited speaker and demos in the evenings. You will meet lots of great people who care about computer science education, both in high school and higher education teaching. We have a social space in the evenings which is quite busy with lots of card games, board games, and music. There are also groups who walk, do yoga, run, etc. They pay for your travel, hotel, meals, and pay you a stipend as well. Barb Ericson Georgia Tech From: Paul Tymann <pttics@rit.edu> Sent: Saturday, October 1, 2016 9:54 AM Subject: CSP Readers Needed!! All, Current estimates indicate that we will need more than 200 readers to score the AP CS Principles exam that will be administered in May 2017. I need your help recruiting new readers. Could you reach out to a couple of your colleagues and encourage them the apply to be readers? As former readers you are in an unique position to explain the reading process and the benefits of participating. Potential readers can find out more information about becoming an AP CSP reader, and more importantly can sign up to become a reader, by pointing a browser to: http://etscrs.submit4jobs.com/index.cfm?fuseaction=85332.viewjobdetail&CID=85332&JID=300364&notes_id=2 Please contact me if you have any questions. I hope to, no will, see you in Kansas City!! — Paul."
"155","2014-12-20","2023-03-24","https://computinged.wordpress.com/2014/12/20/csedweek-progress-in-georgia-math-and-science-teachers-in-csit-and-a-transfer-summit/","The Code.org site (see here) describes some of the successes of CSEd Week. Over 81 million people tried the Hour of Code. President Obama became the first US President to program (see Forbes piece). I’m sure that there were a lot of outreach activities going on in Georgia, too. I wasn’t involved in those. I want to report on two points of progress in Georgia that was more at an infrastructural level. Chris Klaus (as I mentioned in this blog previously) has gathered stakeholders in a “Georgia Coding” group to push on improving computing in Georgia. That effort bore fruit during CSedWeek. Georgia had its first “Day of Code,” but Barb and I were most excited to visit the Georgia Professional Standards Commission website on Monday to see this:  All the high school IT/CS classes in Georgia can now be taught by teachers with Mathematics or Science certifications. Previously, only Business Education and Mathematics teachers could teach AP CS, and only Business Education teachers could teach other IT/CS classes. (Even though AP CS counted as a science credit, science teachers couldn’t teach it.) Now, it’s all open. It’s much easier to teach Math and Science teachers about CS than Business Education teachers. Now, we have a much larger pool of possible teachers to recruit into CS classes. I’m grateful that Georgia House Representative Mike Dudgeon took this from the Georgia Coding group and made it happen. On Thursday, I hosted a Transfer Summit at Georgia Tech. We had 15 attendees from 11 different institutions in the University System of Georgia, some two-year-mostly institutions and others four-year degree institutions.   The goal was to ease transfer between the schools. This was a strategy that CAITE used successfully to increase the diversity in computing programs in Massachusetts. Two year programs are much more diverse than universities (see some data here), but only about 25% of the students who want to transfer do so. Part of our strategy with ECEP is to set up these meetings where we get schools to smooth out the bumps to ease the transition. I learned a lot about transfer at this meeting. For example, I learned that it’s often unsuccessful to have students take all their General Education requirements at the two-year institution and then transfer to the four-year institution, because that leaves just intense CS classes for the last two years — no easier classes. At some schools, the pre-requisite chains prevent students from even getting a full load of just-CS classes, since students have to pass the pre-req before they can take the follow-on class. At the end of the meeting, we had 9 new transfer agreements in-progress. Some of the participants had come to a similar meeting last year, and they said that they were able to make more progress this year because they knew what to have ready. Wayne Summers from Columbus State actually came with a whole new agreement with Georgia Perimeter College (a two-year institution) already worked out and ready to discuss with GPC representatives. I was grateful that GPC brought three faculty to the meeting, so that they could have multiple agreements worked out in parallel. Getting math and science teachers into high school CS classes and helping students in two-year institutions move on to bachelors degrees isn’t as flashy as the Hour of Code and programming at White House. Teacher certifications and transfer agreements are important when we move beyond the first hour and want to create pathways for students to pursue computing through graduation."
"156","2014-08-26","2023-03-24","https://computinged.wordpress.com/2014/08/26/georgia-governor-calls-for-cs-to-count-as-core-science-math-and-foreign-languages/","It’s not too often that a policy announcement about education happens on the Georgia Tech campus. In the picture above, tech entrepreneur Chris Klaus is introducing Georgia Governor Nathan Deal (who is second from the right — the guy on the far right is our Provost Rafael Bras), in the Klaus Advanced Computing Building (same Klaus — he funded the building). Chris has been spearheading an effort to get more “coding” into Georgia schools. The Governor said that he’s asking the State Board of Education for computer science to count as core science, mathematics, and foreign languages. The gossip before the talk was that he was going to announce that CS would count for (i.e., replace) foreign languages (which is not a good idea). This announcement was a bit better than that, but it’s still not clear what it means. AP CS already counts as a science towards high school graduation. Does it mean that more CS courses will count? That AP CS will count as any of math, science, or foreign languages? And will the State Board of Education go along with this? Who knows? The guy on the far left of that picture is Representative Mike Dudgeon. He’s taken on the task of changing the “highly-qualified” list in Georgia so that business teachers OR math teachers OR science teachers can teach CS in Georgia. Currently, CS is a “Career, Technical, and Agricultural Education” subject, meaning that only teachers with a business certificate can teach CS. Barbara Ericson has fought hard so that mathematics teachers can also teach AP CS — but this all leaves us in the weird position that AP CS counts as a science, but science teachers can’t teach it. Only math and business teachers can teach AP CS in Georgia. That would be great if Dudgeon is successful. It’s easier to teach CS to math and science teachers than business teachers. I was a meeting recently with Chris Klaus where he said that he wants to make Georgia the first state in the USA to require CS for high school graduation. When I balked at that (citing the issues in my Blog@CACM post), he had an interesting counter-proposal. We give schools and districts who aren’t ready to teach CS a waiver, but to get a waiver, you have to have a plan in place to be able to teach CS within three years. Might work. My proposal in the group that Chris has founded to have more “coding education in Georgia” isn’t getting much traction. I proposed we do what Calculus did. How did Calculus get taught in every high school? First, schools in the 1800’s started teaching calculus to undergrads. By the 1900’s, every STEM undergrad had to take Calculus, and the top high schools were preparing their kids for Calculus. By the late 1900’s, all high schools were offering calculus. My proposal is that that the Board of Regents make CS part of the general education requirement of all undergraduates in the University System of Georgia. Every student in every college in Georgia would be required to take a course in CS. Unlike elementary and high schools, USG institutions have CS teachers — they might have to hire more faculty to handle the load, but they know how to do it. It’s much less expensive to teach CS at the undergraduate level than at the high or elementary school level. But this creates the curriculum (you have to teach a different CS to everyone from what you teach to CS majors) that the high-end schools will immediately start to emulate, and that will get copied into other high schools. Biggest advantage is that every new teacher (business, math, or science) will take a CS class! That should accelerate the rate of getting teachers who know CS into schools, and give them a new tool for teaching STEM classes. Anyway, it’s probably a good thing that there is all of this interest in computing education from Georgia political leaders. "
"157","2014-03-19","2023-03-24","https://computinged.wordpress.com/2014/03/19/why-counting-cs-as-a-foreign-language-credit-is-a-bad-idea-from-csta-blog/","Interesting and detailed response to the decision in Texas (and proposed in New Mexico and Kentucky) to count programming as a foreign language. When these policy makers look at schools, they see that computer science is not part of the “common core” of prescribed learning for students. And then they hear that Texas has just passed legislation to enable students to count a computer science course as a foreign language credit and it seems like a great idea. But all we have to do is to look at Texas to see how this idea could, at the implementation level, turn out to be an unfortunate choice for computer science education. Here are the unintended consequences 1. If a course counts as a foreign language course, it will be suggested that a new course must be created. 2. If a new course is created, chances are that it won’t fit well into any of the already existing course pathways for college-prep or CTE. 3. This new course will be added to the current confusing array of “computing” courses which students and their parents already find difficult to navigate. 4. There will be pressure brought to ensure that that course focuses somehow on a “language”. For the last ten years we have been trying to help people understand that computer science is more than programming. Programming/coding is to computer science as the multiplication table is to mathematics, a critical tool but certainly not the entire discipline. 5. If this new course is going to be a “language” course, we have to pick a language (just one). And so the programming language wars begin. via Computer Science Teachers Association."
"158","2014-09-26","2023-03-24","https://computinged.wordpress.com/2014/09/26/interview-on-the-cs-education-zoo-livecoding-hypercard-parsons-problems-and-student-misconceptions/","Steven Wolfman and Will Byrd host a podcast series called the “CS Education Zoo.” I was just interviewed on it yesterday. Will couldn’t make it, but Dutch Meyer filled in. We covered a lot of ground, from livecoding music to HyperCard to the importance of having even low-quality CS education in schools to Parsons’s Problems to ebooks and MOOCs, to how to address student misconceptions in class. I had great fun and appreciate their invitation to join in!"
"159","2017-06-07","2023-03-24","https://computinged.wordpress.com/2017/06/07/congratulations-to-owen-valerie-and-chris-acm-award-winners/","Sharing Amber Settle’s note about ACM awardees from the computing education community, with her kind permission. The SIGCSE Board would like to congratulate Owen Astrachan, Valerie Barr, and Chris Stephenson on their recent ACM awards. Owen Astrachan was named recipient of the 2016 ACM Karl V. Karlstrom Outstanding Educator Award for three decades of innovative computer science pedagogy and inspirational community leadership in broadening the appeal of high school and college introductory computer science courses. His citation can be found here: http://awards.acm.org/award_winners/astrachan_3068814 Valerie Barr has received the 2016 Outstanding Contribution to ACM Award for reinventing ACM-W, increasing its effectiveness in supporting women in computing worldwide and encouraging participation in ACM. Since becoming Chair of ACM-W in 2012, Barr has been a driving force in more than tripling the number of ACM-W chapters around the world. Her citation can be found here: http://awards.acm.org/award_winners/barr_3211646 Chris Stephenson, Head of Computer Science Education Programs at Google Inc., was recognized for creating the Computer Science Teachers Association, an international organization dedicated to supporting teachers and pursuing excellence in CS education for K-12 students. More information can be found here: http://awards.acm.org/about/2016-presidential-award-stephenson Owen, Valerie, and Chris will receive their awards at the ACM Awards Banquet later this month in San Francisco. Please join us in congratulating them for their achievements. Amber Settle SIGCSE chair, 2016-2019"
"160","2018-06-18","2023-03-24","https://computinged.wordpress.com/2018/06/18/the-story-of-macos-how-getting-it-wrong-cost-the-nation-and-how-we-make-it-better-the-next-time/","Man: A Course of Study (MACOS) is one of the most ambitious US curriculum efforts I’ve ever heard about. The goal was to teach anthropology to 10 year olds. The effort was led by world-renowned educational psychologist Jerome Bruner, and included many developers, anthropologists, and educational psychologists (including Howard Gardner). It won awards from the American Education Research Association and from other education professional organization for its innovation and connection to research. At its height, MACOS was in thousands of schools, including whole school districts. Today, MACOS isn’t taught anywhere. Funding for MACOS was debated in Congress in 1975, and the controversy led eventually to the de-funding of science education nationally. Peter Dow’s 1991 book Schoolhouse Politics: Lessons from the Sputnik Era is a terrific book which should be required reading for everyone involved in computing education in K-12. Dow was the project manager for MACOS, and he’s candid in describing what they got wrong. It’s worthwhile understanding what happened so that we might avoid it in computing education. I just finished reading it, and here are some of the parts that I found particularly insightful. First, Dow doesn’t dismiss the critics of MACOS. Rather, he recognizes that the tension is between learning objectives. What do we want for our children? What kind of society do we want to build? I quickly learned that decisions about educational reform are driven far more by political considerations, such as the prevailing public mood, than they are by a systematic effort to improve instruction. Just as Soviet science supremacy had spawned a decade of curriculum reform led by some of our most creative research scientists during the late 1950s and 1960s, so now a new wave of political conservatism and religious fundamentalism in the early 1970s began to call into question the intrusion of university academics into the schools…Exposure to this debate caused me to recast the account to give more attention to educational politics. No discussion of school reform, it seems, can be separated from our vision of the society that the schools serve. MACOS was based in the best of educational psychology at the time. Students engaged in inquiry with first-hand accounts, e.g., videos of Eskimos. The big mistake the developers made was they gave almost no thought to how it was going to get disseminated. Dow points out that MACOS was academic researchers intruding into K-12, without really understanding K-12. They didn’t plan for teacher professional development, and worse, didn’t build any mechanism for teachers to tell them how the materials should be changed to work in real classrooms. They were openly dismissive of the publishers who might get the materials into the world. On teachers: There was ambivalence about teachers at ESI. On the one hand the Social Studies Program viewed its work as a panacea for teachers, a liberation from the drudgery of textbook materials and didactic lessons. On the other, professional educators were seen as dull-witted people who conversed in an incomprehensible “middle language” and were responsible for the uninspired state of American education. On publishers: These two experienced and widely respected publishing executives listened politely while Bruner described our lofty education aspirations with characteristic eloquence, but the discussion soon turned to practical matters such as the procedures of state adoption committees, “tumbling test” requirements, per-pupil expenditures, readability formulas, and other restrictions that govern the basal textbook market. Spaulding and Kaplan tried valiantly to instruct us about the realities of the educational publishing world, but we dismissed their remarks as the musings of men who had been corrupted by commercialism. Did they not understand that our mission was to change education, not submit to the strictures that had made much of instruction so meaningless? Could not men so powerful in the publishing world commit some of their resources to support curriculum innovation? Had they no appreciation of the intellectual poverty of most social studies classrooms? I remember leaving that room depressed by the monumental conservatism of our visitors and more determined than ever to prove that there were ways to reach the schools with good materials. Our arrogance and naivete were not so easily cured. By 1971, Dow realizes that the controversies around MACOS could easily have been avoided. They had made choices in their materials that highlighted the challenges of Eskimo life graphically, but the gory details weren’t really necessary to the learning objectives. They simply hadn’t thought enough about their users, which included the teachers, administrators, parents, and state education departments. My favorite scene in the book is with Margaret Mead who tries to help Dow defend MACOS in Congress, but she’s frustrated by their arrogance and naivete. Mead’s exasperation grew. “What do you tell the children that for?…I have been teaching anthropology for forty years,” she remarked, “and I have never had a controversy like this over what I have written.” … But Mead’s anger quickly returned. “No, no, you can’t tell the senators that! Don’t preach to them! You and I may believe that sort of thing, but that’s not what you say to these men. The trouble with you Cambridge intellectuals is that you have no political sense!” Dow describes over two chapters the controversies around MACOS and the aftermath impacts on science education funding at NSF. But he also points out the problems with MACOS as a curriculum. Some of these are likely problems we’re facing in CS for All efforts. For example, he talks about why MACOS was removed from Oregon schools, using the work of Lynda Falkenstein. (Read the below with an awareness of the Google-Gallup and EdWeek polls showing that administrators and principals are not supportive of CS in schools.) She concluded that innovations that lacked the commitment of administrators able to provide long-term support and continuing teacher training beyond the initial implementation phase were bound to faster regardless of their quality. Even more than controversy, she found, the greatest barrier to successful innovation was the lack of continuity of support from the internal structure of the school system itself. I highly recommend Schoolhouse Politics. It has me thinking about what it really takes to get any education reform to work and to scale. The book is light on evaluation evidence that MACOS worked. For example, I’m concerned that MACOS was so demanding that it may have been too much for underprepared students or teachers. I am totally convinced that it was innovative and brilliant. One of the best curriculum design efforts I’ve ever read about, in terms of building on theory and innovative design. I am also totally convinced that it wasn’t ready to scale — and the cost of that mistake was enormous. We need to avoid making those mistakes again."
"161","2015-08-28","2023-03-24","https://computinged.wordpress.com/2015/08/28/new-google-for-education-report-on-k-12-cs-ed-parents-want-it-principals-dont-get-it/","Google has just released a new report on K-12 CS Education. It’s linked at the bottom. I’m going to quote from a new Wired article that describes one of the big bottomlines. In a big survey conducted with Gallup and released today, Google found a range of dysfunctional reasons more K-12 students aren’t learning computer science skills. Perhaps the most surprising: schools don’t think the demand from parents and students is there. Google and Gallup spent a year and a half surveying thousands of students, parents, teachers, principals, and superintendents across the US. And it’s not that parents don’t want computer science for their kids. A full nine in ten parents surveyed viewed computer science education as a good use of school resources. It’s the gap between actual and perceived demand that appears to be the problem. via Huh? Schools Think Kids Don’t Want to Learn Computer Science | WIRED. Searching for Computer Science: Access and Barriers in U.S. K-12 Education To understand perceptions of computer science and associated opportunities, participation, and barriers, we worked with Gallup, Inc. to survey over 1,600 students, 1,600 parents, 1,000 teachers, 9,600 principals, and 1,800 superintendents. We found: Exposure to computer technology is vital to building student confidence for computer science learning. Opportunities to learn computer science at schools is limited for most students. When available, courses are not comprehensive. Demand for CS in schools is high amongst students and parents, but school and district administrators underestimate this interest. Barriers to offering computer science in schools include testing requirements for other subjects and limited availability and budget for qualified teachers. via Google for Education: Computer Science Research."
"162","2017-03-17","2023-03-24","https://computinged.wordpress.com/2017/03/17/passing-of-william-g-bowen-walk-deliberately-dont-run-toward-online-education/","William G. Bowen of Princeton and of the Mellon Foundation recently died at the age of 83. His article about MOOCs in 2013 is still relevant today. In particular is his note about “few of those studies are relevant to the teaching of undergraduates.” As I look at the OMS CS results and the empirical evidence about MOOC completers (which matches results of other MOOC experiments of which I’m aware at Georgia Tech), I see that MOOCs are leading to learning and serving a population, but that tends to be the most privileged population. Higher education is critiqued for furthering inequity and not doing enough to serve underprivileged students. MOOCs don’t help with that. It reminds me of Annie Murphy Paul’s article on lecture — they best serve the privileged students that campuses already serve well. That’s a subtle distinction: MOOCs help, but not the students who most need help. What needs to be done in order to translate could into will? The principal barriers are the lack of hard evidence about both learning outcomes and potential cost savings; the lack of shared but customizable teaching and learning platforms (or tool kits); and the need for both new mind-sets and fresh thinking about models of decision making. How effective has online learning been in improving (or at least maintaining) learning outcomes achieved by various populations of students in various settings? Unfortunately, no one really knows the answer to either that question or the important follow-up query about cost savings. Thousands of studies of online learning have been conducted, and my colleague Kelly Lack has continued to catalog them and summarize their findings. It has proved to be a daunting task—and a discouraging one. Few of those studies are relevant to the teaching of undergraduates, and the few that are relevant almost always suffer from serious methodological deficiencies. The most common problems are small sample size; inability to control for ubiquitous selection effects; and, on the cost side, the lack of good estimates of likely cost savings. Source: Walk Deliberately, Don’t Run, Toward Online Education – The Chronicle of Higher Education"
"163","2016-11-16","2023-03-24","https://computinged.wordpress.com/2016/11/16/oms-cs-graduates-a-different-kind-of-student-work-from-harvard-graduate-school-of-education/","This is the work that most impresses me about OMSCS — that it attracts a different group of students that might get a face-to-face MS in CS. I’m not sure that I buy “equivalent in all ways to an in-person degree,” but I do see that it’s hard to measure and the paper makes a good effort at it. Previous research has shown that most users of online education look fairly similar to the average college graduate — suggesting that digital learning isn’t yet the great educational equalizer it has the potential to be. But in a study of Georgia Tech’s hugely successful online master of science in computer science (OMSCS) program, educational economists Joshua Goodman and Amanda Pallais and public policy expert Julia Melkers found that digital learning can tap into a new market of students by offering an online degree that is equivalent in all ways to an in-person degree, at a fraction of the cost. Source: The Digital Bridge | Harvard Graduate School of Education"
"164","2019-09-20","2023-03-24","https://computinged.wordpress.com/2019/09/20/precalculus-task-specific-programming-for-building-image-filters-from-matrix-operations-precalculus-tsp-part-1-of-5/","This is the start of a five part series of blog posts on Task-Specific Programming in Precalculus, subtitled “What Mark Did This Summer.” I wrote several blog posts in the Spring (last in May, linked here) about “task-specific programming languages.” I’ve been thinking a lot about them over the summer, and built my first prototypes for two task-specific programming environments. In these blog posts, I’m describing the two prototypes, and then considering the interaction with research on programming, on education, and on computing education research. Both of my prototypes are built around teaching precalculus. My goal is to use computing to make precalculus less abstract and more relevant. I am inspired by Phil Sadler and Gerhard Sonnert’s work supporting the argument that precalculus is the most important set of concepts for students to succeed at college calculus (even more than high school calculus). I want to provide a programming experience that can be used in five minutes which can be integrated into a precalculus class. The first prototype is for constructing image filters from simple matrix manipulations that are part of many precalculus texts. In a digitized picture, each pixel has a red, green, and blue component (or channel) for its color. All the red values from the pixels can be described as a matrix for the red channel in the picture. This is the opening screen for the prototype.  The image being manipulated is on the left. The list of matrix manipulations appears in the upper left. The manipulated image is on the upper right. Across the bottom appear the matrices for the red, blue, and green pixels of this picture. A text description explains where these matrices come from. I tried hard to get the matrix representation close to what students might see in a precalculus textbook. That’s part of being able to be “integrated into a precalculus course.” The teachers I’ve shown this to have appreciated that attention — they don’t want to have to explain differences between the user interface and the textbook. Changing the picture (see the button under the source picture), updates the matrices, the description, and re-runs the matrix transformation steps on the new input picture.  The lower right hand corner is an inspector to check individual pixel values. This was a suggestion from Line Have Musaeus from Aarhus when I demonstrated this prototype at ICER in Toronto. Precalculus teachers want students to understand how the math is working at the matrix-element level, so I give them a way to check individual matrix values. That’s when I added the block-color picture into the picture set — it makes it easier to understand the four quadrants, what the base colors are, and how the transformations change them. Each of the matrix transformations appears on a separate card in a deck. Here’s one:  This transformation does a scalar multiplication of 0.5 (which the user sets by changing the text field in the statement). A pull-down lets the user pick which matrix they want to modify. When the user picks a matrix, the display in the lower left updates to show the new matrix. Again, I’m trying to get the formatting for scalar multiplication right from the textbook. The text description on the right updates to describe the selected transformation, and the text and matrix displayed on the lower right updates to show how that matrix is being transformed by this operation. Here’s the other possible transformation (selected by radio button):  Here, we’re changing one of the channel matrices (pull down for red, green, or blue) to basic element-by-element arithmetic (addition or subtraction) of two selected matrices: red, green, blue, or a matrix of all-255’s. (I’ve had several suggestions to also provide the option of having a matrix of all the same number — all 1’s, all 0’s, or something like all-7’s). I’m using a semi-transparent gray graphic to “hide” the unselected operation on the card. I want students to know that they can do either operation, so I don’t want it to disappear, but I want to show that it’s not selected. Currently, the user presses the “Do It” button to process the individual transformations, or to do the whole program of transformations. You can have an arbitrary number of operations, and you can do some interesting transformations, like image negation:  Or making a scene look like it’s nearing sunset:  Press the Change Picture button to get a different input picture. So, the list of operations specifies a process which can be applied to an arbitrary input. It’s a program (for a specific task), but it’s not coding (an important distinction that Wil Doane pointed out to me at ICER this year). I built these in Livecode. The source file is available here. I’m also making binaries available for Macintosh and for Windows. (Yes, I can provide Linux, if someone’s interested.) These are provided with no warranty or guarantee — these barely do what I describe, and probably have lots of other mistakes, holes, weaknesses, and vulnerabilities. They’re slow as molasses. I strongly discourage you from using my prototypes with students. As I describe in Part 4 of this series, this is nowhere near where it needs to be in order to be useful."
"165","2019-05-27","2023-03-24","https://computinged.wordpress.com/2019/05/27/why-i-say-task-specific-programming-languages-instead-of-domain-specific-programming-languages/","I’ve written several posts about task-specific programming languages over the last few weeks (here’s the first one), culminating in my new understanding of computational thinking (see that blog post). The programming languages community talks about “domain-specific programming languages.” That makes a lot of sense, as a contrast with “general purpose programming languages.” Why am I using a different term? It’s inspired from my interaction with social studies teachers. They talk about “the language used in math class” and about “what language should we use in history?” History and mathematics are domains. If we talk about a programming language for all of history, that’s too big. It will be difficult to design languages to be easily learned and used. There are lots of tasks in history that are amenable to using computing to improve learning, including data visualization and testing the rigor of arguments. “Task-specific programming language” makes clear that we’re talking about a task, not a whole domain. I don’t want teachers rejecting a language because “I can’t use it for everything.” I want teachers to accept a language because it helps their students learn something. I want it to be so easy to learn and use, that (a) it’s not adding much additional load and (b) it’s obvious that it would help. I like “task-specific programming language,” too, because the name suggests how we might design them. Human-computer interface researchers and designers have been developing methods to analyze tasks and design interfaces for those tasks for decades. The purpose of that analysis is to create interfaces for users to achieve those tasks easily and with minimal up-front learning. For 25 years (Soloway, Guzdial, and Hay, 1994) , we have been trying to extend those techniques to design for learners, so that users achieve the tasks and learn in the process. Task-specific programming languages are domain-specific programming languages (from the PL community) that are designed using learner-centered design methods (HCI). It’s about integrating between two communities to create something that enables integration of computing across the curriculum. "
"166","2019-03-25","2023-03-24","https://computinged.wordpress.com/2019/03/25/task-specific-programming-languages-past-guzdial-is-smarter-than-present-guzdial/","I’ve been thinking a lot about task-specific programming languages lately. I’m inspired by the work on domain-specific programming languages (e.g., see blog post here), and have been wondering whether we can reduce the cognitive load even further by focusing on programming languages for specific tasks. I’m thinking that we should be applying HCI design techniques (e.g., user centered design) and apply them to the design of small, task-specific programming languages. But that got me wondering: Surely this is not a new idea. What do we know about task-specific programming languages? Do students learn generalized ideas about programming from learning a task-specific programming language? How does it change affect or cognitive load if students start with a programming language tuned especially to their task? I did some literature searches, and found a highly relevant paper: “Task specific programming languages as a first programming language.” And the lead author is…me. I wrote this paper with Allison Elliott Tew and Mike McCracken, and published it in 1997. I honestly completely forgot that I had written this paper 22 years ago. Guzdial-past knew things that Guzdial-present does not. The paper doesn’t answer any of my questions. It talks about some surveys and comparisons we were doing, but offers no results. I have no idea where the data from those surveys and comparisons are today. Abstract: This research investigates whether there is a difference in the acquisition of programming skills and knowledge as a function of a student’s first language. Our research is concerned with the comparison of task specific languages and general programming languages. In many engineering programs students are first exposed to the principles of computational solutions to problems by means of task specific languages, such as MatLab. They are then either expected to be able to use, or are specifically taught programming using more general purpose languages, such as C. Our question is whether there is a developmental preference for learning a task specific language first, or a general purpose language first. Historically, educators have emphasized fundamentals prior to application. A case could therefore be made that a student should be taught general programming skills in the context of a general purpose language before solving problems in a task specific language. More recently, contextualized educators would prefer the initial learning of task specific languages. Our research anticipates answering the question of the effectiveness of transfer of programming skills as a function of first language learning. The dimensions of this question include but are not limited to, how the languages are used, what types of problems are presented to the students, is transfer prompted between the languages, do students look for surface or structural similarities, and what are the assumptions and expectations of the faculty who teach these languages. Here’s my favorite paragraph in the paper. Yup, still have all those same questions. We have developed a comparison of task specific languages and general purpose languages to allow us to investigate ontological boundaries between languages and their impact on transfer. For example, MatLab essentially has no typing. It uses built in types. Whereas, general purpose languages have various types, including enumerated types, and support the construction of complex data structures around those types. Does this difference cause a boundary to transfer? If a student learns MatLab first, will data types be more difficult to learn? If a student learns a general purpose language first, will they be able to transfer their skills to a language that prevents them from constructing many of the structures they have previously used? I’m still catching up on podcasts that I missed during my move. One of those was a rebroadcast of an interview with Richard Thaler, one of the founders of behavioral economics and a recent Nobel prize winner in Economics. He explains the central idea of behavioral economics: “People aren’t dumb. The world is hard.” So, we don’t think people are dumb. We think the world is hard. I mean, figuring out how much to save for retirement is a really hard cognitive problem that very few economists have solved for themselves. And it’s not only cognitively hard, it involves delay of gratification, which people find hard. It’s just like navigating in a strange city is hard. So, why not try to help? When I first was working with the U.K. Behavioral Insight Team, the first “Nudge unit,” the phrase I kept saying in every meeting with some minister was, “If you want to get people to do something, make it easy. Remove the barriers.” That’s what we’re about. If we want people to program, make it easy. Remove the barriers. That’s what we’re about. People aren’t dumb. Programming languages are hard. If we can fix that, we should. That’s what I see task-specific programming as being about. "
"167","2019-04-29","2023-03-24","https://computinged.wordpress.com/2019/04/29/what-is-computational-thinking-its-the-friction-that-we-want-to-minimize/","David Benedetto wrote a blog post about computational thinking for CSTA that gave me new insight into Computational Thinking (thanks to Shuchi Grover whose tweets drew me to it): http://advocate.csteachers.org/2019/02/27/situated-computational-thinking/ David says: I think this definition of CT is as good a starting point as any: Computational Thinking is the thought processes involved in formulating problems and their solutions so that the solutions are represented in a form that can be effectively carried out by an information-processing agent (Cuny, Snyder, Wing, 2010). He evolves this position until, like Shuchi, he comes up with two definitions of CT: What are the implications of this? I think there are two clear options for how we define CT: (A) Restrict what we mean by CT. This is perfectly reasonable and probably necessary for most practical purposes. However, this has the inevitable consequence of fragmenting our understanding of CT. There will be different CTs in different disciplines / fields. We will do this, but we should try to understand the restrictions that we are imposing, and the consequences of imposing them. (B) Break our concept of CT wide open. I think the scientific community (at least, those who are studying the construct of CT and how it plays out in real cultural contexts) should do this, so that we can explore how CT is understood and practiced in a variety of contexts and for a wide range of purposes. As a researcher, I’m more in favor of the former — let’s define Computational Thinking precisely. David’s concern is really about the social context around CT. People want to call lots of things Computational Thinking. Can we come up with a definition for CT that bridges these? That represents the discipline-specific uses of CT, and is well enough defined that we can actually measure something about it? There are many other “thinkings” that lay claim to providing students with critical skills. Admiral Grace Hopper would likely support “mathematical thinking” more than “computational thinking,” as this interesting essay from Yale points out. Skills like “decomposition” or “abstraction” are included in many definitions of computational thinking (eg this blog post), and it’s true that you need those in computing. But those skills first belonged to mathematics, engineering, and science, and I’d argue that the teachers in those subjects might be in a better position to teach them and to measure them. Computation can play an important role in learning decomposition and abstraction, but those skills don’t belong uniquely to computation, or to a class on computational thinking. So, what is unique about computation? On the computer science side of my life, my research community is human-computer interaction. I’ve published in CHI, DIS, CSCW, VL/HCC, and UIST. The Cuny, Snyder, and Wing definition is hard for me to reconcile with being an HCI researcher. The point of HCI research is to minimize the amount that a user has to learn in order to “formulate problems and their solutions so that the solutions are represented in a form that can be effectively carried out by an information-processing agent.” HCI is trying to make it easier for the user to think with a computer whatever they want to think about. Computational Thinking is about what you need to think with a computer. Over the last few weeks in this blog, I’ve been exploring the notion of task-specific programming languages. I was amazed at how much social studies teachers could do with Vega-Lite in a participatory design session we ran in early March. Sarah Chasin’s work with Helena and Rousillon is absolutely stunning for how much people could achieve with no training. Hariharan Subramonyam sent me this fascinating essay on end-user programming and about how to minimize the effort it takes end users to start programming: https://www.inkandswitch.com/end-user-programming.html. As I talked about in my SIGCSE 2019 keynote, Bootstrap:Algebra and most uses of Scratch actually rely on a small number of computational ideas. There is expressive and learning power in even a small amount of computation. Michael Mateas wrote an essay back in 2009 that has been influential in my thinking. I blogged about it here: “There will always be friction.” Michael looked at the Alan Perlis talk of 1961 (that I talk and write about often), and particularly, at the exchange with Peter Elias. Elias argued that students shouldn’t have to learn to program — the computer should learn to understand us. Both Perlis and Mateas disagree. The computer can never understand us completely. We have to smooth the communication because the computer cannot. There will always be a challenge to human-computer interaction. There will always be friction, and it’s the human’s job to manage that friction.. So, here’s my new take on Computational Thinking: It’s the friction. Let’s take the original Cuny, Snyder, and Wing definition — computational thinking is about framing problems so that computers can solve them. The work around task-specific programming languages is showing us that we can make that amount that the user has to learn in order to use programming for their problem very small. To meet Alan Kay’s point about generativity, there are some things in computing that we want to teach because they give us new leverage on thinking. We want to teach things that are useful, but not those that are necessary just because we have bad user interfaces. A minimal definition of Computational Thinking: The stuff that we have to learn in order to communicate our tasks with a computer. It should be small, and the part that we learn should be generative, useful for new problems and new thinking. Everything else should be eliminated by good user interfaces. You don’t have to master abstraction and decomposition just to use a programming language to help you learn. Our social studies teachers modified Vega-Lite programs, made mistakes (every single one of them) and recovered from them, and tried new things that they figured out on their own — all in 10-20 minutes. They already have problem solving skills. They didn’t need any “computational problem solving skills.” They certainly didn’t learn any special computational abilities to abstract and decompose in 10 minutes. They already know enough to use programming to learn. If we can eliminate the need for a particular skill in order to use computing to learn something else, we should. This meshes with David Weintrop and Uri Wilesnky’s definition — it’s the computational practices of actual scientists and engineers who use computing. Their definition is particularly strong because it’s empirically grounded. They asked computational scientists and engineers what they actually do. Weintrop and Wilesnky’s participants want to do their work, not programming for its own sake. So they use a minimal subset of computing that buys them something for their thinking and in their tasks. I like this definition because it’s aspirational. Today, there’s a lot of stuff that you have to learn to use a computer to solve problems. Philip Guo gave a talk here at Michigan recently (similar to one he gave at U-W) and described how data scientists have to become system administrators to manage all the various packages and databases to do their job. That’s a problem. That’s not computational thinking. That’s stuff to get rid of. How small can we make computational thinking? "
"168","2018-12-07","2023-03-24","https://computinged.wordpress.com/2018/12/07/maybe-theres-more-that-one-kind-of-computational-thinking/","Shuchi Grover has a nice post in Blog@CACM where she suggests that there is more than one kind of Computational Thinking, which tries to resolve some of the concerns about the term (some of which I discussed here): It’s also clear to me that in order to help make better sense of CT, we must acknowledge and distinguish two views of CT for K-12 education that are defined and operationalized based on the context for teaching/learning/application. One is a view of CT as a thinking skill for CS classrooms, that includes programming and other CS practices with the goal of highlighting authentic disciplinary practices and higher-order thinking skills used in computer science. The other is CT as a thinking skill/problem-solving approach in non-CS settings—this is often about using programming to automate abstractions of phenomena in other domains or work with data with the goal of better understanding phenomena (including making predictions and understanding potential consequences of actions), innovating with computational representations, designing solutions that leverage computational power/tools, and engaging in sense making around data. She says that their are two “views” of CT, but she does distinguish Wing’s original definition which most people don’t buy. So, it seems like there are three. (Kudos to Shuchi for pointing out that Seymour Papert actually uses the phrase “computational thinking” in Chapter 8 of Mindstorms — so cool!) But I’m still wondering: Why do we have to call all of these things “computational thinking”? I get that there’s a lot of energy around the term, but it’s an overloaded term. Think about it from the perspective of any other science. If you discovered that a species of animal or bacteria you were studying was actually two species, you’d name them differently. In the 19th century, physicists thought that light traveled through a “luminiferous aether,” but now, nobody uses that term because we realized that such a thing didn’t exist. Maybe we as scientists should invent some new and more accurate terms instead of overloaded and confusing “computational thinking”? If we’re using “computational thinking” because it has marketing cachet with teachers and principals (even if the term isn’t useful to researchers), that makes it hard to have a science around computing education. Do we write about CT Type-1 vs CT Type-2?"
"169","2018-10-15","2023-03-24","https://computinged.wordpress.com/2018/10/15/computational-mapping-a-part-of-wings-computational-thinking-i-can-get-behind-doescomputationalthinkingexist/","Last month, I blogged for CACM about a “Twitter convo” (conversation) that I was part of recently, Computational Thinking, education for the poor and rich, and dealing with schools and teachers as they are: A Twitter Convo #doesComputationalThinkingExist. Part of that conversation was a series of tweets about meanings and alternative terms for computational thinking. Shuchi Grover emphasized in this convo that she sees CT as the connection between programming and other kids of thinking skills. The skills that she’s promoting and teaching are critical to the use of computing in science, for example (as she talked about here). I think she has her finger on an important set of skills, but I don’t think that they’re “computational thinking” by any of the most popular and often-used definitions for CT. CT has a set of meanings associated with it. W are more likely to hide a good set of concepts behind a vague term than to get the term re-associated with a good, new meaning. Here’s a proposal for a name for at least part of what Shuchi is promoting and teaching: Computational mapping. Computational mapping is about making an association between computational representations and objects in other domains. Computational mapping skills include using the computational representations to improve understanding of and predictions in the other domains. Computational mapping skills should also include recognizing the limitations of the computational representation, when the mapping is missing critical characteristics of the objects in the domain which limit our understanding and predictive capabilities. Most computer programs are mapping from the real world (that is continuous and filled with complex and real numbers) to a set of discrete values that can be represented in bits. There is not a 1:1 relationship between the real world and the computational world. Whenever we create a mapping, we may be capturing exactly the right things (e.g., if you want to simulate projectile motion, position and time is all you really need), but it’s more likely a mismatch, though many times the mismatch is not something we worry about. Our RGB color scheme can’t capture all colors, or all colors that butterflies can see, but that’s okay — we’re just making colors for humans. I see computational mapping skills in lots of the things I think about today. CT is such a big and vague term that I’m not sure that it’s useful anymore. We’re better off coming up with new terms (like Mitchel and Mark are doing) for the exact skills we are aiming to teach. Let’s spend our time studying the things that we think are important and that we can actually define. Both the power and limitations of computational modeling feel like something that all citizens of the 21st century should be aware of."
"170","2019-04-15","2023-03-24","https://computinged.wordpress.com/2019/04/15/a-task-specific-programming-language-for-web-scraping/","One of the papers that has most influenced my thinking about task-specific programming languages is Rousillon: Scraping Distributed Hierarchical Web Data by Sarah Chasins, Maria Mueller, and Rastislav Bodik. Rousillon is a programming by demonstration system that generates a program in Helena, a task-specific programming language for Web scraping (grabbing data out of Web pages). Below is a flow diagram describing how Rousillon generates a program in Helena.  Check out the Helena program at the far right of that diagram. Yeah, it’s a block-based programming language — for adults. The choice of blocks was made explicitly to avoid syntax errors. If the user wants to modify the synthesized code, she is guided to what can be changed — change a slot in a block, or delete or move a block. It’s a purposeful choice to improve the user experience of programming with Helena. Helena doesn’t do statistics. It doesn’t do visualizations. It does one thing extremely well. Maybe it’s competition for R, because people do use R for Web scraping. But it’s far easier to do web-scraping in Helena. The below graph is the one that blew me away. They ran a study comparing Rousillon and Selenium, a comparable Web data scraping system. Everybody using Rousillon completed both tasks in a few minutes. Most people using Selenium couldn’t finish the tasks (if the bar goes all the way up to the top, people ran out of time before completing).  But here’s the part that is just astonishing. Notice the black border on some of the Selenium bars in that graph? Those are the people who knew Selenium already. NONE of the Rousillon users knew the language before hand. That time for the Rousillon users includes training — and they still beat out the Selenium users. A task that a trained Selenium user can solve in 25 minutes, a complete novice can solve with Rousillon and Helena in 10 minutes. Here’s a goal for task-specific programming languages for adult end-users: It should be easily learned. End-users want to be able to succeed at simple tasks nearly immediately. They want to achieve their task, and any time spent learning is time away from completing the task. It’s about reducing the costs of integrating programming into the adult’s context. The goal isn’t exactly the same when we’re talking about learners in non-CS classes. I think it’s about balancing two challenges:"
"171","2019-09-23","2023-03-24","https://computinged.wordpress.com/2019/09/23/building-textures-from-waves-debugging-in-task-specific-programming-precalculus-tsp-part-2-of-5/","The second prototype I built for Task Specific Programming in Precalculus is about using wave functions for building textures. As I mentioned in my last blog post, my goal is to use computing to make precalculus less abstract and more relevant. I want to provide a programming experience that can be used in five minutes which can be integrated into a precalculus class. In this prototype, I explicitly designed for inquiry and debugging. What would debugging look like in task-specific programming when the goal is learning precalculus and not programming or computer science? I’m going to describe this one bottom-up. Wave functions are a common topic in a precalculus class (like in this YouTube lecture). These are typically taught in the form: A sin(B(x-C)) + D Or Amplitude sin(frequency(x-horizontalShift)+ verticalShift I built a tool where the student specifies a wave function, then that wave is used to define a texture in terms of gray, red, green, or blue components.  This equation is plotted (lower right hand corner) where the X-axis controls the darkness. Each pixel is evaluated left-to-right, and it’s X-position is plugged into this formula. The Y value mapped to a gray scale. The plot should (if it all worked right, and it doesn’t really in this example) line up with the texture so that darkness and lightness maps to rise and fall in the darkness level of the texture. Let’s set the “Challenge” section aside for just a few minutes. We can map equations to other colors, and swap sine for cosine, and use the X or Y components of the pixel to determine the color. Like in the first prototype, each wave function appears on a separate card in a deck.   You can have an arbitrary number of these cards. When you get to the front page of the deck, you have a program of all the wave functions. These are then composed to create a more complex texture.  With this prototype, I thought more about the student’s process than I did with the image filter tool. In my work with both precalculus and social studies teachers, I’m increasingly thinking about inquiry, and I see debugging as a form of inquiry. You have some output, and you’re trying to understand it — and by “understand,” I mean being able to explain how the parts constitute the whole. The impetus to inquire (i.e., to debug) is that the output you have is not the output you expect or want. So, if we want to support inquiry as debugging, we have to support starting from a goal — an example, a requirement, or a set of tests. I’m inspired by Diana Franklin’s group’s work on La Playa, a Scratch-like programming environment for 4th-6th grade students (see paper here). In La Playa, the programming tool opens up onto a starter file. The student could ignore it and just do open-ended programming, but more likely, the starter file guides the student and serves as a scaffold. I made a prominent Challenge texture on the front page (and the challenge image appears on every wave card afterward). Can you make this? If you need a Hint, press the Hint button for a suggestion about is needed to make this texture.  In general, my challenge textures don’t really work. I built a bunch of cool textures to use as hints, like below, but the composition of color waves is one of the more complicated parts here — I talk more about it in Part 5 of the series. But on the other hand, I showed some of these textures to researchers in culturally-relevant curricula who said that they reminded them of woven cloths from the cultures that they study. Could we use wave functions in a form of culturally-relevant curriculum that blends precalculus and computing?  Imagine that you have a texture that you generated on the first page, and now you want to understand how your existing waves contribute to this texture, e.g, to figure out which equations need to be changed. One tool is the Pop button on the front Texture Program page. This pops out the texture into a separate window.  Now, you can drag the texture over the individual wave textures to understand how the pieces compose into the whole.  Each wave has a checkbox, so that the wave can be removed from the texture (without deleting), then put back in. The idea is that a student can apply basic debugging principles: Compare to the example, find how this statement/computational-unit impacts the final outcome (like a print statement), and remove the statement/unit (like with a comment) to see the effect on the final outcome. As I’ve shown this to math teachers, one of the things they like here are the multiple linked representations. We’ve got the equation:  When the student hovers, they get an explanation for each of the terms:  The plot and the texture, and if you press the “Points” button, you see exactly which points were plotted — both x,y on the graph, but also the computed x and y before they were mapped to the discrete points:  When I showed this to teachers, they wanted it to support more exploration. For example, they told me that students struggle to understand the difference between 3sin(x) and sin(3x). I was thinking that a useful addition to this tool would be a Bret Victor inspired scrubbing gesture over each of the terms in the wave function (as in his fabulous Learnable Programming essay, or in the Scrubbing Calculator). I want to be able to click on the “3” above, drag up, then move the cursor left or right to make that number less or more. As I scrub, I want to see the plot change and the texture change — but with some kind of shadow/echo so that I can compare the “3” plot/texture to the new values for “C.” Students can’t generally keep the original curve “in their head” when seeing the new one, so they need both to be visible to understand the effect of the equation change. I built these in Livecode. The source file is available here. I’m also making binaries available for Macintosh and for Windows. (Yes, I can provide Linux, if someone’s interested.) These are provided with no warranty or guarantee — these barely do what I describe, and probably have lots of other mistakes, holes, weaknesses, and vulnerabilities. They’re slow as molasses. I strongly discourage you from using my prototypes with students. As I describe in Part 4 of this series, this is nowhere near where it needs to be in order to be useful."
"172","2019-09-27","2023-03-24","https://computinged.wordpress.com/2019/09/27/task-specific-programming-vs-coding-an-exploration-on-the-other-end-of-the-excel-c-spectrum-precalculus-tsp-part-3-of-5/","In the last two posts, I described a prototype task-specific programming tool for building image filters from matrix manipulations, and for building textures out of wave functions. So, let’s tackle the big question here: Is this programming?  These are both programs. Both of them are specification of process. Both of them allow for an arbitrary number of operations. In the image filter example (second example), the order of operations can matter (e.g., if you change the red matrix through scalar multiplication, then add or subtract it with another matrix, versus the reverse order). The image filter is also defining a process which can be applied to an arbitrary input (picture). Wil Doane pointed out that this is not coding. No program code is written — not text, not blocks, and not even by spreadsheet formula. This is programming by layering transformations which are selected through radio buttons, pull-down menus, and text areas. It’s really applying HCI techniques to constructing a program. Probably the big sticking point here is just how limited the programming language is here. Notice that I’m using the term task-specific programming and not task-specific programming language in this series. The programming language is important here as a notation: What transformations am I using here, and what’s the order of execution? If you didn’t get the effect you wanted, the language is important for figuring out which card you want to change. I’m working on more prototypes where the language plays a similar role: A notation for explanation and rationalization. Amy Ko has a paper I like where she asks, “What is a programming language, really?” (See link here.) I’m not sure that the use of programming language here fits into her scheme. Overall, the focus in these two prototypes is on the programming not the programming language. I spent several months in Spring and Summer reading in the programming language literature — some research papers, but more books like the Little series (e.g., The Little Prover), Shriram Krishnamurthi’s Programming Languages: Application and Interpretation, and Beautiful Racket. I started a Pharo MOOC because it covered how to build domain-specific programming languages. I plan to return to more programming languages research, techniques, and tools in the future. I have a lot to learn about what is possible in programming, about notations for programming, and about alternative models of programming. I need better tools, too, because I’m certainly going to need more horsepower than LiveCode. But as I started designing the prototypes, I realized that my focus was on the user interface, not the language. Of course, text and blocks are user interfaces, but they use few user interface mechanisms. Even what I’m doing here is a far cry from what’s possible in user interfaces. I am using common UI widgets like buttons, menus, and text areas in order to specify a program. I realized that I didn’t need programming language techniques for these prototypes. By any measure of programming language quality, these are poorly-designed languages. My real focus is on the design process. This approach worked for getting prototypes built so that I could start running participatory design sessions with teachers. Here’s the goal I set out for myself: I want to provide a programming experience that can be used in five minutes which can be integrated into a precalculus class. In the small sessions I’ve had with 1 or 2 people, yeah, I think it worked. There are some interesting usability experiments to explore in the future with task-specific programming. The empirical evidence we have so far on task-specific programming is pretty impressive, as I described in my June 2019 Blog@CACM post (see link here) and which has been published in the September CACM on the topic of “designing away Computational Thinking” (see link here), which is what I was trying to do. Sara Chasins’ published work showed that she had people solving real programming problems in less than 10 minutes. Vega-Lite is amazing, and we’re finding social studies teachers building visualizations in it in less than 20 minutes. I’m curious to explore other directions in improving usability through these tiny, task-specific languages. For example, it is very easy here to represent the language in something other than English words. Perhaps we might use task-specific programming to make programming more accessible to non-English speakers by targeting languages other than English as the notation. There’s a cost to that ease of use. There’s a commensurate loss in generalizability. This is laser-focused on TASK-SPECIFIC programming. My prototypes are not Turing-complete. There are no loops, conditionals, or variables. There is decomposition (e.g., which matrix transformations and wave equations do I need for my desired goal), but no abstraction. I’m inspired by Amy Ko’s blog post: Programming languages are the least usable, but most powerful human-computer interfaces ever invented (see post here). Here’s the big idea here: We should design programming languages as we design other user interfaces. We should involve the users. We should aim to achieve the users’ goals. We should empower users. We should reduce their cognitive load. Task-specific languages certainly can include more programming languages features. For example, including variables with types makes sense for data science tasks (as in Bootstrap:Data Science). Those are part of data science tasks, and can help students avoid errors. The critical part is including the components that help the learners with their tasks. My use of task-specific programming is really about learner-centered design of programming languages. I have submitted two NSF proposals about building task-specific programming for precalculus and for social studies, both rejected. I spoke to both program officers. One told me it was impractical to propose a new programming language, and especially multiple languages. The officer pointed out that a language is hard and requires all kinds of infrastructure around it, like a community and a literature. I built these prototypes to explain what I meant by a “programming language.” It doesn’t have to be big. It can be little, be easy to learn and use, and fit into a one hour lesson in a precalculus class. Alan Kay has argued for using the “real thing” as much as possible, because students might imprint on the “toy” thing and use it for everything. The concern is that it’s then hard to move on to better notations. I hope to avoid that fate by providing a notation that is so task-specific that it can’t be used for anything else. There is no support for abstraction here, alternative decompositions, or any kind of system design at all. It’s at the very lowest end of the Rich et al. learning trajectories. Talking about trajectories is the segue to the next post. I welcome your comments. Do you buy task-specific programming as a kind of programming?"
"173","2019-10-28","2023-03-24","https://computinged.wordpress.com/2019/10/28/come-to-the-nas-workshop-on-the-role-of-authentic-stem-learning-experiences-in-developing-interest-and-competencies-for-technology-and-computing/","Register here. And view the agenda here. November 4, 2019 1:00 p.m.–6:00 p.m. (reception hour following) Keck Building, Room 100 500 5th St., NW Washington, DC #STEMforCompTech The Board on Science Education of the National Academies of Sciences, Engineering, and Medicine will host a public workshop on November 4, 2019 to explore issues in STEM education. The workshop will illustrate the various ways in which stakeholders define and conceptualize authentic STEM learning opportunities for young people in grades K-12 in formal and informal settings, and what that means for the goals, design, and implementation of such experiences. Presenters will unpack the state of the evidence on the role of authentic STEM learning opportunities and promising approaches and strategies in the development of interest and competencies for technology and computing fields. A recurring theme throughout the workshop will be implications for increasing diversity and access to authentic STEM learning experiences among underserved young people. Confirmed Speakers: Questions? Email us at STEMforCompTech@nas.edu"
"174","2019-09-30","2023-03-24","https://computinged.wordpress.com/2019/09/30/task-specific-programming-will-only-matter-if-it-solves-a-users-problem-precalculus-tsp-part-4-of-5/","This is the fourth in a five part series about Precalculus Task-Specific Programming. I presented two prototypes in Parts 1 and 2, and discussed what I’m exploring about programming in Part 3. I’ve shown my prototypes to several teachers — some computer science (e.g., I presented the first prototype at the Work In Progress Workshop at ICER in Toronto) and a half-dozen math teachers. The computer science teachers have been pretty excited, and I have had several requests for the system to try out with various student groups. Why am I looking at precalculus? Because it’s what leads to success in college calculus. I’m influenced by Sadler and Sonnert’s work showing that high school calculus isn’t the critical thing to support success in undergraduate calculus (see article here). It’s precalculus. Undergraduate calculus is a gatekeeper. Students don’t get STEM undergraduate degrees because they can’t get through calculus. So if we want more students to succeed in STEM undergraduate, we want high school precalculus to get better, in terms of more inclusive success. Precalculus is a pretty abstract set of topics (see an example list here). For the most part, it’s foreword looking: “You’ll need this when you get to Calculus.” My idea is to teach precalculus with concrete contexts made possible by computing, like image filters. I want more students to find precalculus more engaging and more personally meaningful, leading to more learning. So, might my prototypes help students learn precalculus? Math teachers have generally been, “Meh.” I’ve had four teachers tell me that it’s “interesting*.” One math teacher was blunt and honest — neither of these tools solve a problem that students have. Basic matrix notation and element-by-element matrix operations are the easiest parts of matrices. Precalculus students can already (typically) figure out how to plot a given wave equation. What’s hard? Students struggle with forms of matrix multiplication and determinants. They struggle with what each of the terms in the wave function do, and what influences periodicity. Seeing the graphed points is good, but having the values display in symbolic form like (3*pi)/2 would be more powerful for making a connection to a unit circle. I’m learning these in a participatory design context, so I actually pushed more on what would be useful and what I need to do better — I have a much longer list of things to do better than just these points. The math teachers have generally liked that I am paying attention to disciplinary literacy. I’m using their notations to communicate in the ways that things are represented in their math textbooks. I am trying to communicate in the way that they want to communicate. Here’s the big insight that I learned from the mathematics teachers with whom I’ve spoken: Teachers aren’t going to devote class time or their prep time to something that doesn’t solve their problems. Some teachers are willing to put time into additional, enrichment activities — if the teacher needs more of those. As one teacher told me, “Most math classes are less about more exploration, and more about less failure.” The point of precalculus is to prepare students to pass calculus. If you want more diverse students to get into STEM careers, more diverse students have to get through calculus. Precalculus is important for that. The goal is less failure, more success, and more student understanding of mathematics. This insight helps me understand why some computational tools just don’t get a foothold in schools. At the risk of critiquing a sacred cow, this helps to explain why Logo didn’t scale. Seymour Papert and crew developed turtle geometry, which Andrea diSessa and Hal Abelson showed was really deep. But did Logo actually solve a problem that students and teachers had? Turtle graphics is beautiful, and being body syntonic is great, but that’s not the students’ problem with math. Most of their real problems with mathematics had to do with the cartesian coordinate system, not with being able to play being a turtle. Every kid can walk a square and a triangle. Did students learn general problem-solving skills? Not really. So, why should teachers devote time to something that didn’t reduce student failure in mathematics? It would be hard to be disciplinary literate when Logo and turtle geometry was invented. Logo was originally developed on teletype machines. (See Cynthia Solomon’s great keynote about this story.) The turtle was originally a robot. Even when they moved Logo to the Apple II, they could not match the representations in the kid’s textbooks, the representations that the teachers were most comfortable with. So instead, we asked student to think in terms of fd 200 rt 90 instead of (x,y). Basic usability principles tell us to use what the user is familiar with. Logo didn’t. It demanded more of the students and teachers, and maybe it was worthwhile in long run — but that tradeoff wasn’t obvious to the teachers. I have a new goal: I want to provide a programming experience that can be used in five minutes which can be integrated into a precalculus class to improve on student learning. I want to use programming to solve a learning problem in another domain. Programming won’t enter the classroom if it doesn’t solve a teacher’s problem, which is what they perceive as the student’s problem. Improving student learning is my users’ (teachers’) goals. Good UI design is about helping the user achieve their goals. I’ve started on designs for two more precalc prototypes based on the participatory design sessions I’ve had, and I’m working on improving the wave texture generator to better address real learning problems. The work I’m doing with social science educators is completely driven by teachers and student learning challenges. That’s one of the reasons why I don’t have working prototypes there yet — it’s harder to address real problems. My precalc prototypes were based on my read of literature on precalculus. That’s never going to be as informed as the teacher-in-the-classroom. Now, there’s another way in which we might argue that these prototypes help with education — maybe they help with learning something about computer science? Here’s a slide from my SIGCSE 2019 keynote, referencing the learning trajectories work by Katie Rich, Carla Strickland, T. Andrew Binkowski, Cheryl Moran, and Diana Franklin (see this blog post).  You’re not going to learn anything about #1 from my prototypes — you can’t write imprecise or incomplete code in these task-specific programming environments. You can learn about #2 — different sets of transformation can produce the same outcomes. You definitely learn about #3 — programs are made by assembling instructions from a (very) limited set. If I were to go on and look at the Rich et al. debugging learning trajectories (see paper here), there’s a lot of that in my prototypes, e.g., “Outcome can be used to decide whether or not there are errors.” So here’s the big research question: Could students learn something about the nature of programming and programs from using task-specific programming? I predict yes. Will it be transferable? To text or blocks language? Maybe… Here’s the bigger research question that these prototypes have me thinking about. For the moment, imagine that we had tools like these which could be used reasonably in less than five minutes of tool-specific learning, and could be dropped into classes as part of a one hour activity. Imagine we could have one or two per class (e.g., algebra, geometry, trigonometry, biology, chemistry, and physics), throughout middle and high school. Now: Does it transfer? If you saw a dozen little languages before your first traditional, general-purpose programming language, would you have a deeper sense of what programs did (e.g., would you know that there is no Pea-esque “super-bug” homunculus)? Would you have a new sense for what the activity of programming is about, including debugging? I don’t know, but I think it’s worth exploring task-specific programming more to see if it works. Request to the reader: I plan to continue working on precalculus task-specific programming (as well as in social studies). If you know a precalculus teacher or mathematics education researcher who would be interested in collaborating with me (e.g., to be a design informant, to try out any of these tools, to collaborate on design or assessment or evaluation), please let me know. It’s been hard to find math ed people who are willing to work with me on something this weird. Thanks! * In the South, if you hear “Bless your heart!” you should know that you’re likely being insulted. It sort of means, “You are so incompetent that you’re pitiful.” I’ve learned the equivalent from teachers now. It’s “That would make a nice enhancement activity” or “We might use that after testing.” In other words, “I’d never use this. It doesn’t solve any of my problems.” "
"175","2019-04-22","2023-03-24","https://computinged.wordpress.com/2019/04/22/what-we-want-kids-to-learn-through-coding-requirements-for-task-specific-programming-languages-for-learning/","Marina Umaschi Bers has an essay from last year that I’ve been thinking about more since the discussion about task-specific programming languages (see previous post here). Her essay is: What Kids Can Learn Through Coding. In creating her ScratchJr kitten, Liana practiced some of the most powerful ideas of computer sciences: ScratchJr is just what the name suggests — a programming language like Scratch, but made even simpler and aimed at young children. See a description of activities with ScratchJr here. What I particularly like about Marina’s list is how it connects to the learning trajectories work that I’ve been talking about here and highlighted in my 2019 SIGCSE Keynote (as described in Ann Leftwich’s tweet). Ideas like “Precision and completeness are important when instructions in advance” are hard to learn. Knowing that the computer requires precision and isn’t trying to understand you like a human is really the first step to getting past Roy Pea’s “Superbug.” These are important ideas to learn. I’ll bet that most students don’t have that insight (even when they get to undergraduate education). That would be an interesting research question — what percentage of University students know ideas like the importance of precision and completeness in computer instructions? I have a hypothesis that these fundamental ideas (what Marina is pointing out, what Katie Rich et al. are noting in their learning trajectories) even transfer. These aren’t higher-order thinking skills. This isn’t about learning a programming language to be used across the curriculum. Rather, these concepts are about recognizing, “The nature of programming.” I bet that students will learn these and remember them in new contexts, because it’s about what the computer and programming is. Once you learn that computer instructions require precision and completeness, I predict that you always remember that programming has that requirement. What else do we want students to get from coding? Please note that I’m not talking about “computational thinking.” I’m setting aside the possibility of more general “mindset” benefits. Right now, I’m thinking in pragmatic and measurable terms. We can measure students learning the concepts in the trajectories. We can measure if those concepts are retained and applied later. This is why task-specific programming languages are interesting to me. The goal isn’t “learning programming” (and I’ll argue in a few weeks that that isn’t a thing). The goal is using code to improve learning about something other than programming skills. Notice the term that Marina uses in her essay: “the most powerful ideas of computer sciences.” She’s not teaching students how to program. She is teaching them what programming is. A task-specific programming language used in an educational context should improve learning in that context. It should provide some leverage that wasn’t there previously (i.e., without the computer). I think what Alan was telling me in the comments to an earlier blog post about task-specific programming and again in the blog post on multiple languages in schools is that it should also lead to generativity. If I teach you a programming language that solves your task and doesn’t connect to more powerful ideas and languages, then I have taught you a dead-end solution. I might achieve the goals I’ve identified earlier, but I’m not helping you to solve the next problems or the problems you’re going to face next year or next class. I’m not sure right now how to achieve that goal, but I recognize the value of it. What are other requirements for the use of task-specific languages for learners?"
"176","2017-04-03","2023-03-24","https://computinged.wordpress.com/2017/04/03/elementary-school-computer-science-misconceptions-and-developmental-progressions-papers-from-sigcse-2017/","March 8-11, Seattle hosted the ACM SIGCSE Technical Symposium for 2017. This was the largest SIGCSE ever, with over 1500 attendees. I was there and stayed busy (as I described here). This post isn’t a trip report. I want to talk about two of my favorite papers (and one disappointing one) that I’ve read so far. We are starting to gather evidence on what makes elementary school computer science different than undergraduate computer science. Most of our research on learning programming and computer science is from undergraduates, published in SIGCSE venues. We know relatively little about elementary school students, and it’s obvious that it’s going to be different. But how? Shuchi Grover and Satabdi Basu of SRI are starting to answer that question in their paper “Measuring Student Learning in Introductory Block-Based Programming: Examining Misconceptions of Loops, Variables, and Boolean Logic.” They looked at the problems that 6th, 7th, and 8th graders had when programming in Scratch. They’re reporting on things that I’ve never heard of before as misconceptions at the undergraduate level. Like this quote: Students harbored the misconception that a variable is a letter that is used as a short form for an unknown number – an idea that comes from middle school mathematics classes. Together, this led students to believe that repeat(NumberOfTimes) was a new command. One student conjectured it was a command for multiplication by 5 (the value of NumberOfTimes), while another thought it would print each number five times… After being told that NumberOfTimes was indeed a variable, the students could correctly predict the program output, though they continued to take issue with the length of the variable name. I find their description believable and fascinating. Their paper made me realize that middle school students are expending cognitive load on issues like multi-character variable names that probably no computer scientist even considered. That’s a real problem, but probably fixable — though the fix might be in the mathematics classes, as well as in the CS classes. The paper that most impressed me was from Diana Franklin’s group, “Using Upper-Elementary Student Performance to Understand Conceptual Sequencing in a Blocks-based Curriculum.” They’re studying over 100 students, and starting to develop general findings about what works at each of these grade levels. Three of their findings are quoted here: Finding 1: Placing simple instructions in sequence and using simple events in a block-based language is accessible to 4th-6th grade students. Finding 2: Initialization is challenging for 4th and 5th grade students. Finding 3: 6th grade students are more precise at 2-dimension navigation than 4th and 5th grade students. I’ve always suspected that there was likely to be an interaction between a student’s level of cognitive development and what they would likely be able to do in programming, given how much students are learning about abstraction and representation at these ages. Certainly, programming might influence cognitive development. It’s important to figure out what we might expect. That’s what Diana’s group is doing. She isn’t saying that fourth grader’s can’t initialize variables and properties. She’s saying it’s challenging for them. Her results are likely influenced by Scratch and by how the students were taught — it’s still an important result. Diana’s group is offering a starting point for exploring these interactions and understanding what we can expect to be easy and what might be hard for the average elementary school student at different ages. There may be studies that also tell us about developmental progressions in countries that are ahead of the US in elementary school CS (e.g., maybe Israel or Germany). This is the first study of its kind that I’ve read. SIGCSE 2017 introduced having Best Paper awards in multiple categories and Exemplary Paper awards. I applaud these initiatives. Other conferences have these kinds of awards. The awards helps our authors stand out in job searches and promotion time. To be really meaningful awards, though, SIGCSE has to fix the reviewing processes. There were hiccups in this year’s reviewing where there wasn’t much of a match between reviewer expertise and the paper’s topic. The hiccups led to papers with significant flaws getting high rankings. The Best Paper award in the Experience Report category was “Making Noise: Using Sound-Art to Explore Technological Fluency.” The authors describe a really nifty idea. They implement a “maker” kind of curriculum. One of the options is that students get toys that make noise then modify and reprogram them. The toys already work, so it’s about understanding a system, then modifying and augmenting it. The class sounds great, but as Leah Buchele has pointed out, “maker” curricula can be overwhelmingly male. I was surprised that this award-winning paper doesn’t mention females or gender — at all. (There is one picture of a female student in the paper.) I understand that it’s an Experience Report, but gender diversity is a critical issue in CS education, particularly with maker curricula. I consider the omission of even a mention of gender to be a significant flaw in the paper."
"177","2014-12-17","2023-03-24","https://computinged.wordpress.com/2014/12/17/makers-are-mostly-rich-white-guys-broadening-participation-in-computing-requires-formal-education/","“I’m tired of organizations being set up to tell young women and young brown and black men that they should aspire to be young white men.” Leah Buechley makes a compelling case in the below video that the Maker movement is not reaching the kind of audience that we might have hoped for. It’s mostly talking to “rich white guys.” This is another example of what Fields and Kafai were talking about at WIPSCE 2014 (see my description here) — informal education mostly attracts the most privileged groups. Here’s an interesting blog post on how to create Maker spaces that bridging gaps."
"178","2019-11-25","2023-03-24","https://computinged.wordpress.com/2019/11/25/the-future-of-computing-education-is-in-providing-literacy-to-all-video-of-sigcse-2019-keynote-now-available/","Here in the United States, it’s Thanksgiving week, so it’s a good time to put a cap on one of the events that I’m most thankful for this year. My keynote at SIGCSE 2019, Computing Education as a Foundation for 21st Century Literacy, was recorded, but something went wrong with the audio. (That happens when the audio includes speaking, singing, harmonica, ukulele, and totally messed up digital sounds.) I reached out to Rebecca Quintana of U. Michigan’s Center for Academic Innovation, and they agreed to re-record my lecture in the studio with a professional engineer. It’s a series of smaller videos, rather than one long one hour video. https://www.youtube.com/playlist?list=PL5-TkQAfAZFbalQod5uP9x1hUQnIUHWnk The crowdsourced blog post about the keynote is here, and my post with my many thanks is here. The slides are available here: I fixed some typos and updated a bit the extended abstract associated with the talk. You can get the (non-paywalled) updated paper here. Happy Thanksgiving, everyone!"
"179","2019-03-01","2023-03-24","https://computinged.wordpress.com/2019/03/01/thanks-for-all-the-fish-and-everything-else/","This morning, I’m giving the keynote at the SIGCSE Symposium after receiving the 2019 SIGCSE Award for Outstanding Contribution to Computer Science Education. This award is so important to me. It comes from the SIGCSE Community, which I’ve been part of since 1995. It’s an award that’s woven into our community. I’ve been fortunate to win other awards, but those are over there. They come from and are awarded someplace outside of the mainstream. Every year, the Outstanding Contributor gets in front of the SIGCSE Community and has his or her say. It’s here, among all of us. I can’t tell you how many of those speeches I’ve attended. Of course, I’ve wondered, “What if I was up there? What would I say to this community?” This year, I get my chance. Sometimes, the award winner thanks the people who got them there. I feel that same urge. I am so very grateful to all my collaborators over the years, without whom, I would not have done the work that got me to this award. But the audience isn’t so keen on hearing the Thank You’s. I want to use this opportunity to say something to the community — about how important they are, about our history, and about what we need to do next. In the last few weeks, I’ve been interviewed twice where I got the chance to acknowledge some of my collaborators, influences, and mentors — in Marc Lesser’s podcast and in the recent SIGCSE bulletin. I’m grateful to have had those opportunities so that I could tell my stories and give thanks. I’m so glad that Marc asked me how I got here. I have had the advantage of significant preparatory privilege. My parents sent me to a private, parochial high school in 1976 that had two computer science teachers and classes in both Basic and Fortran. I had a microcomputer store open up a block from my house, where I was hired as an assistant in 1979. By the time I got to Wayne State University, I had programmed in several high level languages and four assembler languages (6502, 6800, 8080, and Z-80). I started teaching computer science in 1980. I’m lucky — I had great parents and amazing opportunities. In this blog post, let me just say three more BIG THANK YOU’s. First, my wonderful students. Everyone knows that work by a professor is work done by the graduate students, with a bit of the professor’s direction. My PhD students have inspired me, taught me, and done the most important research in my career: Noel Rappin, Colleen Kehoe, Jochen Rick, Brian Landry, Allison Elliott Tew, Brian Dorn, Lijun Ni, Mike Hewner, Briana Morrison, Miranda Parker, Amber Solomon, Katie Cunningham, and Bahare Naimipour. Then there are all the PhD students whom I didn’t directly advise, but who collaborated with me on some terrific work: Jennifer Turns, Andrea Forte, Lana Yarosh, Lauren Margulieux, and many others. I am grateful to all of them for all the papers on this list and the many times they’re mentioned in the 10 years of this blog. Second, my mentors. At the start of Learner-Centered Design of Computing Education Research, there is this dedication page.  That’s Elliot Soloway (my advisor and longest-time mentor), Janet Kolodner (who taught me how to be a learning scientist), Jim Foley (who continues to be my model for academic leadership, and who gave the green light to MediaComp), Peter Freeman (the Dean who hired me at Georgia Tech), Rich LeBlanc (who introduced me to SIGCSE), John Stasko (who has been my big brother in academia for over 25 years), and Alan Kay (who inspired me to get my PhD and has been my mentor for literally decades). “All my mentors” include people like Bob Kozma who convinced me to do this joint PhD thing, Joe Krajcik who taught me science education research, Kurt Eiselt who convinced Jim to green light MediaComp, Rick Adrion who explained US education public policy to me, and Carl Berger who continues to inspire me with his curiosity about everything. I am grateful for their guidance and support, and to many of them, for taking a chance on me. Third, but most important, is Dr. Barbara Ericson. Barbara and I were married in 1985 in July, and started our MS in CSE at the University of Michigan in September. We have supported each other through two PhD’s, umpteen papers, the only joint ACM Karlstrom award, some significant NSF grants — and three children, two homes, multiple jobs, and 30+ years of marriage. Barb is my most important collaborator, critic, proponent, and dearest friend. I really can’t express the depth of my gratitude to and love for Barb.  "
"180","2019-02-08","2023-03-24","https://computinged.wordpress.com/2019/02/08/higher-ed-and-the-role-of-a-computing-culture-interview-on-no-such-thing-podcast/","When I visited the To Code and Beyond workshop last month (as mentioned in this podcast), I was interviewed by Marc Lesser for the No Such Thing podcast, which he just released. (My keynote is also in his podcast series here.) It’s a wide ranging interview, from woodworking to the work I’ve started with History professors Bob Bain and Tamara Shreiner, from how I began teaching computing in 1980 to how I’ve been inspired by (to name a few) Alan Kay, Yasmin Kafai, E. Paul Goldenberg, Brian Harvey, and Bob Kozma. Marc’s framing for the podcast is interesting (pasted below): How do we “bottle” me? In other words: How do we create more computing educators who care about CS for All, especially at the higher education level? The episode can be found here. At the top of the last episode you learned about Mark Guzdial. Mark is a Professor in the College of Engineering at the University of Michigan. After his talk at Cornell Tech’s “To Code and Beyond” I had a chance to sit down with Mark and ask what questions had bubbled up while I listened to his talk live. Probably my most pressing question: what you’re saying is great, but we’ve all seen professors like you on youtube – Mark is a brilliant, animated, ukulele playing Computer Science professor, who, from my time with him, seems as passionate about you learning about his passion topic, as he is about the topic itself. He’s a rare mix, and what I’m sure many in the audience wondered – what the country is wondering right now – is how do we bottle some of that, and help thousands of teachers in every state offer young people the experience that surely the students in Mark’s class have each semester. For what it’s worth, out-of-state tuition at his school is $43,476 with a 26% acceptance rate. A wicked problem, indeed."
"181","2019-01-28","2023-03-24","https://computinged.wordpress.com/2019/01/28/the-ground-truth-of-computing-education-what-do-you-know/","Earlier this month, I was a speaker at a terrific event at Cornell Tech To Code & Beyond: Thinking & Doing organized by Diane Levitt (see Tweet here). I spoke, and then was on a panel with Kelly Powers, Thea Charles, Aman Yadav, and Diane to discuss what is Computational Thinking. One of the highlights of the day for me was listening to Margaret Honey, a legendary educational technology designer and researcher (see bio here). She is President and CEO of the New York Hall of Science. One of my favorite parts of her talk was a description of the apps that they’re building to get kids to notice and measure things in their world. I even love the URL for their tools — https://noticing.nysci.org/ At the event, Diane mentioned that she was working on a blog post about her “ground truth” — what she most believed about CS education. She shared it as a tweet right after the event. It’s lovely and deep — find it here.  A couple of my favorite of her points: Students thrive when we teach at the intersection of rigor and joy. In computer science, it’s fun to play with the real thing. But sometimes we water it down until it’s too easy—and kids know it. Struggle itself will not turn kids away from computer science. They want relevant learning experiences that lead to building things that matter to them. “I can do hard things!” is one of the most powerful thoughts a student can have. The biggest lever we have is the one we aren’t using enough yet: preservice education for new teachers. The sooner we start teaching computer science education alongside the teaching of math and reading, during teachers’ professional preparation programs, the sooner we get to scale. It’s expensive and time-consuming to continually retool our workforce. Eventually, if every teacher enters the classroom prepared to include computer science, every student will be prepared for the digital world in which they live. This is what we mean by equity: equal access for every student, regardless of geography, gender, income, ability, or, frankly, interest. Sara Judd answered Diane’s post with one of her own — find it here. I really enjoy it because she sees computer science like I do. It’s not just about problem-solving, but also about making things and connecting to the world. Programming makes things. While programming for it’s own sake can be fun for some people, (me, for instance) generally when people are programming it is because there is a thing that needs to be made. These things can be expressive pieces of visual art or music. These things can be silly fun for fun’s sake. These things can revolutionize the world, they can make our lives easier. The important thing is, they are “things.” CS doesn’t exist in a vacuum. Therefore, classroom CS should not exist in a vacuum. I encourage more of us to do this — to write down what we believe about CS education, then share the essays. It’s great to hear goals and perspectives, both to learn new ones and also to recognize that others share how we think about it. I particularly enjoy reading these from people with different life experiences. I have a privileged life as a University CS professor. Teachers in K-12 struggle with very different things. I’m so pleased when I find that we still have similar goals for and perspectives about CS education."
"182","2017-04-17","2023-03-24","https://computinged.wordpress.com/2017/04/17/katie-cunningham-receives-nsf-fellowship-studying-how-cs-students-use-sketching-and-tracing/","Kate Cunningham is a first year PhD student working with me in computing education research. She just won an NSF graduate research fellowship, and the College of Computing interviewed her. She explains the direction that she’s exploring now, which I think is super exciting. “I’m interested in examining the kinds of things students draw and sketch when they trace through code,” she said. “Can certain types of sketching help students do better when they learn introductory programming?” She grew interested in this topic while working as a teacher for a program in California. As she watched students there work with code, she found that they worked solely with the numbers and text on their computer screen.“They weren’t really drawing,” she said. “I found that the drawing techniques we encouraged were really useful for those students, so I was inspired to study it at Georgia Tech.” Essentially, the idea is that by drawing or sketching a visual representation of their work as they code, students may be able to better understand the operations of how the computer works. “It’s a term we call the ‘notional machine,’” Cunningham explained. “It’s this idea of how the computer processes the instructions. I think if students are drawing out the process for how their code is working, that can help them to fully understand how the instructions are working.” That’s one benefit. Another, she said, is better collaboration. If a student is sketching the process, she posits, the teacher can better see and understand what they’re thinking. Source: IC Ph.D. student Katie Cunningham receives NSF fellowship | College of Computing"
"183","2021-01-21","2023-03-24","https://computinged.wordpress.com/2021/01/21/broadening-participation-in-computing-is-different-in-every-state-take-michigan-for-example/","In December, Rick Adrion, Sarah T. Dunton, Barbara Ericson, Renee Fall, Carol Fletcher, and I published an essay in Communications of the ACM, “U.S. States Must Broaden Participation While Expanding Access to Computer Science Education.” (See link here, and pre-print available at the bottom of this post.). Rick, Renee, Barb, and I were the founders of the ECEP Alliance which helps states and US territories with their computing education policy and practices. Carol is now the PI on ECEP (which feels so great to say — ECEP continues past the founders, with excellent leadership) — the whole leadership team is here. Sarah likely knows more about state-level computing education policy than anyone else in the US. She has worked with individual teams in individual states for years. Our argument is that broadening participation and expanding access are not the same thing. Simply making CS classes available doesn’t get students into those classes. We tell the story of two states (Nevada and Rhode Island) and how CS Ed is growing there. Barbara and I now live in Michigan. The CSTA, Code.org, and ECEP report 2020 State of Computer Science Education: Illuminating Disparities (see link here) has a sub-report for every US state. Michigan is on page 56. The press release for the 2020 report says that 47% of US high schools now offer CS. Michigan is at 37%. Michigan is the only state (as far as I can tell) that used to have CS teacher certification and pre-service CS but got rid of it (story here). Also in December, Michigan Department of Education (MDE) released the first “State of Computer Science in Michigan Report” (see link here). The data collection and writing on the report was led by Aman Yadav and Sarah Gretter of Michigan State with Cheryl Wilson of MDE. A quote from page 11: “The trend of declining course offerings continues at the high school level where even fewer high schools offer CS courses. Code.org course offering data suggests that only 23.7% of rural high schools, 28% of town high schools, 29.1% of sub-urban high schools, and 21.7% of city high schools offer CS.” (The numbers on the website are lower than these — Aman and Cheryl kindly sent me an early peek at a revision that they’re posting soon.) MDE’s numbers are a lot lower than the 37% in the Code.org/CSTA/ECEP report. What’s going on here? My best guess is that CS is rare enough in Michigan that not everybody who fills out a survey knows what the national CS education movement means by “computer science.” We had this a lot in the early days of “Georgia Computes,” too. A principal would say that they teach CS, when they might mean Microsoft Office or Web design (with no HTML, CSS, or JavaScript). In any case, Michigan is clearly below national averages on providing CS education to its citizens and creating sustainable CS education policy. How do we help Michigan progress in providing computing education to its citizens? I don’t know. Aman, Barb, and I have had conversations about the potential for growing CS Ed in Michigan. We don’t have the same leverage points in Michigan that we have had in other ECEP states. Michigan is a local control state. Individual local education agencies (LEA’s — sometimes a school district, sometimes a county-wide collection of districts) can make up their own rules on important issues like CS teacher certification. In Georgia and South Carolina, the state government has a lot of control in education, so there was a point of leverage. California is also a local control state, but the California University systems are important to all high schools, so that’s a point of influence. Massachusetts is again a local control state, but the Tech industry is very important to the Boston area, and that’s important to the state. Tech isn’t important in the same way in Michigan. If you read the MDE report, there’s a lot of ambivalence about CS in the state. Administrators aren’t that excited about teaching CS. They don’t see CS education as important for their students. Michigan is a big state, where agriculture and tourism are two of the most significant industries. Manufacturing is a big deal, but manufacturing workers don’t necessarily need to know much about computing. CS isn’t an obvious benefit to much of Michigan. Aman’s strategy is to grow CS education in the state slowly, to develop pockets of value for CS and success in teaching CS. We have to plant seeds and grow to a critical mass, which seems like the right approach to me. He has projects where he is helping develop teachers and relevant curriculum for CS education in specific counties. He works closely with the MDE. Sarah is involved with Apple’s Developer Academy to open in Detroit (see story here). Michigan does have a powerful and large teacher’s group supporting educational technology, MACUL (Michigan Association for Computer Users in Learning, see website), which could be a significant player in growing CS education in the state. The important point here is that, in the United States, growing CS education is a state-by-state challenge. Each state has its own story and issues. "
"184","2017-08-04","2023-03-24","https://computinged.wordpress.com/2017/08/04/michigan-is-phase-out-its-computer-science-teaching-endorsements/","I’d heard that this was happening, but couldn’t believe it, until I saw the news reports. While other states are ramping up computer science teacher certifications or endorsements, and schools are starting to offer programs for those certifications, Michigan is actually phasing it out. Teachers who currently hold the endorsements will continue to see them displayed on their certificates and may continue to teach in those areas. However, starting in 2017-18, administrators will have discretion in assigning a teacher in those endorsement areas. For example, a teacher with a computer science endorsement may be assigned to teach computer science, or a district may employ a teacher without the endorsement who displays strong computer science skills. Source: Some Teaching Endorsements Phasing Out – Michigan Education Association"
"185","2017-06-14","2023-03-24","https://computinged.wordpress.com/2017/06/14/using-tablets-to-broaden-access-to-computing-education-elliot-soloway-and-truly-making-cs-for-all/","I recently had the opportunity to visit with my PhD advisor, Elliot Soloway. Elliot has dramatically changed the direction of his research since we worked together. And he’s still very persuasive, because now I keep thinking about his challenge to push educational technology onto the least expensive devices. When I worked with Elliot in the late 1980’s and early 1990’s, we emphasized having lots of screen real estate. Though the little Macintosh Plus was still popular through much of that time, Elliot was hooking up 21-inch, two page displays for all our development and at the high schools where we worked. The theoretical argument was the value of multiple-linked representations (like in this paper from Bob Kozma). By giving students multiple representations of their program and their design, we would facilitate learning across and between representations. The goal was to get students to see programming as design. But in the mid 1990’s, Elliot changed his direction to emphasize inexpensive, handheld devices. I remember asking him why at the time, and he pointed out that you could give 10 students access to these low-cost devices for one of the higher-end devices. And access trumps screens. Now, Elliot has a project, Intergalactic Mobile Learning Center, that produces software for learning that runs on amazingly inexpensive computers. Go to http://www.imlc.io/apps and try out their all-HTML software on any of your devices. I purchased an Amazon Fire HD 8 tablet last year as a media consumption device (reading, videos, and music). For less than $100, it’s an amazingly useful device that I carry everywhere since it’s light and mostly plastic. Here’s some of IMLC’s software running on my inexpensive tablet.  I have been arguing in this blog that we need a greater diversity of teaching methods in computer science, to achieve greater diversity and to teach students (and reach students) who fail with our existing methods. Elliot’s argument for inexpensive tablets has me thinking about the value for computing education. If our only CS teaching method is “write another program,” then a tablet makes no sense. Typing on a tablet is more difficult than on a laptop or desktop computer. I have been arguing that we can actually teach a lot about coding without asking students to program. If we expand our teaching methods to those that go beyond simply writing programs, then a tablet makes a lot of sense. Could a focus on using tablets to teach computer science drive us to develop new methods? If more CS teachers tried to use tablets, might that lead to greater adoption of a diverse range of CS teaching methods? Elliot’s argument is about bridging the economic and digital divide. Can we use the low cost of tablets to break down economic barriers to learning computer science? Computing education via tablets may be key to the vision of CS for All. We can outfit a whole classroom with tablets much more cheaply than buying even mid-range laptops for an elementary or middle school classroom. There are people suggesting that if we buy kids iPads, we’ll improve learning (e.g., Los Angeles schools). I’m making the inverse argument. If we as computing curriculum/technology developers and teachers figure out how to teach computing well with tablets, we’ll improve learning for everyone. I started checking out what I could do with my less than $100 tablet. I was amazed! Moore’s Law means that the low-end today is surprisingly capable. GP, the new blocks-based programming language that I’ve been working with (see posts here and here), runs really well on my Fire HD 8 tablet. In fact, it runs better (more functionality, more reliable, greater stability) in the browser of my Fire tablet than the browser-based GP does on my iPad Pro (which costs about a magnitude more). (There is an iOS version of GP which is fast and stable, but doesn’t have all the features of the browser-based version.) GP running on a Fire HD 8 Tablet — two Media Computation projects (mirroring on left, removing red eye on right)  Our ebooks run well on the Fire HD 8 tablet. I can program Python in our ebook using the tablet. Our approach in the ebooks emphasizes modification to existing programs, not just coding from scratch. Tweaking text works fine on the tablet. Running Python code on the Fire HD 8 Tablet  A wide range of CS education practice activities, from multiple choice questions to Parsons Problems, work well on the Fire HD 8. Parsons Problem on Fire HD 8 Tablet  I tried out WeScheme on my Fire HD 8, too.  I bought the cheapest Chromebook I could find for this trip. I wanted a laptop alternative to take to China and for commuting on the Barcelona subway, rather than my heavier and more expensive MacBook Air. All of these browser-based tools (GP, Python programming in the ebook, Parsons Problems) run great on my $170 Acer Chromebook, plus I get a keyboard. Even a Chromebook would require different teaching and learning methods than what we use in many CS courses. I’m not going to run Eclipse or even JES on a Chromebook. (Though Emacs has been ported to the Chromebook, it only runs on certain Chromebooks and not mine). Google is aiming to merge Chromebook and Android development so that apps run on both. I don’t really understand all the differences between tablets and Chromebooks, but I do know that Chromebooks are becoming more common in schools. A Chromebook costs about twice what a low-end tablet costs. While that is still much less than most laptops, twice is a big markup for a poor student or a budget-strapped school. It’s worth pushing for the lowest end. CS education researchers, developers, and teachers should explore teaching computing with tablets. Some are doing this already. The next version of Scratch will run on mobile phones, and the current version will already run on some phones and tablets. Creating CS learning opportunities on low-end tablets will make computing education more affordable and thus accessible to a broader range of potential CS students. My proposal isn’t about offering the poor a cheaper, low-quality alternative. Tablets force us to expand and diversify our teaching methods, which will lead us to create better and more accessible computing education for all."
"186","2015-12-09","2023-03-24","https://computinged.wordpress.com/2015/12/09/blog-post-2000-barbara-ericson-proposes/","My 1000th blog post looked backward and forward. This 2000th blog post is completely forward looking, from a personal perspective. Today, my wife and research partner, Barbara Ericson, proposes her dissertation. Interesting side note: One of our most famous theory professors just blogged on the theory implications of the Parsons Problems that Barb is studying. See post here. Barb’s proposal is the beginning of the end of this stage in our lives. Our youngest child is a senior in high school. When Barbara finishes her Human-Centered Computing PhD (expected mid-2017), we will be empty-nesters and ready to head out on a new adventure. Title: EVALUATING THE EFFECTIVINESS AND EFFICIENCY OF PARSONS PROBLEMS AND DYNAMICALLY ADAPTIVE PARSONS PROBLEMS AS A TYPE OF LOW COGNITIVE LOAD PRACTICE PROBLEM Barbara J. Ericson Ph.D. student Human Centered Computing College of Computing Georgia Institute of Technology Date: Wednesday, December 9, 2015 Time: 12pm to 2pm EDT Location: TSRB 223 Committee ————– Dr. James Foley, School of Interactive Computing (advisor) Dr. Amy Bruckman, School of Interactive Computing Dr. Ashok Goel, School of Interactive Computing Dr. Richard Catrambone, School of Psychology Dr. Mitchel Resnick, Media Laboratory, Massachusetts Institute of Technology Abstract ———– Learning to program can be difficult and can result in hours of frustration looking for syntactic or semantic errors. This can make it especially difficult to prepare inservice (working) high school teachers who don’t have any prior programming experience to teach programming, since it requires an unpredictable amount of time for practice in order to learn programming. The United States is trying to prepare 10,000 high school teachers to teach introductory programming courses by fall 2016. Most introductory programming courses and textbooks rely on having learners gain experience by writing lots of programs. However, writing programs is a complex cognitive task, which can easily overload working memory, which impedes learning. One way to potentially decrease the cognitive load of learning to program is to use Parsons problems to give teachers practice with syntactic and semantic errors as well as exposure to common algorithms. Parsons problems are a type of low cognitive load code completion problem in which the correct code is provided, but is mixed up and has to be placed in the correct order. Some variants of Parsons problems also require the code to be indented to show the block structure. Distractor code can also be provided that contains syntactic and semantic errors. In my research I will compare solving Parsons problems that contain syntactic and semantic errors, to fixing code with the same syntactic and semantic errors, and to writing the equivalent code. I will examine learning from pre- to post-test as well as student reported cognitive load. In addition, I will create dynamically adaptive Parsons problems where the difficulty level of the problem is based on the learners’ prior and current progress. If the learner solves one Parsons problem in one attempt the next problem will be made more difficult. If the learner is having trouble solving a Parsons problem the current problem will be made easier. This should enhance learning by keeping the problem in the learner’s zone of proximal development as described by Vygotsky. I will compare non-adaptive Parsons problems to dynamically adaptive Parsons problems in terms of enjoyment, completion, learning, and cognitive load. The major contributions of this work are a better understanding of how variants of Parsons problems can be used to improve the efficiency and effectiveness of learning to program and how they relate to code fixing and code writing. Parsons problems can help teachers practice programming in order to prepare them to teach introductory computer science at the high school level and potentially help reduce the frustration and difficulty all beginning programmers face in learning to program. "
"187","2020-05-11","2023-03-24","https://computinged.wordpress.com/2020/05/11/thought-experiment-on-why-face-to-face-teaching-beats-remote-emergency-teaching/","With everything moving on-line, I’m seeing more discussion about whether this on-line life might just be better. Amy Ko recently blogged (see post here) about how virtual conferences are cheaper, more accessible, and lower carbon footprint than face-to-face conferences, ending with the conclusion for her “it is hard to make the case to continue meeting in person.” My colleague, Sarita Yardi, has been tweeting about her exploration of “medium-independent classes” where she considers (see tweet here), “Trying to use the block of class time just because that’s how we’ve always taught seems like something to revisit. Less synchronous time; support short, frequent individual/small group interaction, less class time.” It’s hard to do on-line education well. I used to study this kind of learning a lot (see post on “What I have learned about on-line collaborative learning”). I recently wrote about how we’re mostly doing emergency remote teaching, not effective on-line learning (see post here). I am concerned that moving our classes on-line will hurt the most the students who most need our help (see post here). It should come as no surprise then that I don’t think that we know how to do on-line teaching or on-line conferences in a way that is anywhere close to the effectiveness of face-to-face learning. I agree with both Amy and Sarita’s points. I’m only focusing on learning outcomes. Let me offer a thought experiment on why face-to-face matters. How often do you… Now contrast that with: How often do you… For some people, the answers to the first set are like the answers for the second set. I tried this thought experiment on my family, and my wife pointed out that she finishes every book she starts. But for most people, the first set is much more likely to happen than the second set. This is particularly hard for professors and teachers to recognize. We are good at self-regulated learning. We liked school. We don’t understand as well the people who aren’t like us. There are a lot of people who don’t really like school. There are good reasons for members of minority groups to distrust or dislike school. Most people engage in higher-education for the economic benefit. That means that they have a huge value for the reward at the end, but they don’t particularly want to go through the process. We have to incentivize them to be part of the process. Yes, of course, many students skip classes. Some students skip many classes. But the odds are still in favor of the face-to-face classes. If you are signed up for a face-to-face class, you are much more likely to show up for that class compared to any totally free and absolutely relevant to your interests lecture, on-campus or on-line. Enrolling in a course is a nudge. For most people, you are much more willing to walk away from an asynchronous, impersonal event than a face-to-face, personal event. The odds of you learning from face-to-face learning are much higher simply because you are more likely to show up and less likely to walk out. It’s a great design challenge to make on-line learning opportunities just as compelling and “sticky” as face-to-face learning. We’re not there yet. I would be all in favor of efforts to teach people to be more self-regulated. It would be great if we all were better at learning from books, lectures, and on-line resources. But we’re not. The learners with the best preparation are likely the most privileged students. They were the ones who were taught how to learn well, how to learn from school, and how to enjoy school. Here’s a second thought experiment, for people who work at Universities. At any University, there are many interesting talks happening every week. For me, at least a couple of those talks each week are faculty candidates, which I am highly encouraged to attend. Now, they’re all on-line. How many of those did you attend when they were face-to-face, and how many do you attend on-line? My guess is that both are small numbers, but I’ll bet that the face-to-face number is at least double the on-line number. Other people see that you’re there face-to-face. There are snacks and people to visit with face-to-face. The incentives are far fewer on-line. On-line learning is unlikely to ever be as effective as face-to-face learning. Yes, we can design great on-line learning, but we do that fighting against how most humans learn most things. Studies that show on-line learning to be as effective (or even more effective) than face-to-face classes are holding all other variables equal. But holding all other variables equal takes real effort! To get people to show up just as much, to give people as much (or more) feedback, and to make sure that the demographics of the class stay the same on-line or face-to-face — that takes significant effort which is invisible in the studies that are trying to just ask face-to-face vs on-line. The reality is that education is an economic endeavor. Yes, you can get similar learning outcomes, at a pretty high cost. At exactly the same cost, you’re unlikely to get the same learning outcomes. We are wired to show-up and learn from face-to-face events. I would love for all of us to be better self-regulated learners, to be better at learning from books and from lecture. But we’re not Econs, we’re Humans (to use the Richard Thaler distinction). We need incentives. We need prompts to reflect, like peer instruction. We need to see and be seen, and not just through a small box on a 2-D screen."
"188","2018-11-12","2023-03-24","https://computinged.wordpress.com/2018/11/12/what-do-i-mean-by-computing-education-research-the-computer-science-perspective/","Last week, I talked about how I explain what I do to social scientists. This time, let me explain what I do to computer scientists. I haven’t given this talk yet, and have only tried the ideas out on a few people. So consider this an experiment, and I’d appreciate your feedback. Let’s simplify the problem of computing education research (maybe a case of a spherical cow). Let’s imagine that instead of classes of Real Humans, we are teaching programming to Human-like Turing Machines (HTMs). I’m not arguing that Turing machines are sufficient to represent human beings. I’m asking you to believe that (a) we might be able to create Turing Machines that could simulate humans, like those we have in our classes, (b) RH’s would only have additional capabilities beyond what HTM’s have, and (c) HTM’s and RH’s would similar mechanisms for cognition and learning. (Carl Hewitt has a great CACM blog post arguing that message passing is more powerful than TM’s or first order logic, so maybe these should be HMP, Human Message Passers. I don’t think I need more than TM’s for this post.) This isn’t a radical simplification. Cognitive science started out using computation as a model for understanding cognition (see history here). Information processing theory in psychology starts from a belief that humans process information like a computer (see Wikipedia article and Ed Psychology reference). Newell and Simon won the ACM Turing award and in their Turing Award lecture introduced the physical symbol system hypothesis, “A physical symbol system has the necessary and sufficient means for general intelligent action.” If we have a program on a Turing machine that gives it the ability to process the world in symbols, our theory suggests that it would be capable of intelligence, even human-like intelligence. I’m applying this lens to how we think about humans learning to program. This simplification buys me two claims: Here are some of the research questions that I find interesting, within this framing. All HTM’s must learn, and learn at a level where their initial programming (the bootstrap code written on their tape when they come into our world) becomes indistinguishable from learned capabilities. HTM’s must have built-in programming to eat and to sleep. They learn to walk and run and decipher symbols like “A,” such that it’s hard to tell what was pre-programmed and what was learned. HTM’s can extend their programming. There are lots of models that describe how HTM’s could learn, such as SOAR and ACT-R. But none so far has learned to program. The closest are the models used to build the cognitive tutors for programming, but those couldn’t debug and couldn’t design programs. They could work from a definition of a program to assemble a program, but that’s not what most of us would call coding. How would they do it? How would HTM’s think about code? How would it be represented in memory (whether that memory is a tape, RAM, or human brains)? There is growing research interest in how people construct mental models of notional machines. Even experts don’t really know the formal semantics of a language. So instead, they have a common, “notional” way of thinking about the language. How does that notional machine get represented, and how does it get developed? You shouldn’t be able to just reprogram HTM’s or extend their programs by some manipulation of the HTM’s. That would be dangerous. The HTM might be damaged, or learn something that led them into danger. Instead, extending HTM’s programming can only be done by conscious effort by the HTM. That’s a core principle of Piaget’s Theory of Cognitive Development — children (RH’s and HTM’s) learn by consciously constructing a model of the world. So, we can’t just tell an HTM how to program. Instead, we have to give them experiences and situations where they learn to program when trying to make sense of their world. We could just make them program a lot, on increasingly harder programs. Not only is that de-motivating (maybe not an issue for HTM’s, but certainly is for RH’s), but it’s inefficient. Turns out that we can use worked examples with subgoal labeling and techniques like Parson’s problems and peer instruction to dramatically improve learning in less time. We know that learning to read involves re-using more primitive mechanisms to see patterns (see article here). When HTM’s learn to program, what parts of the native programming are being re-used for programming? Programming in RH’s may involve re-use of our built-in ability to reason about space and language. My colleague Wes Weimer (website) is doing FMRI studies showing that programmers tend to use the parts of their brain associated with language and spatial reasoning. In our work, we have been studying the role of spatial reasoning and gesture in learning to program (see summaries of our ICER 2018 papers). We don’t know why spatial reasoning might be playing a role in learning to program. Maybe it’s not spatial reasoning, but some aspect of spatial reasoning or maybe it’s even some other native ability that is related to spatial reasoning. We can safely assume that HTM’s, like RH’s, would enhance their cognition through the use of external representations. Cognition and memory are limited. Even an infinite tape has limitations in terms of time to access. Human cognitive systems are limited in terms of how much can be attended to at once. RH’s use external representations (writing notes, making diagrams, sketches) to enhance their cognition. We’re assuming that HTM’s have a subset of RH abilities, so external representations would help HTM’s, too. My students and I talk about a wonderful paper by David Kirsh, Thinking with External Representations (see link here). It’s a compelling view of how external representations give us abilities to think that we don’t have with just our brain alone. How can program code be a useful external representation for HTM’s? When does it help, e.g., with what cognitive tasks is code a useful external representation? For example, a natural one is modeling and simulation — we can model more complex situations with program code than we can keep in our head, and we can simulate that model for a much larger range of time and possible values. Are there cognitive tasks where code by itself, as a notation like written language or mathematics, can enhance cognition? Here I’m thinking about the ability of code to represent causal relationships (e.g., as in Bruce Sherin’s work) or algebraic forms (e.g., as in Bootstrap) — see here for discussion of both. I’m intrigued by the idea of the affordances of reading code even before writing it. Why should an HTM learn programming? Let’s assume that an HTM’s basic programming is going to be about staying alive, e.g., Maslow’s hierarchy of needs. When would an HTM want to learn programming? The most obvious reason to learn programming is because you can get paid to do it. It’s about meeting physiological needs and safety. But, if you can meet those needs doing something that’s easier or more pleasant or has fewer barriers, you’ll likely do that. Sometimes, you’ll want to learn programming because it makes easier something you want to do anyway. Brian Dorn’s graphic designers wanted to learn programming (see here) because they used Photoshop or GIMP and wanted a way to do that easier and faster. Maybe that’s about safety and physiological needs, but maybe it was about esteem or even self-actualization (if HTM’s care about those things). Our learning theory about RH’s say that they are unlikely to start a new subject unless there’s social pressure to do so (see Pat Alexander’s Model of Domain Learning). Would HTM’s feel social pressure? Maybe. As I described in the previous blog post, much of my work is framed around sociocultural models of learning, like Lave and Wenger’s situated learning. I use Communities of Practice to understand a lot of the situations that I explore. We can only go so far in thinking about programming as just being inside of individual minds (HTM or RH). Much of the interesting stuff comes when we realize that (a) our cognition interacts with the environments and situations around us, and (b) our motivation, affect, and cognition are influenced by our social world. Setting aside whether it’s social science or computer science, I am still driven by a paper I read in 1982, which was five years after it was written: “Personal Dynamic Media” by Alan Kay and Adele Goldberg (see copy here). I want people to be to use coding like they use other literacies, to create a literature, and in a casual, informal and still insightful way. Mitchel Resnick often talks about people using Scratch to write a card to their mother or grandmother — that’s the kind of thing I want to see. I want people to be able to make small computational models that answer questions, in the same way that people do “back of the envelope” calculations today. I also want great literature — we need Shakespeares and daVinci’s who convey great thoughts with computing (an argument that Andrea diSessa made recently at the PPIG conference which Felienne Hermans blogged about here.) That’s the vision that drives me, whether I’m using cognitive science or situated learning. "
"189","2017-06-05","2023-03-24","https://computinged.wordpress.com/2017/06/05/belief-in-the-geek-gene-may-be-driven-by-economics-and-educational-inefficiency/","I visited China in the first part of May. I was at Peking University (PKU) in Beijing for a couple days, and then the ACM Celebration of the Turing Award in China (TURC) in Shanghai. I mentioned the trip in this earlier blog post. I wrote a blog post for CACM on a great panel at TURC. The panelists discussed the future of AI, and I asked about the implications for computing education. Are we moving to a future where we can’t explain to students the computing in their daily lives? A highlight of my trip was spending a day with students and teachers at PKU. I taught a seminar with 30+ advanced undergraduates with Media Computation (essentially doing my TEDxGeorgiaTech talk live). It was great fun. I was surprised to learn that several of them had learned programming first in high school in Pascal. Pascal lives as a pedagogical programming language in China! Perhaps the most striking part of my seminar with the undergraduates was how well the livecoding examples worked (e.g., I wrote and manipulated code as part of the talk). All the PKU students knew Java, most knew C++, some knew Python — though I knew none of that when I was planning my talk. I wanted to use a tool that would cross programming language boundaries and be immediately understandable if you knew any programming languages. I used a blocks-based language. I did my livecoding demonstration entirely in GP. I tested their knowledge, too, asking for predictions (as I do regularly, having read Eric Mazur’s work on predictions before demos) and explanations for those predictions. They understood the code and what was going on. The funky sound and image effects cross language barriers. Students laughed and oohed at the results. Isn’t that remarkable that it worked, that I could give a livecoding demonstration in China and get evidence that the students understood it? The most interesting session at PKU was talking with faculty interested in education about their classes and issues. I’ve always wondered what it’s like for students to learn programming when English is not their native language, and particularly, when the characters are very different. I asked, “Is it harder for your students to learn programming when the characters and words are all English?” The first faculty to speak up insisted that it really wasn’t an issue. “Our students start learning English at age 6!” said one. But then some of the other faculty spoke up, saying that it really was a problem, especially for younger students. In some middle schools, they are using Squeak with Chinese characters. They told me that there was at least one programming language designed to use Chinese characters, but the other faculty scoffed. “Yi is not a real programming language.” There was clearly some disagreement, and I didn’t follow all the nuances of the argument. Then the Geek Gene came up in the conversation. One of the most senior faculty in the room talked about her challenges in teaching computer science. “Some students are just not suited to learning CS,” she told me. I countered with the evidence of researchers like Elizabeth Patitsas that there is no “Geek Gene.” I said, “We have no evidence that there are students who can’t learn programming.” She had an effective counter-argument. “We do not have all the time in the world. We cannot learn everything in our lifetime. How much of a lifetime should a student spend learning programming? There are some students who cannot learn programming in the time available. It’s not worth it for them.” I had not thought of the Geek Gene as being an economic issue. Her argument for the Geek Gene is not necessarily that students cannot learn programming. They may not be able to learn programming in the time available and using the methods we have available. This is not Geek Gene as only some students can learn to program. This is Geek Gene as economic limitation — we can’t teach everyone in the resources available. I have an answer to that one. Want to reach more students? Either expand the time it will take to teach them, or use more effective methods! This is the same response that I had offered to my colleague, as I described in an earlier blog post. That insight gave me a whole new reason for doing our work in efficient CS education, like the greater efficiency in using subgoal-based instruction. The work of Paul Kirschner and Mike Lee & Amy Ko also emphasizes more CS learning in less time. If we can teach the same amount of CS in less time, then we can expand the number of students who can learn enough CS with a given amount of resource (typically, time). If we can’t convince teachers that there is no Geek Gene, maybe we can give them more effective and efficient teaching methods so that they see fewer students who don’t seem have the Geek Gene, i.e., who can learn enough CS in a single semester. Below, evidence I was really at TURC "
"190","2017-04-24","2023-03-24","https://computinged.wordpress.com/2017/04/24/acm-turc-2017-come-see-amber-dan-and-me-in-china/","The ACM Turing China conference will have a SIGCSE track this May. Come see SIGCSE Chair Amber Settle, world-famous CS educator Dan Garcia (recently in NYTimes) from Berkeley, and me in Shanghai in May. The ACM TURC 2017 (SIGCSE China) conference is a new leading international forum at the intersection of computer science and the learning sciences, seeking to improve practice and theories of CS education. ACM TURC 2017 will be held in Shanghai, China, 12-14 May, 2017. We invite the submission of original rigorous research on methodologies, studies, analyses, tools, or technologies for computing education. Source: ACM TURC 2017 (SIGCSE China)"
"191","2017-04-05","2023-03-24","https://computinged.wordpress.com/2017/04/05/the-limitations-of-computational-thinking-nytimes/","The New York Times ran a pair of articles on computing education yesterday, one on Computational Thinking (linked above and quoted below) and one on the new AP CS Principles exam. Shriram and I are quoted as offering a more curmudgeonly view on computational thinking. (Yes, I fixed the name of my institution in the below quote, from what how it is phrased in the actual article.) Despite his chosen field, Dr. Krishnamurthi worries about the current cultural tendency to view computer science knowledge as supreme, better than that gained in other fields. Right now, he said, “we are just overly intoxicated with computer science.” It is certainly worth wondering if some applications of computational thinking are trivial, unnecessary or a Stepford Wife-like abdication of devilishly random judgment. Alexander Torres, a senior majoring in English at Stanford, has noted how the campus’s proximity to Google has lured all but the rare student to computer science courses. He’s a holdout. But “I don’t see myself as having skills missing,” he said. In earning his degree he has practiced critical thinking, problem solving, analysis and making logical arguments. “When you are analyzing a Dickinson or Whitman or Melville, you have to unpack that language and synthesize it back.” There is no reliable research showing that computing makes one more creative or more able to problem-solve. It won’t make you better at something unless that something is explicitly taught, said Mark Guzdial, a professor in the School of Interactive Computing at Georgia Tech who studies computing in education. “You can’t prove a negative,” he said, but in decades of research no one has found that skills automatically transfer."
"192","2013-10-04","2023-03-24","https://computinged.wordpress.com/2013/10/04/live-coding-as-an-exploration-of-our-relationship-with-technology/","Above: A piano duet between Andrew Brown (on a physical piano) and Andrew Sorensen (live coding Extempore, generating piano tones) A fascinating take on live code from artist Holly Herndon: Why is generating music with technology a different relationship for humans than with traditional instruments? Isn’t our relationship with our computing technology (consider people with their smart phones) even more intimate? “I’m trying to […] get at the crux of the intimacy we have with our technology, because so many people really cast it in this light of the laptop being cold. I really think it’s a fallacy the way people cast technology in this light and then cast acoustic or even analogue instruments in this warm, human light, because I don’t understand what would be more human between a block of wood and something that was also created by humans, for humans. […] People see code as this crazy, otherworldly thing, but it’s just people writing text. It’s a very idiosyncratic, human language.” via Holly Herndon interview on Dummy | TOPLAP. Like Holly, the field of educational technology sees no distinction between technology made of silicon and those made of other materials. The educational technology that had the fastest adoption in the United States was the blackboard — that was a technology, and it made a significant impact on education. Adopters talked about how blackboards democratized education, because all students in the class could see the same content at once. Computing is yet another technology that could have a positive impact on education. The traditional musical instruments are technologies built by humans for other humans, and so are the live coding systems. Live coding systems are earlier in the evolution than traditional instruments, but the goals are the same. My colleague Jason Freeman has an interesting take that merges technology with traditional instruments, in an even more collaborative setting. His live coders generate traditional music notation from which musicians with traditional instruments then play.  Jason’s take is that a human musician will always generate a more expressive performance than will a machine. His take on live coding combines the programmers listening to one another and improvising, and musicians interpreting and expressing the live coders intentions. There we have a rich exploration of our relationship with technology, both computing and analogue."
"193","2016-03-29","2023-03-24","https://computinged.wordpress.com/2016/03/29/optimizing-learning-with-subgoal-labeling-lauren-margulieux-defends-her-dissertation/","Lauren Margulieux successfully defended her dissertation Using Subgoal Learning and Self-Explanation to Improve Programming Education in March. Lauren’s been exploring subgoal labeling for improving programming education in a series of fascinating and influential papers. Subgoal labels are inserted into the steps of a worked example to explain the purpose for a set of steps. In her dissertation work, Lauren returned to the challenges of the ICER 2015 paper: Can we make subgoal labeling even more successful? She went back to using App Inventor, to reduce the cognitive load from teaching a textual language. She compared three different ways of using subgoal labeling. Lauren was building on a theory that predicted that the constructive condition would have the best learning, but would also be the hardest. She provided two scaffolds. Here’s the big “interesting/surprising” graph from her dissertation.  As predicted, constructive was better than active or passive. What’s interesting is that the very best performance was guided constructive without hints but with feedback AND with hints but without feedback. Now that’s weird. Why would having more support (both hints and feedback) lead to worse performance? There are several possible hypotheses for these results, and Lauren pursued one of these one step further. Maybe students developed their own cognitive model when they constructed their own labels with hints, and seeing the feedback (experimenter’s labels) created some kind of dissonance or conflict. Without hints, maybe the feedback helped them make sense of the worked example. Lauren ran one more experiment where she contrasted getting scaffolding with the experimenter’s labels versus getting scaffolding with the student’s labels (put in all the right places in the worked example). Students who were scaffolded with their own labels performed better on later problem solving than those who were scaffolded with experimenter labels. Students scaffolded with experimenter labels did not perform better than those who did not receive any scaffolding at all. Her results support this hypothesis — the experimenter’s labels can get in the way of the understanding that the students are building.  There are several implications from Lauren’s dissertation. One is that we can do even better than just giving students labels — getting them to write them themselves is even better for learning. Feedback isn’t the most critical part of the learning when subgoal labeling, which is surprising and fascinating. Constructive subgoal labeling lends itself to an online implementation, which is the direction Lauren that is explicitly exploring. How do we build effective programming education online? Lauren has accepted an Assistant Professor position in the Learning Technologies Division at Georgia State University. I’m so glad for her, and even happier that she’s nearby so that we can continue collaborating!"
"194","2014-02-12","2023-03-24","https://computinged.wordpress.com/2014/02/12/learnersourcing-subgoal-labeling-to-support-learning-from-how-to-videos/","What a cool idea! Rob Miller is building on the subgoal labeling work that we (read: “Lauren”) did, and is using crowd-sourcing techniques to generate the labels. Subgoal labeling [1] is a technique known to support learning new knowledge by clustering a group of steps into a higher-level conceptual unit. It has been shown to improve learning by helping learners to form the right mental model. While many learners view video tutorials nowadays, subgoal labels are often not available unless manually provided at production time. This work addresses the challenge of collecting and presenting subgoal labels to a large number of video tutorials. We introduce a mixed-initiative approach to collect subgoal labels in a scalable and efficient manner. The key component of this method is learnersourcing, which channels learners’ activities using the video interface into useful input to the system. The presented method will contribute to the broader availability of subgoal labels in how-to videos. via Learnersourcing subgoal labeling to support learning from how-to videos."
"195","2018-06-22","2023-03-24","https://computinged.wordpress.com/2018/06/22/it-matters-a-lot-who-teaches-introductory-courses-if-we-want-student-to-continue/","Thanks to Gary Stager who sent this link to me. The results mesh with Pat Alexander’s Model of Domain Learning. A true novice to a field is not going to pursue studies because of interest in the field — a novice doesn’t know the field. The novice is going to pursue studies because of social pressures, e.g., it’s a requirement for a degree or a job, it’s expected by family or community, or the teacher is motivating. As the novice becomes an intermediate, interest in the domain can drive further study. These studies suggest that persistence is more likely to happen if the teacher is a committed, full-time teacher. The first professor whom students encounter in a discipline, evidence suggests, plays a big role in whether they continue in it. On many campuses, teaching introductory courses typically falls to less-experienced instructors. Sometimes the task is assigned to instructors whose very connection to the college is tenuous. A growing body of evidence suggests that this tension could have negative consequences for students. Two papers presented at the American Educational Research Association’s annual meeting in New York on Sunday support this idea. The first finds that community-college students who take a remedial or introductory course with an adjunct instructor are less likely to take the next course in the sequence. The second finds negative associations between the proportion of a four-year college’s faculty members who are part-time or off the tenure track and outcomes for STEM majors. Source: It Matters a Lot Who Teaches Introductory Courses. Here’s Why."
"196","2020-04-13","2023-03-24","https://computinged.wordpress.com/2020/04/13/checking-our-hubris-with-checklists-learning-a-lesson-from-the-xo-laptop/","My Blog@CACM blog post for February was on Morgan Ames’ book The Charisma Machine (see post here). The book is well-written, and I do recommend it. In the post, I say that the OLPC opposition to HCI design practices is one of the themes in her book that I found most interesting: It takes humility to design software that humans will use successfully. The human-computer interaction (HCI) community has developed a rich set of methods for figuring out what users need and might use, and for evaluating the potential of a new interface. To use these methods requires us to recognize our limitations — that we are unlikely to get the design right the first time and that our users know things that we don’t. How do we get developers to have that humility? There are a lot of rewards for hubris. Making big promises that you probably can’t keep is one way to get grant and VC funding. I just finished Atul Gawande’s The Checklist Manifesto (which I already blogged about here, before I even read it). It’s a short book which I highly recommend. I hadn’t realized before how much Gawande’s story overlaps with the OLPC story — or rather, how much it doesn’t but should have. Gawande is a surgeon. His entry into the idea of checklists is because of the success of checklists in reducing costs and improving patient success rates in medicine. There, too, they had to deal with physician hubris. They saw the checklists as busywork. As one physician said in opposition to checklists, “Forget the paperwork. Take care of the patient.” The OLPC project couldn’t be bothered with user studies or pilot studies. They wanted to airdrop tablets into Ethiopia. They were so confident that they were going to (in Negroponte’s words) “eliminate poverty, create peace, and work on the environment.” They couldn’t be bothered with the details. They were taking care of the patient! Gawande points out that checklists aren’t needed because physicians are dumb, but because they know SO much. We’re humans and not Econs. Our attention gets drawn this way or that. We forget about or skip a detail. Our knowledge and systems are so complex. Checklists help us to manage all the details. We need checklists to check our hubris. We have confidence that we can build technology that changes users lives. The reality is that the odds are slim that we can have impact without going through an HCI design process, e.g., know the user, test often, and iterate. The OLPC Project could have used an HCI checklist. The second to last chapter in Gawande’s Checklist Manifesto captures the idea well that we need checklists: We are all plagued by failures—by missed subtleties, overlooked knowledge, and outright errors. For the most part, we have imagined that little can be done beyond working harder and harder to catch the problems and clean up after them. We are not in the habit of thinking the way the army pilots did as they looked upon their shiny new Model 299 bomber—a machine so complex no one was sure human beings could fly it. They too could have decided just to “try harder” or to dismiss a crash as the failings of a “weak” pilot. Instead they chose to accept their fallibilities. They recognized the simplicity and power of using a checklist. And so can we. Indeed, against the complexity of the world, we must. There is no other choice. When we look closely, we recognize the same balls being dropped over and over, even by those of great ability and determination. We know the patterns. We see the costs. It’s time to try something else. Try a checklist."
"197","2018-01-03","2023-03-24","https://computinged.wordpress.com/2018/01/03/do-we-really-want-computerized-personalized-tutoring-systems-answer-yes/","An excerpt from Mitchel Resnick’s new book Lifelong Kindergarten: Cultivating Creativity through Projects, Passion, Peers, and Play is published below in the Hechinger Report. Mitchel argues against computerized personal tutoring systems, because they are only good for “highly structured and well-defined knowledge.” Because we don’t know how to build these tutoring systems to teach important topics like creativity and ethics. Agreed, but we are not currently reaching all students with the “highly structured and well-defined knowledge” that we want them to have. We prefer students to have well-educated teachers, and we want students to learn creativity and ethics, too. But if we can teach topics like mathematics well with personalized tutoring systems, why shouldn’t we use them? Here in Atlanta, students are not learning mathematics well (see blog post referencing an article by Kamau Bobb). We have good results on teaching students algebra with cognitive tutors. Here’s my concern: Wealthy schools can reject computerized personal tutoring systems because they can afford well-trained teachers, which means that there is less of a demand for computerized personal tutoring systems. Lower demand means higher costs, which means that less-wealthy schools can’t afford them. If we encourage more computerized personal tutoring systems where they are appropriate, more of them get created, they get better, and they get cheaper. But I’m skeptical about personalized tutoring systems. One problem is that these systems tend to work only in subject areas with highly structured and well-defined knowledge. In these fields, computers can assess student understanding through multiple-choice questions and other straightforward assessments. But computers can’t assess the creativity of a design, the beauty of a poem, or the ethics of an argument. If schools rely more on personalized tutoring systems, will they end up focusing more on domains of knowledge that are easiest to assess in an automated way? Source: OPINION: Do we really want computerized systems controlling the learning process? – The Hechinger Report"
"198","2016-06-24","2023-03-24","https://computinged.wordpress.com/2016/06/24/dr-kamau-bobb-talks-research-and-challenges-in-stem/","I’ve talked about Kamau Bobb’s work in this blog previously, when he wrote a depressing but deeply-insightful op-ed about the state of mathematics education in Atlanta public schools. He’s recently been interviewed in a three part series in Black Enterprise about his role as an NSF program officer. The below quote is from Part II — I recommend the whole series. The most significant challenge facing STEM education and the workforce is the capacity of the U.S. educational system to produce interested and qualified participants in the STEM enterprise. Here is where the racial and socio-economic challenges facing the nation are most glaring. According to the National Center for Education Statistics National Report Card, there are some damning realities that significantly challenge STEM education and the STEM workforce. In 2015, only 33% of all eighth grade students in the U.S. were proficient or better in mathematics. Only 13% of black eighth graders and 19% of Hispanic eighth graders were proficient or better in mathematics, which is in contrast to 43% of white students and 61% of Asian students. For students who live in poverty and qualify for the National School Lunch Program, only 18% were proficient in eighth grade mathematics. According to the College Board, only 16% of black students are college or career ready by the time they take the SAT in eleventh grade. For Hispanic students, 23% are ready. For Asian and white students, 61% and 53%, respectively, are ready for higher education or to take on meaningful work. This landscape is a problem. Source: Dr. Kamau Bobb Talks Research and Challenges in STEM"
"199","2013-09-25","2023-03-24","https://computinged.wordpress.com/2013/09/25/where-are-the-black-students-in-stem-in-georgia/","Perhaps the saddest table I’ve ever read in my local paper. “Mathematics II” is Sophomore year (10th grade, 15 years old) in high school mathematics. APS is Atlantic Public Schools. I live in Dekalb county. No wonder we can’t get more Black students into AP CS, if we can’t get past Sophomore year mathematics.  71 percent of the 2,500 black students in APS who took the Mathematics II exam in 2011, failed and only 1 percent, 25 students, passed with distinction (Pass Plus). By contrast, only 21 percent of white students failed with 79 percent passing and 23 percent of those passing with distinction. via A Georgia Tech researcher asks: Where are the black students… | Get Schooled | www.ajc.com."
"200","2020-04-20","2023-03-24","https://computinged.wordpress.com/2020/04/20/active-learning-has-differential-benefits-for-underserved-students/","We have had evidence that active learning teaching methods have more benefit for underserved populations than for majority groups (for example, I discussed the differential impact of active learning here). Just published in March in the Proceedings of the National Academy of Science is a meta-analysis of over 40 studies giving us the strongest argument yet: “Active learning narrows achievement gaps for underrepresented students in undergraduate science, technology, engineering, and math” at https://www.pnas.org/content/117/12/6476. I’ll remind everyone that a terrific resource for peer instruction in computer science is here: http://peerinstruction4cs.com/ Achievement gaps increase income inequality and decrease workplace diversity by contributing to the attrition of underrepresented students from science, technology, engineering, and mathematics (STEM) majors. We collected data on exam scores and failure rates in a wide array of STEM courses that had been taught by the same instructor via both traditional lecturing and active learning, and analyzed how the change in teaching approach impacted underrepresented minority and low-income students. On average, active learning reduced achievement gaps in exam scores and passing rates. Active learning benefits all students but offers disproportionate benefits for individuals from underrepresented groups. Widespread implementation of high-quality active learning can help reduce or eliminate achievement gaps in STEM courses and promote equity in higher education."
"201","2020-12-07","2023-03-24","https://computinged.wordpress.com/2020/12/07/dijkstras-truths-about-computing-education-are-mostly-wrong/","ACM Turing Award laureate Edsger Dijkstra had several popular pieces about computer science education. I did my Blog@CACM post on one of these (see post here), “On the cruelty of really teaching computer science,” which may be the most-cited computing education paper ever. Modern learning sciences and computing education research have shown him to be mostly wrong. Dijkstra encouraged us to avoid metaphor in learning the “radical novelty” of computing, which we now know is likely impossible. Instead, the study of metaphor in computing education gives us new insights into how we learn and teach about programming. So far, I’m not aware of any evidence of anyone teaching or learning CS without metaphor. After my Blog@CACM post, I learned on Twitter about Briana Bettin’s dissertation about metaphors in CS (see link here). Briana considers the potential damage from Dijkstra’s essay on computing education. How many CS teachers think that analogy and metaphors are bad, citing Dijkstra, when the reality is that they are critical? The second most popular of his computing education essays is “How do we tell truths that might hurt?” (See link here). This essay is known for zingers like: It is practically impossible to teach good programming to students that have had a prior exposure to BASIC: as potential programmers they are mentally mutilated beyond hope of regeneration. He goes on to critique those who use social science methods and anthropomorphic terms when describing computing. He’s wrong about those, too (as I described in the Blog@CACM post), but I’ll just take up the Basic comment here. Today, we can consider Dijkstra’s comments in light of research on brain plasticity (see example article here). It wasn’t until 2002 that we had evidence of how even adult brains can grow and reorganize their neural networks. We can always learn and regenerate, even as adults. Changing minds is always hard. The way to achieve change is through motivating change — being able to show that change is in the person’s best interest (see example here). Maybe people stick with Basic (or for me, with HyperTalk and Smalltalk) because the options aren’t obviously better enough to overcome inertia. The onus isn’t on the adult learner to change. It’s on the teacher to motivate change. There are computer scientists, like Dijkstra, who believe that innate differences separate those who can program from those who can not, a difference that is sometimes called the “Geek Gene.” An interview with Donald Knuth (another Turing Award laureate) last year quoted him saying that only one person in 50 will “groove with programming” (see interview here). We have a lot of evidence that there is no Geek Gene (see this blog post here), i.e., we have note yet identified innate differences that prevent someone from learning to program. Good teaching overcomes many innate differences (see blog post here making this argument). Of course, there are innate differences between people, but that fact doesn’t have to limit who can program. Computers are the most flexible medium that humans have ever created. To argue that only a small percentage of people can “groove with programming” or that learning a specific programming language “mentally mutilates” is to define programming in a very narrow way. There are lots of activities that are programming. Remember that most Scratch programs have only Forever loops (if any loops at all), and Bootstrap:Algebra doesn’t have students write structures to control repetition. Students are still programming in Scratch and Bootstrap:Algebra. Maybe only one in 50 will be able to read and understand all of Knuth’s The Art of Computer Programming (I’m not one of those), and maybe people who programmed in Basic are unlikely to delve into Dijkstra’s ideas about concurrent and distributed programming (that’s me again). Let’s accept a wide range of abilities and interests (and endpoints) without denigrating those who will learn and work differently."
"202","2018-06-11","2023-03-24","https://computinged.wordpress.com/2018/06/11/reflections-of-a-cs-professor-and-an-end-user-programmer/","In my last blog post, I talked about the Parsons problems generator that I used to put scrambled code problems on my quiz, study guide, and final exam. I’ve been reflecting on the experience and what it suggests to me about end-user programming. I’m a computing professor, and while I enjoy programming, I mostly code to build exercises and examples for my students. I almost never code research prototypes anymore. I only occasionally code scripts that help me with something, like cleaning data, analyzing data, or in this case, generating problems for my students. In this case, I’m a casual end-user programmer — I’m a non-professional programmer who is making code to help him with some aspect of his job. This is in contrast: Why did I spend the time writing a script to generate the problems in LaTeX? I was teaching a large class, over 200 students. Mistakes on quizzes and exams at that scale are expensive in terms of emails, complaints, and regrading. Scrambled code problems are tricky. It’s easy to randomly scramble code. It’s harder to keep track of the right ordering. I needed to be able to do this many times. Was it worthwhile? I think it was. I had a couple Parsons problems on the quiz, maybe five on the study guide, and maybe three on the final exam. (Different numbers at different stages of development.) Each one got generated at least twice as I refined, improved, or fixed the problem. (One discovery: Don’t include comments. They can legally go anywhere, so it only makes grading harder.) The original code only took me about an hour to get working. The script got refined many times as I used it, but the initial investment was well worth it for making sure that the problem was right (e.g., I didn’t miss any lines, and indentation was preserved for Python code) and the solution was correct. Would it be worthwhile for anyone else to write this script facing the same problems? That’s a lot harder question. I realized that I brought a lot of knowledge to bear on this problem. Then I realized that it takes almost as much knowledge to use this generator. The few people who might want to use the Parsons problem generator that I posted would have to know about Parsons problems, want to use them, be using LaTeX for exams, and know how to use the output of the generator. But I bet that all (or the majority?) of end-user programming experiences are like this. End-users are professionals in some domain. They know a lot of stuff. They’ll bring a lot of knowledge to their programming activity. The programs will require a lot of knowledge to write, to understand, and to use. One of the potential implications is that this program (and maybe most end-user programs?) are probably not useful to many others. Much of what we teach in CS1 for CS majors, or maybe even in Software Carpentry, is not useful to the occasional, casual end-user programmer. Most of what we teach is for larger-scale programming. Do we need to teach end-user programmers about software engineering practices that make code more readable by others? Do we need to teach end-user programmers about tools for working in teams on software if they are not going to be working in teams to develop their small bits of code? Those are honest questions. Shriram Krishnamurthi would remind me that end-user programmers, even more than any other class of programmers, are more likely to make errors and less likely to be able to debug them, so teaching end-user programmers practices and tools to catch and fix errors is particularly important for them. That’s a strong argument. But I also know that, as an end-user programmer myself, I’m not willing to spend a lot of time that doesn’t directly contribute towards my end goal. Balancing the real needs of end-user programmers with their occasional, casual use of programming is an interesting challenge. The bigger question that I’m wondering about is whether someone else, facing a similar problem, could learn to code with a small enough time investment to make it worthwhile. I did a lot of programming in HyperTalk when I was a graduate student. I have that investment to build on. How much of an investment would someone else have to make to be able to write this kind of script as easily? Why LiveCode? Why not Python? Or Smalltalk? I was originally going to write this in Python. Why not? I was teaching Python, and the problems would all be in Python. It’d good exercise for me. I realized that I didn’t want to deal with files or a command line. I wanted a graphical user interface. I wanted to paste some code in (not put it in a file), and get some text that I could copy (not find it in one or more files). I didn’t want to have to remember what function(s) to call. I wanted a big button. I simply don’t have the time to deal with the cognitive load of file names and function names. Copy-paste the sorted code, press the button, then copy-paste the scrambled code and copy-paste the solution. I could do that. Maybe I could build a GUI in Python, but every time I have used a GUI tool in Python, it was way more work than LiveCode. I also know Smalltalk better than most. Here’s a bit of an embarrassing confession: I’ve never really learned to build GUIs in Smalltalk. I’ve built a couple of toy examples in Morphic for class. But a real user interface with text areas that really work? That’s still hard for me. I didn’t want to deal with learning something new. LiveCode is just so easy — select the tool, drag the UI object into place. LiveCode was the obvious answer for me, but that’s because of who I am and the background that I already have. What could we teach future professionals/end-user programmers that (a) they would find worthwhile learning (not too hard, not too time-consuming) and (b) they could use casually when they needed it, like my Parsons problem generator? That is an interesting computing education research question. How does a student determine “worthwhile” when deciding what programming to learn for future end-user programming? Let’s say that we decided to teach all STEM graduate students some programming so that they could use it in their future professional practice as end-user programmers. What would you teach them? How would they judge something “worthwhile” to learn for later? We know some answers to this question. We know that students judge the authenticity of the language based on what they see themselves doing in the future and what the current practice is in that field (see Betsy DiSalvo’s findings on Glitch and our results on Media Computation). But what if that’s not a good programming language? What if there’s a better one? What if the common practice in a field is ill-informed? I’m going to be that most people, faced with the general problem I was facing (wanting a GUI to do a text-processing task) would use JavaScript. LiveCode is way better than JavaScript for an occasional, casual GUI task — easier to learn, more stable, more coherent implementation, and better programming support for casual users. Yet, I predict most people would choose JavaScript because of the Principle of Social Proof. I’ve been reading Robert Cialdini’s books on social psychology and influence, and he explains that social proof is how people make decisions when they’re uncertain (like how to choose a programming language when they don’t know much about programming) and there are others to copy. First, we seem to assume that if a lot of people are doing the same thing, they must know something we don’t. Especially when we are uncertain, we are willing to place an enormous amount of trust in the collective knowledge of the crowd. Second, quite frequently the crowd is mistaken because they are not acting on the basis of any superior information but are reacting, themselves, to the principle of social proof. Cialdini PhD, Robert B.. Influence (Collins Business Essentials) (Kindle Locations 2570-2573). HarperCollins. Kindle Edition. How many people know both JavaScript and LiveCode well? And don’t consider computer scientists. You can’t convince someone by telling them that computer scientists say “X is better than Y.” People follow social proof from people whom they judge to be similar to them. It’s got to be someone in their field, someone who works like them. It would be hard to teach the graduate students something other than what’s in common practice in their fields, even if it’s more inefficient to learn and harder to use than another choice."
"203","2016-01-20","2023-03-24","https://computinged.wordpress.com/2016/01/20/end-user-programmers-are-at-least-half-of-all-programmers/","I was intrigued to see this post during CS Ed Week from ChangeTheEquation.org. They’re revisiting the Scaffidi, Shaw, and Myers question from 2005 (mentioned in this blog post). You may be surprised to learn that nearly DOUBLE the number of workers use computing than originally thought. Our new research infographic shows that 7.7 million people use complex computing in their jobs — that’s 3.9 million more than the U.S. Bureau of Labor and Statistics (BLS) reports. We examined a major international dataset that looks past job titles to see what skills people actually use on the job. It turns out that the need for complex computer skills extends far beyond what the BLS currently classifies as computer occupations. Even more reason why computer science education is more critical than ever! Source: The Hidden Half | Change the Equation ChangeTheEquation.org is coming up with a much lower estimate of end-user programmers than did Scaffidi et al. Why is that? I looked at their methodology: To estimate the total number of U.S. citizens who use computers in complex ways on the job, CTEq and AIR examined responses to question G_Q06 in the PIAAC survey: What level of computer use is/was needed to perform your job/last job? Source: the Hidden Half: Methodology | Change the Equation Their “Complex” use is certainly programming, but Scaffidi et al would also call building spreadsheet macros and SQL queries programming. ChangeTheEquation has a different definition that I think undercounts significantly. "
"204","2020-05-25","2023-03-24","https://computinged.wordpress.com/2020/05/25/measuring-progress-on-cs-learning-trajectories-at-the-earliest-stages/","I’ve written in this blog (and talked about many times) how I admire and build upon the work of Katie Rich, Diana Franklin, and colleagues in the Learning Trajectories for Everyday Computing project at the University of Chicago (see blog posts here and here). They define the sequence of concepts and goals that K-8 students need to be able to write programs consisting of sequential statements, to write programs that contain iteration, and to debug programs. While they ground their work in K-8 literature and empirical work, I believe that their trajectories apply to all students learning to program. Here are some of the skills that appear in the early stages of their trajectories: These feel fundamental and necessary — that you have to learn all of these to progress in programming. But it’s pretty clear that that’s not true. As I describe in my SIGCSE keynote talk (the relevant 4 minute segment is here), there is lots of valuable programming that doesn’t require all of these. For example, most students programming in Scratch don’t use conditions to end loops — still, millions of students find expressive power in Scratch. The Bootstrap: Algebra curriculum doesn’t have students write their own iteration at all — but they learn algebra, which means that there is learning power in even a subset of this list. What I find most fascinating about this list is the evidence that CS students older than K-8 do not have all these concepts. One of my favorite papers at Koli Calling last year was It’s like computers speak a different language: Beginning Students’ Conceptions of Computer Science (see ACM DL link here — free downloads through June 30). They interviewed 14 University students about what they thought Computer Science was about. One of the explanations they labeled the “Interpreter.” Here’s an example quote exemplifying this perspective: It’s like computers speak a different language. That’s how I always imagined it. Because I never understood exactly what was happening. I only saw what was happening. It’s like, for example, two people talking and suddenly one of them makes a somersault and the other doesn’t know why. And then I just learn the language to understand why he did the somersault. And so it was with the computers. This student finds the behavior of computers difficult to understand. They just do somersaults, and computer science is about coming to understand why they do somersaults? This doesn’t convey to me the belief that outcomes are completely and deterministically specified by the program. I’ll write in June about Katie Cunningham’s paper to appear next month at the International Conference of the Learning Sciences. The short form is that she asked Data Science students at University to trace through a program. Two students refused, saying that they never traced code. They did not believe that “Step-by-step execution of instructions can help find and fix errors.” And yet, they were successful data science students. You may not agree that these two examples (the Koli paper and Katie’s work) demonstrate that some University students do not have all the early concepts listed above, but that possibility brings us to the question that I’m really interested in: How would we know? How can we assess whether students have these early concepts in the trajectories for learning programming? Just writing programs isn’t enough. These concepts really get at fundamental issues of transfer and plugged vs unplugged computing education. I bet that if students learn these concepts, they would transfer. They address what Roy Pea called “language-independent bugs” in programming. If a student understands these ideas about the nature of programs and programming, they will likely recognize that those are true in any programming language. That’s a testable hypothesis. Is it even possible to learn these concepts in unplugged forms? Will students believe you about the nature of programs and programming if they never program? I find questions like these much more interesting than trying to assess computational thinking. We can’t agree on what computational thinking is. We can’t agree on the value of computational thinking. Programming is an important skill, and these are the concepts that lead to success in programming. Let’s figure out how to assess these. "
"205","2021-04-19","2023-03-24","https://computinged.wordpress.com/2021/04/19/from-guided-exploration-to-possible-adoption-patterns-of-pre-service-social-studies-teacher-engagement-with-programming-and-non-programming-based-learning-technology-tools/","In October, Bahare Naimipour presented our paper ”From Guided Exploration to Possible Adoption: Patterns of Pre-Service Social Studies Teacher Engagement with Programming and Non-Programming Based Learning Technology Tools” (Naimipour, Guzdial, Shreiner, and Spencer, 2021) at the Society for Information Technology and Teacher Education (SITE) 2021 conference. (Draft of the paper is available here. Full paywall version available here.) This paper is the first one about our work with social studies teachers since we received NSF funding. It was also a report on our last face-to-face participatory design session (in March 2020) before the pandemic lockdown. And most importantly, it was our first session with our data visualization tool DV4L in the mix. I have blogged about our participatory design sessions before (see Bahare’s FIE paper from last Fall). Basically, we set up a group of social studies teachers in pairs, then ask them to try out various visualization tools with activity sheets that we have created to scaffold their process. The goal is to get everyone to make a visualization successfully in less than 10 minutes, and leave time to explore or try one (or both) other tools. There is time for the pairs to persuade each other to (a) come try the cool tool they found or (b) avoid this tool because it’s too hard or not useful. The tools in this set were Vega-Lite (a declarative programming tool which our teachers have found complex but useful in the past), CODAP (a drag-and-drop visualization tool designed for middle and high school students), and our DV4L (a purpose-built visualization tool that makes code visible but not required). The teachers saw value in having students build visualization themselves (e.g., “I think making your own data visualization allows for a deeper connection and understanding of the data.”) As we hoped, they teased out what they liked and disliked about the tools. Most of the teachers preferred DV4L over the other two tools, because of its simplicity. Critically, they felt that they were engaging with the inquiry and not the tool: “(With DV4L) I found myself asking questions connected to the data itself, rather than asking questions in order to figure out how to work the visual.” That teachers found DV4L easier than Vega-Lite isn’t really surprising. We were pleased that teachers weren’t disappointed with DV4L’s more limited visualization capabilities. What was really surprising was that our teachers preferred DV4L to CODAP, and this has happened in successive in-service teacher participatory design sessions during the pandemic. CODAP is drag-and-drop, creates high-quality visualizations, and was designed explicitly for middle and high school students. A teacher in one of our in-service design sessions explained to me why she preferred DV4L to CODAP. “CODAP is really powerful, but it would take me at least three hours to get my students comfortable with it. Is it worth it?” Just how much visualization is any social studies teacher going to use? Again, too much focus on the tool gets in the way of the social studies inquiry. Now you might be asking, “But Mark, do the students learn history with DV4L? And do they see and learn about computing?” Great questions — we’re not there yet. Here’s one of our big questions, after running several more participatory design sessions with teachers since the lockdown: Why aren’t teachers adopting DV4L in their classrooms? They tell us that they really like it. But nobody’s adopted yet. How do we go from “ooh, great tool!” to “and here’s my lesson plan, and we’ll use it next week”? That’s an active area of research for all of us right now."
"206","2017-07-10","2023-03-24","https://computinged.wordpress.com/2017/07/10/attending-the-2017-computing-at-school-conference/","June 17, Barbara and I attended the Computing at School conference in Birmingham, England (which I wrote about here). The slides from my talk are below. I highly recommend the summary from Duncan Hull which I quote at the bottom. CAS was a terrifically fun event. It was packed full with 300 attendees. I under-estimated the length of my talk (I tend to talk too fast), so instead of a brief Q&A, there was almost half the time for Q&A. Interacting with the audience to answer teachers’ questions was more fun (and hopefully, more useful and entertaining) than me talking for longer. The session was well received based on the Tweets I read. In fact, that’s probably the best way to get a sense for the whole day — on Twitter, hashtag #CASConf17. (I’m going to try to embed some tweets with pictures below.) The power of prediction. Make pupils think about what they see. #casconf17 pic.twitter.com/N0a3LtvzOd — Stuart Davison (@Mr_Comp_Sci) June 17, 2017  #casconf17 Good keynote from Mark Guzdial about learning by teachers. pic.twitter.com/WjfUJFbceO — Aad van der Drift (@avddrift) June 17, 2017  Barbara’s two workshops on Media Computation in Python using our ebooks went over really well. Barbara Ericson's workshop ""Making cool pictures with Python"" #casconf17 pic.twitter.com/pb7g30K8C6 — Yasemin Allsop (@yallsop) June 17, 2017  I can't quite express how fabulous this guide is on teaching CS & Python using media computation #casconf17 @guzdial https://t.co/gtVKPgBIu3 pic.twitter.com/i04hBx6IV8 — Kate Farrell (@digitalkatie) June 17, 2017  #casconf17 Can't wait to classes on this – great for image representation and interesting assessment approach https://t.co/2mPmjHmFCC pic.twitter.com/tlHGWDfLT9 — Nicola Looker (@NALooker) June 17, 2017  I enjoyed my interactions all day long. I was asked about research results in just about every conversation — the CAS teachers are eager to see what computing education research can offer them. I met several computing education research PhD students, which was particularly exciting and fun. England takes computing education research seriously. Miles Berry demonstrated Project Quantum by having participants answer questions from the database. That was an engaging and fascinating interactive presentation. @mberry killing it with the audience participation! #CASconf17 #ProjectQuantum #ItsHotterAtTheBack pic.twitter.com/uFvqnGj5Gu — Danny McKune (@MrMcKune) June 17, 2017  Linda Liukas gave a terrific closing keynote. She views the world from a perspective that reminded me of Mitchel Resnick’s Lifelong Kindergarten and Seymour Papert’s playfulness. I was inspired. Linda Liukas, ""We want kids to understand that the world is not finished, and they can make it."" #CASconf17 pic.twitter.com/jqfMc0A0jp — Mark Guzdial (@guzdial) June 17, 2017  The session that most made me think was from Peter Kemp on the report that he and co-authors have just completed on the state of computing education in England. That one deserves a separate blog post – coming Wednesday. Check out Duncan’s summary of the conference: The Computing At School (CAS) conference is an annual event for educators, mostly primary and secondary school teachers from the public and private sector in the UK. Now in its ninth year, it attracts over 300 delegates from across the UK and beyond to the University of Birmingham, see the brochure for details. One of the purposes of the conference is to give teachers new ideas to use in their classrooms to teach Computer Science and Computational Thinking. I went along for my first time (*blushes*) seeking ideas to use in an after school Code Club (ages 7-10) I’ve been running for a few years and also for approaches that undergraduate students in Computer Science (age 20+) at the University of Manchester could use in their final year Computer Science Education projects that I supervise. So here are nine ideas (in random brain dump order) I’ll be putting to immediate use in clubs, classrooms, labs and lecture theatres: Source: Nine ideas for teaching Computing at School from the 2017 CAS conference | O’Really? My talk slides:"
"207","2017-05-08","2023-03-24","https://computinged.wordpress.com/2017/05/08/come-visit-with-me-at-cas-2017/","I’m excited to be a guest speaker at the Computing At School conference 2017 (linked below)! Come visit with me in Birmingham June 17. Barbara and I are going to be teaching on Georgia Tech’s study abroad program in Barcelona this summer. We’ll be there from May 6 to July 30, with a few trips (like to Birmingham) in there. I’ll be at the Turing-China conference in Shanghai May 10-14. The conference attracts over 300 people each year. Most are teachers in either primary or secondary schools looking to update both their subject knowledge and approaches to teaching computing in their schools. There are talks and workshops for all key phases and for all levels of experience in Computing. Instructions given to ALL speakers and presenters is quite simple: “all attendees must return home with at least one new idea or resource they can use in their classrooms. Whatever your level of confidence with computing as a subject in your classroom this conference is the event for you! Source: Computing At School"
"208","2017-10-20","2023-03-24","https://computinged.wordpress.com/2017/10/20/georgia-tech-receives-cmd-it-university-award-for-retention-of-minorities-and-students-with-disabilities-in-computer-science/","I have not been directly involved in the computer science undergraduate major at Georgia Tech since “Georgia Computes!” started (and ECEP continued). Today, I teach graduate courses in the Human-Centered Computing PhD program and the undergraduate non-CS majors course Introduction to Media Computation, and only rarely teach CS undergraduates. So, I am pleased that this award to the undergraduate program in the College of Computing mentioned things that Barb and I were part of. The College of Computing won the award in part for Threads (I co-chaired the implementation committee), “Georgia Computes!” (which was mostly Barb and me), Project Rise Up 4 CS (which is Barb’s invention which she developed for ECEP), and our three mandatory CS classes, one of which is the Media Computation class I created. I feel like Barbara and I had a role in this. The CMD-IT University Award decision was based on both Georgia Tech’s impressive quantitative reported results, which reflected high retention and graduation rates and qualitative reporting on their various retention program. In particular, Georgia Tech highlighted the following four programs highlighted as directly impacting retention and graduation: Threads Undergraduate Curriculum: Students are given the opportunity to take control over their curriculum by choosing two of eight Threads to create their degree plan which gives them more than 28 different degree plans to follow. This resulted in students feeling they have more control and a better understanding of their degree plan. Georgia Computes and Project Rise Up: The two programs are spearheaded by Georgia Tech to help increase engagement in computing by broadening participation in computer science at all educational levels by underrepresented groups. These programs increase interest in Computer Science. Mandatory Introductions to Computer Science classes: All students enrolled in Bachelor’s degree programs at Georgia Tech must take one of three computer science classes. The three programs enable students to take courses that fit their level of experience in Computer Science. Travel Scholarships to Conference: Georgia Tech provides between 40 and 120 travel scholarships to leading tech conferences with a diversity focus. Students build networks of support and return with a feeling of renewed commitment to their degree program. Source: Georgia Tech Receives CMD-IT University Award for Retention of Minorities and Students With Disabilities in Computer Science | Markets Insider"
"209","2014-07-15","2023-03-24","https://computinged.wordpress.com/2014/07/15/special-issue-of-acm-transactions-on-computing-education-international-k12-cs-with-georgia-computes/","The special issue of ACM Transactions on Computing Education on primary and secondary schools’ computing has just come out (see table of contents). There are articles on the UK’s Computing at School effort, Tim Bell’s effort in New Zealand, and efforts in Israel, Germany, Italy, Russia, and several others. This is a particularly big deal for Barb and me, because in this issue, we publish the capstone journal paper on “Georgia Computes!” and describe what resulted from our six years worth of effort. We present both the positives (e.g., big increase in Hispanic participation in CS, teacher professional development touching 37% of all high schools in the state, great summer camp programs spread across the state) and the negatives (e.g., little impact on African American participation, little uptake by University faculty). Georgia Computes! (GaComputes) was a six-year (2006–2012) project to improve computing education across the state of Georgia in the United States, funded by the National Science Foundation. The goal of GaComputes was to broaden participation in computing and especially to engage more members of underrepresented groups which includes women, African Americans, and Hispanics. GaComputes’ interventions were multi-faceted and broad: summer camps and after-school/weekend programs for 4th–12th grade students, professional development for secondary teachers, and professional development for post-secondary instructors faculty. All of the efforts were carefully evaluated by an external team (led by the third and fourth authors), which provides us with an unusually detailed view into a computing education intervention across a region (about 59K square miles, about 9.9 million residents). Our dataset includes evaluations from over 2,000 students who attended after-school or weekend workshops, over 500 secondary school teachers who attended professional development, 120 post-secondary teachers who attended professional development, and over 2,000 students who attended a summer day (non-residential) camp. GaComputes evaluations provide insight into details of interventions and into influences on student motivation and learning. In this article, we describe the results of these evaluations and describe how GaComputes broadened participation in computing in Georgia through both direct interventions and indirect support of other projects."
"210","2015-08-12","2023-03-24","https://computinged.wordpress.com/2015/08/12/respect-2015-preview-project-rise-up-4-cs/","Our second RESPECT paper is by Barbara Ericson and Tom McKlin. Barb has been developing this cool intervention based on the Texas-based Advanced Placement Incentive Program (APIP) from AP Strategies (see paper about that work) and Betsy DiSalvo’s Glitch (see blog post here). Barb is offering financial incentives to African American students to encourage them to take advantage of additional learning opportunities (e.g., attend webinars and face-to-face workshops), and then pass the AP CS exam. NMSI has also offered grants to states to replicate the Texas APIP project (e.g., blog post at NMSI). Barb has published on Project Rise Up 4 CS at SIGCSE (see my blog post on that paper). This new paper, “Helping African American Students Pass Advanced Placement Computer Science: A Tale of Two States,” describes Barb’s efforts to replicate the project in another state, and Tom’s efforts to measure what happened. The bottomline is that in both states where she tried this, the participants had significant improvements in attitudes towards computing from pre to post. Probably the most important attitude change is that the participants had a significant increase in their perceived ability to pass the exam, and some of the students said that they couldn’t have passed the AP CS exam without Project Rise Up 4 CS. Both states had their highest-ever African American AP CS pass rates, though it would be hard to ever make a causal argument that this is due to Project Rise Up 4 CS. The significant contribution of the paper is the deep understanding of what the project meant to the students, based on interviews. Students talked about their classes and teachers, what worked in Project Rise Up 4 CS, and how the project helped their confidence and knowledge. Barb used undergraduate students to host the webinars and workshops, who served as “near-peer” mentors and role models for the students. Those near-peer mentors were a critical piece in making Project Rise Up work. Barb’s paper is being highlighted as one of four “Exemplary” papers at RESPECT."
"211","2015-06-26","2023-03-24","https://computinged.wordpress.com/2015/06/26/how-to-attract-female-engineers-thats-part-of-it/","I agree with the author of this recent NYTimes post. Women do seem to be more attracted to socially meaningful work than males. I don’t think that’s the complete solution, though. We have evidence that women are more likely to pursue studies in computer science if encouraged (see Joanne Cohoon’s work) and if they feel a sense of “belonging” with the department (see our work in Georgia). If we want more women in engineering, we have to think about recruitment (as this article does) and retention (as other work does). Why are there so few female engineers? Many reasons have been offered: workplace sexism, a lack of female role models, stereotypes regarding women’s innate technical incompetency, the difficulties of combining tech careers with motherhood. Proposed fixes include mentor programs, student support groups and targeted recruitment efforts. Initiatives have begun at universities and corporations, including Intel’s recent $300 million diversity commitment. But maybe one solution is much simpler, and already obvious. An experience here at the University of California, Berkeley, where I teach, suggests that if the content of the work itself is made more societally meaningful, women will enroll in droves. That applies not only to computer engineering but also to more traditional, equally male-dominated fields like mechanical and chemical engineering. via How to Attract Female Engineers – NYTimes.com."
"212","2015-03-03","2023-03-24","https://computinged.wordpress.com/2015/03/03/sigcse-2015-week-ecep-bof-and-ebooks-and-irb-and-other-strange-terms/","This week is the SIGCSE 2015 Technical Symposium, the largest computing education conference in the US, perhaps in the world. About 1300 people will be heading to Kansas City for four days of discussion, workshops, and talks. See the conference page here and the program here. Barbara Ericson and I will be presenting at several events: As usual, Georgia Tech is sending several of us (not just Barb and me). One of my PhD students, Briana Morrison, is on a panel on Flipped Classrooms Thursday 1:45-3 pm in 3501G. Another of my PhD students, Miranda Parker, is part of a BOF Preparing Undergraduates to Make the Most of Attending CS Conferences 6:30-7:20 on Thursday evening. Our colleague, Betsy DiSalvo, is speaking Friday morning 10:45-12 on a panel Research, Resources and Communities: Informal Ed as a Partner in Computer Science Education in 2505A. This is one of my shorter stays at a SIGCSE conference. I’ll be coming in late Wednesday and leaving Friday afternoon. I’ve been traveling way too much lately (NSF BPC Community meeting in January, talk at Penn in early February, Tapia conference in Boston two weeks ago, AP CS Principles review meeting in Chicago this last week). I am fortunate to be teaching Media Computation this semester, and I hate to miss so many lectures. More, it’s hard on our family when we’re both gone. Barb will be at SIGCSE all week, from Tuesday night to Sunday morning, so be sure to stop by and say hello to her."
"213","2013-12-13","2023-03-24","https://computinged.wordpress.com/2013/12/13/lessons-learned-from-ecep-how-do-we-change-a-state-csedweek/","I wrote up a report on our Summit on Computing Education in South Carolina for Blog@CACM (and here’s the link back to my original post on the summit). It went well, in that we got the kind of attendees we wanted and had the kinds of discussions we wanted. I was particularly pleased with the energy up through the final session. Barbara Ericson did a nice job of collecting a bunch of URL’s to resources for new Computer Science teachers, and then created a PowerPoint tour of them. I’ve posted these on a new Resources for New CS Teachers page here on the blog. I learned a lot at the Summit. The issues in South Carolina are different from the ones in Georgia, and they’re different again in Massachusetts and California. That’s what’s making this ECEP Alliance work interesting and complicated. What’s interesting is that we’re starting to see some common themes. I wouldn’t call these experimental results, since you can’t easily do experiments comparing states. Instead, these are some observations from our first four case studies. Having a statewide organization is an enormous advantage: We work in California through Debra Richardson who heads up an organization called ACCESS with an Executive Director focused just on CS Ed in the state, Julie Flapan. ACCESS is about making computing education policy reform happen in California. That’s a huge advantage — a single point of contact to other efforts, a coordinating point for the state. We started work in South Carolina because of IT-oLogy, a public-private partnership for advancing IT. As we started planning for the summit, we realized that we need more connections, so we formed a Steering Committee with representatives from across the state, from the Department of Education, to high schools, from Universities to private industry. That Steering Committee was very helpful in getting the word out about the summit and helping us to understand the issues when assembling the program. Statewide meetings and summits help to make things happen: We launched the higher education part of Georgia Computes in 2007 at a meeting for CS department representatives from across the University System of Georgia. The summit in South Carolina has really got discussion going there (here’s a nice piece in the Columbia The Free Times after the summit). Massachusetts just held a statewide meeting of everyone offering CS professional development across the state. These meetings aren’t a waste of time — they get people focused on the issues, at high-bandwidth, and attract attention to the issues. We’ve already been contacted by people in other states who want to organize similar summits. A full-time statewide organizer is key: We couldn’t have done what we’ve done in Georgia without Barbara Ericson. Having full-time staff has similarly been key in Massachusetts, California, and South Carolina. Maybe you could you get a state to reform its computing education without a full-time person, with volunteers contributing their time. We’ve just seen how valuable it is to have a professional being the point of contact and focusing on making change happen."
"214","2018-09-28","2023-03-24","https://computinged.wordpress.com/2018/09/28/preparing-students-for-a-research-career-gregory-abowds-30-phd-graduates/","Georgia Tech’s School of Interactive Computing did an article on my friend Gregory Abowd and his 30 PhD graduates, many of whom have continued in academia. You can find the article here. The “Abowd family” is a real thing. The article ends talking about how Gregory and his students and their students get together at conferences. I’ve seen pictures of these events. There’s a strong sense of kinship and support in the group, inspired by Gregory. Here at the University of Michigan, we have just hired two second-generation members of the Abowd family. Gabriela Marcu (see webpage here) and Nikola Banovic (see webpage here) both earned their PhD’s at CMU, working with former Gregory students Jen Mankoff and Anind Dey (who have now moved to U. Washington). What’s striking to me about both Gabriela and Nikola is that they started down the path to academic research by doing undergraduate research with other Abowd graduates: Gillian Hayes at Irvine and Khai Troung at Toronto (respectively). What does it take to support future academic researchers while they are still undergraduates? Obviously, we don’t want all of our undergraduates to become researchers. But we need some. Academic researchers in computing perform a useful and important role. We particularly want more women getting into computing research, and kudos to Google for awarding fifteen grants to promote more women getting into computing research (see article here). We do not have enough CS academics today (as I described in this blog post), and that’s part of the struggle in dealing with the enrollment boom. So we want more — how do we get them? What do we do at the undergraduate level to make it more likely that we get graduates like Gabriela and Nikola? We need to expect that CS undergraduates will have careers other than software developers. We often build our undergraduate programs assuming that all of our graduates will become software developers, or will manage software developers. But you can do a lot with a CS degree. We have to build into our programs the features that will help students succeed in the career that they choose, including becoming academic researchers. One of my colleagues in the Engineering Education Research program here, Joi Mondisa, researches mentoring. She just gave the first EER Seminar, and talked about the importance of being “treated/advised like family.” Mentors give their mentees honest and valuable advice as if the mentee were a family member. I suspect that that’s part of Gregory’s success — that the notion of being in the “Abowd family” is something that the members feel and actively participate in. That’s likely a lesson that we can use in the future. Personal mentoring relationships play a big role in encouraging future researchers. I don’t know how to build personal “like family” research relationships into an undergraduate program, especially at the enrollment scales we see today. But it’s an important problem to think about, both because we should support a variety of outcomes for our CS undergraduates and because one way of managing the enrollment crisis is to grow more CS faculty. "
"215","2018-09-03","2023-03-24","https://computinged.wordpress.com/2018/09/03/join-us-at-the-university-of-michigan-to-study-computing-education/","As of September 1, Barbara Ericson and I are new faculty at the University of Michigan. The School of Information has a nice write-up about their new faculty, including Barb here. The Computer Science and Engineering Division (of the Electrical Engineering and Computer Science Department) wrote up their new faculty, including me here. We are both looking to bring on new students in Ann Arbor. Readers of this blog can find out a lot about us. Barb continues to be interested in further developing interactive ebooks as a medium for education and in issues of broadening participation in computing (especially looking to grow Project Rise Up and Sisters Rise Up). I continue to be interested in how students come to understand program execution (building a mental model of the notional machine) and in the role of programs to be a notation for learning (like in Bootstrap). Because of how we’re situated at the University of Michigan, there are several avenues for new PhD students: The EER program is hosting a prospective student open house on Oct 22, and there are travel grants available. See https://eer.engin.umich.edu/ for more information, and I have part of the flyer pasted below. Choosing between the degree options depends on what you want to do with your PhD after you graduate, and what kind of preparation you want during your PhD. You can do CS Ed research via the CS PhD at Michigan (I did), and your preparation will involve classes in CS and a CS qualifying examination. SI is more oriented towards psychological and sociological perspectives on computing. EER will be more about CS and education in an Engineering context. If you want a CS faculty job, the CS PhD is the surest bet, but SI PhDs do get hired in CS departments, and we hope EER PhDs do, too. EER PhD opens up possibilities in Engineering Education departments (like at Purdue, Virginia Tech, Ohio State, and Clemson), where a CS or SI Phd is less common. Michigan is becoming a seriously interesting place for computing education research. Elliot Soloway (my PhD advisor) is still an energetic force in CS. SI just hired Ron Eglash (starting the same time as us), who is one of the founders of ethnocomputing and ethnomathematics (see news article here). I’m eager to collaborate with my friends in the learning sciences here, like Betsy Davis, Barry Fishman, and Chris Quintana. Do come join us! "
"216","2017-11-27","2023-03-24","https://computinged.wordpress.com/2017/11/27/cs-teacher-interview-emmanuel-schanzer-on-integrating-cs-into-other-subjects/","I love that Bootstrap is building on their great success with algebra to integrate CS into Physics and Social Studies. I’m so looking forward to hearing how this works out. I’m working on related projects, following Bootstrap’s lead. Lots of governors, superintendents and principals made pledges to bring CS to every child, but discovered that dedicated CS electives and required CS classes were either incredibly expensive (hiring/retaining new teachers), logistically impossible (adding a new class given finite hours in the day and rooms in the building), or actively undermined equity (opt-in classes are only taken by students with the means and/or inclination). As a result, they started asking how they might integrate CS into other subjects — and authentic integration is our special sauce! Squeezing CS into math is something folks have been trying to do for decades, with little success. Our success with Bootstrap:Algebra means we’ve got a track record of doing it right, which means we’ve been approached about integration into everything from Physics to Social Studies. Source: Computer Science Teacher: CS Teacher Interview: Emmanuel Schanzer–The Update"
"217","2013-12-10","2023-03-24","https://computinged.wordpress.com/2013/12/10/teach-real-algebra-with-code-the-interdisciplinary-program-bootstrap/","I got a chance to learn more about Bootstrap when Kathi Fisler visited us here at Georgia Tech recently. This article doesn’t do a good job of selling the program. Bootstrap is important for showing how programming can be used to teach something else that we agree is important. “When you hear, ‘This is so amazing! These apps teach kids to program!’ That’s snake oil. Every minute your students spend on empty engagement while they’re failing algebra, you’re assuring that they’re not going to college. Studies show that the grade kids get in Algebra I is the most significant grade to predict future income.” via GoLocalProv | News | Julia Steiny: Teach Real Algebra Instead of Wasting Time with Apps."
"218","2019-06-24","2023-03-24","https://computinged.wordpress.com/2019/06/24/what-a-cs-ed-letter-writer-needs-evaluating-impact-for-promotion-and-tenure-in-computing-education/","I’ve been asked, “When I’m writing a tenure or promotion letter for someone who works in CS education, what should I say?” I’m motivated to finally answer, in response to an excellent post by Amy Ko, On the academic quantified self. I recommend it highly, and suggest you go read that before this post. Amy’s post is on how to present her scholarly self. Her key question is “How can senior faculty like myself model scholarly selves rather than quantified selves?” She critiques her own biographic paragraph, which contains phrases like “is the author of over 80 peer-reviewed publications, 11 receiving best paper awards and 3 receiving most influential paper awards.” She restructures it to emphasize the narrative of her research, with sentences like this: Her most recent investigations have conceptualized the skills involved in programming, theorizing about the interplay between rigorous knowledge of programming language semantics, strategies for addressing the range of problems that arise in programming, and self-regulation skills for managing the selection, execution, and abandonment of strategies; these are impacting how programming is learned and taught. Amy is the program chair at the University of Washington’s School of Information. She writes as a role model for how to present oneself in academia — not just numbers, but a narrative about knowledge-building. I have a slightly different perspective. I am frequently a letter writer for promotion or tenure (and often both). I don’t get to set the criteria — those are set by the institution. The challenge gets harder when the criteria were clearly written for traditional Computer Science Scholarship of Discovery (versus the other forms of scholarship described by Boyer such Scholarship of Application or Integration), but the candidate specializes in computing education researcher or is teaching-track faculty. The criterion that most departments agree on for academic success is impact. So there’s the question: How do we evaluate impact of academic work in computing education? As a letter writer, I need a combination of both of Amy’s biographical paragraphs, but the latter is more valuable for me. Statistics like “80 peer-reviewed publications, 11 receiving best paper awards and 3 receiving most influential paper awards” tells me about perceptions of quality by the reviewers. Peer review (for papers and grants) and paper awards are really important for third year review and sometimes for tenure, to make the argument that the candidate is doing good work and is on a promising trajectory. A letter writer should not just cite the numbers. The promotion and tenure committees are looking for judgment based on the letter writers’ expertise. Construct a narrative. Make an argument. An argument for impact has to be about realized potential. Amy’s second paragraph tells me where to look for that impact. Phrases like “these are impacting how programming is learned and taught” inform me where to look for evidence. I want to see that this work is actually changing learning and teaching practices — by someone other than the candidate. If the candidate is in computing education research, then some of the traditional measures of Scholarship of Discovery still work. One important form of impact is on other researchers. Candidates can help me as a letter writer when they can show in the narrative of their research statement how other researchers and other projects are building on their work. I once was reviewing a candidate in the US who showed that a whole funding program in another country referenced and built upon their work. Indirectly, that candidate impacted every research project that that program funded — that’s amazing impact, but hard to measure. As Amy says, you have to spell out the narrative. As much as we dislike bean-counting, an H-index (and similar metrics) does provide evidence that other researchers are building on the work of the candidate. It’s not the only measure. It’s just a number, and it has to be put in context with judgment informed by the letter writers’ expertise. If a candidate is only focused on teaching, I usually turn away the request to write the letter. I have some research interest in how to measure high-quality teaching (e.g., how to measure CS PCK), but I don’t know how to evaluate the practice of teaching computing. If the candidate is (a) tenure-track in computing education or (b) teaching track and aims to influence others’ practice, the argument for impact may require some non-traditional measures. Some that I’ve used in my letters: We need to write letters that advance computing education candidates. Other countries are further than the US in recognizing computing education contributions (see post on that theme here). We need to learn how to tell the stories of impact in computing education, in order to advance the candidates doing that kind of work. (Thanks to Amy Ko and Shriram Krishnamurthi who gave me feedback on earlier forms of this post.)"
"219","2013-10-28","2023-03-24","https://computinged.wordpress.com/2013/10/28/a-theory-predicting-when-computing-education-will-reach-us-high-schools/","I have a theory that predicts when (if?) we will see more computing education research students in the US. I think that it might also help understand when computer science education (e.g., an AP course in CS) might reach the majority of US high schools. Recently, I hosted a visit from Dr. Nick Falkner (Associate Dean (IT), Faculty of Engineering, Mathematical and Computer Sciences) and Dr. Katrina Falkner (Deputy Head and Director of Teaching, School of Computer Science) from the University of Adelaide. We got to talking about the lack of CS education research (CER) graduate students in the United States. There are lots of PhD students studying CER in Australasia, Europe, and Israel. To offer a comparison point, when we visited Melbourne in 2011, they had just held a doctoral consortium in CS Ed with 20 students attending, all from just the Melbourne area. The ICER doctoral consortium at UCSD in August had 14 students, and not all 14 were from the US. The Australasian Computing Education will have its own DC, and they’re capping enrollment at 10, but there are far more CER PhD students than that in the region. I get invitations regularly to serve on review committees for dissertations from Australia and Europe, but rarely from the US. Why is CER so much more popular among graduate students outside of the US? I’ve wondered if it’s an issue of funding for research, or how graduate students are recruited. Then it occurred to us. Check out the Falkners’ titles: Associate Dean, Deputy Head (Katrina will be Head of School next year), Director. I remarked on that, and Nick and Katrina started naming other CS education research faculty who were Chairs, full Professors, and Deans and Directors in Australia. We went on naming other CS education researchers in high positions in New Zealand (e.g., Tim Bell, Professor and Deputy Head of Department), England (e.g., the great Computing Education Group at Kent), Denmark (e.g., Michael Caspersen as Director of the Center for Science Education), Sweden (e.g., CS Education Research at Uppsala), Finland, Germany, and Israel. Then I was challenged to name: I’m sure that there would be some quibbling if I tried to name US researchers in these categories. I don’t think anyone would disagree that none of these categories requires more than one hand to count — and I don’t think anyone needs more than a couple fingers for that last category. We have great computing education researchers in the United States. Few are in these kinds of positions of visible prestige and authority. Many in the ICER community are at teaching institutions. Many who are at research intensive universities are in teaching track positions. Computing Education Research is not as respected in US universities as it is in other countries. In these other countries, a graduate student could pursue computing education research, and might still be able to achieve tenure, promotion, and even an administrative position in prestigious institutions. That’s really rare in the United States. There are many reasons why there isn’t more CER in research-intensive universities. Maybe there’s not enough funding in CER (which is an outcome of lack of respect/value). Most people don’t buy into computing for all in the US. Unless there’s more CER in schools, maybe we don’t need much CER in Universities. I’m actually not addressing why CER gets less respect in the US than in other countries — I’m hypothesizing a relationship between two variables because of that lack of respect. The status of CER is definitely on the mind of students when they are considering CER as a research area. I’ve lost students to other areas of research when they realize that CER is a difficult academic path in the US. My first CS advisor at U-Michigan (before Elliot Soloway moved there) was strongly against my plans for a joint degree with education. “No CS department will hire you, and if they do, they won’t tenure you.” I succeeded into that first category (there was luck and great mentors involved). It’s hard for me to say if my personal path could ever reach categories 2 or 3, and if barriers I meet are due more to my research area than my personal strengths and weaknesses. All I can really say for sure is that, if you look around, there aren’t many CER people in those categories, which means that there is no obvious evidence to a graduate student that they can reach those kinds of success. So, here’s my hypothesis: Hypothesis: We will see more computing education research graduate students in the US when CER is a reasonable path to tenure, promotion, and advancement in research-intensive US universities. Other countries have a lot more computing education in their high schools than we do in the United States. Israel, New Zealand, Denmark, and England all have national curricula that include significant computer science. In Israel, you can even pursue a software engineering track in high school. They all have an advantage over the US, since we have no national curricula at all. However, Germany, which has a similarly distributed education model, still has much more advanced computing education curricula (the state of Bavaria has a computing curriculum for grades 6-12) and CS teacher professional development. What’s different? I suspect that there are similar factors at work in schools as in Universities. Computing education is not highly valued in US society. That gets reflected in decisions at both the University and school systems. I don’t know much about influence relationships between the University and the K-12 system. I have suggested that we will not have a stable high school CS education program in the United States without getting the Schools of Education engaged in teacher pre-service education. I don’t know how changes in one influence the other. However, I see a strong correlation, caused by an external social factor — maybe some of those I mentioned earlier (not enough funding for CER, don’t need more CER, etc.). Professors and University administrators are not separate from their societies and cultures. The same values and influences are present in the University as in the society at large. What the society values has an influence on what the University values. If a change occurs in the values in the society, then the University values will likely change. I don’t know if it works in the other way. So here’s where I go further out on a limb: Second Hypothesis: We will see the majority of US high schools offering computer science education (e.g., AP CS) when CER is a reasonable path to tenure, promotion, and advancement in research-intensive US universities. Here are two examples to support the hypothesis: I don’t think that this hypothesis works as a prescriptive model. I’m not saying, “If we just create some computing education research units, we’ll get CS into high schools!” I don’t know that there is much more CS Ed in schools in Australia, Sweden, or Finland than in the US, where CER is a path to advancement. I hypothesize a correlation. If we see changes at the Universities, we’ll be seeing changes in schools. I expect that the reverse will also be true — if we ever see the majority of US high schools with CS, the Universities will support the effort. But I thnk that the major influencer on both of these is the perception of CER in the larger society. I’m hypothesizing that both will change if the major influence changes. (Thanks to Briana Morrison, Barbara Ericson, Amy Bruckman, and Betsy DiSalvo on an earlier draft of this post.)"
"220","2018-10-19","2023-03-24","https://computinged.wordpress.com/2018/10/19/analyzing-cs-in-texas-school-districts-maybe-enough-to-take-root-and-grow/","My Blog@CACM for this month is about Code.org’s decision to shift gradually the burden of paying for CS professional development to the local regions — see link here. It’s an important positive step that needs to happen to make CS sustainable with the other STEM disciplines in K-12 schools. We’re at an interesting stage in CS education. 40-70% of high schools have CS, but the classes are pretty empty. I use Indiana and Texas as examples because they’ve made a lot of their data available. Let’s drill a bit into the Texas data to get a flavor of it, available here. I’m only going to look at Area 1’s data, because even just that is deep and fascinating. Brownsville Intermediate School District. 13,941 students. 102 in CS.  Of the 10 high schools in Brownsville ISD, only two high schools have anyone in their CS classes. Brownsville Early College High School has 102 students in CS Programming (no AP CS Level A, no AP CSP). That probably means that one teacher has several sections of that course — that’s quite a bit. The other high school, Porter Early College High School has fewer than five students in AP CS A. My bet is that there is no CS teacher there, only five students doing an on-line class. That means for 10 high schools and 13K students, there is really only one high school CS teacher. Edinburg Consolidated Independent School District, over 10K students, 92 students in CS.  This is a district that could grow CS if there was will. There are 6 high schools, but two are special cases: One with less than 5 students, and the other in a juvenile detention center. The other four high schools are huge, with over 2000 students each. In Economedes, that are only 9 students in AP CS A — maybe just on-line? Edinburg North and Robert R Vela high school each have two classes: AP CS A and CS1. With 21 and 14, I’m guessing two sections. The other has 43 and 6. That might be two sections of AP CS A and another of CS1, or two sections of AP CS A and 6 students in an on-line class. In any case, this suggests two high school CS teachers (maybe three) in half of the high schools in the district. Those teachers aren’t teaching only CS, but with increased demand and support from principals, the CS offerings could grow. It’s fascinating to wander through the Texas data, to see what’s there and what’s not. I could be wrong about what’s there, e.g., maybe there’s only one teacher in Edinburg and she’s moving from school-to-school. Given these data, there’s unlikely to be a CS teacher in every high school, who just isn’t teaching any CS. These data are a great snapshot. There is CS in Texas high schools, and maybe there’s enough there to take root and grow. "
"221","2018-04-09","2023-03-24","https://computinged.wordpress.com/2018/04/09/high-school-cs-teachers-experience-like-university-cs-teachers-code-shock/","Jeff Yearout has been teaching for over 25 years, and is just in his second year of teaching CS. His concerns in his blog echo many of the same ones that I hear from higher-education CS teachers, e.g., dealing with the wide variance of students, and getting all students to engage around code (pseudo or otherwise). I think one of the hardest things to manage in designing a curriculum is how to dial the difficulty up at a proper pace for the “center mass” of the class skill level. And in this new curriculum from PLTW this particular unit starts out manageable, but suddenly shoots up rapidly, thus the “code shock” mentioned above. I also have the challenge of having a lot of kids in class who simply don’t want to interact in class when, for instance, I’m working through pseudocode on the board. From “Teaching CS is Hard“"
"222","2018-01-05","2023-03-24","https://computinged.wordpress.com/2018/01/05/what-universities-can-do-to-prepare-more-computer-science-teachers-evidence-from-uteach/","UTeach has published a nice blog post that explains (with graphs!) the ideas that I alluded to in my Blog@CACM post from last month. While currently CS teacher production is abysmal, UTeach prepared CS teachers tend to stay in their classrooms for more years than I might have expected. More, there is evidence that suggests that there is significant slice of the CS undergraduate population that would consider becoming teachers if the conditions were right. There is hope to imagine that we can making produce more CS teachers, if we work from the University side of the equation. Working from the in-service side is too expensive and not sustainable.  Michael Marder, Professor of Physics and Executive Director of UTeach, and Kim Hughes, Director of the UTeach Institute, write… The number of computer science and computer science education teachers prepared per year is smaller than for any other STEM subject — even engineering and physics — and while estimates vary, it is safe to say it is on the order of 100 to 200 per year, compared to the thousands of biology or general science teachers prepared. The U.S. has around 24,000 public and 10,000 private high schools. Only 10% to 25% have been offering computer science, so to provide all of them with at least one teacher at the current rate simply looks impossible. Source: What universities can do to prepare more Computer Science teachers"
"223","2016-09-12","2023-03-24","https://computinged.wordpress.com/2016/09/12/losing-cs-teachers-in-scotland-latest-report-on-cs-teacher-numbers-from-computing-at-school-scotland/","If you can forgive the bias in the graph (what looks like a 90% drop is actually a 25% drop), you will find this to be an important and interesting report. Scotland has one of the strongest computing at schools efforts in the world (see site here), with an advanced curriculum and a large and well-designed professional development effort (PLAN-C). Why are they losing CS teachers? When I wrote about this in 2014 (the trend has only continued), I pointed out that part of the problem is teachers refusing to shift from teaching Office applications to computer science. The current report doesn’t give us much more insight into why. The point I found most interesting was that Scottish student numbers dropped 11%, and teacher numbers in the other disciplines are also declining (e.g., mathematics teachers are declining by 6% over the same period), but at a much slower rate than the CS decline of 25%. That makes sense too — if you’re a teacher and things are getting tough, stick with the “core” subjects, not the “new” one. It’s worth asking, “How do we avoid this in the US?” and “Can we avoid it?” We know too little about what happens to CS teachers in the US after professional development. I know of only one study of CS teacher retention in the US, and the observed attrition rate in that study was far worse than 25%. Do we know what US retention rate is for CS teachers? Maybe Scotland is actually doing better than the US? Today we launch our latest report into the numbers of Computing Science teacher numbers across Scotland. We have carried out this survey in 2012, 2014 and now 2016 as we are concerned about the decreasing number in Computing teachers in Scottish schools. Nationally we now have 17% of schools with no computing specialist and a quarter of Secondary schools have only one CS teacher. Source: Latest report on CS teacher numbers | Computing At School Scotland"
"224","2014-12-10","2023-03-24","https://computinged.wordpress.com/2014/12/10/significant-decline-in-cs-in-schools-nationwide-cas-scotland-2014-report/","The 2014 report from Computing At School (CAS) Scotland is out on the status of computer science education nationwide (see the report here). The results are remarkable and distressing. CAS Scotland succeeded at getting computer science to be a recognized subject, with the goal of replacing the Information and Communications Technology (ICT) curriculum. However, computer science education in schools has declined dramatically. Roger McDermott, who pointed out the report to me, is wondering if the push to improve the rigor of computing in schools may have led to the decline. Some of the key findings (all of the points below are quotes from the report): “[We] stopped offering certificate computing over ten years ago. The Head Teacher decided that with reducing staffing, low uptake by pupils and the fact that the higher was not required for further and higher education entry that certificate classes were not viable.” The problems that CAS-Scotland is facing are quite similar to ones we’re facing the United States: Too few CS teachers, too few teachers interested in becoming CS teachers, a high drop-out rate among CS teachers (as already seen in ExploringCS), and a lack of value at the University level which influences perception at the high school level. A mandate to teach computer science in all schools doesn’t make it happen. Scotland is a smaller country which makes the problem more manageable, and they are already far ahead of the United States in terms of curriculum, teacher preparation programs, and having CS teachers in schools. (Does anyone else look wistfully at that 12% of schools not teaching CS? Only 12%?) We need to watch how Scotland solves these problems, because we might able to use their solutions."
"225","2014-07-27","2023-03-24","https://computinged.wordpress.com/2014/07/27/new-exploringcs-working-paper-how-do-we-avoid-cs10k-cs5k-only-five-years-later/","An important new working paper from the ExploringCS group asks the question: If we achieve CS10K, how do we avoid only having CS5K left after only five years? This is exactly the question that Lijun Ni was exploring in her dissertation on CS teacher identity. Of the 81 teachers who have participated in the ECS program over the last five years, 40 are currently teaching ECS in LAUSD. These numbers reveal that we have “lost” more teachers than we have “retained.” Of the 40 teachers who are currently teaching the ECS course, 5 of them had a 1-2 year interval in which they did not teach the course. This means that fully 45 of the 81 teachers who have participated in the ECS program have experienced a teaching “disruption” which has ended their participation in the ECS teacher community for a year or longer. In particular, they ask us to consider the dangers of short-term fixes to long-term problems, which is a point I was trying to make when arguing that we may be 100 years behind other STEM subjects in terms of making our discipline-based education available to all. In response to scaling up challenges, we can expect a rise of “quick-fix” solutions that have a potential to undercut progress. One quick-fix “solution” to address CS teacher shortage or the need for deepened teacher content knowledge are programs that bring industry professionals to assist teachers in CS classrooms. While we are interested in learning more about the outcomes of these programs, because there can be value in students hearing from experts in the field, there are also risks to having industry professionals take on a teaching role in the classroom without professional development in effective and relevant pedagogy and belief systems and equitable practices. Will industry professionals deliver content knowledge the way they were taught, not having had experience working with the novice learner? Will they focus on working with the students who think more like they do, to the neglect of the other students? In short quick fixes like these may inadvertently perpetuate the persistent divides in the field. I add to their list of questions: Does bringing in IT professionals reduce the administrative pressure that pushes teachers out of CS? Does it help to create the context and environment that supports CS teachers? I used this working paper in my post this month for Blog@CACM. Vint Cerf recently gave testimony in the Senate recommending a requirement for CS in all primary and secondary schools. The ECS experience (and Lijun Ni’s work) point toward the need to create a supportive environment for CS teaching if we want to achieve Vint’s recommendation. Highly recommended read."
"226","2013-12-20","2023-03-24","https://computinged.wordpress.com/2013/12/20/googles-mistake-cs-teacher-pd-must-be-on-line-only/","Google CS4HS program has had a big impact in computer science education in the United States. According to the UChicago studies, a sizable percentage of all CS teacher professional development (PD) in the United States — 25% of all PD workshops were funded just by Google. Google has changed the criteria for the 2014 offerings. They will only fund all online courses. Not so in Europe, where they are still funding face-to-face workshops. This is a mistake for two reasons: Google can scale-up who gets “touched” by CS teacher PD, but will lose considerably in effectiveness. I predict that the end result will be far fewer new CS teachers from the 2014 workshops than from previous incarnations of CS4HS. I understand that Google is a company and has to control costs. But the return on investment for this change will be drastically less — they will end up with fewer well-prepared CS teachers for their investment, not more. Applicants must satisfy the following criteria in order to be eligible: Please note: In the US/Canada region for 2014, we will only be funding online courses (MOOCs) professional development programs via CS4HS 2014-US/Canada."
"227","2013-01-14","2023-03-24","https://computinged.wordpress.com/2013/01/14/what-is-the-current-state-of-high-school-computer-science-professional-development-the-results-of-the-uchicago-landscape-study/","I am at the meeting in Portland of all the awardees from the NSF programs in Broadening Participation in Computing (BPC-A, like ECEP), Computing Education in the 21st Century (CE21, like our CSLearning4U project), and all the funded projects related to CS10K, sponsored by NCWIT. You may recall that I invited people to participate in the Landscape Study on the capacity of our computing community’s professional development efforts. The results of that survey are being presented here at this meeting, and a summary is available at the URL below. I find the results a little depressing. The folks at UChicago who do the study compare us to professional development in Science or Mathematics, and we don’t much look like that. We have such a long way to go. What is the current state of high school computer science professional development? THIS STRAND OF WORK FOCUSED ON DESCRIBING THE CURRENT PROFESSIONAL DEVELOPMENT OPPORTUNITIES that are available for high school computer science (CS) teachers. The primary data collection for this strand took place through a survey administered to providers of high school computer science teacher professional development (PD). via Computer Science – Landscape Study – The Center for Elementary Mathematics and Science Education."
"228","2021-02-01","2023-03-24","https://computinged.wordpress.com/2021/02/01/icer-2021-call-for-papers-out-with-changes-for-icer-authors/","The International Computing Education Research (ICER) Conference Call for papers is now out — see the conference website here. Abstracts are due 19 March, and full papers are due 26 March. There are big changes in the author experience of ICER 2021 — see a blog post describing them here. Here are two of them: Please do submit to ICER — let’s get lots of great CS Ed research out into the community discussion!"
"229","2020-09-28","2023-03-24","https://computinged.wordpress.com/2020/09/28/award-winning-papers-at-icer-2020-explore-new-directions-and-point-towards-the-next-work-to-do/","The 2020 ACM SIGCSE International Computing Education Research Conference was in August (see website here), hosted in Dunedin, New Zealand — but was unfortunately entirely virtual. I became so much more aware of the affordances of face-to-face conferences when attending one of my favorite conferences all through my screen. The upside of the all-virtual format is that all the talks are available on YouTube (see ICER 2020 channel here). Here are my comments on the three papers receiving awards — see them listed here. What Do We Think We Think We Are Doing?: Metacognition and Self-Regulation in Programming. (Paper link) This is the paper that I have read and re-read the most since the conference. The authors review what the literature tells us about metacognition in programming. Metacognition is thinking about thinking, like “Did I really understand that? Maybe I should re-read this. Or maybe I should write down my thoughts so I can reflect on them I’m not sure that I’m making progress here. Taking a walk would probably help me clear my head and focus.” One of their findings that is most intriguing is “Metacognitive knowledge is difficult to achieve in domains about which the learner has little content knowledge.” In other words, you can’t teach students metacognition and self-regulation first, and then teach them something using those new thinking skills. Learners have to know some of the domain first. Now why is that? Here’s a hypothesis: Metacognition and self-regulation are hard. They take a lot of cognitive load. You have to pay attention to things that are invisible (your own memory and thoughts) and that’s hard. Trying to learn or problem-solve at the same time that you’re monitoring yourself and thinking about your own learning — super hard. Maybe you have to know enough about the domain for some of that activity to be automatized, so that you don’t have to pay as much attention to it in order to do it. So the biggest hole I see in this paper (which given that it’s a review paper, probably means that the hole is in the literature) is that it does not consider enough factors like gender, race, disability, or SES (e.g., wealth). (Gender gets mentioned when reporting Alex Lishinski’s great work, but only with respect to self-efficacy.) My hypothesis is that the story is more complicated when you consider non-dominant groups. If you don’t think you belong, that takes more of your attention, which takes attention away from your learning — and leaves even less attention for metacognition and self-regulation. If you’re worrying about your screen reader working or where you’re going to get dinner tonight, how do you also have attention left over for monitoring your learning? The biggest unique opportunity I see in thinking about metacognition and programming is in thinking about debugging. Like psychology or veterinarian science, but unlike most other fields, a lot of a computer scientists’ job is in understanding the “thinking” (behavior, processing, whatever) of another agent. When you’re debugging your program, isn’t that a kind of metacognition. “Okay, what is the computer doing here? How is it interpreting what I wrote? Oh wait, is that what I wanted to write? Is that what I wanted to happen?” The complexity of mapping your thoughts and intentions to what you wrote to what the computer did is enormous. Now, debug someone else’s code — you’ve got what you want in mind, you’re constructing a model of mind of whoever wrote the code before you (did they know what they were doing? is this code brilliant or broken?), and you’re trying to figure out how the computational agent is “thinking about” the code. There’s some seriously complex metacognition going on there. Exploring Student Behavior Using the TIPP&SEE Learning Strategy. (See paper here.) No surprise that Diana Franklin’s CANON Lab at U. Chicago continues to do terrific and award-winning work. I’m excited about the TIPP&SEE learning strategy. A commonly found problem in computer science education is that students are bad at Explain In Plain English (EIPE) problems (e.g., see this SIGCSE 2012 paper on the topic). EIPE problems are a measure of students being able to step back from the structure and behavior of code to describe its function or purpose. Katie Cunningham has been exploring how some students focus more on the purpose of the programming, and others get stuck in the code and can’t see the purpose of the program. The TIPP&SEE learning strategy explicitly addresses these problems. Students are guided through how to understand a programming project and relating code to purpose. This award-winning paper (which follows on their SIGCSE 2020 paper) shows us that students using the TIPP&SEE approach perform better than students who don’t. They get more of their programs done. The SIGCSE 2020 paper shows that they learn more. The papers totally convince me that this strategy works. The next question is that I want to know is how and why. The SIGCSE paper does some qualitative work, but it’s pretty big n — 184 students. With this kind of scale, the programs are given and the problems are given. There’s not as much opportunity for the detailed cognitive interviews to figure out how the students are thinking about interpreting programs. What happens when these students just go to the Scratch website to look at something that they want to reuse? Do they use TIPP&SEE? Do they understand the programs that they just happen to come across? What happens when they want to build something, where they provide their purpose? Can they draw on TIPP&SEE and succeed? This is not a critique of the papers — they’re great and make real contributions. I’m thinking about what I want to know next. Hedy: A Gradual Language for Programming Education. (See program link here.) Easily my favorite paper at ICER 2020 this year. Felienne is doing what I am trying to do. Let’s invent new more usable programming languages! I am happy that she got this paper published, because (selfishly) it gives me hope that I can get my new work published. I am thrilled that the ICER community valued this paper so highly that it received a John Henry award. The basic idea is to create a sequence of programming languages, where advancing levels have most of the elements of the previous level but include new elements. Her earliest level has no punctuation — no quotes, no semi-colons, no curly-braces. I recently built a task-specific programming language that had the same attribute, and one of the students I’m working with looked at it and asked, “Wait — you can have programming languages without all that punctuation? Well, then, why do we have so much when it scares people off?” Great question! When do we need all that extra punctuation, and where can we avoid it? The next stage is to explore how we design languages like these. (I’m biased since this is where I’m spending most of my research time on these days.) Why do we choose those language features? Why the keywords print, ask, echo, assign, if, else, and repeat? How do we design and iteratively develop the language? How do we know that people can do things that they want to do with this language? My answer to this is participatory design with teachers, but there are many other viable answers. Felienne provides good design rationale for Hedy’s language features, based in literature from computing education and natural language acquisition. In a process of user experience (UX) design, we’d also user iterative development including testing with real users. This paper shows us use at large scale, and a big chunk of her paper describes what people did with it. It’s fascinating work, but we don’t talk to any of them. We don’t know what they liked, what they disliked, what they found frustrating, and what they were able to do. We need to move programming language design closer to user experience design — UX for PX. All three papers are terrific contributions to the research community, and I plan to cite and built on them all. I’m eager to see what comes next! Sidebar: I am a member of the ICER Steering Committee (which has no role in reviewing papers or in picking awards), and I was a metareviewer for ICER 2020. I am speaking here just for myself as a reader and attendee."
"230","2016-12-19","2023-03-24","https://computinged.wordpress.com/2016/12/19/after-leaving-computing-new-majors-tend-to-differ-by-gender-crn/","I found these differences fascinating, though I’m not sure what to make of them. Once leaving computing, students head to different majors with a big gender difference. Only 5% of women go into an Engineering field after CS, while 32% of men go into some form of Engineering. Why is that? As computing departments across the U.S. wrestle with increased enrollment, it is important to recognize that not everyone who becomes a computing major stays a computing major. In 2014, CERP collected data from a cohort of U.S. undergraduate students who agreed to be contacted for follow-up surveys in 2015. While most of the students surveyed remained computing majors (96%), some students changed to a non-computing major. As shown in the graphic above, students in our sample moved to a variety of majors, and the type of new major tended to differ by gender. Most men (69%) who left a computing major switched to engineering, math/statistics, or physical science majors. On the other hand, most women (53%) tended to move to social sciences, or humanities/arts. These data are consistent with existing social science research indicating women tend to choose fields that have clear social applications, such as the social sciences, arts, and humanities. CERP’s future analyses will explore why women, versus men, say they are leaving computing for other fields. Source: After Leaving Computing, New Majors Tend to Differ by Gender – CRN"
"231","2015-03-30","2023-03-24","https://computinged.wordpress.com/2015/03/30/computer-science-looks-beyond-nerds-yeah-we-still-need-to-say-it/","The comments from students in the article below from Duke are just like the ones I hear from my students when I ask them how our introductory class is going. “Way better than I expected” and “I thought it would be all geeky” and “I can see using this!” You’d think with all the press about computing education these days that we would wouldn’t still have to explain all of this, but yeah, we do. “I thought I would be surrounded by tech geeks who sat alone at their computers all day,” Walker said. “But I came to realize that computer science lets you do things that are applicable to all sorts of fields.” Now she’s using her new computational savvy to expand a nonprofit she founded in high school to raise money for an elephant sanctuary in Thailand. “You wouldn’t think that running a nonprofit requires a lot of technical skills, but it does,” she said. “You get a problem and you think, ‘I could solve this on paper and it would take me 25 hours, or I can write one line of code and all of a sudden there’s my answer.’ The efficiency of it is super cool.” via Computer Science Looks Beyond Nerds | Duke Today."
"232","2013-12-11","2023-03-24","https://computinged.wordpress.com/2013/12/11/a-bbc-broadcast-on-computing-the-joy-of-logic/","Not sure how (if?) we can see this in the US, but it sounds really good. A sharp, witty, mind-expanding and exuberant foray into the world of logic with computer scientist Professor Dave Cliff. Following in the footsteps of the award-winning ‘The Joy of Stats’ and its sequel, ‘Tails You Win – The Science of Chance’, this film takes viewers on a new rollercoaster ride through philosophy, maths, science and technology- all of which, under the bonnet, run on logic. Wielding the same wit and wisdom, animation and gleeful nerdery as its predecessors, this film journeys from Aristotle to Alice in Wonderland, sci-fi to supercomputers to tell the fascinating story of the quest for certainty and the fundamentals of sound reasoning itself. Dave Cliff, professor of computer science and engineering at Bristol University, is no abstract theoretician. 15 years ago he combined logic and a bit of maths to write one of the first computer programs to outperform humans at trading stocks and shares. Giving away the software for free, he says, was not his most logical move… With the help of 25 seven-year-olds, Professor Cliff creates, for the first time ever, a computer made entirely of children, running on nothing but logic. We also meet the world’s brainiest whizz-kids, competing at the International Olympiad of Informatics in Brisbane, Australia. ‘The Joy of Logic’ also hails logic’s all-time heroes: George Boole who moved logic beyond philosophy to mathematics; Bertrand Russell, who took 360+ pages but heroically proved that 1 + 1 = 2; Kurt Godel, who brought logic to its knees by demonstrating that some truths are unprovable; and Alan Turing, who, with what Cliff calls an ‘almost exquisite paradox’, was inspired by this huge setback to logic to conceive the computer. Ultimately, the film asks, can humans really stay ahead? Could today\’s generation of logical computing machines be smarter than us? What does that tell us about our own brains, and just how ‘logical’ we really are…? via BBC Four – The Joy of Logic."
"233","2013-12-10","2023-03-24","https://computinged.wordpress.com/2013/12/10/why-are-english-and-lots-of-other-majors-studying-computer-science/","Ten years ago, professors in computer science departments everywhere wondered how undergraduates from a broad range of fields could be attracted to computer science (CS). We were convinced that this material would be vital for their careers, but we were up against negative stereotypes of programmers, and the prediction that most software jobs were about to be outsourced to the third world. The tide has turned! The graph below shows annual enrollments over the past decade for the introductory computer science courses at UC Berkeley, Stanford, and the University of Washington. At each of these schools, and at colleges and universities across the nation, the introductory computer science course is now among the most popular courses on campus, and demands for advanced computer science courses are at record-breaking highs. At Stanford, where more than 90% of undergrads take computer science, English majors now take the same rigorous introductory CS course as Computer Science majors. via Why are English majors studying computer science? « The Berkeley Blog. Dave Patterson and Ed Lazowska have written the above-linked blog post explaining why there has been such a rapid rise in enrollments in Computer Science at Berkeley, Stanford, and U. Washington. We’re seeing the same enormous rise in CS enrollments at Georgia Tech. Beyond the intro course, we’re seeing a dramatic increase in CS minors. At places where everyone is required to take CS (e.g., Georgia Tech, Rose Hulman, Harvey Mudd), students have the option of going beyond that first course, and because the first course is tailored for them, they’re more likely to succeed at it. At Georgia Tech, we’re seeing students take more than just the required course and pursing a credential in CS, within their major. English majors (and lots of others) are seeing that computing is valuable. Patterson and Lazowska offer two explanations (the numbering is mine): 1. So what happened? First, today’s students recognize that “computational thinking” — problem analysis and decomposition, algorithmic thinking, algorithmic expression, abstraction, modeling, stepwise fault isolation — is central to an increasingly broad array of fields. That may be true, but I doubt it. It would be interesting and useful to survey these students, discover what majors they’re going into, and ask why they’re taking CS. (Kind of what we did across the state of Georgia in 2010.) I don’t believe that most people are aware of “computational thinking,” and even less, new students in higher-education. As evidence of this growing awareness, the authors cite a recent quote from Richard Dawkins (in 2013), “Biology nowadays is a branch of computer science.” That’s not a new position for Dawkins. In 2007 (at the depths of declining enrollment), he told Terry Gross on NPR, “Since Watson and Crick in 1953, biology has become a sort of branch of computer science.” This isn’t a sign of a recent awareness of the importance of “computational thinking.” 2. In addition to enhancing prospects within a chosen field, surely some of the reason for interest in computer science as a major or as a minor is to enhance employment opportunities after graduation. I totally buy that. That’s what Eric Roberts saw from his informal survey when the boom in enrollment first started. But my gut is a bad judge of these things. We really ought to test these claims, rather than make claims without evidence. Who is taking CS now? And why? And how does it differ between these institutions? The authors end their piece arguing for more faculty teaching more CS classes: In higher education, the response has been sluggish at best. Computer Science is usually found in colleges of engineering — as is the case at Berkeley, MIT, Stanford, and Washington — so one indicator of accommodation is the fraction of engineering faculty in the field. Less than a fifth of the engineering faculty at these schools teach computer science courses, a fraction nearly unchanged in the last decade. I strongly agree with the argument. The critical issue here isn’t about growing Engineering or if CS belongs in Egnineering. The critical issue is that computing is a form of literacy, not just a specialty skill, and we have to think about how to ramp up our offering of computing education so that it’s universally accessible. I talked about this implication of our successful CS1’s for everyone in the May 2009 Communications of the ACM: Finally, building successful, high-demand courses for non-computing majors gives us a different perspective on the current enrollment crisis. Students want these courses. Other schools on campus want to collaborate with us to build even more contextualized classes. While we still want more majors, we have an immediate need for more faculty time to develop and teach these courses that bring real computing to all students on campus."
"234","2016-01-11","2023-03-24","https://computinged.wordpress.com/2016/01/11/announcing-a-new-framework-to-define-k-12-computer-science-education/","I’ve mentioned my involvement in the initial meetings for the new K-12 CS Ed framework effort (see previous blog post). This effort is now formally announced with a steering committee and a website. CSTA, ACM, and Code.org are joining forces with more than 100 advisors within the computing community (higher ed faculty, researchers, and K-12 teachers, many of whom are also serving as writers for the framework), several states and large school districts, technology companies, and other organizations to steer a process to build a framework to help answer these questions. A steering committee initially comprised of the Computer Science Teachers Association, the Association for Computing Machinery, and Code.org will oversee this project. Source: Announcing a New Framework to Define K-12 Computer Science Education | A Framework for K-12 Computer Science Education Pat Yongpradit did a terrific job of organizing these initial meetings, setting the ground rules, and trying to engage as many perspectives as he could. The overall goal of the process is described (copied from this page): To create a high-level framework of computer science concepts and practices that will empower students to… be informed citizens who can critically engage in public discussion on CS-related topics develop as learners, users, and creators of CS knowledge and artifacts better understand the role of computing in the world around them learn, perform, and express themselves in other subjects and interests There is a 0th item here that’s left unsaid: The goal is to create a framework that most people can agree on. “Coherence” (i.e., “community buy-in”) was the top quality of a framework in Michael Lach’s advice to the CS Ed community (that I described here). As Cameron Wilson put it in his Facebook post about the effort, “the K-12 CS Framework is an effort to unite the community in describing what computer science every K-12 student should learn.” It’s about uniting the community. That’s the whole reason this process is happening. The states want to know that they’re teaching things that are worthwhile. Teacher certificates will get defined only what the definers know what the teachers have to teach. The curriculum developers want to know what they should be developing for. A common framework means that you get economies of scale (e.g., a curriculum that matches the framework can be used in lots of places). The result is that the framework is not about vision, not about what learners will need to know in the future. Instead, it’s about the subset of CS that most people can agree to. It’s not the best practice (because not everyone is going to agree on “best”), or the latest from research (because not everybody’s going to agree with research results). It’s going to be a safe list. Take a look at the developing standard (see links here), and compare it to the CSTA standards (see link here) or the CS Principles Big Ideas (see link here). The overlap between them is pretty big. That’s not a critique of this process. It’s a limitation of frameworks in general. Standards and frameworks efforts are not about defining what CS education should be. They are a definition of the community’s standards. The danger is that the frameworks are then accepted as the definition of the field. There is a danger that standards can ossify a field. We end up teaching to the standard, not to the goals. (A humorous treatment of this idea can be found in this cartoon that Shriram Krishnamurthi shared — just swap “coding” for “clocks.”) We have to keep asking what should be taught to everyone to help them meet the requirements above. I don’t want to start nit-picking the framework, but I want to give one concrete example of something that typically gets left out because of community pressure. Alan Perlis (who with Alan Newell and Herb Simon named the field in 1967 in Science) said that computer science was the study of process. Why isn’t process a big idea? Why don’t we teach about race conditions, and communication between processes, and how execution speed can increase (or decrease) when spread across multiple processes? Programming tools like Scratch, Squeak Etoys, and App Inventor let students work with processes. Much of the programming in robotics, Arduinos, and other low-cost hardware requires understanding of processes. Moti Ben Ari (see here for example) and Ben Shapiro (in Blocky-Talky) are doing fascinating work trying to understand how kids think about process and how to teach them most effectively. Peter Denning, Alan Kay, and Mitchel Resnick have described how exploration of computational processes can support better student understanding of non-computational processes, e.g., biological, ants, termites, and traffic jams. Processes are a big idea in CS (since the very beginning), can help students learn outside of computing (they’re a “powerful idea” in Papert terms), and will be what learners will work with in the future. Why not include processes as a Big Idea? Because we don’t teach about processes in today’s classes. There is very little about processes in the prior frameworks. The programming tools we have used to teach CS (Pascal, Java, Python) don’t make it easy to deal with threads and processes. We’re developing frameworks based on what we have taught and not on what we should teach. We should keep pushing on processes as a big idea, and I hope that they’ll be in a future version of the framework. That’s the nature of frameworks. It’s about consensus, not about vision. That’s not a bad thing, but we should know it for what it is. We can use frameworks to build momentum, infrastructure, and community. We can’t let frameworks limit our vision of what computing education should be. As soon as we’re done with one set of frameworks and standards, we should start on the next ones, in order to move the community to a new set of norms.  "
"235","2016-12-07","2023-03-24","https://computinged.wordpress.com/2016/12/07/education-research-questions-and-warnings-for-csforall-during-csedweek/","Joan Ferrini-Mundy spoke at our White House Symposium on State Implementation of CS for All (pictured above). Joan is the Assistant Director at NSF for the Education and Human Resources Directorate. She speaks for Education Research. She phrased her remarks as three research areas for the CS for All initiative, but I think that they could be reasonably interpreted as three sets of warnings. These are the things that could go wrong, that we ought to be paying attention to. 1. Graduation Requirements: Joan noted that many states are making CS “count” towards high school graduation requirements. She mentioned that we ought to consider the comments of organizations such as NSTA (National Science Teachers Association) and NCTM (National Council of Teachers of Mathematics). She asked us to think about how we resolve these tensions, and to track what are the long term effects of these “counting” choices. People in the room may not have been aware that NSTA had just (October 17) come out with a statement, “Computer Science Should Supplement, not Supplant Science Education.”  The NCTM’s statement (March 2015) is more friendly towards computer science, it’s still voiced as a concern: Ensuring that students complete college- and career-readiness requirements in mathematics is essential. Although knowledge of computer science is also fundamental, a computer science course should be considered as a substitute for a mathematics course graduation requirement only if the substitution does not interfere with a student’s ability to complete core readiness requirements in mathematics. For example, in states requiring four years of mathematics courses for high school graduation, such a substitution would be unlikely to adversely affect readiness. Both the NSTA and NCTM statements are really saying that you ought to have enough science and mathematics. If you only require a couple science or math courses, then you shouldn’t swap out CS for one of those. I think it’s a reasonable position, but Joan is suggesting that we ought to be checking. How much CS, science, and mathematics are high school students getting? Is it enough to be prepared for college and career? Do we need to re-think CS counting as science or mathematics? 2. Teacher Credentialing: Teacher credentials in computer science are a mishmash. Rarely is there a specific CS credential. Most often, teachers have a credential in business or other Career and Technical Education (CTE or CATE, depending on the state), and sometimes mathematics or science. Joan asked us, “How is that working?” Does the background matter? Which works best? It’s not an obvious choice. For example, some CS Ed researchers have pointed out that CTE teachers are often better at teaching diverse audiences than science or mathematics teachers, so CTE teachers might be better for broadening participation in computing. We ought to be checking. 3. The Mix of Curricular Issues: While STEM has a bunch of frameworks and standards to deal with, we know what they are. There’s NGSS (Next Generation Science Standards) and the National Research Council Framework. There’s Common Core. There are the NCTM recommendations. In Computer Science, everything is new and just developing. We just had the K-12 CS Framework released. There are ISTE Standards, and CSTA Standards, and individual state standards like in Massachusetts. Unlike science and mathematics, CS has almost no assessments for these standards. Joan explicitly asked, “What works where?” Are our frameworks and standards good? Who’s going to develop the assessments? What’s working, and under what conditions? I’d say Joan is being a critical friend. She wants to see CS for All succeed, but she doesn’t want that to cost achievement in other areas of STEM. She wants us to think about the quality of CS education with the same critical eye that we apply to mathematics and science education."
"236","2016-08-12","2023-03-24","https://computinged.wordpress.com/2016/08/12/new-iste-standards-emphasize-computational-thinking-with-a-particularly-nice-definition/","ISTE has just released their ed-tech-influenced standards for students for 2016, and they include computational thinking — with a better definition than the more traditional ones. It’s not about changing how students think. It’s about giving students the tools to solve problems with technology. I liked the frequent use of the term “algorithmic thinking” to emphasize the connections to the history of the ideas. This definition doesn’t get to systems and processes (for example), but it’s more realistic than the broad transferable thinking skills claim.  Students develop and employ strategies for understanding and solving problems in ways that leverage the power of technological methods to develop and test solutions. Source: For Students 2016"
"237","2016-03-20","2023-03-24","https://computinged.wordpress.com/2016/03/20/forbes-weighs-in-on-computational-thinking-im-one-of-those-critics/","Based on the Forbes article (quoted below), I can now be referred to as Reviewer #2 (see post explaining that academic meme). I am one of *those* critics. I’m not apologizing — I still don’t see evidence that we can teach computational thinking the way it’s been described (as I discussed here). For example, is it true that “Computational thinking can also help in understanding and explaining how things work”? By learning about computational things, students will learn how to understand non-computational things? Maybe, but I don’t see much research trying to achieve that and how to measure whether it’s happening. I do believe that you can use computational things to learn about non-computational things, through modeling and simulation. But that’s different than saying that “computational thinking” will get you there. The defense offered in Forbes (“Despite almost a decade of efforts”) is a weak one. There are lots of things that humans have believed for a lot longer than a decade that are still wrong. Lamarckian theories of evolution? Spontaneous generation? Flat Earth? Length of time of a belief is not a measure of its truth. Young students in grades K-6 should learn the basic ideas in computing and how to solve problems computationally. Computational thinking can also help in understanding and explaining how things work. Computational thinking can be taught as a complement to science and to principles of engineering design. It can also be taught to support students’ creative expression and artistic talents. Despite almost a decade of efforts to define computational thinking, there are still critics that suggest we don’t know what computational thinking means or how to measure it. The previously mentioned work in standards setting and assessment is helping to more clearly define computational thinking and how it can be incorporated in the classroom. Source: Thawing from a Long Winter in Computer Science Education – Forbes"
"238","2016-01-13","2023-03-24","https://computinged.wordpress.com/2016/01/13/what-does-it-mean-to-assess-computational-thinking/","One of the arguments I develop in my book on learner-centered design of computing education is that computational thinking, using Jeannette Wing’s description, is implausible. There’s part of her description that talks about computing providing a medium for advancing thinking and learning in other domains — that’s the application part of computing, and that’s quite plausible. I call that part computational literacy because that’s the name Andrea diSessa gave to that idea years ago. Much of my book is about how to help students (of all kinds, from graphic designers to teachers to undergraduates) develop computational literacy. Then there’s the part of Jeannette’s description that suggests that learning computing will impact everyday thinking and problem-solving, e.g., people will use ideas about caching when packing for a trip. There is no evidence to support the belief that that will happen. Many studies investigating this kind of impact have not found that effect. (I’ve reported in the past how educational psychologists find computational thinking implausible.) Sure, there other definitions of computational thinking (I reference the others in my book), but they all have this same thread — computational thinking is about thinking that helps outside of computing. So what does it mean to assess computational thinking? Most computational thinking assessments I’ve seen fail to connect the computing to some other discipline. For both of Wing’s sets of goals, we need to show that students are learning computing. That’s a necessary part — if you don’t know computing, you can’t apply that knowledge and you can’t transfer it. But it’s not sufficient. Students must be applying, connecting, or transferring the computing knowledge to other domains to be computational thinking. SRI is developing a set of computational thinking assessments. From poking through their website, I’m not finding any examples, so I don’t know if they succeed where others have not. Their process is promising. As part of the NSF-funded Principled Assessment of Computational Thinking (PACT) suite of projects, SRI Education has been working with curriculum authors and teachers, assessment experts, and computer scientists to develop assessments for ECS. ECS emphasizes inquiry-based teaching to develop students’ problem solving skills, as well as their abilities to explain, elaborate, and evaluate what they are learning, often using multiple representations of particular solutions. These skills go well beyond recalling facts or giving inputs to a program and predicting its outputs. As a result, the SRI PACT team had to design and develop assessment tasks that elicited students’ problem solving and inquiry skills in authentic contexts and gave them opportunities to represent their skills in their own words and ways. Applying a principled design method, the team first developed generalized design templates for computational thinking practices. These practices refer to how students design and implement creative solutions and artifacts, how they design and apply abstractions and models, and how they analyze their computational work and the work of others (among other practices). We then used these templates to guide the development of assessment tasks and scoring rubrics aligned with the skills related to the learning goals of the ECS curriculum. Source: Broadening Student Participation in Secondary Computer Science Through Principled Assessment of Computational Thinking (PACT) | SRI International"
"239","2015-12-23","2023-03-24","https://computinged.wordpress.com/2015/12/23/book-released-learner-centered-design-of-computing-education-research-on-computing-for-everyone/","My book in John Carroll’s Human-Centered Informatics series was just released: Learner-Centered Design of Computing Education: Research on Computing for Everyone http://dx.doi.org/10.2200/S00684ED1V01Y201511HCI033 The book is available on Amazon here. There’s a cool website with all options for getting the book here. I’ve put a copy of the Table of Contents and Preface here: http://bit.ly/LCD-CE-Guzdial. My goal is to provide an overview (110 pages worth) of the research (over 300 references) related to computing education for everyone. I aim to connect literature from the traditional computing education research communities (e.g., SIGCSE and ICER) to research in learning sciences, educational psychology, and human-computer interaction. There is a lot of history in the book because that’s how I like to view these things. I spent most of 2015 writing this book, and this year set the context for the book. This was the year that Chicago, San Francisco, Arkansas, and then New York City decided to require computing for everyone. I had all those efforts in mind when I was writing, to tell what research has found about teaching computing to everyone. I expect to be blogging on some of themes in the book in 2016. Hope you all have Happy Holidays!"
"240","2018-04-13","2023-03-24","https://computinged.wordpress.com/2018/04/13/a-job-is-a-strange-outcome-measure-udacity-drops-money-back-guarantee-on-finding-a-job/","Udacity has dropped a money-back guarantee that they were offering to students in some of their Nanodegree programs. The guarantee (with stipulations and caveats) was that students would find a job after getting the nanodegree, or they would get their money back. An article in Inside Higher Ed (quoted below and linked here) describes some of the tensions. Other for-profit coding schools offer similar or better guarantees, but others do not. Ryan Craig, quoted below, suggests that Udacity might not have been hitting its targets for job placements. Does that mean that Udacity was doing something wrong? A job is such a strange outcome measure for any kind of educational program. I know some techniques for evaluating someone’s knowledge of programming, and I know how to create educational opportunities that might lead to successful evaluation. There are factors like student attitude and motivation and whether students engage in deliberate practice that are not entirely within my control. Even then, I’d be willing to say, “I can design a program where the majority of students will achieve this level of proficiency in coding.” But a job? Where I can’t control how the students interview, or where they apply, or what the companies are looking for (if they’re looking at all)? A job is not a well-defined outcome measure for an educational intervention. That may be what the students are seeking, but they are being unrealistic if they think that any school can guarantee them that. Ryan Craig, managing director of investment company University Ventures, noted that none of the major employers associated with Udacity will publicly commit to hire or interview nanodegree candidates. Craig pointed to a 2017 report from VentureBeat, which stated that of around 10,000 students who had earned nanodegrees since 2014, around 1,000 had found jobs as a result. “A placement rate of around 10 percent should spell the demise of any last-mile training program,” said Craig. Craig said the effectiveness of Udacity’s job guarantee was likely very limited for students. “Money-back guarantees don’t address the real guarantee that students are seeking: a job,” said Craig. Daniel Friedman, co-founder of coding school Thinkful, wrote in January 2016 that Udacity’s guarantee was vaguer and weaker than the guarantees offered by his own company and others such as Bloc and Flatiron School. Such guarantees are common at coding schools, though Friedman noted that some schools have had to drop guarantees because they conflicted with state regulations."
"241","2019-04-26","2023-03-24","https://computinged.wordpress.com/2019/04/26/congratulations-to-chris-stephenson-outstanding-contribution-to-acm-awardee-2018/","A well-deserved honor! Chris has done so much for computing education, from CSTA to her great work at Google. Congratulations!  CITATION For advancing K-12 CS education by founding and developing the Computer Science Teachers Association and incorporating its mission and membership into the ACM professional community. Dr. Chris Stephenson has expanded the definition of the professional computing community to include K-12 computer science (CS) teachers and education partners, supporting ACM’s mission to increase the diversity and perspectives of the community. Chris’s work in architecting, founding and nurturing the Computer Science Teachers Association (CSTA) in partnership with ACM into a professional international organization with more than 22,000 members dedicated to supporting teachers and pursuing excellence in K-12 CS education is widely recognized. Her scholarly research contributions, including work on computational thinking in K-12 education, the inaugural CSTA K-12 Computer Science Standards and the Running on Empty and Bugs in the System reports, have led to projects, initiatives and policy changes that have deeply and positively impacted K-12 education and educators globally.  From this web page. "
"242","2018-10-01","2023-03-24","https://computinged.wordpress.com/2018/10/01/not-a-surprise-in-computing-education-closing-the-gaps-circl-meet-mark-guzdial/","The Center for Innovative Research in CyberLearning (CIRCL) did a Perspectives interview with me (thanks, Quinn Burke!) that appears here. I got to talk about the range of things I’ve done, what I’ve been surprised by and not surprised by, and what I think the big challenges to come in K-12 CS education. In hindsight, it’s not a surprise that we’re having trouble closing the gaps. There are increasingly more teachers who can teach CS, and there are governors and the Tech industry pushing for more CS Ed. But in between, there are principals that don’t buy it, and the classes in the schools are few and tiny. Most Schools of Education are still not players in promoting CS education. I predict over 85% of kids in Georgia (at least) are not getting a single experience with CS. The percentage of schools having CS is getting higher, but real experience with CS is low. As you might imagine, I focus on the need for more research and for reducing inequities. We have made a lot of progress on computing education, and we can make more progress still. N.B. as Shriram points out in the comments, our claim for FCS1 about “language independent” is really about “multi-lingual.” I’ve asked CIRCL to update the piece, and I’ll try to be more careful about what I claim for FCS1 and SCS1. "
"243","2018-04-16","2023-03-24","https://computinged.wordpress.com/2018/04/16/finding-a-home-for-cs-ed-in-schools-of-ed-priming-the-cs-teacher-pump-report-released/","Thursday April 12, the report on finding a home for CS Ed in Schools of Education was released at Microsoft’s Times Square offices. Leigh Ann DeLyser and Frances Schick of “CS for All” did a great job pulling it all together.You can see the play-by-play (or tweet-by-tweet) of the event on the Twitter stream #home4CS. The report is available on the website http://www.computingteacher.org/. Some of the points that I found particularly interesting or compelling: The report makes a bunch of recommendations, but doesn’t offer many answers. It does start a conversation about how to make CS education sustainable in the US, which is a critical topic for long-term survival of the “CS for All” movement. "
"244","2019-01-14","2023-03-24","https://computinged.wordpress.com/2019/01/14/do-we-know-how-to-teach-secure-programming-to-k-12-students-and-end-user-programmers/","I wrote my CACM Blog post this month on the terrific discussion that Shriram started in my recent post inspired by Annette Vee’s book (see original post here), “The ethical responsibilities of the student or end-user programmer.” I asked several others, besides the participants in the comment thread, about what responsibility they thought students and end-user programmers bore for their code. One more issue to consider, which is more computing education-specific than the general issue in the CACM Blog. If we decided that K-12 students and end-user programmers need to know how to write secure programs, could we? Do we know how? We could tell students, “You’re responsible,” but that alone doesn’t do any good. Simply teaching about security is unlikely to do much good. I wrote a blog post back in 2013 about the failings of financial literacy education (see post here) which is still useful to me when thinking about computing education. We can teach people not to make mistakes, or we can try to make it impossible to make mistakes. The latter tends to be more effective and cheaper than the former. What would it take to get students to use best practices for writing secure programs and to test their programs for security vulnerabilities? In other words, how could you change the practice of K-12 student programmers and end-user programmers? This is a much harder problem than setting a learning objective like “Students should be able to sum all the elements in an array.” Security is a meta-learning objective. It’s about changing practice in all aspects of other learning objectives. What it would take to get CS teachers to teach to improve security practices? Consider for example an idea generally accepted to be good practice: We could teach students to write and use unit tests. Will they when not required to? Will they write good unit tests and understand why they’re good? In most introductory courses for CS majors, students don’t write unit tests. That’s not because it’s not a good idea. It’s because we can’t convince all the CS teachers that it’s a good idea, so they don’t require it. How much harder will it be to teach K-12 CS teachers (or even science or mathematics teachers who might be integrating CS) to use unit tests — or to teach secure programming practices? I have often wondered: Why don’t introductory students use debuggers, or use visualization tools effectively (see Juha Sorva’s excellent dissertation for a description of how student use visualizers)? My hypothesis is that debuggers and visualizers presume that the user has an adequate mental model of the notional machine. The debugging options Step In or Step Over only make sense if you have some understanding of what a function or method call does. If you don’t, then those options are completely foreign to you. You don’t use something that you don’t understand, at least, not when your goal is to develop your understanding. Secure programming is similar. You can only write secure programs when you can envision alternative worlds where users type the wrong input, or are explicitly trying to break your program, or worse, are trying to do harm to your users (what security people sometimes call adversarial thinking). Most K-12 and end-user programmers are just trying to get their programs work in a perfect world. They simply don’t have a model of the world where any of those other things can happen. Writing secure programs is a meta-objective, and I don’t think we know how to achieve it for programmers other than professional software developers."
"245","2018-11-23","2023-03-24","https://computinged.wordpress.com/2018/11/23/literature-is-to-composition-as-computer-science-is-to-computational-literacy-thinking/","Annette Vee was visiting in Ann Arbor, and looked me up. We had coffee and a great conversation. Annette is an English Professor who teaches Composition at University of Pittsburgh (see website here). She published a book last year with MIT Press, Coding Literacy: How Computer Programming is Changing Writing. (I’m part way through it and recommend it!) She knew me from this blog and my other writing about computational literacy. I was thrilled to meet someone who makes the argument for code-as-literacy with a real claim to understanding literacy. One of the themes in our conversation was the distinction between literature and composition. (I’m going to summarize something we were talking about — Annette is not responsible for me getting things wrong here.) Literature is about doing writing very well, about writing great works that stand the test of time. It’s about understanding and emulating greater writers. Composition is about writing well for communication. It’s about letters to Grandma, and office memos, and making your emails effective. Composition is about writing understandable prose, not great prose as in literature. People in literature sometimes look down on those in composition. There’s a similar distinction to be made between computer science as it’s taught in Universities and what Annette and I are calling coding/computational literacy (but which might be what Aman Yadav and Shuchi Grover are calling computational thinking). Computer science aims to prepare people to engineer complex, robust, and secure systems that work effectively for many users. Computational literacy is about people using code to communicate, to express thoughts, and to test ideas. This code doesn’t have to be pretty or robust. It certainly shouldn’t be complex, or nobody will do it. It should be secure, but that security should probably be built into the programming system rather than expecting to teach people about it (as Ben Herold recently talked about). People in computer science will likely look down on those teaching computational literacy or computational thinking. That’s okay. Few people will write literature. Everyone will compose."
"246","2017-02-17","2023-03-24","https://computinged.wordpress.com/2017/02/17/how-the-pioneers-of-the-mooc-got-it-wrong-ieee-spectrum/","There is a sense of vindication that the predictions that many of us made about MOOCs have been proven right, e.g., see this blog post where I explicitly argue (as the article below states) that MOOCs misunderstand the importance of active learning. It’s disappointing that so much effort went wasted. MOOCs do have value, but it’s much more modest than the sales pitch. What accounts for MOOCs’ modest performance? While the technological solution they devised was novel, most MOOC innovators were unfamiliar with key trends in education. That is, they knew a lot about computers and networks, but they hadn’t really thought through how people learn. It’s unsurprising then that the first MOOCs merely replicated the standard lecture, an uninspiring teaching style but one with which the computer scientists were most familiar. As the education technology consultant Phil Hill recently observed in the Chronicle of Higher Education, “The big MOOCs mostly employed smooth-functioning but basic video recording of lectures, multiple-choice quizzes, and unruly discussion forums. They were big, but they did not break new ground in pedagogy.” Indeed, most MOOC founders were unaware that a pedagogical revolution was already under way at the nation’s universities: The traditional lecture was being rejected by many scholars, practitioners, and, most tellingly, tech-savvy students. MOOC advocates also failed to appreciate the existing body of knowledge about learning online, built over the last couple of decades by adventurous faculty who were attracted to online teaching for its innovative potential, such as peer-to-peer learning, virtual teamwork, and interactive exercises. These modes of instruction, known collectively as “active” learning, encourage student engagement, in stark contrast to passive listening in lectures. Indeed, even as the first MOOCs were being unveiled, traditional lectures were on their way out. Source: How the Pioneers of the MOOC Got It Wrong – IEEE Spectrum"
"247","2013-01-04","2023-03-24","https://computinged.wordpress.com/2013/01/04/moocs-are-a-fundamental-misperception-of-how-learning-works/","During break (e.g., multi-hour long car rides), I gave a lot of thought to MOOCs and the changes that are coming to higher education. I realized that people can only believe that MOOCs can replace existing higher-education classes if they misunderstand what a teacher does. MOOCs (for the most part, as they are defined in Udacity, Coursera, and edX, and as defined at Wikipedia) provide lecture-like material (typically through videos). These are broken into small pieces, and are presented with interspersed mini-quizzes. There is additional homework. Feedback is provided, either canned (the system knows what’s right and wrong) or through peer-evaluation. There is typically some kind of forum for questions and answers, and is a key part of the connectivist MOOC for “nurturing and maintaining connections.” So why isn’t this the same as a face-to-face higher education class? If the only educated people in our society were the ones who wanted to learn (at the start, from the beginning of a class), our society would collapse. We would have too few educated workers to create innovations and maintain the technology we have. Our society depends on teachers who motivate students to persevere and learn. There is evidence that MOOCs do not teach. We know that MOOCs have a low completion rate. What most people don’t realize is that the majority of those who complete already knew the content. MOOCs offer a one-size-fits-few model, unchanging between content domains, that does not change for individual students (I know that they hope that it will one day, but it doesn’t now), that filters and certifies those who can learn on their own. The role of education in society is to teach everyone, not just those auto-didacts who can learn in a MOOC. Absolutely, it’s worth exploring how to make educational technology (including MOOCs) that provides learning opportunities where no teacher is available. Alan Kay encouraged us to think that way here in this blog. However, replacing good teachers with MOOCs reflects a deep misunderstanding of what a teacher does. Please note that I am not arguing that MOOCs are bad technologies, or that they can’t be used to create wonderful learning environments. I am explicitly critiquing the use of MOOCs as a replacement for existing courses (with a good teacher), not MOOCs as a textbook or augmentation of existing courses. How did we get to this point, that people are seriously talking about shutting down schools in favor of MOOCs? Maybe it’s because we in Universities haven’t done enough to recognize, value, and publicize good teaching. We haven’t done enough to tell people what we do well. MOOCs do what the external world thinks that University teachers do."
"248","2020-07-06","2023-03-24","https://computinged.wordpress.com/2020/07/06/paradigm-shifts-in-education-and-educational-technology-influencing-the-students-here-and-now/","Back on my last blog post referencing Morgan Ames’ book The Charisma Machine, Alan Kay said in a comment, “What we have here is a whole world view and a whole different world.” I’ve been thinking about that sentence a lot because it captures what I think is going on here. A Kuhnian paradigm shift is happening (and maybe has already happened) in research around education and educational technology from the world of Papert and Bruner to the world of learning sciences. I am going to take a pass at describing the change that I see happening in the field, but I encourage you also to read the International Society of the Learning Science (ISLS) presidential address from Victor Lee here, which describes the field more authority and with more authenticity than me. I remember asking Janet Kolodner (first editor-in-chief of the Journal of the Learning Sciences), “Why? Why learning sciences? We have educational psychology and cognitive science and so many other education disciplines.” She said that learning scientists were tired of just knowing what should happen. They wanted to get out to influence education practice and understand why learning doesn’t happen. Cognitive scientists mostly (at the time) ignored affect and motivation. Educational psychologists most often worked in controlled laboratories or experimental classrooms. Learning scientists wanted to understand and influence what was really happening in educational contexts, both formal and informal. More, they were devoted to expanding access to high-quality education. Yes, learning scientists explored cutting edge technologies to see what was possible, but even more, we try to figure out contexts that make or inhibit learning for real kids. Look at the titles of the Invited Speakers at ICLS 2020: Lost and found in dialogue: Embracing the promises of interdiscursivity and diminishing its risks, The Ed-Tech Imaginary, and Learning as an Act of Fugitivity. Words like “promises” and “imaginary” and “fugitivity” reflect a desire to change and to respond to what we thought might be, but discovered that reality is different. (Audrey Watters’ keynote is available as an essay here.) David Feldon told me once that the field is misnamed. It’s much more “Learning humanities” than “Learning sciences.” Once you decide to study what’s going on in actual practice with actual students, you find that you’re mostly in studies with really small n. Contexts, teachers, and students vary wildly. Nobody that I know in learning sciences is trying to invent a general dynamic medium for thought, because it’s so hard to get anything actually adopted and used in an impactful manner. I see Jim Spohrer’s work in Service Science as being part of the same paradigm — how do you actually get services designed and implemented that work in practice? This shift from the general to the specific, and from what could work to what does work is true in my research too. One of my recent NSF proposals is about working closely with a particular school district to figure out what is going to work there. What we know about Brookline or Brasil is almost irrelevant for this district. Another proposal is about inventing a dynamic medium for thought — but in a particular set of classes, in a task-specific form. I still would love to have a general dynamic medium for thought (as Alan suggests), but I believe we have to figure it out from the ground up. Over time, we will find specific notations that can work for specific tasks, and generalize as possible from there. The majority of the literature that I draw on these days is about teachers: how they learn, why pre-service education has so little influence on actual teacher practice, and how to influence adoption. Teachers are a gateway for technology in the classroom. There are lots of technologies that could work with kids, but don’t work with teachers. In my work today, I draw on Bruner and Papert for their theoretical framings.. I draw on Bruner’s laboratory-based work (e.g., his definition of scaffolding). I draw on Papert’s descriptions of what the computer offers learners, e.g., its protean nature. But I draw less on their implementation work. Bruner’s MACOS was a brilliant project that had a catastrophic result because they didn’t consider enough what would actually work in US schools. Papert created interesting interventions that didn’t become systemic or sustained. Ames is telling me what’s going wrong in actual implementations of OLPC and may some of why it went wrong. If I want things to be actually adopted, I need to avoid the mistakes that The Charisma Machine is describing. David’s description of what happened in Brasil in a comment to that earlier blog post is fascinating and super-useful, but doesn’t decrease the value of Ames’ description in Paraguay. I don’t agree with all of her rationalizations of why things turned out as they did (e.g., I don’t find the “technically precocious boys” perspective compelling or having explanatory power), and there are very likely things she missed. But what she describes obviously did happen. Learning from the experiences she describes informs our design processes and iterative feedback loops as a way of improving outcomes. Like any paradigm shift, it doesn’t mean that all the work that went before is wrong. The questions being asked in each paradigm are different. They start from different world views. Papert and Bruner both offer a vision of what we want, Logo and MACOS. Both ran up against the reality of school in the US, where Thorndike won and Dewey lost. Now, how do we help every student, in real school contexts? Nathan Holbert and David Weintrop recently told me a great phrase that’s common in the constructionism community (variously attributed to Seymour Papert or Uri Wilensky): “Are you designing for Someday or are you designing for Monday?” Are you designing for a world that might be, or are you designing for things that can go in the classroom soon? Neither are wrong. I don’t think that they even need to be a dichotomy. In my task-specific programming work, I’m making things that can’t go in the classroom Monday, but could go in the classroom next year, which is still a lot closer than Someday. Even to be in the classroom next year, I have to start from where schools are now. There won’t be a Dewey-an revolution in schools over the next year. But maybe Someday there will."
"249","2019-02-04","2023-03-24","https://computinged.wordpress.com/2019/02/04/inverse-live-coding-a-practice-for-teaching-web-development/","I finished my first semester teaching at the University of Michigan. I taught EECS 493 User Interface Development all on the Web. It was a tough class for me since I had never before this class used JavaScript, jQuery, or CSS. I learned a lot, but I also had to teach it. As readers of this blog now, I am a fan of live coding (see blog post here) where a teacher writes code live in front of the class. The positive aspects of live coding include that the teacher will likely make mistakes, so students see that (a) mistakes are common and expected, (b) mistakes can be corrected, and (c) there is a process to recover from mistakes. I could not live code in this class. I didn’t know the material well enough. It took me too long to code, and I couldn’t recover from mistakes in front of the class. It was also so hard in the context of a Web-based user interface course. I had the advantage that I could watch videos of Mark Ackerman and Walter Lasecki teach the course before me. Both of them know JavaScript and Web technologies well enough that they could live code in front of the class. I couldn’t understand what they were doing. Part of it was the low-resolution of the video — I couldn’t read the screens well. But a bigger part of it was the cognitive load of remembering the HTML and the CSS while writing the jQuery code. I couldn’t figure out the code while also remembering the names of the divs and how they were nested, and what CSS formats were being applied to which divs and classes. Maybe the younger kids fare better than me in my mid-50’s. So, I tried a different practice. Maybe call it Inverse Live Coding. This is like in-class coding or a lab session, but short — like 8-10 minutes of coding. We can do three of these in a lecture period. It’s more like a Peer Instruction (PI) session than a traditional laboratory coding activity. I typically put 2-3 of these in a 90 minute class, as part of a lecture. I have students use iClickers to “click in” when they’re successfully done with the change, so we’re using PI practices to make clear what kind of activity this is. That ritual (clicking in then re-joining the class session) helps with bringing people back to the whole-class context after the pair-programming activity. Here’s an example: I wrote a small JavaScript/HTML/CSS project that had a balloon slowly float upward, and could be steered left or right with arrow keys. (Why yes, that is a Smalltalk balloon in the example.)  I explained the code, introducing ideas like closures and the ready() method in jQuery.  Then I gave them a challenge. In this case, make the balloon also drift to the left, or drift in different directions based on the time or a random variable.  Different kinds of questions: I was pleased by how well this worked. First, it didn’t take much time. 80% of the teams solved at least one of the challenges in less than 8 minutes. Second, the teaching assistants and I got tons of questions. Many of the questions were fundamental ones — things I never would have even thought to talk about in class if I was live-coding. These are (paraphrased) actual questions that I got during the inverse live-coding sessions. These were pretty easy questions to handle in class, but one could imagine that those could stymie a student working alone. When I got one of these questions 1:1 or 2:1 during the pair-programming/live-coding, I made sure I answered the question for the whole class, too. These were questions about the fundamental nature of how Web technologies work (e.g., that the interpreter/compiler is the browser itself, and that jQuery says it’s changing CSS/HTML, but it’s really changing the DOM tree, etc.). It was much better to push the students to do the programming, and thus face these questions, than for the teacher to do the programming. The teacher would have an expert blind spot and may not even think to explain those parts that are invisible and confusing. Miranda Parker suggested a variation of this practice. I could invite students to come up to the front of class to solve the problem, or to explain their solution after the session. That could be helpful in making sure that everyone sees something that works. I would still use live coding in an intro course, when there aren’t invisible other files involved in the task and increasing cognitive load. In classes like Web Design, I will use inverse live coding more in the future."
"250","2013-09-30","2023-03-24","https://computinged.wordpress.com/2013/09/30/education-research-questions-around-live-coding-vygotskian-and-non-constructionist/","I posted my trip report on the Dagstuhl Seminar on Live Coding on Blog@CACM (see the post here). If you don’t want to read the post, check out this video as a fun introduction to live coding: I have a lot more that I want to think through and share about the seminar. I’m doing a series of blog posts this week on live coding to give me an opportunity to think through some of these issues.  I saw four sets of computing education research questions in live coding. These are unusual research questions for me because they’re Vygotskian and non-Constructionist. Live coding is about performance. It’s not an easy task. The live coder has to know their programming language (syntax and semantics) and music improvisation (e.g., including listening to your collaborator and composing to match), and use all that knowledge in real-time. It’s not going to be a task that we start students with, but it may be a task that watching inspires students. Some of my research questions are about what it means to watch the performance of someone else, as opposed to being about students constructing. I’ve written before about the value of lectures, and I really do believe that students can learn from lectures. But not all students learn from lectures, and lectures work only if well-structured. Watching a live coding performance is different — it’s about changing the audience’s affect and framing with respect to coding. Can we change attitudes via a performance? Vygotsky argued that all personal learning is first experienced at a social level. Whatever we learn must first be experienced as an interaction with others. In computing education, we think a lot about students’ first experience programming, but we don’t think much about how a student first sees code and first sees programming. How can you even consider studying a domain whose main activity you have never even seen? What is the role of that coding generating music, with cultural and creative overtones? The social experience introducing computing is important, and that may be something that live code can offer.  Here are four sets of research questions that I see: I’ll end with an image that Sam Aaron showed in his talk at Dagstuhl, a note that he got from a student in his Sonic Pi class: “Thank you for making dull lifeless computers interesting and almost reality.” That captures well the potential of live coding in computing education research — that activity is interesting and the music is real. "
"251","2013-08-15","2023-03-24","https://computinged.wordpress.com/2013/08/15/woman-music-composer-is-even-more-rare-than-women-programmer/","In September, I’m going to Dagstuhl for a workshop on “Collaboration and Learning through Livecoding.” It’s mostly people who “livecode” in the musical sense and put on “AlgoRaves“, but will also include people who talk about “livecoding” in the CS education sense. I’m really looking forward to it. But I was surprised when I looked at the list of attendees: There is only one woman that I can identify by name. I figured that music would be a more welcoming community than computer science, so there would be lots of women coming to livecoding from the music side. I asked my colleague, Jason Freeman, in GT’s School of Music, who told me that music composition is even more male than computer science! He told me about the NYTimes piece (linked below) that talks about the severe gender disparity in music composition. Jason said that GT’s Masters in Music Technology program has had 60-70 graduates so far — and only six women cumulatively (across all years). Why is that? What’s common about music composition and computer programming that both careers would have so few women, when fields like medicine, law, and veterinary science used to be male-dominated but are now more gender-balanced? Kirsten acknowledged that women have had an agonizingly difficult time gaining a creative foothold in classical music, whose repertory is male-dominated to a stifling degree. But, in light of the international renown of such figures as Kaija Saariaho, Unsuk Chin, and Sofia Gubaidulina, she argued that the “woman composer” no longer required special pleading or affirmative action. “Neither art nor artist is served by segregation—even if it’s well intended,” Kirsten wrote. Rather than going out of their way to boost female composers, she suggested, programmers should embrace only works that speak to them strongly, trusting that women will continue to advance. via Alex Ross: Female Composers Edge Forward : The New Yorker."
"252","2020-05-18","2023-03-24","https://computinged.wordpress.com/2020/05/18/happy-80th-birthday-to-alan-kay/","Yesterday was Alan Kay’s 80th birthday. As Ben du Boulay and I wrote in our history of computing education research (see here), Alan and the Learning Research Group group at Xerox PARC asked a question in the 1970’s that has changed how all of us interact with computers, “How would we change computing to make it about learning?” Their efforts to build the Dynabook gave us the desktop user interface that we have today. It’s the greatest public impact of research in computing and learning. Alan has been a mentor to me for years, and he still influences me, such as in the comments he contributes in this blog . I’m grateful for those opportunities to learn from and be inspired by him. I spoke in my SIGCSE 2019 Keynote (see the clip here) about how finding “Personal Dynamic Media” by Adele Goldberg and Alan (see link here) set the direction of my career. I first met Alan when he came to a workshop I helped organized in 1995. Here’s a picture that Ben Shneiderman took and shared with me: That’s Alan on the right, and that’s me in the middle. The guy on the left is Wally Feurzeig, the guy who implemented the first Logo (with Danny Bobrow). Wishing Alan happy days and many more years! "
"253","2016-08-19","2023-03-24","https://computinged.wordpress.com/2016/08/19/where-are-the-python-3-libraries-for-media-computation/","My Blog@CACM post for this month is on JES, the Jython Environment for Students, which at 14 years old and over 10,000 downloads, is probably one of the oldest, most used, and (by some definition) most successful pedagogical Python IDE’s. The SIGCSE Members list recently had a discussion about moving from Python 2 to Python 3. Here’s a description of differences. Some writers asked about MediaComp. With respect to the Media Computation libraries, one wrote: I’m sad about this one, because we use and like this textbook, but I think it’s time to move to Python 3. Is there a compatible library providing the API used in the text? Short answer: No. There are no compatible Media Computation libraries for CPython 2 or 3. We keep trying. The latest attempt to build Media Computation libraries in CPython is here: https://github.com/sportsracer48/mediapy. It doesn’t work on all platforms yet, e.g., I can’t get it to load on MacOS. We have yet to find a set of libraries in Python that work cross-platform identically for sample-level manipulations of sounds. For example, PyGame’s mixer object doesn’t work exactly the same on all platforms (e.g., sampling rates aren’t handled the same on all platforms, so the same code plays different speed output on different platforms). I can do pixel-level manipulations using PIL. We have not yet tried to find libraries from frame manipulations of video (as individual images). I have just downloaded the relevant libraries for Python 3 and plan to explore in the future, but since we can’t make it work yet in Python 2 (which has more mature libraries), I doubt it will work in Python 3. I complained about this problem in my blog in 2011 (see post here). The situation is better in other languages, but not yet in Python. When we did the 4th edition of our Python Media Computation textbook, I looked into what we’d have to change in the book to move to Python 3. There really wasn’t much. We would have to introduce print as a function. We do very little integer division, so we’d have to explain that. The focus in our course (non-technical majors, first course) is at a higher level than the differences between Python 2 and 3. I am confident that, at the end of our course, the majority of our students would understand the differences between Python 2 and 3. As we move more to browser-based IDE’s, I can support either Python 2 or 3 syntax and semantics. Preparing students for industry jobs using exactly CPython 3 is simply not a priority in our course."
"254","2016-09-30","2023-03-24","https://computinged.wordpress.com/2016/09/30/no-really-programming-is-hard-and-cs-flipped-classrooms-are-complicated-iticse-2016-award-winning-papers/","I only recently started digging into the papers from the ITICSE 2016 conference (see Table of Contents link at ACM Digital Library here). There were two papers that caught my attention. First, the best paper award went to one of my former PhD students, Brian Dorn: An Empirical Analysis of Video Viewing Behaviors in Flipped CS1 Courses, by Suzanne L. Dazo, Nicholas R. Stepanek, Robert Fulkerson, and Brian Dorn. Brian has this cool piece of technology where students can view videos, annotate them, be challenged to answer questions from specific places, and have discussions. They used this for teaching a flipped CS1 class, where students were required to watch videos before class and then engage in more active learning opportunities in class. The real trick, as you might imagine and that the paper goes into detail on, is getting students to watch the video. I liked both the techniques for prodding students to watch videos and the fascinating results showing the relationship between watching the videos and learning. ITICSE 2016 recognized two “commended” papers this year. I haven’t found the listing of which papers they were, but I did learn that one of them is Learning to Program is Easy by Andrew Luxton-Reilly. I enjoyed reading the paper and recommend it — even though I disagree with his conclusions, captured in the paper title. He does a good job of exploring the evidence that programming is hard (and even uses this blog as a foil, since I’ve claimed several times that programming is hard), and overall, is a terrific synthesis of a bunch of computing education papers (40 references is a lot for a six page ITICSE paper). His argument that programming is easy has two parts: I see Andrew’s argument as evidence that programming is hard. The problem is that Andrew doesn’t define the target. What level of ability counts as “programming”? I believe that level of ability described by the McCracken Working Group, by the FCS1/SCS1 exams, and by most teachers as the outcomes from CS1 (these are all cited by Andrew’s paper) is the definition of the lowest level of “programming ability.” That it takes two courses to reach that level of ability is what I would call hard. I’ve been reading a terrific book, Proust and the Squid: The Story and Science of the Reading Brain by Maryanne Wolf. It’s the story of how humans invented reading, how we teach reading, and how reading changes our brains (physically and in terms of cognitive function). Oral language is easy. We are literally wired for that. Reading is hard. We are not wired for that, and much of the invention of reading is about inventing how to teach reading. Unless you can teach reading to a significant part of your population, you don’t develop a literate culture, and your written language doesn’t succeed. Much of the invention of written language is about making it easier to learn and teach because learning to read is so hard. Have you ever thought about why our Latin alphabet is ordered? Why do we talk about the “ABC”‘s and sing a song about them? We don’t actually need them to be ordered to read. Ordering the alphabet makes it easier to memorize, and learning to read is a lot about memorization, about drill-and-practice to make the translation of symbols to sounds to words to concepts effortless (or at least, all System 1 in Kahneman terms). This makes it easier, but the task of learning to read and write is still a cognitively complex task that takes a significant amount of time to master. It’s hard. Programming is hard like written language is hard. It’s not possible to program unless you know how to read. Programming is particularly hard because the concepts that we’re mapping to are unfamiliar, are not part of our daily experience. We only see it as easy because we have expert blind-spot. We have already learned these concepts and made those mappings. We have constructed understandings of iteration and conditional execution and variable storage. It is difficult for experts to understand how hard it is to develop those concepts. The evidence of children programming suggests that most children who program don’t have those concepts. I remain unconvinced by Andrew’s argument, but I recommend the paper for a great summary of literature and an interesting read. "
"255","2014-08-18","2023-03-24","https://computinged.wordpress.com/2014/08/18/2014-the-year-the-media-stopped-caring-about-moocs/","Perhaps we succeeded in preventing the MOOCopalypse, despite the claims that “Computer Science MOOCS march forward!” Since the MOOC phenomenon was mostly fed by the media, the decline of interest from the media may be a good sign. The news media’s appetite for MOOC stories has been insatiable. So when the University of Pennsylvania sent an email inviting several hundred education reporters to a seminar on massive open online courses, it anticipated a healthy turnout. But as the catering deadline approached at the National Press Club, in Washington, organizers realized that they had barely enough registered attendees to justify a platter of finger food. “We didn’t have a set thing in mind as to how many would attend, but what we were thinking was 15 to 20 from, let’s call them, ‘established’ media outlets,” said Ron Ozio, director of media relations at Penn. “And we got four.” The university canceled the event. via 2014: The Year the Media Stopped Caring About MOOCs? – Wired Campus – Blogs – The Chronicle of Higher Education."
"256","2013-03-20","2023-03-24","https://computinged.wordpress.com/2013/03/20/why-the-moocopalypse-is-unlikely/","The article from The Chronicle referenced below helped convince me that the MOOCopalypse is unlikely to happen. The MOOCopalypse is the closing of most of American universities (“over half” said one of our campus leaders recently) because of MOOCs. The Chronicle piece is about the professors currently offering MOOCs, and the survey (at left) is only with MOOC providers. The first and greatest challenge to the MOOCopalypse is economic. It’s a huge cost to produce MOOCs — not just on the professors making the MOOCs, but on all their colleagues who have to cover the teaching and service that the MOOC-makers aren’t providing. For what benefit? Most of the MOOC professors talk about the huge impact, about a “one to two to three magnitudes” greater impact. Not clear to me how universities can take that to the bank. Unlike fame from a great result or influential paper, MOOC fame doesn’t obviously lead to greater funding opportunities. There is currently no revenue from MOOCs. It is not reducing the number of students who need to be taught, nor the amount of service needed to run the place. It may be reducing the amount of research (and research funding) that the MOOC providers may have provided. MOOC professors who see that MOOCs may reduce the costs to students are consequently predicting fewer tuition dollars flowing into their institutions. Literally, I do not see that the benefits of MOOCs outweigh their costs. In all, the extra work took a toll. Most respondents said teaching a MOOC distracted them from their normal on-campus duties. “I had almost no time for anything else,” said Geoffrey Hinton, a professor of computer science at the University of Toronto. “My graduate students suffered as a consequence,” he continued. “It’s equivalent to volunteering to supply a textbook for free and to provide one chapter of camera-ready copy every week without fail.” via The Professors Behind the MOOC Hype – Technology – The Chronicle of Higher Education. The second reason why the MOOCopalypse is unlikely is because those predicting the closing of community colleges and state universities do not understand the ecology of these institutions and how they are woven into the fabric of their communities. My third reason why I believe the MOOCopalypse is unlikely is based on a prediction about the technology. I do not believe that MOOCs are going to dramatically increase their completion rates (even with degree options and accreditation schemes like Accredible.com) ,and I do not believe that MOOCs will be successful in teaching the majority of students. Funders of higher education (e.g., parents and legislators) and consumers of higher education products (e.g., employers) are not going accept the closing of state universities in favor of an option that fewer students graduate from and that produces weaker graduates. We are already hearing the pushback against the plans to move community college courses into MOOCs in The Chronicle. I can believe that some universities may close, but I cannot believe that we as a nation would willingly embrace the closing of a not-great but underfunded educational system for a markedly worse one. I’m reminded of the A Nation at Risk report and the claim “If an unfriendly foreign power had attempted to impose on America the mediocre educational performance that exists today, we might well have viewed it as an act of war.” That report was about primary and secondary school education. The MOOCopalypse would be an act of war on higher education."
"257","2015-03-07","2023-03-24","https://computinged.wordpress.com/2015/03/07/sorting-is-boring-computer-science-education-needs-to-join-the-real-world/","Agree that we get it backwards in computing education. We ought to do more with worked examples (a form of “word problems”) — see the argument here. The point of Media Computation has always been to focus on relevance — what the students think that a computer is good for, not what the CS teacher thinks is interesting (see that argument here). There are people who love math for math’s sake and devote themselves to proving 1 + 1 = 2. There are more people, however, who enjoy using math to prescribe medication and build skyscrapers. In elementary school, we use word problems to show why it’s useful to add fractions (ever want to split that blueberry pie?) or find the perimeter of a square. We wait until college, when math majors choose to devote four years towards pure math, to finally set aside the word problems and focus on theory. We do so because math is a valuable skill that is used in so many different professions and contexts, and we don’t want kids to give up on math because they don’t think it’s useful. So, why does computer science start with theory and end with word problems? via Sorting Is Boring: Computer Science Education Needs to Join the Real World | Jessie Duan."
"258","2014-03-21","2023-03-24","https://computinged.wordpress.com/2014/03/21/a-kind-of-worked-examples-for-large-classrooms/","I passed on to the MediaComp-Teach list something I’m trying to do in my class this semester. I had several suggestions to share it with others. It’s based on worked examples and peer instruction. I’m teaching Python MediaComp, first time in 8 years on campus. We have just shy of 300 students, and I have 155 in my lecture. While I’m a big fan of worked examples, the way I’ve used them in small classes of 30-40 won’t work with 155. Here’s what I’m doing this semester. Every Thursday, I distribute a PDF with a bunch of code in sets, like this:  The students are getting 12-20 little programs every Thursday. Most students type them ALL in before lecture Friday morning at 10 am. Then on Friday, I put up PI-like questions like this:  and   Students are required to work on these in groups. I walk around the lecture hall and insist that nobody sit alone. I get lots of questions in the five minutes when everybody’s working away. We don’t have clickers, but I’ve given every student four colored index cards. When I call for votes, everybody holds up the right colored card. Here’s the interesting part — they TALK about the programs. Here’s a question in Piazza with a student’s answer:   The other instructor in the class is also using these, and he says that the students are using them after the Friday lecture as examples to study from and to use in building homework. I’ve had lots of comments about these from students, in office hours and via email. They find them valuable to study. My worked examples aren’t giving them much process. I am getting them to look at lots of programs, type them in, get them running, and think about them. I’m pretty excited about it. Given that I haven’t been in this class in the last 8 years, the class isn’t really “mine” anymore. I’m trying to be sensitive to how much I change about a huge machine (14 TA’s, two instructors…) that I’m only visiting in. But everyone seems into this, and it’s fitting in pretty easily. I have been uploading all of the PDF’s, PPTs, and PY’s at http://home.cc.gatech.edu/mediaComp/95, if you’re interested. (There are some weeks missing because Atlanta actually had some Winter this year.) "
"259","2014-06-26","2023-03-24","https://computinged.wordpress.com/2014/06/26/argument-for-disruptive-innovation-in-universities-is-wrong/","The below-linked article by Jill Lepore is remarkable for its careful dissection of Christensen’s theory of “disruptive innovation.” (Thanks to Shriram Krishnamurthi for the link.) As Lepore points out, Christensen’s theories were referenced often by those promoting MOOCs. I know I was told many times (vehemently, ferociously) that my emphasis on learning, retention, diversity was old-fashioned, and that disrupting the university was important for its own sake, for the sake of innovation. As Lepore says in the quote below, there may be good arguments for MOOCs, but Christensen’s argument from a historical perspective just doesn’t work. (Ian Bogost shared this other critical analysis of Christensen’s theory.) I just finished reading Michael Lewis’s The Big Short, and I see similarities between how Lepore describes reactions to Christensen’s theory of “disruptive innovation” and how Lewis describes the market around synthetic subprime mortgage bond-backed financial instruments. There’s a lot of groupthink going on (and the Wikipedia description is worth reading), with the party line saying, “This is all so great! This is a great way to get rich! We can’t imagine being wrong!” What Lewis points out (most often through the words of Dr. Michael Burry) is that markets work when there is a logic to them and real value underneath. Building financial instruments on top of loans that would never be repaid is ludicrous — it’s literally value-less. Lepore is saying something similar — innovation for its own sake is not necessarily valuable or a path to success, and companies that don’t disruptively innovate can still be valuable and successful. I don’t know enough to critique either Lewis or Lepore, but I do see how the lesson of value over groupthink applies to higher-education. Moving education onto MOOCs just to be disruptive isn’t valuable. We can choose what value proposition for education we want to promote. If we’re choosing that we want to value reaching students who don’t normally get access higher education, that’s a reasonable goal — but if we’re not reaching that goal via MOOCs (as all the evidence suggests), then MOOCs offer no value. If we’re choosing that we want students to learn more, or to improve retention, or to get networking opportunities with fellow students (future leaders), or to provide remedial help to students without good preparation, those are all good value propositions, but MOOCs help with none of them. Both Lewis and Lepore are telling us that Universities will only succeed if they are providing value. MOOCs can only disrupt them if they can provide that value better. No matter what the groupthink says, we should promote those models for higher-education that we can argue (logically and with evidence) support our value proposition. In “The Innovative University,” written with Henry J. Eyring, who used to work at the Monitor Group, a consulting firm co-founded by Michael Porter, Christensen subjected Harvard, a college founded by seventeenth-century theocrats, to his case-study analysis. “Studying the university’s history,” Christensen and Eyring wrote, “will allow us to move beyond the forlorn language of crisis to hopeful and practical strategies for success.” … That doesn’t mean good arguments can’t be made for online education. But there’s nothing factually persuasive in this account of its historical urgency and even inevitability, which relies on a method well outside anything resembling plausible historical analysis. via Jill Lepore: What the Theory of “Disruptive Innovation” Gets Wrong : The New Yorker."
"260","2020-03-23","2023-03-24","https://computinged.wordpress.com/2020/03/23/what-i-learned-from-taking-a-mooc-live-object-programming-in-pharo/","I wrote this post a month ago, before COVID-19 changed how a great many of us teach in higher education. It feels so long ago now. I thought about writing a different post for this week, one about how I’m managing my large (260+) Senior-level User Interface Development class with projects. But I realize — I have a ton of those kinds of posts in my to-read queue now. We’re all being bombarded with advice on how to take our classes on-line. I can’t read it all. I’m sure that you can’t either. So instead, I decided to move this post up in the queue. It’s about taking the students’ perspective. I worry about what’s going to happen to students as we all move into on-line modes. I wrote my Blog@CACM post this week about how the lowest-performing students are the ones who will be most hurt by the move to on-line — you can find that post here. This is a related story: What I learned about MOOCs by taking a MOOC. I received in February my certificate of success for the MOOC I took on Pharo. I have not, in general, been a big fan of MOOCs (among many other posts, here’s one I wrote in 2018 about MOOCs and ethics). This MOOC was perfect for what I needed and wanted. But I’m still not generally a MOOC fan. I’m a long-time Smalltalk programmer and have written or edited a couple of books about Squeak. I’m building software again at the University of Michigan (see the task-specific programming environments I’ve posted about). Pharo is a terrific, modern Smalltalk that I’d like to use. A MOOC on Pharo matched what I needed. I fit the demographics of a student who succeeds at a MOOC — I already know a lot about the material, and I’m looking for specific pieces of information. Pharo has a test-driven development model that is remarkable. You define your classes, then start writing tests, and then you execute them. You can then build your system from the Debugger! You get prompts like, “You’re referencing the instance variable window here, but it doesn’t exist. Shall I create it for you?” I’ve never programmed like that before, and it was great to learn all the support Pharo has for that style of programming. Yes, it was in French. They provide versions of the videos dubbed in English, and the French version can display English captions. I preferred the latter. I had French in undergraduate, which means that I didn’t understand everything, but I understood occasional words which was enough to be able to synchronize between the video and the captions to figure out what was going on. My favorite part of the MOOC was just watching the videos of Stéphane Ducasse programming. He’s a very expert Smalltalk programmer. It’s great seeing how he works and hearing him think aloud while he’s programming. But he’s very, very expert — there were things he did that I had to re-watch in slow motion to figure out, “Okay, how did he do that?” The MOOC was better than just a set of videos. The exercises made sure I actually tried to think about what the videos were saying. But it’s clear that the exercises were not developed by assessment experts. There were lots of fill in the blanks like “Name the class that does X.” Who cares? I can always look that up. It’s a problem that the exercises were developed by Smalltalk experts. Some of the problems were of a form that would be simple, if you knew the right tool or the right option (e.g., “Which of the below is not a message that instances of the class Y understand?”), but I often couldn’t remember or find the right tool. Tools can fall into the experts’ blind spot. Good assessments should scaffold me in figuring out the answer (e.g., worked examples or subgoal labels). I ran into one of the problems that MOOCs suffer — they’re really expensive to make and update. The Pharo MOOC was written for Pharo 6.0. Pharo 8.0 was just released. Not all the packages in the MOOC still work in 8.0, or there are updated versions that aren’t exactly the same as in the videos. There were things in the MOOC that I couldn’t do in modern Pharo. It’s hard and costly to keep a MOOC updated over time. My opinions about MOOCs haven’t changed. They’re a great way for experienced people to get a bit more knowledge. That’s where the Georgia Tech OMSCS works. But I still they that they are a terrible way to help people who need initial knowledge, and they don’t help to broaden participation in computing."
"261","2018-08-03","2023-03-24","https://computinged.wordpress.com/2018/08/03/a-rawlsian-argument-to-provide-computing-education-beyond-moocs/","I’m still not moved, but the moving process is no longer consuming all my waking hours (and some of the hours when I wished I was asleep). We spent hours clearing out stuff from our house that we’d accrued over 25 years while raising three kids. We have a contract on a house in Ann Arbor, and a contract on our house in Decatur. Children have places to live, and most of their stuff is moved out of the house. We have dates for moving our stuff. I can make some time to blog again. Amy Bruckman and I wrote a piece for CACM that appears this month. Amy is an expert in ethical implications of computing, and I worry about MOOCs. Together, we wrote an article about the implications of John Rawls’ definitions of justice for computing education. We used to think MOOCs were going to change higher education and would democratize education. In 2012, a reasonable person might have seen development of MOOCs as a way to bridge social and economic inequities. By creating MOOCs, CS departments could reasonably claim they were using their privilege to provide great benefit to the least-advantaged members of society. Today, we have evidence MOOCs do not work like that. People who take MOOCs already have access to education and tend to be wealthy. … We now know that MOOCs as we have used them so far violate Rawls’ Difference Principle—we are further advantaging the already advantaged. We have an ethical mandate to do better. Note that there’s a typo in the CACM article: MOOC participants are .45 standard deviations wealthier than the average, not 45 standard deviations. You can find the whole article here: Providing Equitable Access to Computing Education It’s a particularly important article for me since it’s my first publication with a University of Michigan byline."
"262","2018-02-05","2023-03-24","https://computinged.wordpress.com/2018/02/05/the-purpose-of-education-is-hope-contrasting-the-lost-einsteins-and-kennett-missouri/","I’ve had two articles bouncing around in my head that offer contrasting views of higher education and for me, of the purpose for computing education. In “Lost Einsteins: The Innovations We’re Missing,” the NYTimes tells us about unequal access to opportunity in the United States. We do not have a meritocracy. Our inventors, patent holders, and innovators overwhelmingly are male, white, and upper income. Two children of equal ability do not get the same access to opportunity, if one is poor, female, or from a minority group. That opportunity includes higher education, access to funding, and the social capital of figuring out how to file a patent or produce an invention. Women, African-Americans, Latinos, Southerners, and low- and middle-income children are far less likely to grow up to become patent holders and inventors. Our society appears to be missing out on most potential inventors from these groups. And these groups together make up most of the American population. The groups also span the political left and right — a reminder that Americans of different tribes have a common interest in attacking inequality.  In “A Dying Town: Here in a corner of Missouri and across America, the lack of a college education has become a public-health crisis,” the Chronicle of Higher Education tells us the story of Kennett, Missouri, a town with little hope and few college degrees. Perhaps it’s correlation, but maybe it’s causation. Only one in 10 adults in Kennett, MO has a four-year degree. The article points out the correlates for attaining a college degree. There are decreased mortality rates with college attendance.  It would be easy to say this is just about being poor, but people who study the phenomenon say it’s not that simple. Yes, having a job — and the paycheck and health insurance that come with it — matters. Those aren’t all that make a difference, however. Better-educated people live in less-polluted areas, trust more in science, and don’t as frequently engage in risky behaviors. Have a college degree and you’re more likely to wear a seat belt and change the batteries in your smoke alarm. Both of them are sad stories. I’m struck by the differences in the desired goal in each. In “Lost Einsteins,” we are told about the innovations and inventions we all are missing out on, because access to opportunity (including higher education) is so biased. In “A Dying Town,” we’re told that everyone need access to the opportunity for higher education. In Kennett, MO, a college degree means hope, and hope means life — literally. In “Lost Einsteins,” opportunities like higher education are about creating inventors and innovators. In “A Dying Town,” opportunities like higher education are about improving quality and length of life. Contrast these perspectives as being like coaching a sports champion and providing public health. I made a similar contrast in my book Learner-Centered Design of Computing Education in how we think about computing education. Many CS teachers are trying to produce innovators, inventors, champions, and Tech heroes — they want their students to go to the great Tech companies, or invent the next must-have app, or start a company that will be worth millions if not billions. I argue that we have a much greater need to provide everyone with the computing literacy that they need to be successful in the 21st Century. It is important to coach the champions, but not at the cost of providing the public health that everyone needs. I’m curious about the relationship between college degrees and the health issues in Kennett, MO. I have taught undergraduates for over 25 years. I’ve never taught anyone to wear a seat belt or to change the batteries in their smoke alarms. Where did they learn that? Is it just because they’re smarter after they get the degree? Or were they prone to do those things anyway, because they were the kind that sought out higher education? I don’t know, but if it’s causal, we have to be careful not to lose those important side benefits of a college degree as we downsize higher education. As we get rid of the teachers for the MOOCs, and get rid of the campus for virtual space, we might also get rid of whatever intangibles that lead a college graduate to make the right choices in life, like wearing a seat belt and having a long, healthy, and productive life."
"263","2019-12-05","2023-03-24","https://computinged.wordpress.com/2019/12/05/please-forward-to-high-school-history-teachers-or-students-task-specific-programming-in-social-studies-data-viz/","Hi, We built this tool, DV4L (Data Visualization for Literacy), to help teachers quickly create data visualizations for social study classes. This is currently a minimum viable product (MVP) version of our tool, and we would like to collect your feedback so that we can improve! We would really appreciate it if you could do this by Sunday Dec 8th to meet our class requirements. Feel free to share this with any other teachers or students who would like to try this out. Thank you so much! I have been working with a team of four University of Michigan Computer Science students (in a class with Elliot Soloway) to develop a data visualization tool for history classes. They have a prototype ready for testing, and they need user data for their class by Sunday, December 8. Could you please forward this to any high school (or middle school) history teachers you know? They would also love to get some feedback from high school history students, too. Here are three reasons why I’m excited about this tool. First, the team really listened to us, our history professor collaborator (Tammy Shreiner), and the social studies teachers who gave us feedback on different data visualization tools. One of the students drove 2.5 hours to attend a participatory design session with social studies teachers in October. As an example, there are driving questions for each database, to guide students in what they might inquire about — that’s a specific request from Tammy. Second, this is a tool for history inquiry. Data visualization tools like Vega-Lite and CODAP are terrific. (Readers of this blog know how impressed I am by Vega-Lite.) But they’re not designed for inquiry. As Bob Bain has taught me, historical inquiry starts from two pieces of evidence or two accounts that disagree. This tool is designed to support comparing different pieces of evidence, and maintaining a trace of what you’ve explored. Inquiry is about comparison, not from building a single visualization. Third, this is task-specific programming in a subtle and interesting way. You build visualizations by making choices from pull-down menus on the left. As you find interesting graphs, you save them to the right. When you want to remember what the graph is about, you hover over it and get a textual representation of what pull-down menus generated this graph. I’m arguing that hover text is a program —- it’s a representation of the process for generating that graph, and it serves as a reminder of where you’ve been. It’s a program whose value is in reading it, not executing it. Amy Ko told me once (I’m paraphrasing) that a program is a description of a process for the future. Using a tool is for now. A program represents the future. This program could be executed by the user in the future — set the pop-up menus to the same values, and you’ll get the same visualization. More importantly, the program represents the past and serves as a reminder for what you can do next. Please do pass this around so that our team can get a sense of what’s working and what’s not in this prototype. Thanks!"
"264","2019-09-19","2023-03-24","https://computinged.wordpress.com/2019/09/19/upcoming-nsf-workshops-from-jeff-forbes/","Jeff Forbes has just moved back to the National Science Foundation — great news! He’s asked me to share information on a set of workshops that has just been funded, relevant to this list. People can sign up for the RPP and BPC Departmental Plans workshops now — the rest will have registration information upcoming. BPC Plans Department Workshop Award abstract: https://www.nsf.gov/awardsearch/showAward?AWD_ID=1941413 CISE PIs are encouraged to include meaningful BPC plans in proposals submitted to a subset of CISE’s research programs. Nancy Amato (University of Illinois) is hosting a workshop about the development of departmental BPC plans. The workshop is schedule for Nov 13-15 at Univ of Illinois to bring together teams of 2-3 people/department. Register here. Computing in Undergraduate Education Workshop Three workshops to “spark a national dialogue about the role of computing in undergraduate education.” The workshops will likely be in Chicago, DC, and Denver. These workshops will hopefully inform the community and NSF as we develop programs like CUE. See the award abstract for more information https://www.nsf.gov/awardsearch/showAward?AWD_ID=1944777 CS for All RPP Development workshops http://nnerpp.rice.edu/csforall-workshops/ Career Workshops for Teaching Track Faculty https://www.nsf.gov/awardsearch/showAward?AWD_ID=1933380 Data Science for All: Designing the Successful Inclusion of Data Science in High School Computer Science NY Hall of Science will hold a workshop exploring the potential for including authentic data science curricula and hands-on projects in high school CS courses. https://www.nsf.gov/awardsearch/showAward?AWD_ID=1922898 Women of Color in Tech https://www.nsf.gov/awardsearch/showAward?AWD_ID=1923245 Workshop – BP in STEM, Computer Science and Engineering through improved Financial Literacy https://www.nsf.gov/awardsearch/showAward?AWD_ID=1939739 "
"265","2019-12-09","2023-03-24","https://computinged.wordpress.com/2019/12/09/who-feels-a-sense-of-belonging-in-cs/","One of my favorite papers at ICER 2019 was by Colleen Lewis and her colleagues, and is available on her website. I’ll quote her first: Does a match between a students’ values of helping society and their perception of computing matter? Yes! A mismatch between a students’ goals of helping society and their perception of computing predicts a lower sense of belonging. And students from groups who – on average – are more likely to want to help society (women, Black students, Latinx students, and first-generation college students), this may be particularly problematic! (pdf) I want to expand a bit on that paragraph. I often get the question, “Why aren’t more women and URM students going into CS?” We’re seeing female students and students of color leaving/avoiding CS at many stages, e.g., Barb’s deep analysis of AP CS*. Colleen and her collaborators are giving us one answer. We know that students who have a sense of belonging in computing are more likely to stay in computing. Colleen et al. found that students who found that their values were supported in computing were more likely to feel a sense of belonging. So, if what you want to do with your life matches computing, you’re more likely to stick around in computing. This is the “alignment of goals” and “perceptions of computing” part of the title. Next step: Students from demographic groups underrepresented in computing were more likely to value community and helping society than other students. These are their goals. Do students see that their goals align with their perception of computing? If so, then you have an increased sense of belonging. Colleen and her colleagues found that If the students who valued community perceived that they could use computing to support communal values, then they were more likely to stick around. This result is obviously explanatory. It helps us to understand who stays in computing. It also suggests interventions. Want to retain more under-represented students in your CS classes? Help them to see that they can pursue their values in computing. Help them to update their perceptions so that they see the alignment of their goals with computing goals. But what if you (as the teacher) don’t? This paper suggests future research questions. What if your CS class is entirely de-contextualized and doesn’t say anything about what the students might do with computing? What perceptions do the students bring to the CS class if nobody helps them to see the possibilities in computing? Which student goals align with these perceived goals of computing? We might guess what the answers might be, but it really does call for some explicit research. What are students’ goals and perceptions of computing in most CS classes today? * Check out Barb’s blog at https://cs4all.home.blog/. As I’m writing this, Barb is finishing up the 2019 AP analysis. The gap between white and Black student pass rates on AP CSP is enormous, far larger than the gap on AP CS A. I’m hoping that she has updates there by the time this post appears."
"266","2017-10-09","2023-03-24","https://computinged.wordpress.com/2017/10/09/6-stories-of-failure-to-understand-organizations-and-higher-education-change/","Last month, I had a birthday. It was not one of those big end-with-a-zero birthdays, but it was still notable. I can now get “senior” discounts from my local grocer. That’s something. Coincidentally, this month also begins my 25th year at Georgia Tech. I’ve been reading about failure CV’s, a list of the usually-invisible things that go wrong in an academic’s career. The goal is to show that failure is quite common and that success is often a matter of luck. I’m not sure I can remember all my failed papers and proposals. I can remember a list of failures that relate to both my “senior” age and my years at Georgia Tech. Below is a list of stories where I failed in an organizational context. In each of these, I proposed something that didn’t fly because I didn’t understand the organizational structure of higher education in general and Georgia Tech specifically. This isn’t a comprehensive list. I failed a lot more than this! I’m picking stories that offer lessons I’ve learned about the challenges of making educational initiatives in higher education, especially ones that I expect are useful in other organizations. I’m listing these in roughly chronological order. Short form: Other computing educators may want to try these things. Didn’t work for me, and here’s why. Avoid my mistakes. Entrepreneurial activity in education research often requires organization action or change, like new courses, new degree programs, adopting new teaching practices, or starting to teach a new population. I’ve been successful at some of this, like starting the Media Computation class and offering a variety of learning opportunities through “Georgia Computes!” Think of the stories in this list as startup ideas or business plans that don’t convince venture capitalists. These didn’t take off because I didn’t understand the market or the investors. Side note: I’m also writing this for catharsis. Failures in organizational contexts are more painful than proposal or paper rejections. First, organizational failures are not anonymous — you are associated with the proposal, and you usually get the “no” to your face. Second, they gnaw at me. Could it have gone differently if I’d pitched it differently? To a different person? Maybe I could pitch it today and it would be different? Or is too late because the organization remembers that I already had my shot? About 15 years ago, I wrote a memo proposing a Computer Science Education Research Center. (Yes, I still have it.) We had (and have) great computing education researchers, a large cohort of instructional faculty, and tons of students. The idea was to identify problems in the classrooms, develop solutions collaboratively between tenure-track faculty researchers and instructional faculty, try them out in the classrooms, and then publish and iterate. It was all about using our classrooms and students as a giant design-based research laboratory. I’ve seen this work at places like UCSD, Duke, Stanford, and U. Toronto. It didn’t fly here, for reasons that are obvious in hindsight. The instructional faculty did not want tenure-track faculty telling them how to teach. The tenure-track faculty do not understand everything that it takes to keep huge classrooms running week-after-week, semester-after-semester. What happens when there are disagreements? There would likely be an awkward tension because of power relationships between tenure-track and instructional faculty. The instructional faculty at Georgia Tech’s College of Computing have been overwhelmingly helpful with our Computing Education Research. Between encouraging their students to participate in our experiments, to letting us into their classrooms for observations, our lecturers and instructors support computing education research. I deeply appreciate their support. But it’s too big of an ask to have instructors change their teaching practice, or harder still, to implement an intervention in one semester and deny the intervention to another section of the same class (as a control/comparison). I think it works at UCSD, Duke, Stanford, and U. Toronto because the instructional faculty are the computing education researchers. Changing your own courses for reasons you appreciate and value is different than doing it because researchers in a Center ask it of you. Doing it collaboratively (maybe even using some classes as control/comparisons) can lead to great research. It doesn’t work as well when the change comes from someone(s) other than the teacher. In the end, what I proposed flew in the face of academic freedom. That faculty can teach using the methods that they think is best is a core principal in academic freedom. That’s a big part of what makes this job attractive. With rising numbers of students to teach and too few CS PhD’s becoming academics these days, we need to make the job more attractive, not add more restrictions. During the early years of Georgia Computes!, we realized that preparing more computing teachers was going to be critical to success. Barbara and I were part of a statewide committee to create a computer science teacher endorsement. I wanted Georgia Tech to offer computer science education classes towards certification for teachers with a goal of being a provider for the endorsement. I was particularly eager for us to use on-line learning technologies, so that teachers in other states (maybe even in other countries?) might use this program. I was sure that the name of “Georgia Tech” would help to sell the program to teachers. My Chair (head of my School) told me that it was a bad idea, and he would not support my proposal. His reasoning was simple — we didn’t have a School of Education. Any kind of program that leads to a teaching certification involves a lot of regulation and paperwork. Georgia Tech didn’t have any programs like that. The regulatory and bureaucratic costs would have been totally new and likely large. He was right. Three Universities eventually offered the endorsement in Georgia. All three did it through a collaboration between the Computer Science departments and existing Schools of Education. If your university is already doing teacher certification, adding computer science is a marginal cost. If your university wasn’t, you likely don’t know what you’re getting into. Now that I know more about how different states handle teacher certification, I realize how much of the process is defined by state regulation and legislation. I should have figured out the cost of my proposal before I made it. Several years ago, I became aware of teaching practices in one of our classes that I believed were likely impacting retention of female students (as mentioned in this blog post). I didn’t have any evidence that the practices were impacting retention. I critiqued the practices as an opinion of a researcher who studies diversity in computing education. I wanted to change our teaching practices in introductory CS courses in order to improve retention of women following recommendations of groups like NCWIT. I was unsuccessful. When I first realized that there was a problem, I approached senior tenure-track faculty in my school. I described the practices I was concerned with — and they were unconcerned. The practices I described were pretty common in industry. But what about changing practices, maybe changing industry, trying to make industry more welcoming for women? I was running into a conflict that I’d seen in my faculty workshops. There are five common perspectives on what a teacher should be. I tend to take a “social reform” perspective (let’s use school to change society) or a “developmental” perspective (let’s start from where students are). But the most common teaching perspective among the CS faculty I’ve queried is “apprenticeship” — the job of the CS teacher is to model good software development behavior and to coach students in following those practices. In that perspective, it’s more important to teach current industry practice than to try to change what’s in industry. One perspective is not better than the other. “Apprenticeship” is a valid perspective for teaching CS, and I get the argument. I had lunch with one of our most senior instructors, and I raised my concerns. He told me that he was worried about women going into the Tech industry. He went on to talk about the working conditions and how there were much better jobs for women. I was angry, thinking that he was saying that women couldn’t do these jobs or didn’t belong in Computing. I later reflected on what he said, and realized that my first reaction was wrong. He was having a crisis of conscience, I now believe. Our instructors pay attention to what’s going on at Uber and at Google much more than the average tenure-track faculty. The instructors see their jobs as producing students who will go work in the Tech industry. My colleague was saying that he didn’t want to send women there, given how they’d be treated and what the Tech industry is like. I don’t know what to tell him. When I tell women this story, they often ask, “Who is he to say what women should or shouldn’t do?” Fair response, but being concerned about what students should or shouldn’t do, or even having to decide who belongs and who should be encouraged to leave CS — that’s an occupational hazard of being a CS teacher. They make those decisions every day. The lesson learned from this story is that I didn’t think hard enough about the forces that keep things the way they are, the motivations of the decision-makers. I didn’t think about my market before I pitched my product. In 2014, the Georgia Governor announced that he was making an initiative to push coding in Georgia’s schools (see my blog post here on that announcement). The next year, we had a terrific CS Education faculty candidate. My chair and I came up with an idea. We wanted to ask the Governor to fund an effort to innovate and promote coding in Georgia schools, building on our successful work in “Georgia Computes!” We wanted funding to hire this CS Ed candidate as part of this effort. We drew up a one-page pitch to the Provost, and a draft letter to the Governor (in our Provost’s name) to make the request. Our Dean took these to a face-to-face meeting with the Provost. The next day, my chair and I received a reprimand from the upper administration for contacting the Governor without permission! Somewhere there was a misunderstanding, because we had not contacted anyone in state government. My chair cleared things up with the Provost, and we learned why there was such a strong reaction. I had not realized how sensitive relationships are these days between state universities and state governments. States are providing less funding to their universities. Universities are understandably careful about what they ask for. Georgia Tech desperately needed a new building at the time. The Provost did not want to send mixed signals to the state government. For example, he didn’t want to give them the idea that the coding in Georgia initiative would be preferable to the building they needed. I get it. Relations between state governments and universities are strained. You don’t want a rogue faculty member messing up the priorities, and you certainly have to be careful what you put on the wishlist. I didn’t realize that I was touching on such a sensitive negotiation. Last year, I decided the best chance to get computer science into Georgia’s rural high schools was not Advanced Placement but dual enrollment. I told this story on Blog@CACM. I started the process of building a MOOC that would be equivalent to our CS1315 Media Computation class to offer to Georgia high school students as dual enrollment. We already have distance Calculus offered to rural high schools from Georgia Tech, but that’s delivered via special video links. I wanted to do a MOOC so that it could be more widely available. The head of distance learning said no. MOOCs are expensive to build. We only build them if we can see a way to cover those costs. We couldn’t recoup the costs if we offered the MOOC to high school students. Turns out that the Georgia legislature has capped the amount that universities can charge for dual enrollment tuition, and that amount does not cover Georgia Tech’s costs for MOOC development and hosting. Our head of online learning is trying to get that changed, to get the cap raised. Offering a CS MOOC for dual enrollment under those conditions would be a bad move in that negotiation. I understand the issue. While the OMS CS is famous for being inexpensive, it’s not free. The financial model that we have for online education doesn’t work for high school students, which does have to be essentially free. We are now offering an online MOOC-based CS1 for CS majors, but that was paid for by an external funder. Maybe if I found an external funder, Georgia Tech would be willing to let me develop the MOOC. However, even the new CS1 MOOC is not available to Georgia high school students for dual enrollment. The political issue has not been resolved. The lesson here is (again) that I should have figured out the costs of my proposal before I pitched it. I should have also figured out the politics before we started. A 10 minute conversation with the head of online education would have saved weeks of planning. Last Spring, I got the chance to visit three engineering education programs, all of which have engineering education PhD students. I wondered whether we could build something similar here. There are several efforts on our campus to study STEM education, to be innovative in STEM education, and to evaluate novel interventions. These efforts have graduate students, and it would be great to be able to offer them a graduate certificate or even a degree. I asked the Provost for a meeting to discuss creating a STEM education research graduate certificate or degree. The Provost started the meeting saying that there would never be a degree or academic unit at Georgia Tech with the word “education” in the title. He explained that education research is outside the unique mission of Georgia Tech. There are other education programs in the University System of Georgia. They can do STEM education research. The Georgia Institute of Technology should focus on technological advances. I told my Dean this story, and he gave me new insight into the Provost’s motivations. The Dean thought that “never” was too strong, but he did have a specific criteria about whether to back this kind of an effort. “Which of our peer institutions has a STEM education research graduate certificate?” Georgia Tech (and the College of Computing) is well ranked. You have to be careful with that kind of ranking. You want to innovate, but you don’t want to do things that might make your peers think you’re weakening your research focus. Education research might be perceived as taking resources from technological research. It would be okay to do, if we didn’t go first. I had not really thought through how Deans and Provosts evaluated new programs. They have a sense of mission, and new program proposals are evaluated against that mission. I should have tried to figure out the criteria first, before I made my proposal. After the last story, one of the other Deans kindly reached out me. He told me, “Never is a long time.” Institutions change. Missions evolve. I am a post-Full Professor (as I described here). He suggested that I wait. There will be more opportunities for change later. So what does work for higher education change? There’s another whole blog post to write about how Media Computation, Threads, and Georgia Computes actually worked, but I can generalize as the inverse of the above failures. Before you make a pitch like one of these, think about the motivations of the decision-makers. “It will improve learning” is rarely motivating for a higher-education administrator. “It will improve retention” is also unlikely to win, unless the low retention rate is a cost (e.g., students failing a required class may mean more students re-take the class, which costs in future enrollments). Fixing a known problem, reducing costs, improving stature, bringing in additional resources, and increasing fame — those are motivators for administrators and other higher-education decision-makers. Mitchel Resnick has a new book out on Lifelong Kindergarten (see Amazon link). The interview with him on NPR about the new book is terrific. I particularly like Mitchel’s final quote, and it’s an apt conclusion to these stories: I sometimes describe myself as a short-term pessimist and a long-term optimist. I know how difficult it is to shift systems and mindsets. But I see the needs of societies changing so much, that the kinds of approaches in the book make so much sense, that ultimately we’ll win out. It’s what keeps me going. I’ve dedicated my life to this."
"267","2015-04-20","2023-03-24","https://computinged.wordpress.com/2015/04/20/student-course-evaluations-cant-measure-teachers-knowledge-but-we-could/","It’s that time of year when Deans and Chairs start prodding students and teachers about course evaluations. What do the students think about their courses? What do the students think about their teachers? There is a significant body of evidence that suggests that course evaluations are a stable measure about the teachers themselves. For example, the scores for a teacher are consistent across instantiations of the course over time (see Nira Hartiva’s work). However, they still might not be measuring something that we consider significant about teaching. For example, it’s a mistake to think that student course evaluations tell us what a teacher knows about teaching. The teacher’s pedagogical content knowledge is invisible to the student. The student only sees what the teacher has decided to do to interact with the students. The student can’t see the knowledge that the teacher used in making that choice. Three kinds of knowledge that are particularly relevant to a CS teacher are: Teacher: How many of you students had Python in a previous class? (Most students raise their hands, since it’s the language used in the pre-requisite class.) Teacher: Well, you learned a terrible language. You’ll have to forget everything you know if you want to pass this class. (Every student suffering imposter syndrome at this point decides to drop.) This teacher actually has quite high course evaluation scores — and double the drop rate of every other teacher of that class. Pedagogical content knowledge (PCK) is the key difference between novice and expert teachers, but is invisible to students. This is another reason why student evaluations of teaching (aka, Student Reviews of Instruction (SRI)) are inadequate as measures of teaching quality. They can’t measure a key indicator of teacher expertise. I’ve been wondering how post-secondary teaching might change if we were to take a PCK perspective seriously. The knowledge of good teaching is definable and measurable."
"268","2017-03-15","2023-03-24","https://computinged.wordpress.com/2017/03/15/a-vision-for-the-future-of-engineering-education/","In the last couple of months, I have had the opportunity to speak to groups of Engineering Education Researchers. That doesn’t happen often to me, and I feel very fortunate to get that chance. I was asked to speak about my vision for the future of Engineering Education, from my perspective as a Computing Education Researcher. What I said wasn’t wholly unique–there are Engineering Education Researchers who are already working on some of the items I described. The response suggested that it was at least an interesting vision, so I’m telling the story here in blog form. For readers of this blog who may not be familiar with Engineering Education Research, the Wikipedia page on EER is pretty good. The most useful paper I read is Borrego and and Bernhard’s “The Emergence of Engineering Education Research as an Internationally Connected Field of Inquiry.” I also recommend looking around the Purdue Engineering Education department website, which is the oldest Eng Ed department in the US.  Engineering has had a long relationship with computing. Engineers made computing part of their practice earlier and more pervasively than scientists or mathematicians. I love how this is described in the motion picture Hidden Figures where Octavia Spencer’s character is part of the effort to use computing as soon as possible in the American space program. Engineering educators have made computing part of the learning goals for all of today’s engineering students, again more pervasively than what I can see in science or mathematics programs. Much of my work and my students’ work is about embedding computing education (e.g., Media Computation which embeds computing in the digital media context that students value, or Brian Dorn’s work embedding computing in a graphic design context) and tailoring computing education (e.g., high school CS teachers need something different from software developers). Computing education can be embedded in Engineering classes and tailored for Engineering students, of course. My vision is about embedding and tailoring engineering education. There are three parts to the story below:  In January 2016, President Barack Obama launched the “CS for All” initiative. When he said that he wanted students to be “job-ready,” he wasn’t saying that everyone should be a software engineer. Rather, he was reflecting a modern reality. For every professional software developer, there are four-to-nine end-user-programmers (depending on the study and how you count). Most professionals will likely use some form of programming in the future. That’s an argument for “CS for All.”  We also need Engineering for All. Engineering skills like designing, planning, collaboration on diverse teams, and trouble-shooting are needed across STEM. When I look at bench science, I see the need for engineering — to design, plan, collaborate, debug, and test. Engineering education researchers know a lot about how to teach those skills. I’d love to learn how to inculcate some engineering perspectives in my CS students. When I see Chemical Engineering students designing a plant, or Civil Engineering students designing a bridge, they predict that they made mistakes, and they look for those mistakes. There’s a humility about their process. CS students often run their program once and turn them in. If you write a hundred lines of code, odds are almost 100% that you made errors. How do we get CS students to think that way? Engineering for All is different than what professional engineers do, in the same way that what a high school teacher needs is different than what a professional software developer needs. Both need a mental model of the notional machine. A high school teacher also needs to know how students get that wrong, and probably doesn’t need to know about Scrum or GitHub. I believe that there is a tailored part of engineering education which should be embedded throughout K-16 STEM. The American Society of Engineering Education’s mission is focused on professional engineers, and my proposal does not diminish the importance of that goal. We need more professional engineers, and we need to educate them well. But engineering skills and practices are too important to teach only to the professionals.  Engineering should play a significant role in STEM education policy. Engineering education researchers should own that “E” in STEM. There are many research questions that we have to answer in order to achieve Engineering for All.  The American University (particularly the Land Grant University, developed in the late 1800’s) was supposed to blend the German University focus on research and the British focus on undergraduate education. My favorite history of that story is Larry Cuban’s How Scholars Trumped Teachers, but Michael Crow also tells the story well in his book Designing the New American University. We believed that there were synergies between research and teaching. It’s not clear that that’s true.  Research and teaching have different measures of success and don’t feed directly into one another. Teaching should be measured in terms of student success and at what cost. Cost is always a factor in education. We know from Bloom’s two-sigma 1984 study (and all the follow-ups and replications) that the best education is an individual human tutor for each subject who works with a student to mastery. But we as a society can’t afford that. Everything else we do is a trade-off — we are trying to optimize learning for the cost that we are willing to bear. Research should be measured in terms of impact — on outcomes, on the research community, on society. It’s quite likely that the education research on a given campus doesn’t influence teaching practice on the same campus. I see that in my own work.  We can see the transition for education research idea to impact in teaching practice as an adoption curve. Boyer’s “Scholarship Reconsidered” helps to explain what’s going on and how to support the adoption. There is traditional Scholarship of Discovery, the research that figures out something new. There is Scholarship of Teaching that studies the practice of teaching and learning. Then there’s Scholarship of Application, which takes results from Discovery into something that teachers can use. We can’t expect research to influence teaching without scholars of application. Someone has to take the good ideas and carry them into practice. Someone has to figure out what practitioners want and need and match it to existing research insights. Done well, scholarship of application should also inform researchers about the open research questions, the challenges yet to be faced.  High-quality teaching for engineering education should use the most effective evidence-based teaching methods. Good teachers balance teaching for relevance and motivation with teaching for understanding. This is hard to do well. Students want authenticity. They want project-based learning and design. I was at the University of Michigan as project-based learning for science education was first being developed, and we knew that it very often didn’t work. It’s often too complex and leads to failure, in both the project and the learning. Direct instruction is much more efficient for learning, but misses out on the components that inspire, motivate, and engage students. We have to balance these out. We have to teach for a diverse population of students, which means teaching differently to attract women and members of under-represented groups. In our ICER 2012 paper, we found that encouragement and self-perception of ability are equally important for white and Asian males in terms of intention to persist in computing, but for women and under-represented group students, encouragement matters more than ability in terms of how satisfied they are with computing and intention to persist. This result has been replicated by others. Encouragement of individual students is critical to reach a diverse audience.  An important goal for a first year Engineering program is to explain the relevance of the classes that they’re taking. Larry Cuban tells us that a piece of the British system that got lost by the early 1920’s in the American University was having faculty advisors who would explain how all the classes fit together for a goal. The research on common first year Engineering courses (e.g., merging Physics, Calculus, Engineering in a big 12 credit hour course) shows that they worked because they explained the relevance of courses like Calculus to Engineering students. I know from my work that relevance is critical for retention and transfer. Do students see relevance of first year Engineering programs? Most first year programs emphasize design and team problem-solving. First year Engineering students don’t know what engineers do. When they’re told “This is Engineering” in their first year, do they believe it? Do they cognitively index it as “real Engineering”? Do they remember those experiences and that learning in their 3rd and 4th years when they are in the relevant classes? I hope so, but I don’t know of evidence that shows us that they do.  Engineering education research, like most discipline-based education research (DBER), is focused on education. I see the study of “education” as being about implementation in a formal system. Education is a design discipline, one of Simon’s Sciences of the Artificial. Robert Glaser referred to education as psychology engineering.  We need more research on Engineering Learning. How do students learn engineering skills and practices, even outside of Engineering classes? How do those practices develop, even if it’s STEM learners and teachers using them and not professional engineers? How should we best teach engineering even if it’s not currently feasible? That last part is much of what drives my work these days. We’re learning a lot about how great Parsons Problems are for learning CS. Very few CS classes use them. There are reasons why they don’t (e.g., they’re emphasizing the project side of the education spectrum). I’m figuring out how to teach CS well, even if it’s not feasible in current practice. CS teaching practice will eventually hit a paradigm shift, and I’ll have evidence-based practices to offer. To focus on engineering learning requires work outside the classroom, like Multi-Institutional, Multi-National (MIMN) studies that we use in computing education research, or even laboratory studies. A focus on Engineering Learning creates new opportunities for funding, for audience, and for impact. For example, I could imagine engineering education researchers seeking science education funding to figure out how to teach high school science teachers the engineering that they ought to teach their students — not to introduce engineering, but to make their students better in science.  My vision for engineering education has three parts: (Thanks to Barb Ericson, Beth Simon, Leo Porter, and Wendy Newstetter for advice on drafts of this piece.)"
"269","2015-09-23","2023-03-24","https://computinged.wordpress.com/2015/09/23/different-is-not-lite-a-2002-argument-against-media-computation/","I recently moved offices. In the process of packing and pitching, I found the above editorial from the Georgia Tech student newspaper. Dated September 2002, it urged the faculty in the Liberal Arts, Architecture, and Management Colleges to reject the newfangled Media Computation class that was being proposed. I had heard the argument being made in the editorial before, and continue to hear it today. The argument is that we do our students a disservice if we don’t give them “real” computer science. The editor cited above is arguing that all students at Georgia Tech deserve the same high-quality computer science education. If we don’t give them the “real” thing, if liberal arts and management majors aren’t getting the same thing as CS majors, they are only getting “CS lite.” That phrase “CS lite” gets applied to our BS in Computational Media regularly. (See the blog post where I talk about that.) Which is funny, because all but one of the CS classes that CM majors take are the same ones that CS majors take. Georgia Tech CS majors take many more credit hours than other majors (including CS majors at other institutions), and the CM major has enough CS courses to be ABET accredited as a computing program. So, what’s “lite” about that? Are other schools’ BS in CS programs “Georgia Tech CS lite” because they have fewer credit hours in CS? Media Computation wasn’t lite. It was different. MediaComp didn’t cover everything that the intro course for CS majors did. But the course for CS majors didn’t cover everything that MediaComp did. In fact, after a few years, the CS instructors complained that our CS majors didn’t know about RGB and how to implement photo effects (like how to negate an image, or how to generate grayscale from a color picture) — which non-CS majors did know! Content on media got added to the CS majors classes. Computational Media isn’t CS lite. It’s CS different. The one course that’s different between CS and CM is the required course on computer organization. CS majors take a course based on Patt and Patel’s book. CM majors take a course where they program a Nintendo Gameboy. The courses are not exactly the same, but have a significant overlap. We did a study of the two courses a few years ago and published a journal paper on it (see link here, and article is on my papers page). There was no significant difference in student learning between the two courses. But the CM majors liked their course much more. Now, there are projects on programming the Gameboy in the CS majors classes, too. Different is good. Different is where you invent new things. Some of those new curricular ideas helped CS courses. Some of those different ideas stayed in the CM and MediaComp courses. Those courses serve different populations and different needs. Not all of it was appropriate or useful for CS majors. Just because there is difference doesn’t mean that it’s lite. Do we call mechanical engineering “physics lite”? Or chemical engineering “chemistry lite”? I’m sure that there are people who do, but that’s disparaging to the difference and diminishes the value of exploring different combinations of subject areas. Valuing different combinations with computing is a particularly important idea for computer science, because interdisciplinary computing degrees are the only ones where the percentage of women majors are growing (see RESPECT report here). We should value interdisciplinary courses and programs because it’s good for our students and for diversity. We should not disparage the CS + X perspectives as “CS lite.”"
"270","2014-09-02","2023-03-24","https://computinged.wordpress.com/2014/09/02/the-most-gender-balanced-computing-program-in-the-usa/","Jennifer Whitlow here at the College of Computing at Georgia Tech just posted enrollment statistics about our undergraduate degrees, BS in Computer Science and BS in Computational Media (a joint degree between Computing and the School of Literature, Media, and Communications in our Ivan Allen College of the Liberal Arts). (You can read student impressions about CM here.) We’re now at 1665 undergraduate majors, the largest ever. This is a huge table — click on it to make it bigger.  The gender diversity in the BS in CS is improving significantly — from 9% in 2004, up to 19.91% this year. But it’s the CM major that I find most intriguing. It’s gone from the 25-30% female up to 45.32%. At 45% female, I believe that it may be the most gender-balanced ABET-accredited computing undergraduate major at any US state university. (Private schools with more control over admissions could be higher.) That’s really something — dramatic and important. CM graduates are getting good jobs (in the top starting salaries coming out of Georgia Tech undergrad, well into six figures). My son just graduated with a CM degree in May, and has now started a CS PhD — evidence that the degree is getting respect at CS departments too. But there’s an interesting research question in here, too. CM is shrinking. CM was at its largest in 2010 with 300 majors. Today it has only 214 majors. The number of women in CM has continued to increase every year until this last. It’s obvious what’s going on: we’re losing men.  Computational Media at Georgia Tech may be the only computing program in the country that is wondering, “Where did the men go?” CM is clearly doing the right things to recruit, engage, and retain women. Why are we losing men? What is having a differential impact in terms of gender, that started about 2010? One hypothesis is that it’s because of competition with the BS in CS, and in particular, with our threaded curriculum with threads available like Media and People. But Threads started in 2005, same as the CM major, and CM grew while CS shrank from 2005-2011. While the faculty know from hiring statistics that CS and CM are neck-and-neck in terms of starting salaries and jobs offered, it’s not clear that the students know this. It’s not clear why any competition with CS would suddenly rise in 2010, and then impact men more than women. Another hypothesis is that CM is perceived as being easy — it’s “CS lite.” You can see that perspective in the student comments I linked to earlier. The hypothesis has two parts (a) that CM is perceived as easy, and (b) that men are more dissuaded by a degree being labeled easier than women. Both are empirical questions, and I don’t know the answers to either. If we’re looking for changes in the CM program that might have triggered change, it is true that we recently made CM harder. Two years ago, we found that CM students were struggling too much in graphics, so we added a new requirement: a challenging course in data structures and algorithms — the same one that the CS majors take. CS and CM are virtually identical for the first two years. Did making CM harder drive away men without driving away women? Seems unlikely, but it’s possible. Here’s yet another hypothesis: CM has become “feminized.” See http://brookekroeger.com/the-road-less-rewarded-as-professions-become-female-dominated-status-and-pay-seem-to-slip-now-researchers-are-asking-why-and-turning-up-some-surprising-conclusions/ for some discussion of what happened in psychology as it became female-dominant, a UNESCO report on the feminization of education, or see a more detailed and academic consideration here: https://www.academia.edu/3811483/Gender_work_in_a_Feminized_Profession. When a field becomes feminized, it is perceived as “softer” and less-desirable by men. CM enrollments started declining in 2011, after the percentage of females in CM passed 30%. So here’s this wonderful result, that CM is nearly at gender-parity, with this strange additional observation — men are less interested in CM now. We’d rather have gender balance and stable (or preferably, growing) numbers of both genders. The success of CM is the major story here, and we want to keep women in CM. It’s an interesting question of where the men went. Can we keep the successes of CM, and get men interested, too? Matthew Guzdial, Jane Margolis, and Lecia Barker reviewed earlier drafts of this post and gave me very useful comments that I have incorporated. My thanks to all of them! I did not however use all of their comments, so hold me alone responsible for these comments.  "
"271","2016-05-09","2023-03-24","https://computinged.wordpress.com/2016/05/09/what-should-a-post-full-computing-education-researcher-do-next/","My school chair, Annie Anton (most recently famous for being on a Presidential Commission on Cybersecurity), asked me to think about what I’d like to do, what I’d like to make, and what I’d like to be next — and what are the challenges to those goals. It’s a great exercise for anyone post-full professor. I have no tenure or promotion goals to achieve, but I “am not dead yet.” What comes next? I’ve been privileged to be part of some significant efforts: From “Georgia Computes!” and “Media Computation,” to “ECEP” and our ebooks. Both of my currently-funded NSF projects (ECEP and our Ebooks) end in Fall 2017. So I have to do something else to fund graduate students and to cover the overhead of being faculty in a research university. Below are some of the options that appeal to me. It isn’t really a wish list — there are incompatible activities on this list. This is an exploration of possibilities that particularly appeal to me. Many interesting and worthwhile problems that I might pursue aren’t interesting to me because I don’t think I have any useful leverage on the problem, or the problem is too big to make a useful dent in it.. I’m sharing it as a blog post because it might be a useful starting point for similar reflections for other post-full faculty. The last few weeks, I’ve been part of an NSF Expeditions preliminary proposal around computing education research. It’s been a deeply engaging intellectual activity, and one that I’d like to do more often. It’s been terrific to work with a group of faculty who know computing education research (different emphases, different areas of research, but with a common core literature and research values) to have detailed discussions about what we think is known and what’s important to do next. I see my colleagues around here doing that kind of planning in HCI and in Robotics, and it probably happens in any area with three or more faculty. I used to be a peripheral participant in meetings like that at University of Michigan, when Elliot Soloway, Phyllis Blumenfeld, Joe Krajcik, and Ron Marx were inventing technology-enhanced project-based learning for STEM. We used to have visioning activities like those when Janet Kolodner led the EduTech Institute here at Georgia Tech, but most of those faculty at the heart of the EduTech have moved on. (It’s even hard to find a digital footprint of EduTech today.) You can do that kind of planning if you have several faculty in an area. It’s harder to do with one or two faculty and some students. It’s still hard to grow CER at scale in research-oriented computing departments. How many CER courses can one department offer, and when you hit that limit, what else will the CER faculty teach? Like any new area, it’s hard to explain it to all the other faculty, to get them to appreciate a candidate. It would be great to be part of a Center doing the work that pushes the boundary of what we know and what we know how to do in computing education research. I know some universities that are thinking about building a Center that includes computing education research. Others, aren’t. There is some distrust of STEM Ed research — I once had a senior administrator say that an academic unit focused on STEM education research would happen on his campus “over his dead body.” I’d like to work with others to create significant, impactful projects in CER — the kinds of things that are bigger than what one or two people can do. Like most people in CER, I hope my work has research value in the future, but I don’t expect any of the particular products to last for long. I expect that no curriculum, assessments, tools, or standards that we’re developing for K-12 schools today will still be in schools in 20 years. All of these will have to change dramatically because the students we’ll be teaching, what we think we ought to teach, and how we teach will change. We’re at the very beginning of growth of the field, so now’s (a) when we expect to realize how little we know, and (b) when I hope that decision-makers will start asking, “What do we already know?” That’s a big part of why I wrote the book last year Learner-Centered Design of Computing Education: Research on Computing for Everyone. I wanted to put a signpost to say, “Here’s where we’ve been and where we are now in figuring out how to teach computing to everybody.” I’ve got a few more years left in my career. I’d like to leave something of longterm use for computing education. I’m creating a CS Ed Research class at Georgia Tech, but classes come and go. We created a lot of learning science and technologies classes when we had those faculty in years past, but we can’t even teach all of those courses anymore. We need to create organizations, systems, and programs to sustain computing education. Key to that goal is establishing CER in schools of Education. I would like to be part of that effort. Schools of Education are how we get education reforms to stick around in the United States. We need faculty doing CER in schools of Education. We need computing education in pre-service teacher education. I love the idea of defining introductory computer science classes for teachers. (Hint: “Python or Java?” is completely the wrong question, and not the least because both answers are wrong.) My experience in India has me realizing how little I know about how most of the world’s education systems work (see blog post comparing Indian and US Education contexts). I also realize that computing education is growing all over the world. My years spent at the boundary of computer science and education suggest to me that I might have something to share in those efforts. I was one of the co-founders of the International Computing Education Research (ICER) conference, and that’s the most rigorous CER conference around today. That’s great to have a high-quality conference, but there’s a lot more demand for CER than ICER can meet. The SIGCSE Symposium and ITICSE serve a larger audience than ICER, but are still mostly Western, mostly privileged, and mostly missing most of the world. I’ve recently joined the program committees of both Koli Calling (Finland) and LaTICE (which has mostly Southeastern Asia, but moving to Saudi Arabia this next year and South Africa in two years). I would like to be involved in more international conferences. I want to understand what parts of the challenge of computing education are due to the design of the educational system and context, and what parts are inherent to the complexity of understanding computing. The mechanics of being a participant in an international community are challenging. I’ve used NSF funds to go to ICER and Dagstuhl (in Germany), but that’s dissemination on a grant. How does one fund going to international conferences when it’s less about dissemination and more about scholarly exchange — me learning about their context, and us discussing research issues from different contexts? There probably are mechanisms, but beyond the ones used by a traditional US POP (Plain Ole Professor). I still love to teach Media Computation. Every Spring, I get to teach around 150 non-technical majors about computation. There’s a set curriculum that is mostly programming-focused (about 80% intersection with my book), but I still find space to talk about Alan Turing and Claude Shannon, incompleteness theorem, and how “The Matrix” and “Sin City” were created. Could I become a full-time teaching faculty? I don’t like how they get typically treated (see this blog post), so I don’t think I would want to become teaching track. If I did focus on my teaching, I’d need to do it in a context that values research-based CS teaching methods. I want to be able to say to my colleague teachers, “Did you see what Beth, Leo, and Cynthia are doing with peer-instruction? Or how about what Leo and Dan are doing from the last SIGCSE proceedings? Let’s try that!” The teaching faculty that I know work very hard and care deeply. Especially with today’s enrollments, few of them have the capacity to read CER, too. I know I’d get bored if I couldn’t talk about the research, try to use it, and to extend it with my colleagues. I could hunker down and just do computing education research — no more public policy, no more broadening participation work, only occasional international conferences when we have something big to report. It is so hard to make traction on broadening participation in computing these days — diversity has taken a back-burner in many CS departments because they’re just trying to keep their head above water. There are lots of research questions I’m interested in: I don’t think I’d stop writing in the blog, at least in the forseeable future, for any of these paths. I like to write. The blog gives me an excuse. I hope it provides a service to readers. (Thanks to the friends who gave me comments on earlier drafts of this document! I appreciate all of it!)"
"272","2016-04-20","2023-03-24","https://computinged.wordpress.com/2016/04/20/the-indian-educational-setting-is-completely-different-from-the-us-education-setting/","At LaTICE 2016, I attended a session on teacher professional development. I work at preparing high school CS teachers. I felt like I’d be able to relate to the professional development work. I was wrong. One of the large projects presented at LaTICE 2016 was the T10kT project (see link here) whose goal is to use technology to train 10,000 teachers. What I didn’t realize at first was that the focus is on higher-education teachers, not high school teachers. The only high school outreach activity I learned about at LaTICE 2016 was from the second keynote, on an Informatics Olympiad from Madhavan Mukund (see slides here) which is only for a select group of students. India has 500 universities, and over 42,000 higher education institutions. They have an enormous problem trying to maintain the quality of their higher-education system (see more on the Wikipedia page). They rely heavily on video, because videos can be placed on a CD or USB drive and mailed. The T10kT instructors can’t always rely on Internet access even to higher-education institutions. They can’t expect travel even to regional hubs because many of the faculty can’t travel (due to expense and family obligations).  As can be seen in the slide above, they have a huge number of participants. I asked at the session, “Why?” Why would all these higher-education faculty be interested in training to become better teachers? The answer was that participants get certificates for participating in T10kT, and those certificates do get considered in promotion decisions. That’s significant, and something I wish we had in the US. I tried to get a sense for how many primary and secondary schools there are in India, and found estimates ranging from 740K to 1.3M. Compulsory education was only established in 2010 (goes to age 14), and is not well enforced. I heard estimates that about 50% of school-age children go to school because only enrollment is checked, not attendance. Contrast this with the CS10K effort in the United States. There are about 25-30,000 high schools in the US. Having 10K CS teachers wouldn’t reach every school, but it would make a sizable dent. A goal to get 10K CS teachers in Indian high schools would be laughable. When you increase the number of high schools by two orders of magnitude, 10,000 teachers barely moves the needle. Given the difficulty of access and uncertain Internet, it’s certainly not cheaper to provide professional development in India. They have an enormous shortage of teachers — not just CS. They lack any teachers at all in many schools. The current national focus is on higher-education because the secondary and primary school problems are just so large. Alan Kay has several times encouraged me to think about how to provide educational technology to support students who do not have access to a teacher. I resisted, because I felt that any educational technology was a poor substitute for a real teacher. Now I realize what a privilege it is to have any teacher at all, and how important it is to think about technology-based guided learning for the majority of students worldwide who do not have access to a teacher. How do we do it? How do we design technology-based learning supports for Indian students who may not have access to a teacher? I attended a session on IITBx, the edX-hosted MOOCS developed by IIT-Bombay. I tweeted: #latice2016 Bravo! #iitb MOOCs are made explicitly for India. Advice for US/UK-providers on how to make their MOOCs more useful in India? — Mark Guzdial (@guzdial) April 3, 2016 One of the IIT-Bombay graduate students responded: I believe the ans is to have MOOCs made in India and for India keeping the local context in mind #latice2016 https://t.co/Bs9wLFMGmJ — akothiyal (@akothiyal) April 3, 2016 Here’s the exchange as a screencap, just in case the Twitter feed doesn’t work right above:  I’m sure that Aditi (whose work was described in the previous blog post) is right. Developers in the US can’t expect to build technologies for India and expect them to work, not without involving Indian learners, teachers, and researchers. One of the themes in my book Learner-Centered Design of Computing Education is that motivation is everything in learning, and motivation is tied tightly to notions of identity, community of practice, and context. I learned that I don’t know much about any of those things for India, nor anywhere else in the developing world. The problems are enormous and worth solving, and US researchers and developers have a lot to offer — as collaborators. In the end, it requires understanding on the ground to get the context and motivation right, and nothing works if you don’t get that right."
"273","2016-04-18","2023-03-24","https://computinged.wordpress.com/2016/04/18/latice-2016-in-mumbai-an-exciting-vibrant-conference-with-great-students/","I was at the Learning and Teaching in Computing Education (LaTICE 2016) conference in Mumbai in early April. It was one of my most memorable and thought-provoking trips. I have had few experiences in Asia, and none in India, so I was wide-eyed with amazement most of my time there. (Most of the pictures that I am including in this series of blog posts are mine or come from the LaTICE 2016 gallery.) I was invited to join discussants at the LaTICE Doctoral Consortium on the day before the conference. LaTICE was hosted at IIT-Bombay, and IIT-Bombay is home to the Inter-disciplinary Program in Educational Technology (see link here). The IPD-ET program is an impressive program. Only five years old, it already has 20 PhD students. The lead faculty are Sahana Murthy and Sridhar Iyer who are guiding these students through interesting work. (Below picture shows Sahana with the DC co-chairs, Anders Berglund from Uppsala University and Tony Clear from Auckland University of Technology.) The Doctoral Consortium had students from across India and one from Germany. Not all were IDP-ET students, but most were.  Talking to graduate students was my main activity at LaTICE 2017. Aman Yadav (from Michigan State, in the back of the below picture) and I missed a lot of sessions as we met with groups of students. I don’t think I met all the IDP-ET students, but I met many of them, and wrestled with ideas with them. I was pleased that students didn’t just take me at my word — they asked for explanations and references. (I ripped out half of the pages of my notebook, handing out notes with names of papers and researchers.) I feel grateful for the experience of hearing about so many varied projects and to talk through issues with many students.  I’m going to take my blog writer’s prerogative to talk about some of the IDP-ET students’ work that I’ve been thinking about since I got back. I’m not claiming that this is the best work, and I do offer apologies to the (many!) students whose work I’m not mentioning. These are just the projects that keep popping up in my (still not sleeping correctly) brain. Aditi Kothiyal is interested in how engineers estimate. Every expert engineer does back-of-the-envelope estimation before starting a project. It’s completely natural for them. How does that develop? Can we teach that process to students? Aditi has a paper at the International Conference of the Learning Sciences this year on her studies of how experts do estimation. I find this problem interesting because estimation might be one of those hard-to-transfer higher-order thinking skills OR it could be a rule-of-thumb procedure that could be taught. Shitanshu Mishra is exploring question-posing as a way to encourage knowledge integration. He’s struggling with a fascinating set of issues. Question-posing is a great activity that leads to learning, but is practiced infrequently in classroom, especially by the students who need it the most. Shitanshu has developed a guided process (think the whiteboards in Problem-Based Learning, or classroom rituals in Janet Kolodner’s Learning-By-Design, or Scardamalia & Bereiter’s procedural facilitation) which measurably helps students to pose good questions that encourage students to integrate knowledge. When should he guide students through his question-posing process? Is it important that students use his process on their own? Yogendra Pal is asking a question that is very important in India whose answer may also be useful here in the US: How do you help students who grew up in a non-English language in adapting to English-centric CS? India’s constitution recognizes 22 languages, and has 122 languages spoken by many Indian citizens on a daily basis. Language issues are core to the Indian experience. CS is very English-centric, from the words in our programming languages, to the technical terms that don’t always map to other languages. Yogendra is working with students who only spoke Hindi until they got to University, where they now want to adapt to English, the language of the Tech industry. I wonder if Yogendra’s scaffolding techniques would help children of immigrant families in the US succeed in CS. Rwitajit Majumdar is developing visualizations to track student behavior on questions over time. Originally, he wanted to help teachers get a sense of how their students move towards a correct understanding over multiple questions during Peer Instruction. Now, he’s exploring using his visualizations with MOOC data. I’m interested in his visualizations for our ebooks. He’s trying to solve an important problem. It’s one thing to know that 35% of the students got Problem #1 right, and 75% got (similar) Problem #2 right. But is it the same 25% of students who got both wrong? What percentage of students are getting more right, and are there any that are swapping to more wrong answers? Tracking students across time, across problems is an important problem. Overall, the LaTICE conference was comparable to SIGCSE or ITiCSE. It was single track, though it’s been dual-track at some instances. LaTICE is mostly a practitioner’s conference, with a number of papers saying, “Here’s what I’m doing in my class” without much evaluation. I found even those interesting, because many were set in contexts that were outside my experience. There are some good research papers. And there are some papers that said some things that I felt were outright wrong. But because LaTICE is a small (< 200 attendees, I’d guess) and collegial conference, I had one-on-one conversations with all the authors with whom I disagreed (and many others, as well!) to talk through issues. My keynote was based on my book, Learner-Centered Design of Computing Education: Research on Computing for Everyone. I talked about why it’s important to provide computing education to more than computing majors, and how computing education would have to change for different audiences. Slides are here: http://www.slideshare.net/markguzdial/latice-2016-learnercentered-design-of-computing-education-for-all  The most remarkable part of my trip was simply being in India. I’ve never been any place so crowded, so chaotic, so dirty, and so vibrant. I felt like I took my life in my hands whenever I crossed the street after noon on any day (and given the pedestrian accidents that some conference participants reported seeing, including one possible fatality, I likely was taking a risk). I went out for three runs around Mumbai and across campus (only in the morning when the traffic was manageable) and enjoyed interactions with cows and monkeys. I was shocked at the miles and miles of slums I saw when driving around Mumbai. I got stuck on one side of a major street without any idea how I could possibly get through the crowds and traffic to the other side — on a normal Sunday night. The rich colors of the Indian clothing palette were beautiful, even in the poorest neighborhoods. There was an energy everywhere I went in Mumbai. I’ve not experienced anything like Mumbai before. I certainly have a new sense of my own privilege — about the things I have that I never even noticed until I was somewhere where they are not given. Given that India has 1.2 billion people and the US only has some 320 million, I’m wondering about how I define “normal.”"
"274","2017-10-06","2023-03-24","https://computinged.wordpress.com/2017/10/06/disrupt-this-moocs-and-the-promises-of-technology-by-karen-head/","Over the summer, I read the latest book from my Georgia Tech colleague, Karen Head. Karen taught a MOOC in 2013 to teach freshman composition, as part of a project funded by the Gates Foundation. They wanted to see if MOOCs could be used to meet general education requirements. Karen wrote a terrific series or articles in The Chronicle of Higher Education about the experience (you can see my blog post on her last article in the series here). Her experience is the basis for her new book Disrupt This! (link to Amazon page here). There is an interview with her at Inside Higher Education that I also recommend (see link here). In Disrupt This!, Karen critiques the movement to “disrupt education” with a unique lens. I’m an education researcher, so I tend to argue with MOOC advocates with data (e.g., my blog post in May about how MOOCs don’t serve to decrease income inequality). Karen is an expert in rhetoric. She analyzes two of the books at the heart of the education disruption literature: Clayton Christensen and Henry Eyring’s The Innovative University: Changing the DNA of Higher Education from the Inside Out and Richard DeMillo’s Abelard to Apple: The Fate of American Colleges and Universities. She critiques these two books from the perspective of how they argue — what they say, what they don’t say, and how the choice of each of those is designed to influence the audience. For example, she considers why we like the notion of “disruption.” Disruption appeals to the audience’s desire to be in the vanguard. It is the antidote to complacency, and no one whose career revolves around the objectives of critical thinking and originality—the pillars of scholarship—wants to be accused of that…Discussions of disruptive innovation frequently conflate “is” (or “will be”) and “ought.” In spite of these distinctions, however, writers often shift from making dire warnings to an apparently gleeful endorsement of disruption. This is not unrelated to the frequent use of millenarian or religiously toned language, which often warns against a coming apocalypse and embraces disruption as a cleansing force. Karen is not a luddite. She volunteered to create the Composition MOOC because she wanted to understand the technology. She has high standards and is critical of the technology when it doesn’t meet those standards. She does not suffer gladly the fools who declare the technology or the disruption as “inevitable.” The need for radical change in today’s universities—even if it is accepted that such change is desirable—does not imply that change will inevitably occur. To imply that because the church should have embraced the widespread publication of scripture, modern universities should also embrace the use of MOOCs is simply a weak analogy. Her strongest critique focuses on who these authors are. She argues that the people who are promoting change in education should (at least) have expertise in education. Her book mostly equates expertise with experience. My colleagues and I work to teach faculty about education, to develop their expertise before they enter the classroom (as in this post). I suspect Karen would agree with me about different paths to develop expertise, but she particularly values getting to know students face-to-face. She’s angry that the authors promoting education disruption do not know students. It is a travesty that the conversation about the reform or disruption of higher education is being driven by a small group of individuals who are buffered from exposure to a wide range of students, but who still claim to speak on their behalf and in their interests. Disrupt This! gave me a new way to think about MOOCs and the hype around disruptive technologies in education. I often think in terms of data. Karen shows how to critique the rhetoric — the data are less important if the argument they are supporting is already broken."
"275","2013-09-21","2023-03-24","https://computinged.wordpress.com/2013/09/21/lessons-learned-from-freshmen-oriented-moocs-at-georgia-tech/","Karen Head has finished her series on how well the freshman-composition course fared (quoted and linked below), published in The Chronicle. The stats were disappointing — only about 238 of the approximately 15K students who did the first homework finished the course. That’s even less than the ~10% we saw completing other MOOCs. Georgia Tech also received funding from the Gates Foundation to trial a MOOC approach to a first year of college physics course. I met with Mike Schatz last Friday to talk about his course. The results were pretty similar: 20K students signed up, 3K students completed the first assignment, and only 170 finished. Mike had an advantage that Karen didn’t — there are standardized tests for measuring the physics knowledge he was testing, and he used those tests pre-post. Mike said the completers fell into three categories: those who came in with a lot of physics knowledge and who ended with relatively little gain, those who came in with very little knowledge and made almost no progress, and a group of students who really did learn alot. They don’t know why nor the relative percentages yet. The report from the San Jose State University MOOC experiment with a remedial mathematics course came out with the argument: The researchers also say, perhaps unsurprisingly, that what mattered most was how hard students worked. “Measures of student effort trump all other variables tested for their relationships to student success,” they write, “including demographic descriptions of the students, course subject matter, and student use of support services.” It’s not surprising, but it is relevant. Students need to make effort to learn. New college students, especially first generation college students (i.e., whose parents have never gone to college), may not know how much effort is needed. Who will be most effective at communicating that message about effort and motivating that effort — a video of a professor, or an in-person professor who might even learn your name? As Gary May, our Dean of Engineering, recently wrote in an op-ed essay published in Inside Higher Ed, “The prospect of MOOCs replacing the physical college campus for undergraduates is dubious at best. Other target audiences are likely better-suited for MOOCs.” On the freshman-composition MOOC, Karen Head writes: No, the course was not a success. Of course, the data are problematic: Many people have observed that MOOCs often have terrible retention rates, but is retention an accurate measure of success? We had 21,934 students enrolled, 14,771 of whom were active in the course. Our 26 lecture videos were viewed 95,631 times. Students submitted work for evaluation 2,942 times and completed 19,571 peer assessments (the means by which their writing was evaluated). However, only 238 students received a completion certificate—meaning that they completed all assignments and received satisfactory scores. Our team is now investigating why so few students completed the course, but we have some hypotheses. For one thing, students who did not complete all three major assignments could not pass the course. Many struggled with technology, especially in the final assignment, in which they were asked to create a video presentation based on a personal philosophy or belief. Some students, for privacy and cultural reasons, chose not to complete that assignment, even when we changed the guidelines to require only an audio presentation with visual elements. There were other students who joined the course after the second week; we cautioned them that they would not be able to pass it because there was no mechanism for doing peer review after an assignment’s due date had passed. via Lessons Learned From a Freshman-Composition MOOC – Wired Campus – The Chronicle of Higher Education."
"276","2013-03-18","2023-03-24","https://computinged.wordpress.com/2013/03/18/of-moocs-and-mousetraps-making-curricular-decisions-in-massive-courses/","Karen Head is writing occasional blog posts about her efforts to teach introductory composition in a MOOC. I appreciate getting a chance to see into the design choices she needs to make to fit into the context of a massive on-line course. From the beginning we have had logistical issues getting a large group together on a regular basis. After only three meetings, we decided to break into two main subgroups: one focusing on curricular decisions and the other on technical ones. My partner in this project, Rebecca Burnett (director of our Writing and Communication Program), and I attend all meetings to ensure that the two sides remain coordinated. Some of the key curricular decisions we needed to make immediately were the length and theme of the course, expected student commitment, types of assignments, and appropriate instructional approaches. We decided the course should last eight weeks rather than six to create a framework for students to understand the goals and approaches, and to allow time for more end-of-course reflection. We also decided to have a single “build on” main assignment; each week students will learn new skills and apply these to the continuing project. For our theme, which lends itself to our multimodal course goals, we will have students write and speak about a principle that guides their everyday lives. via Of MOOCs and Mousetraps – Wired Campus – The Chronicle of Higher Education."
"277","2018-03-16","2023-03-24","https://computinged.wordpress.com/2018/03/16/how-cs-differs-from-other-stem-disciplines-varying-effects-of-subgoal-labeled-expository-text-in-programming-chemistry-and-statistics/","My colleagues Lauren Margulieux and Richard Catrambone (with Laura M. Schaeﬀer) have a new journal article out that I find fascinating. Lauren, you might recall, was a student of Richard’s who applied subgoal labeling to programming (see the post about her original ICER paper) and worked with Briana Morrison on several experiments that applied subgoal labeling to textual programming and Parson’s problems (see posts on Lauren’s defense and Briana’s). In this new paper (see link here), they contrast subgoal labels across three different domains: Chemistry, statistics, and computer science (explicitly, programming). I’ve been writing lately about how learning programming differs from learning other STEM disciplines (see this post here, for example). So, I was intrigued to see this paper. The paper contrasts subgoal labeled expository text (e.g., saying explicitly as a heading Compute Average Frequency) and subgoal labeled worked examples (e.g., saying Compute Average Frequency then showing the equation and the values and the computed result). I’ll jump to the punchline with the table that summarizes the result:  Programming has high complexity. Students learned best when they had both subgoal labeled text and subgoal labeled worked examples. Either one alone didn’t cut it. In Statistics, subgoal labeled examples are pretty important, but the subgoal labeled text doesn’t help much. In Chemistry, both the text and the worked examples improve performance, and there’s a benefit to having both. That’s an argument that Chemistry is more complex than Statistics, but less complex than Programming. The result is fascinating, for two reasons. First, it gives us a way to empirically order the complexity of learning in these disciplines. Second, it gives us more reason for using subgoal labels in programming instruction — students just won’t learn as well without it. "
"278","2018-01-19","2023-03-24","https://computinged.wordpress.com/2018/01/19/what-does-it-mean-for-computer-science-to-be-harder-to-learn-than-other-stem-subjects/","I made an argument in my Blog@CACM Post for this month that “Learning Computer Science is Different than Learning Other STEM Disciplines,” and on Twitter, I explicitly added “It’s harder.” In my Blog@CACM post, I thought it was a no-brainer that CS is harder: Our infrastructure for teaching CS is younger, smaller, and weaker (CS is so new, and we don’t have the decades of experience to figure out how to do it well yet.) We don’t realize how hard learning to program is (The fact that the Rainfall problem seems easy, but it’s clearly not easy, means that CS teachers don’t know how to estimate yet what’s hard for students, so our classes are probably harder than we mean them to be.) CS is so valuable that it changes the affective components of learning (Classes that are stuffed full of both CS majors and non-majors means that issues of self-efficacy, motivation, and belonging are much bigger in CS than in other STEM disciplines.) The push back was really interesting. People pointed out that they took CS classes and math classes, or CS and physics, and CS seemed easy in comparison. They may be right, but that’s self-report on introspection by people who succeeded at both classes. My point is that we are probably flunking out (or students are giving up, or opting out) of CS at much higher rates than any other STEM subject, because of the reasons I give. We’re really using two different measures of “harder” — harder to succeed, or harder in retrospect once succeeded. I only have a qualitative argument for “It’s harder.” I’m not sure how one would even evaluate the point empirically. Any suggestions? How could we measure when one subject is harder than another? It’s not an important question to answer which is harder, CS vs math, or CS vs physics. A much more important and supportable claim is that CS “is harder” than it needs to be. We have a lot of extraneous complexity and cognitive load in learning CS."
"279","2019-08-26","2023-03-24","https://computinged.wordpress.com/2019/08/26/the-temptation-in-computing-education-research-to-claim-language-independence/","My CACM blog post this month (see link here) is a retraction of the term “language-independent” in our work on the FCS1 and SCS1: There is no language independence here. The FCS1 and SCS1 are multi-lingual which is a remarkable achievement. We might also call them pseudcode-based assessments, which is how they can be multi-lingual, but since a pseudocode-based test isn’t necessarily validated across other languages, “multi-lingual” is a stronger claim than “pseudocode-based.” We do not cover all of any of those languages (Java, MATLAB, or Python), but we do cover the subset most often appearing in an introductory CS course. They are clearly not language independent. In the great design space of programming languages, Java, MATLAB, and Python cluster together pretty closely. There are much more different programming languages than these — I’m sure it’ll take any reader here just a few moments to generate a half-dozen candidates whose learners would score poorly on the FCS1 and SCS1, from Scratch to Haskell to Prolog. I only vaguely remember the discussion about using the term “language independence” with Allison many years ago. I remember her asking me if we should worry about the (relatively few) classes that used languages other than Python, MATLAB, and Java. I think I told her she needed to graduate. I judged from the perspective of what was being published at the SIGCSE Symposium — Python, MATLAB, and Java was “language independent” enough for the paper to be seen as valuable to SIGCSE reviewers. I don’t remember the details, but I’ll accept the blame for the decision to call FCS1 (and SCS1 later) language independent. That was a long time ago, before the International Computing Education Research Conference (ICER) was invented. Since then, we have a computing education research community that aims to answer questions about how people learn computing — period. We’re not just about undergraduate introductory computer science classes. Even at the undergraduate level, we should study the classes (no matter how few) doing something different to see what’s powerful and interesting about them. We should explicitly be exploring unusual (even purpose-invented) languages to understand more of the interaction between programming languages and human cognition. An insightful PPIG paper from Clayton Lewis (see link here) was recently circulated on Twitter (see tweet) that makes great points about the complexity of measuring that interaction: The PPIG community should be proud that cognitive dimensions analysis emerged from the work of people in its ranks, Thomas Green, Marian Petre, Alan Blackwell, and others. We should be skeptical of calls to replace its use with A-B trials or other quantitative methods that cannot cope with the complexity of the language design landscape. When results of A-B trials and similar studies are presented, we should diplomatically ask for the mechanisms that are involved to be described. Colleagues who present the results of such trials should be prepared to respond to this request, so that the generalizability of their results can be assessed. We should not be driven by what’s in classrooms today (see previous post making that argument). We should hold ourselves to a higher standard. Our goal is to create a lasting record of exploration and research for a research community. That’s why it’s past time for this retraction. "
"280","2019-08-05","2023-03-24","https://computinged.wordpress.com/2019/08/05/lets-think-more-broadly-about-computing-education-research-questions-about-alternative-futures/","At the Dagstuhl Seminar in July, we spent the last morning going broad. We posed three questions for the participants. Imagine that Gates funds a CS teacher in every secondary school in the world, but requires all new languages to be taught (not Java, not Python, not R, not even Racket). “They’re all cultural colonialism! We have to start over!” Says Bill. We have five years to get ready for this. What should we do? Imagine that Oracle has been found guilty of some heinous crime, that they stole some critical part of the JVM, whatever. The company goes bankrupt, and installation of Java on publicly-owned computers is outlawed in most countries. How do we recover CS Ed? Five years from now, we’ll discover that Google has secretly been moving all of their infrastructure to Racket, Microsoft to Scala, and Amazon to Haskell (or swap those around). The CS Ed world is shocked — they have been preparing students for the wrong languages for these plum jobs! What do we do now? How do you redesign undergrad ed when it’s not about C++/#/Java/Python? We got some pushback. “That’s ridiculous. That’s not at all possible.” (I found amusing the description of we organizers as “Willy Wonka.”) Or, “Our goal should be to produce good programmers for industry — PERIOD!” Those are reasonable positions, but they should be explicitly selected positions. The point of these questions is to consider our preconceptions, values, and goals. All computing education researchers (strike that: all researchers) should be thinking about alternative futures. What are we trying to change and why? In the end, our goal is to have impact. We have to think about what we are trying to preserve (and it’s okay for “producing industry programmers” to be a preserved goal) and what we are trying to change."
"281","2019-04-08","2023-03-24","https://computinged.wordpress.com/2019/04/08/why-we-should-explore-more-than-one-programming-language-across-the-curriculum/","Ben duBoulay and I wrote the history chapter for the new Cambridge University Press Handbook of Computing Education Research (mentioned here). A common theme has been the search for the “best language” to learn programming. We see that from the 1960’s on up. One of the criteria for “best language” is one that could be used across the curriculum, in different classes and for different problems. I was reminded of that when we recently ran a participatory design session with social science teachers. We heard the message that they want the same language to use in history, English, mathematics, and science. The closest we ever got was Logo. But now, I’m not sure that that’s the right goal, for two reasons: The key is to make the languages simple enough that there’s little overhead in learning them. As one of the teachers in our study put it, “one step up from Excel.” Scratch fits that goal in terms of usability, but I don’t think it’s a one-size-fits-all solution to computing across the curriculum. It doesn’t meet the needs of all tasks and domains in the school curriculum. Rather, we should explore some multi-lingual solutions, with some task-specific programming languages, and think hard about creating transfer between them. The single language solution makes sense if the language is hard to learn. You don’t want to pay that effort more than once. But if the language fits the domain and task, learning time can be minimal — and if well-designed, the part that you have to learn transfers to other languages. "
"282","2019-07-29","2023-03-24","https://computinged.wordpress.com/2019/07/29/why-high-school-cs-teachers-might-avoid-teaching-cs-study-about-uk-cas/","Fascinating blog post from Laura Larke that helps to answer the question: Why isn’t high school computing growing in England? The Roehampton Report (pre-release of the 2019 data available here) has tracked the state of computing education in England, which the authors describe as a “steep decline.” Laura starts her blog post with the provocative question “How does industry’s participation in the creation of education policy impact upon what happens in the classroom?” She describes teachers who aim to protect their students’ interests — giving them what they really need, and making judgments about where to allocate scarce classroom time. What I found were teachers acting as gatekeepers to their respective classrooms, modifying or rejecting outright a curriculum that clashed with local, professional knowledge (Foucault, 1980) of what was best for their young students. Instead, they were teaching digital skills that they believed to be more relevant (such as e-safety, touch typing, word processing and search skills) than the computer-science-centric content of the national curriculum, as well as prioritising other subjects (such as English and maths, science, art, religious education) that they considered equally important and which competed for limited class time. Do we see similar issues in US classrooms? It is certainly the case that the tech industry is painted in the press as driving the effort to provide CS for All. Adam Michlin shared this remarkable article on Facebook, “(Florida) Gov. DeSantis okay with substituting computer science over traditional math and science classes required for graduation.” Florida is promoting CS as a replacement for physics or pre-calculus in the high school curriculum. “I took classes that I enjoyed…like physics. Other than trying to keep my kids from falling down the stairs in the Governor’s mansion I don’t know how much I deal with physics daily,” the governor said. The article highlights the role of the tech industry in supporting this bill. Several top state lawmakers attended as well as a representative from Code.org, a Seattle-based nonprofit that works to expand computer science in schools. Lobbyists representing Code.org in Tallahassee advocated for HB 7071, which includes computer science initiatives and other efforts. That’s the bill DeSantis is reviewing. A Microsoft Corporation representative also attended the DeSantis event. Microsoft also had lobbyists in Tallahassee during the session, advocating for computer science and other issues. The US and England have different cultures. Laura’s findings do not automatically map to the US. I’m particularly curious if US teachers are similarly more dubious about the value of CS curricula if it’s perceived as a tech industry ploy. "
"283","2013-07-25","2023-03-24","https://computinged.wordpress.com/2013/07/25/robots-spatial-ability-and-learning-to-program/","Stuart Wray has a remarkable blog that I recommend to CS teachers. He shares his innovations in teaching, and grounds them in his exploration of the literature into the psychology of programming. The quote and link below is an excellent example, where his explanation led to me a paper I’m eager to dive into. Stuart has built an interesting warm-up activity for his class that involves robots. What I’m most intrigued by is his explanation for why it works as it does. The paper that he cites by Jones and Burnett is not one that I’d seen before, but it explores an idea that I’ve been interested in for awhile, ever since I discovered the Spatial Intelligence and Learning Center: Is spatial ability a pre-requisite for learning in computer science? And if so, can we teach it explicitly to improve CS learning? The game is quite fun and doesn’t take very long to play — usually around a quarter of an hour or less. It’s almost always quite close at the end, because of course it’s a race between the last robot in each team. There’s plenty of opportunity for delaying tactics and clever blocking moves near the exit by the team which is behind, provided they don’t just individually run for the exit as fast as possible. But turning back to the idea from James Randi, how does this game work? It seems from my experience to be doing something useful, but how does it really work as an opening routine for a programming class? Perhaps first of all, I think it lets me give the impression to the students that the rest of the class might be fun. Lots of students don’t seem to like the idea of programming, so perhaps playing a team game like this at the start of the class surprises them into giving it a second chance. I think also that there is an element of “sizing the audience up” — it’s a way to see how the students interact with one another, to see who is retiring and who is bold, who is methodical and who is careless. The people who like clever tricks in the game seem often to be the people who like clever tricks in programming. There is also some evidence that facility with mental rotation is correlated with programming ability. (See Spatial ability and learning to program by Sue Jones and Gary Burnett in Human Technology, vol.4(1), May 2008, pp.47-61.) To the extent that this is true, I might be getting a hint about who will have trouble with programming from seeing who has trouble making their robot turn the correct direction. via On Food and Coding: The Robots Game."
"284","2021-06-28","2023-03-24","https://computinged.wordpress.com/2021/06/28/rules-work-as-a-way-of-communicating-computation-at-a-mechanistic-level-without-teaching-programming/","Sometimes as a reviewer, you get to read a paper that you wish was published immediately. That’s how I felt when I got to review Eliane Wiese and Marcia Linn’s paper “It Must Include Rules”: Middle School Students’ Computational Thinking with Computer Models in Science. It was published in ACM TOCHI in April (see link here). Eliane and Marcia offer a solution to a problem that teachers face when they want to teach about computational models, but they don’t want to teach programming. How do you get students to reason about the models underlying the simulations they’re exploring without talking about program code? And if you do talk about some notation, some representation of the model, what can you expect students to reason about without teaching them the notation or representation first? Eliane and Marcia show that rules work. They have students interact with simulations, and then show them rules that might be in that model. Like in a simulation of light, photosynthesis, and glucose levels in plants, a rule might be: When light is on, total glucose made increases.. Eliane and Marcia show rules to students and ask “Are these in the model?” In their abstract, they write: In our sample, 99% of students identified at least one key rule underlying a model, but only 14% identified all key rules; 65% believed that model rules can contradict; and 98% could not distinguish between emergent patterns and behaviors that directly resulted from model rules. Despite these misconceptions, compared to the “typical” questions about the science content alone, questions about model rules elicited deeper science thinking, with 2–10 times more responses including reasoning about scientific mechanisms. These results suggest that incorporating computational thinking instruction into middle school science courses might yield deeper learning and more precise assessments around scientific models. The misconceptions don’t bother me. Students will have misconceptions about models — that’s part of teaching science with models. What’s fascinating to me is that the rules worked. Students reasoned mechanistically about the computational models. My favorite result in this study was where they asked students to predict what would happen if they added a new rule to the model. Basically, “What happens if we change the program like this?” Students were way better at playing these what-if games if the question was posed as a rule. Quoting from the paper: Asking students to make predictions about the implementation of incorrect rules led to more scientific reasoning about mechanisms than simply asking students about a causal relationship portrayed in a correct model. This pattern was evident for both model contexts, with twice as many workgroups proposing mechanisms with the New Rule question compared to the Typical question for Global Climate (29% vs. 14%) and ten times as many workgroups doing so for Chemical Reactions (53% vs. 5%). Students can reason about computational models described as rules, even without instruction on rules. That’s a terrific result. It’s one that I’m thinking about how to use in my task-specific programming languages. Now, this isn’t saying that students can’t reason with function or with imperative statements. Maybe functional or procedural programming paradigms would work, too. Eliane and Marcia have found one approach that does work. They offer us a way to integrate computational modeling into science education, with real discussion of the mechanism of the models, without teaching programming first."
"285","2014-02-25","2023-03-24","https://computinged.wordpress.com/2014/02/25/massachusetts-prepares-k12-cs-education-standards/","Thanks to Ben Shapiro for the pointer. My ECEP colleague, Rick Adrion, is part of MassCAN. Massachusetts has just decided to develop K-12 standards that will include computer science. These discussions have led to a vision of expanded computing education opportunities for all students. To realize this vision, the Department will be collaborating with MassCAN on the development of voluntary Computer Science Standards for Massachusetts schools. The current Technology Literacy standards will be analyzed and updated and a decision will be made whether to fold Technology Literacy standards into a single document with computer science (Digital Literacy and Computer Science Standards), or to produce two separate documents. The standards development committee plans to present draft standards to the Board of Elementary and Secondary Education about a year from now, in winter 2014-15. Given the significant education initiatives already underway, I would recommend putting the standards out for public comment no earlier than fall 2015, and would ask the Board to vote on adopting the standards no earlier than spring 2016. via Briefing for the February 24, 2014 Special Meeting and the February 25, 2014 Regular Meeting – Massachusetts Board of Elementary and Secondary Education."
"286","2016-10-14","2023-03-24","https://computinged.wordpress.com/2016/10/14/what-science-literacy-really-means-concepts-contexts-and-consequences/","I’ve only just started reading this new report from National Academies Press, but am finding it useful and interesting. What do we mean when we say that we want people to be scientifically literate? It’s an important question to ask when considering the goal of computational literacy. Science is a way of knowing about the world. At once a process, a product, and an institution, science enables people to both engage in the construction of new knowledge as well as use information to achieve desired ends. Access to science—whether using knowledge or creating it—necessitates some level of familiarity with the enterprise and practice of science: we refer to this as science literacy. Science literacy is desirable not only for individuals, but also for the health and well-being of communities and society. More than just basic knowledge of science facts, contemporary definitions of science literacy have expanded to include understandings of scientific processes and practices, familiarity with how science and scientists work, a capacity to weigh and evaluate the products of science, and an ability to engage in civic decisions about the value of science. Although science literacy has traditionally been seen as the responsibility of individuals, individuals are nested within communities that are nested within societies—and, as a result, individual science literacy is limited or enhanced by the circumstances of that nesting. Science Literacy studies the role of science literacy in public support of science. This report synthesizes the available research literature on science literacy, makes recommendations on the need to improve the understanding of science and scientific research in the United States, and considers the relationship between scientific literacy and support for and use of science and research. Source: Science Literacy: Concepts, Contexts, and Consequences | The National Academies Press"
"287","2016-04-11","2023-03-24","https://computinged.wordpress.com/2016/04/11/treating-computing-as-a-real-literacy-if-learning-to-code-were-like-learning-to-write/","I like what Amy Ko is doing in this blog post. She imagines if computing literacy were integrated into our daily lives, how would we introduce computing to children, how would we talk about it to our children? I don’t buy the focus in this post on tokenizing and textual languages. I would hope that children would talk about feedback, and iteration, and how to build conditionals that tested what you wanted (e.g., “How would you know if that was true?” — which might lead to some great discussions about truth and experiments and science, all by itself!). The point of a piece like Amy’s is to have these discussions, to talk about what we’d integrate and where. I’m reminded of Mike Horn’s work on computational sticker books (see link here). Mike asks the question, “If computational literacy were integrated into our daily lives, how would parent and child do computation while reading a book at bedtime?” Mike’s answer is computational sticker books. Doesn’t matter whether you agree with Mike about sticker books, the point is to wonder what a future world of computational integration might be like. If learning to code were like learning to write, we’d next teach children how to read short books, giving them programs to read, exposing them to all of the computational possibilities of the language they were learning. “Madison, what did you choose for your book project this month? Oh, an Instagram post indexing algorithm, interesting! Are you liking it? What’s your favorite idiom?” If learning to code were like learning to write, we’d ask children to start writing sentences, creating simple statements that accomplish small tasks. “Daniel, we keep forgetting to turn the light off in the garage. Can you log into the IoT portal and write a rule that turns it off every night at 9 pm?” Source: If learning to code were like learning to write… | Bits and Behavior"
"288","2019-02-28","2023-03-24","https://computinged.wordpress.com/2019/02/28/sigcse-2019-papers-from-the-blogosphere/","I’m gathering blog posts from others about their SIGCSE 2019 papers. Here’s what I’ve got: https://katiethecurious.com/2019/02/24/new-paper-debugging-lt/ Rich, K. M., Strickland, C., Binkowski, T. A., & Franklin, D. (2019). A K – 8 debugging learning trajectory derived from research literature. In Proceedings of the 2019 ACM SIGCSE Technical Symposium on Computer Science Education (pp. 745–751). New York: ACM. http://www.shuchigrover.com/countdown-to-the-50th-sigcse-in-minneapolis/ (Paper) Non-Programming Activities for Engagement with Foundational Concepts in Introductory Programming (Shuchi Grover, Nicholas Jackiw, & Patrik Lundh) | Mar 2, 12 – 12:30pm, Hyatt: Greenway B/C (2nd floor) (Poster) Integrating Computational Thinking in Informal and Formal Science and Math Activities for Preschool Learners (Shuchi Grover, Ximena Dominguez, Danae Kamdar, Phil Vahey, Savitha Moorthy, Sara Gracely & Ken Rafanan) | Mar 1, 10am-noon, Hyatt Exhibit Hall (Demo) Integrating Computational Modeling in K-12 STEM Classrooms (Gautam Biswas, Nicole Hutchins, Akos Ledeczi, Shuchi Grover & Satabdi Basu) | Feb 28, 10-10:45am, Hyatt Exhibit Hall (Lightning Talk): Thinking about Computational Thinking: Lessons from Education Research (Shuchi Grover) | Feb 28, 4pm, Hyatt Lake Bemidji (4th Floor) First Things First: Providing Metacognitive Scaffolding for Interpreting Problem Prompts. https://cszero.wordpress.com/2019/02/27/sigcse-2019-best-computer-science-education-research-paper/ 50 Years of CS1 at SIGCSE: A Review of the Evolution of Introductory Programming Education Research https://cszero.wordpress.com/2019/02/27/50-years-of-cs1-at-sigcse-a-review-of-the-evolution-of-introductory-programming-education-research/ https://acbart.github.io/python-sneks/interventions.html PythonSneks: An Open-Source, Instructionally-Designed Introductory Curriculum with Action-Design Research Austin Cory Bart, University of Delaware, Newark, DE, USA Allie Sarver, Virginia Tech, Blacksburg, VA, USA Michael Friend, Virginia Tech, Blacksburg, VA, USA Larry Cox II, Virginia Tech, Blacksburg, VA, USA https://laurenmarg.com/2019/01/13/article-summary-margulieux-et-al-2019-review-of-measurements-in-computing-education-research/ Lauren Margulieux, Tuba Ketenci, and Adrienne Decker. Review of Measurements Used in Computing Education Research and Suggestions for Increasing Standardization http://perl.liacs.nl/2019/01/31/when-i-grow-up-i-want-to-become-a-programmer-elli-11-how/ Early Programming Education and Career Orientation: the Effects of Gender, Self-Efficacy, Motivation and Stereotypes Efthimia Aivaloglou and Felienne Hermans  "
"289","2016-12-05","2023-03-24","https://computinged.wordpress.com/2016/12/05/ap-cs-a-exam-data-for-2016-barb-ericsons-analysis-hai-hongs-guest-blog-post-csedweek/","As usual, Barbara Ericson went heads-down, focused on the AP CS A data when the 2016 results were released. But now, I’m only one of many writing about it. Education Week is covering her analysis (see article here), and Hai Hong of Google did a much nicer summary than the one I usually put together. Barb’s work with Project Rise Up 4 CS and Sisters Rise Up have received funding from the Google Rise program, which Hai is part of. I’m including it here with his permission — thanks, Hai!"
"290","2020-04-06","2023-03-24","https://computinged.wordpress.com/2020/04/06/how-im-lecturing-during-emergency-remote-teaching/","Alfred Thompson (whom most of my readers already know) has a recent blog post requesting: Please blog about your emergency remote teaching (see post here). Alfred is right. We ought to be talking about what we’re doing and sharing our practices, so we get better at it. Reflecting and sharing our teaching practices is a terrific way to improve CS teaching, which Josh Tenenberg and Sally Fincher told us about in their Disciplinary Commons. My CACM Blog Post this month is on our contingency plan that we created to give students an “out” in case they become ill or just can’t continue with the class — see post here. I encourage all my readers who are CS teachers to create such a contingency plan and make it explicit to your students. I am writing to tell you what I’m doing in my lectures with my co-instructor Sai R. Gouravajhala. I can’t argue that this is a “best” practice. This stuff is hard. Eugene Wallingford has been blogging about his emergency remote teaching practice (see post here). The Chronicle of Higher Education recently ran an article about how difficult it is to teach via online video like Zoom or BlueJeans (see article here). We’re all being forced into this situation with little preparation. We just deal with it based on our goals for our teaching practice. For me, keeping peer instruction was my top priority. I use the recommended peer instruction (PI) protocol from Eric Mazur’s group at Harvard, as was taught to me by Beth Simon, Leo Porter, and Cynthia Lee (see http://peerinstruction4cs.com/): I pose a question for everybody, then I encourage class discussion, then I pose the question again and ask for consensus answers. I use participation in that second question (typically gathered via app or clicker device) towards a participation grade in the class — not correct/incorrect, just participating. My plan was to do all of this in a synchronous lecture with Google Forms, based on a great recommendation from Chinmay Kulkarni. I would have a Google Form that everyone answered, then I’d encourage discussion. Students are working on team projects, and we have a campus license for Microsoft Teams, so I encouraged students to set that up before lecture and discuss with their teams. On a second Google Form with the same question, I also collect their email addresses. I wrote a script to give them participation credit if I get their email address at least once during the class PI questions. Then the day before my first lecture, I was convinced on Twitter by David Feldon and Justin Reich that I should provide an asynchronous option (see thread here). I know that I have students who are back home overseas and are not in my timezone. They need to be able to watch the video at another time. I now know that I have students with little Internet access. So, I do all the same things, but I record the lecture and I leave the Google Forms open for 24 hours after the last class. The links to the Google Forms are in the posted slides and in the recorded lectures. To fill out the PI questions for participation, they would have to at least look at that the lecture. I’m so glad that I did. As I tweeted, I had 188 responses to the PI questions after the lectures ended. 24 hours later, I had 233 responses. About 20% of my students didn’t get the synchronous lecture, but still got some opportunity to learn through the asynchronous component. The numbers have been similar for every lecture since that first. I lecture, but typically only for 10-15 minutes between questions. I have 4-5 questions in an 85 minute lecture. The questions take longer now. I can’t just move the lecture along when most of the students answer, as I could with clickers. I typically give the 130+ students 90 seconds to get the link entered and answer the question. I have wondered if I should just go to a fully asynchronous lecture, so I asked my students via a PI question. 85% say that they want to see the lecturer in the video. They like that I can respond to chat and to answers in Google Forms. (I appreciate how Google Forms lets me see a summary of answers in real-time, so that I can respond to answers.) I’d love to have a real, synchronous give-and-take discussion, but my class is just too big. I typically get 130+ students synchronously participating in a lecture. It’s hard to have that many students participate in the chat, let alone see video streams for all of them. We’re down to the last week of lecture, then we’ll have presentations of their final projects. They will prepare videos of their presentations, and receive peer comments. Each student has been assigned four teams to provide peer feedback on. Each team has a Google Doc to collect feedback on their project. So, that’s my practice. In the comments, I’d welcome advice on improving the practice (though I do hope not to have to do this again anytime soon!), and your description of your practice. Let’s share."
"291","2019-09-16","2023-03-24","https://computinged.wordpress.com/2019/09/16/whats-good-for-you-vs-what-fixes-you-balancing-explicit-instruction-vs-problemproject-based-learning-in-computer-science-classes/","Lauren Margulieux has posted another of her exceptionally interesting journal article summaries (see post here). Her post summarizes recent article asking which is more effective: Direct instruction or learning through problem-solving-first (like in project-based learning or problem-based learning — or just about any introductory computer science course in any school anywhere)? Direct instruction won by a wide margin. Lauren points out that there are lots of conditions when problem-solving-first might make sense. In more advanced classes where students have lots of expertise, we should use a different teaching strategy than what we use in introductory classes. When the subject matter isn’t cognitively complex (e.g., memorizing vocabulary words), there is advantages to having the students try to figure it out themselves first. Neither of these conditions are true for introductory computer science. This is an on-going discussion in computing education. Felienne Hermans had a keynote at the 2019 RStudio Conference where she made an argument for explicit direct instruction (see link here). I made an argument for direct instruction in Blog@CACM last November (see post here). Back in 2017, I recommended balancing direct instruction and projects (see post here), because projects are clearly more motivating and authentic for computer science students, while the literature suggest that direct instruction leads to better learning — even of problem-solving skills. Lately, I’ve been thinking about this question with a health metaphor. Let me try it here: Everybody should exercise, right? Exercise provides a wide variety of benefits (listed in a fascinating blog post from Freakonomics from this June), including cardiovascular improvements, better aging, better sleep, and less stress. But if you have a heart problem, you’re going to get treatment for that, right? If you’re having high cholesterol, you should continue to exercise (or even increase it), but you might also be prescribed a statin. If you have a specific need (like a vitamin deficiency), you address that need. Students in computing should work on projects. It’s authentic, it’s motivating, and there are likely a wide range of benefits. But if you want to gain specific skills, e.g., you want to achieve learning objectives, teach those directly. Don’t just assign a big project and hope that they learn the right things there. If you want to see specific improvement in specific areas, teach those. So sure, assign projects — but in balance. Meet the students’ needs AND give them opportunities to practice project skills. And when you teach explicitly: Always, ALWAYS, ALWAYS use active learning techniques like peer instruction. It’s simply unethical to lecture without active learning."
"292","2017-01-06","2023-03-24","https://computinged.wordpress.com/2017/01/06/balancing-cognition-and-motivation-in-computing-education-herbert-simon-and-evidence-based-education/","Education is a balancing act between optimally efficient instruction and motivating students. It’s not the same thing to meet the needs of the head and of the heart. Shuchi Grover tweeted this interesting piece (quoted below) that reviews an article by Herb Simon (and John Anderson and Lynne Reder) which I hadn’t previously heard of. The reviewer sees Herb Simon as taking a stand against discovery-based, situated, and constructivist learning, and in favor of direct instruction. When I read the article, I saw a more subtle message. I do recommend reading the review piece linked below. He [Herbert Simon] rejects discovery learning, and praises teacher instruction When, for whatever reason, students cannot construct the knowledge for themselves, they need some instruction. The argument that knowledge must be constructed is very similar to the earlier arguments that discovery learning is superior to direct instruction. In point of fact, there is very little positive evidence for discovery learning and it is often inferior (e.g., Charney, Reder & Kusbit, 1990). Discovery learning, even when successful in acquiring the desired construct, may take a great deal of valuable time that could have been spent practicing this construct if it had been instructed. Because most of the learning in discovery learning only takes place after the construct has been found, when the search is lengthy or unsuccessful, motivation commonly flags. Source: Herbert Simon and evidence-based education | The Wing to Heaven Some cognitive scientists have been railing against the constructivist and situated approaches to learning for years. Probably the most important paper representing the cognitivist perspective is the Kirschner, Sweller, and Clark paper, “Why Minimal Guidance During Instruction Does Not Work: An Analysis of the Failure of Constructivist, Discovery, Problem-Based, Experiential, and Inquiry-Based Teaching.” I talked about the Kirschner, Sweller, and Clark paper in this blog post with its implication for how we teach computer science. The conclusion is pretty straightforward: Direct instruction is far more efficient than making the students work it out for themselves. Students struggling to figure something out for themselves does not lead to deeper learning or more transfer than simply telling students what they ought to do. Drill and practice is important. Learning in authentic, complex situations is unnecessary and often undesirable because failure increases with complexity. The Anderson, Reder, and Simon article does something important that the famous Kirschner, Sweller, and Clark paper doesn’t — it talks about motivation. The words “motivation” and “interests” don’t appear anywhere in the Kirschner, Sweller, and Clark paper. Important attitudes about learning (like Carol Dweck’s fixed and growth mindsets, or Angela Duckworth’s grit) are not even considered. In contrast, Anderson, Reder, and Simon understand that motivation is a critical part of learning. Motivational questions lie outside our present discussion, but are at least as complex as the cognitive issues. In particular, there is no simple relation between level of motivation, on the one hand, and the complexity or realism of the context in which the learning takes place, on the other. To cite a simple example, learning by doing in the real-life domain of application is sometimes claimed to be the optimum procedure. Certainly, this is not true, when the tasks are life-threatening for novices (e.g., firefighting), when relevant learning opportunities are infrequent and unpredictable (e.g., learning to fly a plane in bad weather), or when the novice suffers social embarrassment from using inadequate skills in a real-life context (e.g., using a foreign language at a low level of skill). The interaction of motivation with cognition has been described in information-processing terms by Simon (1967, 1994). But an adequate discussion of these issues would call for a separate paper as long as this one. … There are, of course, reasons sometimes to practice skills in their complex setting. Some of the reasons are motivational and some reflect the special skills that are unique to the complex situation. The student who wishes to play violin in an orchestra would have a hard time making progress if all practice were attempted in the orchestra context. On the other hand, if the student never practiced as a member of an orchestra, critical skills unique to the orchestra would not be acquired. The same arguments can be made in the sports context, and motivational arguments can also be made for complex practice in both contexts. A child may not see the point of isolated exercises, but will when they are embedded in the real-world task. Children are motivated to practice sports skills because of the prospect of playing in full-scale games. However, they often spend much more time practicing component skills than full-scale games. It seems important both to motivation and to learning to practice one’s skills from time to time in full context, but this is not a reason to make this the principal mechanism of learning. As a constructionist-oriented learning scientist, I’d go further with the benefits of a motivating context (which is a subset of what they’re calling a “complex setting”). When you “figure it out for yourself,” you have a different relationship to the domain. You learn about process, as well as content, as in learning what it means to be a scientist or how a programmer thinks. When you are engaged in the context, practice is no longer onerous but an important part of developing expertise — still arduous, but with meaning. Yasmin Kafai and Quinn Burke talk about changing students’ relationship with technology. Computer science shouldn’t just be about learning knowledge, but developing a new sense of empowerment with technology. I’ve been wondering about what (I think) is an open research question about cognitivist vs. situationist approaches on lifelong learning. I bet you’re more likely to continue learning in a domain when you are a motivated and engaged learner. An efficiently taught but unmotivated learner is less likely to continue learning in the discipline, I conjecture. While they underestimate the motivational aspect of learning, Anderson, Reder, and Simon are right about the weaknesses of an authentic context. We can’t just throw students into complex situations. Many students will fail, and those that succeed won’t be learning any better. They will learn slower. Anderson, Reder, and Simon spend much of their paper critiquing Lave & Wenger’s Situated Learning. I draw on situated learning in my work (e.g., see post here) and reference it frequently in my book on Learner-Centered Computing Education, but I agree with their critique. Lave & Wenger are insightful about the motivation part, but miss on the cognitive part. Situated learning, in particular, provides insight into how learning is a process of developing identity. Lave & Wenger value apprenticeship as an educational method too highly. Apprenticeship has lots of weaknesses: inefficient, inequitable, and difficulty to scale. The motivational component of learning is particularly critical in computing education. Most of our hot issues are issues of motivation: The challenge to being an effective computing educator is to be authentic and complex enough to maintain motivation, and to use scaffolding to support student success and make learning more efficient. That’s the point of Phyllis Blumenfeld et al.’s “Motivating Project-Based Learning: Sustaining the Doing, Supporting the Learning.” (I’m in the “et al,” and it’s the most cited paper I’ve ever been part of.) Project-based learning is complex and authentic, but has the weaknesses that the cognitivists describe. Blumenfeld et al. suggest using technology to help students sustain their motivation and support their learning. Good teaching is not just a matter of choosing the most efficient forms of learning. It’s also about motivating students to persevere, to tell them the benefits that make the efforts worthwhile. It’s about feeding the heart in order to feed the head."
"293","2014-05-23","2023-03-24","https://computinged.wordpress.com/2014/05/23/constructionism-for-adults/","Constructionism–the N word as opposed to the V word–shares constructivism’s connotation of learning as “building knowledge structures” irrespective of the circumstances of the learning. It then adds the idea that this happens especially felicitously in a context where the learner is consciously engaged in constructing a public entity, whether it’s a sand castle on the beach or a theory of the universe. Most researchers exploring constructionism study children. Mitchel Resnick, Yasmin Kafai, Uri Wilensky, Amy Bruckman, Idit Harel, and other academic offspring of Seymour Papert have studied how children learn through construction in a variety of media, from Scratch to e-textiles. The semi-annual Constructionism and Creativity Conference talks about “students” not “children” on the Constructionism history page, but the proceedings from the 2012 conference show that it’s about children’s learning, both formal and informal. I’ve grown up constructionist-by-association, rather than by training. I got to work with Seymour and with Mitchel for a short time on the design for LCSI Microworlds. Yasmin is one of my oldest friends, from even before she went to work with Idit and Seymour. I worked from a constructionist perspective here at Georgia Tech with Amy Bruckman and Janet Kolodner. Nowadays, I work mostly with adult learners — undergraduates, end-user programmers, and high school teachers. There’s nothing in Seymour’s definition that prohibits applying constructionism to adults. Their learning should be “especially felicitous” when they are “constructing a public entity.” But I don’t think that constructionism for adults is the same as constructionism for children. I can identify examples (as an existence proof) that constructionism can work for adults as well as children. I see three big differences in adult constructionism from child constructionism, and they’re related.  (1) Saving Face I’m learning to play the ukulele. I bought it about a few months ago, and am playing it daily. I’m learning a huge amount, both in terms of the skill and concepts needed to play, but also at a meta level about music. The ukulele makes me think about timing, strumming, and chord patterns in a different way, and now I listen to all kinds of stringed instruments in a different way. It’s helping me to sing better, since I can more easily hear when I’m at the wrong pitch and I hear rhythm differently when I’m strumming. But I am not learning to play ukulele as a public artifact. I’m frightened by the thought of playing in public. Only my family has ever heard me play. Adele Goldberg worked on one of the iterations of the UK Open University’s introductory computing course, and she told me that distance learning opportunities were most important for adults. She pointed out that adults work for decades to develop their careers and their prestige. It’s really hard for them to then put their hands up in a physical classroom to ask a question and risk being found out as not knowing. There’s a recent Freakonomics podcast that claims that the three hardest words to say in the English language are: “I don’t know.” Constructionism for kids is all about the public aspect. The Scratch website plays a role in students sharing their work, downloading others’ projects, remixing and sharing back what they found. Collaboration and public sharing has always played a big role in stories of constructionist learning. Maybe this is why work in Constructionism tends to focus at the youngest children, because the social standing and peer pressure issues increase as the kids get older. Adults have face in a different way than children. We can still learn from construction, but we might not want it to be as public in the same way as children. We might not want to even publicly remix, or others might learn what we’re doing. (2) Presumption of Expertise I’ve mentioned before in this blog that I’ve been singing in my church choir. I often feel ignorant — and embarrassed at my ignorance. There is so much about singing in a choir that is assumed when you are an adult, from how to sing into a microphone to how to harmonize by hearing the melody. We teach these things to children, because we know that they don’t have the basics. We expect them to be novices at most things. As an adult engaging in an activity, we are presumed not to be novices. If you sing in a choir, the assumption is that you must have sung in choirs before –“You all know the basics.” But if you’re starting out in a new domain, you may not. Even when I admit my ignorance (hard to do because of the issue of face) and ask questions, the director quickly forgets my lack of background — a couple things get explained, and then the presumption of expertise comes back. I look like all the other adults there. It’s not like a classroom of similarly-aged students where the teacher can assume a similar background. Adults have radically different backgrounds. I recently served on the advisory board for a science and engineering learning project that used Lego robotics context. The most common teacher professional development question was about the Lego. These teachers had not played with Lego as children, were uncomfortable with it, and had to spend extra (unexpected from the researchers’ perspective) time to learn to use Lego. Constructionism depends on learning in the context of construction. The goal of the learning isn’t the construction itself. It’s construction as something to think with. As Seymour put it, you can’t think about thinking without thinking about something. But if you don’t know how to construct, then most of the activities of construction don’t fall into the background, and then it’s hard to think about the artifact being constructed and to learn from that process. Children learn through Lego and Scratch after they get the basics of how to put blocks together (in both physical and virtual forms). Adult teachers who learn from constructing lectures and adult programmers who learn from constructing software only learn after they’re comfortable with course design and programming. When you first design a course, you’re learning about course design, and less about the content. Few people will learn to program by joining an open source development effort. The problem of expecting expertise shows up often in undergraduate education. In undergraduate computer science courses, we expect students to know about mathematic concepts from algebra, trigonometry, geometry, and even calculus. If students don’t know those concepts, we expect them to “pick them up” on their own, and their grades suffer. When they fail, we complain that “these students don’t have the right background.” If they don’t have the basic background, it’s hard to move forward. Think about it from a developmental perspective, instead of our more common judgmental “hold the standard” perspective. Where does the student get the knowledge that we expect but they “missed”? If an adult misses the basics, is that it? They’ve simply missed out for this lifetime? How does an adult fit in learning Algebra 1 (for example) if he missed out earlier? Because of the presumption of expertise, we adult learners tend to gravitate to constructionist learning opportunities where we do know the basics. Teachers have taught before, so they can learn by teaching something new. Mike Hewner is an excellent software engineer, so simply shifting to a new domain was an enjoyable challenge. Or, we tackle project where adults with no expertise are expected, like learning a foreign language or introductory web design. But if I as an adult decided to learn how to build a bookcase from lumber, it’s not clear where I’d go to get the basic knowledge of carpentry that I lack. Go to the local DIY store and there’s an assumption that you did shop as a kid and that you know how to hammer and saw efficiently. Maybe this is why it’s so hard for adults to jump into a new career, to start over, to construct new prestige. We lose face because we give up our former prestige. But as we live longer, there is time enough to develop new prestige, a new face. (3) Time and Responsibility. I saved the most obvious difference for last. In our modern society, we do the majority of formal education before our citizens develop responsibilities around home, family, and career, when they can devote time to learning. Adults are swamped with responsibilities and do not have much time to devote to learning. Constructionism is not an efficient form of learning. Learning can happen “irrespective of the circumstances of the learning” (as Seymour says). One can learn from reading a book or attending a lecture. Building through construction can be a motivating context for learning, and it can lead to deep learning. But there are more efficient forms of learning, like individual tutoring and guided instruction. We can get better learning from mastery learning. Adults need efficient learning. Efficient learning fits better into the time available. Learning occurs more efficiently with a teacher or mentor, who can design learning, guide learning, provide useful feedback, and cut-off dead-ends and wasted time. But the first two differences make it more difficult for adults to get the guidance that a good teacher can provide. Adult learners are less likely to seek out a teacher and ask their questions. It’s hard for teachers to recognize adult learner’s needs, because they presume expertise. Sure, some adults will spend lots of time in “inefficient” constructionist learning activities, like model railroads, recreational mathematics, and the Society for Creative Anachronism. What are the conditions under which that happens? Obviously, leisure time is necessary — time that the adult feels can be spared from other responsibilities. What if the adult wants to learn something “real” (e.g., something that aids in meeting responsibilities, like perhaps skills towards a new job or promotion), then they are unlikely to choose a constructionist route. They might choose a MOOC, or some vocational form of learning that is more authentic. Conclusion: I do believe that constructionism is an “especially felicitous” way to learn. It’s fun to learn through constructionism. Constructionist learning tends to be deep learning. We do want adults to be able to use constructionist learning. Constructionism can work for adults, but it’s more challenging. There are different issues than with children. Adults have less time to spend on learning and more responsibilities. They may not have the basic construction skills and knowledge in the medium of choice for constructionist learning, which is necessary to learn through construction. They are less likely to ask for and receive the help that makes learning for effective and efficient. They are less likely to share, if that sharing might expose their lack of understanding. Constructionism is a particularly fun way to learn, but the costs of constructionism may be greater for adults than the utility provided. As we live longer, the challenges of learning as adults becomes more of a problem. If people are going to live to 80 or 90, it’s less believable that you will learn all the basics you will ever need for whatever career(s) you might be interested in by the time you are 21. There’s time enough for a second career. We need to make opportunities sufficient to learn for that career, too."
"294","2016-05-23","2023-03-24","https://computinged.wordpress.com/2016/05/23/what-is-the-community-of-practice-for-cs4all-teachers-suggestion-its-not-teachers/","My Blog@CACM post this month is on the AAAS symposium I attended on undergraduate STEM education (see post here). The symposium set up for me a contrast between computing education and other STEM education. In math and science education, faculty are more likely to get continuing professional development and to value education more than CS faculty. Why is it different in CS? In the blog post, I suggest that part of the issue is maturation of the field. But I have another hypothesis — I suggest that most CS teachers, especially at the undergraduate level, don’t think of themselves as teachers. In my book Learner-Centered Design of Computing Education, I use Lave & Wenger’s situated learning theory as a lens for understanding motivations to pursue computing education. Lave & Wenger say every learner aims to join a community of practice. Learners start out on the periphery of the community, and work their way towards the center, adopting the skills, values, and knowledge that those in the center hold. They might need to take classes because that’s what the community values, or maybe they do an apprenticeship. The community of practice provides the learner and the practitioners a sense of identity: “I belong with this group. I do this practice. This is who I am.” Lijun Ni taught me the value of teacher identity. Someone who says “I’m a math teacher” (for example) will join math teacher organizations, will seek out professional development, and will more likely be retained longer as a teacher. That’s their identity. I believe that many science and math teachers (even at the undergraduate level) feel a sense of identity as teachers. Even at research universities, those teaching the intro courses in mathematics and science are likely teachers-first. They know that they are mostly no preparing future mathematicians, biologists, chemists, and physicists. They are preparing students for their chosen professions, perhaps in engineering, medicine, or computer science. The math and science teachers belong to a community of practice of teachers, e.g., they have a goal to be like the best teachers in their profession. They have an identity as teachers, e.g., they strive to be better math and science teachers. I suspect that CS teachers feel a sense of identity as software developers. They see themselves as programmers primarily. They see themselves as producing future programmers. They take pride in what they can do with code. They have a sense of guardianship — they want the best and brightest in their field. There’s a difference between CS teachers as programmers vs CS teachers. Programmers train other programmers. They learn new programming languages, new techniques of programming, the latest tools. Teachers teach everyone, and they learn how to be better at teaching. We need CS teachers to be teachers. It’s less important that they know the latest industry gadgets. It’s more important that they learn how to teach “all” about CS, and how to teach that CS better. When Grady Booch came to SIGCSE 2007, I was surprised at how excited everyone was — people still talk about that visit (e.g., see the explanation for the BJC approach to computing). I realized that, for most of the people in the room, Grady was a role model. He was at the center of community that they most cared about. Note that Grady is not a teacher. He’s an exceptional software engineer. There are serious ramifications of a teacher with an identity as a software engineer. I had a discussion a few months ago with one of our instructors, who told me, “I just don’t get why women would even want to be in computer science. Working in a cubicle is not a great place for women to be! They should get a better job.” I was shocked. I didn’t tackle the gender issues first. I started out trying to convince him that computer science doesn’t just lead to a cubicle. You could study computer science to become something other than a software developer, to work somewhere other than a cubicle. He wasn’t buying my argument. I realized that those cubicle jobs are the ones he wants to prepare students for. That’s where he imagines the best programmers working. He doesn’t want to teach computer science for whatever the students need it for. He prepares future programmers. That’s how he defines his job — a master software engineer with apprentice software engineers. I am calling out undergraduate CS teachers in this post, but I suspect that many high school CS teachers see themselves as software developers (or as trainers of software developers), more than as teachers of computer science. I hear about high school CS teachers who proudly post on the wall the t-shirts of the tech companies who employ their former students. That’s a software developer focus, an apprenticeship focus. That’s not about teaching CS for all. What would it take to shift the community of practice of CS teachers to value teaching over software development? It’s an important change in perspective, especially if we care about CS for all. Not all of our students are aiming for jobs in software development. How did other STEM disciplines do it? How did they develop a culture and community of practice around teaching?"
"295","2019-06-10","2023-03-24","https://computinged.wordpress.com/2019/06/10/computer-science-teachers-as-provocateurs-all-learning-starts-from-a-problem/","One of the surprising benefits of working with social science educators (history and economics) has been new perspectives on my own teaching. I’ve studied education for several years, and have worked with science and mathematics education researchers in the past. It hadn’t occurred to me that history education is so different that it would give me a new way of looking at my own teaching. Last week, I was in a research meeting with Bob Bain, a history and education professor here at U. Michigan. He was describing how historians understand knowledge and what historian’s practice looks like, and how that should be reflected in the history classroom. He said that all learning in history starts from a problem. That gave me pause. What’s a “problem” in history? Bob explained that he defines problem as John Dewey did, as something that disturbs the equilibrium. “Activities at the Dewey School arose from the child’s own interests and from the need to solve problems that aroused the child’s curiosity and that led to creative solutions.” We don’t think until our environment is disturbed, but that environment may just be in your own head. We each have our own stories that we use to explain the world, and these make up our own personal equilibria. Maybe students have always been told that the American Civil War was about states’ rights, and then they read the Georgia Declaration of Secession. Maybe they’ve thought of Columbus as the explorer who discovered America, and then note that he wasn’t celebrated until 1792, 300 years after his arrival. Why wasn’t he celebrated earlier, and why him and at that time? A good history teacher sets up these conflicts, disequilibria, or problems. Bob says it can be easy enough to create, simply by showing two contrasting accounts of the same historical event. Research in the learning sciences supports this definition of learning. Roger Schank talked about the importance of learning through “expectation failure.” You learn when you realize that you don’t know something: The understanding cycle – expectation failure – explanation – reminding – generalization – is a natural one. No one teaches it to us. We are not taught to have goals, nor to attempt to develop plans to achieve those goals by adapting old plans from similar situations. We need not be taught this because the process is so basic to what comprises intelligence. Learning is a natural act. In progressive education, we’re told that the teacher should be a “Guide on the Side, not the Sage on the Stage.” When Janet Kolodner was developing Learning By Design, she talked about the role of teacher as coach and orchestrator. Those were roles I was familiar with. Bob was describing a different role. I challenged him explicitly, “You’re a provocateur. You create the problems in the students’ minds.” He agreed. Bob got me thinking about the role of the teacher in the computer science class. We can sometimes be a guide, a coach, and orchestrator — when students are working away on some problem or project. But sometimes, we have to be the provocateur. We should always start from a problem. In science education, this is easy. Kids naturally do wonder why the sky is blue, why sunsets are more red, why heat travels along metal but not wood, and why stars twinkle. In more advanced computer science, we can also start from questions that students’ already have. I’m taking a MOOC right now because it explains things I’ve wondered about. But in introductory classes, students already use a computer without problems. They may not see enough of real computing to wonder about how it works. The teacher has to generate a problem, inculcate curiosity — be a provocateur. We should only teach something when it solves a problem for the student. A lecture on variables and types should be motivated by a problem that the variables and types solve. A lecture on loops should happen when students need to do something so often that copy-pasting the code repeatedly won’t work. Saying “You’re going to need this later” is not motivation enough — that doesn’t match the cycle that Schank described as natural. Nobody remembers things they will need in the future. Learning results when you need new knowledge to resolve the current problem, disequilibria, or conflict. Note: Computer science doesn’t teach problem-solving. Dewey’s and Schank’s point is that problem-solving is a natural way in which people learn. Learning to program still doesn’t teach problem-solving skills."
"296","2018-08-17","2023-03-24","https://computinged.wordpress.com/2018/08/17/cra-memo-on-best-practices-for-engaging-teaching-faculty-in-research-computing-departments/","I’m excited to see this memo from the Computing Research Association on the status of teaching faculty in computing departments. Computing departments are increasingly relying on teaching faculty, and it’s important to give them fair and equitable treatment. I wrote in 2016 that “CS Teaching Faculty are like Tenant Farmers.” This memo addresses some of the issues I raised, though some are buried in the text of the memo. I argued that teaching faculty should be involved in hiring for both traditional and teaching faculty, and that teaching faculty should serve in upper-level leadership positions. The report does state halfway down the report, “Similarly, teaching faculty should be broadly included in faculty governance on matters related to their roles in the department, including participation in faculty meetings, voting rights on matters impacting the education mission, inclusion in evaluation of the teaching performance of other faculty, and input on hiring decisions.” This memo is a step in the right direction. To achieve their educational mission, computing departments at research universities increasingly depend on full-time teaching faculty who choose teaching as a long-term career. This memo discusses the need for teaching faculty, explores the impact of teaching faculty, and recommends best practices. Essential best practices for departments include: Departments should provide teaching faculty with equitable rights and resources, except in limited areas where differing job responsibilities make that inappropriate. Departments should encourage teaching faculty to be equal and active partners on projects and committees with the goal of contributing to the department’s educational mission. Departments should set course, preparation, student, and service loads of teaching faculty at a level that allows for innovation and quality instruction. …. Source: Laying a Foundation: Best Practices for Engaging Teaching Faculty in Research Computing Departments"
"297","2016-02-05","2023-03-24","https://computinged.wordpress.com/2016/02/05/cs-teaching-faculty-are-treated-like-tenant-farmers/","There are many, many teaching jobs available in computer science right now. Scarcely a day goes by that there isn’t another ad posted in the SIGCSE Members list — sometimes for many positions at the same department. A great many of these are at Universities, with a clear statement that this is a Teaching track position, not a Tenure track position. Many of these ads, when posted to SIGCSE Members, contain a paragraph like this (edited and hopefully anonymized): (Highly-ranked University)’s full-time (without tenure) teaching faculty positions are called (pick one of:) Lecturers with Security of Employment, Professors of the Practice, or Teaching Professors, or Lecturers, or Instructors. These positions typically involve a teaching load of two courses each semester, advising responsibilities, and service (committee work) as well. (Highly-ranked University)’s computer science teaching faculty are NOT treated as second class citizens. We vote at faculty meetings, represent the department on university committees, and are generally well respected inside and outside the department. We currently are seeking more (see ad below). From time to time, I write the person (almost always a teaching track faculty member) who posted the ad, to follow-up on the “NOT second class citizens” part. Maybe I have been watching too much “Downton Abbey.” The treatment of teaching track faculty by tenure track faculty sounds like the relationship between the landed gentry and the tenant farmers. The University teaches as one of its primary roles, just as the estate survived through farming (and the sales and rent that were generated). The tenure track faculty (landed gentry) leave most of that to the teaching track faculty (tenant farmers). It’s a delegated responsibility, like custodial and lawn management services. The teaching track faculty don’t own the department or programs (land). The tenure track faculty make the decisions about hiring and promoting the teaching track faculty. The teaching track faculty don’t make any of the decisions about tenure track faculty. Of course, the greatest match with the analogy is that tenured faculty can’t be fired — like the landed gentry, they own their positions. Teaching track faculty are rarely tenured. One of the teaching faculty with whom I work has only a six month contract and can be fired with a month’s notice. It is in our best interests for teaching track to be a profession. Teaching track faculty should be experts in teaching. Members should be expected to join professional organizations like SIGCSE (see previous post about the lack of membership in SIGCSE), to attend and present at organizational meetings, and to improve their practice. They should have a promotion path and evaluation as rigorous as the tenure-track promotion and tenure process. I’m pleased to see these ads, because they suggest national searches for good teaching track faculty — as opposed to hiring (for example) graduate students and post-docs who don’t want to leave their home institution. A first step towards professionalization of teaching track faculty is to treat them with the same respect as tenure-track faculty. Tenure track faculty are treated as experts in research. Teaching track faculty should be treated as experts in teaching. If both teaching and research are important, then treat the teaching track faculty like the research faculty. There should be a comparable sense of responsibility, power, and ownership. "
"298","2016-01-18","2023-03-24","https://computinged.wordpress.com/2016/01/18/the-inverse-lake-wobegon-effect-in-learning-analytics-and-sigcse-polls/","I wrote my Blog@CACM post this month about the Inverse Lake Wobegon effect (see the post here), a term that I coin in my new book (link to post about book). The Inverse Lake Wobegon effect is where we observe a biased, privileged/elite/superior sample and act as if it is an unbiased, random sample from the overall population. When we assume that undergraduates are like students in high school, we are falling prey to the Inverse Lake Wobegon effect. Here’s an example from The Chronicle of Higher Education in the quote below. Looking at learning analytics from MOOCs can only tell us about student success and failure of those who sign up for the MOOC. As we have already discussed in this blog (see post here), people who take MOOCs are a biased sample — well-educated and rich. We can’t use MOOCs to learn about learning for those who aren’t there. “It takes a lot of mystery out of why students succeed and why students fail,” said Robert W. Wagner, executive vice provost and dean at Utah State, and the fan of the spider graphic. “It gives you more information, and when you can put that information into the hands of faculty who are really concerned about students and completion rates and retention, the more you’re able to create better learning and teaching environments.” Source: This Chart Shows the Promise and Limits of ‘Learning Analytics’ – The Chronicle of Higher Education A second example: There’s a common thread of research in SIGCSE Symposium and ITICSE that uses survey data from the SIGCSE Members List as a source of information. SIGCSE Members are elite undergraduate computer science teachers. They are teachers who have the resources to participate in SIGCSE and the interest in doing so. I know that at my own institution, only a small percentage (<10%) of our lecturers and instructors participate in SIGCSE. I know that no one at the local community college’s CS department belongs to SIGCSE. My guess is that SIGCSE Members represents less than 30% of undergraduate computer science teachers in the United States, and a much smaller percentage of computer science teachers worldwide. I don’t know if we can assume that SIGCSE Members are necessarily more expert or higher-quality. We do know that they value being part of a professional organization for teaching, so we can assume that SIGCSE Members have an identity as a CS teacher — but that may mean that most CS teachers don’t have an identity as a CS teacher. A survey of SIGCSE Members tell us about an elite sample of undergraduate CS teachers, but not necessarily about CS teachers overall."
"299","2015-11-25","2023-03-24","https://computinged.wordpress.com/2015/11/25/no-rich-child-left-behind-why-moocs-are-not-working/","When I talk to people about MOOCs these days, I keep finding myself turning to two themes. Theme #1. Our schools aren’t getting worse. The gap between the rich and the poor is growing. We have more poorer kids, and they are doing worse because of everything, not just because of school. Before we can figure out what’s happening here, let’s dispel a few myths. The income gap in academic achievement is not growing because the test scores of poor students are dropping or because our schools are in decline. In fact, average test scores on the National Assessment of Educational Progress, the so-called Nation’s Report Card, have been rising — substantially in math and very slowly in reading — since the 1970s. The average 9-year-old today has math skills equal to those her parents had at age 11, a two-year improvement in a single generation. The gains are not as large in reading and they are not as large for older students, but there is no evidence that average test scores have declined over the last three decades for any age or economic group. The widening income disparity in academic achievement is not a result of widening racial gaps in achievement, either. The achievement gaps between blacks and whites, and Hispanic and non-Hispanic whites have been narrowing slowly over the last two decades, trends that actually keep the yawning gap between higher- and lower-income students from getting even wider. If we look at the test scores of white students only, we find the same growing gap between high- and low-income children as we see in the population as a whole. It may seem counterintuitive, but schools don’t seem to produce much of the disparity in test scores between high- and low-income students. … It boils down to this: The academic gap is widening because rich students are increasingly entering kindergarten much better prepared to succeed in school than middle-class students. This difference in preparation persists through elementary and high school. Source: No Rich Child Left Behind – The New York Times Theme #2: There are definitely tangible effects of MOOCs, as seen in the study linked below. They help rich white men find better jobs. They help educate the rich. They help a small percentage of the poor. All the money being poured into developing MOOCs fuels the gap between the rich and the poor. If you want to improve education generally, nationally or worldwide, aim at the other 90%. MOOCs aren’t improving education. They enrich those who are already rich. Using data from MOOCs offered by the University of Pennsylvania, Alcorn, Christensen and Emanuel were some of the first to suggest that MOOC learners were more likely to be employed men in developed countries who had previously earned a degree — countering the early narrative that MOOCs would democratize higher education around the world. Source: Study finds tangible benefits for learners from Coursera’s massive open online courses | InsideHigherEd Addendum: Commenters pointed out that I didn’t make my argument clear. I’m posting one of my comment responses here to make clearer what I was trying to say:  As Alan pointed out, the second article I cited only once says that MOOC learners are “more likely to be employed men in developed countries.” I probably should have supported that point better, since it’s key to my argument. All the evidence I know suggests that MOOC learners are typically well-educated, more affluent from the developed world, and male. If your MOOCs have significantly different demographics, I’d be interested in hearing your statistics. However, given the preponderance of evidence, your MOOC may be an outlier if you do have more students from the developing world. The argument I’m making in this post is that (a) to improve education, we have to provide more to the underprivileged, (b) most MOOC students are affluent, well-educated students from the developing world, and (c) the benefits of MOOCs are thus accruing mostly to people who don’t need more enrichment. Some people are benefitting from MOOCs. My point is that they are people who don’t need the benefit. MOOCs are certainly not “democratizing education” and are mostly not providing opportunities to those who don’t have them anyway. "
"300","2019-11-11","2023-03-24","https://computinged.wordpress.com/2019/11/11/come-to-the-cue-next-workshop/","I’m going to be the keynoter at the Dec. 5 workshop in DC. The workshop series is near and dear to my heart — how do we make computing education accessible to all undergraduates? Below is taken from the CRA website here. CS Departments have seen significant enrollment increases in undergraduate computer science courses and programs. The number of non-majors in CS courses has also increased significantly, and many CS departments cannot meet the demand. One key reason for the increased demand from non-majors is the fact that computing and computer science have become relevant to undergraduate education in all disciplines. However, there is currently no consensus on how to design computing courses or how to structure curricula aimed at teaching the fundamentals of CS and computing to students who need to use computing effectively in the context of the other disciplines. The goal of the upcoming CUE.NEXT workshops — organized by Larry Birnbaum (Northwestern), Susanne Hambrusch (Purdue), and Clayton Lewis (UC Boulder) — is to initiate a national dialog on the role of computing in undergraduate education. Computing educators and CS departments, as well as colleagues and academic units representing other stakeholder disciplines, will work together to define and address the challenges. Three NSF funded workshops are scheduled to take place in Chicago (November 18 and 19), DC (December 5 and 6) and Denver (January 2020)."
"301","2019-05-17","2023-03-24","https://computinged.wordpress.com/2019/05/17/seeking-data-whats-happening-at-your-school-as-you-cap-enrollment/","I’m just back from the 2019 NCWIT Summit (see link here), which was amazing — as always. I talked to people at schools who have instituted caps on undergraduate CS enrollment, and I’m hearing stories that I didn’t expect. I’d love to hear your experience at your school. Are you seeing these things? These are all just anecdote. I’m not sure how to cast a wider net for more information, but this blog might be a place to start. Could you share your reports on how enrollment caps are impacting your course enrollment at the lower levels, on time to graduation, and on departmental climate (or other issues)? Thanks! "
"302","2019-05-06","2023-03-24","https://computinged.wordpress.com/2019/05/06/comparing-performance-in-learning-computer-science-between-countries/","Imagine that you are a high school chemistry teacher, and you’re convinced that you have developed a terrific way to teach the basic introductory to chemistry course. Your students do terrific on all your assessments and go on to success in chemistry in college. You decide that you want to test yourself — are your students really as good as you think they are? You reach out to some friends in other schools and ask them to give your final exam to their students. You are careful about picking the other schools so that they’re really comparable along dimensions like student wealth, size of school, and student demographics. Your friends are willing, but they just have a few of their students take the test. You don’t know really how they pick. Maybe it’s the best students. Maybe it’s the students who need remedial help. Maybe it’s a punishment for students in detention. Of course, all of your students take the final exam. In the end, you have lots of YOUR students who took YOUR exam, and you have a handful of other students. Your friends (who likely don’t teach like you) give you a few tests from their students. Is it at all surprising that your students will likely out-score the friends’ students? That’s how I read this paper from Proceedings of the National Academy of Sciences of the US: “Computer science skills across China, India, Russia, and the United States.” The authors are quite careful about picking schools to compare, along dimensions of how “elite” the schools are. I’m quite willing to believe that there is a range of schools with different results along an “elite” spectrum. They over-sample from the United States, compared to the population of these countries: Altogether, 678 seniors from China (119 from elite programs), 364 seniors from India (71 from elite programs), and 551 seniors from Russia (116 from elite programs) took the examination…We also obtained assessment data on 6,847 seniors from a representative sample of CS programs in the United States (607 from elite programs). The test they use is the “Major Field Test” from ETS. I don’t know that it’s a bad test. I do suspect that it’s US-centric. It’s like the final exam from our Chemistry teacher in my example. Compare that to the TIMSS assessments that go to great lengths to make sure that the data are contextualized and that the assessments are fair for everyone. Maybe the results are true. Maybe US computer science students are far better than comparable CS students in Russia, China, and India. I’m just not convinced by this study."
"303","2013-01-15","2023-03-24","https://computinged.wordpress.com/2013/01/15/ucsds-overwhelming-argument-for-peer-instruction-in-cs-classes/","For teachers in those old, stodgy, non-MOOC, face-to-face classes (“Does anybody even *do* that anymore?!?”), I strongly recommend using “Clickers” and Peer Instruction, especially based on these latest findings from Beth Simon and colleagues at the University of California at San Diego. They have three papers to appear at SIGCSE 2013 about their multi-year experiment using Peer Instruction: If we have such strong evidence that changing our pedagogy does work, are we doing our students a disservice if we do not use it?"
"304","2016-08-05","2023-03-24","https://computinged.wordpress.com/2016/08/05/college-level-cs-principles-courses/","My Blog@CACM post for July is about why I gave up on creating a CSP equivalent course at Georgia Tech — see post here. The conclusions are (a) I’m not convinced that AP is the best lever available for getting CS into Georgia schools that don’t have CS and (b) Georgia Tech already has a set of intro courses that cover CSP-like content, are contextualized for different majors, and are successful. I wish more universities had CSP-like courses. Towards that end, I’m listing there the college-level CSP courses that I found when starting to build one for Georgia Tech. Offered here as a resource to others."
"305","2020-04-27","2023-03-24","https://computinged.wordpress.com/2020/04/27/data-science-for-integrating-computing-into-k-12-schools/","My colleague Betsy DiSalvo is part of the team that just released Beats Empire, an educational game for assessing what students understand about middle school computer science and data science https://info.beatsempire.org The game was designed by researchers from Teachers College, Columbia University; Georgia Tech; University of Wisconsin, Madison; SRI International; Digital Promise; and Filament Games in concert with the NYC Dept. of Education. Beats Empire is totally free; it has already won game design awards, and it is currently in use by thousands of students. Jeremy Roschelle was a consultant on the game and he just wrote a CACM Blog post about the reasoning behind the game (see link here). Beats Empire is an example of an important development in the effort to help more students get the opportunity to participate in computing education. Few students are taking CS classes, even when they’re offered — less than 5% in every state for whom I’ve seen data (see blog post here). If we want students to see and use computing, we’ll need to put them in other classes. Data science fits in well with other classes, especially social studies classes. Bootstrap: Data Science (see link here) is another example of a computing-rich data science curriculum that could fit into a social studies class. Social studies is where we can reach the more diverse student populations who are not in our CS classes. I’ve written here about my work developing data visualization tools for history classes. For a recent NSF proposal, I looked up the exam participation in the two Advanced Placement exams in computer science (CS Principles and CS A) vs the two AP exams in history (US history and World history). AP CS Principles was 32% female, and AP CS A was 24% female in 2019. In contrast, AP US History was 55% female and AP World History was 56% female. Five times as many Black students took the AP US History exam as took the AP CS Principles exam. Fourteen times as many Hispanic students took the AP US History exam as took the AP CS Principles exam. Data science may be key to providing CS for All in schools."
"306","2020-06-29","2023-03-24","https://computinged.wordpress.com/2020/06/29/subgoal-labelling-influences-student-success-and-retention-in-cs/","I have written a lot about subgoal labeling in his blog. Probably the best way to find it all is to see the articles I wrote about Lauren’s graduation (link here) and Briana’s (link here). They have continued their terrific work, and have come out with their most impressive finding yet. In work with Adrienne Decker, they have shown that subgoal labeling reduces the rate at which students fail or drop out of introductory computer science classes: “Reducing withdrawal and failure rates in introductory programming with subgoal labeled worked examples” (see link here). The abstract is below. We now have evidence that subgoal labelling lead to better learning, better transfer, work in different languages, work in both text and block-based programming languages, and work in Parsons Problems. Now, we have evidence that their use leads to macro effects, like improved student success and retention. We also see a differential impact — the students most at risk of failing are the ones who gain the most. This is a huge win. Abstract Background: Programming a computer is an increasingly valuable skill, but dropout and failure rates in introductory programming courses are regularly as high as 50%. Like many fields, programming requires students to learn complex problem-solving procedures from instructors who tend to have tacit knowledge about low-level procedures that they have automatized. The subgoal learning framework has been used in programming and other fields to breakdown procedural problem solving into smaller pieces that novices can grasp more easily, but it has only been used in short term interventions. In this study, the subgoal learning framework was implemented throughout a semester-long introductory programming course to explore its longitudinal effects. Of 265 students in multiple sections of the course, half received subgoal-oriented instruction while the other half received typical instruction. Results: Learning subgoals consistently improved performance on quizzes, which were formative and given within a week of learning a new procedure, but not on exams, which were summative. While exam performance was not statistically better, the subgoal group had lower variance in exam scores and fewer students dropped or failed the course than in the control group. To better understand the learning process, we examined students’ responses to open-ended questions that asked them to explain the problem-solving process. Furthermore, we explored characteristics of learners to determine how subgoal learning affected students at risk of dropout or failure. Conclusions: Students in an introductory programming course performed better on initial assessments when they received instructions that used our intervention, subgoal labels. Though the students did not perform better than the control group on exams on average, they were less likely to get failing grades or to drop the course. Overall, subgoal labels seemed especially effective for students who might otherwise struggle to pass or complete the course. Keywords: Worked examples, Subgoal learning, Programming education, Failure rates"
"307","2019-02-01","2023-03-24","https://computinged.wordpress.com/2019/02/01/come-to-my-workshop-on-cs-education-at-asee-june-16/","I am attending my first American Society for Engineering Education (ASEE) Conference this year — see the website here: https://www.asee.org/conferences-and-events/conferences/annual-conference/2019. I’m still figuring out Engineering Education Research, so I’ll be offering a workshop based on our work at Georgia Tech: Techniques for Improved Engagement and Learning of Programming. The workshop is Sunday, June 16, 2019 from 9:00 am to noon. Please come, and please pass this on to others you know who are attending ASEE and might be interested. Computing education research at Georgia Tech over the last 15 years has led to techniques for teaching programming which improve student learning. Learning is enhanced through greater engagement and reduced cognitive load. These techniques are: The learning objectives for this workshop are for participants to experience these techniques so that they might be able to judge which are most useful for their own practice. Participants will: "
"308","2016-09-16","2023-03-24","https://computinged.wordpress.com/2016/09/16/learning-curves-given-vs-generated-replicating-from-us-to-india-and-frames-vs-text-more-icer-2016-trip-reports/","My Blog@CACM post for this month is a trip report on ICER 2016. I recommend Amy Ko’s excellent ICER 2016 trip report for another take on the conference. You can also see the Twitter live feed with hashtag #ICER2016. I write in the Blog@CACM post about three papers (and reference two others), but I could easily write reports on a dozen more. The findings were that interesting and that well done. I’m going to give four more mini-summaries here, where the results are more confusing or surprising than those I included in the CACM Blog post. This year was the first time we had a neck-and-neck race for the attendee-selected award, the “John Henry” award. The runner-up was Learning Curve Analysis for Programming: Which Concepts do Students Struggle With? by Kelly Rivers, Erik Harpstead, and Ken Koedinger. Tutoring systems can be used to track errors on knowledge concepts over multiple practice problems. Tutoring systems developers can show these lovely decreasing error curves as students get more practice, which clearly demonstrate learning. Kelly wanted to see if she could do that with open editing of code, not in a tutoring system. She tried to use AST graphs as a sense of programming “concepts,” and measure errors in use of the various constructs. It didn’t work, as Kelly explains in her paper. It was a nice example of an interesting and promising idea that didn’t pan out, but with careful explanation for the next try. I mentioned in this blog previously that Briana Morrison and Lauren Margulieux had a replication study (see paper here), written with Adrienne Decker using participants from Adrienne’s institution. I hadn’t read the paper when I wrote that first blog post, and I was amazed by their results. Recall that they had this unexpected result where changing contexts for subgoal labeling worked better (i.e., led to better performance) for students than keeping students in the same context. The weird contextual-transfer problems that they’d seen previously went away in the second (follow-on) CS class — see below snap from their slides. The weird result was replicated in the first class at this new institution, so we know it’s not just one strange student population, and now we know that it’s a novice problem. That’s fascinating, but still doesn’t really explain why. Even more interesting was that when the context transfer issues go away, students did better when they were given subgoal labels than when they generated them. That’s not what happens in other fields. Why is CS different? It’s such an interesting trail that they’re exploring!  Mike Hewner and Shitanshu Mishra replicated Mike’s dissertation study about how students choose CS as a major, but in Indian institutions rather than in US institutions: When Everyone Knows CS is the Best Major: Decisions about CS in an Indian context. The results that came out of the Grounded Theory analysis were quite different! Mike had found that US students use enjoyment as a proxy for ability — “If I like CS, I must be good at it, so I’ll major in that.” But Indian students already thought CS was the best major. The social pressures were completely different. So, Indian students chose CS — if they had no other plans. CS was the default behavior. One of the more surprising results was from Thomas W. Price, Neil C.C. Brown, Dragan Lipovac, Tiffany Barnes, and Michael Kölling, Evaluation of a Frame-based Programming Editor. They asked a group of middle school students in a short laboratory study (not the most optimal choice, but an acceptable starting place) to program in Java or in Stride, the new frame-based language and editing environment from the BlueJ/Greenfoot team. They found no statistically significant differences between the two different languages, in terms of number of objectives completed, student frustration/satisfaction, or amount of time spent on the tasks. Yes, Java students got more syntax errors, but it didn’t seem to have a significant impact on performance or satisfaction. I found that totally unexpected. This is a result that cries out for more exploration and explanation. There’s a lot more I could say, from Colleen Lewis’s terrific ideas to reduce the impact of CS stereotypes to a promising new method of expert heuristic evaluation of cognitive load. I recommend reviewing the papers while they’re still free to download."
"309","2020-06-17","2023-03-24","https://computinged.wordpress.com/2020/06/17/why-do-students-study-computing-especially-programming/","Alan Kay asked me in a comment on my blog post from Monday: You and your colleagues have probably done a survey over the years, but it would be useful to see one or two examples, and especially one from the present time of “why are you currently studying computing, especially programming?” It would be illuminating — and very important — to see the reasons, and especially the percentage who say: “to learn and understand and do computing and programming”. A half-dozen papers sprang to mind. Rather than type them into a teeny tiny response box, I’m going to put them here. This is not a comprehensive survey. It’s the papers that occurred to me at 8:30 am EDT in response to Alan’s query. The biggest recent study of this question is the Santo, Vogel, and Ching white paper CS for What? Diverse Visions of Computer Science Education in Practice (find it here). This paper is particularly valuable because it starts K-12 — what are the reasons for studying CS in school? The most recent paper I know on this topic (and there were probably new ones at RESPECT and SIGCSE 2020 that I haven’t found yet) is this one from Koli, It’s like computers speak a different language: Beginning Students’ Conceptions of Computer Science (find it here). I liked this one because I most resonated with the “Creator” perspective, but I design today for those with the “Interpreter” perspective. Alan particularly asked what we had done in our group. We started asking these questions when we were doing Media Computation (here’s a 2005 paper where we got those answers from Georgia Tech and Gainesville College students — GT students mostly wanted to know how to use a computer better and then get a good grade, while Gainesville students wanted to know what programming was). We got different answers from the follow-on course MediaComp Data Structures course where we started seeing a real split in views (see Lana Yarosh’s paper here). When we were doing “Georgia Computes!”, we did a statewide survey in 2010 to understand influences on students’ persistence in CS (see paper here). This is important to read, to realize that it’s not just about ability and desire. Women and BIPOC students are told that they don’t belong, and they need particular attention and encouragement to get them to go on, even if they believe they could and should. Probably the study from my group most explicitly on this question is Mike Hewner’s Undergraduate conceptions of the field of computer science (see paper here). Two of my former students, but not with me, developed a validated computing attitudes survey (Tew, Dorn, and Schneider, paper here). Here, they ask experts what CS is, then use the same instrument to ask students what CS is, so that they can compare how “expert-like” the students answers are. Not from my research group, but a really important paper in this space is Maureen Biggers et al’s Student perceptions of computer science: a retention study comparing graduating seniors with CS leavers (see link here). Most studies look at those who stay in CS. Maureen and her team also interviewed those who left, and how their perception of the field differed. There are so many others, like the “Draw a Computer Scientist” task to elicit what the field is about (see example paper here and here). I particularly like Philip Guo’s groups paper on “conversational programmers” — people who study programming so that they can talk to programmers, not to ever program or to understand programming (see CHI’16 paper here). Here’s what I think is the main answer to Alan’s question: Yes, it’s changed. But there are some specific answers that are consistent. Yes, some want to learn programming. Others want to learn programming as part of general computer skills. I’m going to stop here and push this out before my meetings start for the day. I invite readers to add their favorite papers answering this question below."
"310","2018-09-24","2023-03-24","https://computinged.wordpress.com/2018/09/24/the-backstory-on-barbie-the-robotics-engineer-what-might-that-change/","Professor Casey Fiesler has a deep relationship with Barbie, that started with a feminist remix of a book. I blogged about the remix and Casey’s comments on Barbie the Game Designer in this post. Now, Casey has helped develop a new book “Code Camp with Barbie and Friends” and she wrote the introduction. She tells the backstory in this Medium blog post. In her essay, Casey considers her relationship with Barbie growing up: I’ve also thought a lot about my own journey through computing, and how I might have been influenced by greater representation of women in tech. I had a lot of Barbies when I was a kid. For me, dolls were a storytelling vehicle, and I constructed elaborate soap operas in which their roles changed constantly. Most of my Barbies dated MC Hammer because my best friend was a boy who wasn’t allowed to have “girl” dolls, and MC was way more interesting than Ken. I also wasn’t too concerned about what the box told me a Barbie was supposed to be; otherwise I’d have had to create stories about models and ballerinas and the occasional zookeeper or nurse. My creativity was never particularly constrained, but I can’t help but think that even just a nudge — a reminder that Barbie could be a computer programmer instead of a ballerina — would have influenced my own storytelling. I’ve been thinking about how Barbie coding might influence girls’ future interest in Tech careers. I doubt that Barbie is a “role model” for many girls. Probably few girls want to grow up to be “like Barbie.” What a coding Barbie might do is to change the notion of “what’s acceptable” for girls. In models of how students make choices in academia (e.g., Eccles’ expectancy-value theory) and how students get started in a field (e.g., Alexander’s Model of Domain Learning), the social context of the decision matters a lot. Students ask themselves “Do I want to do this activity and why?” and use social pressure and acceptance to decide what’s an appropriate class to take. If there are no visible girls coding, then there is no social pressure. There are no messages that programming is an acceptable behavior. A coding Barbie starts to change the answer to the question, “Can someone like me do this?”"
"311","2016-06-29","2023-03-24","https://computinged.wordpress.com/2016/06/29/mattels-game-developer-barbie-is-fantastic/","Casey Fiesler and Miranda Parker did a wonderful remix of the original computer engineer Barbie (see Guardian article about that). Great to see that Mattel did a better job the next time around, and Casey loves it. I love the point she makes below, which echoes a concern I’ve voiced about open source software. This is particularly important is because as much as we don’t want to suggest that girls can’t code, we also don’t want to suggest that coding is the only path to working with computers or games. Sometimes other parts of computing—like design or human-computer interaction—are delegitimized, considered less rigorous or less important. Or maybe they’re delegitimized in part because they happen to be the parts of computing where there are more women present (in other words, more inclusive), which is even worse. Source: Mattel’s Game Developer Barbie is fantastic."
"312","2014-09-17","2023-03-24","https://computinged.wordpress.com/2014/09/17/the-open-source-identity-crisis-limiting-the-potential-for-legitimate-peripheral-participation/","An interesting new piece on identity within the open source community. Noah Slater addresses a concern that I have, that the definition of contribution in open source communities limits the opportunity for legitimate peripheral participation. Perhaps the most obvious way in which the hacker identity has a hold over the open source identity is this notion that you have to code to contribute to open source. Much like technical talent is centered in the tech industry, code is seen as the one true way to contribute. This can be such a powerful idea that documentation, design, marketing, and so on are often seen as largely irrelevant. And even when this isn’t the case, they are seen as second class skills. For many hackers, open source is an escape from professional environments where collaboration with these “lesser”, more “mainstream” activities is mandatory. via The Open Source Identity Crisis, by Noah Slater | Model View Culture."
"313","2020-07-30","2023-03-24","https://computinged.wordpress.com/2020/07/30/proposal-3-to-change-cs-education-to-reduce-inequity-call-a-truce-on-academic-misconduct-cases-on-programming-assignments/","I participated in a Black Lives Matter protest in Ann Arbor a few weeks ago, where I first heard the slogan “Defund the Police.” I was immediately uncomfortable. The current model for police in the US may be broken, but the function of the police is important. But the more I learned, the more I became more comfortable with the idea. As this NYTimes article suggests (see link here), the larger notion gaining support in the US is that we need a reinvestment. We want to spend less on catching criminals, and more on supporting community health and welfare. That’s when I realized what I wanted for my third and final proposal to change CS education to reduce inequity. This is my four and last post in a series* about how we have to change how we teach CS education to reduce inequity. The series has several inspirations, but the concrete one that I want to reference back to each week is the statement from the University of Maryland’s CS department about improving diversity, equity, and inclusion within their department: Creating a task force within the Education Committee for a full review of the computer science curriculum to ensure that classes are structured such that students starting out with less computing background can succeed, as well as reorienting the department teaching culture towards a growth mindset Paul Kirschner, John Sweller, and Richard Clark have been writing a series of controversial and influential papers in educational psychology. The most cited (in Educational Psychologist) lays out the whole premise in its title “Why minimal guidance during instruction does not work: An analysis of the failure of constructivist, discover, problem-based, experiential, and inquiry-based teaching” (see link here). Another, in American Educator, is a more accessible version “Putting students on the path to learning: The case for fully guided instruction” (see link here). A quick summary of the argument is that learning is hard, and it’s particularly hard to learn if you are trying to “figure things out” or “problem-solve” at the same time. In fact, it’s so hard that, unless you tell students exactly what you want them to learn, the majority of your students probably won’t learn it. Computer scientists are big believers in discovery learning. I’ve had a senior faculty member in my department tell me that, if they gave students feedback from the unit tests (vs. a binary passed/failed) used in autograding, “we would be stealing from students the opportunity to figure it out for themselves.” I have been interviewing teaching assistants for the Fall. They tell me that if I made my class harder, so students have to struggle more to figure out the programming assignments, they would learn more and retain it longer. I know of little evidence for these beliefs, and none in CS education. Telling students leads to more students learning and learning more efficiently than making them figure it out. Efficiency in learning does matter, especially when we are talking about students who may have competing interests for their time (like a job) and during the stress of a pandemic. Learning requires challenge, but too much cognitive load reduces learning. My guess is that we believe in the power of struggle because it’s how many of us learned computing. We struggled to figure out undocumented systems, to make things work, and to figure out why they worked. We come away with a rationalization that the process of discovery, without a teacher or guidance, is what led to our learning. The problem is that for experts and high-ability/highly-motivated learners, we like to learn that way. We want to figure it out for ourselves. There is a motivational (affective) value for discovery. However, the available evidence suggests that our belief in discovery is a mirage, a cognitive illusion, a trick we play on ourselves. We don’t learn best by discovery. What’s worse, by forcing more students to learn by discovery, we will likely drive away the less prepared, the less motivated, and the less able students. That’s the point of this series of blog posts. We as CS teachers make decisions that often emphasize how we wanted to be taught and how our top students want to learn. That is inequitable. We need to teach “such that students starting out with less computing background can succeed.” Clark, Kirschner, and Sweller describe how we should be teaching to be most effective and efficient: Teachers providing explicit instructional guidance fully explain the concepts and skills that students are required to learn. Guidance can be provided through a variety of media, such as lectures, modeling, videos, computer-based presentations, and realistic demonstrations. It can also include class discussions and activities—if the teacher ensures that through the discussion or activity, the relevant information is explicitly provided and practiced. In a math class, for example, when teaching students how to solve a new type of problem, the teacher may begin by showing students how to solve the problem and fully explaining the how and why of the mathematics involved. Often, in following problems, step-by-step explanations may gradually be faded or withdrawn until, through practice and feedback, the students can solve the problem themselves. In this way, before trying to solve the problem on their own, students would already have been walked through both the procedure and the concepts behind the procedure. Programming assignments are the opportunities to practice in this model, not the time to “figure it out for themselves” and not the time to assess learning or performance. In explicit instruction in programming, the teacher tells the student exactly what to do to solve a programming problem. Tell them how to solve the problem, and let them practice the same problem. (Better yet, give students worked examples and practice interleaved, as we do in our ebooks.) Programming is a great place for learning, since it provides feedback on our tests and hypotheses. Students should be encouraged to engage in programming practice. The way we do that is by giving points towards grades. We should probably give more points for correct solutions, because that creates desirable incentives. But being able to program does not indicate understanding. The recent ITiCSE 2020 paper by Jean Sala and Diana Franklin showed that use of a given code construct was not correlated well with understanding of that code construct (see paper here). It’s also the case that students may understand the concept but can’t make it work in code. As I was writing this blog post, the ACM SIGCSE-Members email list had a (yet another!) great thread on how to reduce cheating in CS1. The teachers on the list were torn. They want to support student learning, but they don’t want to reward cheaters. Many echoed this same point — that programming assignments have to be an opportunity for learning, not a summative assessment. We need to separate learning and assessment activities. Most programming should be a learning opportunity, and not a time to assess student learning. I suppose we might have a special programming assignment labelled, “This one is under exam conditions,” and then it’s clear that it should be done alone and for assessment. I don’t encourage trying to make those kinds of distinctions during remote teaching and learning. I completely understand the reason for plagiarism detecting and prosecution on exams and quizzes. Those are assessment activities, not learning activities. We should evaluate the students’ programs and give them feedback on them. Feedback improves learning. It shouldn’t be about punishing students who struggle with or even fail at the programs — programming should be part of a learning process. One of our biggest myths in computer science is that the only way to test students’ knowledge of programming is by having them program. Allison Elliott Tew showed that her FCS1 correlated highly with the final exam scores of the students from four courses at two universities who were part of her study (see post here, with diagram of this scatterplot). Her test (all multiple choice) was predicted the grade of the semester’s worth of programming assignments, quizzes, and tests. Over the years, I’ve attended several AP CS presentations from psyshometricians from ETS. Every time, they show us that they don’t need students to program on the AP CS exams. They can completely predict performance on the programming questions from the multiple choice questions. We can measure the knowledge and skill of programming without having students program. Of course, it’s easier to tell the students to program, as a way of testing their programming knowledge. However, it’s not an effective measurement instrument (understanding and coding ability are not equivalent), it’s inefficient (takes more time than a test), and it creates stress and cognitive load on the students. (I recommend the work by Kinnunen and Simon on how intro programming assignments depress students’ self-efficacy.) We can and should build better assessments. For example, we could use Parsons problems which are more sensitive measures of understanding about programming than writing programs (see blog post). We want students to program, and most of our students want to program. Our focus should be on improving programming as a learning activity, not as a form of assessment. Here’s the big ask, Stop prosecuting students for academic misconduct if you detect plagiarism on programming assignments. My argument is just like the policing argument — we should be less worried about catching those who will exploit the opportunity to get unearned points, and more worried about discouraging students from collaboration that will help them learn. We already have inequality in our classrooms. During the pandemic, the gap between the most and less prepared students will likely grow. We have to take specific actions to close that gap and always in favor of the less-prepared students. Notice that I did not say “stop trying to detect plagiarism.” We should use tools like MOSS to look for potential cheating. But let’s use any detection of plagiarism as an opportunity to learn, and maybe, as a cry for help. Why do students cheat on programming assignments? There’s a body of literature on that question, but let me jump to the critical insight for this moment in time: All those reasons will be worse this year. Some students cheat because they think that they have to. “If I don’t cheat and everyone else does, I’m at a disadvantage.” That’s only true if student grades are comparative. That’s why Proposal #2 is a critical step for Proposal #3 — stop pre-allocating, curving, or rationing grades. Use grades to reward learning, not “rising above your peers.” I worry about us encouraging cheating. The pressures that Feldman identifies as exacerbating cheating will be even greater in all-online learning: For example, we lament our students’ rampant cheating and copying of homework. Yet when we take a no-excuses approach to late work in the name of preparing students for real-world skills and subtract points or even refuse to accept the work, we incentivize students to complete work on time by hook or by crook and disincentivize real learning. Some common grading practices encourage the very behaviors we want to stop. If you detect plagiarism, contact the student. Tell them what you found. Ask them what happened. Ask how they’re doing. Are they getting lost in the class? Use this as an opportunity to explain what illicit collaboration is. Use this as an opportunity to figure out how you’re teaching and what’s going on in the lives of your students. This will be most effective for your first-generation students and your students who are in a minority group. They would likely feel alone, isolated, and invisible even in the in-person class. It’s going to be worse in remote teaching. They are less likely to reach out for help in office hours. Let them know that you’re there and that you care. Last year, I was in charge of “cheat finding” for a large (over 750 students) introductory programming course. In the end, we filed academic misconduct accusations for about 10% of the class (not all of whom were found guilty by the Honor Council). It was a laborious, time-consuming task — gathering evidence, discussing with the instructional team, writing up the cases, etc. We should have spent that time talking to those students. We would have learned more. They would have learned more. It would have been a better experience for everyone. Let’s change CS teaching from being about policing over plagiarism, to being about student health, welfare, and development. * This will be last post for awhile. I’m taking a hiatus from blogging. This series on CS teaching to reduce inequity is my “going out with a bang.” "
"314","2020-07-27","2023-03-24","https://computinged.wordpress.com/2020/07/27/proposal-2-to-change-cs-education-to-reduce-inequity-stop-allocating-rationing-or-curving-down-grades/","What does an “A” mean in your course? The answer likely depends on why you teach. Research on teacher beliefs suggests that grading practices are related to teachers’ reasons for teaching. Joe Feldman points out that our grading relates to who we are as teachers, and it is passionately held: Conversations about grading weren’t like conversations about classroom management or assessment design, which teachers approached with openness and in deference to research. Instead, teachers talked about grading in a language of morals about the “real world” and beliefs about students; grading seemed to tap directly into the deepest sense of who teachers were in their classroom. I’ve used the Teacher Perspectives Inventory (TPI) (see link here) with dozens of CS teachers. The most common teaching perspective I see among CS teachers is “Apprenticeship.” CS faculty see themselves as preparing future software developers. They value demonstrating and modeling good software practices. An “A” for an apprenticeship teacher is likely to indicate that the student produces good code. An “A” is reserved for “excellence” (as one CS teacher told me recently). An “A” indicates that the student has risen above his or peers in producing “high quality products” (as another CS teacher posted on Facebook recently). An “A” means that, in this teacher’s opinion, the student is recommended to go on to a highly-desired software development job, perhaps at a place like Google or Amazon. A student with less computing background is much less likely to earn an “A” in an Apprenticeship-oriented class. If you bring more experience to the table, you have a head start on producing higher-quality products than other students in the class. Their products are more likely to be marked as “excellent.” In my opinion, the teacher attitude of “rugged individualism” defined in SIGCSE 2020 paper by Hovey, Lehmann, and Riggers-Piehl “Linking faculty attitudes to pedagogical choices” meshes with the TPI category of “Apprenticeship.” “Rugged individualism” teachers believe that “learning and success are the individual student’s responsibility.” (Hovey et al did not make this claim or compute the correlation — this is my prediction.) They showed that teachers who believe in “rugged individualism” are less likely to use student-centered teaching practices and more likely to lecture. Students with less computing background do better with student-centered teaching practices. This is my third post in a series about how we have to change how we teach computing to reduce inequity (see last post). The series has several inspirations, but the concrete one that I want to reference back to each week is the statement from the University of Maryland’s CS department: Creating a task force within the Education Committee for a full review of the computer science curriculum to ensure that classes are structured such that students starting out with less computing background can succeed, as well as reorienting the department teaching culture towards a growth mindset The style of grading that means to identify “talent” or “excellence” is inherently inequitable. It presumes a fixed mindset. If you believe that there is a random distribution of “talent” or “ability” or “Geek Gene” in the course, and (critically), there’s nothing much that teaching can do to change that, then it makes sense to grade to the curve. There can be only a few “A” slots, more “B” slots, and so on. Empirical evidence suggests the opposite — good teaching can trump a lot of other factors. Belief in a growth mindset leads to better learning outcomes and better performance. If we value teaching, and believe that students can get better at computer science, then over time, we should teach better and students should learn more. If students learn more, they should get a higher grade It’s not a fixed-result game. My teacher perspective is that we are in the job of maximizing individual human development. It’s our job to help each student achieve as much as they can within our discipline. We should measure achievement in terms of learning, not product quality. I tend to align with the “nurturing” perspective on the TPI, but that’s not what I’m going to argue for here. It is not at all the same thing to grade for excellence and to grade for learning. Writing code isn’t the same as learning. We have evidence that writing a given piece of code is not indicative of understanding that piece of code. The recent ITiCSE 2020 paper by Jean Sala and Diana Franklin showed that use of a given code construct was not correlated well with understanding of that code construct (see paper here). I mentioned in the last post that I’m reading Grading for Equity by Joe Feldman (see his website here). He points out all the other factors that influence grades that have nothing to do with learning. Some of these extra-curricular factors — like the ability to meet deadlines that presume privileged, full-time student status without outside pressures — are less likely for Black, Hispanic, poorer, or first-generation college students. These factors influence the production of high-quality code even more than they influence learning. These pressures are going to be even greater during a time of a pandemic. We should give grades depending how much is learned in a given course. That’s hard to do without measuring students as they enter the course and as they leave the course, and grading on the delta. There is a movement suggesting that “labor-based grading” leads to more compassionate and equitable grading (see article here). I’m not arguing for that. I’m arguing that we aim for a Teaching Perspective most closely aligned with the one called “Transmission.” The goal of a Transmission teacher is for students to learn what is needed for the next course or to meet the course objectives. Assessments of understanding should be as objective as possible. Grades should represent achievement of the learning objectives and nothing else. There is a lot in any given CS course that is not about preparing students for the next course in the sequence. We cover a lot of material. In some courses, we’re preparing students for the imagined technical interview with Google or Amazon. That’s not fair to require understanding and performance on standards that go beyond the course objectives. I recommend setting the objectives clearly, announcing them on the first day, and grading to those. It’s okay to aim for the targeted average on each assignment to be low but passing (e.g., a “C”), as long as you’re clear and fair. In my classes, I rely heavily on weekly quizzes because those are more likely to lead to learning (see post here). I give points for writing code, but that’s to encourage the activity, not to make-or-break the students’ grade. Programming is for learning, and the quizzes, midterm, and final exam are assessments. Students with a lot of computing background get an easy “A” in my courses. That’s fine. I expect that. I explicitly tell my students that I teach to the bottom third of the course. I want to move B and C students up into A’s and B’s. I give out a lot of A’s. In years past, I did a series of blog posts on “Boredom vs Failure” (here’s the first post in the series, and here’s the last one). The question is: which is worse, to bore and give easy A’s to the most privileged and most prepared students, or to fail (or discourage to the point that they drop) the students with less privilege and the least computing background? Think about the students who might fail or drop out in a system that makes sure that the most well prepared students are challenged. Each one of those students who continues on does more to change the status quo than does keeping the more privileged students from getting bored. Helping the students with less computing background succeed makes a much bigger difference for society long-term than does keeping entertained the most privileged students. One response to this proposal is that I’m degrading the value of past A’s. The A’s don’t mean the same thing anymore. That’s true. I take a historical perspective. Those A’s were earned when the students with less computing background were not being taught with methods that helped them succeed (Proposal #1). Those A’s were earned in unfair competition, where the students with prior computing background were compared to students with less computing background. I’m proposing a more just system where the students with less computing background have a chance at the highest grades, where they’re taught in ways that meet their needs, and where their teachers believe that they can grow and improve. I’m not particularly concerned about preserving the past glories of those who won in an unjust system. If we pre-allocate, ration, or otherwise curve “down” grades so that the top scores are a scarce resource in a competitive system, we are privileging the most prepared students and disadvantaging the least prepared students. I am proposing differentiated instruction. Teach explicitly for the least-prepared students. You will likely have to give up on pushing your top students to greater excellence — that’s the kind of privilege which we have to be willing to surrender. Aim to help every student achieve their potential, and if you have to make a choice, make choices in favor of the students with less privilege and less computing background."
"315","2017-07-26","2023-03-24","https://computinged.wordpress.com/2017/07/26/helping-students-succeed-in-ap-cs-gt-computing-undergraduate-female-rising-up-to-challenge-in-cs/","There’s a common refrain heard at “CS for All” and BPC events in the US these days. “AP CS A is just terrible. AP CS Principles will fix everything.” The reality is that there are bad AP CS A classes, and there are good ones. There is evidence that just having good curricula doesn’t get you more and more diverse students. The more important reality is that AP CS A accurately matches most introductory computer science classes in the United States. If you want students to succeed at the CS classes that are in our Universities today, AP CS A is the game to play at high school. That’s why Barbara’s Rise Up programs are so important. She’s helping female and African-American students succeed in the CS that’s in their schools and on University campuses today. And she’s having tremendous success, as seen in the story below about a female high school football player who is now a CS undergraduate. Barbara’s work is smart, because she’s working with the existing CS infrastructure and curricula. She’s helping students to succeed at this game, through a process of tutoring and near-peer mentoring. This is a strategy to get more female CS undergraduates.  That’s when she discovered Sisters Rise Up 4 CS, a relatively new program developed in Fall 2014 at Georgia Tech by Barbara Ericson. The program was based on Project Rise Up 4 CS, which aims to help African-American students pass the AP Computer Science A exam. Sisters Rise Up does the same for females.The program offers extra help sessions in the form of webinars and in-person help sessions, near-peer role models, exposure to a college campus, and a community of learners.“The program helped me get hooked on computer science,” Seibel said. “I started to actually learn. Seeing that some of the girls in the program had interned at Google or other places like that, and that they really loved CS, it gets you excited about it. They were only a few years older than me, and I was like, ‘Oh. That could be me.’” Source: GT Computing Undergraduate Sabrina Seibel Rising Up to Challenge in CS | College of Computing"
"316","2017-07-12","2023-03-24","https://computinged.wordpress.com/2017/07/12/concerns-about-computing-in-englands-schools-is-access-really-enough/","The most amazing and somewhat depressing session I attended at CAS 2017 was the presentation by Peter Kemp on the Roehampton report, a detailed analysis of what’s going on with computing education in England. As a computing education researcher, I was frankly jealous. They have access to data that I cannot get in the US — for the whole country: demographics, attendance in CS classes, outcomes on tests, family income, and schools and districts that offer CS. Even if you just read the Key Findings (executive summary), you’ll need a bit of translation if you’re not familiar with the UK system. I’m going to generalize and interpret some of the findings in the Roehampton report: The number of students per course in A-levels in computing too low to be sustainable #CASconf17 pic.twitter.com/51Mb4Bd4t2 — Mark Guzdial (@guzdial) June 17, 2017  What’s worse, as described in the BBC article linked below, is that ICT is going away and computer science is not growing rapidly. In the end, there may be less computing for English students than before the new CS curriculum. There are many explanations for these results. People at CAS who were involved in developing the new CS curriculum told me that they didn’t want to swap out ICT for CS. They wanted both, but the decision was made to have rigorous CS instead of digital literacy. I found this timeline interesting. Though obviously biased in favor of ICT, the author has a good point. Maybe students and teachers don’t want coding. I’m wondering about the meaning for the US and the rest of the world. The CAS movement is ahead of many national efforts to provide computing in primary and secondary schools for all students. Part of the belief of the AP CSP and CS for All movements in the US has been that if you have good curriculum and well-prepared teachers, schools will want to teach CS and kids (of all demographic groups) will want to take CS. CAS offers terrific curriculum and high-quality professional development (see their Tenderfoot materials, for example). And yet, one hypothesis that explains the given data is that English students prefer digital literacy to computer science. Maybe we have been wrong in how we go about computing education. Maybe access and curriculum aren’t enough. If students and teachers have prior negative conceptions about CS and coding, maybe the excellent curriculum and professional development from CAS is not enough to draw in the students nor to convince the schools to offer CS. Why should we expect it to be different in the US? Is it enough that President Obama made CS for All a personal initiative? Or do stories about sexism in the IT industry counteract that? I’m dismayed that American CS faculty are pushing against recruiting women or making a special effort to retain them (see comments at CACM). It’s not clear that it will be different in the US. The old ICT course, which was the main way school students learned about computing, is being scrapped, with the last GCSE entrants taking the exam next year. The subject, which was described by critics as teaching little more than how to use Microsoft Office, is being replaced by the more rigorous computer science GCSE. But figures from Ofqual showing entries for the exam rising to 67,800 this year from 61,220 in 2016 have set alarm bells ringing. With 58,600 still taking the ICT exam, the overall number getting a GCSE computing qualification has fallen slightly. The British Computing Society says that when ICT disappears, the computer science exam will fail to fill the gap. “If we don’t act now,” says Bill Mitchell from the BCS, “by 2020 we are likely to see the number of students studying computing at GCSE halve, when it should be doubling. If that happens, it will be a disaster for our children, and the future of the nation.” Source: Computing in schools – alarm bells over England’s classes – BBC News"
"317","2016-09-14","2023-03-24","https://computinged.wordpress.com/2016/09/14/new-progress-and-momentum-in-support-of-president-obamas-computer-science-for-all-initiative/","Ruthe Farmer at the Office of Science and Technology Policy (OSTP) has been working furiously towards today’s announcements. The Obama Administration is aiming to achieve the goal of CSforAll, and with only a few months left before the new Administration takes off, they’re showing what they’ve put in place today. The full details on all the announcements are here. There’s a webcast at 1 pm EDT today here. The biggest deal to me is the establishment of the CSforAll Consortium (see website here) which is meant to carry on the initiative, no matter who wins in November. To mark this progress, and celebrate new commitments in support of the President’s initiative, the White House is hosting a summit on Computer Science for All. Key announcements being made today include: More than $25 million in new grants awarded from the National Science Foundation (NSF) to expand CS education; A new CSforAll Consortium of more than 180 organizations, which will connect stakeholders with curriculum and resources, as well as track progress towards the goal of Computer Science for All; and New commitments from more than 200 organizations, ranging from expanded CS offerings within the Girl Scouts of the USA that could reach 1.4 million girls per year, to Code.org supporting professional development for 40,000 additional teachers, to new collaborations to bring CS to students in a variety of settings from African-American churches to family coding nights to tribal Head Start programs to students as Chief Science Officers. Source: Fact Sheet: New Progress and Momentum in Support of President Obama’s Computer Science for All Initiative | whitehouse.gov"
"318","2017-04-14","2023-03-24","https://computinged.wordpress.com/2017/04/14/report-from-jan-cuny-on-computer-science-education-for-everyone-a-groundswell-of-support/","Jan Cuny wrote a blog post about where we are in the effort to provide CS education to everyone. Next month is important for the CS for All effort — the first offering of the AP CS Principles exam is May 5. Last I heard, over 46,000 students had turned in materials for their digital portfolios as part of the AP CSP exam. I’m eager to hear how many actually take it! Progress has been dramatic. Many school districts and states now require CS in all K-12 schools – examples include New York City, San Francisco, Broward County (FL), Rhode Island, Virginia, and in 2016, Chicago became the first major district to make CS a graduation requirement. Also in 2016, a new organization — CSforAll.org— formed to build community among national stakeholders and provide resources for parents, teachers, school districts, and education researchers. And the new AP CSP officially launched this year with 2,700 teachers, putting it on track to be the largest AP launch ever. Source: Infosys Foundation USA – Media | Blog | Computer Science Education for Everyone: A Groundswell of Support"
"319","2014-09-14","2023-03-24","https://computinged.wordpress.com/2014/09/14/guest-post-by-joanna-goode-on-cs-for-each/","I wrote a blog post recently about Joanna Goode promoting the goal of “CS for Each.” Several commenters asked for more details. I asked Joanna, and she wrote me this lovely, detailed explanation. I share it here with her permission — thanks, Joanna! To answer, we as CS educators want to purposefully design learning activities that build off of students’ local knowledge to teach particular computer science concepts or practices. Allowing for students to integrate their own cultural knowledge and social interests into their academic computational artifacts deepens learning and allows for students to develop personal relationships with computing. More specifically, computer science courses lend themselves well for project-based learning, a more open-ended performance assessment that encourages student discretion in the design and implementation of a specified culminating project. Allowing students to use a graphical programming environment to create a Public Service Announcement of a topic of their choice, for example, is more engaging for most youth than a one-size-fits-all generic programming assignment with one “correct” answer. Along with my colleagues Jane Margolis and Jean Ryoo, we recently wrote a piece for Educational Leadership (to be published later this year) that uses ExploringCS (ECS) to show how learning activities can be designed to draw on students’ local knowledge, cultural identity, and social interests. Here is an excerpt: The ECS curriculum is rooted in research on science learning that shows that for traditionally underrepresented students, engagement and learning is deepened when the practices of the field are recreated in locally meaningful ways that blend youth social worlds with the world of science[.1] Consider these ECS activities that draw on students’ local and cultural knowledge: Each ECS unit concludes with a culminating project that connects students’ social worlds to computer science concepts. For example, in unit two they connect their knowledge of problem solving, data collection and minimal spanning trees to create the shortest and least expensive route for showing tourists their favorite places in their neighborhoods. [1] Barton, A.C. and Tan, E. 2010. We be burnin’! Agency, identity, and science learning. The Journal of the Learning Sciences, 19, 2, 187-229. [2] Eglash, Ron. Culturally Situated Design Tools. See: See: csdt.rpi.edu"
"320","2014-08-14","2023-03-24","https://computinged.wordpress.com/2014/08/14/moving-from-cs-for-a-few-to-cs-for-all-to-cs-for-each/","Really interesting point from Joanna Goode. “CS for All” should not mean “One Kind of CS that All have to take.” Her notion of “CS for Each” goes further than the multiple CS1’s that we have at Georgia Tech. Seymour Papert talked about the value of a personal relationship with a discipline, and I think that’s the direction that Joanna is steering us. But, as all the students gain access to computer science learning, teachers are charged with the task of teaching each student based on the lived experiences, prior knowledge, and the wonders of the world that the child brings to the classroom. Developing a computer science classroom that welcomes each child requires a culturally responsive pedagogy that views diversity as a strength that should be integrated within the curriculum. Additional instructional supports for English language learners and students with disabilities should be developed and shared to support teachers in a CS for Each model. via Computer Science Teachers Association: Moving From “CS for a Few” to “CS for All” to “CS For Each”."
"321","2021-05-06","2023-03-24","https://computinged.wordpress.com/2021/05/06/seeking-collaborators-for-a-study-of-impostor-phenomenon-in-computer-science-guest-blog-post-from-leo-porter/","Impostor Phenomenon (IP)** is often described as high-achieving individuals experiencing feelings of intellectual phoniness. Based on the research conducted in various fields with different populations over the past four decades, we know that IP causes problems for those who experience it, including being associated with anxiety and depression. In computer science, we often hear our colleagues and students talking about their struggles with IP. There are panels on IP at Grace Hopper and other conferences aimed at helping members of our community cope with these feelings. But how prevalent is it in CS? An informal survey conducted by Blind asked participants to self-report their feelings of IP, and among the 10,000 software engineers who participated, 58% reported feelings of IP [5]. However, self-reporting isn’t necessarily an accurate way to measure IP. In a pilot study at UC San Diego, we used the Clance IP scale [1], a validated instrument that is used in the majority of studies to measure IP. After administering the Clance IP scale in upper-division and graduate CS courses, we found that 57% of participants met the diagnostic criteria for experiencing IP [7], which was quite similar to that earlier reported finding from Blind. What was most concerning about our results was the differences for gender among the students: 52% of men met the diagnostic criteria whereas 71% of women did. That’s a huge (and statistically significant) difference! But what does this mean? We can look at results from other studies and see that computer science seems to have higher rates of students who experience IP than in fields like health professionals (31%) [4], undergraduates studying education (28%) [3], undergraduates in business related fields (39%) [8], and undergraduates from racially underrepresented group studying educational psychology (48%) [2]. This suggests that CS may be an outlier with our students struggling more with IP than other fields. However, a recent study among medical students [6] reported similar results to what we found in CS, suggesting computing might not be alone. Before we begin asking questions of why CS (and perhaps also medicine) might be outliers, we need to conduct a replication study to verify (or refute) these initial findings from just a single institution. To that end, we’re putting out a call for other researchers to help participate in a large-scale replication effort to answer these questions: What is the rate of IP among students in computer science courses? Does the rate of IP change as students move farther through the curriculum? Are students from underrepresented groups in computer science more likely to experience IP than those from traditionally represented groups? If you are willing to be participate in this replication effort, please fill out this brief interest form: https://forms.gle/MWYPFnmepWT9nMzNA For those participating, we’ll ask that you administer the instrument in at least one course at your institution. If you are interested, we’ll also invite you to engage in the data analysis and authoring of any related publications. We’ll also help you obtain Human Subjects approval at your institution or leverage our approved protocol at UC San Diego. ** Impostor Phenomenon is the original term [1], however Impostor Syndrome and Impostor Phenomenon are commonly used interchangeably. References"
"322","2021-04-12","2023-03-24","https://computinged.wordpress.com/2021/04/12/embodiment-in-cs-learning-how-space-metaphor-gesture-and-sketching-support-student-learning-amber-solomons-defense/","Amber Solomon defends her dissertation today, co-advised by Betsy DiSalvo and me. I have learned a lot from Amber and her work. She came into her PhD studies with a particular perspective — a question about how we teach CS. She knew about the studies showing that spatial ability is correlated with success in computing. Why is that? Is it because there is something inherently spatial about computing? Or maybe because we are physical beings and come to understand everything in terms of our spatial experiences? Or maybe it’s because of how we teach computing? That last one is concerning. Computing education is new. We haven’t spent enough time checking whether what we are doing is right for everyone — or if what we’re doing creates barriers for some students. In particular, she’s concerned about how we teach and learn with embodiment, i.e., references to space and our physical presence, in language, gesture, and sketching. In general, we don’t design our gestures and metaphors in CS education, maybe in part because Dijkstra warned us not to. That’s a problem. Because gesture has a cultural and social component, and we may inadvertently be teaching in a way that says to some students, “You don’t belong. We don’t use your gestures. We use ours.” Amber’s first project was her study of our augmented-reality design studio for media computation where students’ work was displayed on the walls (see blog post here). One of the surprising outcomes in this project is that it influenced the climate in the classroom — students were more willing to seek help when everyone’s work was on display. The problem of a defensive climate in the classroom is longstanding in CS. Amber showed that changing the environment where we teach can change climate. Amber with Miranda Parker led our SPARCS study, exploring why socioeconomic status (SES) predicts CS performance. In general, rich kids do better in CS than poor kids. Why? They compared two different models for why SES predicted performance on a standardized CS test. One model suggested that higher SES led to greater access to CS education. Rich kids got to take CS classes, camps, and robotics clubs while poorer kids did not. The second model suggested something more subtle — that higher SES predicted greater spatial ability which predicted better performance. That spatial ability model was a better fit to the data. Now consider Amber’s original hypothesis, that spatial ability predicts CS performance because of the way that we teach CS. The SPARCS study raises the possibility that the whole CS Ed system is rigged in favor of higher SES kids at a deep way. Just teaching more classes to lower SES kids won’t make a difference, if those classes are still taught in a way that requires higher spatial ability. Amber’s dissertation asks two big questions: (1) How do teachers use embodiment when they teach CS? (2) How do student use embodiment when they learn CS? Part of the answer to the first question appeared at ICLS last year. I talked about helping with Amber’s coding of student videos in my blog post about Dijkstra. Her summary is below. I’m not going to summarize her whole dissertation here. Here is one example from her defense. She shows a video clip of a teacher explaining a function call. He points to a function definition and says, “Now we come here. I am five. N is five…Do you see what I’m doing?” Read that last sentence imagining that you’ve not had years of CS or mathematics teachers modeling this kind of language. Who are “we” and what does it mean to “come here”? What does he mean that he’s five? Now N is five? Is he N? When he’s saying ‘what I’m doing,’ what is he referring to? Playing the computer, or writing the program, or drawing on the slide? Now imagine hearing that and you have visual disabilities and don’t know that he’s pointing at a function definition. Amber supports a strong claim in her dissertation — we have not designed the language and metaphors of CS education. There’s no way that we CS teachers plan to say things which are that confusing. Throughout her PhD career, Amber has written about her experience of being a Black woman in CS. She taught me what intersectionality is about. I am grateful that she has been both a CS education researcher and activist during her PhD. I am grateful to have had the chance to work with her. Amber Solomon Human-Centered Computing Ph.D. Candidate School of Interactive Computing College of Computing Georgia Institute of Technology Summary: Recently, correlational studies have found that psychometrically assessed spatial skills may be influential in learning computer science (CS). Correlation does not necessarily mean causation; these correlations could be due to several reasons unrelated to spatial skills. Nonetheless, the results are intriguing when considering how students learn to program and what supports their learning. However, it’s hard to explain these results. There is not an obvious match between the logic for computer programming and the logic for thinking spatially. CS is not imagistic or visual in the same way as other STEM disciplines since students can’t see bits or loops. Spatial abilities and STEM performance are highly correlated, but that makes sense because STEM is a highly visual space. In this thesis, I used qualitative methods to document how space influences and appears in CS learning. My work is naturalistic and inductive, as little is known about how space influences and appears CS learning. I draw on constructivist, situative, and distributed learning theories to frame my investigation of space in CS learning. I investigated CS learning through two avenues. The first is as a sense-making, problem-solving activity, and the second is as a meaning-making and social process between teachers and students. In some ways, I was inspired to understand what was actually happening in these classrooms and how students are actually learning and what supports that learning. While looking for space, I discovered the surprising role embodiment and metaphor played while students make sense of computation and teachers express computational ideas. The implication is that people make meaning from their body-based, lived experiences and not just through their minds, even in a discipline such as computing, which is virtual in nature. For example, teachers use the following spatial language when describing a code trace: “then, it goes up here before going back down to the if-statement.” The code is not actually going anywhere, but metaphor and embodiment are used to explain the abstract concept. This dissertation makes three main contributions to computing education research. First, I conducted some of the first studies on embodiment and space in CS learning. Second, I present a conceptual framework for the kinds of embodiment in CS learning. Lastly, I present evidence on the importance of metaphor for learning CS. Date: Monday, April 12th, 2021 Time: 2:00pm – 5:00pm (EDT) Location: Bluejeans Link Meeting URL https://bluejeans.com/182730963?src=joininfo Committee:"
"323","2021-02-15","2023-03-24","https://computinged.wordpress.com/2021/02/15/become-a-better-cs-teacher-by-seeing-differently/","My Blog@CACM post this month is How I evaluate College Computer Science Teaching. I get a lot of opportunities to read teaching statements and other parts of an academic’s teaching record. I tend to devalue quantitative student evaluations of teaching — they’re biased, and students don’t know what serves them best. What I most value are reports of the methods teachers use when they teach. Teachers who seek out and use the best available methods are mostly likely the best teachers. That is what I look for when I have to review College CS teaching records. On Twitter, people are most concerned with my comments about office hours. Computer science homework assignments should not be written expecting or requiring everyone in the class to come to office hours in order to complete the assignment. That’s an instructional design problem. If there are questions that are coming up often in office hours, then the teacher should fix the assignment, or add to lecture, or make announcements with the clarification. Guided instruction beats discovery learning, and inquiry learning is improved with instruction. There is no advantage to having everyone in the class discover that they need a certain piece of information or question answered. My personal experience likely biases me here. I went to Wayne State University in Detroit for undergraduate, and I lived in a northern suburb, five miles up from Eight Mile Road. I drove 30-45 minutes a day each way. (I took the bus sometimes, if the additional time cost was balanced out by the advantage of reading time.) I worked part-time, and usually had two part-time jobs. I don’t remember ever going to office hours. I had no time for office hours. I often did my programming assignments on nights and weekends, when there were no office hours scheduled. If an assignment would have required me to go to office hours, I likely would have failed the assignment. That was a long time ago (early 1980’s) — I was first generation, but not underprivileged. Today, as Manuel pointed out (quoted in this earlier blog post), time constraints (from family and work) are a significant factor for some of our students. Teachers who require attendance at office hours are not seeing the other demands on their students’ lives. Joe Feldman argues that we ought to be teaching for the non-traditional student, the ones who have family and work demands. If we want diverse students in our classes, we have to learn to teach for the students whose experiences we don’t know and whose time costs we don’t see. I’m teaching an Engineering Education Research class this semester on “Theoretical and Conceptual Frameworks for Engineering Education Research.” We just read the fabulous chapter in How People Learn on How Experts differ from Novices. One of the themes is on how experts don’t necessarily make good teachers and about the specialized knowledge of teachers (like pedagogical content knowledge). I started searching for papers that did particularly insightful analyses of CS teacher knowledge, and revisited the terrific work of Neil Brown and Amjad Altadmri on “Novice Java Programming Mistakes: Large-Scale Data vs. Educator Beliefs” (see paper here). Neil and Amjad analyze the massive Blackbox database of keystroke-level data from thousands of students learning Java. They identify the most common mistakes that students make in Java. My favorite analyses in the paper are where they rank these common mistakes by time to fix. An error with curly brackets is very common, but is also very easy to fix. Errors that can take much longer (or might stymie a student completely) include errors with logical operators (ANDs and ORs), void vs non-void return values, and typing issues (e.g., using == on strings vs .equals). The more controversial part of their analysis is when they ask CS teachers what students get wrong. Teachers’ predictions of the most common errors are not accurate. They’re not accurate when considered in aggregate (e.g., which errors did more teachers vote for) nor when considering the years of experience of a teacher. Neil and Amjad contrast their findings with work by Phil Sadler and colleagues showing that teacher efficacy is related to their ability to predict student errors (see blog post here). If one assumes that educator experience must make a difference to educator efficacy, then this would imply that ranking student mistakes is, therefore, unrelated to educator efficacy. However, work from Sadler et al. 2013 in physics found that “a teacher’s ability to identify students’ most common wrong answer on multiple-choice items . . . is an additional measure of science teacher competence.” Although picking answers to a multiple-choice question is not exactly the same as programming mistakes, there is a conflict here—either the Sadler et al. result does not transfer and ranking common student mistakes is not a measure of programming teacher competence, or experience has no effect on teacher competence. The first option seems more likely. (Emphasis added.) I don’t see a conflict in that sentence. I believe both options are true, with some additional detail. Ranking common student compiler mistakes is not a measure of programming teacher competence. And experience has no effect on teacher competence on things they don’t see or practice. Expertise is developed from deliberate practice. We get better at the things we work at. CS teachers certainly get better (become more competent) at teaching. Why would that have anything to do with knowing what compiler errors that Java students are getting? Teachers rarely see what compiler errors their students are getting, especially in higher-education with our enormous classes. When I taught Media Computation, I thought I became pretty good at knowing what errors students got in Python. I worked side-by-side students many times over many years as they worked on their Python programs. But that’s still a biased sample. I had 200-300 students a semester. I might have worked with maybe 10% of those students. I did not have any visibility on what most students were getting wrong in Python. I probably would have failed a similar test on predicting the most common errors in Python based on my personal experience. I’m sure I’d do much better when I rely on studies of students programming in Python (like the study of common errors when students write methods in Python) — research studies let me see differently. Here at the University of Michigan, I mostly teach a user interface software class on Web front-end programming in JavaScript. I am quite confident that I do NOT know what JavaScript errors my students get. I have 260-360 students a semester. Few come to office hours with JavaScript errors. I rarely see anybody’s code. I do see exams and quizzes. I know that my students struggle with understanding the Observer Design pattern and MVC. I know that they often misunderstand the Universal Design Principles. I know that CSS and dealing with Java asynchronous processing is hard because that’s where I most often get regrade requests. There I’ll find that there is some unexpected way to get a given effect, and I often have to give points back because their approach works too. I get better at teaching these things every semester. CS teachers can be expected to become more competent at what they see and focus on. Student compiler errors are rarely what they see. They may see more conceptual or design issues, so that’s where we would expect to see increased teacher competence. To developer teacher competence beyond what we see, we have to rely on research studies that go beyond personal experience. The same principle applies to why we don’t improve the diversity of our CS classes. CS teachers don’t see the students who aren’t there. How do you figure out how to teacher to recruit and retain women and students from Black, Latino/Latina, and indigenous groups if they’re not in your classes? We need to rely on research studies, using others’ eyes and others’ experiences. Our CS classes are huge. It’s hard to see that we’re keeping students out and that we’re sending a message that students “don’t belong,” when all we see are huge numbers. And when we have these huge classes, we want the majority of students to succeed. We teach to the average, with maybe individual teacher preference for the better students. We rarely teach explicitly to empower and advantage the marginalized students. They are invisible in the sea of (mostly male, mostly white or Asian) faces. I have had the opportunity over the last few months to look at several CS departments’ diversity data. What’s most discouraging is that the problem is rarely recruitment. The problem is retention. There were more diverse students in the first classes or in the enrolled population — but they withdrew, failed, or dropped out. They were barely visible to the CS teachers, in the sea of huge classes, and they become completely invisible. We didn’t teach in a way that kept these students in our classes. Our challenge is to teach for those who we don’t easily see. We have to become more competent at teaching to recruit those who aren’t there and retain those students who are lost in our large numbers. We easily become more competent at teaching for the students we see. We need to become more competent at teaching for diversity. We do that by relying on research and better teaching methods, like those I talk about in my Blog@CACM post."
"324","2013-11-29","2023-03-24","https://computinged.wordpress.com/2013/11/29/why-arts-and-social-science-needs-code-testimonials/","Interesting set of testimonials from people in arts and social science on why they have found it useful to learn to code (thanks to Alfred Thompson for the link). Gas Stations Without Pumps has an interesting post based on one of the testimonials. Being able to code to express yourself is one of the most powerful tools available to artists today. Artists should look at programming languages as they do any other medium- watercolor, acrylic, clay- they are all tools to allow you to develop and communicate your vision with your audience. via The Female Perspective of Computer Science: Why Arts and Social Science Needs Code: Testimonials."
"325","2021-07-17","2023-03-24","https://computinged.wordpress.com/2021/07/17/announcing-the-inaugural-illinois-computer-science-summer-teaching-workshop-guest-blog-post-from-geoffrey-challen/","We are excited to invite you to the inaugural Illinois Computer Science Summer Teaching Workshop: https://teaching-workshop.cs.illinois.edu/. The 2021 workshop will be held virtually over two half-days on August 10–11, 2021. The workshop is free to attend, and teaching faculty, research faculty, as well as graduate and undergraduate students are all invited to participate—either by presenting, or by joining the conversation. The deadline to submit an abstract is Tuesday July 20th. Our goal is to bring together college instructors who are engaged with teaching computer science to discuss best practices, present new ideas, challenge the status quo, propose new directions, debunk existing assumptions, advocate for new approaches, and present surprising or preliminary results. This year’s theme is “How the Pandemic Transformed Our Teaching“, allowing participants to reflect on the difficult year behind us as we prepare to return to classrooms next fall. We are excited to welcome Professors Margo Seltzer (UBC), Tiffani Williams (Illinois), Susan Rodger (Duke), Nate Derbinsky (Northeastern), and David Malan (Harvard) as invited speakers."
"326","2021-07-05","2023-03-24","https://computinged.wordpress.com/2021/07/05/there-is-transfer-between-programming-and-other-subjects-because-of-skills-overlap-and-its-not-causal/","A 2018 paper by Ronny Scherer et al. “The cognitive benefits of learning computer programming: A meta-analysis of transfer effects” was making the rounds on Twitter. They looked at 105 studies and found that there was a measurable amount of transfer between programming and situations requiring mathematical skills and spatial reasoning. But here’s the critical bit — it may not be casual. We cannot predict that students learning programming will automatically get higher mathematics grades, for example. They make a distinction between near transfer (doing things that are very close to programming, like mathematics) and far transfer, which might include creative thinking or metacognition (e.g., planning): Despite the increasing attention computer programming has received recently (Grover & Pea, 2013), programming skills do not transfer equally to different skills—a finding that Sala and Gobet (2017a) supported in other domains. The findings of our meta-analysis may support a similar reasoning: the more distinct the situations students are invited to transfer their skills to are from computer programming the more challenging the far transfer is. However, we notice that this evidence cannot be interpreted causally—alternative explanations for the existence of far transfer exist. Here’s how I interpret their findings. Learning program involves learning a whole set of skills, some of which overlap with skills in other disciplines. Like, being able to evaluate an expression with variables, once you know the numeric value for those variables — you have to do that in programming and in mathematics. Those things transfer. Farther transfer depends on how much overlap there is. Certainly, you have to plan in programming, but not all of the sub-skills for the kinds of planning used in programming appear in every problem where you have to plan. The closer the problem is to programming, the more that there’s an overlap, and the more we see transfer. This finding is like a recent paper out of Harvard (see link here) that shows that AP Calculus and AP CS both predict success in undergraduate computer science classes. Surprisingly, regular (not AP) calculus is also predictive of undergraduate CS success, but not regular CS. There are sub-skills in common between mathematics and programming, but the directionality is complicated. We have known for a long time that we can teach programming in order to get a learning effect in other disciplines. That’s the heart of what Bootstrap does. Sharon Carver showed that many years ago. But that’s different than saying “Let’s teach programming, and see if there’s any effect in other classes.” So yes, there is transfer between programming and other disciplines — not that it buys you much, and the effect is small. But we can no longer say that there is no transfer."
"327","2016-04-25","2023-03-24","https://computinged.wordpress.com/2016/04/25/transfer-of-learning-making-sense-of-what-education-research-is-telling-us/","I enjoy reading “Gas station without pumps,” and the below-quoted post was one I wanted to respond to. Two of the popular memes of education researchers, “transferability is an illusion” and “the growth mindset”, are almost in direct opposition, and I don’t know how to reconcile them. One possibility is that few students actually attempt to learn the general problem-solving skills that math, CS, and engineering design are rich domains for. Most are content to learn one tiny skill at a time, in complete isolation from other skills and ideas. Students who are particularly good at memory work often choose this route, memorizing pages of trigonometric identities, for example, rather than learning how to derive them at need from a few basics. If students don’t make an attempt to learn transferable skills, then they probably won’t. This is roughly equivalent to claiming that most students have a fixed mindset with respect to transferable skills, and suggests that transferability is possible, even if it is not currently being learned. Teaching and testing techniques are often designed to foster an isolation of ideas, focusing on one idea at a time to reduce student confusion. Unfortunately, transferable learning comes not from practice of ideas in isolation, but from learning to retrieve and combine ideas—from doing multi-step problems that are not scaffolded by the teacher. Source: Transfer of learning | Gas station without pumps The problem with “transferability” is that it’s an ill-defined term. Certainly, there is transfer of skill between domains. Sharon Carver showed a long time ago that she could teach debugging Logo programs, and students would transfer that debugging process to instructions on a map (mentioned in post here). That’s transferring a skill or a procedure. We probably do transfer big, high-level heuristics like “divide-and-conquer” or “isolate the problem.” One issue is whether we can teach them. John Sweller says that we can’t — we must learn them (it’s a necessary survival skill), but they’re learned from abstracting experience (see Neil Brown’s nice summary of Sweller’s SIGCSE keynote). Whether we can teach them or not, what we do know is that higher-order thinking is built on lots of content knowledge. Novices are unlikely to transfer until they know a lot of stuff, a lot of examples, a lot of situations. For example, novice designers often have “design fixation.” They decide that the first thing they think of must be the right answer. We can insist that novice designers generate more designs, but they’re not going to generate more good designs until they know more designs. Transfer happens pretty easily when you know a lot of content and have seen a lot of situations, and you recognize that one situation is actually like another. Everybody starts out learning one tiny skill at a time. If you know a lot of skills (maybe because you have lots of prior experience, maybe because you have thought about these skills a lot and have recognized the general principles), you can start chunking these skills and learning whole schema and higher-level skills. But you can’t do that until you know lots of skills. Students who want to learn one tiny skill at a time may actually need to still learn one tiny skill at a time. People abstract (e.g., able to derive a solution rather than memorize it) when they know enough content that it’s useful and possible for them to abstract over it. I completely agree that students have to try to abstract. They have to learn a lot of stuff, and then they have to be in a situation where it’s useful for them to abstract. “Growth mindset” is a necessity for any of this to work. Students have to believe that content is worth knowing and that they can learn it. If students believe that content is useless, or that they just “don’t do math” or “am not a computer person” (both of which I’ve heard in just the last week), they are unlikely to learn content, they are unlikely to see patterns in it, and they are unlikely to abstract over it. Kevin is probably right that we don’t teach problem solving in engineering or computing well. I blogged on this theme for CACM last month — laboratory experiments work better for a wider range students than classroom studies. Maybe we teach better in labs than in classrooms? The worked examples effect suggests that we may be asking students to problem solve too much. We should show students more completely worked out problems. As Sweller said at SIGCSE, we can’t expect students to solve novel problems. We have to expect students to match new problems to solutions that they have already seen. We do want students to solve problems, too, and not just review example solutions. Trafton and Reiser showed that these should be interleaved: Example, Problem, Example, Problem… (see this page for a summary of some of the worked examples research, including Trafton & Reiser). When I used to do Engineering Education research, one of my largest projects was a complete flop. We had all this prior work showing the benefits of a particular collaborative learning technology and technique, then we took it into the engineering classroom and…poof! Nothing happened. In response, we started a project to figure out why it failed so badly. One of our findings was that “learned helplessness” was rampant in our classes, which is a symptom of a fixed mindset. “I know that I’m wrong, and there’s nothing that I can do about it. Collaboration just puts my errors on display for everyone,” was the kind of response we’ve got. (See here for one of our papers on this work.) I believe that all the things Kevin sees going wrong in his classes really are happening. I believe he’s not seeing transfer that he might reasonably expect to see. I believe that he doesn’t see students trying to abstract across lower-level skills. But I suspect that the problem is the lack of a growth mindset. In our work, we saw Engineering students simply give up. They felt like they couldn’t learn, they couldn’t keep up, so they just memorized. I don’t know that that’s the cause of the problems that Kevin is seeing. In my work, I’ve often found that motivation and incentive are key to engagement and learning."
"328","2015-05-11","2023-03-24","https://computinged.wordpress.com/2015/05/11/important-paper-at-sigcse-2015-transferring-skills-at-solving-word-problems-from-computing-to-algebra-through-bootstrap/","I was surprised that this paper didn’t get more attention at SIGCSE 2015. The Bootstrap folks are seeing evidence of transfer from the computing and programming activities into mathematics performance. There are caveats on the result, so these are only suggestive results at this time. What I’d like to see in follow-up studies is more analysis of the students. The paper cited below describes the design of Bootstrap and why they predict impact on mathematics learning, and describes the pre-test/post-test evidence of impact on mathematics. When Sharon Carver showed impact of programming on problem-solving performance (mentioned here), she looked at what the students did — she showed that her predictions were met. Lauren Margulieux did think-aloud protocols to show that students were really saying subgoal labels to themselves when transferring knowledge (see subgoal labeling post). When Pea & Kurland looked for transfer, they found that students didn’t really learn CS well enough to expect anything to transfer — so we need to demonstrate that they learned the CS, too. Most significant bit: Really cool that we have new work showing potential transfer from CS learning into other disciplines. Many educators have tried to leverage computing or programming to help improve students’ achievement in mathematics. However, several hopes of performance gains—particularly in algebra—have come up short. In part, these efforts fail to align the computing and mathematical concepts at the level of detail typically required to achieve transfer of learning. This paper describes Bootstrap, an early-programming curriculum that is designed to teach key algebra topics as students build their own videogames. We discuss the curriculum, explain how it aligns with algebra, and present initial data showing student performance gains on standard algebra problems after completing Bootstrap. via Transferring Skills at Solving Word Problems from Computing to Algebra Through Bootstrap."
"329","2013-06-13","2023-03-24","https://computinged.wordpress.com/2013/06/13/learning-to-code-may-be-enough-if-it-happens/","I highly recommend Shuchi Grover’s piece in EdSurge news (linked below). She makes a great point — that the goal of learning computing goes beyond learning to code. It’s not enough to learn to code. She talks about the challenge of learning to code: I have encountered 12-14 year olds who have ostensibly marched through an entire Javascript course online but struggle to correctly configure terminating conditions for loops that involve Boolean operators in a fairly simple program. Anecdotal evidence from classrooms and teachers that use tools like Scratch, Alice or even the newly released Tynker suggests that while children comfortably learn to modify ready-made pieces of code as a starting point, they struggle when they must progress to tracing unfamiliar code, creating their own algorithmic programs, or debugging. This is not surprising at all. Algorithmic problem solving is not as easy as the “What schools don’t teach” Code.org video would have viewers believe. via OPINION: Learning to Code Isnt Enough | EdSurge News. There are similar themes in Roy Pea’s 1983 paper with Midian Kurland, “On the cognitive prerequisites of learning computing programming.” Even among the 25% of the children who were extremely interested in learning programming, the programs they wrote reached but a moderate level of sophistication after a year’s work and approximately 30 hours of on-line programming experience. We found that children’s grasp of fundamental programming concepts such as variables, tests, and recursion, and of specific Logo primitive commands such as REPEAT, was highly context-specific and rote in character. To take one example: A child who had written a procedure using REPEAT which repeatedly printed her name on the screen was unable to recognize the efficiency of using the REPEAT command to draw a square. Instead, the child redundantly wrote the same line-drawing procedure four times in succession. Coding is hard. Coding has always been hard. We want students to know more than just code about computing. I’m not sure that Shuchi is right. Maybe learning to code is enough — if it happens. When I studied foreign languages in secondary and post-secondary school (Latin and French for me), there was a great emphasis on learning the culture of a language. There was an explicit belief that learning about the culture of a language facilitated learning the language. Does it go further? Can one learn the language without knowing anything about the culture? If one does learn the language well, did you necessarily learn the culture too? Maybe it works the same for programming languages. Our human-centered computing PhD students who focus on learning sciences and technologies (LS&T) are required to read two chapters of Noss and Hoyles 1996 book Windows on Mathematical Meanings: Learning Cultures and Computers. They make the argument that you can’t learn Logo well apart from an effective classroom culture. As Pea and Kurland noted in 1983, and Grover has noted thirty years later in 2013, students aren’t really learning programming well. What if they did? What if students did learn programming? Would they necessarily also learn computing? And isn’t it possible that a culture that taught programming well would also teach things beyond coding? Maybe even problem-solving skills? David Palumbo’s excellent review of the literature on programming and problem-solving pointed out that there was very little link from programming to problem-solving skills — but for the most part, students weren’t learning programming. I don’t really think that that would work, that learning to code would immediately lead to learning problem-solving skills. I do wonder if learning to code might also lead to learning the other things that we think are important about computing. There is a positive evidence for the value of classroom culture. Consider the work by Leo Porter and Beth Simon, where they found that combining pair programming, peer instruction, and Media Computation led to positive retention and learning (as measured by success in later classes). Porter and Simon have also noted how students learning programming also develop new insight into the applications that they use. Maybe it’s the case that if you change the culture in the classroom and what students do, and maybe students learn programming and computing."
"330","2013-05-15","2023-03-24","https://computinged.wordpress.com/2013/05/15/human-centered-computing-a-new-degree-for-lickliders-world-cacm/","I am on the editorial board for the Viewpoints section of Communications of the ACM, and I take care of the education column. Occasionally, I write the piece. For the most recent CACM, I wrote a piece that is explicitly about our Human-Centered Computing PhD and implicitly about computing education research. I wanted to write about how our HCC PhD is different than a CS PhD, and I realized that I could tell the story best in terms of the HCC PhD students who informed my understanding of computing education: Mike Hewner, Betsy DiSalvo, and Erika Poole. I struggled with the overall story, until I learned that Licklider’s degrees were mostly in psychology. I realized that if Licklider were studying today, he probably would get an HCC PhD, and that became my story. In the 1960s, J.C.R. Licklider described his vision for the future of computing, which is remarkably like today’s world. He saw computing as augmenting human intelligence, and for communications among communities. He foresaw cloud computing and the Semantic Web. Licklider’s background was different than many of the early computer scientists. He was not an electrical engineer or primarily a mathematician—his degrees were mostly in psychology. To predict today’s world took a combination of computing and psychology. It is not surprising that understanding today’s world of ubiquitous computing requires a blend of computing and social science. The phenomena of social computing are not primarily about technology. What is interesting about our modern computing milieu is the blend of technology, humans, and community. Human-centered computing is a new subdiscipline of computer science that prepares students for studying our socio-technical world. via Human-Centered Computing: A New Degree for Licklider’s World | May 2013 | Communications of the ACM."
"331","2017-12-05","2023-03-24","https://computinged.wordpress.com/2017/12/05/most-jobs-requiring-cs-skills-do-not-require-a-cs-degree-csedweek/","I am excited about this new report from Burning Glass and Oracle because it provides evidence for the claim that the vast majority of people who need CS skills will not be CS majors. I will be joining folks from Burning Glass and Alison Derbenwick Miller and others from Oracle Academy in a Twitter chat about the report Wednesday, December 6 at 4 pm PT/7 pm ET. Hope you can join us. While many employers are looking for workers with strong computer science skills, they are not necessarily looking only at job seekers with computer science degrees. Only 18% of jobs in the categories listed above specifically request a computer science degree. (Most postings do request a bachelor’s degree generally or a degree in another major.) Programming and data analysis jobs are the only categories that have significant demand for computer science degrees. For all other categories, fewer than 5% of postings request a computer science degree.[1] This means that students in a broad range of education programs can enhance their job market value by including computer science in their education pathways. Source: Rebooting Jobs | Computer Science Skills | Burning Glass Technologies "
"332","2016-07-25","2023-03-24","https://computinged.wordpress.com/2016/07/25/the-future-of-computing-education-is-outside-of-cs-report-from-snowbird-csforall/","Last week, I attended the Computing Research Association (CRA) Snowbird conference of deans and chairs of computing. (See agenda here with slides linked.) I presented on a panel on why CS departments should embrace computing education research, and another on what CS departments can do to support the CS for All initiative. I talked in that second session about the leadership role that universities can play in creating state partnerships and influencing state policy (see the handout for my discussion table). Amy Ko was in both sessions with me, and she’s already written up a blog post about her experiences, which match mine closely (including the feeling of being an imposter). I recommend reading her post. Here, I’m sharing a key insight I saw and learned at Snowbird. Before the conference even started, our Senior Associate Dean for the College of Computing, Charles Isbell, challenged me to name another field that is overwhelmed with majors AND offers service courses to so many other majors. (Maybe biology because of pre-meds?) Computer Science is increasingly the provider of courses to non-CS majors, and those majors want something different than CS majors. The morning of the first day was dedicated to the enrollment surge. CRA has been gathering data at many institutions on the surge, and Tracy Camp did a great job presenting some of the results. (Her slides are now available here, so you don’t have to rely on my pictures of her slides.) Here’s the bottomline: Student growth has been enormous (across different types of institutions), without a matching growth in faculty. The workload is increasing.  But here’s the surprise: Much of the growth in course enrollment is not CS majors. A large percentage of the growth is in other majors taking CS classes. The below graph is for “mid-level” CS courses, and there are similar patterns in intro and upper-level courses.  Tracy also presented a survey of students (slides available here), which was really fascinating. Below is a survey of (a lot) of intro students at several institutions. All the differences described are significant at p<0.05 (not 0.5 as it says). The difference in what non-majors want and CS majors was is interesting. Majors want (significantly more than non-majors) to “make a lot of money.” Non-majors more significantly want to “Give back to my community” and “Take time off work to care for family.”  U. Illinois has the most innovative program I have heard of for meeting these new needs. They are creating a range of CS+X degree programs. First, these CS+X programs are significant parts of the “X” departments.  But these stats blew me away: CS+X is now 30% of all of CS at U. Illinois (which is a top-5 CS department), and 50% of all admitted first years this year! And it’s 28% female.  It’s pretty clear to me that the future of computing education is as much about providing service to other departments as it is about our own CS major. We have suspected that the growth is in the non-majors for awhile, but now we have empirical evidence. I’ve been promoting the idea of contextualized-computing education, and the notion that other majors need a different kind of CS than what CS majors need. We need to take serious the education of non-CS majors in Computer Science."
"333","2016-11-07","2023-03-24","https://computinged.wordpress.com/2016/11/07/growing-computer-science-education-into-a-stem-education-discipline-november-cacm/","I manage the education column in CACM’s Viewpoints section, and this quarter, Briana Morrison and I wrote the piece. While CS is now officially “in STEM,” it’s not like mathematics and science classes. In the November issue, we look at what has to happen to make CS as available as mathematics or science education. ( BTW, Briana defends her dissertation today!) Computing education is changing. At this year’s CRA Snowbird Conference, there was a plenary talk and three breakout sessions dedicated to CS education and enrollments. In one of the breakout sessions, Tracy Camp showed that much of the growth in CS classes is coming from non-CS majors, who have different goals and needs for computing education than CS majors.a U.S. President Obama in January 2016 announced the CS for All initiative with a goal of making computing education available to all students. Last year, the U.S. Congress passed the STEM Education Act of 2015, which officially made computer science part of STEM (science, technology, engineering, and mathematics). The federal government offers incentives to grow participation in STEM, such as scholarships to STEM students and to prepare STEM teachers. Declaring CS part of STEM is an important step toward making computing education as available as mathematics or science education. The declaration is just a first step. Mathematics and science classes are common in schools today. Growing computing education so it is just as common requires recognition that education in computer science is different in important ways from education in STEM. We have to learn to manage those differences. Source: Growing Computer Science Education Into a STEM Education Discipline | November 2016 | Communications of the ACM"
"334","2013-08-05","2023-03-24","https://computinged.wordpress.com/2013/08/05/success-in-introductory-programming-what-works/","Leo Porter, Charlie McDowell, Beth Simon, and I collaborated on a paper on how to make introductory programming work, now available in CACM. It’s a shorter, more accessible version of Leo and Beth’s best-paper-award winning SIGCSE 2013 paper, with history and kibitzing from Charlie and me : Many Communications readers have been in faculty meetings where we have reviewed and bemoaned statistics about how bad attrition is in our introductory programming courses for computer science majors (CS1). Failure rates of 30%–50% are not uncommon worldwide. There are usually as many suggestions for how to improve the course as there are faculty in the meeting. But do we know anything that really works? We do, and we have research evidence to back it up. Pair programming, peer instruction, and media computation are three approaches to reforming CS1 that have shown positive, measurable impacts. Each of them is successful separately at improving retention or helping students learn, and combined, they have a dramatic effect. via Success in Introductory Programming: What Works? | August 2013 | Communications of the ACM."
"335","2016-04-15","2023-03-24","https://computinged.wordpress.com/2016/04/15/spreadsheets-and-an-intuitive-approach-to-variables/","A piece in The Guardian (linked by Deepak Kumar on Facebook) described how Visicalc became so popular, and suggests that spreadsheets make variables “intuitive.” I don’t buy it. Yes, I believe that spreadsheets help students to understand that a value can change (which is what the quote below describes). I am not sure that spreadsheets help students to understand the implications of that change. In SBF (Structure, Behavior, Function) terms, spreadsheets make the structural aspect of variables visible — variables vary. They don’t make evident the behavior (how variables connect/influence to one another), and they don’t help students to understand function of the variable or the overall spreadsheet. If we think about the misconceptions that students have about variables, the varying characteristic is not the most challenging one. The Bootstrap folks have some evidence that their approach to teaching variables in Racket helps students understand variables better in algebra. It would be interesting to explore the use of spreadsheets in a similar curriculum — could spreadsheets help with algebra, too? I don’t expect that we’d get the same results, in part because spreadsheet variables don’t look like algebra variables. Surface-level features matter a lot for novices.  Years ago, I began to wonder if the popularity of spreadsheets might be due to the fact that humans are genetically programmed to understand them. At the time, I was teaching mathematics to complete beginners, and finding that while they were fine with arithmetic, algebra completely eluded them. The moment one said “let x be the number of apples”, their eyes would glaze and one knew they were lost. But the same people had no problem entering a number into a spreadsheet cell labelled “Number of apples”, happily changing it at will and observing the ensuing results. In other words, they intuitively understood the concept of a variable. Source: Why a simple spreadsheet spread like wildfire | Opinion | The Guardian"
"336","2019-05-13","2023-03-24","https://computinged.wordpress.com/2019/05/13/open-question-around-mathematics-in-undergraduate-computer-science/","I’m always happy to see a new computing education blog, and I’m particularly excited by posts that identify open (research, and otherwise) questions. At SIGCSE 2019 this past February, we organized a birds of a feather session (a one-hour discussion group) on modernizing mathematics in computer science. We expected a modest number of attendees but were surprised and delighted to host a completely filled room of discrete mathematics, algorithms, and theory of computation educators—60 attendees in total—interested in evolving how we, as a discipline, situate mathematical foundations in our curriculum! What was even more surprising to us was how the discussion evolved over the hour. Our original intention was to focus on how we might re-shape the foundational portions of the computer curriculum in light of how computing has evolved over the last decade: The undergraduate computer science curriculum is ever-changing but has seen particular turmoil recently. Topics such as machine learning, data science, and concurrency and parallelism have grown in importance over the last few years. As the content of our curriculum changes, so too does the mathematical foundations on which it rests. Do our current theoretical courses adequately support these foundations or must we consider new pedagogy that is more relevant to our students’ needs? In this BoF, we will discuss what a modern mathematics curriculum for computer scientists should cover and how we should go about accomplishing this in our classrooms. (https://dl.acm.org/citation.cfm?id=3293748) … At this point, we shifted our focus from trying to answer the original “concept” question to identifying the myriad of problems that educators wrestled with along these three dimensions. We outline the problems that people raised below: From https://cs-foundations-ed.github.io/sigcse/2019/03/29/bof-report.html"
"337","2016-03-18","2023-03-24","https://computinged.wordpress.com/2016/03/18/brain-training-like-computational-thinking-is-unlike-to-transfer/","In a recent blog post, I argued that problem-solving skills learned for solving problems in computational contexts (“computational thinking”) were unlikely to transfer to everyday situations (see post here). We see a similar pattern in the recent controversy about “brain training.” Yes, people get better at the particular exercises (e.g., people can learn to problem-solve better when programming). And they may still be better years later, which is great. That’s an indication of real learning. But they are unlikely to transfer that learning to non-exercise contexts. Most surprisingly, they are unlikely to transfer that learning even though they are convinced that they do. Just because you think you’re doing computational thinking doesn’t mean that you are. Ten years later, tests showed that the subjects trained in processing speed and reasoning still outperformed the control group, though the people given memory training no longer did. And 60 percent of the trained participants, compared with 50 percent of the control group, said they had maintained or improved their ability to manage daily activities like shopping and finances. “They felt the training had made a difference,” said Dr. Rebok, who was a principal investigator. So that’s far transfer — or is it? When the investigators administered tests that mimicked real-life activities, like managing medications, the differences between the trainees and the control group participants no longer reached statistical significance. In subjects 18 to 30 years old, Dr. Redick also found limited transfer after computer training to improve working memory. Asked whether they thought they had improved, nearly all the participants said yes — and most had, on the training exercises themselves. They did no better, however, on tests of intelligence, multitasking and other cognitive abilities. Source: F.T.C.’s Lumosity Penalty Doesn’t End Brain Training Debate – The New York Times"
"338","2015-06-01","2023-03-24","https://computinged.wordpress.com/2015/06/01/little-evidence-that-executive-function-interventions-boost-student-achievement-so-why-should-computing/","Here’s how I interpret the results described below. Yes, having higher executive function (e.g., being able to postpone the gratification of eating a marshmallow) is correlated with greater achievement. Yes, we have had some success teaching some of these executive functions. But teaching these executive functions has not had any causal impact on achievement. The original correlations between executive function and achievement might have been because of other factors, like the kids who had higher executive function also had higher IQ or came from richer families. This is relevant for us because the myth that “Computer science teaches you how to think” or “Computer science teaches problem-solving skills” is pervasive in our community. (See a screenshot of my Google search below, and consider this blog post of a few weeks ago.) But there is no support for that belief. If this study finds no evidence that explicitly teaching thinking skills leads to improved transferable achievement, then why should teaching computer science indirectly lead to improved thinking skills and transferable achievement to other fields? Why do CS teachers insist that we teach for a given outcome (“thinking skills” or “problem-solving skills”) when we have no evidence that we’re achieving that outcome?  The meta-analysis, by researchers Robin Jacob of the University of Michigan and Julia Parkinson of the American Institutes for Research, analyzed 67 studies published over the past 25 years on the link between executive function and achievement. The authors critically assessed whether improvements in executive function skills—the skills related to thoughtful planning, use of memory and attention, and ability to control impulses and resist distractions—lead to increases in reading and math achievement , as measured by standardized test scores, among school-age children from preschool through high school. More than half of the studies identified by the authors were published after 2010, reflecting the rapid increase in interest in the topic in recent years. While the authors found that previous research indicated a strong correlation between executive function and achievement, they found “surprisingly little evidence” that the two are causally related. “There’s a lot of evidence that executive function and achievement are highly correlated with one another, but there is not yet a resounding body of evidence that indicates that if you changed executive functioning skills by intervening in schools, that it would then lead to an improvement in achievement in children,” said Jacob. “Although investing in executive function interventions has strong intuitive appeal, we should be wary of investing in these often expensive programs before we have a strong research base behind them.” via Study: Little Evidence That Executive Function Interventions Boost Student Achievement."
"339","2015-05-08","2023-03-24","https://computinged.wordpress.com/2015/05/08/important-new-aauw-report-solving-the-equation-the-variables-for-womens-success-in-engineering-and-computing/","Important new report from the American Association of University Women (AAUW). I particularly like the detailed analysis of what happened at Harvey Mudd, with a lot of credit to Christine Alvarado as well as the other excellent faculty who created initiatives there. As Maria Klawe keeps saying, it wasn’t just her. More than ever before, girls are studying and excelling in science and mathematics. Yet the dramatic increase in girls’ educational achievements in scientific and mathematical subjects has not been matched by similar increases in the representation of women working as engineers and computing professionals. Just 12 percent of engineers are women, and the number of women in computing has fallen from 35 percent in 1990 to just 26 percent today.  The numbers are especially low for Hispanic, African American, and American Indian women. Black women make up 1 percent of the engineering workforce and 3 percent of the computing workforce, while Hispanic women hold just 1 percent of jobs in each field. American Indian and Alaska Native women make up just a fraction of a percent of each workforce. via Solving the Equation: The Variables for Women’s Success in Engineering and Computing : AAUW: Empowering Women Since 1881."
"340","2015-05-13","2023-03-24","https://computinged.wordpress.com/2015/05/13/how-to-teach-computer-science-with-media-computation/","In the Preface to the new 4th ed book, I wrote a bit about what we know about how to teach computer science using Media Computation. These are probably useful in most CS classes, even without Media Computation: Over the last 10 years, we have learned some of the approaches that work best for teaching Media Computation."
"341","2015-05-01","2023-03-24","https://computinged.wordpress.com/2015/05/01/sally-fincher-on-the-need-for-cer-what-are-we-doing-when-we-teach-computing-in-schools/","I’ve been looking forward to seeing this article appear in CACM for over a year. Last January and May, I heard Sally Fincher give two talks about computing education research (CER), where she started by describing (failed) efforts to teach reading over the last hundred years. She created a compelling analogy. What educators were doing when they simplified the learning of reading seem analogous to our efforts today to simplify the learning of programming — but those efforts to teach simplified reading led to significant harm to the students. What harm are we doing to students when we teach programming in these new ways? She is not calling for an end to these efforts. Rather, she’s calling for research to figure out what we’re doing and to investigate the effects. She agreed to write up her story for Viewpoints, which is published this month in CACM. Thanks, Sally! Other approaches believe it is more appropriate to use real syntax, but constrain the environment to a particular (attractive) problem domain so learners become fluent in a constrained space. Event-driven environments (such as Greenfoot) or scaffolded systems (like Processing.js) aim for the learner to develop an accurate mental model of what their code is doing, and ultimately transfer that to other environments. Although whether they actually do so remains unclear: we may be restricting things in the wrong way. Still others hold that coding—howsoever approached—is insufficient for literacy and advocate a wider approach, taking in “computational thinking,” for instance as embedded in the framework of the “CS Principles”: Enduring Understandings, Learning Objectives, and Essential Knowledge. What is resolutely held common with traditionally formulated literacy is that these approaches are unleashed on classrooms, often whole school districts, even into the curriculum of entire countries—with scant research or evaluation. And without carrying the teachers. If we are to teach computing in schools we should go properly equipped. Alongside the admirable energy being poured into creating curricular and associated classroom materials, we need an accompanying set of considered and detailed programs of research, to parallel those done for previous literacies. via What Are We Doing When We Teach Computing in Schools? | May 2015 | Communications of the ACM."
"342","2015-04-29","2023-03-24","https://computinged.wordpress.com/2015/04/29/call-for-participants-for-icer-2015-doctoral-consortium-come-join-us/","The ICER 2015 Doctoral Consortium provides an opportunity for doctoral students studying computing education to explore and develop their research interests in a workshop environment with a panel of established researchers. We invite students to apply for this opportunity to share their work with students in a similar situation as well as senior researchers in the field. Applicants to the Doctoral Consortium should have begun their research, but should not have completed it in its entirety. We want people who have questions to raise with their peers and the more senior mentors. Someone who is all-but-defended probably does not want to be raising any questions. DC Co-Chairs for 2015: Mark Guzdial, Georgia Institute of Technology Anthony Robins, University of Otago, New Zealand Contact us at: icerdc2015@gmail.com The DC has the following objectives: The DC will be held on Sunday, August 9 2015. Students at any stage of their doctoral studies are welcome to apply and attend. The number of participants is limited to 15. Applicants who are selected will receive a limited partial reimbursement of travel, accommodation and subsistence (i.e., food) expenses of $600 (USD). Process Timeline: You can find more information on applying at http://icer.hosting.acm.org/icer-2015/doctoral-consortium/"
"343","2015-05-04","2023-03-24","https://computinged.wordpress.com/2015/05/04/creating-a-sig-for-computer-science-education-at-aera/","Hilary Dwyer is starting an effort to create a special interest group at the American Educational Research Association (AERA) just for computer science education. Please do complete her poll — especially if you are an AERA member. We need 75 signatures on the poll to be able to create the SIG. Hilary Dwyer — "
"344","2015-05-06","2023-03-24","https://computinged.wordpress.com/2015/05/06/computing-education-that-everyone-needs-that-has-nothing-to-do-with-programming/","My colleague, Amy Bruckman, wrote a blog post about the challenges that nonprofits face when trying to develop and maintain software. She concludes with an interesting argument for computing education that has nothing to do with learning programming that everyone needs. I think it relates to my question: What is the productivity cost of not understanding computing? (See post here.) This is not a new phenomenon. Cliff Lampe found the same thing in a study of three nonprofits. At the root of the problem is two shortcomings in education. So that more small businesses and nonprofits don’t keep making this mistake, we need education about the software development process as part of the standard high-school curriculum. There is no part of the working world that is not touched by software, and people need to know how it is created and maintained. Even if they have no intention of becoming a developer, they need to know how to be an informed software customer. Second, for the people at web design firms who keep taking advantage of customers, there seems to be a lack of adequate professional ethics education. I teach students in my Computers, Society, and Professionalism class that software engineers have a special ethical responsibility because the client may not understand the problem domain and is relying on the knowledge and honesty of the developer. More people need to get that message. via Dear Nonprofits: Software Needs Upkeep (Why we need better education about software development and professional ethics) | The Next Bison: Social Computing and Culture."
"345","2013-03-19","2023-03-24","https://computinged.wordpress.com/2013/03/19/we-need-an-economic-study-on-lost-productivity-from-poor-computing-education/","How much does it cost the American economy that most American workers are not computer literate? How much would be saved if all students were taught computer science? These questions occurred to me when trying to explain why we need ubiquitous computing education. I am not an economist, so I do not know how to measure the costs of lost productivity. I imagine that the methods would be similar to those used in measuring the Productivity Paradox. We do have evidence that there are costs associated with people not understanding computing: We typically argue for “Computing for All” as part of a jobs argument. That’s what Code.org is arguing, when they talk about the huge gap between those who are majoring in computing and the vast number of jobs that need people who know computing. It’s part of the Computing in the Core argument, too. It’s a good argument, and a strong case, but it’s missing a bigger issue. Everyday people need computing knowledge, even if they are not professional software developers. What is the cost for not having that knowledge? Now, I expect Mike Byrne (and other readers who push back in interesting ways on my “Computing for Everyone” shtick) to point out that people also need to know about probability and statistics (for example), and there may be a greater cost for not understanding those topics. I agree, but I am even harder pressed to imagine how to measure that. One uses knowledge of probability and statistics all the time (e.g., when deciding whether to bring your umbrella to work, and whether you can go another 10K miles on your current tires). How do you identify (a) all the times you need that knowledge and (b) all the times you make a bad prediction because you don’t have the right knowledge? There is also a question of whether having the knowledge would change your decision-making, or whether you would still be predictably irrational. Can I teach you probability and statistics in such a way that it can influence your everyday decision making? Will you transfer that knowledge? I’m pretty sure that once you know IP addresses and that Java is not the same as JavaScript, you won’t forget those definitions — you don’t need far-transfer for that to be useful. While it is a bit of a “drunk under the streetlight” argument, I can characterize the behaviors where computing knowledge would be useful and when there are costs for not having that knowledge, as in Brian and Erika’s work. I am trying to address problems that I have some idea of how to address. Consider this a call to economics researchers: How do we measure the lost productivity from computing illiteracy?"
"346","2013-01-28","2023-03-24","https://computinged.wordpress.com/2013/01/28/kids-should-learn-programming-as-well-as-reading-and-writing-mitch-resnick/","A recommended video from Mitch Resnick, who leads the Lifelong Kindergarten group at the MIT Media Lab, the home of Scratch. Most people view computer coding as a narrow technical skill. Not Mitch Resnick. He argues that the ability to code, like the ability to read and write, is becoming essential for full participation in today’s society. And he demonstrates how Scratch programming software from the MIT Media Lab makes coding accessible and appealing to everyone — from elementary-school children to his 83-year-old mom. As director of the Lifelong Kindergarten group at the MIT Media Lab, Mitch Resnick designs new technologies that, in the spirit of the blocks and finger paint of kindergarten, engage people of all ages in creative learning experiences. via Kids should learn programming as well as reading and writing – Boing Boing."
"347","2014-12-05","2023-03-24","https://computinged.wordpress.com/2014/12/05/cs-education-research-at-tufts-keynote-by-ben-shapiro/","I recommend this talk by Ben Shapiro. He does a great job framing his work in computing education research, and shows some terrific examples of his latest work. I like how his work fits so well into both computing and education — he’s using education theory to help students learn important ideas in CS from distributed systems and parallelism (like latency and synchronization) that aren’t yet in the CS standards. This is using advanced knowledge in CS and advanced knowledge in Education to explore new ground. "
"348","2013-01-28","2023-03-24","https://computinged.wordpress.com/2013/01/28/the-future-of-the-university-with-moocs-its-all-about-the-individual/","Interesting piece in Inside HigherEd which argues that the real impact of MOOCs on the University is to get the University out of the business of engaging students and working to improve completion, retention, and graduation rates. Nobody gets into the University until proven by MOOC. And since so few people complete the MOOCs, the percentage of the population with degrees may plummet. Constructing this future will take some time, but not much time. It only requires the adaptation of various existing mechanisms for providing proctored exams worldwide and a revenue and expense model that allows all the providers (university and faculty content providers, MOOC middleware providers, and quality control providers) to establish profitable fee structures. In this model, the risk and cost of student engagement is borne by the students alone. The university assumes no responsibility for student success other than identifying quality courses. The MOOC middleware companies create and offer the content through sophisticated Internet platforms available to everyone but make no representations about the likelihood of student achievement. Indeed, many student participants may seek only participation not completion. The quality control enterprise operates on a fee-for-service basis that operates without much concern for the number of students that pass or fail the various proctored tests of content acquisition, and many participants in MOOC activities may not want to engage the quality control system. via MOOCs and the Future of the University | Inside Higher Ed."
"349","2013-03-19","2023-03-24","https://computinged.wordpress.com/2013/03/19/true-success-of-robotics-revolution-hinges-on-training-and-education/","I buy this argument, and it’s more subtle than the recent 60 Minutes piece. Does the influx of robotics lead to more or fewer jobs? 60 Minutes says fewer jobs. In contrast, Henrik Christensen says more jobs. The difference is education. There are fewer lower-education jobs, but more higher-education jobs. So unless you ramp up education, it is fewer jobs. That’s not to say the transition to this brave new world of robotics will be painless. Short-term upheaval is inevitable. For Exhibit A, look at the jobless recovery we find ourselves in today: Increased productivity has driven economic growth, yet unemployment rates remain stubbornly high. But most insiders seem to agree that if we look past the short term, the medium- and long-term benefits of the robotics revolution appear to be positive, not just in terms of economic growth but for job creation, too. They also warn that the job creation part will require a keen focus on training and education for those low-skilled workers who get squeezed out of their jobs by robotics. Collectively, we ignore this warning at our own peril. via True success of ‘robotics revolution’ hinges on training and education | Packaging World."
"350","2015-05-18","2023-03-24","https://computinged.wordpress.com/2015/05/18/using-learning-sciences-to-inform-cyber-security-education/","I’m giving the keynote talk at the 2015 International Security Education Workshop at Georgia Tech today. I’ve never spoken on cyber security before, so the talk was challenging and fun to put together. I used some of the learning sciences research we’ve done in computing education to draw connections to cyber security education. The lessons I highlight are:  (Click on the image below to get to the Slideshare site) "
"351","2015-05-20","2023-03-24","https://computinged.wordpress.com/2015/05/20/congratulations-to-bill-wulf-2014-acm-karl-v-karlstrom-outstanding-educator-awardee/","William Wulf is the 2014 recipient of the ACM Karl V. Karlstrom Outstanding Educator Award Wulf is recognized for contributions as a teacher, author, and national leader who focused attention and changed the national education agenda and in the process supported the needs of underserved and under-represented students. As Assistant Director of the National Science Foundation’s Directorate for Computer and Information Science & Engineering (CISE), he understood the role NSF played in supporting science and engineering in the US for both basic research and operation of several high performance computing centers and networks. As President of the US National Academy of Engineering, he advocated for advances in engineering education and technical literacy. Wulf is professor emeritus of Computer Science at the University of Virginia. An ACM Fellow, he received the 2011 ACM Distinguished Service Award. via Karl V. Karlstrom Outstanding Educator Award – ACM Award."
"352","2015-05-22","2023-03-24","https://computinged.wordpress.com/2015/05/22/two-weeks-in-germany-human-centered-software-development-and-german-stem-ed-phd-students-and-risk/","I’m leaving May 24 for a two week trip to Germany. Both one week parts are interesting and worth talking about here. I’ve been reflecting on my own thinking on the piece between, and how it relates to computing education themes, too. I’m attending a seminar at Schloss Dagstuhl on Human-Centric Development of Software Tools (see seminar page here). Two of the seminar leaders are Shriram Krishnamurthi of Bootstrap fame who is a frequent visitor and even a guest blogger here (see post here) and Amy Ko whose seminal work with Michael Lee on Gidget has been mentioned here several times (for example here). I’ve only been to Dagstuhl once before at the live-coding seminar (see description here) which was fantastic and has influenced my thinking literally years later. The seminar next week has me in the relative-outsider role that I was at the live-coding seminar. Most of the researchers coming to this event are programming language and software engineering researchers. Only a handful of us are social scientists or education researchers. The Dagstuhl seminar ends Thursday after lunch. Saturday night, I’m to meet up with a group in Oldenburg Germany and then head up Sunday to Stadland (near the North Sea) for a workshop where I will be advising STEM Education PhD students. I don’t have a web link to the workshop, but I do have a page about the program I’ll be participating in — see here. My only contact there is Ira Diethelm, whom I’ve met several times and saw most recently at WIPSCE 2014 in Berlin (see trip report here). I really don’t know what to expect. Through the ICER DC and WIPSCE, I’ve been impressed by the Computing Education PhD students I’ve met in Germany, so I look forward to an interesting time. I come back home on Friday June 5 from Bremen. There’s a couple day gap between the two events, from Thursday noon to Saturday evening. I got a bunch of advice on what to do on holiday. Shriram gave me the excellent advice of taking a boat cruise partway north, stopping at cities along the way, and then finishing up with a train on Saturday. Others suggested that I go to Cologne, Bremen, Luxembourg, or even Brussels. I’ve decided to take a taxi to Trier from Dagstuhl, tour around there for a couple days, then take a seven hour train ride north on Saturday. Trier looks really interesting (see Tripadvisor page), though probably not as cool as a boat ride. Why did I take the safer route? The science writer, Kayt Sukel, was a once student of mine at Georgia Tech — we even have a pub together. I am so pleased to see the attention she’s received for her book Dirty Minds/This is Your Brain on Sex. She has a new book coming out on risk, and that’s had me thinking more about the role of risk in computing education. In my research group, we often refer to Eccles model of academic achievement and decision making (1983), pictured below. It describes how students’ academic decisions consider issues like gender roles and stereotypes (e.g., do people who are like me do this?), expectation for success (e.g., can I succeed at this?), and the utility function (e.g., will this academic choice be fun? useful? money-making?). It’s a powerful model for thinking about why women and under-represented minorities don’t take computer science.  Eccles’ model doesn’t say much about risk. What happens if I don’t succeed? What do I need to do to reduce risk? How will I manage if I fail? How much am I willing to suffer/pay for reduced risk? That’s certainly playing into my thinking about my in-between days in Germany. I don’t speak German. If I get into trouble in those in-between days, I know nobody I could call for help. I still have another week of a workshop with a keynote presentation after my couple days break. I’ve already booked a hotel in Trier. I plan on walking around and taking pictures, and then I will take a train (which I’ve already booked, with Shriram’s help) to Oldenburg on Saturday. A boat ride with hops into cities sounds terrific, but more difficult to plan with many more opportunities for error (e.g., lost luggage, pickpockets). That’s managing risk for me. I hear issues of risk coming into students’ decision-making processes all the time, combined with the other factors included in Eccles’ model. My daughter is pursuing pre-med studies. She’s thinking like many other pre-med students, “What undergrad degree do I get now that will be useful even if I don’t get into med school?” She tried computer science for one semester, as Jeanette Wing recommended in her famous article on Computational Thinking: “One can major in computer science and go on to a career in medicine, law, business, politics, any type of science or engineering, and even the arts.” CS would clearly be a good fallback undergraduate degree. She was well-prepared for CS — she had passed the AP CS exam in high school, and was top of her engineering CS1 in MATLAB class. After one semester in CS for CS majors, my daughter hated it, especially the intense focus on enforced software development practices (e.g., losing points on homework for indenting with tabs rather than spaces) and the arrogant undergraduate teaching assistants. (She used more descriptive language.) Her class was particularly unfriendly to women and members of under-represented groups (a story I told here). She now rejects the CS classroom culture, the “defensive climate” (re: Barker and Garvin-Doxas). She never wants to take another CS course. The value of a CS degree in reducing risks on a pre-med path does not outweigh the costs of CS classes for her. She’s now pursuing psychology, which has a different risk/benefit calculation (i.e., a psychology undergraduate degree is not as valuable in the marketplace as a CS undergraduate degree), but has reduced costs compared to CS or biology. Risk is certainly a factor when students are considering computer science. Students have expectations about potential costs, potential benefits, and about what could go wrong. I read it in my students’ comments after the Media Computation course. “The course was not what I expected! I was expecting it to be much harder.” “I took a light load this semester so that I’d be ready for this.” Sometimes, I’m quite sure, the risk calculation comes out against us, and we never see those students. The blog will keep going while I’m gone — we’re queued up for weeks. I may not be able to respond much to comments in the meantime, though."
"353","2014-06-12","2023-03-24","https://computinged.wordpress.com/2014/06/12/guest-post-from-shriram-krishnamurthi-growing-respect-for-research-around-computational-learning-and-thinking/","Shriram and I had an email correspondence around the blog posts aboutrenaming the field and gaining respect for the study of how people learn and think about computation. He suggested a path forward that was about re-connecting to the fields that the CSEd community broke away from. I invited him to prepare a guest post that conveyed these ideas. Thanks to him for this! Let me suggest you are probably trying to achieve two very different things here. 1. Create an actual community. There is real value to having all the interesting people from one area in one room. (This is why, despite the trouble it is to get there and back, I almost never say no to a Dagstuhl invitation.) 2. Have your students publish in venues such that, when they go out onto the job market, research universities such as yours (Georgia Tech) and mine (Brown) will notice and respect them, interview them, and make them tenure-track offers so they can have students of their own. Unfortunately, I believe that right now these are fundamentally conflicting goals. SIGCSE, ITiCSE, and ICER address the former but not really the latter. One, unrealistic, option is for 1 and 2 to merge. For this to happen, these venues need to become a whole lot better. I hear great things about the structure of ICER, but some of the papers are great while others are at best so-so. Changing the other two is harder than turning around an aircraft carrier. It may be possible to make ICER a stronger conference, but one small conference cannot really a whole area make. Plus, you still need to convince people to pay attention to it. The only other option I see is to do both. Attend whatever conferences you need to to form a community. But get your students to publish at really good venues outside the area. That way, they can write a gung-ho application: “Look, I’m perfectly capable of holding my own in the open competition of conferences you respect”. People like Amy Ko—who published her work in conferences like ICSE—or my colleague Jeff Huang—an HCI person with strong publications in information retrieval—are examplars whose technical chops can’t be questioned. In other words, this is a long response that could be abbreviated to “Yes, you should grow CSEd by sending it to more respected venues”, but I’m also showing you some of my thinking (because a good teacher grades the work, not just the answer!). A student who publishes a few papers in some conference already recognized as respectable technical CS is going to stand a far better chance. Once a dozen of those populate good departments and start producing students of their own, you’ve pretty much gotten over any prejudice and can then reset your standards. (Though I would still say it’s unhealthy to drop ties to these other areas and retreat into a CSEd shell.) Which conferences, of course, depend on the student. For students doing HCI work, it might be SIGCHI; for those doing software engineering, it might be ICSE; for machine learning, ICML; for information retrieval, SIGIR; and so on. One good bit of advice to a young CSEd PhD student might be, “Find another area of CS in which you can demonstrate enough depth to publish papers in its good conferences and be able to hold your own in conversations with an expert in that field”. Here are three other things to consider. 1. Being able to hold one’s own in another field creates natural allies in a department. A non-CSEd faculty member who realizes there will not be hires in their own area is likely to become an advocate for a CSEd candidate who has at least some presence in their area. 2. I feel the CSEd community has let itself be put into the “liberal arts ghetto” or, at the research university level, “instructor ghetto”. The leaders of “research” are tenured professors, but the leaders of “education” are Instructors, Professors of Practice, and so forth. This is a self-perpetuating cycle. For instance, who is the CSEd applicant going to get letters from? Getting a letter from an Instructor naturally makes the tenured faculty think, “Hmm, why should we take this person seriously?” 3. Finally, candidates need to be able to demonstrate a growth path. When I look at a candidate we’ve decided to interview, I’m only so interested in what they did before: their past achievements got them their interview, so now I’m interested in what lies ahead. I care to see what kind of agenda they have mapped out—is it interesting, is it hard, could someone else do it, etc.—and what skills they bring to the table (can they do it, and can they do it better than others). I imagine this step is hard for some CSEd candidates. If you got a PhD studying some population, it may or may not be interesting to keep studying that population or to study the next such population or whatever. At the very least, then, if you intervened, showed an N% improvement, and have good plans to get to much more, and then show a path to bigger and more interesting problems, now you’ve got my interest. Put differently, think in terms of active interventions that demonstrate impact. Now you become comparable to students who are building or verifying software, deriving inferences from datasets, and so on. I don’t know whether CSEd students are getting advice in terms of presenting themselves this way."
"354","2014-04-11","2023-03-24","https://computinged.wordpress.com/2014/04/11/naming-a-field-cs-ed-research-isnt-going-to-work/","Last month, Steve Cooper organized a remarkable workshop at Stanford on the Future of Computing Education Research. The question was, “How do we grow computing education research in the United States?” We pretty quickly agreed that we have a labor shortage — there are too few people doing computing education research in the US. We need more. In particular, we need more CS Ed PhD students. The PhD students do the new and exciting research. They bring energy and enthusiasm into a field. We also need these students to fit into Computing departments, where that could be Computer Science, or Informatics, or Information Systems/Technology/Just-Information Departments/Schools/Colleges. Yes, we need a presence in Education Schools at some point, to influence how we develop new teachers, but that’s not how we’ll best push the research. How do we get there? Roy Pea came to the event. He could only spare a few hours for us, and he only gave a brief 10 minute talk, but it was one of the highlights of the two days for me. He encouraged us to think about Learning Sciences as a model. Learning Science grew out of cognitive science and computer science. It’s a field that CS folks recognize and value. It’s not the same as Education, and that’s a positive thing for our identity. He told us that the field must grow within Computing departments because Domain Matters. The representations, the practices, the abstractions, the mental models — they all differ between domains. If we want to understand the learning of computing, we have to study it from within computing. I asked Roy, “But how do we influence teacher education? I don’t see learning science classes in most pre-service teacher development programs.” He pointed out that I was thinking about it all wrong. (Not his words — he was more polite than that.) He described how learning sciences has influenced teacher development, integrated into it. It’s not about a separate course: “Learning science for teachers.” It’s about changing the perspective in the existing classes. Ken Hay, a learning scientist (and long-time friend and colleague) who is at Indiana University, echoed Roy’s recommendation to draw on the learning sciences as a model. He pointed out that Language Matters. He said that when Indiana tried to hire a “CS Education Researcher,” faculty in the CS department said, “I teach CS. I’m a CS Educator. How is s/he different than me?” We started talking about how “Computer Science Education Research” is a dead-end name for the research that we want to situate in computing departments. It’s the right name for the umbrella set of issues and challenges with growing computing education in the United States. It includes issues like teacher professional development and K-12 curricula. But that’s not what’s going to succeed in computing departments. It’s the part that looks like the learning sciences that can find a home in computing departments. Susanne Hambrusch of Purdue offered a thought experiment that brought it home for me. Imagine that there is a CS department that has CS Ed Research as a research area. They want to list it on their Research web page. Well, drop the word “Research” — this is the Research web page, so that’s a given. And drop the “CS” because this is the CS department, after all. So all you list is “Education.” That conveys a set of meanings that don’t necessarily belong in a CS department and don’t obviously connect to our research questions. In particular, we want to separate (a) the research about how people learn and practice computing from (b) making teaching and learning occur better in a computing department. (a) can lead to (b), but you don’t want to demand that all (a) inform (b). We need to make the research on learning and practice in computing be a value for computing departments, a differentiator. “We’re not just a CS department. We embrace the human side and engage in social and learning science research.” Lots of schools offer outreach, and some are getting involved in professional development. But to do those things informed by learning sciences and informing learning sciences (e.g., can get published in ICER and ICLS and JLS and AERA) — that’s what we want to encourage and promote. I was in a breakout that tried to generate names. Michael Horn of Northwestern came up with several of my favorites. Unfortunately, none of them were particularly catchy: We do have a name for a journal picked out that I really like: Journal of Computational Thinking and Learning. I’d appreciate your thoughts on these. What would be a good name for the field which studies how people learn computing, how to improve that learning, how professionals practice computing (e.g., end-user programming, computational science & engineering), and how to help novices join those professional communities of practice? I can’t remember the last time I learned so much and had my preconceived notions so challenged in just two days. I have a lot more notes on the workshop, and they may make it into some future blog posts. Kudos to Steve for organizing an excellent workshop, and my thanks to all the participants!"
"355","2013-08-23","2023-03-24","https://computinged.wordpress.com/2013/08/23/why-we-need-schools-of-education-for-a-stable-future-for-computing-ed/","I’ve mentioned before how much we need schools of education to guarantee the future stability of computing education. The new CSTA report on certification makes the point better than I do. I just wrote a Blog@CACM post explaining why we in CS need collaboration with schools of education. We don’t want to be in the business of certifying teachers. We certainly do not have the background to prepare teachers for a lifelong career in education. That’s what pre-service education faculty do. How we get from here to there is an interesting question. Michelle Friend suggests that we start by finding (or getting hired) faculty in science and mathematics education who are interested in starting computing programs. Few schools would be willing to take the risk of establishing computing education programs or departments today. They might exist one day, but they’ll probably grow out of math or science ed — just as many CS departments grew out of math or science or engineering roots. Given that (in the US) we lose close to 50% of our STEM teachers within the first five years of teaching, we have to establish reliable production of CS teachers, if we don’t want CS10K to be only CS5K five years later. To establish that reliable production, we need schools of education.  "
"356","2013-08-22","2023-03-24","https://computinged.wordpress.com/2013/08/22/new-csta-report-released-on-sad-state-of-cs-teacher-certification-in-us/","Copied from the press release sent to me by Stacey Finkel, CSTA’s media person. I’ve just started reading the report, and it’s really interesting. A new report released today by the Computer Science Teachers Association (CSTA) finds that Computer Science teacher certification/licensure in the United States is deeply flawed. While companies look to fill lucrative positions in the computing field, there is a critical shortage of qualified teachers to teach the next generation of computer scientists. Bugs in the System: Computer Science Teacher Certification in the U.S., developed with support from Google, is a comprehensive study of all 50 states and the District of Columbia revealing that each state (and in some states each school district) has its own process, its own definition of Computer Science, and its own idea of where Computer Science fits in the academic program and who is qualified to teach it. Bugs in the System reveals that only two states (Arizona and Wisconsin) require teachers to be certified/licensed in Computer Science and in many states there are no requirements for teaching Computer Science at all, meaning teachers with little or even no Computer Science knowledge can teach it and teacher preparation institutions are unlikely to offer programs for new Computer Science teachers. The report also reveals confusion at all levels about what Computer Science is and the knowledge required to teach it. As a result, teachers who want to teach Computer Science can be faced with, sometimes insurmountable challenges. For example, in Florida becoming a certified Computer Science teacher requires taking a course called K-6 Computer Science Methods, however the course is not offered in any teacher preparation program in the state."
"357","2015-05-25","2023-03-24","https://computinged.wordpress.com/2015/05/25/the-invented-history-of-the-factory-model-of-education-personalized-instruction-and-teaching-machines-arent-new/","When I was a PhD student taking Education classes, my favorite two-semester sequence was on the history of education. I realized that there wasn’t much new under the sun when it comes to thinking about education. Ideas that are key to progressive education movements date back to Plato’s Republic: “No forced study abides in a soul…Therefore, you best of men, don’t use force in training the children in the studies, but rather play. In that way you can also better discern what each is naturally directed toward.” Here we have learning through games (but not video games in 300BC) and personalized instruction — promoted over 2400 years ago. I named my dissertation software system Emile after Rousseau’s book with the same name whose influence reached Montessori, Piaget, and Papert decades later. Audrey Watters takes current education reformers to task in the article linked below. Today’s reformers don’t realize the history of the education system, that many of the idea that they are promoting have been tried before. Our current education system was designed in part because those ideas have already failed. In particular, the idea of building “teaching machines” as a response to “handicraft” education was suggested over 80 years ago. Education problems are far harder to solve than today’s education entrepreneurs realize. Many education reformers today denounce the “factory model of education” with an appeal to new machinery and new practices that will supposedly modernize the system. That argument is now and has been for a century the rationale for education technology. As Sidney Pressey, one of the inventors of the earliest “teaching machines” wrote in 1932 predicting “The Coming Industrial Revolution in Education,” Education is the one major activity in this country which is still in a crude handicraft stage. But the economic depression may here work beneficially, in that it may force the consideration of efficiency and the need for laborsaving devices in education. Education is a large-scale industry; it should use quantity production methods. This does not mean, in any unfortunate sense, the mechanization of education. It does mean freeing the teacher from the drudgeries of her work so that she may do more real teaching, giving the pupil more adequate guidance in his learning. There may well be an “industrial revolution” in education. The ultimate results should be highly beneficial. Perhaps only by such means can universal education be made effective. via The Invented History of ‘The Factory Model of Education’. The reality is that technology never has and never will dramatically change education (as described in this great piece in The Chronicle). It will always be a high-touch endeavor because of how humans learn. Education is fundamentally a human activity and is defined by human attention, motivation, effort, and relationships. We need teachers because we are motivated to make our greatest efforts for human beings with whom we have relationships and who hold our attention. In the words of Richard Thaler, there are no Econs (see recommended piece in NYTimes)."
"358","2015-05-27","2023-03-24","https://computinged.wordpress.com/2015/05/27/why-we-need-learning-engineers-the-digital-campus-the-chronicle-of-higher-education/","I agree strongly with the idea of “learning engineers.” Having learning engineers doesn’t relieve faculty who teach from the responsibility to learn more about learning sciences (see my blog post about testing teachers about PCK). Just teaming up subject-matter experts with learning engineers does not inform a teacher’s day-to-day and in-class decision-making. The general theme below is one I strongly agree with — we should rely more on evidence-based and research-based teaching. We are missing a job category: Where are our talented, creative, user-centric “learning engineers” — professionals who understand the research about learning, test it, and apply it to help more students learn more effectively? Jobs are becoming more and more cognitively complex, while simpler work is disappearing. (Even that old standby, cab driving, may one day be at risk from driverless cars from Google!) Our learning environments need to do a better job of helping more people of all ages master the complex skills now needed in many occupations. I am not suggesting that all subject-matter experts (meaning faculty members) need to become learning engineers, although some might. However, students and faculty members alike would benefit from increased collaboration between faculty members and learning experts — specialists who would respect each other’s expertise — rather than relying on a single craftsman in the classroom, which is often the case in higher education today. via Why We Need Learning Engineers – The Digital Campus – The Chronicle of Higher Education."
"359","2015-05-29","2023-03-24","https://computinged.wordpress.com/2015/05/29/californias-multi-million-dollar-online-education-flop-is-another-blow-for-moocs-what-happened/","I don’t think that MOOCs are a good solution for required classes. I agree with the idea that MOOCs are for people who want to learn something because they’re interested in it, and that completion rates don’t matter there. That suggests that we shouldn’t use MOOCs where (a) the students don’t know what they need to know and (b) completion rates matter. Setting aside my concerns about MOOCs, it’s not exactly clear what’s going on in the below article. I get that it’s not good that California had to just forgive the loan of $7M USD, and that they will likely to continue to lose money. I get that the quote below says, “we got extremely little in return.” I don’t see what was the return. I don’t see how many students actually participated (e.g., we’re told that there was only 250 non-UC students, but not how many UC students participated), and if the courses they created could continue to be used for years after, and so on. It doesn’t look good, but there’s not enough information here to know that it was bad. “We spent a lot of money and got extremely little in return,” said Jose Wudka, a physics professor at UC-Riverside who previously chaired the Systemwide Committee on Educational Policy of the Academic Senate, which represents faculty in the UC System. The project, which cost $7 million to set up at a time when the state was cutting higher-education funding, aspired to let students take courses across campuses. via California’s multi-million dollar online education flop is another blow for MOOCs – The Hechinger Report."
"360","2015-04-27","2023-03-24","https://computinged.wordpress.com/2015/04/27/end-the-leaky-pipeline-metaphor-when-discussing-women-in-science-technical-knowledge-can-be-used-in-many-domains/","I’m familiar with the argument that we shouldn’t speak of a “pipeline” because students come to STEM (and computing, specifically) in lots of ways, and go from computing into lots of disciplines. The below-linked essay makes a particular point that I find compelling. By using the “leaky pipeline” metaphor, we stigmatize and discount the achievements of people (women, in particular in this article) who take their technical knowledge and apply it in non-computing domains. Sure, we want more women in computing, but we ought not to blame the women who leave for the low numbers. However, new research of which I am the coauthor shows this pervasive leaky pipeline metaphor is wrong for nearly all postsecondary pathways in science and engineering. It also devalues students who want to use their technical training to make important societal contributions elsewhere. How could the metaphor be so wrong? Wouldn’t factors such as cultural beliefs and gender bias cause women to leave science at higher rates? My research, published last month in Frontiers in Psychology, shows this metaphor was at least partially accurate in the past. The bachelor’s-to-Ph.D. pipeline in science and engineering leaked more women than men among college graduates in the 1970’s and 80’s, but not recently. Men still outnumber women among Ph.D. earners in fields like physical science and engineering. However, this representation gap stems from college major choices, not persistence after college. Other research finds remaining persistence gaps after the Ph.D. in life science, but surprisingly not in physical science or engineering — fields in which women are more underrepresented. Persistence gaps in college are also exaggerated. via Essay calls for ending the ‘leaky pipeline’ metaphor when discussing women in science @insidehighered."
"361","2015-06-29","2023-03-24","https://computinged.wordpress.com/2015/06/29/blocks-and-beyond-workshop-at-vlhcc-lessons-and-directions-for-first-programming-environments/","Thursday, October 22, 2015, Atlanta, GA A satellite workshop of the 2015 IEEE Symposium Visual Languages and Human-Centric Computing (VL/HCC) https://sites.google.com/site/vlhcc2015 Blocks programming environments represent program syntax trees as compositions of visual blocks. This family of tools includes Scratch, Code.org’s Blockly lessons, App Inventor, Snap!, Pencil Code, Looking Glass, etc. They have introduced programming and computational thinking to tens of millions, reaching people of all ages and backgrounds. Despite their popularity, there has been remarkably little research on the usability, effectiveness, and generalizability of affordances of these environments. The goal of this workshop is to begin to distill testable hypotheses from the existing folk knowledge of blocks environments and identify research questions and partnerships that can legitimize, or discount, pieces of this knowledge. It will bring together educators and researchers who work with blocks languages and members of the broader VL/HCC community interested in this area. We seek participants with diverse expertise, including, but not limited to: design of programming environments, instruction with these environments, the learning sciences, data analytics, usability, and more. The workshop will be a generative discussion that sets the stage for future work and collaboration. It will include participant presentations and demonstrations that frame the discussion, followed by reflection on the state of the field and smaller working-group discussion and brainstorming sessions. Suggested Topics for Discussion We invite two kinds of submissions: All submissions must be made as PDF files to the Easy Chair Blocks and Beyond workshop submission site (https://easychair.org/conferences/?conf=blocksbeyond2015). Because this workshop will be discussion-based, rather than a mini-conference, the number of presentation/demonstration slots are limited. Authors for whom presentation or demonstration is essential should indicate this in their submission. Program Committee"
"362","2015-06-24","2023-03-24","https://computinged.wordpress.com/2015/06/24/there-is-magic-in-our-program-our-program-changes-lives-a-teachers-wish/","My daughter is enrolled in Georgia’s “Governor’s Honor Program” which started this week. The program is highly competitive — my daughter filled out multiple applications, wrote essays, and went through two rounds of interviews. Over 700 high school students from across Georgia attend for four weeks of residential classes on a university campus for free. At the parent’s orientation, we heard from two former GHP students, the Dean of Student Life, the Dean of Residence Halls, the GHP Program Manager, and the Dean of Instruction. It’s that last one who really got me. “You heard from these students, and many other students. GHP changes lives. There is magic in our program.“ The program sounds remarkable. No grades, no tests. The Dean of Instruction said she told the teachers to “give these students learning opportunities beyond what’s in any high school classroom.” Students are only there to learn for learning’s sake. I was thrilled for my daughter, that she was going to have this experience. I was also thrilled as a teacher. I want to teach in a program whose leadership says, “There is magic in our program. Our program changes lives.” Last week, I took my daughter to tour three universities. Our daughter is the youngest of three, so I’ve attended other prospective student tours at other universities. I’ve never heard anybody at any of these universities make that kind of claim. I don’t mean to critique my leadership at Georgia Tech in particular. When I was the Undergraduate Program Director, I never said anything like that to my teachers or to prospective parents. I am critical of higher education more broadly. Higher education in America sets goals like preparing students for careers, giving them experiences abroad and in research, giving them options so that they can tailor their program to meet their particular desires, and surrounding them with great fellow students — I’ve heard all of those claims many times on many tours. I’ve never heard anyone say, “We change lives.” Rich DeMillo argued in his book Apple to Abelard that higher education institutions need to differentiate from one another. Offering the same thing in the same way makes it hard to compete with the on-line and for-profit options. At Georgia Tech, the faculty are frequently told, “We get amazingly smart students.” We’re told to think about how to tune our education for these super-smart students. I’ve never been told, “Give these students experiences beyond what they will get in any other program. Create magic. Change their lives.” What I gained at GHP is a new definition for what higher education should be about. We need to step up our game."
"363","2016-04-22","2023-03-24","https://computinged.wordpress.com/2016/04/22/latice-2017-in-saudi-arabia-women-must-cover-up/","At the end of LaTICE 2016, the Vice-Rector of Al-Baha University in Saudi Arabia (see information here) welcomed attendees to LaTICE 2017. After the presentation about Al-Baha University, Sahana Murthy of IIT-Bombay stood up and asked, “Can I come to LaTICE 2017 dressed as I am right now, in Indian clothes?” The Vice-Rector replied, “No.” All women, including foreigners, will be required to cover their hair at LaTICE 2017.  That exchange was a central topic of conversation for the rest of the conference and in social media for me. I heard some female computing education researchers say that they would attend anyway. Many I heard from expressed outrage. Several were angry that the organizing committee for LaTICE would even place the conference in Saudi Arabia under these restrictions. I spoke to Neena Thota about LaTICE 2017 (seen below after my keynote). She was one of the Chairs for LaTICE 2016 (faculty at Uppsala University and University of St. Joseph in Macau) who went to Saudi Arabia in preparation for the conference. She felt respected there and taken seriously as a scholar, but she did have to cover-up. Neena doesn’t expect that the rules for women in Saudi Arabia (see the Wikipedia page here about them) will change for a long time. Do we simply ignore the scholars there and ostracize them, for rules over which they may have no control? As in Qatar, computer science students in Saudi Arabia are majority female.  The question is no longer rhetorical for me. I was invited to attend the Program Committee meeting at LaTICE 2016 as a non-voting observer, and I have been invited to serve on the PC for LaTICE 2017. I have already had several people warn me that I should not participate. They urged me to shun the conference publicly, in order to send a clear message against the treatment of women in Saudi Arabia. I’ve been thinking about this, and discussing it with women in my life (my wife, my daughters, and my colleagues). I’m not female, and I can’t fully understand my own biases as a male, so I sought advice from women in my life and very much appreciate all the comments I received. I’ve decided that I will serve on the LaTICE 2017 program committee. I understand the reasons of anyone who chooses not to participate. Those who choose not to review are sending a message that LaTICE should never have gone to a place that restricts the rights of women. I can understand why women, especially from the West, might choose not to attend. I don’t think foreign women should go there, unless they’re willing to abide by the laws and customs of the place they’re visiting. Here are my reasons for thinking it worthwhile to engage in LaTICE 2017: Neeti Pathak, one of the students with whom I work, pointed out that there is interplay between religion and culture in Saudi Arabia. I also look to my own faith in thinking about LaTICE 2017. Pope Francis, the leading figure in my faith, recently made a proclamation encouraging the Church to be more welcoming, even to those that the Church may have once ostracized (see NYTimes piece). That’s a proclamation that relates to LaTICE 2017. Everyone gains by engaging, even with those whose activities and rules we might not like. I’m not willing to ostracize a whole country, even if they have rules and customs that I think are wrong. I’m not confident that I understand the issues in Saudi Arabia. I’m not confident that my views on them are more than my Western biases interpreting customs and values I don’t understand. I don’t feel justified in making a statement against LaTICE 2017. I see value in engaging in dialogue. I shared earlier versions of this post with several colleagues, who are angry with me for the stance I’m taking. These are complicated issues. I am sure that there are many more perspectives that I have not yet considered. I welcome further discussion in the comments, including telling me why I’m wrong."
"364","2016-04-26","2023-03-24","https://computinged.wordpress.com/2016/04/26/top-business-leaders-27-governors-urge-congress-to-boost-computer-science-education-the-washington-post/","I saw on Facebook that Hadi Partovi was at Congress. Now I see why — there’s an effort underway to get Congress to fund more in CS education. I’m wondering what they want to get funded. Incentives for teachers? Professional development? Pre-service education? Does someone know the details? Despite this groundswell, three-quarters of U.S. schools do not offer meaningful computer science courses. At a time when every industry in every state is impacted by advances in computer technology, our schools should give all students the opportunity to understand how this technology works, to learn how to be creators, coders, and makers — not just consumers. Instead, what is increasingly a basic skill is only available to the lucky few, leaving most students behind, particularly students of color and girls. How is this acceptable? America leads the world in technology. We invented the personal computer, the Internet, e-commerce, social networking, and the smartphone. This is our chance to position the next generation to participate in the new American Dream. Source: Top business leaders, 27 governors, urge Congress to boost computer science education – The Washington Post"
"365","2016-04-01","2023-03-24","https://computinged.wordpress.com/2016/04/01/we-need-to-better-justify-cs-for-all/","Brian Drayton has now written a couple of posts critical of the CS for All initiative (one is linked below, and here’s another one), and his points are well taken. In my book on Learner-Centered Design of Computing Education, I consider several possible reasons for teaching CS to everyone. I prefer the same ones that he does, and I agree that much of the initiative is poorly justified. I do not believe that we should put CS into all schools in order to make high school graduates “job-ready” (see the White House release using that phrase). I agree that “everyone should code” is both unrealistic and poorly justified, as it has currently been advocated. I think we could make more progress (both in expanding people’s understanding of computer science or computation, and in empowering people to adopt such knowledge as a valuable tool for growth, creativity, and employment) if we did a better job envisioning what we’d like a classroom to look like that is deeply conversant with the tools and the insights of computer science in the same way that the classroom is already deeply infused with the tools and insights of literacy and numeracy. Source: Topic: “Computing for all #2: Can we get off the pendulum?” – Topic Posts"
"366","2017-08-25","2023-03-24","https://computinged.wordpress.com/2017/08/25/google-report-in-cacm-is-the-u-s-education-system-ready-for-cs-for-all/","Jennifer Wang of Google has the Education Viewpoints column in CACM this month, and she reports on data that Google is collecting on systemic issues preventing CS for All. It’s an important report that I recommend. Interestingly, we also found that regardless of race/ethnicity or gender, 80% of students who have learned CS said that they learned CS in a class at school, about twice the rate of any other means of learning, including on their own, through afterschool clubs, online, or in any other program outside of school. This data strongly suggests formal education remains the best way to ensure widespread and equitable access to CS learning. Yet, we found schools faced many barriers to offering CS classes. We asked principals and superintendents why they did not offer CS in their schools and districts. The most commonly cited barriers had to do with lack of qualified teachers and competing demands of standardized test preparation. Lack of qualified teachers was cited by 63% of principals and 74% of superintendents. Not enough funding to train teachers was cited by 55% of principals and 57% of superintendents. The need to devote time to testing requirements was cited by 50% of principals and 55% of superintendents. This indicates computing professionals can play an important role in expanding access to CS by supporting organizations that train teachers and by providing mentoring and resources to teachers and students. Source: Is the U.S. Education System Ready for CS for All? | August 2017 | Communications of the ACM"
"367","2016-03-31","2023-03-24","https://computinged.wordpress.com/2016/03/31/starting-to-track-cs-classes-in-georgia-few-all-cs-teachers/","As I noted in my Blog@CACM post about the ECEP Cohort (see post here), some states are starting to track enrollments and sections of CS classes offered. Georgia is one of those, and I got to see the first presentation of these data at a CS Task Force meeting from Dr. Caitlin McMunn Dooley. Slides from the presentation are here. There are five courses that currently count towards high school graduation in Georgia, and these are the ones being most closely tracked: AP CS Level A, CS Principles, IB CS Year 1, IB CS Year 2, and a Georgia-specific course, Programming Games, Apps, and Society. If you look at the counts of how many teachers are teaching of these course, it looks like good growth. There are just over 440 high schools in Georgia, so if there were one of these teachers in each high school, we could have 25-50% of Georgia high schools with CS teachers. What we don’t know is how many of these teachers are appearing in multiple categories. These are unlikely to be all unique teachers. How many AP CS teachers, for example, are also teaching CS Principles?  The data below were the most surprising to me. Georgia’s state education system is broken into 16 Regional Education Service Agencies (RESAs). We have the counts of the number of teachers of CS classes in each of those 16 RESAs, and we have the count of the number of sections of CS classes offered in each RESA. Notice that the numbers are pretty similar. For the most part, high school CS teachers in Georgia are only teaching one or two sections of CS. We have very few high school teachers who teach CS full-time. There are a few, e.g., some of our teachers who worked with us in “Georgia Computes!” were teaching five sections of CS each day. Most Georgia CS teachers are likely teaching some other discipline most of the time, and offering just a couple sections of CS.  If our goal is for all high school students to have access to CS education, we need to have more than one section of 30-40 students per teacher or per school (which is roughly the same thing right now). We need more teachers offering a section of CS and/or we need each teacher to offer more sections of CS. Right now, too few teachers offer CS to too few students. I don’t know how common these trends are nationwide. Few states are tracking CS classes yet. Georgia is one of the leading states measuring progress in CS education. We need more information to know what’s going on."
"368","2016-04-29","2023-03-24","https://computinged.wordpress.com/2016/04/29/what-does-it-mean-to-reach-all-in-cs4all-qualify-your-quantifiers-blogcacm/","I’ve raised the concern before that the CS for All effort might mean “CS for only the rich” (see post here). Our data from Georgia suggest that few students are actually getting access to CS education, even if there is a CS teacher in the school (see post here). Kathi Fisler, Shriram Krishnamurthi, and Emmanuel Schanzer offer a Blog@CACM post where they consider how we make sure that #CS4All is equitable. Mandating every child take a computing class is a great way to ensure everyone takes CS, but very few states, cities, or even school districts are in a position to hire enough dedicated CS teachers or offer dedicated CS classes to reach every child. Recent declarations from several major districts that “every child will learn to code” often place impossible burdens on schools. Similarly, few schools can afford to offer CS programs that require cutting-edge computers, expensive consumables, or technology that requires significant maintenance. To truly achieve CS4All Students in a sustainable way, equity and scale are issues that must be built in by design. Similarly, initiatives have to think about differently-abled users from scratch, not just bolt them on as an afterthought. Accessibility needs to be designed into software, curriculum, and pedagogy from the earliest stages. The “move fast and break things” culture of computing is no help here. Right now, computing education has enormous attention. That day will pass. By the time we get around to focusing on equity, we may have depleted the energy left to overhaul computing curricula. Instead, we have to think this through at the very outset. Another computing principle is that products typically get one shot at gaining users’ attention. For the foreseeable future, this is that one shot for computing education. Source: Qualify your Quantifiers | blog@CACM | Communications of the ACM"
"369","2014-03-20","2023-03-24","https://computinged.wordpress.com/2014/03/20/who-needs-to-know-how-to-code-more-than-just-the-rich-white-boys/","Wall Street Journal just ran an article (linked below) about people “flocking to coding classes.” The lead for the story (quoted below) is a common story, but concerning. If coding is all extra-curricular, with the (presumably expensive) once-a-week tutor, then how do the average kids get access? How do the middle and lower kids get access? Hadi Partovi and Jane Margolis talked about this on PRI’s Science Friday — CS education can’t be an afterschool activity, or we’ll keep making CS a privileged activity for white boys. Like many 10-year-olds, Nick Wald takes private lessons. His once-a-week tutor isn’t helping him with piano scales or Spanish conjugations, but teaching him how to code. Nick, a fifth-grader in New York, went in with no experience and has since learned enough HTML, JavaScript and CSS to build a simple website. He is now working in Apple’s XCode environment to finish an app named “Clockie” that can be used to set alarms and reminders. He plans to offer it in the iOS App Store for free. “I always liked to get apps from the app store, and I always wanted to figure out how they worked and how I could develop it like that,” Nick says. As the ability to code, or use programming languages to build sites and apps, becomes more in demand, technical skills are no longer just for IT professionals. Children as young as 7 can take online classes in Scratch programming, while 20-somethings are filling up coding boot camps that promise to make them marketable in the tech sector. Businesses such as American Express Co. AXP -0.57% send senior executives to programs about data and computational design not so they can build websites, but so they can better manage the employees who do. via Who Needs to Know How to Code – WSJ.com."
"370","2014-02-01","2023-03-24","https://computinged.wordpress.com/2014/02/01/is-coding-the-language-of-the-digital-age-npr-science-friday-with-hadi-and-jane/","It’s kind of a strange program. The interviewer didn’t seem to know who his guests (Hadi Partovi and Jane Margolis) were. If you have Jane Margolis on your program, you ask her about why it’s important for everyone to have access to computing, not whether programming is more fun today than it was in the 1960’s. Hadi and Jane did a good job of conveying their messages and responding reasonably, but you can almost hear them thinking, “What was that question?!?” I particularly liked the end part where Hadi and Jane together point out that after-school clubs are not a replacement for computer science in the curriculum. With smartphones, tablets, and apps, coding is becoming the language of the digital age, but is the U.S. lagging behind? A panel of experts discusses how we can improve our coding literacy and close the programming gap among women and minorities. via Is Coding the Language of the Digital Age?."
"371","2016-04-04","2023-03-24","https://computinged.wordpress.com/2016/04/04/liberal-arts-colleges-explore-interdisciplinary-pathways-with-cs-great-to-see/","I’m excited by this initiative. We need to see more CS + X kinds of programs. Our Computational Media degree program has been a Computing + Digital Media program, and is wildly successful (see example post here). The challenge is to engage faculty from across campus in the initiative. Bates last September launched a similar project, called the Digital Course Design/Redesign Initiative, for faculty members interested in adding digital and computational tools or methods to existing courses. If it becomes popular among faculty members, the initiative could help realize Bates’s plans of having interdisciplinary pathways for its digital and computational studies majors. Auer, the Bates dean, acknowledged that building those pathways is “going to require deep consultation with the faculty” — as well as some new faculty members in other departments. Source: Liberal arts colleges explore interdisciplinary pathways with computer science"
"372","2016-04-06","2023-03-24","https://computinged.wordpress.com/2016/04/06/steps-to-help-foster-a-preschoolers-spatial-reasoning-skills-and-computer-science-students-too/","I am a fan of the work at the Spatial Intelligence and Learning Center (see web page here). They’re in the final phases of the Center and are starting to publish wrap-up papers. Since spatial intelligence is likely predictive of success in computing (see paper from last year’s ICER), these are important ideas for us to think about in computing education, too. Reading spatially challenging picture books is another way to engage children’s spatial thinking and expose them to spatial language. Look for books that include pictures from various angles or perspectives, that contain maps and abundant spatial language, or whose illustration require close attention to decipher their meaning — such as wordless books. According to Newcombe, “Even though books only contain static pictures, they can help children understand spatial transformations, if adults read them with the children and stimulate their imagination.” Source: Steps to Help Foster a Preschooler’s Spatial Reasoning Skills | MindShift | KQED News"
"373","2016-04-07","2023-03-24","https://computinged.wordpress.com/2016/04/07/call-for-participation-international-computing-education-research-2016-in-melbourne-australia/","The twelfth annual ACM International Computing Education Research (ICER) Conference aims to gather high-quality contributions to the computing education research discipline. We invite submissions across a variety of categories for research investigating how people of all ages come to understand computational processes and devices, and empirical evaluation of approaches to improve that understanding in formal and informal learning environments. Research areas of particular interest include: In addition to standard research paper contributions, we continue our longstanding commitment to fostering discussion and exploring new research areas by offering several ways to engage. These include a doctoral consortium for graduate students just prior to the conference, a work-in-progress workshop for researchers following the conference, and poster and lightning talks. This is in addition to the format of conference sessions, where all research paper presentations include time for discussion among the attendees followed by feedback to the paper presenters. ICER provides multiple options for participation, with various levels of discussion and interaction between the presenter and audience. These sessions also support work at various levels, ranging from formative work to polished, complete research results. 8 page limit (plus up to 2 additional pages for references), double-blind peer reviewed and published in the ACM digital library as part of the conference proceedings. Accepted papers are allotted 30 minutes for presentation and discussion at the conference. 2 page extended abstract submission required and published in ACM digital library as part of the conference proceedings. Students will present their work to distinguished faculty mentors during an all-day workshop and during the conference in a dedicated poster session. Abstract (300 words) submission required and made available on conference website, but not published in proceedings. Accepted abstracts for lightning talks will be given a 3-minute time slot for rapid presentation at the conference followed by a discussion period for all attendees. Posters may either accompany a lightning talk or may be proposed separately using the same abstract submission process. This one-day workshop is a venue to get sustained engagement with and feedback about early work in computing education. White paper submission required but not included in proceedings. Proposals for pre/post conference workshops of interest to the ICER community (ie, those that aim to advance computer science education research) are welcomed and encouraged. ICER local arrangements personnel will be available to assist with workshop logistics where possible. If interested, contact the conference chairs for more details by April 22nd 2016:judy.sheard@monash.edu For more information about preparation and submission, please visit the page corresponding to the submission type of interest. More details can be found at the specific pages, linked above."
"374","2016-04-08","2023-03-24","https://computinged.wordpress.com/2016/04/08/survey-for-cs-faculty-on-use-of-evidence-based-instructional-practices/","Clearly an important topic — I’m sharing this here, with thanks to Scott. The SIGCSE Committee on Evidence-based Instructional Practices is investigating the most commonly used teaching practices in CS education (such as classroom activities, student learning goals and assessment techniques). We are replicating a study from physics education that surveyed over 800 faculty. We have already used the validated instrument in a pilot study with twelve institutions and have received 160 responses so far. Rather than simply send a survey link to this mailing list that might create a skewed sample, we are inviting entire CS departments to survey their members. Our goal is to survey instructors from many 2-year, 4-year, private, public, research and teaching institutions. The project will allow us to accomplish three important objectives: WILL YOU INTRODUCE US TO YOUR COLLEAGUES? Best survey practices have shown that an introduction from a trusted colleague increases response rates. This is where you can help! Are you willing to support the CS education community by introducing us to your colleagues and encouraging them to complete the survey? Please contact Scott Grissom BY FRIDAY APRIL 15 if you are willing to help, and we will provide more information about what we will ask you to do. Thanks, SIGCSE Committee on Evidence-based Instructional Practices – Scott Grissom, Grand Valley State University, grissom@gvsu.edu – Sue Fitzgerald, Metropolitan State University, sue.fitzgerald@metrostate.edu – Renée McCauley, College of Charleston, mccauleyr@cofc.edu – Laurie Murphy, Pacific Lutheran University, lmurphy@plu.edu"
"375","2016-04-27","2023-03-24","https://computinged.wordpress.com/2016/04/27/call-for-participants-icer-doctoral-consortium-sept-8th-melbourne-australia/","The ICER 2016 Doctoral Consortium provides an opportunity for doctoral students studying computing education to explore and develop their research interests in a supportive workshop environment with a panel of established researchers. We invite students to apply for this opportunity to share their work with students in a similar situation as well as senior researchers in the field. Applicants to the Doctoral Consortium should have begun their research, but should not have completed it. We want people who have questions to raise with their peers and the more senior mentors, and who still have time to respond to and use the feedback in their research. DC Co-Chairs for 2016: Anthony Robins, University of Otago, New Zealand Ben Shapiro, University of Colorado, USA Contact us at: icerdc2016@gmail.com The DC has the following objectives: The DC will be held on Thursday, September 8, 2016 (prior to the main ICER conference, in Melbourne, Australia). Students at any stage of their doctoral studies are welcome to apply and attend. The number of participants is limited to 15. Applicants who are selected will receive a limited partial reimbursement of travel, accommodation and subsistence (i.e., food) expenses of $600 (USD). An extra $200 may be available for participants with travel expenses greatly exceeding the standard support. Process Timeline: You can find more information on applying athttps://icer.hosting.acm.org/icer-2016/doctoral-consortium/"
"376","2016-03-28","2023-03-24","https://computinged.wordpress.com/2016/03/28/a-new-survey-explains-one-big-reason-there-are-so-few-women-in-technology/","Betsy DiSalvo and I did a study of women in computing who chose not to participate in our OMS CS program. One of the reasons we heard was that these women were experienced with computing education. They all had undergraduate degrees in computing. Every one of them talked about the sexism rampant in their classes and in the industry. They were unwilling to be in a mostly-male online program. We used to talk about getting the word out to women about the great job available in the tech industry, and about how that would attract more women. I fear that women today who are choosing not to go into the tech industry are doing so because they do know what it’s like. A new study finds that sexism is rampant in the tech industry, with almost two-thirds of women reporting sexual harassment and nearly 90 percent reporting demeaning comments from male colleagues.The study, called “Elephant in the Valley,” surveyed 200 women who work at tech companies, including large companies like Google and Apple as well as start-ups. The study focused on women who had 10 years of experience in the industry, and most worked in Silicon Valley. Source: A new survey explains one big reason there are so few women in technology – Vox"
"377","2016-05-30","2023-03-24","https://computinged.wordpress.com/2016/05/30/logo-summer-institute-2016-available/","As readers of this blog know, I started in computing education working in Logo. My first published paper ever was at Logo84, the International Logo Conference at MIT, and an early paper I wrote on using Logo to teach music to young children is still available. I did a post here on all the great interdisciplinary curricula that existed for Logo. There are still Logo workshops available for teachers, and there are slots open for this summer. The Logo Summer Institute is an intensive workshop in creative computing for K12 teachers, parents, and technology integrators. Our project-based approach supports computational thinking and STEAM learning and teaching. The program is highly individualized to accommodate novices as well as more experienced participants, teachers of different subjects, and those who work in informal settings as well as in classrooms.Learn to code as you explore and create projects using Scratch, Makey Makey, Hummingbird, Arduino, LEGO and a many other hardware and software platforms.The Logo Summer Institute provides a relaxed atmosphere with a small group of colleagues and a great deal of personal attention from experienced workshop leaders. We have a low participant to facilitator ratio and daily advisory meetings to insure that participants’ individual needs are met. Source: Logo Foundation Workshops | Logo Summer Institute 2016"
"378","2013-10-05","2023-03-24","https://computinged.wordpress.com/2013/10/05/teaching-programming-with-music-an-approach-to-teaching-young-students-about-logo/","This isn’t really a part of my live coding series, but maybe it’s a good transition. I recently re-found this tech report, that I wrote in 1989–on teaching Logo by having kids build music, collaborative. We didn’t have the lovely separation of program and process that the live coders have, but we did have an interesting opportunity to play with music and phrasing and chords and computing with children (ages 9-11, roughly). When ten students are exploring music in the same small room, the discovery of harmonies and disharmonies is almost guaranteed. The students soon discovered that songs played together sound different than when each is played separately. The Atari 800 supports multiple voice sounds, and in some classes we used multiple voice play statements. Ironically, even in those classes where we used the full capabilities of the Atari, the students seem to prefer single voices emitting from multiple computers than multiple voices emitting from a single computer. When students remarked on the sound of multiple computers playing simultaneously, I would set up some joint music projects. First, I would explain to the students how to calculate the length of a song; that is, the sum of the durations in the song. So play [c 20 e 30 rest 10 g 40] has a duration of 100 (20+30+10+40). We had various multiple-computer activities based on the length of songs in these classes. One of the first was to have each student write a song whose length was a large number, say, 500. The students were to enter their songs and the command to play them, but to wait before hitting the Return key. On the count of three, all the students would press Return at once. The resulting song was always interesting. The younger students and those less confident in mathematics tended to play only two or three notes, each with a long duration. The older students and those wishing to show off would tend to write long songs with shorter durations (e.g., five or ten beats per note). When the group song was played, the younger students’ part became a background (sometimes harmonious, mostly dischordant) for the older students’ melody. via Teaching Programming with Music: An Approach to Teaching Young Students About Logo."
"379","2021-06-14","2023-03-24","https://computinged.wordpress.com/2021/06/14/call-for-nominations-for-editor-in-chief-of-acm-transactions-on-computing-education/","The term of the current Editor-in-Chief (EiC) of the ACM Transactions on Computing Education (TOCE) is coming to an end, and the ACM Publications Board has set up a nominating committee to assist the Board in selecting the next EiC. TOCE was established in 2001 and is a premier journal for computing education, publishing over 30 papers annually. Nominations, including self nominations, are invited for a three-year term as TOCE EiC, beginning on September 1, 2021. The EiC appointment may be renewed at most one time. This is an entirely voluntary position, but ACM will provide appropriate administrative support. Appointed by the ACM Publications Board, Editors-in-Chief (EiCs) of ACM journals are delegated full responsibility for the editorial management of the journal consistent with the journal’s charter and general ACM policies. The Board relies on EiCs to ensure that the content of the journal is of high quality and that the editorial review process is both timely and fair. He/she has final say on acceptance of papers, size of the Editorial Board, and appointment of Associate Editors. A complete list of responsibilities is found in the ACM Volunteer Editors Position Descriptions. Additional information can be found in the following documents: · Rights and Responsibilities in ACM Publishing · ACM’s Evaluation Criteria for Editors-in-Chief Nominations should include a vita along with a brief statement of why the nominee should be considered. Self-nominations are encouraged. Nominations should include a statement of the candidate’s vision for the future development of TOCE. The deadline for submitting nominations is July 21, 2021, although nominations will continue to be accepted until the position is filled. Please send all nominations to the nominating committee chairs, Mark Guzdial (mjguz@umich.edu) and Betsy DiSalvo (bdisalvo@cc.gatech.edu). The search committee members are: Louiqa Raschid (University of Maryland) will serve as the ACM Publications Board Liaison "
"380","2021-02-08","2023-03-24","https://computinged.wordpress.com/2021/02/08/national-academies-report-on-authenticity-to-promote-computing-interests-and-competencies/","The National Academies has now released the report that I’ve been part of developing for the last 18 months or so: “Cultivating Interest and Competencies in Computing: Authentic Experiences and Design Factors.” The report is available here, and you can read it online for free here. The starting question for the report is, “What’s the role of authentic experiences in developing students’ interests and abilities in computing?” The starting place is a simple observation — lots of current software engineers did things like take apart their toasters as kids, or participate in open-source programming projects as novices. I hear that it’s pretty common in technical interviews to ask students about their GitHub repositories, assuming that that’s indicative of their potential abilities as engineers. There’s a survivor bias in the observation about toasters and open-source projects. You’re only seeing the people who made it to the software engineering jobs. You’re not seeing the people who were turned off by those activities. You’re not seeing the people who couldn’t even get into open-source projects. Is there a causal relationship? If a student engages in “authentic experiences,” does it lead to greater interest and skill development? You can skip all the way to Chapter 8 for the findings: We don’t know. There are not enough careful studies exploring the question to establish a causal relationship. But that’s not the most important part of the report. The key questions of the report really are: “What is an authentic learning experience? What prevents students from getting them?” We came up with two definitions: These don’t have to be in opposition, but they often are. The Tech industry and open-source development is overwhelmingly male and white or Asian. Learning activities that are culturally relevant may be interesting and meaningful to students, but may not obviously connect to professional practice. Activities that are grounded in current practice may not be interesting or meaningful to students, especially if the students see themselves as outsiders and not belonging to the culture of software development (open source or industry). Formal educational systems place a premium on professional, vocational practice, and informal education systems need personal authenticity to keep drawing students in. The report does a good job covering the research — what we know (and what we don’t), how the issues vary in informal and formal education, and what we can recommend about designing for authenticity (both kinds, without opposition) in learning experiences. If you ever get the chance participate in a National Academies consensus report, I highly recommend the experience. You’re producing something for the community, so the amount of review and rewriting is significant — more than in any other kind of writing I’ve ever done. It’s worth it. You learn so much! It’s the National Academies, and they gather pretty amazing committees. If you ever get the chance to grab a coffee or beer with any of the participants on the committee, external or staff, take that chance! (I’m not sure I’d recommend chairing or directing one of these committees — the amount of work that Barbara and Amy did was astounding.) Every single one of these folks have amazing insights and experiences. I’m grateful for the opportunity to hang out with them (even when it went all on-line), write with them, and learn from them."
"381","2021-01-11","2023-03-24","https://computinged.wordpress.com/2021/01/11/teaching-to-all-the-other-goals-of-computing-for-greater-diversity/","My Blog@CACM post for this month is about the working definitions of computing that we are developing in a task force at the University of Michigan see post here). We are charged with identifying the computing education needs for undergraduates in the College of Literature, Sciences, and the Arts (LS&A). My post describes three different goals for computing education, based on what LS&A faculty do with computing and what they want their students to know. In my post, I described how these are different, and about the challenges of meeting all of these educational needs. The biggest challenge I wonder about is the organizational one. Whose job is it to teach to each of these goals? In this post, I want to argue from a different direction. All of these have a CS component. These aren’t typically priorities in many CS departments. To have more diversity in computer science, we ought to make them a priority. Each of the three LS&A themes represent a significant CS research thrust. We distilled them from discussions with faculty in Literature, Sciences, & the Arts, but students could be interested in these themes and seek a computer science degree and career. I’d expect that these themes are more common among students who enter computing from liberal arts and sciences than from engineering. Computer scientists often create infrastructure and theory for “Computing for Discovery,” from NeurIPS to ACM SIGSIM. At Georgia Tech, there is a School for Computational Science and Engineering. One of my colleagues in that school was Richard Fujimoto, who studied how to run discrete event simulations in parallel and distributed systems. He does his research so that others (scientists or engineers) could do theirs. Computer scientists invent and create tools to make “Computing for Expression” possible, presented in places like ACM SIGGRAPH and CHI. Alanson Sample joined U-M CSE the same time I did. He was formerly at Disney Research at Pittsburgh, where some of his team worked on the new Pandora exhibits at Disney World. The animatronic Na’vi were difficult for the animators to control, since the robot representation of the aliens were not meant to be human-like. Alanson’s colleagues created new kinds of design tools to support translating facial animations into robotic actuation for the Na’vi. I love that as an example of computer science enabling a new kind of expression. Technology Review recently published an accessible summary of the paper that led to Timnit Gebru’s being fired from Google (see link here). I knew about Timnit’s work as a scholar in “Critical Computing.” The TR piece did a terrific job explaining the deep CS ideas in their paper — like the potential fallacies of the language models used by Google and the enormous energy costs of running them. Computer science plays an important part in making thoughtful critiques of existing computing systems and infrastructures. Imagine that you are a student who has always dreamed of working at Pixar and building tools for animators. Or you are a student who is concerned about creating sustainable IT infrastructure for your community. You decide to pursue a computer science degree, and now you’re in classes about AVL trees or learning the issues between cache coherence and memory consistency. You might very reasonably drop out, to pursue a degree that move clearly helps you better achieves your goals. The problem is that that those are computer science issues. It’s perfectly reasonable to pursue computing education for those goals, but those might not be the goals that most CS Departments at Universities support. This does happen exactly as I described. Colleen Lewis and her colleagues showed us how it most often happens with candidates who are from groups under-represented in computer science (see blog about the paper here). These students come to computer science with their goals, and if they don’t see how to achieve their goals with the classes they’re given, they lose interest and drop out. Colleen and her students showed that having goals about community values were were more common among students who were female, Black, or Hispanic than students who were male, white, or Asian. The draft of the 2020 ACM/IEEE Computing Curriculum report is here. It’s a big document, so I might have missed it, but I don’t see these goals represented in the computer science outcomes. Some of these themes are in information systems or information technology. Some of the media fundamentals are in computer engineering. The core of computer science in the 2020 report is focused on “algorithms and complexity, programming languages, software development fundamentals, and software engineering” (quoting page 28). There is very little in the document about justice, equity, and critical consideration of our computing systems and infrastructure. A student can certainly start from the core of CS and focus on any of these sets of goals — but do students know that? How do we communicate that to them? This was a real problem when we created the Threads program at Georgia Tech where students identify two “threads” of computing which they will combine to create their BS in CS degree program. A student who chooses Media and Theory may be interested in video compression algorithms, and a student who chooses People and Intelligence might be interested in creating explainable AI, but both of those students will be in the same data structures and discrete math classes. We (mostly Charles Isbell and Bill Leahy) made sure that the foundational classes created the narratives that explained how the foundational concepts connected to these Threads. We wanted students to see how their goals were met by the core of CS. This might be easier in colleges focused on liberal arts and sciences with smaller classes. At my University, I taught the introduction to computing course to 760 students. We regularly have first year CS courses with over 1000 students. It’s very hard to cater to individual student goals at that scale. What we did at Georgia Tech and what we’re doing in our task force at the University of Michigan is to identify common goals and themes, and provide support and narrative for those. We will not reach all students’ goals. We aim to support more student goals than just software development in large Tech firms. We do our students a disservice if we do not help them see how they can pursue their goals within our undergraduate programs. A computer science degree from a major University is a big deal. It’s worth a lot in the economic marketplace. Is it fair to deny the degree to students who are engaged and curious about computer science because our CS undergraduate programs focus on one set of goals and ignore the others? Computer science is broader than just what the FAANG companies hire. CS undergraduate degree programs should not just be a Silicon Valley jobs program. Universities should support diversity in CS thoughts and goals if we want to have students from diverse backgrounds in computing."
"382","2020-10-26","2023-03-24","https://computinged.wordpress.com/2020/10/26/define-cs-so-cs-departments-include-cs-ed/","The CSEd Grad website and research project is supporting growth of research in CS education by supporting pathways for CSEd graduate students. I am excited to be speaking at their conference in a couple weeks (see program here), in a Q&A session with Dr. Amy Ko. One of the questions that we are considering is: Where would you expect that pathway to lead? Where would you expect faculty working in CS Education research to have their academic home? Education? Information? Computer Science? If we want to see computer science departments include CS education research, then we have to define computer science in a way that includes computing education research. My favorite definition of computer science is the first one published, in 1967 from Allen Newell, Alan Perlis, and Herbert Simon (all three Turing Award laureates, and Simon is also a Nobel laureate). They say that: Computer science is the study of the phenomena surrounding computers. Helping people to learn what computation is and how to program falls within that definition — it’s part of the phenomena surrounding computers. Some historians, like Nathan Ensmenger (see post here), have suggested that the lack of investment and innovation in CS education influenced the direction of CS research. Most definitions of computer science are not as broad as that. CSTA, Code.org, and ECEP have just come out with a new report on the state of CS Education in the United States (see report here). The definition they use (see K-12 Framework page here): “the study of computers and algorithmic processes, including their principles, their hardware and software designs, their implementation, and their impact on society” This definition includes fields like social computing and human-computer interaction, but doesn’t include the study of how people learn about computing. That’s a little ironic, that a report promoting CS education is promoting a definition that keeps education out of CS. The definition matters when decisions are made on the basis of it. A popular website that ranks CS departments around the world, CSRankings.org, does not include CS education. I wrote my Blog@CACM post this month on my critique of CSRankings.org (see post here). I am opposed to it because it’s America-first, anti-progressive, and anti-interdisciplinarity. People make decisions based on CSRankings.org. Graduate students use it to pick departments to apply to. Recommendation letters reference CSRankings.org for what is quality CS. If people use CSRankings.org to determine what “counts” (for attracting students, for promotion and tenure), then CS education literally doesn’t count. Researchers in CS education are at a disadvantage if their work doesn’t help their department in influential rankings. Let’s define computer science to reflect our values long-term. Where do we build a home for CS education researchers in the future?"
"383","2013-07-19","2023-03-24","https://computinged.wordpress.com/2013/07/19/if-we-cant-teach-programming-create-software-engineering-for-dumb-programmers/","I finished Nathan Ensmenger’s 2010 book “The Computer Boys Take Over: Computers, Programmers, and the Politics of Technical Expertise” and wrote a Blog@CACM post inspired by it. In my Blog@CACM article, I considered what our goals are for an undergraduate CS degree and how we know if we got there. Ensmenger presents evidence that the mathematics requirements in undergraduate computer science are unnecessarily rigorous, and that computer science has never successfully become a profession. The former isn’t particularly convincing (there may be no supporting evidence that mathematics is necessary for computer programming, but that doesn’t mean it’s not useful or important), but the latter is well-supported. Computer programming has not become a profession like law, or medicine, or even like engineering. What’s more, Ensmenger argues, the efforts to professionalize computer programming may have played a role in driving away the women. Ensmenger talks about software engineering as a way of making-do with the programmers we have available. The industry couldn’t figure out how to make good programmers, so software engineering was created to produce software with sub-par programmers: Jack Little lamented the tendency of manufacturers to design languages “for use by some sub-human species in order to get around training and having good programmers.” When the Department of Defense proposed ADA as a solution to yet another outbreak of the software crisi, it was trumpeted as a means of “replacing the idiosyncratic ‘artistic’ ethos that has longer governed software writing with a more efficient, cost-effective engineering mind-set.” What is that “more efficient” mind-set? Ensmenger suggests that it’s for programmers to become factory line workers, nearly-mindlessly plugging in “reusable and interchangeable parts.” The appeal of the software factory model might appear obvious to corporate managers; for skilled computer professionals, the idea of becoming a factory worker is understandably less desirable. Ensmenger traces the history of software engineering as a process of dumbing-down the task of programming, or rather, separating the highest-ability programmers who would analyze and design systems, from the low-ability programmers. Quotes from the book: In the 1980’s, even the superprogrammer was demoted. A revised chief programmer team (RCPT) in which “the project leader is viewed as a leader rather than a ‘super-programmer.’” The RCPT approach was clearly intended to address a concern faced by many traditionally trained department-level managers—namely, that top executives had “abdicated their responsbility and let the ‘computer boys’ take over.” The attempts to professionalize computer programming is a kind of response to early software engineering. The suggestion is that we programmers are as effective at handling projects as management. But in the end, he provides evidence from multiple perspectives that professionalization of computer programming has failed. They were unable, for example, to develop two of the most defining characteristics of a profession: control over entry into the profession, and the adoption of a shared body of abstract occupational knowledge—a “hard core of mutual understanding”—common across the entire occupational community. Ensmenger doesn’t actually talk about “education” as such very often, but it’s clearly the elephant in the room. That “control over entry into the profession” is about a CS degree not being a necessary condition for entering into a computing programming career. That “adoption of a shared body of abstract occupational knowledge” is about a widely-adopted, shared, and consistent definition of curriculum. There are many definitions of “CS1” (look at the effort Allison Elliott Tew had to go through to define CS1 knowledge), and so many definitions of “CS2” as to make the term meaningless. The eccentric, rude, asocial stereotype of the programmer dates back to those early days of computing. Ensmenger says hiring that followed that stereotype is the source of many of our problems in developing software. Instead of allowing that eccentricity, we should have hired programmers who created a profession that embraced the user’s problems. Computer programmers in particular sat in the uncomfortable “interface between the world of ill-stated problems and the computers.” Design in a heterogeneous environment is difficult; design is as much as social and political process as it is technical[^1]; cultivating skilled designers requires a comprehensive and balanced approach to education, training, and career development.” The “software crisis” that lead to the creation of software engineering was really about getting design wrong. He sees the industry as trying to solve the design problem by focusing on the production of the software, when the real “crisis” was a mismatch between the software being produced and the needs of the user. Rather than developing increasingly complicated processes for managing the production of software, we should have been focusing on better design processes that helped match the software to the user. Modern software engineering techniques are trying to make software better matched to the user (e.g., agile methods like Scrum where the customer and the programming team work together closely with a rapid iterative development-and-feedback loop) as well as disciplines like user-experience design. I found Ensmenger’s tale to be fascinating, but his perspective as a labor historian is limiting. He focuses only on the “computer programmer,” and not the “computer scientist.” (Though he does have a fascinating piece about how the field got the name “computer science.”) Most of his history of computing seems to be a struggle between labor and management (including an interesting reference to Karl Marx). With a different lens, he might have considered (for example) the development of the additional disciplines of information systems, information technology, user experience design, human-centered design and engineering, and even modern software engineering. Do these disciplines produce professionals that are better suited for managing the heterogeneous design that Ensmenger describes? How does the development of “I-Schools” (Schools of Information or Informatics) change the story? In a real sense, the modern computing industry is responding to exactly the issues Ensmenger is identifying, though perhaps without seeing the issues as sharply as he describes them. Even with the limitations, I recommend “The Computer Boys Take Over.” Ensmenger covers history of computing that I didn’t know about. He gave me some new perspectives on how to think about computing education today. [^1]: Yes, both semi-colons are in the original."
"384","2013-07-15","2023-03-24","https://computinged.wordpress.com/2013/07/15/the-culture-problem-in-computing-i-would-have-hired-nsa-whistleblower-edward-snowden/","I read this piece as an explanation for a computing culture that leads to “Donglegate” and a thousand paper cuts. Hostile, uncommunicative, arrogant, impolite, eccentric — none of those are impediments to getting hired. That’s what we have to change to broaden participation in computing. We have to change the culture. Snowden’s lack of formal education—no high school diploma—wouldn’t have bothered me. The ideal was a person who was sharp, independent, systematic, and very careful. The top tech programs—at places such as MIT, Caltech, Carnegie Mellon, Stanford, UC–Berkeley, and the Ivies— produced many strong candidates, but a computer science degree from most other universities was less of a positive indicator. People with nontraditional educations sometimes did just as well. They usually had some gaps in their knowledge of algorithms and data structures, but I cut them slack, because teaching yourself is harder than being taught, and often more valuable. If you could run the gauntlet of five or six whiteboard coding tests, you stood a good chance of being hired. Sometimes an applicant would be too hostile or uncommunicative, but for me at least, technical skill was the deciding factor the vast majority of the time. There are a nontrivial number of techies who are smart but literally impossible to work with because they are incapable of compromise or politeness. When eccentricity is the norm, it’s hard to have a litmus test for what acceptable eccentricity is. via I Would Have Hired NSA Whistleblower Edward Snowden – Slate Magazine."
"385","2013-04-03","2023-03-24","https://computinged.wordpress.com/2013/04/03/why-asking-what-adria-richards-could-have-done-differently-is-the-wrong-question-forbes/","If you haven’t read about “Donglegate,” you should. This piece reminded me of the thousand paper cuts post from last week. Adria Richards spoke out against one of those cuts. There’s a very nice piece on Wired that analyzes these as “microagressions” and why they are significant. “Sadly, what happened to Adria Richards tells women they’re only welcome in technology if they keep their mouths shut.” Some say she should have gone to the conference organizers first. As someone who has repeatedly gone to conference organizers (with offers of constructive help, no less!) on sexist behavior, panel lineups, and more, and been basically patted on the head over and over, I can tell you that’s also not the first avenue of action for many women experiencing sexist behavior. We’ve been Skinner-boxed and Pavloved into believing that “going to the authorities” isn’t going to change anything. That may or may not be true for PyCon–they (happily) have a code of conduct that includes harassment, so they may have been more open to a complaint. But again, we can’t ignore the cultural baggage that we all bring to this kind of table. via Why Asking What Adria Richards Could Have Done Differently Is The Wrong Question – Forbes."
"386","2013-03-29","2023-03-24","https://computinged.wordpress.com/2013/03/29/womens-experiences-in-the-tech-industry-death-by-1000-paper-cuts/","What a sad posting. It’s particularly sad because it’s 10 years after “Unlocking the Clubhouse.” Really? Haven’t we figured out how to do this any better yet? My college classes have next to no women in them. A professor makes creepy comments about “geeky girls” during class. One of my few female classmates tells me she’s just doing this to prove her father wrong. Classmates don’t take me seriously until I scream. The first time I learned that you get to be a bitch or you get to be ignored – a choice that would later follow me to the working world. Four years of paper cuts. Four years of pushing myself too hard because I wanted to prove something. via My experiences in tech: Death by 1000 paper cuts."
"387","2013-03-07","2023-03-24","https://computinged.wordpress.com/2013/03/07/women-in-computer-science-national-uw-gt/","In the context of David Notkin’s receipt of the 2013 Computing Research Association A. Nico Habermann Award for outstanding contributions to supporting underrepresented groups in the computing research community, Lecia Barker of the National Center for Women & Information Technology (we hosted their Washington State Awards for Aspirations in Computing last weekend) sent us the chart to the right, comparing UW CSE’s performance to the national average in granting bachelors degrees to women. via UW CSE News » Women in Computer Science: UW CSE is a pacesetter. It was really great to see these results in the U. Washington CSE News, but it got me to wondering: Did all the big R1 institutions rise like this, or was this unusual at UW? I decided to generate the GT data, too. I went to the GT Self-Service Institutional Research page and downloaded the degrees granted by college and gender in each of 2005, 2006, and on up to 2011. (All separate spreadsheets.) I added up Fall, Spring, and Summer graduates for each year, and computed the female percentage. Here’s all three data sets graphed. While GT hasn’t risen as dramatically as UW in the last two years (so UW really has done something remarkable!), but GT’s rise from 2005 far below the national average to above the national average in 2009 is quite interesting. Why is UW having such great results? Ed Lazowska claimed at SIGCSE 2013 that it’s because they have only a single course sequence (“one course does fit all,” he insisted) and because they have a large number of female TAs. I don’t believe that. I predict that more courses would attract more students (see the “alternative paths” recommendation from Margolis and Fisher), and that female TA’s support retention, not recruitment. I suspect that UW’s better results have more to do with the fact that GT’s students declare their major on their application form, while UW students have to apply to enter the CSE program. Thus, (a) UW has the chance to attract students on-campus and (b) they have more applications than slots, so they can tune their acceptances to get the demographics that they value. Percentage of females in BS CS graduates, by year, nationally, for U. Washington, and for Georgia Tech."
"388","2013-06-21","2023-03-24","https://computinged.wordpress.com/2013/06/21/data-from-edxs-first-course-offer-preliminary-insights-into-online-learning/","Really interesting — the data are starting to appear on what’s going on in MOOCs. I wouldn’t have predicted differences in media preferences in homework vs. exam. In their analysis of 6.002x resource usage, Pritchard and RELATE postdocs tallied clickstream data, such as where and when users clicked on videos, discussion threads, tutorials or textbook pages when working on homework, in comparison to when they were taking the midterm or final exam. Interestingly, the group found that in completing homework assignments, users spent more time on video lectures more than any other resource. However, during an exam, students referred most to the online textbook, which they virtually ignored when doing homework. The data, although preliminary, illustrate how students may use different online strategies to solve homework versus exam problems. While use of the discussion forum was not required in the course, the researchers found it to be the most popular resource for students completing homework assignments. In fact, 90 percent of the clickstream activity on the forum came from users who viewed existing threads without posting comments. via Data from edX’s first course offer preliminary insights into online learning – MIT News Office."
"389","2013-05-17","2023-03-24","https://computinged.wordpress.com/2013/05/17/earsketch-rocks-music-python-in-intro-for-14-year-olds/","I’ve seen EarSketch demoed a few times, and Barb is involved in planning their summer camp version. It’s very cool — goes deeper into Python programming and music than MediaComp. The students use EarSketch, the software created by Magerko and Jason Freeman, an associate professor in Tech’s School of Music. EarSketch utilizes the Python programming language and Reaper, a digital audio work station program similar to those used in recording studios throughout the music industry. “Young people don’t always realize that computer science and programming can be fun,” Freeman said. “This is allowing students to express their own creative musical ideas as they learn computer science principles.” via Gwinnett pilot hopes to draw students to computer programming… | www.myajc.com."
"390","2013-08-06","2023-03-24","https://computinged.wordpress.com/2013/08/06/more-evidence-for-aptitude-treatment-interactions-2/","The same kind of educational opportunity does not work for all students. In particular, constructionism may not provide enough structure for low achieving students. (See previous discussion about boredom vs. failure.) Moreover, the researchers found different approaches effective for different types of students: “Usually people say, ‘Yes, autonomy is beneficial. We want to provide students with choices in school,’ This is the case for high achievers, but not low achievers,” Wang said. “Low achievers want more structure, more guidelines.” via ‘Active’ Student Engagement Goes Beyond Class Behavior, Study Finds – Inside School Research – Education Week."
"391","2017-05-01","2023-03-24","https://computinged.wordpress.com/2017/05/01/moocs-serve-the-rich-us-citizens/","At this year’s NSF Broadening Participation in Computing PI meeting, I heard a great talk by Kevin Robinson that asked the question: Do MOOCs “raise all boats” but maintain or even increase income inequality, or do they help to reduce the economic divide? It’s not the question whether poor students take MOOCs. It’s whether it helps the poor more, or the rich more.  Kevin has made his slides available here. The work he described is presented in this article from Science. I want to share the one slide that really blew me away.  The gray line is the average income for US citizens at various ages. As you would expect, that number generally increases up until retirement. The black line is the average income for students in Harvard and MIT’s MOOC participants. The MOOC participants are not only richer, but as they get older, they diverge more. These are highly-privileged people, the kind with many advantages. MOOCs are mostly helping the rich."
"392","2017-04-28","2023-03-24","https://computinged.wordpress.com/2017/04/28/discussing-the-film-code-debugging-the-gender-gap/","Barbara Ericson and I were invited to be discussants at a showing of “Code: Debugging the Gender Gap.” I highly recommend the movie. It was fascinating to watch, made all the more fun by seeing heroes that I know appear, like Nathan Ensmenger, Avis Yates Rivers, Jane Margolis, Ari Schlesinger, Colleen Lewis, and Maria Klawe. Afterward, I got to make a few comments — expanding on some of the movie’s points, and disagreeing with others. The movie makes the argument that men and women aren’t wired differently. We are all capable of learning computer science. They didn’t have to make a biological argument. In the Middle East and many other parts of the world, computer science is female-dominated. Clearly, it’s not biology. (Perhaps surprisingly, I recently got asked that question at one of the top institutes of technology in the United States: “Don’t women avoid CS because their brains work differently?” REALLY?!?) The movie talks about how companies like IBM and RCA started advertising in the 1970’s and 1980’s for “men” with “the right stuff,” and that’s when the field started masculinizing. They don’t say anything about the role that educators played, the story that Nathan Ensmenger has talked about in his book “The Computer Boys Take Over.” When we realized that we couldn’t teach programming well, we instead started to filter out everyone who would not become a great programmer. For example, that’s when calculus was added into computer science degree requirements. Women were less interested in the increasingly competitive computer science programs, especially when there were obvious efforts to weed people out. That was another factor in the masculinization of the field. Many of those interviewed in the movie talk about the importance of providing “role models” to women in computing. The work of researchers like the late (and great) Joanne Cohoon show that role models aren’t as big a deal as we might think. Here’s a thought experiment to prove the point: There are biology departments where the faculty are even more male than most CS departments, yet those departments are still female-dominant. What we do know is that women and URM students need encouragement to succeed in CS, and that that encouragement can come from male or female teachers. Finally, several interviewed in the movie say that we have to get girls interested in CS early because high school or university is “way too late.” That’s simply not true. The chair of my School of Interactive Computing, Annie Antón, didn’t meet computing until she was an undergraduate, and now she’s full Professor in a top CS department. Yes, starting earlier would likely attract more women to computing, but it’s never “too late.” After the movie, an audience member asked me if I really believed that diversity was important to build better products, and how would we prove that. I told him that I didn’t think about it that way. I’m influenced by Joanna Goode and Jane Margolis. Computing jobs are high-paying and numerous. Women and under-represented minority students are not getting to those jobs because they’re not getting access to the opportunites, either because of a lack of access to computing education or because of bias and discrimination that keep them out. It’s not about making better products. This is a social justice issue. "
"393","2013-01-03","2023-03-24","https://computinged.wordpress.com/2013/01/03/how-many-programmers-are-there-from-the-computer-boys-take-over/","I just learned about book The Computer Boys Take Over (and immediately ordered a copy for my Kindle), and have been digging through the associated blog. (Thanks, Lauren Klein!) It’s a look at the politics of computing (including gender issues), from a historical perspective. I thought that this graph and blog post were particularly interesting. It’s markedly different from the Scaffidi, Shaw, and Myers prediction about 2012 that they made in 2005, but in part, that’s because Scaffidi et al. actually looked at what people did, where the BLS has been messing with the categories, as described below.  The chart above shows the Bureau of Labor statistics on programmer employment. I am not convinced that these numbers are at all accurate. Getting reliable data on programmer employment is surprisingly difficult. To begin with, programmer is a vague category, and it is by no means clear that everyone who worked on “programming” defined themselves primarily as a “programmer.” Secondly, the Bureau of Labor Statistics did not beginning tracking programmers until 1972, and in 1983 and again in 2000 they adjusted their categories and methodologies. For the first ten years, three broad categories (“computer specialists”, “computer programmer”, and “computer analysts”) encompassed everyone working in computing. via The Computer Boys Take Over."
"394","2016-08-24","2023-03-24","https://computinged.wordpress.com/2016/08/24/women-1-5-times-more-likely-to-leave-stem-pipeline-after-calculus-compared-to-men-lack-of-mathematical-confidence-a-potential-culprit/","When you read this paper, consider Nathan Ensmenger’s assertion that (a) mathematics has been show to predict success in CS classes but not in computing careers and (b) increasing mathematics requirements in undergraduate CS may have been a factor in the decline in female participation in computing. Our analyses show that, while controlling for academic preparedness, career intentions, and instruction, the odds of a woman being dissuaded from continuing in calculus is 1.5 times greater than that for a man. Furthermore, women report they do not understand the course material well enough to continue significantly more often than men. When comparing women and men with above-average mathematical abilities and preparedness, we find women start and end the term with significantly lower mathematical confidence than men. This suggests a lack of mathematical confidence, rather than a lack of mathematically ability, may be responsible for the high departure rate of women. While it would be ideal to increase interest and participation of women in STEM at all stages of their careers, our findings indicate that if women persisted in STEM at the same rate as men starting in Calculus I, the number of women entering the STEM workforce would increase by 75%. Source: PLOS ONE: Women 1.5 Times More Likely to Leave STEM Pipeline after Calculus Compared to Men: Lack of Mathematical Confidence a Potential Culprit"
"395","2013-07-04","2023-03-24","https://computinged.wordpress.com/2013/07/04/google-finally-admits-that-its-infamous-brainteasers-were-completely-useless-for-hiring/","Google has found that being great at puzzles doesn’t lead to being a good employee. They also found that GPA’s aren’t good predictors either. Nathan Ensmenger could have told them that. His history The Computer Boys Take Over shows how the relationship between academic mathematics and brainteasers with computer science hiring was mostly an accident. Human resources people were desperate to find more programmers. They used brainteasers and mathematics to filter candidates because that’s what the people who started in computing were good at. Several studies found that those brainteasers and math problems were good predictors of success in academic CS classes — but they didn’t predict success at being a programmer! How many people have been flunked out of computer science because they couldn’t pass Calculus — and yet knowing calculus doesn’t help with being a programmer at all?!? You can stop counting how many golfballs will fit in a schoolbus now. Google has admitted that the headscratching questions it once used to quiz job applicants (How many piano tuners are there in the entire world? Why are manhole covers round?) were utterly useless as a predictor of who will be a good employee.”We found that brainteasers are a complete waste of time,” Laszlo Bock, senior vice president of people operations at Google, told the New York Times. “They don’t predict anything. They serve primarily to make the interviewer feel smart.” via Google Finally Admits That Its Infamous Brainteasers Were Completely Useless for Hiring – Adam Pasick – The Atlantic."
"396","2016-01-31","2023-03-24","https://computinged.wordpress.com/2016/01/31/broadening-access-to-computing-education-state-by-state-ecep-in-cacm/","An article written by Rick Adrion, Barbara Ericson, Renee Fall, and me appears in this month’s Communications of the ACM about our work in the Expanding Computing Education Pathways (ECEP) Alliance. Our annual meeting is today, with 11 states and Puerto Rico, where we talk about how to create sustained change in a state. We are learning a lot about what it takes to make change in our very diverse United States. The lessons learned from Massachusetts and Georgia are useful for states joining ECEP, but so are the lessons from the other states. We have been surprised at how much our state leaders draw ideas from each other. South Carolina leaders used a teacher survey that was invented in Massachusetts. Utah draws inspiration from a Texas teacher recruitment strategy. What our state leaders find most useful about ECEP is access to other state leaders who share similar goals, for example, to broaden participation in computing by changing education pathways in their states. Source: Broadening Access to Computing Education State by State | February 2016 | Communications of the ACM"
"397","2017-05-03","2023-03-24","https://computinged.wordpress.com/2017/05/03/education-week-covers-cs-ed-research-presented-at-aera/","That is not a title I ever thought I’d write for a blog post. How terrific that CS Ed is big at the American Education Research Association (AERA) Annual Meeting, and is getting coverage in EdWeek! (Thanks to Alfred Thompson for sharing this.) As the movement has taken off, however, a number of basic questions have yet to be answered, and even more new questions have started to emerge. How do schools make computer science education more accessible for students from groups that have historically been shut out of the field? What types of lessons and programming environments are best for novice learners? How do we know if students are learning what we want them to learn? And, perhaps most significantly, why are America’s schools seeking to make computer science education universal in the first place? All are topics that researchers across the country are actively investigating. Source: Emerging Research on K-12 Computer Science Education: 6 Trends to Watch – Digital Education – Education Week"
"398","2017-10-27","2023-03-24","https://computinged.wordpress.com/2017/10/27/is-scaled-online-learning-an-engine-for-diversity-not-according-to-the-data/","There are lots of women and minority students in online CS. Numbers are high. Proportions are low. Reach (what percentage of women and minority get access to online CS) is low. Diversity in terms of economic success is low (as discussed in this blog post and in this one too), so scaled online learning is unlikely to be an engine to bridge economic divides. There are a large number of (rich) female and minority students in the OMS CS populations (higher numbers but lower proportion than in our face-to-face MS CS program), but if they remain a small proportion of the whole and the reach is low, then not much is changing. The graduate pool and the Tech industry over all does not become more diverse. If Georgia Tech is indeed able leverage scaled online learning to graduate underrepresented minorities at much higher rates than comparable residential programs, then it seems that all of us in higher ed should be taking notice. I remain skeptical that an online degree program that is not built around intensive interaction, mentoring, and coaching between faculty and students can be successful. Going to scale in order to drive down the costs seems to require a transactional, rather than relational, approach to teaching and learning. Source: Is (Scaled) Online Learning an Engine for Diversity? | Technology and Learning"
"399","2017-05-05","2023-03-24","https://computinged.wordpress.com/2017/05/05/profile-of-ruthe-farmer-this-is-how-you-advocate-for-girls-in-stem/","Nice piece on fierce CS education advocate, Ruthe Farmer. Big change is at the forefront of her thinking. When asked what cause she most wants to advance, she has a prompt and specific reply: “I am interested in advancing women at all levels. For women’s rights to education, autonomy, personal safety to be a topic of debate [still] is atrocious. Now is the time for women to lead. I’m particularly concerned about the safety of women on campus. Sexual assault should not be an expected part of the college experience. I refuse to accept that as a norm.” Source: This Is How You Advocate For Girls In STEM"
"400","2017-05-10","2023-03-24","https://computinged.wordpress.com/2017/05/10/hidden-figures-of-computer-science-for-all/","Nice piece by Ruthe on some of the heroes of the effort to make CS education available to everyone. You might have noticed computer science and “coding” have become the cause du jour. Celebrities and athletes, governors and mayors, tech icons, and media giants have come out in support of reinvigorating K-12 computer science education in US schools. Coding is now a commonly known term and in January 2016, building on the momentum from the community, President Obama announced the Computer Science for All (CSforAll) initiative, a bold national call to make rigorous computer science (CS) education available to all American students and partner initiatives have formed nationwide including CS4TX, CS4RI, CodeVA and many more. CSforAll is here to stay. Like every social movement in history, this change didn’t materialize overnight – and like the great social movements that have shaped our country – women have been integral to this movement. I am honored to present just a few of the “Hidden Figures” of K-12 computer science education. Source: Hidden Figures of “Computer Science for All”"
"401","2017-05-12","2023-03-24","https://computinged.wordpress.com/2017/05/12/increasing-the-roles-and-significance-of-teachers-in-policymaking-for-k-12-engineering-education/","National Academies have released a report that relates to the idea of Engineering for All. Engineering is a small but growing part of K–12 education. Curricula that use the principles and practices of engineering are providing opportunities for elementary, middle, and high school students to design solutions to problems of immediate practical and societal importance. Professional development programs are showing teachers how to use engineering to engage students, to improve their learning of science, technology, engineering, and mathematics (STEM), and to spark their interest in engineering careers. However, many of the policies and practices that shape K–12 engineering education have not been fully or, in some cases, even marginally informed by the knowledge of teacher leaders. To address the lack of teacher leadership in engineering education policymaking and how it might be mitigated as engineering education becomes more widespread in K–12 education in the United States, the National Academies of Sciences, Engineering, and Medicine held a convocation on September 30–October 1, 2016. Participants explored how strategic connections both within and outside classrooms and schools might catalyze new avenues of teacher preparation and professional development, integrated curriculum development, and more comprehensive assessment of knowledge, skills, and attitudes about engineering in the K–12 curriculum. This publication summarizes the presentations and discussions from the event. Source: Increasing the Roles and Significance of Teachers in Policymaking for K-12 Engineering Education: Proceedings of a Convocation | The National Academies Press"
"402","2017-05-15","2023-03-24","https://computinged.wordpress.com/2017/05/15/learning-myths-and-realities-from-brain-science/","Interesting results, but also, concerning. People really believe that intelligence is “fixed at birth” and that teachers don’t need to know content? The article has more of these: On the topic of “growth mindset,” more than one-quarter of respondents believed intelligence is “fixed at birth”. Neuroscience says otherwise. Nearly 60 percent argued that quizzes are not an effective way to gain new skills and knowledge. In fact, quizzing yourself on something you’ve just read is a great example of active learning, the best way to learn. More than 40 percent of respondents believed that teachers don’t need to know a subject area such as math or science, as long as they have good instructional skills. In fact, research shows that deep subject matter expertise is a key element in helping teachers excel. Source: Learning Myths And Realities From Brain Science : NPR Ed : NPR"
"403","2017-05-19","2023-03-24","https://computinged.wordpress.com/2017/05/19/we-can-teach-women-to-code-but-that-just-creates-another-problem-the-problem-of-computational-media/","I suspect that the problem described in this Guardian article is exactly what’s happening with our Computational Media degree program. The BS in CM at Georgia Tech is now 47% female, while the BS in CS is only 20% female. CM may be perceived as front-end and CS as back-end. But here’s the problem: the technology industry enforces a distinct gender hierarchy between front-end and back-end development. Women are typecast as front-end developers, while men work on the back end – where they generally earn significantly more money than their front-end counterparts. That’s not to say that women only work on the front end, or that men only work on the back end – far from it. But developers tell me that the stereotype is real. The distinction between back and front wasn’t always so rigid. “In the earliest days, maybe for the first 10 years of the web, every developer had to be full-stack,” says Coraline Ada Ehmke, a Chicago-based developer who has worked on various parts of the technology stack since 1993. “There wasn’t specialization.” Over time, however, web work professionalized. By the late 2000s, Ehmke says, the profession began to stratify, with developers who had computer science degrees (usually men) occupying the back-end roles, and self-taught coders and designers slotting into the front. Source: We can teach women to code, but that just creates another problem | Technology | The Guardian"
"404","2014-10-24","2023-03-24","https://computinged.wordpress.com/2014/10/24/computational-media-women-are-retained-to-graduation/","After my post claiming that Georgia Tech’s Computational Media program is the most gender-balanced, ABET-accredited computing undergraduate degree program in the United States, I had several people ask, “But that’s enrollment. Do the women graduate? Do they stick with the program?” My sense was that they did, but I asked our College data person, Elijah Cameron, and he sent me the below. Last year, BS in Computational Media graduates were over 40% female. Pretty good. "
"405","2017-05-22","2023-03-24","https://computinged.wordpress.com/2017/05/22/survey-to-inform-the-next-round-of-computing-curricula/","null"
"406","2014-04-24","2023-03-24","https://computinged.wordpress.com/2014/04/24/mehran-sahami-wins-acm-presidential-award-for-the-cs2013-curriculum-revision/","This is really well-deserved. Mehran worked amazingly hard to pull a wide range of stakeholders together for the CS2013 curriculum. The ACM Presidential Award is discretionary — they only give it out if someone really deserves it. Glad to see Mehran getting this recognition!  Mehran Sahami of Stanford University, recipient of the ACM Presidential Award for leading the revision of an innovative computer science curriculum that reflects the application of computing tools in a wide variety of disciplines. Sahami led the effort by ACM and the IEEE Computer Society to develop guidelines for undergraduate degree programs that redefine essential computing topics and set the standards for computer science education worldwide for the next decade. The report includes examples of flexible courses and curricula models for a broad range of higher education institutions worldwide.  via ACM Presidential Award – ACM Award."
"407","2014-04-21","2023-03-24","https://computinged.wordpress.com/2014/04/21/susan-rodger-sigcse-chair-wins-acm-karl-v-karlstrom-outstanding-educator-award/","Congratulations, Susan! Susan H. Rodger, recipient of the Karl V. Karlstrom Outstanding Educator Award for contributions to the teaching of computer science theory in higher education, and the development of computer science education in primary and secondary schools. She and her students developed JFLAP (Java Formal Languages and Automata Package), an interactive software tool that allows students to construct and test examples of automata and grammars. These concepts are foundational to the design of software components, such as compiler parts. Intended primarily for undergraduate students or as an advanced topic for high school, JFLAP is used worldwide in computer science theory, compiler, and discrete mathematics courses. Through workshops for faculty development, Rodger’s work contributed to the creation of a professional community around the use of visualizations to teach algorithms. She also leads efforts to introduce the programming language Alice in primary and secondary schools. Rodger is a professor of the practice of computer science at Duke University. Currently chair of the ACM Special Interest Group on Computer Science Education (SIGCSE), she is a board member of CRA-W and a member of the ACM Education Policy Committee. The Karlstrom Award recognizes educators who advanced new teaching methodologies; effected new curriculum development in Computer Science and Engineering; or contributed to ACM’s educational mission. via ACM Honors Computing Innovators Who Are Changing the World — Association for Computing Machinery."
"408","2017-05-24","2023-03-24","https://computinged.wordpress.com/2017/05/24/how-do-we-create-cyberattack-defenders/","Roger Schank (famous AI and cognitive science researcher, the guy who coined the term “learning sciences”) is putting his expertise to the task of creating cyberattack defenders. The description of his process (linked below) is interesting. It has all the hallmarks of his work — innovative, informed by research, driven by concrete tasks. Notice the strong claim that I quoted below. We shouldn’t be aiming for general cyber attack defense skills. These skills are going to be industry-by-industry specific. He’s directly informed by the research that suggests that these skills are unlikely to generalize. One of the big questions is: where are we going to get the students? How do we recruit students into this kind of program? How can we help? The cyber attack course Socratic Arts is building for the DOD will be modified to make the projects specific to particular industries. The banks’ problems are obvious: hackers might want to steal money. Pharma’s problems are obvious: hackers might want to steal secrets. We intend to put out versions of our cyber attack course for each industry. These courses will take 6 months for a student to complete. We are not interested in giving an overview in the typical one week course that is no more than an intro. We want to train real cyber attackers who can help. The only way to learn is by practice (with advice). That’s how you learn to ride a bike and that’s how you learn to do anything. Source: Cyber Attack Academy"
"409","2017-05-26","2023-03-24","https://computinged.wordpress.com/2017/05/26/jean-sammet-passes-away-at-age-89/","Jean Sammet passed away on May 21, 2017 at the age of 88. (Thanks to John Impagliazzo for passing on word on the SIGCSE-members list.) Valerie Barr, who has been mentioned several times in this blog, was just named the first Jean E. Sammet chair of computer science at Mount Holyoke. I never met Jean, but knew her from her work on the history of programming languages which are among the most fun CS books I own. Sammet GILLIAN: I remember my high school math teacher saying that an actuary was a stable, high-paying job. Did you view it that way? JEAN: No. I was looking in The New York Times for jobs for women—when I tell younger people that the want ads were once separated by gender, they’re shocked—and actuary was one of the few listed that wasn’t housekeeping or nursing, so I went.Sammet found her way to Sperry. “Everything from there, for quite a while, was self-learned,” she says. “There were no books, courses, or conferences that I was aware of.” For her next move she applied to be an engineer at Sylvania Electric Products—though the job was again listed for men. Source: Gillian Jacobs Interviews Computer Programmer Jean E. Sammet | Glamour"
"410","2014-12-12","2023-03-24","https://computinged.wordpress.com/2014/12/12/the-by-gender-vs-by-discipline-view-of-women-in-stem-from-valerie-barr/","Valerie Barr has written a Blog@CACM post (linked below) where she considers a by-gender view of women earning STEM or CS, vs the more traditional by-discipline view. She’s computing the number of degrees who go to women in CS over all the degrees that women earn. It’s an interesting argument and well-worth exploring. My concern about this perspective is that it’s politically more complicated when arguing for resources to promote women in computing. You only grow the by-gender number by convincing women not to go into a different field — it’s a share of all women on-campus/graduating. That puts you in a tug of war with others on campus. In a by-discipline perspective, you can improve your share by drawing more women in (or by the number of men decreasing, as seems to have happened in our CM degree, see here).  While the by-discipline view of STEM degrees is far from rosy, this by-gender view of the data facilitates a more accurate assessment of the situation for women in STEM, and we can build on this to understand the ways in which the by-discipline view can mislead. If there were parity between men and women in STEM disciplines then they would graduate with degrees in those fields at the same rate relative to the size of their respective pools. We see this only in Biology where the graduation rate is almost equal (7% of women’s 2012 degrees were earned in Biology versus 6.77% of men’s 2012 degrees). In all other STEM fields men earned degrees at a higher rate and women are far from parity. via Women in STEM, Women in Computer Science: We’re Looking At It Incorrectly | blog@CACM | Communications of the ACM."
"411","2017-05-29","2023-03-24","https://computinged.wordpress.com/2017/05/29/how-to-be-a-great-cs-teacher-from-andy-ko/","Amy Ko from U-W is giving a talk to new faculty about how to be a great CS teacher. I only quote three of her points below — I encourage you to read the whole list. Amy’s talk could usefully add some of the points from Cynthia Lee’s list on how to create a more inclusive environment in CS. CS is far less diverse than any other STEM discipline. Being a great CS teacher means that you’re aware of that and take steps to improve diversity in CS. My argument is as follows: Source: How to be a great (CS) teacher – Bits and Behavior – Medium"
"412","2015-09-28","2023-03-24","https://computinged.wordpress.com/2015/09/28/what-can-i-do-today-to-create-a-more-inclusive-community-in-cs-guest-post-from-cynthia-lee/","In July, Cynthia Lee, Leo Porter, Beth Simon, and I held a workshop (funded by the NSF IUSE program) for new faculty at research-intensive universities, to help them to be more effective and efficient teachers. We had eight new faculty attend. We taught them about peer instruction, worked examples, how to create a syllabus, techniques for dealing with plagiarism, how to make time for teaching, and how to create a more inclusive classroom. The response was terrific. As one participant told us, “I can’t believe how much actionable knowledge I picked up about teaching in just a day and a half!” We’ll be inviting new faculty from research-intensive universities again in Summer 2016. The below list was created by Cynthia Lee for the workshop participants. I loved it and asked if I could offer it here as a guest post. I’m grateful that she agreed.  Footnotes:"
"413","2017-04-26","2023-03-24","https://computinged.wordpress.com/2017/04/26/call-for-papers-for-koli-calling-papers-due-4-august/","Program Chairs, Koli Calling 2017"
"414","2017-06-30","2023-03-24","https://computinged.wordpress.com/2017/06/30/teaching-the-students-isnt-the-same-as-changing-the-culture-dear-microsoft-absolutely-not-by-monica-byrne/","A powerful blog post from Monica Byrne with an important point. I blogged a while back that teaching women computer science doesn’t change how the industry might treat them. Monica is saying something similar, but with a sharper point. I know I’ve heard from CS teachers who are worried about attracting more women into computing. Are we putting them into a unpleasant situation by encouraging them to go into the computing industry? Then—gotcha!—they’re shown a statistic that only 6.7% of women graduate with STEM degrees. They look crushed. The tagline? “Change the world. Stay in STEM.” Are you f***ing kidding me? Microsoft, where’s your ad campaign telling adult male scientists not to rape their colleagues in the field? Where’s the campaign telling them not to steal or take credit for women’s work? Or not to serially sexually harass their students? Not to discriminate against them? Not to ignore, dismiss, or fail to promote them at the same rate as men? Not to publish their work at a statistically significant lower rate? Source: Dear Microsoft: absolutely not. | monica byrne"
"415","2017-06-26","2023-03-24","https://computinged.wordpress.com/2017/06/26/from-design-of-everyday-things-to-teaching-of-everyday-people-human-error-student-error-no-bad-design/","This summer, I’m teaching a Human-Computer Interaction course in Barcelona. I’ve never taught HCI before, and I’m enjoying it. Like many HCI courses, we started by reading Don Norman’s Design of Everyday Things. He begins Chapter 5, “Human Error? No, Bad Design” with these paragraphs: Most industrial accidents are caused by human error: estimates range between 75 and 95 percent. How is that so many people are so incompetent? Answer: They aren’t. It’s a design problem If the number of accidents blamed upon human error were 1 to 5 percent, I might believe that people were at fault. But when the percentage is so high, then clearly other factors must be involved. When something happens this frequently, there must be another underlying factor. That quote really struck me. We have lots of education systems with more “error” than 1 to 5 percent. Educators call “error” the failure rate, which is the rate of students who do not succeed in the course (i.e., not completing the course with a passing grade). Why don’t we critique education systems in the same way as Norman critiques user interfaces? The issue is particularly relevant for the CS for All movement. “All” is 100%. Is our goal for 100% of students get access to computing education, or that 100% of the students succeed in learning computing education? The former is a cop-out — we want under-privileged kids to access computing education (which likely was developed for privileged kids, because culturally-relevant CS education is important but challenging to build), but we don’t care if they succeed? When it comes to textual literacy or mathematical literacy, the goal is all citizens, 100%. How do we design computing courses in which 100% of the students succeed? I posed the question to my class, with another Norman quote:  There was a lot of hmmm-ing in the class when I put up that slide. I had them discuss in groups for just a couple minutes (our room is set up with chairs in groups of three, which works out pretty well for short, small-group discussions), and then share their thoughts. Several students were surprised that MOOCs typically have around a 90% withdrawal rate. One student asked about MOOCs where students pay for them. Our OMS CS courses cost students a few hundred dollars each, and typically have WDF (withdrawing or earning a D or F, non-passing grade) rates between 25-33%, compared to 3-7% for the same in-person MS CS courses. Is that an acceptable failure rate? There was a lot more concern about the first question. One student asked, “But what if a student regularly fails CS classes?” I asked if the system is regularly failing that student. Someone asked, “But what about the 60% of the students who succeed in the course?” I pointed out that many people successfully use a UNIX command line, but it’s a pretty classic case of a poor user interface. Some users might be able to use a poorly designed system, but everyone is better off with a better designed system. I didn’t let the discussion go on for too long, because this is an HCI course and not an educational design class. (Barbara is teaching the educational technology design course here.) I saw this as an opportunity to apply DOET thinking to systems they were familiar with. I am interested in hearing what the readers of this blog post think. What amount of error/failure should we tolerate in an educational system before we call the system badly designed? I understand that Norman is aiming to design computing systems that users can successfully use to achieve their goals, while educational systems have an explicit purpose to change the students and their goals. However, Norman’s users and our students are all irrational, flawed humans, and we still want them to succeed. I’ll end with another quote from DOET, with a small annotation from me. “The problem with the designs of most engineers (and maybe teachers?) is that they are too logical. We have to accept human behavior the way it is, not the way we would wish it to be.”"
"416","2020-01-18","2023-03-24","https://computinged.wordpress.com/2020/01/18/abstract-submissions-opens-for-fie-2020/","Frontiers in Education 2020 conference will be in Uppsala, Sweden this year. Abstracts due Feb 2. Post below from Arnold Pears. Featuring an all new submission site and new paper review system launched for FIE 2020. Don’t delay! Secure your place at the 50th Anniversary FIE event by registering your Abstract today! The 2020 programme features co-located workshops on Computational Thinking Skills for the 21st Century, the Launch Event for the IEEE/ACM Joint Curriculum project Computing Curricula 2020, a once in a lifetime conference banquet experience in the Uppsala Castle, and much much more. Submit your Abstract NOW!"
"417","2015-10-28","2023-03-24","https://computinged.wordpress.com/2015/10/28/professor-wants-to-double-the-number-of-computer-science-teachers-in-wisconsin-color-me-jealous/","The headline that a professor wants to double the number of CS teachers is cool, but as I dug into the piece, I grew jealous. Wisconsin has CS teacher certification! (Even if “confused, disparate, and sometimes absurd.”) They have pre-service teacher programs! They need more CS Teaching Methods classes — I’ve taught CS teaching methods! Are they hiring? (Oh, wait — I’ve heard about what’s happening to Wisconsin state universities.) Except for that university part, Wisconsin sounds like it has it good! The second piece of the plan consists of easing the process for computer science teachers to receive their license. Getting certified is difficult, according to Brylow. According to one report from the Computer Science Teachers Association, the process is described as “confused, disparate, and sometimes absurd.”UW-La Crosse and UW-Whitewater are the only universities left in the state that offer programs to get certified, after many universities began dropping the program in the 1990s. “Whitewater has graduated three computer science teachers in the past five years and La Crosse has graduated zero in the past five years,” Brylow said. “So we identified that one of the problems is nobody knows how to teach this one critical course called the Computer Science Teaching Methods course. Source: Professor wants to double the number of computer science teachers in Wisconsin | Local Education | host.madison.com"
"418","2018-10-12","2023-03-24","https://computinged.wordpress.com/2018/10/12/a-high-level-report-on-the-state-of-computing-education-policy-in-us-states-access-vs-participation/","Interesting analysis from Code.org on the development of policies in US states that promote computing education — see report here, and linked below. The map above is fascinating in that it shows how much computing education has become an issue in all but five states. The graph below is the one I found confusing.  I’ve been corrected: the first bar says that where the school’s population is 0-25% from under-represented minority groups, 41% of those schools teach CS. Only 27% of mostly-minority schools (75%-100% URM, in the rightmost column) offer CS. This is a measure of which schools offer computer science. The graph above doesn’t mean that there are any under-represented minority students in any CS classes in any of those high schools. My children’s public high school in Georgia was over 50% URM, but the AP CS class was 90% white and Asian kids. From the data we’ve seen in Georgia (for example, see this blog post), few high schools offer more than one CS class. Even in a 75% URM high school, it’s pretty easy to find 30 white and Asian guys. Of course, we know that there are increasing numbers of women and under-represented minority students in computer science classes, but that’s a completely different statistic from what schools offer CS. I suspect that the actual participation of URM students in CS is markedly lower than the proportion in the school. In other words, in a high school with 25% URM, I’ll bet that the students in the CS classes are less than 25% URM. Even in a 75% URM high school, I’ll bet that CS participation is less than 75% URM. Access ≠ participation. Source: The United States for Computer Science – Code.org – Medium"
"419","2019-12-02","2023-03-24","https://computinged.wordpress.com/2019/12/02/when-computer-science-has-to-be-a-requirement-to-be-effective-if-we-want-it-to-be-available-to-everyone/","Robert Sedgewick had an essay published at Inside Higher Ed last month on Should Computer Science Be Required? (see link here). He has some excellent reasons for why students should study computer science. Several of them overlap with reasons I’ve suggested (see blog post here). He writes: Programming is an intellectually satisfying experience, and certainly useful, but computer science is about much more than just programming. The understanding of what we can and cannot do with computation is arguably the most important intellectual achievement of the past century, and it has led directly to the development of the computational infrastructure that surrounds us. The theory and the practice are interrelated in fascinating ways. Whether one thinks that the purpose of a college education is to prepare students for the workplace or to develop foundational knowledge with lifetime benefits (or both), computer science, in the 21st century, is fundamental. So, we both agree that we want all students in higher education to take a course in computer science — but he doesn’t want that course to be a requirement. He explains: When starting out at Princeton, I thought about lobbying for a computer science requirement and asked one of my senior colleagues in the physics department how we might encourage students to take a course. His response was this: “If you do a good course, they will come.” This wisdom applies in spades today. A well-designed computer science course can attract the vast majority of students at any college or university nowadays — in fact, there’s no need for a requirement. Colleges and universities offer the opportunity for any student to take as many courses as they desire in math, history, English, psychology and almost any other discipline, taught by faculty members in that discipline. Students should have the same opportunity with computer science. I have heard this argument before. Colleagues at Stanford have pointed out that most of Stanford undergraduates take their courses, without a requirement. Many colleagues have told me that a requirement would stifle motivation and would make students feel that we were forcing computer science down their throats. They would rather “attract” students (Sedgewick’s word above). I recognize that most students at the University of Michigan where I now work have the kind of freedom and opportunity that Sedgewick describes. But I know many institutions and situations where Sedgewick’s description is simply not true. CS teachers can try attracting students, but they are only going to get them if it’s a required course. I understand Sedgewick’s argument for why he wants to offer the most compelling computer science course he can at Princeton, in order to attract students and motivate them to learn about computing. (I don’t agree with him that curated online videos are better than live lectures, but I think we mean something different by “lectures.”) I also understand why making that course a requirement might undermine his efforts to motivate and engage students. But that’s only a small percentage of students at the Princeton-like institutions in the US, and elsewhere. I’m sure he would agree that everyone deserves the opportunity to learn about computer science. His reasons why CS is important for Princeton students are valid for everyone. We are going to need different strategies to reach everyone. For some students, a requirement is the only way that we are going to make it available to them."
"420","2016-01-06","2023-03-24","https://computinged.wordpress.com/2016/01/06/interaction-beats-out-video-lectures-and-even-reading-for-learning/","I’m looking forward to these results! That interaction is better than video lectures is really not surprising. That it leads to better learning than even reading is quite a surprise. My guess is that this is mediated by student ability as a reader, but as a description of where students are today (like the prior posts on active learning), it’s a useful result. Koedinger and his team further tested whether their theory that “learning by doing” is better than lectures and reading in other subjects. Unfortunately, the data on video watching were incomplete. But they were able to determine across four different courses in computer science, biology, statistics and psychology that active exercises were six times more effective than reading. In one class, the active exercises were 16 times more effective than reading. (Koedinger is currently drafting a paper on these results to present at a conference in 2016.) Source: Did you love watching lectures from your professors? – The Hechinger Report"
"421","2017-11-13","2023-03-24","https://computinged.wordpress.com/2017/11/13/royal-society-report-on-cs-in-english-schools-the-challenge-of-reaching-everyone/","The new report from the UK’s Royal Society is fascinating and depressing. More than half of school don’t offer CS. Because the largest schools do offer CS, 70% of English students are at a school that offer CS — but they’re still not getting into CS classes. Only 1 in 5 CS students are female. The Royal Society recommends a tenfold increase in funding. We have heard about some of these demographics before (see the Roehampton report and BBC coverage). Here in the US, we’re also talking about dramatically increasing funding (see blog post here about the $1.3B funding from White House and Tech industry). Are the US and England on the same paths in CS? Is there any reason to expect things to be different, or better, in the US? A report by the UK’s national academy of sciences finds that more than half of English schools do not offer GCSE Computer Science, leaving too many young people without the chance to learn critically important programming and algorithm skills at a crucial stage of their education. Unless the government urgently invests £60m in computing education over the next five years – a tenfold increase from current levels that puts it on par with support for maths and physics – an entire generation may never unlock the full potential of new technologies such as robotics, artificial intelligence and machine learning. Key findings from the report include: 54% of English schools do not offer Computer Science GCSE 30% of English GCSE pupils attend a school that does not offer Computer Science GCSE – the equivalent of 175,000 pupils each year Bournemouth leads England with the highest uptake of Computer Science GCSE (23% of all pupils), with Kensington & Chelsea (5%), Blackburn (5%) and City of London coming last (4%) England meets only 68% of its recruitment target for entries into computing teacher training courses, lower than Physics and Classics Only 1 in 5 Computer Science GCSE pupils are female Source: Invest tenfold in computing in schools to prepare students for digital world, says Royal Society"
"422","2017-09-15","2023-03-24","https://computinged.wordpress.com/2017/09/15/british-girls-logging-off-from-cs-whats-the-real-problem/","The BBC reports (in the article linked below) that the “revolution in computing education has stalled.” The data from England (including the Roehampton Report, discussed in this blog post) do back up that claim — see the quotes at the bottom. In this post, I’m reflecting on the response from the British Computer Society. “We need to do more with the curriculum to show it’s not just a nerdy boys’ subject. We’ve got to show them it’s about real problems like climate change and improving healthcare.” There are some interesting assumptions and warrants in these statements. Do girls avoid CS because they think it’s a boys’ subject, or because it’s not about real problems? How does the curriculum “show” that it is (or isn’t) a “nerdy boys’ subject”? If the curriculum emphasized “real problems,” would it no longer be a “nerdy boys’ subject”? Are these at all connected? Would making CS be like “climate change and improving healthcare” attract more female students? First, I’d like to know if the girls choosing ICT over CS are actually saying that it’s because CS is “a nerdy boys’ subject,” and if the girls know anything about the curriculum in CS. In our research, we found that high school students know very little about what actually happens in undergraduate CS, and undergraduate students in CS don’t even know what’s in their next semester’s classes. Changing the curriculum doesn’t do much good if the girls’ decisions are being made without knowing about the curriculum. The former claim, that CS is perceived by girls as a “nerdy boys’ subject,” is well-supported in the literature. But is that the main reason why the girls aren’t enrolling? Do we know that this a curriculum issue at all? The evidence suggests that there are other likely reasons. I have heard from some colleagues in England that the real problem is a lack of teachers. I can believe that having too few teachers does contribute to the problem, but that raises the same questions at another level. Why don’t teachers teach computer science? Is it because they don’t want to be in the position of being “vocational education,” simply preparing software developers? Or are teachers deciding that they are dis-interested in software development, for themselves or for their students? Or are the teachers looking at other areas of critical need for teachers and decide that CS is less attractive? Bottom line is that we know too little, in the UK or in the US (see Generation CS), about what is influencing student and teacher decisions to pursue or to avoid classes in computing. The reality doesn’t matter here — people make decisions based on their perceptions. In England, entries for the new computer science GCSE, which is supposed to replace ICT, rose modestly from 60,521 in 2016 to 64,159 this year. Girls accounted for just 20% of entries, and the proportion was a tiny bit lower than last year. ICT entries fell from 84,120 to 73,099, which you would expect as the subject is disappearing from the national curriculum. But it had proved more attractive to girls. Even there, the proportion of female entries fell from 41% to 39%. Combine the two subjects, and you find that the number studying either subject has fallen by over 7,000 in the past year. Back in 2015 more than 47,000 girls were getting some kind of computing qualification, and that has fallen to about 41,000 – just 30% of the total. Source: Computer science: Girls logging off – BBC News"
"423","2017-02-20","2023-03-24","https://computinged.wordpress.com/2017/02/20/why-students-consider-leaving-computing-and-what-encourages-them-to-stay-cra/","One of my favorite papers is the analysis of Stayers vs Leavers in undergraduate CS by Maureen Biggers and colleagues. This new research published by the CRA explores similar issues.  We also looked at words associated (correlated) with these two sets of words to give us context for frequently cited words. When talking about thoughts about leaving, students were particularly likely to associate “weed-out” with “classes”. They were also likely to use words such as “pretty” and “extremely” alongside “hard” and “difficult”, which sheds light on computing students’ experiences in the major. When talking about staying in their major, students cited words such as “prospect”, “security”, “stable”, and “necessary” along with the top two most commonly used words: “job” and “degree”. For instance, one student said: “[I thought about changing to a non-computing major because of] the difficulty of computing. [But I stayed for] the security of the job market.” Yet another student noted: “The competitive culture [in my computing major] is overwhelming. [But] the salary [that] hopefully awaits me [helped me stay].” Furthermore, students used the words “friends”, “family”, and “support” in association with each other, suggesting that friends and family support played a role in students’ decision/ability to stay in their computing major. As a case in point, one student noted: “The material is hard to learn! I had to drop one of my core classes and must take it again. But with some support from friends, academic advisors, more interesting classes, and a more focused field in the major I have decided to continue.” Source: Why Students Consider Leaving Computing and What Encourages Them to Stay – CRA"
"424","2016-12-21","2023-03-24","https://computinged.wordpress.com/2016/12/21/raising-the-floor-sharing-what-works-in-workplace-diversity-equity-and-inclusion/","A really interesting set of proposals. I saw many that are applicable to improving diversity in higher-education CS, as well as the stated goal of improving workplace diversity. Workplace diversity is probably the biggest factor inhibiting women in computing. We used to say that females avoided CS, not knowing what it is. I think we can now fairly say that many females avoid CS because they know what it is. This is a great ending blog post of 2016. See you in January! Happy Holidays and a Great New Year! Over the past few months, we and our colleagues at OSTP have had conversations with dozens of Federal agencies, companies, investors, and individuals about their science and technology workforces, and we have consistently heard people express a commitment to bringing more diversity, equity, and inclusion to their workplaces. They understand the strategic importance. Yet often we found that many of the same people who want to create high-performing, innovative teams and workforces do not know the steps and solutions that others are already effectively using to achieve their diversity, equity, and inclusion goals. In order to help accelerate this work, we have compiled insights and tips into an Action Grid designed to be a resource for those striving to create more diverse, equitable, and inclusive science and technology teams and workforces, so that we can all learn from each other. Diversity, equity, and inclusion work is not one size fits all. We hope this set of potential actions clustered by leadership engagement, retention and advancement, hiring, and ecosystem support provides ideas and a jumping off point for conversations within your team or organization on steps that you can take to increase diversity and to make your workforce more reflective of the communities you serve, customers you sell to, and talent pools you draw from. Source: Raising the Floor: Sharing What Works in Workplace Diversity, Equity, and Inclusion | whitehouse.gov"
"425","2015-08-03","2023-03-24","https://computinged.wordpress.com/2015/08/03/why-we-are-teaching-science-wrong-and-how-to-make-it-right-its-about-cs-retention-too/","Important new paper in Nature that makes the argument for active learning in all science classes, which is one of the arguments I was making in my Top Ten Myths blog post. The image and section I’m quoting below are about a different issue than learning — turns out that active learning methods are important for retention, too.  Active learning is winning support from university administrators, who are facing demands for accountability: students and parents want to know why they should pay soaring tuition rates when so many lectures are now freely available online. It has also earned the attention of foundations, funding agencies and scientific societies, which see it as a way to patch the leaky pipeline for science students. In the United States, which keeps the most detailed statistics on this phenomenon, about 60% of students who enrol in a STEM field switch to a non-STEM field or drop out2 (see ‘A persistence problem’). That figure is roughly 80% for those from minority groups and for women. via Why we are teaching science wrong, and how to make it right : Nature News & Comment."
"426","2015-07-15","2023-03-24","https://computinged.wordpress.com/2015/07/15/the-11th-top-myth-of-teaching-computer-science/","My Blog@CACM Post for July 2015 is on the Top Ten Myths of Teaching Computer Science. You can go take a take a look at it here. I wrote that blog post because we really have had a long debate in our faculty email list about many of those topics. I recently saw our Dean at an event, and he told me that he hadn’t read the thread yet (but he planned to) because “it must be 100 messages long.” Most of the references in that blog post came from messages that I wrote in response to that thread. It was a long post because people generally didn’t agree with me. Several senior, well-established (much more famous than me) faculty strongly disagreed with the evidence-based argument I was making. The thread finally ended when one of the most senior, most respected faculty in the College wrote a note saying (paraphrased), “There are probably better teaching evaluation methods than the ones we now use. I’m sure that Mark knows teaching methods that would help the rest of us teach better.” And that was it. Thread ended. The research-based evidence that I offered was worth fighting about. The word of authority was not. I’ll bet that faculty across disciplines similarly respond to authority more than evidence. We certainly see the role of authority in Physics Education Research (PER). Pioneering PER researchers were not given much respect and many were ostracized from their departments. Until Eric Mazur at Harvard had his students fail the Force Concept Inventory (FCI), and he changed how he taught because of it. Until Nobel laureate Carl Wieman decided to back PER (all the way to the Office of Science Technology and Policy in the White House). Today, the vast majority of physics teachers know research-based teaching methods (even if they don’t always use them). FCI existed before Mazur started using it, but it really started getting used after Mazur’s support. The evidence of FCI didn’t change physics teaching. The voice of authority did. While we might wish that CS faculty would respond more to evidence than authority (see previous post on this theme), this insight suggests a path forward. If we want CS faculty to improve their teaching and adopt evidence-based practices, top-down encouragement can have large impact. Well-known faculty at top institutions publicly adopting these practices, and Deans and Chairs promoting these practices can help to convince faculty to change."
"427","2015-06-19","2023-03-24","https://computinged.wordpress.com/2015/06/19/news-flash-people-dont-generally-make-evidence-based-rational-decisions/","I found the article below fascinating, but as an instance of a general model. The article describes how scientists who study gun control have very different opinions about gun control than the general American public — who (presumably) don’t draw on scientific evidence to inform their opinions. People who draw on evidence have different opinions than those who don’t. Most people do not draw on evidence when informing their opinions. I don’t see that the story here is “Scientists are smart and the public is dumb.” I would bet that if you asked these same gun control scientists about something outside of their area of expertise, they similarly ignore evidence. I work with CS professors all the time who draw on evidence to inform their opinions within their area of expertise (e.g., robotics, HCI, networking), but when it comes to education, evidence goes out the window. Davide Fossati and I did a study (yeah, evidence — we know what that’s worth) describing how CS faculty make decisions (see post here). In my experience, if the evidence is counter to their opinion, evidence is frequently ignored. One of the things we learned in “Georgia Computes!” was just how hard it is to change faculty (see our journal article where we tell this story). CS teachers are pretty convinced that they teach just fine, despite evidence to the contrary. I regularly try to convince my colleagues to teach using active learning approaches like peer instruction given the overwhelming evidence of its effectiveness (see this article, for just one), and I regularly get told, “It really doesn’t work for me.” People are people, even when scientists and CS faculty. Of the 150 scientists who responded, most were confident that a gun in the home increases the chance that a woman living there will be murdered (72 percent agreed, 11 percent disagreed), that strict gun control laws reduce homicide (71 percent versus 12 percent), that more permissive gun laws have not reduced crime rates (62 percent versus 9 percent), that guns are used more often in crimes that in self-defense (73 percent versus 8 percent), and that a gun in the home makes it a more dangerous place to be (64 percent versus 5 percent). Eighty-four percent of the respondents said that having a firearm at home increased the risk of suicide. These figures stand sharply at odds with the opinions of the American public. A November 2014 Gallup poll found that 63 percent of Americans say that having a gun in the house makes it a safer place to be, a figure that has nearly doubled since 2000. According to the same survey, about 40 percent of Americans keep a gun in the home. via Where does science fall on the gun control debate? – CSMonitor.com."
"428","2014-10-15","2023-03-24","https://computinged.wordpress.com/2014/10/15/we-need-to-fix-the-computer-science-teaching-problem/","This is my third blog post in a series inspired by a thread in the SIGCSE-Members list and by the Slate article which argued that “Practice doesn’t make perfect.” Macnamara et al did a meta-analysis of studies of expertise, and found that a relatively small percentage of variance in expertise can be explained through hours of practice. The Slate authors argue that this implies that genetics explains the rest of the variance. Lots of CS teachers believe in the Geek Gene Hypothesis, and for good reason. It’s frustrating to have seemingly no impact on some, especially the lower-end, students. Even the award-winning Porter, Zingaro, and Lister paper points out that the earliest assessments in the class they studied correlate very highly with the final grade. Gas Station without Pumps voiced a similar sentiment in his blog post in response to the Slate article: But the outcomes for individual students seem to depend more on the students coming in than on what I do. Those students who come in better prepared or “innately” smarter progress faster than those who come in behind, so the end result of the teaching is that differences among the students are amplified, not reduced. Whether the differences in the students coming in are due to prior practice, prior teaching, or genetics is not really knowable, but also not really relevant. I agree. It’s not really knowable where the difference comes from and it’s not really relevant. The point of my Blog@CACM post is: we can do better. If we can teach spatial ability and subitizing, two skills that have a much stronger claim to being innate than programming, then we can certainly teach people to program better. If we follow common practice and it’s unsuccessful, it’s not surprising that we think, “I tried. I explained carefully. I gave interesting assignments. I gave good feedback. It’s got to be an innate trait. Some students are just born wired to program.” I watch my children taking CS classes, along with English, Chemistry, Physics, and Biology classes. In the CS classes, they code. In the other classes, they do on-line interactive exercises, they write papers, they use simulations, they solve problems by-hand. Back in CS, the only activity is coding with feedback. If we only have one technique for teaching, we shouldn’t be surprised if it doesn’t always work Here’s a reasonable hypothesis: We get poor results because we use ineffective teaching methods. If we want to teach CS more effectively, we need to learn and develop better methods. If we don’t strive for better methods, we’re not going to get better results. A first step is to be more methodical with how we choose methods. In a 2011 paper by Davide Fossati and me (see here), we found that CS teachers generally don’t use empirical evidence when making changes in how we teach. We act from our intuition, but our students aren’t like us, and our intuition is not a good indicator of what our students need. Next, we need to experiment with more methods. We want to get to a place where we identify known problems in our students’ understanding, and then used well-supported methods that help students develop more robust understandings. We probably don’t have a wide range of different techniques for teaching assignment, iteration, recursion, and similar concepts? We should try well-supported techniques like pair programming, peer instruction, or Media Computation (see CACM article on these). We should try to expand our techniques repertoire beyond simply grinding at code. We could try techniques like worked examples, Problets, CodingBat, games with learning outcomes like Wu’s Castle, multiple choice questions like in Gidget, the Parson’s Problems in the Runestone Interactive ebooks, or even computing without computers as in CS Unplugged. We do not make it easy for CS teachers to pick up new, better, more proven methods. Sure, there are the SIGCSE Symposium proceedings, but that’s not a systematic presentation of what to use when. This is on the CS education research community to do better. But it’s also on the CS teaching community to demand better, to seek out better methods and studies of techniques. If we taught better, there are a lot of problems in CS that we might impact. We might bring in a more diverse group of students. We might make our current students more successful. We might change attitudes about computing. Perhaps most importantly, maybe we as teachers will come to believe that we can teach anyone to program."
"429","2017-09-11","2023-03-24","https://computinged.wordpress.com/2017/09/11/learning-programming-at-scale-philip-guos-research/","I love these kinds of blog posts. Philip Guo summarizes the last three years of his research in the post linked below. I love it because it’s so important and interesting (especially for students trying to understand a field) to get a broad explanation of how a set of papers relate and what they mean. Blog posts may be our best medium for presenting this kind of overview — books take too long (e.g., I did a book to do an overview of 10-15 years of work, but it may not be worth the effort for a shorter time frame), and few conferences or journals will publish this kind of introspection. My research over the past three years centers on a term that I coined in 2015 called learning programming at scale. It spans the academic fields of human-computer interaction, online learning, and computing education. Decades of prior research have worked to improve how computer programming is taught in traditional K-12 and university classrooms, but the vast majority of people around the world—children in low-income areas, working adults with full-time jobs, the fast-growing population of older adults, and millions in developing countries—do not have access to high-quality classroom learning environments. Thus, the central question that drives my research is: How can we better understand the millions of people from diverse backgrounds who are now learning programming online and then design scalable software to support their learning goals? To address this question, I study learners using both quantitative and qualitative research methods and also build new kinds of interactive learning systems. Source: Learning Programming at Scale | blog@CACM | Communications of the ACM"
"430","2017-09-18","2023-03-24","https://computinged.wordpress.com/2017/09/18/the-challenge-of-retaining-women-in-computing-the-2016-taulbee-survey-supplementary-report-on-course-level-enrollment/","The Computing Research Association (CRA) has just released a supplement to their 2016 Taulbee Survey report. They now are collecting individual course data, which gives them more fine-grained numbers about who is entering the major, who is retained until mid-level, and who makes it to the upper-level. Previously, they mostly just had enrollment and graduation data. These new data give them new insights. For example, we are getting more women and URM in computing, but we are not retaining them all. Except in the introductory course for non-majors, the median percentage of women in courses at each level was either fairly constant or increasing [from previous years]. The most notable increase was in the mid-level course, where the median percentage of women went from 17.4 in 2015 to 20.0 in 2016. The median percentage of women in the upper-level course also increased, from 14.1 to 15.9 percent. We see a slight drop-off from the median percentage of women in the introductory course for majors in 2015 (21.0 percent) to the median percentage of women in the mid-level course in 2016 (20.0 percent), and a somewhat larger drop-off between the median percentage of women in the mid-level course in 2015 (17.4 percent) and the median percentage of women in the upper-level course in 2016 (15.9 percent). Because the median percentage at each level is for a single representative course, not for all students at that level, some of the differences between levels may be attributable to the specific courses on which the institutions chose to report. Overall, however, this trend of decreasing representation of women at higher course levels is congruent with other data. Source: The 2016 Taulbee Survey: Supplementary Report on Course-level Enrollment – CRA"
"431","2017-08-09","2023-03-24","https://computinged.wordpress.com/2017/08/09/its-not-about-google-our-diversity-efforts-arent-working/","The sexist “internal memo” from Google has been filling my social media feeds for the last few days. I’m not that excited about it. Within every organization, there will be some people who disagree with just about any policy. The enormous screed is so scientifically incorrect that I have a hard time taking it seriously. For example, the memo claims that the gap between men and women in CS is due to biology. That can’t be when there are more women than men in CS, especially in the Middle East and Northern Africa. I saw a great study at NCWIT a few years ago on why programming is seen as women’s work in those parts of the world — it’s detailed work, done inside, sometimes with one other person. It looks like sewing or knitting. When told that programmers were mostly male in the US, the participants reportedly asked, “What’s masculine about programming?” There’s an interesting take from four scientists who claim that everything that the internal memo says is correct. The positive outcome from this memo is Ian Bogost’s terrific essay about the lack of diversity in Tech, from industry to higher education. It’s not about Google. It’s that our diversity efforts are having little impact. Ian explains how our problem with diversity is deeply rooted and influences the historical directions of computing. I highly recommend it to you. These figures track computing talent more broadly, even at the highest levels. According to data from the Integrated Postsecondary Education Data System, for example, less than 3 percent of the doctoral graduates from the top-10 ranked computer science programs came from African American, Hispanic, Native American, and Pacific Islander communities during the decade ending in 2015. Given these abysmal figures, the idea that diversity at Google (or most other tech firms) is even modestly encroaching on computing’s incumbents is laughable. To object to Google’s diversity efforts is to ignore that they are already feeble to begin with. Source: A Googler’s Anti-Diversity Screed Reveals Tech’s Rotten Core – The Atlantic"
"432","2018-10-22","2023-03-24","https://computinged.wordpress.com/2018/10/22/how-google-is-supporting-computing-education-research/","Google in August made five awards to support computing education research (see announcement here). They are not huge awards, and they’re all fairly short time frames. But what I’m impressed with is how Google is doing their investment in computing education research. Google started their process by asking Paulo Blikstein to poll the field and write a report summarizing the state of computing education research. I blogged about that report here — I liked it. I thought he covered a lot of ground in a small space, and he pointed out important open research questions. Google wanted to hear from researchers directly. So they held a workshop with a bunch of researchers (some involved in Paulo’s report, some outsiders) to talk to them about what were the pressing research issues we saw and what we’d recommend Google should do about them. (I was there, and mentioned the workshop in passing in this blog post.) So, first they educated themselves (and the community) with Paulo’s report, then they brought in more voices to respond to the report and point out other issues. Now they’ve made their awards. The process is interesting because they engaged the community, at multiple levels. They didn’t just hire the people away from their campuses to come to Google. They made external awards, so that the faculty keep teaching (which we desperately need with the exploding enrollments). I hope other companies make note of the process and consider it as a model. "
"433","2018-03-05","2023-03-24","https://computinged.wordpress.com/2018/03/05/the-state-of-the-field-in-pre-college-computer-science-education-highly-recommended-google-report/","Google has just released a report: Pre-College Computer Science Education: A Survey of the Field (available here). The report is authored by Paulo Blikstein of Stanford. The report is innovative, developed with an unusual method. It’s terrific, and I highly recommend it. Paulo started out with a pretty detailed survey document about the state of the literature in computer science education. He covered from the 1967 launch of Logo to modern day. Then he interviewed 14 researchers in the field (I was one). These were detailed interviews, where the interviewees got to review the transcript afterwards. Paulo integrated ideas and quotes from the interviews into the document. Here comes the really cool part: he put the whole thing on a Google doc and let everyone comment on it. When I got the call to review the document, I just skimmed it. It looked pretty good to me. But then the debates started, and the fights broke out. That Google doc had some of the longest threads of comments I’ve ever seen. After a few weeks, Paulo closed the comments, and then integrated the threads into the document. So now, it’s not just a serious survey paper, brought up to date with interviews. It’s also a record of significant debate between over a dozen researchers, where the tensions and open questions were surfaced. This is the document to read to figure out what should come next in computing education research. I will recommend it to all of my students. Of course, it’s not perfect. The researchers interviewed tended towards the Logo/MIT/constructionist perspective. The emphasis was on the US, though there were a couple of non-US interviewees. If someone was to do this again (which I don’t recommend for a few years — it’ll take us awhile just to work on this agenda), I’d recommend including interviews with a wider range of folks: I’m sure that I’m forgetting important voices, but this is enough to say that this report is a good first effort at bringing in a range of perspectives. There are other important voices needed, if you really want to understand the state of CS education research at the pre-college level. As it is, it’s still a fascinating and important report. I’m biased — my thoughts and words are in there. There is a range of opinions in there. I don’t agree with everything in there. Paulo did a good job capturing the tensions around computational thinking, and I’m much more positive about blocks-based programming languages than are other voices in the report. I highly recommend reading the report. "
"434","2013-09-04","2023-03-24","https://computinged.wordpress.com/2013/09/04/carl-wieman-moves-to-stanford-to-focus-on-better-science-teaching/","Carl Weiman has accepted a position at Stanford to focus on science teaching. It’s a great place for him, and I expect that we’ll hear more interesting things from him in the future. One aspect of the story that I find particular interesting is Weiman’s dislike of MOOCs, and how that conflicts with the perspective of some of the MOOC advocates at Stanford. Mr. Wieman left the White House last summer, after receiving a diagnosis of multiple myeloma and after spending two years searching for ways to force universities to adopt teaching methods shown through scientific analysis to be more effective than traditional approaches. His health has improved, Mr. Wieman said in an interview last week. But rather than try again through the political process to prod universities to accept what research tells them would be better ways of teaching and retaining students in the sciences, he now hopes at Stanford to work on making those methods even better. via Nobelist Carl Wieman Moves to Stanford to Focus on Better Science Teaching – Government – The Chronicle of Higher Education."
"435","2017-08-07","2023-03-24","https://computinged.wordpress.com/2017/08/07/ieee-prism-on-the-georgia-tech-online-ms-in-cs-program/","Nice piece in IEEE Prism about Georgia Tech’s On-line (Udacity MOOC-based) MS in CS degree. I like how they emphasized that the program really discovered an un-met demand for graduate education. Only after students began enrolling in OMS CS did researchers discover another unprecedented element of this massive online course. As economist Joshua Goodman of Harvard University tells Prism, he and his co-investigators found “large demand among mid-career [professionals], particularly mid-career Americans . . . for high-quality continuing education.” Indeed, demand is so robust that the program appears capable of boosting the overall production of computer science degrees in this country.Whether the new credential can fortify experienced professionals against the widespread threat of replacement by younger and cheaper workers remains an open question. For the thousands who have enrolled so far, however, the answer clearly is yes. Source: Course Correction"
"436","2018-02-12","2023-03-24","https://computinged.wordpress.com/2018/02/12/teasing-out-the-meaning-of-online-classes-online-courses-are-harming-the-students-who-need-the-most-help-nytimes/","The NYTimes published an interesting piece on the state of online education today. Increasingly, online education is being used in schools as a response to students failing in face-to-face, traditional classrooms. If you’re not making it in the regular class, try it again in the online class. The article describes how that’s not working. Students who fail in traditional classes need more personal contact and support, not less. I love that the name of the column where this article appeared is called “The Economic View,” because that’s exactly what it is. We do now how to teach every student well — give each child a well-educated teacher for their particular subject (Bloom’s two-sigma effect). We can’t afford that, so we make do with less. But we should aim to do no harm. Current practice with online classes is clearly doing harm. The NYTimes article is reporting on empiricism. We cannot empirically determine what might online classes become. The author, Susan Dynarski of the University of Michigan, is reporting on current practice and on the result of policy. Can online classes help students? Absolutely, and the OMS CS is a good example of that. Can we build online classes that work better for students who struggle with traditional classes? Maybe — it’s hard to see them in this study. At the ECEP 2018 meeting, Caitlin Dooley (Associate Superintendent for Georgia) said that their online classes do better than face-to-face classes, in part because of caring (“mama bear”) teachers who support the students outside of the online classes. The online classes that Susan Dynarski is studying are clearly not working well for struggling students. There may already be models that work well, but they’re swamped in a general study of policy across different kinds of online classes. Dynarski’s article may just be telling us that the current average practice is insufficient. There may be better models (maybe still in research) that could correct these ills. Dynarski’s article is fascinating and is sounding an important alarm. It should be even greater motivation for those of us who are working to invent better online education. Online education helps school districts that need to save money make do with fewer teachers. But there is mounting evidence that struggling students suffer. In the fully online model, on the other hand, a student may never be in the same room with an instructor. This category is the main problem. It is where less proficient students tend to run into trouble. After all, taking a class without a teacher requires high levels of self-motivation, self-regulation and organization. Yet in high schools across the country, students who are struggling in traditional classrooms are increasingly steered into online courses. Source: Online Courses Are Harming the Students Who Need the Most Help"
"437","2017-07-03","2023-03-24","https://computinged.wordpress.com/2017/07/03/finding-that-many-students-get-lousy-returns-on-online-education-but-some-students-succeed/","The point made below is that online education does work for some students. Our OMS CS succeeds (see evidence here) because it serves a population that has CS background knowledge and can succeed online. Not everyone succeeds in MOOCs. I don’t like the first sentence in this piece. “Online education” can be effective. The models matter. Despite Hoxby’s troubling findings, it’s hard to say whether online education in and of itself is inherently problematic or whether certain models could be successful. Goodman’s research on a Georgia Institute of Technology online master’s in computer science program indicates that, if done right, an online degree can provide a decent education at a fraction of the cost.“That model doesn’t generalize very well to the broader set of people that are out there,” he said. That’s because the students in the Georgia Tech program have already proved themselves to be successful in higher education (the admissions standards are relatively similar to the school’s elite brick-and-mortar computer science program), which is often not the case for many of the 30-something students that are typical of online education programs. Source: Damning study finds students get lousy returns on online education – MarketWatch"
"438","2017-08-14","2023-03-24","https://computinged.wordpress.com/2017/08/14/teaching-computer-science-is-great-but-its-not-enough-calls-for-functional-computer-science-literacy/","The article quoted below by Florence R. Sullivan & Jill Denner calls for us to go beyond “simply giving more students access.” We need to give them “functional computer science literacy.” By that phrase, they mean that we need to have students consider ethical and social issues. That’s not what Andy DiSessa meant when he defined computational literacy, who talked more about using computing to understand the world. But there may be a more mundane, critical form of literacy than either of these definitions. Computing classes that emphasize coding over traditional technology literacy (e.g., how to use the computer) are not attracting students in the UK. The BBC said it frankly, “Computing in schools – alarm bells over England’s classes.” In the UK, even where there is access to computing education, but students aren’t flocking to the classes. It’s not just a matter of “time, funding, and qualified teachers.” Traditional Information and Communications Technologies classes are more attractive to English students than Computing classes, based on number of students taking GCSE’s. Massachusetts merged their digital literacy standards into their new computer science standards. That’s likely going to be the most successful path. We can use digital literacy as a context to introduce some CS, to draw students into CS classes. CS may not be the draw. Literacy is. There is still much work to do, however. In an ongoing, multiyear study on computer science education conducted by Google and Gallup, researchers found that although students, parents, teachers, and school administrators value computer science, it is still not offered in many schools. This is because of a lack of time, funding, and qualified teachers. Only 25 percent of schools nationwide reported offering a computer science class in 2014-15, and while that number rose to 40 percent in 2015-16, we are still years away from providing sufficient computer science education in all schools. As educational researchers focused on computer science learning, we welcome the push by more districts to teach the discipline to students. But we believe that our nation’s current conception of computer science education does not go far enough. It is not sufficient to simply give more students access. As computer science continues to expand, we advocate for educators to teach functional computer science literacy, just as the field of science education has spent decades refining an approach to teaching socio-scientific reasoning (which integrates learning science content in the context of real-world issues). Source: Education Week"
"439","2017-08-21","2023-03-24","https://computinged.wordpress.com/2017/08/21/a-threads-using-cs-major-joins-gt-faculty-welcome-to-sauvik-das/","Threads were a curriculum innovation from Georgia Tech around 2005, that we have studied in some of our research. Today, we welcome one of the undergraduates who took Threads as faculty into our School of Interactive Computing. (He officially starts in January, but he’s hanging out at the faculty retreat and meetings with us.) Welcome to Sauvik Das, and I’m so pleased that he wrote this reflective essay about his journey to re-join us. Threads are specializations in different application areas of Computer Science: for example, embedded systems (e.g., computing embedded in physical systems), media (e.g., computer graphics, games), machine intelligence, etc. The thread that truly made me think was “people”: “where computing meets its users”. Everything I wanted to do with computing, I reflected, was not actually about computing. It was about using computing to create new, better and engaging experiences for the people that used the systems I made. Source: Beginnings: Old and New – Sauvik Das – Medium"
"440","2017-08-28","2023-03-24","https://computinged.wordpress.com/2017/08/28/the-problems-with-coding-bootcamps-allure-without-payoff/","Audrey Watters weighs in below on why Coding Bootcamps are failing. She argues that bootcamps aren’t filling a real need, that there really isn’t a huge untapped need for coding skills. Kyle Thayer and Amy Ko just published an article at ICER 2017 about their analyses of bootcamps. Kyle has a nice summary as a Medium post (see link here), but I recommend reading the actual ICER paper, too. Kyle’s summary is balanced about the strengths and weaknesses of coding bootcamps, while I think the results in the ICER paper are much more critical. This one quote, about the nine months (!) following graduation, was particularly compelling for me, “I pretty much devoted my time to [my bootcamp’s] prescribed job hunting methods, which means financially, I have no money. [. . . ] And that [sacrifice] reflects on my family because now we’re low on funds [. . . ] and now instead of selling our house and buying a house, we’re selling our house to pay the debt that we’re in and then go rent until I can find a job.” Kyle’s visualization of the paths of his 26 interviewees is rich with detail, but can be confusing. Here’s a slice of three of them.  What I didn’t get at first is that the gray area to the right is planned (or even imagined). So P18, above, has already had one partial bootcamp (half-moon), one complete bootcamp, and still doesn’t have the desired job (the star in the upper right hand corner). Of his 26 interviewees, only three have their desired job in the software industry. Several have less than desirable jobs (including one that has an unrelated job and gave up). Nine of the 26 had already dropped out of a bootcamp. When I read Kyle and Amy’s study about the struggle and pain that the bootcamp attendees go through, including difficulties finding jobs beyond what was expected, and then read Audrey’s piece suggesting that there might not be as many jobs available as people think, I wonder what is the allure of bootcamps. Why go through all of that when there isn’t a guaranteed (or even likely?) payoff? Within the past week, two well-known and well-established coding bootcamps have announced they’ll be closing their doors: Dev Bootcamp, owned by Kaplan Inc., and The Iron Yard, owned by the Apollo Education Group (parent company of the University of Phoenix). Two closures might not make a trend… yet. But some industry observers have suggested we might see more “consolidation” in the coming months. It appears that there are simply more coding bootcamps – almost 100 across the US and Canada – than there are students looking to learn to code. (That is to say, there are more coding bootcamps than there are people looking to pay, on average, $11,000 for 12 weeks of intensive training in a programming language or framework). All this runs counter, of course, to the pervasive belief in a “skills gap” – that there aren’t enough qualified programmers to fill all the programming jobs out there, and that as such, folks looking for work should jump at the chance to pay for tuition at a bootcamp. Code.org and other industry groups have suggested that there are currently some 500,000 unfilled computing jobs, for example. But that number is more invention than reality, a statistic used to further a particular narrative about the failure of schools to offer adequate technical training. That 500,000 figure, incidentally, comes from a Bureau of Labor Statistics projection about the number of computing and IT jobs that will added to the US economy by 2024, not the number of jobs that are available – filled or unfilled – today. Perhaps instead of “everyone should learn to code,” we should push for everyone to learn how to read the BLS jobs report. There isn’t really much evidence of a “skills gap” – there’s been no substantive growth in wages, for example, that one would expect if there was a shortage in the supply of qualified workers. Source: Why Are Coding Bootcamps Going Out of Business?"
"441","2017-07-31","2023-03-24","https://computinged.wordpress.com/2017/07/31/the-factors-influencing-students-choosing-to-go-into-stem-economics-and-gender-matter/","I saw this in a College Board report, which summarized the paper cited below with these bullets: Based on the findings presented here, first generation status leads to a greater likelihood of choosing engineering careers for males but not for females. Financial difficulties have a greater effect on selecting scientific fields than engineering fields by females. The opposite is true for males. Passing grades in calculus, quantitative test scores, and years of mathematics in high school as well as self-ratings of abilities to analyze quantitative problems and to use computing are positively associated with choice of engineering fields. Source: Choice of Academic Major at a Public Research University: The Role of Gender and Self-Efficacy | SpringerLink"
"442","2017-09-29","2023-03-24","https://computinged.wordpress.com/2017/09/29/developer-bootcamps-and-computing-education-tech-done-right-podcast/","I was so excited to be invited to do this podcast with Noel Rappin (my first PhD student) and Jeff Casimir who runs the Turing Academy bootcamp. I learned a lot about bootcamps from Jeff, whom I was pleased to learn is a data geek and measures things pretty carefully. Two of my favorite insights: I recommend the podcast — we had a fun discussion. How do people learn computing? Who learns best from traditional computer science education and who from bootcamps? How can we teach people who are not developers but who need to learn some programming to do their jobs? Jeff Casimir, the founder of Turing academy, and Georgia Tech’s Mark Guzdial, one of the founders of the International Computing Education Research conference, join Noel to answer these questions and also explain why Excel is both the best and the worst thing in the world. Source: Tech Done Right Episode 20: Developer Bootcamps and Computing Education with Jeff Casimir and Mark Guzdia"
"443","2017-09-04","2023-03-24","https://computinged.wordpress.com/2017/09/04/google-study-on-the-challenges-for-rural-communities-in-teaching-cs/","Google continues their series of reports on the challenges of teaching CS, with a new report on rural and small-town communities in the US. This is an important part of CS for All, and is a problem internationally. The Roehampton Report found that rural English schools were less likely to have computing education than urban schools. How do we avoid creating a computing education divide between urban and rural schools? This special brief from our Google-Gallup study dives into the opportunities and challenges for rural and small-town communities. Based on nationally representative surveys from 2015-16, we found: Students from rural/small-town schools are just as likely as other students to see CS as important for their future careers, including 86% who believe they may have a job needing computer science. Rural/small-town parents and principals also highly value CS, with 83% of parents and 64% of principals saying that offering CS is just as or more important than required courses. Rural/small-town students are less likely to have access to CS classes and clubs at school compared to suburban students, and their parents are less likely to know of CS opportunities outside of school. Rural/small-town principals are less likely to prioritize CS, compared to large-city or suburban principals. Source: Google for Education: Computer Science Research"
"444","2017-09-08","2023-03-24","https://computinged.wordpress.com/2017/09/08/personality-tests-are-fun-but-dont-capture-who-you-really-are-and-should-not-be-part-of-hiring/","Annie Murphy Paul has been trying to convince people for years now that personality tests don’t really work — they’re not valid, they’re not reliable, and it’s not clear what they’re measuring. This issue is important because the Tech industry still believes in tests like these when hiring. (Or so I hear — as a professor, I only know the hiring process from student stories.) They introduce significant bias into hiring. How do we get rid of them? Twelve years ago, I tried to drive a stake into the heart of the personality-testing industry. Personality tests are neither valid nor reliable, I argued, and we should stop using them — especially for making decisions that affect the course of people’s lives, like workplace hiring and promotion. But if I thought that my book, The Cult of Personality Testing, would lead to change in the world, I was keenly mistaken. Personality tests appear to be more popular than ever. I say “appear” because — today as when I wrote the book — verifiable numbers on the use of such tests are hard to come by.Personality testing is an industry the way astrology or dream analysis is an industry: slippery, often underground, hard to monitor or measure. There are the personality tests administered to job applicants “to determine if you’re a good fit for the company”; there are the personality tests imposed on people who are already employed, “in order to facilitate teamwork”; there are the personality tests we take voluntarily, in career counseling offices and on self-improvement retreats and in the back pages of magazines (or, increasingly, online). Source: Personality Tests Are Fun But Don’t Capture Who You Really Are : Shots – Health News : NPR"
"445","2017-09-22","2023-03-24","https://computinged.wordpress.com/2017/09/22/the-father-of-mobile-computing-is-not-impressed-the-weight-of-redefining-the-normal/","I have been fortunate to have heard Alan Kay talk on the themes in this interview many times, but either he’s getting better at it or I’m learning enough to understand him better, because this was one of my favorites. (Thanks to Ben Shapiro for sending it to me.) He ties together Steve Jobs, Neal Postman, and Maria Montessori to explain what we should be doing with education and technology, and critiques the existing technology as so much less than what we ought to be doing. In the quote below, he critiques Tim Berners-Lee for giving us a World Wide Web which was less than what we already knew how to do. The last paragraph quoted below is poignant: It’s so hard to fix the technology once it’s established because of “the weight of this redefining of the normal.” What I understood this time, which I hadn’t heard before, was the trade-off between making technology easier and making people better. I’ve heard Alan talk about using technology to improve people, to help them learn, to challenge their thinking. But Alan led the team that invented the desktop user interface — he made computing easier. Can we have both? What’s the balance that we need? That’s where Neal Postman and Bertrand Russel come in, as gifted writers who drew us in and then changed our minds. That’s why we need adults who know things to create a culture where children learn 21st century thinking and not oral culture (that’s the Maria Montessori part), and why the goal should be about doing what’s hard — not doing what’s universal, not doing what pre-literate societies were doing. Alan critiques the iPhone as not much better than the television for learning, when the technology in the iPhone could have made it so much more. He tosses out another great line near the end of the interview, “How stupid is it, versus how accepted is it?” How do we get unstuck? The iPhone was amazing, but how do we roll back the last ten years to say, “Why didn’t we demand better? How do we shuck off the ‘the weight of this redefining of the normal’ in order to move to technology that helps us learn and grow?” And so, his conception of the World Wide Web was infinitely tinier and weaker and terrible. His thing was simple enough with other unsophisticated people to wind up becoming a de facto standard, which we’re still suffering from. You know, [HTML is] terrible and most people can’t see it. FC: It was standardized so long ago. AK: Well, it’s not really standardized because they’re up to HTML 5, and if you’ve done a good thing, you don’t keep on revving it and adding more epicycles onto a bad idea. We call this reinventing the flat tire. In the old days, you would chastise people for reinventing the wheel. Now we beg, “Oh, please, please reinvent the wheel.”At least give us what Engelbart did, for Christ’s sake. But that’s the world we’re in. We’re in that world, and the more stuff like that world that is in that world, the more the world wants to be that way, because that is the weight of this redefining of the normal. Source: The Father Of Mobile Computing Is Not Impressed"
"446","2017-09-25","2023-03-24","https://computinged.wordpress.com/2017/09/25/the-negative-consequences-of-brown-v-board-of-education-integrating-computing-education/","The second season of Revisionist History has just finished. This season didn’t have the same multiple episodes with tight ties to the issues of education as last season (as I described in this blog post), there was one standout episode that does relate to our issues: Miss Buchanan’s Period of Adjustment. The podcast deals with the negative consequences of the Brown v Board of Education Supreme Court case that declared that separate was not equal and forced schools to integrate. The well-documented consequence of the integration was the closing of the schools for African-Americans and the firing of Black school teachers. Gladwell first considers what the Brown family (named in the case) and the other families in the case actually wanted, and about the longterm impact that even today, there are disproportionately few African-American teachers in the US are African-American — and that leads to impacts on students. When I studied Brown v Board of Education when I was a graduate student at the University of Michigan, we were taught a negative consequence that Gladwell barely touches on. Gladwell mentions that there were few jobs for an educated Black person at the time of Brown v Board. The Supreme Court’s decision, and the consequent firing of Black teachers, was an enormous blow to the African-American middle class in the United States. Employment was lost at a large scale, and longterm impacts on wealth and prosperity can be measured today. The connection to computer science education is part of the question of how do we reach everyone and help everyone to succeed. Today’s computing education is de facto segregated — not in the sense of colored vs white classes, but in terms of only certain demographics are in CS classes and other demographics are not. How do we improve diversity in computing education? Can we avoid a heavy-handed and expensive mandate like requiring CS for everyone? I side effect of requiring everyone to take CS might be that we get all the same kind of CS. Can we provide equal access to everyone without the negative consequences that Gladwell describes from Brown v Board of Education? Brown v Board of Education might be the most well-known Supreme Court decision, a major victory in the fight for civil rights. But in Topeka, the city where the case began, the ruling has left a bittersweet legacy. RH hears from the Browns, the family behind the story. Source: Revisionist History Podcast"
"447","2016-08-29","2023-03-24","https://computinged.wordpress.com/2016/08/29/the-role-of-higher-education-in-reducing-inequity-malcolm-gladwells-revisionist-history-podcast/","Malcolm Gladwell’s new podcast, Revisionist History, recently included a mini-series about the inequities in society that higher education perpetuates. Higher education is a necessity for a middle class life in today’s US, but not everyone gets access to higher education, which means that the economic divide grows larger. We in higher education (an according to Richard Tapia in his foreword to Stuck in the Shallow End, we in computer science explicitly) may be playing a role in widening the economic divide. David Brooks wrote about these inequities in 2005, in his NYTimes column, titled “The Education Gap“: We once had a society stratified by bloodlines, in which the Protestant Establishment was in one class, immigrants were in another and African-Americans were in another. Now we live in a society stratified by education. In many ways this system is more fair, but as the information economy matures, we are learning it comes with its own brutal barriers to opportunity and ascent. Gladwell has written about higher education before. In David and Goliath: Underdogs, misfits, and the art of battling giants, he told the story of Caroline Sacks who loved science since she was a little girl. When she applied to college, she was accepted into both University of Maryland and Brown University. She chose Brown for its greater prestige. Unfortunately, that prestige came with a much more competitive peer set. Caroline compared herself to them, and found herself wanting. She dropped out of science. Gladwell suggests that, if she’d gone to Maryland, she might have persisted in science because she would have fared better in the relative comparison. Gladwell’s three podcasts address who gets in to higher education, how we pay for financial aid for poorer students, and how we support institutions that serve poorer students. In Carlos doesn’t remember, Gladwell considers whether there are poorer students who have the academic ability to succeed but aren’t applying to colleges. Ivy League schools are willing to offer an all-expenses-paid scholarship to qualified students whose family income is below a certain level, but they award few of those scholarships. The claim is that there are just few of those smart-enough-but-poor students. Economists Avery and Hoxby explored that question and found that there are more than 35,000 students in the United States who meet the Ivy League criteria (see paper here). So why aren’t they applying for those prestigious scholarships? Gladwell presents a case study of Carlos, a bright student who gets picked up by a program aimed at helping students like him get access to high-quality academic opportunities. Gladwell highlights the range of issues that keep students like Carlos from finding, getting into, and attending higher education opportunities. He provides evidence that Avery and Hoxby dramatically underestimate the high-achieving poor student, e.g., Avery and Hoxby identified some students using eighth grade exam scores. Many of the high-achieving poor students drop out before eighth grade. As an education researcher, I’m recommending this podcast to my graduate students. The podcast exemplifies why it’s so difficult to do interview-based research. The title of the episode comes from Carlos’s frequent memory lapses in the interview. When asked why he didn’t mention the time he and his sister were taken away from their mother and placed in foster care, Carlos says that he doesn’t remember that well. It’s hard to believe that a student this smart forgets something so momentous in his life. Part of this is a resilience strategy — Carlos has to get past the bad times in his life to persist. But part of it is a power relationship. Carlos is a smart, poor kid, and Gladwell is an author of international bestsellers. Carlos realizes that it’s in his best interest to make Gladwell happy with him, so he says what he thinks Gladwell wants to hear. Whenever there is a perceived power gap between an interviewee (like Carlos) and an interviewer (Gladwell), we should expect to hear not-quite-the-truth. The interviewee will try to tell the interviewer what he thinks the world-famous author wants to hear — not necessarily what the interviewee actually thinks. The episode Food Fight contrasts Bowdoin College in Maine and Vassar College in New York. They are similar schools in terms of size and academics, but Bowdoin serves much better food in its cafeterias than Vassar. Vassar made an explicit decision to cut back in its food budget in order to afford more financial aid to its poorer students. Vassar spends almost twice as much as Bowdoin in financial aid, and has a much higher percentage of low-income students than Bowdoin. Vassar is explicit in the trade-offs that they’re making. Gladwell interviews a student who complains about the food quality, but says that she accepts it as the price for having a more diverse student body. But there’s a tension here. Vassar can only afford that level of financial aid because there is a significant percentage of affluent students who are playing full fare — and those affluent students are exactly the ones for which both Bowdoin and Vassar compete. Vassar can’t balance their budget without those affluent students. They can’t keep providing for the poorer students unless they keep getting their share of the richer students. Here’s where Gladwell starts the theme he continues into the third episode, when he tells his audience, “Never give to Bowdoin!” The third episode, My Little Hundred Million, starts from Hank Rowan giving $100 million to Glassboro State University in New Jersey. At the time, it was the largest philanthropic gift ever to a higher education institution. Since then there have been others, but all to elite schools. Rowan’s gift made a difference, saving a nearly-bankrupt university that serves students who would never be accepted at the elites. It made a difference in providing access and closing the “Education Gap,” in exactly the way that David Brooks was talking about in 2005. So why are such large gifts going instead to schools like Stanford and Harvard, who don’t play a role in closing that gap? And why do the rich keep giving to the elite institutions? Gladwell continues the refrain from the last episode. Stop giving to Harvard! Stop giving to Stanford! The most amazing part of the third episode is an interview with Stanford President, John Hennessy. Gladwell prods him to defend why Stanford should get such large gifts. Hennessy talks about the inability of smaller, less elite schools to use the money well. Do they know how to do truly important things with these gifts? It’s as if Hennessy doesn’t understand that simply providing access to poor students is important and not happening. Hennessy is painted by Gladwell as blind to the inequities in the economy and to who gets access to higher education. I highly recommend all of Revisionist History. In particular, I recommend this three-part mini-series for readers who care about the role that higher education can play in making our world better. Gladwell tells us that higher education has a critical role to play, in terms of accepting a more diverse range of students through our doors. We won’t do much to address the problems by only focusing on the “best and brightest.” As Richard Tapia writes in his foreword to Stuck in the Shallow End, that phrase describes much of what we get wrong in higher education. “Over the years, I have developed an extreme dislike for the expression ‘the best and the brightest,’ so the authors’ discussion of it in the concluding chapter particularly resonated with me. I have seen extremely talented and creative underrepresented minority undergraduate students aggressively excluded from this distinction. While serving on a National Science review panel years back, I learned that to be included in this category you had to have been doing science by the age of ten. Of course, because of lack of opportunities, few underrepresented minorities qualified.” Closing the Education Gap requires us to think differently about who we accept into higher education, who we most need to be teaching, and how we pay for it."
"448","2017-09-26","2023-03-24","https://computinged.wordpress.com/2017/09/26/white-house-announces-200-million-a-year-for-computer-science-code-org-csforall/","Looking forward to hearing more details at Code.org’s webinar this afternoon. Hadi Partovi posted on Facebook that the money will be provided as competitive grants to schools and non-profits through the Department of Education. Hadi has written a personal blog post about his motivations in supporting this announcement. The White House memorandum on the announcement is here. I don’t understand all the details here, and the details of the funding are important. If it’s not new funding, then it puts CS in competition with other fields, e.g., if the money is set aside for CS when it was originally allocated for all of STEM. The White House memorandum says, “Establish promotion of high-quality STEM education, with a particular focus on Computer Science, as a Department of Education priority.” If it’s a preference (e.g., a school gets money if and only if they’re teaching CS), it may hurt schools that can’t afford to teach CS yet because they’re stretched thin teaching literacy and mathematics. Here’s the webinar information: (9/26) at 11am PT, 2pm ET By web: https://code.zoom.us/j/783490509 By phone: US: +1 646 558 8656 or +1 669 900 6833 Webinar ID: 783 490 509 Today, the White House announced a $200 million per year commitment to computer science education in America’s schools. Unlike similar proposals in previous years, today’s action delivers funding to schools, immediately. Besides expanding access to computer science in schools that previously didn’t teach it, the funds promise to increase participation by women and underrepresented minorities.This funding will jumpstart efforts to ensure every student in every school has the opportunity to learn computer science as part of a well-rounded education. For advocates of increased access and diversity in CS, this is the culmination of years of momentum that began in classrooms, spread to entire school districts, and won the support of business leaders and elected officials globally. Source: $200 million a year for computer science – Code.org – Medium"
"449","2017-10-30","2023-03-24","https://computinged.wordpress.com/2017/10/30/lamport-doesnt-understand-education-the-coming-software-apocalypse/","Several people sent this article to me. It’s so one-sided and contrary to empirical evidence that I found it hard to finish. The belief that we can fix all of software through the use of software proofs and verification is contrary to software social processes, as shown by DeMillo, Lipton, and Perlis in 1979. Belief that Toyota sudden acceleration was due to a software bug ignores the empirical evidence about other causes for the phenomenon (as Gladwell described in his podcast last year). It’s the paragraph quoted below that led to people sending me the article. Leslie Lamport suggests that if we just taught people TLA+, that would lead to better software. Education of novices never works as a mechanism to change professional practice. (Or at least, I’ve been trying to find an example of successfully changing a community through education of the young, and I haven’t found one yet.) Students who want to become software developers want to do what software developers do — that’s Lave and Wenger’s model of situated learning, where students join a Community of Practice through Legitimate Peripheral Participation (which I describe in this blog post). If you tell students to learn TLA+, you would most likely get a response like, “Why are we learning THIS? We want to real thing, not some academic toy!” If you want to change a community of practice, you have to get the leaders in the community of practice to change. Students follow them. It doesn’t work the other way around. But TLA+ occupies just a small, far corner of the mainstream, if it can be said to take up any space there at all. Even to a seasoned engineer like Newcombe, the language read at first as bizarre and esoteric—a zoo of symbols. For Lamport, this is a failure of education. Though programming was born in mathematics, it has since largely been divorced from it. Most programmers aren’t very fluent in the kind of math—logic and set theory, mostly—that you need to work with TLA+. “Very few programmers—and including very few teachers of programming—understand the very basic concepts and how they’re applied in practice. And they seem to think that all they need is code,” Lamport says. “The idea that there’s some higher level than the code in which you need to be able to think precisely, and that mathematics actually allows you to think precisely about it, is just completely foreign. Because they never learned it.” Source: The Coming Software Apocalypse – The Atlantic"
"450","2017-10-04","2023-03-24","https://computinged.wordpress.com/2017/10/04/unpacking-models-of-what-the-usd1-3b-will-achieve-in-computing-education/","I wrote my Blog@CACM post for September on the massive investments in CS Education announced last week (see post here): $200M/year from the US Department of Education announced by the White House on Monday, then $300M over five years from the Tech industry announced on Tuesday. I have read analyses saying that the money isn’t really promised or isn’t new (see concerns in this post), and others are shunning the initiative because of White House policies (see link here). I took the promises at face value. My post starts congratulating Hadi Partovi and Cameron Wilson of Code.org and Ivanka Trump who were behind these initiatives, then I offered two back-of-the-envelope models of what $1.3B in five years could do: I received many responses, queries, and criticisms of that blog post (from email, Facebook, and Twitter). I am explaining and unpacking the CACM blog post here. I am not going to delete or change the CACM blog post. My mentor, Janet Kolodner, told me once not to dwell on any paper, trying to make it a masterpiece before publishing it. Rather, she suggested that we should just keep publishing. Explore lots of ideas in lots of papers, and publish as a way of thinking with a community. It’s okay to publish something you thought was right, and later find that it’s wrong — it documents the explored trails. I said that NYC was aiming to provide a quality computing learning experience for every student in every grade in every school, as I learned last October (and blogged about it here). I learned that the goal is now mandating a computing learning experience in every grade band, so not every year. It’s still a markedly different model than one teacher per school, and doesn’t change the costs considerably. I learned that (as one might expect) that the effort in NYC is in both the NYC Department of Education and in CSNYC. It’s great that there are many people in the NY DoEd working on CS education! I was told on Twitter that some of what I attributed to CSNYC is actually in NY Department of Education. I don’t know what I mis-attributed, but I’m sure that it’s because I get confounded over “CSNYC” representing “the effort to provide CS education across NYC” and “the organization that exists to provide CS education across NYC.” I don’t understand the split between NYC DoEd and the CSNYC organization, and I’m not going to guess here. I am sure that it’s important for the people involved, but it’s not so important for the model and national analysis. Code.org has made their model of the one-time cost of expanding access to K-12 computer science (CS) available at this Google doc. According to their model, it’s clear that the $1.3B is enough to make CS education available in every elementary and secondary school. They have more empirical data than anyone else on putting CS in whole districts, and their data suggest that costs are decreasing as they gain more efficiencies of scale. Hadi challenged several points in my blog post on Facebook. I won’t replicate all of our exchange, and only include three points here: Not all of my estimates are research-based. We don’t have research on everything. Changing all US schools happens so rarely that we do not have good models of how it works. I don’t think that the empirical data of what we have done before in CS Ed is necessarily predictive of what comes next, since most of our experience with CS Ed at-scale is in urban and suburban settings. Getting everywhere is harder. I have observed about “Georgia Computes!” — 1/3 of the high schools in GA got someone that Barbara trained in CS, and that’s likely the easiest 1/3. The next 2/3 will be harder and more expensive. As Hadi correctly called me on, the biggest cost factor I missed is the development of curriculum. Back in July, I blogged about Larry Cuban’s analysis that suggested that we need to re-think how we are developing and disseminating CS curriculum in the United States (see link here). We have to develop a lot more curriculum in collaboration with schools, districts, and states nationwide. The US will never adopt a single curriculum nationwide for any subject — it’s not how our system was developed, and it’s why Common Core did not reach all 50 states. The US education system is always about tailoring, adapting, and working with local values and politics. Curriculum is always political. Mike Zamansky just posted a blog post critiquing some of the curriculum he’s seeing in NYC (see post here). I don’t agree with Mike’s post, but I wholeheartedly agree with his posting. We should argue about curriculum, negotiate what’s best for our students, and create curriculum that works for local contexts. There is going to be a lot of that nationwide as we take steps towards providing computing education to all students. The iteration and revision will be expensive, but it’s a necessary expense for sustainable, longterm computing education. At a talk I gave at Indiana University on Friday, Katie Siek asked me my opinion. What do I want to see the funding be used for? It would be great if some of that funding could start more pre-service CS teacher preparation programs. I have argued that we should fund chairs of CS Education in top Schools of Education (see post here). Germany uses this model — they create CS Education professors who will be there for a career, producing CS teachers, supporting local communities of CS teachers, and serving as national models. An endowed chair is $1-3M at most universities. That is not very expensive for a longterm impact. I prefer an NYC-like model of reaching every student to the model of a teacher for every school. The data I’ve seen from our ECEP states suggests that most CS teachers teach only a single computing class, and that class is typically mostly white/Asian and male. One CS teacher per school doesn’t reach all the female and under-represented minority students. Equity has to be a top priority in our choices for these funds, since CS education is so inequitable. My greatest wish is for computational literacy to be woven into other disciplines, especially across all of STEM. I devoted my career to computing education because I believe in the vision of Seymour Papert, Cynthia Solomon, Alan Kay, and Andrea diSessa. Computational literacy can improve learning in science, mathematics, art, language, and other disciplines, too. I don’t argue that computer science is more important than other STEM subjects. Rather, computing makes learning in all the other STEM subjects better. I want us to teach real computational literacy across subjects, not just in the CS class hidden away, and not just in an annual experience. I recognize that that’s a long-term, expensive vision — probably two orders of magnitude beyond the current initiative. We need more long-term thinking in CS education, like building up the CS teacher development infrastructure and making the case to people nationwide for CS education. We are not going to solve CS for All quickly. When the K-12 CS Framework effort launched back in 2015, I told the story here about a conversation I had with Mike Lach (see post here). He pointed out that the last time we changed all US schools, it was in response to the Civil Rights movement. That’s when we started celebrating MLK Jr Day and added African-American History month. He asked me to think about how much national will it took to make those changes happen. We don’t have that kind of national will in CS education in this country — yet. We have a lot more groundwork to do before we can reach CS education for all students or all schools, and funding alone is not going to get us there."
"451","2015-07-03","2023-03-24","https://computinged.wordpress.com/2015/07/03/teacher-beliefs-reading-on-lijun-ni-learning-from-helenrose-fives-on-self-efficacy-and-geek-gene/","I discovered the below quoted post when I was looking up a paper by my former student, Lijun Ni. It’s nice to see her work getting recognized and reviewed! I talked a lot about her work when I was talking to PhD students at the University of Oldenburg program — Lijun has studied the beliefs of CS teachers, and that’s super important. One of the other international guests at the Oldenburg program I attended last month (see post here) was Helenrose Fives who has literally written the book on teacher beliefs (see Amazon reference). Several of the PhD students who presented their research talked about student teachers having lower self-efficacy after actually being in the classroom, less commitment to ideals like inquiry learning, and less belief that students can learn. Helenrose said that that’s really quite common. Teachers have a high level of self-efficacy (“I can teach using novel approaches that will really help students learn!”) before they enter the classroom, and that sense of self-efficacy falls off a cliff once they face the reality of the classroom. The self-efficacy rises over time (up and down, but mostly up) but never reaches the optimism of before teachers enter the classroom. I talked to Helenrose about what her work means for University CS teachers. In general, the work she describes is about school teachers, not faculty. She agreed that it’s possible for University CS teachers to have high self-efficacy even if they are not successful teachers, because University teachers define self-efficacy differently than school teachers. School teachers are responsible for student learning. They know individual students. They actually know if they are successful in their teaching or not (in terms of student learning and engagement). University teachers tend to have larger classes, and they tend to teach via lecture. They usually have little knowledge of individual student learning and engagement. Their sense of self-efficacy may arise from their ability to succeed at their task, “I can give great lectures. (Almost nobody falls asleep.) I can manage huge classes.” Where they do have knowledge of learning and evidence of ineffective teaching, they may simply decide that it’s the student’s fault. Perhaps this is where the Geek Gene is born. Here’s a hypothesis: If a University teacher has high self-efficacy (great confidence in his or her teaching ability) and sees evidence of students not learning, it’s rational for that teacher to believe that the problem lies with the students and that the problem is innate — beyond the ability of the teacher to improve it. In the first study, Ni interviewed teachers about their identity in order to establish what strengths and weaknesses are common in high school computer science teachers. She found that the teaching identity of computer science teachers is largely underdeveloped compared to teachers in other fields, and that often computer science teachers prefer to identify as a math teacher or a business teacher, rather than a computer science teacher. Further, she found that high school computer science teachers generally do not have any sort of teaching support community to turn to, because they are often the only computer science teacher at their school. All of these problems combine to keep computer science teachers from developing a strong teaching identity centered in the computer science field. Instead, we have teachers with low commitment levels to the field training our next generation of programmers in basic computing skills that are generally unrelated to the field of computer science itself. via Reading Lijun Ni | computing education."
"452","2019-04-01","2023-03-24","https://computinged.wordpress.com/2019/04/01/the-problem-with-sorting-students-into-cs-classes-we-dont-know-how-and-we-may-institutionalize-inequity/","One of the more interesting features of the ACM SIGCSE ITiCSE (Innovation and Technology in CS Education) conference are “working groups” (see description here). Groups of attendees from around the world work together before and at the conference on an issue of interest, then publish a report on what happened. This is the mechanism that Mike McCracken used when he organized the first Multi-Institutional, Multi-National (MIMN) study in CS Ed (see paper here). This year’s Working Group #9 caught my eye (see list here). The description of what the group wants to explore is interesting: How can we measure what will lead to success in introductory computer science? The main issues are the following. It’s a deep and interesting question that several research groups have explored. Probably the most famous of these is the “The Camel has Two Humps.” If you read that paper, be sure to read Caspersen et al’s (unsuccessful) attempt to replicate the results (here), Simon’s work with Dehnadi and Bornat to replicate the results (again unsuccessful, here), and then finally the retraction of the original results (here). Bennedsen and Caspersen have a nice survey paper about what we know about predictive factors from ICER 2005, and there was a paper at SIGCSE 2019 that used multiple data sources to predict success in multiple CS courses (here). The questions as I see it are (a) what are the skills and knowledge that improve success in learning to program, (b) how can we measure to determine if they are there, and (c) how can we teach those skills explicitly if they are not. Elizabeth Patitsas explored the question of whether there are innate differences between students that lead to success or failure in introductory CS (see paper here). She does not prove that there is no so-called Geek Gene. We can’t prove that something does not exist. She does show that (a) that grades at one institution over many years are (mostly) not bimodal, and (b) some faculty see bimodal grade distributions even if the distribution is normal. If there was something else going on (Geek Gene, aptitude, whatever), you wouldn’t expect that much normality. So she gives us evidence to doubt the Geek Gene hypothesis, and she gives us a reasonable alternative hypothesis. But it isn’t definitive proof — that’s what Ahadi and Lister argued at ICER 2013. We have to do more research to better understand the problem. Are Patitsas’s results suspect because they’re from an elite school? Maybe. Asking that question is really common among CS faculty — Lecia Barker found that that’s one of the top reasons why CS faculty ignore CS Ed research. We discount findings from places unlike ours. That’s why Multi-Institutional, Multi-National (MIMN) is such a brilliant idea. They control for institutional and even national biases. (A MIMN study showing the effectiveness of Peer Instruction is in the top-10 SIGCSE papers list.) In my research group, we’re exploring spatial reasoning as one of those skills that may be foundational (though we don’t yet know how or why). We can measure spatial reasoning, and that we can (pretty easily) teach. We have empirically shown that wealth (more specifically, socioeconomic status (SES)) leads to success in computing (see this paper), and we have a literature review identifying other privileges that likely lead to success in CS (see Miranda Parker’s lit review). I am concerned about the goals of the working group. The title is “Towards an Ability to Direct College Students to an Appropriately Paced Introductory Computer Science Course.” The first line of the description is: We propose a working group to investigate methods of proper placement of university entrance-level students into introductory computer science courses. The idea is that we might have two (or more) different intro courses, one at a normal pace and one at a remedial pace. The overall goal is to meet student needs. There is good evidence that having different intro courses is a good practice. Most institutions that I know that have multiple introductory courses choose based on major, or allow students to choose based on interest or on expectations of abilities. It’s a different thing to have different courses assigned by test. If we don’t know what those skills are that might predict success in CS, how are you going to measure them? And if you do build a test that sorts students, what will you actually be sorting on? It’s hard to build a CS placement test that doesn’t actually sort on wealth, prior experience, and other forms of privilege. If the test sorts on privilege, it is institutionalizing inequity. Poor kids go into one pile, and rich kids go into the other. Kids who have access to CS education go into one pile, everyone else into another. Why build the test at all? To build a test to sort people into classes presumes that there are differences that cannot be mitigated by teaching. Building such a test presumes that there is a constant answer to “What does it take to succeed in CS1?” If we had such a test, would the results be predictive for classes that both use and don’t use pair programming? Peer instruction? Parsons problems? I suggest a different perspective on the problem. We can get so much further if we instead improve success in CS1. Let’s make the introductory course one that more students will succeed in. There’s so much evidence that we can improve success rates with better teaching methods and revised curriculum. Beth Simon, Leo Porter, Cynthia Lee, and I have been teaching workshops the last four years to new CS faculty on how to teach better. It works — I learned Peer Instruction from them, and use it successfully today. My read on the existing literature suggests that everyone benefits from active learning, and the less privileged students benefit the most (see Annie-Murphy Paul’s articles). One of the reasons why spatial reasoning is so interesting to explore is that (a) it does seem related to learning computing and (b) it is teachable. Several researchers have shown that spatial skills can be increased relatively easily, and that the improved skills are long-lasting and do transfer to new contexts. Rather than sort people, we’re better off teaching people the skills that we want them to have, using research-informed methods that have measurable effects. Bottom line: We are dealing with extraordinary enrollment pressures in CS right now. We do need to try different things, and multiple introductory courses is a good idea. Let’s manage the enrollment with the best of our research results. Let’s avoid institutionalizing inequities."
"453","2015-07-01","2023-03-24","https://computinged.wordpress.com/2015/07/01/study-results-what-errors-do-beginners-make-learning-html-and-css/","I had the honor to serve on Tom Park’s dissertation committee and got to see this work unfold. It’s important to do. Computer scientists are happy to tell you that “HTML is not really programming,” and that’s true. But what computing education researchers need to realize is that HTML is a formal, computing-interpreted notation — probably the first one that most computing students ever face. Understanding what works and doesn’t there is important to understanding what’s hard about formal computing representations at all, versus what’s complicated because it’s programming. For example, over 50% of the knowledge-based errors that were observed in the study were never resolved. That’s the definition of a hard problem that’s worth understanding to improve education. It’s also important to consider — are those also learning difficulties that we see in programming? In the end, the number of errors under the three aforementioned categories broke down as follows: 70.9% of all errors were skill-based errors. 16.9% were rule-based errors. 12.1% were knowledge-based errors. As mentioned, most of the errors were resolved during the task completion process, but some were not, and they broke down like this: 4.3% of all skill-based errors were unresolved. 39.6% of rule-based errors were unresolved. 52.1% of knowledge-based errors were unresolved. via Study: What Errors Do Beginners Make Learning HTML and CSS?."
"454","2015-07-06","2023-03-24","https://computinged.wordpress.com/2015/07/06/even-an-ivy-league-idea-person-should-learn-how-to-code/","I like the recognition of the importance of learning to code in this piece, but not the sense of privilege around it. “Even” people who get into incredibly expensive schools and want to focus on “ideas” should learn to code. It’s not really beneath you to learn to code, the author is telling us. Even the elites should! Computing for all! It’s tempting but irresponsible to say students should teach themselves about venture capital firms, iOS, UI/UX and product design. When students can’t find the 25th hour in their days to do so, most will choose to focus on their (reinvent-the-wheel) classes. As ex-Snapchat COO Emily White says, “Our education system tends to train kids to be right rather than to learn.” This isn’t okay when we need more engineers in Silicon Valley. We must not neglect the merits of technical skills in the conception of the “idea person.” What the 60-year old entrepreneur and others of his generation—the people in control of the education we receive—don’t realize is this: For college students dreaming of becoming unicorns in Silicon Valley, being an “idea person” is not liberating at all. Being able to design and develop is liberating because that lets you make stuff. via Even An Ivy League ‘Idea Person’ Should Learn How To Code."
"455","2017-06-02","2023-03-24","https://computinged.wordpress.com/2017/06/02/we-need-a-greater-variety-of-teaching-methods-the-way-we-teach-math-is-holding-women-back/","As I often do, I was trying to convince my colleagues that there is no “Geek Gene.” One of them agreed that there is no Geek Gene. But still…some people can’t learn CS, he insisted. He pointed out that some people take a class “6-8 times to pass it.” That got me thinking about the evidence he offered. If someone takes the same course six times and can’t pass, does that mean that the student can’t learn CS? Or maybe it proves that we’re insane, if Einstein’s famous quote is right (“Insanity: doing the same thing over and over again and expecting different results.”) If the problem is our teaching and learning methods, simply repeating the exact same methods six times is not going to work. Think about in terms of teaching reading. We recognize that we need a variety of methods for teaching reading. Having a dyslexic person take the exact same mainstream class six times will simply not work. Why we are so resistant (as in the mathematics story linked below) to consider alternative teaching methods in CS? The irony of the widespread emphasis on speed in math classrooms, with damaging timed tests given to students from an early age, is that some of the world’s most successful mathematicians describe themselves as slow thinkers. In his autobiography, Laurent Schwartz, winner of the world’s highest award in mathematics, described feeling “stupid” in school because he was a slow thinker. “I was always deeply uncertain about my own intellectual capacity; I thought I was unintelligent,” he wrote. “And it is true that I was, and still am, rather slow. I need time to seize things because I always need to understand them fully.” When students struggle in speed-driven math classes, they often believe the problem lies within themselves, not realizing that fast-paced lecturing is a faulty teaching method. The students most likely to internalize the problem are women and students of color. This is one of the main reasons that these students choose not to go forward in mathematics and other STEM subjects, and likely why a study found that in 2011, 74% of the STEM workforce was male and 71% was white. Source: Jo Boaler on Women in STEM, Ivanka Trump and Betsy DeVos – Motto"
"456","2015-07-08","2023-03-24","https://computinged.wordpress.com/2015/07/08/do-blocks-equal-making-and-text-equal-coding/","Interesting perspective from a blogger in the Scratch community, liked below. I do frequently hear the pattern described in the post quoted below. “I’ve started by daughter/niece/local-school on Scratch, and now I want to know how to move them into something ‘real’ (e.g., text).” I typically point them to amazing things that can be done in Scratch (like Alex Ruthmann’s beautiful livecoding of music in Scratch). I recently got a chance to play with GP, a new programming language from John Maloney (of Scratch fame), where all blocks and texts are isomorphic. There’s a slider that lets you switch from one to the other. Even the debugger and class browser show up with tiles. Where does that play out in this debate? GP is the first blocks-based language I’ve used with the right primitives to do MediaComp, so I built one of my examples in it. Took me about three times as much time to write and four times as much space (in screen real estate) as in Python (even with John looking over my shoulder guiding me). Maybe that’s not a bad thing — maybe that encourages a different style of use. Next time I try something like that, I’m far more likely to think about building my own blocks and using more abstraction to save on dragging-and-fitting effort. I’ve been a part of the Scratch community for about 8 years now (yes, really). During this time, I’ve noticed a pattern that seems to apply to a lot of people: join Scratch => create projects => discover text-based programming => quit Scratch because of “real programming” Note the scare quotes around “real programming”. Generally, a “real” programming language is text-based (C, Python, etc.) and apparently qualifies as real because it’s used by well-known developers for something. Obviously I disagree with disqualifying Scratch as a real programming language. via Making vs Coding | byte."
"457","2015-07-10","2023-03-24","https://computinged.wordpress.com/2015/07/10/turns-out-even-teachers-think-girls-are-bad-at-math-probably-cs-too/","I predict that if we did this study with CS teachers, we’d find the same result. The belief that CS is for males and not for females is deeply ingrained in the perceptions of our field. Kahneman would tell us that it’s part of our System 1 thinking (see NYTimes Book Review). What do you think teachers would draw if asked to “draw a computer scientist“? I predict that the gender bias that favors males as computer scientists would be greater for post-secondary teachers than for secondary or elementary teachers. Most secondary school CS teachers that I’ve met are sensitive to issues of gender diversity in computing, and they actively encourage their female students. Most post-secondary CS teachers with whom I’ve worked are not sensitized to issues of women in computing and have not changed how they teach to improve gender diversity (see example here). In the study, teachers graded the math tests of 11-year-olds and, on average, the scores were lower for girls. But, when different teachers graded the same tests anonymously, the girls performed far better (out-performing the boys in many cases.) Dr. Edith Sand, one of the researchers, told American Friends of Tel Aviv University, that the issue wasn’t overt and obvious sexism, but “unconscious discouragement.” The study goes on to say that the gender biases held by elementary school teachers have an “asymmetric effect” on their students — the boys’ performance benefits and girls’ performance suffers based on the teacher’s biases. Boys do well because teachers believe they will, girls don’t because teachers believe they won’t. via Yikes! Turns Out Even Teachers Think Girls Are Bad At Math – MTV."
"458","2015-07-13","2023-03-24","https://computinged.wordpress.com/2015/07/13/growing-cs-ed-through-schools-of-ed-report-from-oldenburg/","I’ve written a couple times now about the workshop I attended at the University of Oldenburg the first week of June. (See the post where I talked about my two weeks in Germany.) For Blog@CACM, I wrote a post about teaching as collective practice and the workshop I took with Barbara Hofer (see post here). I wrote about learning about teacher beliefs and self-efficacy from Helenrose Fives here (see post). Before we left for the workshop, I got to spend time with Ira Diethelm at the University of Oldenburg and one of her students. Ira is one of at least 16 (that Ira could count) CS Education professors in Germany. Ira works with pre-service teachers, in-service teachers, and graduate students. Her graduate students build outreach efforts and curricula as part of their research, then roll them out and provide resources to teachers. It’s remarkable what Ira is doing, and I understand that the other German CS Ed professors do similar things. I came away with a new insight: If we want to bootstrap and sustain CS Education in the United States, we should fund several endowed chairs of CS Education at top Schools of Education. Eventually, we have to have pre-service computing education programs if we want to make CS education sustainable (see that post here). Creating these endowed chairs gives us the opportunity to create positions like Ira’s in the United States. Overall, the workshop was a terrific experience. The PhD student work was fascinating, and I enjoyed discussing their research with them. It was great to hear about German research perspectives that I hadn’t previously, like the Model of Educational Reconstruction that informs science education (see paper here). Barbara and Helenrose were only two of a several outstanding international education researchers who attended. As I mentioned to Pat Alexander (who has a lengthy Wikipedia page of her accomplishments), I enjoyed being able to wallow in educational psychology for a week, because I so rarely get to do that. I gave a talk on three of our projects related to the theme of developing teachers: on Lijun Ni’s work on teacher identity, on the Disciplinary Commons for Computing Education, and on our ebook for preparing CS teachers. (See Slideshare here.)  The response to my talk was fascinating. Some of the German mathematics education researchers are deeply opposed to computing education in schools. (I suspect that more than one of them completely skipped my talk because they are so opposed.) “Computing education keeps stealing from mathematics teachers, and learning mathematics is more important.” At my talk, Pat Alexander asked me the same question that Peter Elias asked Alan Perlis in 1961, “Won’t the computer eventually just understand us? Doesn’t the computer just become invisible and not need to be programmed?” I told the story about Alan Perlis’s talk and about Michael Mateas’s argument, “There will always be friction.” From the computing educators, I heard a lot of anger. The German computing education researchers feel that other fields squeeze CS out because the they are not willing to allow computing education to take up any time or budget in the curriculum. Probably the most interesting pushback was against computational thinking. The educational psychologists thought it was unbelievable that learning computing would in any way impact the way that people think or problem-solve in everyday life. “Didn’t we believe that once about Latin? and Geometry?” asked Gavin Brown. The psychologists at the workshop I attended saw a clear argument that we need to introduce computing in high school so that students can see if it’s for them, but not to teach general problem-solving skills. If we really want algorithmic thinking, they can design easier ways to achieve that goal than teaching programming. We can probably help students to learn about computing in such a way that it might influence problem-solving on the computer. That’s part of Jeanette Wing’s model of Computational Thinking (see her 2010 paper). It’s the “Computational Thinking in Daily Life” part that the psychologists weren’t buying. That learning about computation helps with computational X is quite reasonable. If you understand what IP addresses are, we can help you to understand DNS problems and to realize that it’s not really that big of a deal if Wikipedia stores your IP address (see story about Erika Poole’s research). There is evidence that learning one programming language will likely transfer to another one (see Michal Armoni’s paper on transfer from Scratch to a text-based language). Learning to program is unlikely to influence any problem-solving in everyday life."
"459","2015-07-17","2023-03-24","https://computinged.wordpress.com/2015/07/17/every-college-student-should-take-a-computer-science-course-from-chair-at-harvey-mudd-college/","Maria Klawe gets a lot of attention for promoting women in CS at Harvey Mudd College, but she’s the College President. Closer to the on-the-ground action is Ran Libeskind-Hadas who is the CS Department Chair there. In the post below, he lays out the argument for everyone taking CS in College. I’m encouraged by an increasing number of innovative introductory courses that provide students with these rich experiences. And, I’m very excited to see students voting for these courses with their feet. At my institution, Harvey Mudd College, we developed a set of introductory courses that are not only required for all Harvey Mudd students but are now immensely popular among non-majors at our four sister institutions in the Claremont Colleges consortium. At a college of 800 students, we are teaching introductory computer science to all of our first-year students, regardless of their ultimate major. And, we are attracting hundreds of students each from our sister colleges in Claremont. They are literature, economics, and sociology majors – among many others. And Harvey Mudd does not have a monopoly on innovative introductory courses. A number of other institutions including the University of Washington, Harvard, and others have pioneered their own successful courses in a similar spirit. via Every College Student Should Take a Computer Science Course | Ran Libeskind-Hadas."
"460","2015-07-20","2023-03-24","https://computinged.wordpress.com/2015/07/20/australia-labor-government-an-education-for-the-21st-century-means-teaching-coding-in-schools/","Australia may become the next country to teach computing in all schools, if a Labor Government gets elected. I hope that, if it happens, it’s done well. It’s expensive to get real CS education into every school. It’s cheap and easy to declare that any course that teaches how to use software is “CS.” Bill Shorten’s recent announcement that, if elected, a Labor Government would “ensure that computer coding is taught in every primary and secondary school in Australia” has brought attention to an increasing world trend. … There is merit in school students learning coding. We live in a digital world where computer programs underlie everything from business, marketing, aviation, science and medicine, to name several disciplines. During a recent presentation at a radio station, one of our hosts said that IT would have been better background for his career in radio than journalism. There is also a strong case to be made that Australia’s future prosperity will depend on delivering advanced services and digital technology, and that programming will be essential to this end. Computer programs and software are known to be a strong driver of productivity improvements in many fields. via An education for the 21st century means teaching coding in schools."
"461","2015-07-22","2023-03-24","https://computinged.wordpress.com/2015/07/22/why-ed-tech-is-not-transforming-how-teachers-teach-another-cost-of-too-little-computing-literacy/","I believe the result described in the article below, that a critical limitation of teacher’s ability to use technology is too little understanding of technology. In a sense, this is another example of the productivity costs of a lack of ubiquitous computing literacy (see my call for a study of the productivity costs). We spend a lot on technology in schools. If teachers learned more about computing, they could use it more effectively. In 2010, for example, researchers Peggy A. Ertmer of Purdue University, in West Lafayette, Ind., and Anne T. Ottenbreit-Leftwich of Indiana University, in Bloomington, took a comprehensive look at how teachers’ knowledge, confidence, and belief systems interact with school culture to shape the ways in which teachers integrate technology into their classrooms. One big issue: Many teachers lack an understanding of how educational technology works. But the greater challenge, the researchers wrote, is in expanding teachers’ knowledge of new instructional practices that will allow them to select and use the right technology, in the right way, with the right students, for the right purpose. via Why Ed Tech Is Not Transforming How Teachers Teach – Education Week."
"462","2015-07-24","2023-03-24","https://computinged.wordpress.com/2015/07/24/wysiati-cs-teachers-need-to-ask-what-am-i-not-seeing/","I’m currently reading Nobel laureate Daniel Kahneman’s book, “Thinking Fast, Thinking Slow” (see here for the NYTimes book review). It’s certainly one of the best books I’ve ever read on behavioral economics, and maybe just the best book I’ve ever read about psychology in general. One of the central ideas of the book is our tendency to believe “WYSIATI”—What You See Is All There Is. Kahneman’s research suggests that we have two mental systems: System 1 does immediate, intuitive responses to the world around us. System 2 does thoughtful, analytical responses. System 1 aims to generate confidence. It constructs a story about the world given what information that exists. And that confidence leads us astray. It keeps System 2 from asking, “What am I missing?” As Kahneman says in the interview linked below, “Well, the main point that I make is that confidence is a feeling, it is not a judgment.” It’s easy to believe that University CS education in the United States is in terrific shape. Our students get jobs — multiple job offers each. Our graduates and their employers seem to be happy. What’s so wrong with what’s going on? I see computation as a literacy. I wonder, “Why is our illiteracy rate so high? Why do so few people learn about computing? Why do so many flunk out, drop out, or find it so traumatic that they never want to have anything to do with computing again? Why are the computing literate primarily white or Asian, male, and financially well-off compared to most?” Many teachers (like the comment thread after this post) argue for the state of computing education based on what they see in their classes. We introduce tools or practices and determine whether they “work” or are “easy” based on little evidence, often just discussion with the top students (as Davide Fossati and I found). If we’re going to make computing education work for everyone, we have to ask, “What aren’t we seeing?” We’re going to feel confident about what we do see — that’s what System 1 does for us. How do we see the people who aren’t succeeding with our methods? How do we see the students who won’t even walk in the door because of how or what we teach? That’s why it’s important to use empirical evidence when making educational choices. What we see is not all there is. But, System 1 can sometimes lead us astray when it’s unchecked by System 2. For example, you write about a concept called “WYSIATI”—What You See Is All There Is. What does that mean, and how does it relate to System 1 and System 2? System 1 is a storyteller. It tells the best stories that it can from the information available, even when the information is sparse or unreliable. And that makes stories that are based on very different qualities of evidence equally compelling. Our measure of how “good” a story is—how confident we are in its accuracy—is not an evaluation of the reliability of the evidence and its quality, it’s a measure of the coherence of the story. People are designed to tell the best story possible. So WYSIATI means that we use the information we have as if it is the only information. We don’t spend much time saying, “Well, there is much we don’t know.” We make do with what we do know. And that concept is very central to the functioning of our mind. via A machine for jumping to conclusions."
"463","2015-07-27","2023-03-24","https://computinged.wordpress.com/2015/07/27/tech-jobs-rise-but-silicon-vision-a-stretch-the-world-beyond-just-computing/","The world is about more than computing. It’s easy for those of us who live and work in CS to see it as CS-centric. I work in a section of Atlanta that is bursting with high-tech startups. I found this article compelling — not because it threw cold water on the vision of Atlanta as a “Silicon Valley East,” but because it painted a picture of how much more diverse the economy in Atlanta really is. In reality, metro Atlanta’s relationship with the tech sector is, well, complicated. Georgia boasts about 280,000 tech jobs, according to Technology Association of Georgia president and chief executive officer Tino Mantella — the great majority of them in metro Atlanta. But information technology jobs only make up about 3.5 percent of the area’s labor market, down from a peak of 4.7 percent in the 1990s, federal Bureau of Labor data shows. And California, home to the real Silicon Valley, dominates venture capital investing — the lifeblood of tech startups — with 56 percent of spending compared to the 1 percent in Georgia, Mantella said. via Tech jobs rise, but ‘silicon’ vision a stretch | www.ajc.com."
"464","2015-07-29","2023-03-24","https://computinged.wordpress.com/2015/07/29/how-to-learn-computer-programming-efficiently-through-computer-games-michael-lee-and-gidget/","I was honored to serve on Michael Lee’s dissertation committee. Mike’s basic thesis is available at this link, or you can get the jumbo-expanded edition with an enormous appendix describing everything in his software plus his learning evaluation (described below) at this link. His thesis brings together several studies he’s done on Gidget, his game in which he teaches programming. I’ve written about his work before, like his terrific finding that including assessments improves engagement in his game (see blog post here) and about how Gidget offers us a new way to think about assessing learning (see blog post here). Michael had several fascinating results with Gidget. One of my favorites that I have not blogged on yet was that personifying the programming tool improves retention (see his ICER 2011 paper here). When Gidget sees a syntax error, she (I’m assigning gender here) doesn’t say, “Missing semicolon” or “Malformed expression.” Instead, she says “I don’t what this is, so I’ll just go on to the next step” and looks sad that she was unable to do what the programmer asked her to do. The personification of the programming tool dramatically improved the number of game levels completed. They kept going. In course terms, they were retained.  The dissertation has yet another Big Wow result. Mike developed an assessment of computing knowledge based on Allison Elliott Tew’s work on FCS1 (see here). He did a nice job validating it using Amazon’s Mechanical Turk. He then compares three different conditions for learning differences: Gidget and CodeAcademy are statistically equivalent for learning, and both blow away the constructionist option. A designed curriculum beats a discovery-based learning opportunity. That’s interesting but not too surprising. Here’s the wild part: The Gidget users spend 1/2 as much time. Same learning, half as much time. I would not have predicted this, that Mike’s game is actually more efficient for learning about CS than is a tutorial. I’ve argued that learning efficiency is super important especially for high school teachers (see post here). Mike is now an assistant professor at the New Jersey Institute of Technology (see his web page here). I wish him luck and look forward to what he does next!"
"465","2013-08-29","2023-03-24","https://computinged.wordpress.com/2013/08/29/trip-report-on-icer-2013-big-data-compare-and-contrast-and-middle-school-girls/","The papers for ICER 2013 are available in the ACM Digital Library now at http://dl.acm.org/citation.cfm?id=2493394. I think that they remain free for a month (so, until September 12), so grab them quick. ICER 2013 was a fabulous conference. I learned alot, and am already using some of the ideas I gained there in my research and in my teaching. I can’t possibly summarize all the papers, so here’s my unofficial list of what struck me. I was invited to be a discussant in the Doctoral Consortium, and that was an absolute thrill. The students were so bright and had so many interesting ideas. I’m eager to hear about many of the results. We also noted that we had participants from several major research universities this year (Stanford, MIT, Virginia Tech, University of Washington). For some, it was the first time that they’d ever sent someone to the ICER DC. Why? Amy Ko (U. Washington) said that it was because it’s been three years since CE21 funding started, and that’s enough time to have something for a doctoral student to want to show. Really shows the importance of having funding in an area. One of the big ideas for me at ICER this year was the value of big data — what can you do with lots of data? Neil Brown showed that the Computing At Schools website is growing enormously fast, and he told us that the BlueJ Blackbox data are now available to researchers. Elena Glassman talked about how to use and visualize student activity to support finding different paths to a solution. Colleen Lewis presented with two of her undergraduate collaborators from Berkeley on data mining the AP CS exam answers. My favorite example of the value of big data for CS Ed came from my favorite paper of the conference. Michael Lee and Amy Ko presented on their research on how adding assessments into a programming video game increased persistence in the game. The below graph appears in their paper, but in the talk, Michael annotated it with what was being taught in the levels that led to drop-offs in participation. (Thanks to Michael for providing it to me.) The control and assessment groups split on lists. Variables were another big drop-off, as were objects and functions. Here is empirical measurement of “how hard is that topic.” I’ve submitted my request to gain access to the Blackbox, because I’m starting to understand what questions we can ask with a bunch of anonymized data.  There were several papers that looked at student artifacts as a proxy for their understanding. I was concerned about that practice. As Scott Klemmer told us in his opening keynote, people program mostly today by grabbing stuff off the Web and copying it — sometimes, without understanding it. Can you really trust that students using some code means that they understand the idea behind that code? Raymond Lister led a really great one hour special session around the idea of “Geek genes,” whether CS really does generate a bi-modal distribution of grades, and whether the learning edge momentum theory describes our results. It was a great session because it played to ICER’s strengths, e.g., really intense discussion, and yet generated moments of enormous laughter. I came away thinking that there are no geek genes, we don’t have bimodal distributions, and the jury is still out on the learning edge momentum. Elizabeth Patitsas presented a nice paper comparing introducing algorithms serially (“Here’s algorithm A that solves that problem…and now here’s algorithm B…”) vs as compare-and-contrast (“Here are two algorithms that solve that problem…”). Compare-and-contrast is better, and better when learning algorithms than even the existing education literature suggests. I mentioned this result in class just yesterday. I’m teaching our TA preparation class, and a student who teaches algorithms asked me, “Am I responsible for my students’ learning?” I showed the students Elizabeth’s result then asked, “If you know that teaching one way leads to more learning than another, aren’t you morally or ethically required to teach using the better method?” Michelle Friend and Rob Cutler described a group of middle school girls figuring out a complicated algorithm problem (involving finding the maximum height that an egg drop protection mechanism will work). They showed that, without scaffolding, the girls were able to come up with some fairly sophisticated algorithms and good analyses of the speed of their algorithms. We’re getting somewhere with our understanding of CS learning at the schools age. And I totally admit that my impression of this ICER is influenced by my paper on Media Computation winning the Chair’s Paper Award. Michael Lee won the popular vote “John Henry Award.” (I voted for him, too.) I’m skipping a lot: Mike Hewner presenting on his thesis, an interesting replication of the McCracken study, new ideas about PCK and threshold concepts. It was a great event, and I could write a half dozen posts about the ideas from the conference. Next year’s ICER is in Glasgow, 11-12 August. I am very much looking forward to it, and am working on my papers to submit already."
"466","2015-07-31","2023-03-24","https://computinged.wordpress.com/2015/07/31/why-should-non-cs-majors-learn-functional-programming/","In my research, I’m most interested in the non-CS majors, the ones who learn computing because it makes them more productive (see where I make that argument) or because they want to make themselves more marketable (see Eric Robert’s post) or because they will live and work (as I predict) in the fat line between programmers and users (see post here). A recent article in the CACM suggests that all non-CS majors need to be learn (let’s not use the “be exposed” euphemism — there’s no sense in “exposing” someone to something unless you’d like them to learn from it) “functional programming languages [and] the declarative programming paradigm.” I’m willing to consider that, but why? The quote below says, “they allow programmers to do more with less and enable compilation to more efficient code across a wide range of runtime targets.” I’ve been studying non-CS majors who program for a lot of years, and I’ve never heard any of them say even once that they want to “enable compilation to more efficient code across a wide range of runtime targets.” So let’s consider the “more with less.” Do we buy that what what non-CS majors is to be able to get more expressive power with fewer keystrokes? I don’t see the argument for that. My suspicion is that non-CS major programmers value understandability and fewer errors, over fewer keystrokes and more power. I like functional programming and would be interested in a good argument for it for non-CS majors. I don’t see it here. Second, would-be programmers (CS majors or non-majors) should be exposed as early as possible to functional programming languages to gain experience in the declarative programming paradigm. The value of functional/declarative language abstractions is clear: they allow programmers to do more with less and enable compilation to more efficient code across a wide range of runtime targets. We have seen such abstractions gain prominence in DSLs, as well as in imperative languages such as C#, Java, and Scala, not to mention modern functional languages such as F# and Haskell. via Teach Foundational Language Principles | May 2015 | Communications of the ACM."
"467","2015-08-31","2023-03-24","https://computinged.wordpress.com/2015/08/31/when-women-made-better-programmers/","Nathan Ensmenger has not only written a fascinating book about how computing became so male (see book link here), he also maintains a blog that updates the story. The quote and picture below is from a recent post about a recently discovered source that describes women in computing from the 1960’s, back when women were considered better programmers than men. The rhetoric about women being more “sensitive” reminds me of Karen Ashcraft’s plenary talk at NCWIT which I highly recommend (see link here). The story about the Miss USA winner who became a computer programmer is particularly striking. The Bodony story is not an isolated incident. The book is full of stories from women, and in fact includes an entire chapter devoted to women in computing (“The Equal Sex”). Seligsohn goes so far as to suggest that female programmers are not only equal in ability to men, but superior: Given a complex customer problem, a female analyst/programmer will often handle the problem better than would her male colleagues with equivalent experience and ability. Not because businessmen are more lenient or show favoritism toward the female of the species, but because the female is often more sensitive to the nuances of a problem and to the complex interpersonal relations that may be part of the problem. In a very real sense, every computer problem with a customer is also a customer relations problem, and this is where feminine tact, insight, and intuition, combining with solid programming and analytical ability, can really pay off for the girl programmer.  via The Computer Boys Take Over | Computers, Programmers, and the Politics of Technical Expertise."
"468","2017-07-24","2023-03-24","https://computinged.wordpress.com/2017/07/24/why-we-wont-succeed-in-defining-top-down-cs-curriculum-and-frameworks-larry-cuban-and-coding-as-vocationalism/","I just wrote a blog@CACM post (see link) below on a series of essays that Stanford educational historian Larry Cuban has written on “Coding as the New Vocationalism.” His points are well-taken. Schools have often been swayed by the needs of industry, and he sees the current “CS for All” effort as mostly being industry-driven. The questions that he keeps returning to in his posts are, “What are schools for? How does real reform happen?” It’s the latter set of insights that I think are missing from our current “CS for All” efforts. I quote Cuban at the bottom of this post with his summary for how reforms succeed. Top-down edicts on what ought to be taught rarely work. Remember the U. Chicago’s Outlier group research on the landscape of CS education from 2014? Most professional development is requested by the school or district, but in CS Ed, professional development mostly sent in by NSF, Google, and Universities (and today, likely, Code.org). CS education will have to change to achieve the goal of being driven by district and teacher needs. The most successful reform efforts are those that achieve the top-down goals in a process of mutual adaptation with teachers, an idea developed at Northwestern by a team of learning scientists led by Brian Reiser. Whatever our curriculum, frameworks, and standards are today, they will change before we achieve CS for All. Standards change in response to what teachers know, what we can actually teach them (at scale), and what they will actually teach (a process that has already happened in Georgia). We certainly can’t get the curriculum right yet — we’re decades away from reaching 100% of schools in any US state, with many, many teachers to prepare and to work with in a process of mutual adaptation. I’m not opposed to defining curriculum, frameworks, and standards. I’m opposed to thinking that we’re going to get it right — not today, when we have such a long road ahead of us. The lessons that have to be learned time and again from earlier generations of school reformers are straightforward. Build teacher capabilities in content and skills since both determine to what degree, if any, a policy gets past the classroom door. With or without enhanced capabilities and expertise, teachers will adapt policies aimed at altering how and what they teach to the contours of the classrooms in which they teach. If policymakers hate teacher fingerprints over innovations, if they seek fidelity in putting desired reforms into practice, they wish for the impossible. Ignoring both of the above lessons ends up with incomplete implementation of desired policies and sorely disappointed school reformers. Source: Coding in Schools as New Vocationalism: Larry Cuban on What Schools are For | blog@CACM | Communications of the ACM"
"469","2013-02-28","2023-03-24","https://computinged.wordpress.com/2013/02/28/georgia-proposes-reducing-cs-in-high-school-curriculum/","Georgia’s Department of Education is revising their curricula for computer science. You can see the existing pathway definition for “Computing” (here), and the definition of the existing first course “Computing in the Modern World” (CiMW). CiMW is based on the CSTA Standards, and includes computing topics like data representation, Moore’s Law, algorithmic thinking, and problem solving. The proposed new first course is linked here, as part of the now-called “Information Technology” Pathway. It’s called “Introduction to Digital Technology.” It does include computational thinking, but removes most of the computer science pieces. Why are they doing this? We are not sure — Universities have not been involved in the revision, only high school teachers and industry folks. One theory is that the Department of Education wants to better align high school courses with jobs, so that high school students can graduate and go into the IT industry (perhaps same goal in NYC?). I suspect that another reason for the change is the challenge of teaching teachers about CiMW topics. Teachers can’t teach everything in CiMW because (I suspect) many of them teaching the course don’t all know the content yet. Some of the high school teachers involved in the redesign told us that they were asked to use fewer computing buzzwords, because the teachers don’t know all those terms. The teachers in this pathway are Business teachers, often with little STEM background. Professional development budgets in Georgia have been slashed since 2007 when the Computing Pathways was launched. It’s disappointing (if I’m right) that the decision is to reduce the scope of the curriculum, instead of helping the teachers to learn. The new course is open for public comment (here). If you are interested, please consider leaving your comments on the changes in the questionnaire. Overall, this feels like the last time that Georgia un-decided to let AP CS count towards high school graduation. Two steps forward, one step back. “Constant vigilance!”"
"470","2013-02-26","2023-03-24","https://computinged.wordpress.com/2013/02/26/nyc-to-teach-computer-science-and-software-engineering-in-20-schools/","This is stunning: New York City Schools are going to teach computer science and software engineering in grades 6-12 in 20 schools starting this Fall. By 2016, they plan to more than triple the number of children enrolled in the “Software Engineering Pilot program.” I’m really curious about how they’re going to ramp up professional development to this scale. It’s a great test for the future CS10K plans by NSF. It’s not clear to me the goal — that these children will be ready to enter the IT workforce with their high school diplomas, or that these children will have the skills to succeed in later certificate and degree programs? “We know it’s vital to prepare our children to succeed in an increasingly technology-centered economy and the Software Engineering Pilot will help us do just that,” said Mayor Bloomberg. “This groundbreaking program will ensure that more students receive computer science and software engineering instruction so that they can compete for the tech jobs that are increasingly becoming a part of our city’s economy. We’re creating the home-grown workforce our city needs and teaching our students skills that will open up new doors for them and their future.” via NYC.gov."
"471","2013-02-26","2023-03-24","https://computinged.wordpress.com/2013/02/26/the-unsustainable-moociversity/","I have a post-it on my monitor with a quote from Alan Kay: “You can fix a clock, but you have to negotiate with a system.” I was reminded of that in reading the below essay. I have been worried about the sustainability of the (lack of a) revenue model for MOOCs, but this essay goes further. If we destroy the universities, who makes the next generation of MOOCs? There are ramifications of the changes that are being proposed for using MOOCs as a replacement for our current higher education system. Failing to account for, and pay for, the continuation and reproduction of a necessary system isn’t economic rationality; it isn’t a hard-nosed commitment to making the tough choices; it’s the exact opposite. It’s living as if there is no future, no need to reproduce the systems we have now for the future generations who will eventually need them. The fantasy that we could MOOCify education this year to save money on professor labor next year, and gain a few black lines in the budget, ignores the obvious need for a higher educational system that will be able to update, replenish, and sustain the glorious MOOCiversity when that time inevitably comes. Who is supposed to develop all the new and updated MOOCs we’ll need in two, five, ten, twenty years, in response to events and discoveries and technologies we cannot yet imagine? Who is going to moderate the discussion forums, grade the tests, answer questions from the students? In what capacity and under what contract terms will these MOOC-updaters and MOOC-runners be employed? By whom? Where will they have received their training, and how will that training have been paid for? What is the business model for the MOOC — not this quarter, but this decade, this century? via Some Preliminary Theses on MOOCs « Gerry Canavan."
"472","2013-02-27","2023-03-24","https://computinged.wordpress.com/2013/02/27/using-education-theory-to-frame-cer-hcil-invited-lecture/","I gave a talk on 19 February at HCIL at U. Maryland-College Park. I was pleased with how it turned out. One of the things I learned when I gave my Indiana talks was that I ought to frame my talk with how I define learning and what theoretical frameworks I’m drawing on (e.g., learning sciences, constructionism, situated learning, community of practice, and authenticity). This was my first talk where I tried to do that, and I liked how I could keep referencing back to the theory as I went along. The talk gave me a chance to connect my work in computing education research (CER) to a broader education theory. HCIL 30th Anniversary Distinguished Lecturer Series: Mark Guzdial, Georgia Tech – YouTube."
"473","2013-01-28","2023-03-24","https://computinged.wordpress.com/2013/01/28/visiting-indiana-university-this-week/","I’m visiting Indiana University this week, and giving two talks. If any readers are in the Bloomington area, I hope you can stop by! 9:30 am Jan 29 Colloquium Education 2140 Title: Improving Success in Learning Computer Science Using Lessons from Learning Sciences Abstract: Learning computer science is difficult, with multiple international studies demonstrating little progress. We still understand too little about the cognitive difficulties of learning programming, but we do know that we can improve success by drawing on lessons from across learning sciences. In this talk, I will describe three examples, where we improve success in learning computer science through application of lessons and models from the learning sciences. We increased the retention of non-CS majors in a required CS course by increasing the relevance of the course (informed by Eccles’ model of achievement-related choices), though we are limited in how far we can go because legitimate peripheral participation is less relevant. We improved opportunities to learn in a collaborative forum by drawing on lessons from anchored instruction, but were eventually defeated by student perceptions of culture. We have improved learning and transfer of knowledge about programming by using subgoal labeling to promote self-explanations. 9 am Thursday Jan 31 SoIC Colloquium Series IMU State Room East Title: Three Lessons in Teaching Computing to Everyone Abstract: My colleagues and I have been studying how to teach computer science, to CS majors, to non-CS undergraduates, and to adult professionals. In this talk, I’ll talk about some of what we’ve learned, organized around three lessons. Lesson #1: We typically teach computer science too abstractly, and by teaching it in a context (e.g., media, robots, Nintendo GameBoys, Photoshop), we can dramatically improve success (retention and learning) for both traditional and non-traditional CS learners. Lesson #2: Collaboration can create opportunities for learning, but classroom culture (e.g., competition) trumps technology (Wikis). Lesson #3: Our greatest challenge in computer science education is improving teaching, and that will require changes in high schools, in public policy, and in universities."
"474","2016-07-20","2023-03-24","https://computinged.wordpress.com/2016/07/20/does-pre-service-cs-education-reduce-the-costs-of-in-service-cs-education-and-make-it-more-effective/","What we’re trying to achieve in CS education in the United States is rarely done (successfully) and hasn’t been done in several decades (see previous post on this). We’re changing the education canon, what everyone is taught in schools. It’s a huge effort, involving standards and frameworks, convincing principals and legislators, and developing teachers and curricula. Right now, we’re mostly developing the teachers we need with in-service education — which is expensive. We’re shipping around trainers, people providing professional development to existing teachers. We’re paying travel costs (sometimes) to teachers, and stipends (sometimes) for their time. I have argued previously that we have to move to a pre-service model, where new teachers are prepared to be CS teachers from undergraduate education. It’s the only way to have a sustainable flow of CS teachers into the education system. NYC is working on developing per-service programs now, because it’s a necessity for their CS education mandate. No reform takes root in US schools without being in schools of education. At a meeting of the Georgia CS Task Force, where talking about the high costs of in-service CS teacher education, we started wondering if the costs might be cheaper in the long-run by growing pre-service education, rather than scaling in-service. Of course, we have to build a critical mass cohort of in-service teachers (e.g., to provide mentors for student teachers) — in many states, we’ve already done that. Creating pre-service programs at state universities creates opportunities for in-service education that are cheaper and maybe more effective than what we’re creating today. Pre-service programs would require CS Education faculty (and likely, graduate students) at state universities. These people are then resources. Pre-service programs require more up-front costs (e.g., paying for faculty, setting up programs). But those costs likely amortize over the lifetime of the faculty and the program. Each individual professional development session offered by local faculty (either pre-service or in-service) is cheaper than each in-service session created by non-local presenters/developers. Over many years, it is likely cheaper to pay the higher up-front costs for pre-service than the long, expensive burn of in-service. I don’t know how to figure out the cost trade-off, but it might be worthwhile for providers like Code.org and PLTW to play out the scenarios."
"475","2016-06-10","2023-03-24","https://computinged.wordpress.com/2016/06/10/final-review-period-for-the-k-12-cs-framework-for-k-12-computer-science-education-june-8-29/","The final review period is June 8-29. Do engage with the review. Whatever comes out of this is likely to influence the standards for K-12 CS education in the United States for the next five to ten years. I’m not so happy with the framework, but I recognize that it’s a collaborative process where no one is going to be completely happy (see previous post about the framework). A source of difficulty for building the framework is that we are so early in CS Education in the United States. We are optimizing for the current state, at time when that state is rapidly changing. Here’s an instance of the general problem. Last time I was at a framework meeting as an advisor, I pushed hard to include the concept of the word bit as a learning objective in the framework. Even as quantum computing is developed, the Claude Shannon notion of a bit as a fundamental unit of information is still relevant and useful — it’s one of the foundational ideas of computing. The suggestion was vehemently rejected by the writers because current teachers fear binary. I tried to argue that we can talk about bits (e.g., what is information, how we can store/represent bits, and how we can encode information in bits) without talking about binary, but the writers argued that teachers will perceive bits as being about binary and reject it. I pointed out that the word bit did appear in the document, just not explained. It’s hard to talk about computing without talking about “bits.” In response, every instance of the word bit was removed from the framework document. We have so few teachers today in schools (e.g., no state has high school CS teachers in more than even 30% of their high schools, we likely need ten times the number of current teachers in order to provide CS education to everyone in the United States), and we’re still just figuring out how to develop new CS teachers. Should we really make decisions about the next 5-10 years based on what current teachers dislike? Especially when too few of those teachers have had significant teacher professional development? Maybe we do — we might need to keep those teachers engaged in order to grow the programs to create more teachers. I argued in the past that it’s about consensus not vision. It still is. The question is how much unpleasantness we can swallow and still agree on the framework. The goals of the K-12 CS framework review process are to provide transparency into the development of the K-12 CS framework and include feedback from a diverse range of voices and stakeholders. If you haven’t already, please sign up for framework updates.Individuals and institutions are invited to be reviewers of the K-12 CS framework. Institutions, such as state/district departments of education and organizations (industry, companies, non-profits), are responsible for selecting an individual or a group to represent the institution. Source: Review – A Framework for K-12 Computer Science Education"
"476","2013-08-01","2023-03-24","https://computinged.wordpress.com/2013/08/01/lausd-has-a-543m-shortfall-but-is-spending-500m-on-ipads/","I believe that technology can improve education, but I’m not sure that we know how to use it well. I wouldn’t be comfortable making this kind of bet, that the $500M on iPads is a better investment than paying off the $534M shortfall — but I guess that’s why I’m not in charge of half billion dollar bets. Why do people have such (unproven) faith in technology? Is this the same as the arguments for the OLPC in the developing world? Los Angeles, again, is a good example; the same school district that is going to spend a half-billion dollars on iPads has been laying off teachers. To justify those layoffs, the school districts have been citing a $543 million district budget shortfall, yet somehow, those same officials apparently don’t cite that same budget shortfall as a reason to avoid spending $500 million on iPads. Why? Because education technology triumphalists typically portray iPads as long-term cost cutters for school districts. As the New York Times sums up that argument, these triumphalists believe iPads and attendant iBooks will “save money in the long run by reducing printing and textbook costs.” The enticing idea is that schools may have to invest huge money upfront, but they will supposedly see huge savings in out years. The trouble is that there is little evidence to suggest that’s true, and plenty of evidence to suggest the opposite is the case. As respected education consultant Lee Wilson notes in a report breaking down school expenses, “It will cost a school 552% more to implement iPad textbooks than it does to deploy books.” He notes that while “Apple’s messaging is the idea that at $14.99 an iText is significantly less expensive than a $60 textbook,” the fact remains that “when a school buys a $60 textbook today they use it for an average of 5-7 years (while) an Apple iText it costs them $14.99 per student – per year.” As Lee notes, that translates into iBooks that are 34 percent more expensive than their paper counterparts — and that’s on top of the higher-than-the-retail-store price school districts are paying for iPads. via No, iPads do not make teachers obsolete! – Salon.com."
"477","2017-10-02","2023-03-24","https://computinged.wordpress.com/2017/10/02/preparing-tomorrows-faculty-to-address-challenges-in-teaching-computer-science/","I’ve blogged here when we have opened registration for the New Computing Faculty workshops (e.g., here), but I haven’t really explained why we’re doing them. We took a lot of grief on Twitter for the workshops in the Spring, and 120 characters just isn’t enough to explain the whole story. We (Leo Porter, Cynthia Lee, Beth Simon, and me) wrote an article that appeared in the May CACM explaining the rationale. If you don’t have ACM Digital Library access, you can grab the paper from my Guzdial Papers page here in the blog. The new challenges compound existing teaching-related challenges for the field. We still need to broaden participation in our field, with the lowest percentage of women majors in all of STEM. The economic rewards of a computing career make it even more important to bridge the digital divide. If there are more students than faculty can teach effectively, they may be inclined to lean on a pessimistic belief that success is dependent on “brilliance” and innate ability where only a subset of students can succeed. If CS faculty feel there is little they can do to change students’ outcomes in their individual classrooms, it will be true. Research shows that more CS faculty hold this mistaken and unproductive view of students than faculty in other STEM disciplines. Source: Preparing Tomorrow’s Faculty to Address Challenges in Teaching Computer Science | May 2017 | Communications of the ACM"
"478","2017-06-16","2023-03-24","https://computinged.wordpress.com/2017/06/16/new-computing-faculty-workshops-in-summer-2017-cra/","Beth, Cynthia, Leo, and I are running our workshop for new CS faculty again this summer. Registration is open. Please do pass on word! The third New Computing Faculty Workshop will be held August 6-8, 2017 in San Diego. The goal of the workshop is to help computing faculty at research intensive universities to be better and more efficient teachers. By learning a little about teaching, we will help new faculty (a) make their teaching more efficient and effective (e.g., students learn more with less input time from faculty) and (b) make their teaching more enjoyable. The workshops were described in Communications of the ACM in the May 2017 issue (see article here). The workshop will be run by Beth Simon (UCSD), Cynthia Bailey Lee (Stanford), Leo Porter (UCSD), and Mark Guzdial (Georgia Tech). Source: New Computing Faculty Workshops in Summer 2017 – CRA"
"479","2017-11-24","2023-03-24","https://computinged.wordpress.com/2017/11/24/universities-arent-preparing-enough-computer-science-teachers-and-we-have-no-path-to-get-there/","Not really a surprising claim, but I still think that we’re not talking enough about this. No K-12 subject is taught nationwide without producing teachers from universities. We simply cannot create sustainable K-12 CS education without universities producing CS teachers (called “pre-service teacher professional development”). Currently, we produce new CS teachers by recruiting existing teachers from other subjects (called “in-service teacher professional development”). None of our models for growing CS nationwide currently have a plan to replace in-service with pre-service (as described in this blog post). Looking for answers, we examined the state-by-state data on the number of graduates prepared to teach various subjects. We found that in 2016, only 75 teachers graduated from universities equipped to teach computer science. Compare that to the number of graduating teachers prepared in mathematics (12,528) and the sciences (11,917 across general science, biology, chemistry, physics, and earth science). Source: Universities aren’t preparing enough computer science teachers"
"480","2017-12-15","2023-03-24","https://computinged.wordpress.com/2017/12/15/saying-it-again-require-cs-at-university-in-order-to-get-cs-into-k-12/","I wrote a blog post in Blog@CACM in 2011: If You Want High School CS, Require Undergraduate CS. Everything we’ve seen since then makes me more convinced this is a viable path to providing high-quality CS education for every student. There is a growing body of evidence that every student at University will need computing. The recent report from Burning Glass and Oracle Academy shows how much in demand CS skills are, far beyond just those who will be professional software developers. Teaching everyone about computing would help in addressing Cathy O’Neill’s calls for more people to be investigating the algorithms controlling our lives. The argument for why University involvement is necessary for K12 CS Ed is based on an observation made recently by Code.org: We are not producing enough CS teachers in University. If everyone took CS at University, that would also reach pre-service teachers. That would make it easier for those teachers to teach CS in the future. Requiring CS at University may help with the bigger cultural and perception problem. In England, we see that schools aren’t offering CS even if it’s part of the required curriculum, and students (especially females) aren’t taking it (see the Royal Society report from last month). The problem is that we’re trying to shoehorn CS into a culture that isn’t asking for it, or rather, the students (and schools) don’t perceive a need for CS. This is a form of the same problem that came up when we were talking about getting more formal methods into software development practice. All professionals should understand the role of computing in our society and how to use computing as a literacy: To express ideas, to share ideas, and to use in developing ideas. Schools follow society. Society is rarely (if ever) changed by schooling. If you want a computationally literate society, convince the adults. If most professionals use computing, the same professionals that students want to be like, then there is a social reason to learn computing. Social demand to prepare K-12 students in that literacy makes it more likely for that literacy to succeed in K-12 education. Trying to teach all students something that society doesn’t value for everyone is counter to situated learning theory. Students (even K-12 students) are engaged in legitimate peripheral participation — their “job” is to figure out what is expected of them in society. If they don’t see computational literacy broadly in society, students don’t get the message that it’s important for everyone to learn. When I make this suggestion to University faculty, I often hear the argument, “Anything you require of students, they will hate.” Then they tell me an anecdote of some student who hated a requirement, or of some personal experience of a class they hated. I know of no empirical evidence that says that this is generally true. We do have empirical evidence that says it’s false. Mike Hewner’s work found that US students take required classes in order to discover what they like, and they make curricular choices based on what they like. We are already seeing students from all over campus flooding into our classes (see the Generation CS report and the National Academies report). We are already learning how to manage the load. It’s already happening in some Universities that most or all students at University are taking CS. Why not require it so that we get the Education students who we may not be seeing yet in CS classes? Instead of using Universities to make CS education work, we are pouring money into CS Ed via in-service professional development — a tenfold increase in England, and $1.5B in the next five years in the US. In general, more money in education alone doesn’t change things. We have to think about systems, policies, and our educational ecosystem. Universities are part of that educational ecosystem. Universities play a role in K-12 education in all other subjects. We have to involve them in order to create sustainable K-12 Computer Science education."
"481","2016-09-19","2023-03-24","https://computinged.wordpress.com/2016/09/19/guzdial-arguing-for-cs-for-all-in-universities/","A colleague recently approached me and said, “It would be useful if Universities got involved in this CS for All effort. All Universities should offer courses aimed at everyone on campus. There should be a systematic effort to get everyone to take those classes.” I agree, and have been making this argument for several years now. I spent a few minutes gathering the papers, blog posts, and book where I’ve made that argument over the last decade and a bit. In 2002, Elliot Soloway and I argued in CACM that we needed a new way to engage students in intro programming: Teaching the Nintendo Generation to Program. In 2003, I published the first paper on Media Computation: A media computation course for non-majors. In 2004, Andrea Forte led the team studying the Media Computation class at GT:Computers for communication, not calculation: Media as a motivation and context for learning and A CS1 course designed to address interests of women. In 2005, Andrea Forte and I presented empirical evidence about the courses we’d designed for specific audiences: Motivation and nonmajors in computer science: identifying discrete audiences for introductory courses. I published a paper in CACM about how the courses came to be at Georgia Tech: Teaching computing to everyone. In 2008, I offered the historical argument for teaching everyone to program: Paving the Way for Computational Thinking. We’ve published several papers about our design process: Imagineering inauthentic legitimate peripheral participation: an instructional design approach for motivating computing education and Design process for a non-majors computing course. My 2013 ICER paper was a review of a decade’s worth of research on Media Computation: Exploring hypotheses about media computation My keynote at VL/HCC 2015 was on how computing for all is a requirement for modern society: Requirements for a computing-literate society My 2015 book is, to a great extent: an exploration of how to achieve CS for All: Learner-Centered Design of Computing Education: Research on Computing for Everyone. In blog posts, it’s been a frequent topic of conversation: I don’t know how to convince University CS departments to do just about anything, but here are my contributions to the dialogs that I hope are happening at Colleges and Universities worldwide about how to prepare students to engage in computational literacy."
"482","2015-11-30","2023-03-24","https://computinged.wordpress.com/2015/11/30/require-cs-at-universities-before-k-12-computational-community-for-everyone/","The argument made in Wired is an interesting one, and I partially buy it. Are high school and elementary schools the right places to teach programming to everyone? Does everyone at that level need to learn to program? What are we giving up by teaching coding? Here’s one possible scenario, a negative one but a likely one: We push CS into K-12 schools, but we can’t get everywhere. The rich schools are getting it first, so we run out of money so that we get to all rich schools and no poor schools. Computing education is now making larger the difference between the rich and the poor. So is it wrong to teach a person to code? No. I don’t deny that coding is a useful skill to have in a modern ubiquitous computing society. It can help people personalize and understand the devices and services they use on a daily basis. It’s also good news that methods for teaching kids how to code are improving and becoming more effective, or that kids can ostensibly learn on their own when left to their own devices. The problem is elevating coding to the level of a required or necessary ability. I believe that is a recipe for further technologically induced stratification. Before jumping on the everybody-must-code bandwagon, we have to look at the larger, societal effects — or else risk running headlong into an even wider inequality gap. For instance, the burden of adding coding to curricula ignores the fact that the English literacy rate in America is still abysmal: 45 million U.S. adults are “functionally illiterate” and “read below a 5th grade level,” according to data gathered by the Literacy Project Foundation. Almost half of all Americans read “so poorly that they are unable to perform simple tasks such as reading prescription drug labels.” The reading proficiency of Americans is much lower than most other developed countries, and it’s declining. Source: Pushing People to Code Will Widen the Gap Between Rich and Poor | WIRED Computational literacy is important, and school age is where to develop it. Programming can be a useful medium for learning the rest of STEM, so learning programming early can support later learning. Eventually. That is the desired end-state. We should focus on universal computing education in higher-ed before putting CS into K-12 classrooms: The problem is that we’re nowhere near that goal now. Less than 10% of NYC schools offer any kind of computer science, and less than 10% of US high schools offer AP CS. I argue that we should require computer science in colleges and universities in the US first, and then in K-12 classrooms, so that the teacher come out of undergraduate already knowing how to program and use it in their classes. I worry that if we can’t make required computer science happen in higher ed, the costs for getting it into all of K-12 are too large — so only the rich will get it. I worry also about the kinds of arguments we make. If we can’t make universal computational literacy happen in higher ed, what right do we have to force it on all the high schools and elementary schools? “This isn’t good for us, but it’s good for you”? The biggest challenge in growing computing education in K-12 is finding enough teachers. Programs like TEALS are stop-gap measures. We need to recruit teachers to meet the needs in NYC. Most professional development programs are under-subscribed — there are lots of empty seats. How do we convince teachers to go take extra classes in computing, especially if they’re already an established teacher in some other discipline? If we taught everyone computing in undergraduate, we’d teach all the pre-service teachers. We wouldn’t have to do extra in-service professional development. (Pre-service education is much less expensive to implement than in-service. In-service teachers get paid to attend workshops. Pre-service is funded by tuition.) We absolutely should be doing research on how to put computing into K-12 schools. I am concerned about the costs of large scale implementation before we know what we’re doing — both in terms of making it work, and in what happens when it doesn’t. Literacy starts with community: Situated learning is a theory which explains why people learn. Students learn to join a community of practice. They want to be like people that they admire, to adopt their values and practices. Think about computing education from a situated learning perspective. Let’s imagine that reading has just been invented. It’s a powerful literacy, and it would be great to teach it to young kids so that they can use it for their whole lives and all their years of schooling. But if we try to teach it to them before many adults are reading and writing, it comes off as inauthentic. You can imagine a child thinking, “Why should I learn to read? The only people who read are monks and professors. I don’t want to be like that.” If few people read, then few people write. There’s not even much for the children to read. I suspect that textual literacy was first learned by adults before it became a school subject. Adults learned to read and write. They wrote books and newspapers, and used reading in their daily lives. Eventually, it became obvious that children should be taught to read. Today, children don’t see a world of computational literacy. Children don’t see many adults writing bits of code to do something useful or something beautiful or something enlightening. You can imagine a child thinking, “Why should I learn to program? The only people who program are geeky software developers and professors. I don’t want to be like that. And even if I did want to be like them, the geeky software developers don’t use Scratch or Blockly or App Inventor.” Students today are not immersed in a world of code to explore and learn from. Most programs that are available to study are applications. Studying existing programs today is like learning to read only with legal documents or the Gutenberg Bible. Where are the McGuffy Readers of code, or the Dr Seuss of imaginative programs? Those would be expected produces from a computationally literate society. A generation of college-educated programming professionals would help to create that society. If you want students to gain literacy, place them in a community that is literate. That’s what Seymour Papert was talking about when he described Logo as a Mathland. We need a community of adults who program if we want children to grow up seeing programming as something natural, useful, and desirable. The importance of getting it right: I was recently at a meeting for establishing a Framework for K-12 Computer Science Education, and Michael Lach spoke (see a description of him here). He warned curriculum writers and state/district leaders to go slow, to get it right. He pointed out that if we get it wrong, administrators and principals will decide that “Computing can’t be taught to everyone. It really is just for the geeky white boys.” And we’ll lose decades towards making computing education available to everyone. (Lach’s talk was deep and insightful — I’ll say more about it in a future blog post.) We have to get it right, and it’s better to go slow than to create computing education just for the rich."
"483","2013-08-07","2023-03-24","https://computinged.wordpress.com/2013/08/07/whats-it-like-to-be-an-it-professional-volunteering-with-teals/","I wrote a blog post recently, where I suggested that we in computing need to be careful that TEALS doesn’t end up diminishing demand for high school CS teachers. Kevin Wang, who runs TEALS, contacted me after that post and we had a useful phone conversation. Kevin sees TEALS as primarily a professional development activity. TEALS provides IT professionals to teach computer science courses and to be a teacher-asssistant in these courses. TEALS goes into a school only if the school signs a contract with TEALS that (a) there is a teacher assigned to teaching computer science in that school, who will undertake professional development during the time that the course is being taught and (b) that teacher will take over the course after the engagement with TEALS ends. The professional development is really just the student sitting in on the class with the students — no pedagogical development, no teaching methods, no community with other teachers. For most schools, it’s a many-volunteer to one-school ratio — a couple of teachers, and some teaching assistants. TEALS is now experimenting with volunteers who provide the teaching via video at distance. They don’t have a lot of data yet. TEALS doesn’t know yet how well the teachers learn, sitting in on the class alongside the students. They don’t know how yet how well the teachers like doing professional development like this — I wonder if teachers find it demeaning to their professionalism, to sit taking the class alongside the students, rather than in groups of their peers. TEALS doesn’t know yet much about how well the schools succeed teaching computer science after the professionals leave. They don’t know if students are learning overall (they have great results in some classes), or about how the students are doing with IT professionals who have little preparation for teaching, or if the TEALS classes are better or worse than others at engaging women and under-represented minorities. The quote below is from a blog post that I highly recommend reading. It’s by one of the TEALS volunteers and his experience in teaching AP CS. The author, Dan Kasun, was a teaching assistant to an existing AP CS teacher. I don’t know how common that model is. TEALS sounds like it’s trying to make computer science succeed for the long haul. Computing education reform can’t be about the students — or rather, it can’t be about the students here and now. It has to be about the long term. Yes, by providing a set of IT professionals to a school, one can help a class of 35 students to do remarkably well in AP CS. But if you develop a full-time CS teacher to be in multiple classes, and to improve over years, and to stay in that school for a decade or more (or even the five years that only half of STEM teachers last), you get to far more than 30 kids. I want computer science to be in schools, long after TEALS runs out of volunteers. I believe that Kevin Wang wants that, too. I don’t know if TEALS is helping yet, but am interested to see what we learn from it. I had the opportunity to support one of the local Loudoun County High Schools this year by volunteering to assist in AP Computer Science as part of the TEALS program (www.tealsk12.org). TEALS provides volunteers who can teach an entire computer science class for schools that do not have access to trained educators, and also provides teacher assistants (TAs) for schools that already have teachers, but would like additional support in their programs. Loudoun already had teachers, so I volunteered as a TA (which was fortunate, as my schedule wouldn’t have supported the responsibility of the full class). via My time in the High School Computer Science – Dan Kasun – Techonomics and Government – Site Home – MSDN Blogs."
"484","2013-06-19","2023-03-24","https://computinged.wordpress.com/2013/06/19/its-time-for-teach-for-america-to-fold-the-lesson-for-computing-education/","The piece linked below is about why Teach for America should fold, but the argument being made is the same for why TEALS is not a useful strategy for the long-term health of computing education in the United States. We need to build up our corps of veteran computer science teachers. Using professional IT workers as stop-gap measures means that there’s no incentive to develop those veteran teachers, and means that we’re not spending our efforts in teacher professional development that will pay off over the long-term. The other problem is the wasted investment a school makes in a teacher who leaves after just a few years. Sadly, I’m a poster child for this. I remember my last day at my school in Colorado, as I made the rounds saying goodbye to veteran teachers, my friends and colleagues who had provided me such crucial support and mentorship. As I talked of my plans for law school in Chicago, and they bade me best wishes, I felt an overwhelming wave of guilt. Their time and energy spent making me a better teacher – and I was massively better on that day compared to my first – was for naught. The previous summer I had spent a week of training, paid for by my school, to learn to teach pre–Advanced Placement classes. I taught the class for a year; presumably, I thought, someone else would have to receive the same training – or, worse, someone else would not receive the same training. All that work on classroom management and understanding of the curriculum, all the support in connecting with students and writing lesson – it would all have to begin again with a new teacher. via It’s time for Teach For America to fold — former TFAer."
"485","2015-10-05","2023-03-24","https://computinged.wordpress.com/2015/10/05/prescribing-a-lifetime-drug-without-a-manufacturer-new-york-city-sets-10-year-goal-to-offer-cs-in-all-schools/","NYC has joined Chicago and San Francisco and Arkansas in requiring CS in all schools. I appreciate that they recognize the value of computing education. I worry that the people making these decisions don’t realize what’s involved in covering them. In particular, is de Blasio’s decision in New York City a commitment to a long-term cost that they can’t sustain? de Blasio’s program is going to spend $81M to help existing teachers become CS teachers over the next ten years. Let’s imagine that he succeeds and his program prepares enough CS teachers so that every school has enough teachers to provide CS learning opportunities to every NYC students. What happens after that? A lot of the teachers going through CS teacher professional development today are new teachers, less than five years into the job. Across all STEM subjects, we lose about 50% of all new teachers within five years. In an ECS study, it was closer to 60% attrition in 3 years. We’re going to burn through those teachers quickly. Code.org counts on CS teachers being in the classroom for only three years. Where will NYC get the teachers to sustain the effort? Do they need to raise another $81M to keep retraining existing teachers? It’s far cheaper to get teachers pre-service, straight from undergraduate. There are less than five pre-service CS teacher education programs in the United States. None are currently in New York (city or state). de Blasio’s decision is like an architect’s decision to design a building using a particular kind of material that is hard to make and for which there are no current manufacturers. Or a doctor prescribing a drug that you’ll need for the rest of your life — but which can only be made by a specific pharmacy company at a high cost. Some of that $81M should be used to build the infrastructure, to create the system that will keep supplying CS teachers for NYC — to create teacher certifications, start teacher education programs, and hire education faculty who will focus on CS education. I pointed out previously that that’s how Germany is bootstrapping CS education. They’re making the investment in CS ed faculty who will keep programs running for decades. My Blog@CACM post (link here) this month is on how CS departments can help grow CS teachers. CS education is important to 21st century literacy. It’s so important that we shouldn’t promise it only to kids who are in NYC over the next 10 years. What I hope is that de Blasio’s decision leads to that kind of investment. I hope that NYC, Chicago, San Francisco, and Arkansas are going to direct attention to what’s needed to create the steady-state flow of new computing teachers into classrooms. Meeting that goal will present major challenges, mostly in training enough teachers. There is no state teacher certification in computer science, and no pipeline of computer science teachers coming out of college. Fewer than 10 percent of city schools currently offer any form of computer science education, and only 1 percent of students receive it, according to estimates by the city’s Department of Education. Computer science will not become a graduation requirement, and middle and high schools may choose to offer it only as an elective. But the goal is for all students, even those in elementary school and those in the poorest neighborhoods, to have some exposure to computer science. Source: De Blasio to Announce 10-Year Deadline to Offer Computer Science to All Students – The New York Times"
"486","2017-11-06","2023-03-24","https://computinged.wordpress.com/2017/11/06/how-to-scale-our-capacity-to-offer-high-quality-cs-education-cra-education-committee/","What a great idea! The CRA Education Committee has created a website of practices to help CS departments manage “Generation CS.” It includes projects from Google’s CS Capacity Awards. Although different institutions, large and small, are experiencing the enrollment increases in different ways, many programs are already operating at or beyond their maximum capacity. To help departments and faculty deal with this capacity crunch, this Scaling Capacity website is intended to provide a platform for sharing technological and pedagogical interventions for addressing capacity challenges. These practices are not designed to be ‘one size fits all’, but rather offer a variety of solutions derived from specific university needs.This intervention list includes recipients of Google’s CS Capacity Awards and other self-nominated programs. Source: Scaling Capacity – CRA Education"
"487","2015-03-17","2023-03-24","https://computinged.wordpress.com/2015/03/17/google-makes-6-cs-capacity-awards-to-address-rising-enrollment-while-improving-diversity/","I mentioned (in a previous blog post) Google’s awards program to fund innovative efforts that deal with rising enrollments in CS while improving diversity. They’ve just announced the six awardees: CMU, Duke, Mount Holyoke, George Mason, Rutgers, and Berkeley. The plans include mentor training, teaching fellows, new kinds of class structures (e.g., optional mini-lectures, small group sessions, self-paced elements, and periodic skills demos based on martial arts), new technology tools, and collaboration spaces. More details are in the Google blog post below. One of Google’s goals is to surface successful strategies that support the expansion of high-quality Computer Science (CS) programs at the undergraduate level. Innovations in teaching and technologies, while additionally ensuring better engagement of women and underrepresented minority students, is necessary in creating inclusive, sustainable, and scalable educational programs. To address issues arising from the dramatic increase in undergraduate CS enrollments, we recently launched the Computer Science Capacity Awards program. For this three-year program, select educational institutions were invited to contribute proposals for innovative, inclusive, and sustainable approaches to address current scaling issues in university CS educational programs. via Research Blog: Google Computer Science Capacity Awards."
"488","2014-12-09","2023-03-24","https://computinged.wordpress.com/2014/12/09/google-aims-to-address-the-rising-enrollment-problem-and-maintain-diversity/","I wrote a blog post in October (link here) about the rapidly rising enrollment in computer science and how that will likely reduce diversity in computer science —- again, as it did in the mid-1980’s. I don’t know any obvious solutions, since mechanisms like a lottery are pragmatically and politically infeasible (see “Gas Station without Pumps” analysis of the lottery problem). Google is stepping up by providing funds to colleges and universities who have ideas for managing the rise. They are providing mini-grants to find ways to increase capacity for CS enrollments. And their criteria for funding explicitly requires increasing diversity. The focus for all grants is education innovation, and specifically not investment in capital projects or faculty hiring. The proposed program must be: Currently, the program is invitation-only to a select set of 35 colleges and universities as part of a pilot program. You can read the Request for Proposals (RFP) here. The program comes out of Maggie Johnson’s ENGedu group at Google, and Chris Stephenson was a champion for the program. It’s hard to manage increasing enrollments without giving up on diversity. It’s even harder to meet the demands and increase diversity. Google is helping the community significantly by funding efforts to find those hard solutions."
"489","2014-10-30","2023-03-24","https://computinged.wordpress.com/2014/10/30/npr-when-women-stopped-coding-in-1980s-are-we-about-to-repeat-the-past/","The NPR Planet Money segment cited below is excellent. I’m really glad that they reached out to Jane Margolis and Telle Whitney to get the history right. The question that they don’t address in the segment is, “Why did the classes get so much harder in the mid-1980’s that only the boys who were playing with PCs could succeed at them?” In the early 1980’s, interest in Computer Science spiked. There was more interest than there were seats available in CS classes. Eric Roberts talked about these times in his keynote at the Future of Computing Education Research workshop in January 2014, which I blogged about here. What to do with the burgeoning enrollment and no additional resources? Caps were put into place, and classes became harder. Berkeley raised their cap until you had to have 4.0 in all your pre-requisite CS classes to get accepted to the major. Eric Roberts was chair of the CS department at Wellesley in the early 1980’s, and he told me about introductory CS classes at MIT with insane workload, where only the boys with lots of prior CS experience and who were fanatical about computing were getting through. Jane Margolis and Alan Fisher talked about this phenomenon in Unlocking the Clubhouse when they describe how the men and women in the CS classes at CMU had different views of the computer, which influenced how they interacted with it and how much time they were willing to put into their classes (nice summary of this story is on Wikipedia). The classes may not have been made harder explicitly to deal with overcrowding, i.e., to “weed out.” It may have happened in response to an influx of boys who already knew a lot from playing with their PC toys, compounded with a lack of resources because of the overcrowding. With boys who already knew a lot, CS teachers could start skipping over topics, or covering them lightly, or just assigning programming tasks so that the student “figures it out” on his or her own. If a student can’t learn with this approach, then teacher might decide that the student just “can’t” learn to program. Maybe the student doesn’t have the Geek Gene. Some students do succeed with this approach, because they know a lot from prior experience (or have the Geek Gene). Now, put this in the setting of high enrollments and tight budgets. A student with lots of prior experience needs less teacher time to succeed. A student with less experience needs more time and effort in order to succeed in CS classes. In lean times, there are fewer resources for teaching, and those with less experience will not get the resources they need to succeed. Students with more experience will succeed just fine, so we continue to have high-quality CS graduates who get good jobs. Unless we look carefully at who is succeeding and who isn’t, we might not even notice that our program now presumes prior experience in order for the student to succeed. What’s scary is that we may now be following the exact same path. Eric has been warning about this for some time (see blog post). Enrollment in CS is exploding nationwide. Now, the caps are starting to be put into place. Berkeley now requires a 3.0 in the pre-requisite classes to get in to the major. Here at Georgia Tech, the College of Computing has just requested to have a grade requirement in pre-requisite CS classes before allowing students to transfer into CS. It’s still the case that it’s mostly wealthier (middle or upper class), white or Asian males who get access to high school CS. That’s in Barb’s AP analysis that got so much coverage this last year (see blog post here and the media coverage here). AP CS is the most gender-skewed AP (more male than AP Studio Art is female). So, even if you’re in a school that can afford AP, women will most likely not be in the CS class. In our AP analysis SIGCSE paper last year, we showed how wealth in a state has a strong relationship with AP CS offerings in the state. We’re now starting to show the relationship continues to the district level as appeared in this blog a few weeks ago. These kinds of caps have two effects which limit access by women and under-represented minorities (the second of which was pointed out to me by Eric): I understand why caps are going into place. We can’t support all these students, and there are no additional resources coming. What else can CS departments do?We might think about a lottery or using something beyond CS GPA to get those seats, something that’s more equitable. State budgets for universities have been cut back across the US, and it’s not clear that anyone (companies or the Federal government) could swoop in and cover that shortfall. In lean budget times, few university administrators (public or private) are willing to invest in CS right now. There will likely be a push for more MOOCs in the introductory courses — which is exactly where MOOCs are least effective (see my article in Ubiquity.) It looks likely that we are going to reduce the diversity in CS, again. While on our watch.  Mark Zuckerberg. Bill Gates. Steve Jobs. Most of the big names in technology are men.But a lot of computing pioneers, the ones who programmed the first digital computers, were women. And for decades, the number of women in computer science was growing.But in 1984, something changed. The number of women in computer science flattened, and then plunged. via Episode 576: When Women Stopped Coding : Planet Money : NPR. Many in the ideas for this blog post came from discussions with the Diversity Task Force of the ACM Education Council. All the mistakes are mine."
"490","2014-01-24","2023-03-24","https://computinged.wordpress.com/2014/01/24/computer-manpower-in-higher-education-is-there-a-crisis-worse-than-you-might-think/","A slightly different pattern for me: Check out the quote first, and I’ll add comments after. Let us consider the conundrum facing the computer field in higher education first. It is experiencing an exponentially increasing demand for its product with an inelastic labor supply. How has it reacted? NSF has made a survey of the responses of engineering departments, including computer science departments in schools of engineering, to the increasing demand for undergraduate education in engineering. There is a consistent pattern in their responses and the results can be applied without exception to the computer field whether the departments are located in engineering schools or elsewhere. 80% of the universities are responding by increasing teaching loads, 50% by decreasing course offerings and concentrating their available faculty on larger but fewer courses, and 66% are using more graduate-student teaching assistants or part-time faculty. 35% report reduced research opportunities for faculty as a result. In brief, they are using a combination of rational management measures to adjust as well as they can to the severe manpower constraints under which they must operate. However, these measures make the universities’ environments less attractive for employment and are exactly counterproductive to their need to maintain and expand their labor supply. They are also counterproductive to producing more new faculty since the image graduate students get of academic careers is one of harassment, frustration, and too few rewards. The universities are truly being choked by demand for their own product and have a formidable people-flow problem, analogous to but much more difficult to address than the cash-flow problem which often afflicts rapidly growing businesses. There are no manpower banks which can provide credit. via Computer Manpower — Is There a Crisis?. This quote was presented by Eric Roberts in his keynote earlier this month at the NSF-sponsored Future Computing Education Research Summit (well organized by Steve Cooper). The highlight is my addition, because I was struck by the specificity of the description. I find the description believable, and it captures the problems of CS higher-education today, especially in the face of rising enrollments in CS classes (discussed by Eric Roberts here and by Ed Lazowka and Dave Patterson here). What makes this analysis scarier is that the paper quoted was published in 1982. Back in the 1980’s, the state Universities had the mandate and the budget to grow to meet the demand. They didn’t always have the CS PhD graduates that they needed, so some Math and EE PhDs became CS faculty. Today, though, the state Universities are under severe budget constraints. How will we meet the demand in enrollment? In the 1980’s, some CS programs met the demand by raising the bar for entering the CS major, which ended up make CS more white and male (because only the more privileged students were able to stay above the bar). Will our solutions lead to less diversity in CS? Will we lose more faculty to industry, and replace them with MOOCs?"
"491","2017-10-11","2023-03-24","https://computinged.wordpress.com/2017/10/11/the-state-of-women-in-computer-science-an-investigative-report-featuring-barbara-ericson/","The new TechRepublic report on women in computing is short but touches on a lot of important themes. Barb Ericson figures prominently in the report. At Georgia Tech, every student is required to take one of three computer science intro courses: One for engineering majors, one for computer science majors, and one for all other students. In the past, computer science was not taught in a very interesting way, Ericson said. And getting professors to change their habits after so much time proved difficult, she added. Further, “a lot of instructors believe in the ‘geek gene’—that you’re born to do it or you’re not, and they often think women are not,” Ericson said. “Women can face an uphill climb from some of their professors or friends or family who are like, ‘Wait, what? Why are you doing this?'” Intro courses should be interesting, creative, and social, and offer plenty of help, especially for women who tend to come in with less experience and less confidence, Ericson said. Source: The state of women in computer science: An investigative report – TechRepublic"
"492","2017-10-13","2023-03-24","https://computinged.wordpress.com/2017/10/13/study-says-multiple-factors-work-together-to-drive-women-away-from-stem/","I wrote recently in a blog post that we don’t know enough why women aren’t going into computing, and I wrote in another blog post that CRA is finding that we lose women over the years of an undergraduate degree in CS. Here’s an interesting study offering explanations for why we are not getting and keeping women: The study analyzed a large, private university on the East Coast, using data from 2009-16, broken down semester-by-semester to track students’ changes in grades and majors in as close to real time as possible. While other studies have suggested that women came out of high school less prepared, or that increasing female STEM faculty could help provide women mentors, the Georgetown study didn’t support those findings. “Women faculty don’t seem to attract more women into a field, and that was sort of sad news for us,” Kugler said. “We were hoping we could make more of a difference.” One of the reasons women might feel undue pressure in STEM fields might actually be because of how recruiting and mentoring is framed. Many times, those efforts actually end up reinforcing the idea that STEM is for men.“Society keeps telling us that STEM fields are masculine fields, that we need to increase the participation of women in STEM fields, but that kind of sends a signal that it’s not a field for women, and it kind of works against keeping women in these fields,” Kugler said. And while many STEM majors are male-dominated, the framing of recruitment and mentorship efforts can sometimes paint inaccurate pictures for STEM fields that aren’t male-dominated, and contribute to an inaccurate picture for STEM as a whole, the paper says: While men may not have a natural ability advantage in STEM fields, the numerous government and other policy initiatives designed to get women interested in STEM fields may have the unintended effect of signaling to women an inherent lack of fit. While computer science, biophysics and physics tend to be male-dominated, Kugler said, neurobiology, environmental biology and biology of global health tend to be female-dominated. Source: Study says multiple factors work together to drive women away from STEM"
"493","2017-10-16","2023-03-24","https://computinged.wordpress.com/2017/10/16/start-from-where-they-are-rochester-institute-of-tech-opens-center-focused-on-computing-science-for-all/","Paul’s last line below says it all. If you want to teach CS to all majors, you start by looking at the computing needs in those disciplines. You don’t start by asking computing experts what they do. Bravo! “The Golisano College embraces a vision in which the computing domain is accessible to everyone, regardless of discipline, disability or diverse background,” said Anne Haake, dean of the college, who is spearheading the launch of the center from within her college. CS professor Paul Tymann will serve as director. “Computers have become part of the fabric of virtually every discipline, and I don’t think you can be successful in today’s society without having a basic understanding of how computing works,” said Tymann, in a press release. “That’s why we are looking to understand the computing needs of every discipline at RIT.” Source: Rochester Institute of Tech Opens Center Focused on ‘Computing Science for All’ — Campus Technology"
"494","2016-08-22","2023-03-24","https://computinged.wordpress.com/2016/08/22/c-p-snow-keeps-getting-more-right-why-everyone-needs-to-learn-about-algorithms-cs4all/","When I give talks about teaching computer to everyone, I often start with Alan Perlis and C.P. Snow in 1961. They made the first two public arguments for teaching computer science to everyone in higher education. Alan Perlis’s talk was the most up-beat, talking about all the great things we can think about and do with computer. He offered the carrot. C.P. Snow offered the stick. C.P. Snow foresaw that algorithms were going to run our world, and people would be creating those algorithms without oversight by the people whose lives would be controlled by them. Those who don’t understand algorithms don’t know how to challenge them, to ask about them, to fight back against them. Quoting from Martin Greenberger’s edited volume, Computers and the World of the Future (MIT Press, 1962), we hear from Snow: Decisions which are going to affect a great deal of our lives, indeed whether we live at all, will have to be taken or actually are being taken by extremely small numbers of people, who are nominally scientists. The execution of these decisions has to be entrusted to people who do not quite understand what the depth of the argument is. That is one of the consequences of the lapse or gulf in communication between scientists and non-scientists. There it is. A handful of people, having no relation to the will of society, have no communication with the rest of society, will be taking decisions in secret which are going to affect our lives in the deepest sense. I was reminded of Snow’s quote when I read the article linked below in the NYTimes. Increasingly, AI algorithms are controlling our lives, and they are programmed by data. If all those data are white and male, the algorithms are going to treat everyone else as outliers. And it’s all “decisions in secret.” This is fundamentally a data problem. Algorithms learn by being fed certain images, often chosen by engineers, and the system builds a model of the world based on those images. If a system is trained on photos of people who are overwhelmingly white, it will have a harder time recognizing nonwhite faces. A very serious example was revealed in an investigation published last month by ProPublica. It found that widely used software that assessed the risk of recidivism in criminals was twice as likely to mistakenly flag black defendants as being at a higher risk of committing future crimes. It was also twice as likely to incorrectly flag white defendants as low risk. The reason those predictions are so skewed is still unknown, because the company responsible for these algorithms keeps its formulas secret — it’s proprietary information. Judges do rely on machine-driven risk assessments in different ways — some may even discount them entirely — but there is little they can do to understand the logic behind them. Source: Artificial Intelligence’s White Guy Problem – The New York Times One of our superstar alumna, Joy Buolamwini, wrote about a similar set of experiences. She’s an African-American woman who works with computer vision, and the standard face-recognition libraries don’t recognize her. She lays the responsibility for fixing these problems on the backs of “those who have the power to code systems.” C.P. Snow would go further — he’d say that it’s all our responsibility, as part of a democratic process. Knowing about algorithms and demanding transparency when they effect people’s lives is one of the responsibilities of citizens in the modern world. The faces that are chosen for the training set impact what the code recognizes as a face. A lack of diversity in the training set leads to an inability to easily characterize faces that do not fit the normal face derived from the training set. So what? As a result when I work on projects like the Aspire Mirror (pictured above), I am reminded that the training sets were not tuned for faces like mine. To test out the code I created for the Aspire Mirror and subsequent projects, I wore a white mask so that my face can be detected in a variety of lighting conditions. The mirror experience brings back memories from 2009. While I was working on my robotics project as an undergraduate, I “borrowed” my roommate’s face so that I could test the code I was writing. I assumed someone would fix the problem, so I completed my research assignment and moved on. Several years later in 2011, I was in Hong Kong taking a tour of a start-up. I was introduced to a social robot. The robot worked well with everyone on the tour except for me. My face could not be recognized. I asked the creators which libraries they used and soon discovered that they used the code libraries I had used as an undergraduate. I assumed someone would fix the problem, so I completed the tour and moved on. Seven years since my first encounter with this problem, I realize that I cannot simply move on as the problems with inclusion persist. While I cannot fix coded bias in every system by myself, I can raise awareness, create pathways for more diverse training sets, and challenge us to examine the Coded Gaze — the embedded views that are propagated by those who have the power to code systems. Source: InCoding — In The Beginning — Medium"
"495","2015-02-18","2023-03-24","https://computinged.wordpress.com/2015/02/18/do-we-treat-algorithms-as-a-religion-why-everyone-should-learn-computing/","Ian Bogost believes that an “algorithmic society” is a myth, and believes that we treat algorithms as a religion. I don’t want to downplay the role of computation in contemporary culture. Striphas and Manovich are right—there are computers in and around everything these days. But the algorithm has taken on a particularly mythical role in our technology-obsessed era, one that has allowed it wear the garb of divinity. Concepts like “algorithm” have become sloppy shorthands, slang terms for the act of mistaking multipart complex systems for simple, singular ones. Of treating computation theologically rather than scientifically or culturally. This attitude blinds us in two ways. First, it allows us to chalk up any kind of computational social change as pre-determined and inevitable. It gives us an excuse not to intervene in the social shifts wrought by big corporations like Google or Facebook or their kindred, to see their outcomes as beyond our influence. Second, it makes us forget that particular computational systems are abstractions, caricatures of the world, one perspective among many. The first error turns computers into gods, the second treats their outputs as scripture. via The Cathedral of Computation – The Atlantic. I respond with another quote: “And this is that decision which are going to affect a great deal of our lives, indeed whether we live at all, will have to be taken or actually are being taken by extremely small number of people, who are normally scientists. The execution of these decisions has to be entrusted to people who do not quite understand what the depth of the argument is. That is one of the consequences of the lapse or gulf in communication between scientists and nonscientists. There it is. A handful of people, having no relation to the will of society, having no communication with the rest of society, will be taking decisions in secret which are going to affect our lives in the deepest sense.” That’s C.P. Snow in 1961 (Computers and the World of the Future, ed Martin Greenberger, MIT Press), talking about why everyone on campus should (explicitly) learn algorithms. He foresaw the “algorithmic culture” where algorithms control “a great deal of our lives, indeed whether we live at all.” He had two concerns. One was that the people writing those algorithms are making decisions when they implement them that don’t reflect social or political will. The second was that the “nonscientists” were unwilling to learn the algorithms. Explicitly, Snow’s argument was that those who don’t understand algorithms are at the mercy of those who do. His book, The Two Cultures, blamed the nonscientists for not making the effort to learn the science and algorithms so that they could participate in scientific discourse. Today, Snow might agree with Bogost. When we don’t understand the algorithms that control our lives, we might see them as divine or magical. Arthur C. Clarke famously said, “Any sufficiently advanced technology is indistinguishable from magic.” The corollary (see here) is a better explanation of the phenomena that Bogost describes, ” Any technology, no matter how primitive, is magic to those who don’t understand it.” I use the above quote in my talks on why we need computing for everyone. Snow is arguing that CS Education is a critical part of a functioning “algorithmic society.” If our social processes and rules are built into the software, not understanding algorithms keeps you from understanding and influencing the algorithms that control your life. Thomas Jefferson said, “An educated citizenry is a vital requisite for our survival as a free people.” Knowledge about computing is part of that education that keeps the citizenry free in today’s algorithm-driven world. The onus to enable citizens to be free in an algorithm-driven world is on us in computer science, not on the citizenry alone. We have too much power to hide our algorithms behind interfaces and firewalls. We have a responsibility to make the computational world (and the algorithms that run it) accessible and understandable. As Diana Franklin said in her recent CACM essay (which I mentioned here), it’s up to computer science to make computing education work."
"496","2015-02-09","2023-03-24","https://computinged.wordpress.com/2015/02/09/putting-the-computer-science-in-computing-education-research/","Diana Franklin makes the point in CACM that computing education research is a CS issue. What do these events have in common? Computer scientists identified a critical need in computer science education (and education in general) and developed something new to fill that need, released it, and scaled it without rigorous, scientific experiments to understand in what circumstances they are appropriate. Those involved have the best of intentions, working to create a solution in an area with far too little research. A compelling need for greater access to computing education, coupled with a dire shortage of well-supported computing education researchers, has led to deployments that come before research. High-profile failures hurt computer science’s credibility in education, which in turn hurts our future students. This imbalance between the demand and supply and the chasm between computer science and education creates an opportunity for some forward-thinking departments. If computer science wants to be a leader rather than a spectator in this field, computer science departments at Ph.D.-granting institutions must hire faculty in computing education research (CER) to transform the face of education—in undergraduate CS teaching, K–12 CS education, and education in general. via Putting the Computer Science in Computing Education Research | February 2015 | Communications of the ACM."
"497","2017-10-21","2023-03-24","https://computinged.wordpress.com/2017/10/21/what-we-should-be-teaching-kids-about-cs-and-changing-our-tools-to-get-there-ben-shapiro/","Ben Shapiro gave the opening keynote at VL/HCC a couple weeks ago. (See Amy Ko’s great summary of VL/HCC this year.) He shared the slides with me, and he just made a video of himself re-giving the talk.  Ben has been exploring what we need to teach kids to prepare them to create authentic applications for the world that they live in — multiple, heterogenous platforms with rich networking. He wants kids to think about networks, failures, and communication between programs running on devices with different capabilities. Today, we talk about teaching kids variables and loops. Tomorrow (like, literally tomorrow), we should be teaching them about the realities of the digital world in which they live. But we’re not going to do this with Scratch, Python, or Java. He’s suggesting new kinds of tools, including having young kids work with machine learning. I recommend letting Ben change your thinking about the next things to teach in CS."
"498","2017-10-23","2023-03-24","https://computinged.wordpress.com/2017/10/23/why-tech-leadership-may-have-a-bigger-race-than-gender-problem/","The Wired article linked below suggests that race is an even bigger issue than gender in Tech industry leadership. While Asians are over-represented in the Tech labor force, they are under-represented in Tech leadership, even more than women. I was somewhat surprised that this article considers “Asians” so generally. The most-often visited blog post I’ve written is the one that shows the differential success rates of different Asian populations in US educational attainment (see post here). Gee says this study came about because an earlier report in 2015 that used EEOC data from companies like Google and LinkedIn ended up on the desk of Jenny Yang, the outgoing commissioner of the EEOC. Yang asked if the lower proportion of Asian executives was the result of discrimination and might be applicable for lawsuits, Gee says. He told her no. “We have never seen any overt discrimination or policies that create these disparities,” Gee explains. Rather, after conversations with 60 or 70 Asian executives, the authors say they noticed a pattern of cultural traits among some Asians that did not align with leadership expectations in Western corporate culture, such as risk-taking and being confrontational. Gee gave the example of an executive who started the first Asian affinity group at Intel decades ago. He noticed that Chinese engineers were unhappy and not succeeding in Intel’s culture of “constructive conflict,” which involved heated debates during meetings. “Some people call it unconscious bias. For Asians, it’s actually a very conscious bias,” says Gee. Studies show that assumptions that Asians are good at math, science, and technology make it easier for them to get in the door, but the same bias is reversed when it comes to leadership roles, he says. Source: Why Tech Leadership May Have a Bigger Race Than Gender Problem | WIRED"
"499","2013-06-25","2023-03-24","https://computinged.wordpress.com/2013/06/25/disaggregating-asian-american-educational-attainment/","Computer science is mostly white or Asian and male. We have lots of data to support that. What I didn’t realize was how sub-groups within Asian-American differ markedly in their educational attainment. A new report from NYU and ETS disaggregates the data, and below is the startling graphic that Rick Adrion pointed me to. "
"500","2016-05-18","2023-03-24","https://computinged.wordpress.com/2016/05/18/bootstrap-computer-science-in-physics-as-well-as-algebra/","This is a really cool announcement. I believe that computing helps with all kinds of STEM learning, and admire the work at Northwestern on Agent Based Learning in STEM, Project GUTS, and Bootstrap. It’s particularly important for getting CS into schools, since so few schools will have dedicated CS teachers for many years yet (as described here for Georgia). I’m excited to see that Bootstrap will be moving into Physics as well as Algebra. Bootstrap, one of the nation’s leading computer science literacy programs, co-directed by Brown CS faculty members Shriram Krishnamurthi and Kathi Fisler (adjunct), continues to extend its reach. Bootstrap has just announced a partnership to use its approach to building systems to teach modeling in physics, an important component of the Next Generation Science Standards (NGSS). This project is a collaboration with STEMTeachersNYC, the American Association of Physics Teachers, and the American Modeling Teachers Association. Source: CS Blog: Bootstrap Announces A New STEM Education Model That Combines Computing, Modeling, And Physics"
"501","2017-11-20","2023-03-24","https://computinged.wordpress.com/2017/11/20/keeping-the-machinery-in-computing-education-back-to-the-future-in-the-definition-of-cs/","I’ve been excited to see this paper finally come out in CACM. Richard Connor, Quintin Cutts, and Judy Robertson are leaders in the Scotland CAS effort. Their new curriculum re-emphasizes the “computer” in computer science and computational thinking. I have bold-faced my favorite sentence in the quote below. I like how this emphasis reflects the original definition of computer science: “Computer science is the study of computers and all the phenomena surrounding them.” We do not think there can be “computer science” without a computer. Some efforts at deep thinking about computing education seem to sidestep the fact that there is technology at the core of this subject, and an important technology at that. Computer science practitioners are concerned with making and using these powerful, general-purpose engines. To achieve this, computational thinking is essential, however, so is a deep understanding of machines and languages, and how these are used to create artifacts. In our opinion, efforts to make computer science entirely about “computational thinking” in the absence of “computers” are mistaken. As academics, we were invited to help develop a new curriculum for computer science in Scottish schools covering ages 3–15. We proposed a single coherent discipline of computer science running from this early start through to tertiary education and beyond, similar to disciplines such as mathematics. Pupils take time to develop deep principles in those disciplines, and with appropriate support the majority of pupils make good progress. From our background in CS education research, we saw an opportunity for all children to learn valuable foundations in computing as well, no matter how far they progressed ultimately. Source: Keeping the Machinery in Computing Education | November 2017 | Communications of the ACM"
"502","2016-02-01","2023-03-24","https://computinged.wordpress.com/2016/02/01/computer-science-is-the-study-of-computers-and-all-the-phenomena-surrounding-them/","One of the common questions in CS education is, “What is computer science?” I recently looked into the original article in Science that introduced the term in 1967 from Allen Newell, Alan Perlis, and Herbert Simon. They define computer science as the study of computers and the phenomena surrounding them. I do see the point that what computer scientists are really interested in is computing, which is separate from computers themselves. That’s a distinction that is mostly lost on students, though, and is not all that important to emphsize now that computers exist. We can argue that computer science existed before computers, but that’s a thought experiment. What we study today is based on the reality that the devices exist. CMU keeps a library of correspondence from Herb Simon and I found this letter (see link here) interesting because it shows Simon making a similar distinction. Computers had to exist before computer scientists before we could really define a field: “A point of our letters was that, whether genuine substance now exists in computer science or not, computers constitute such a rich set of phenomena that it obviously will exist. (In a sense, there had to be plants, then botanists, before there could be botany.)” There are computers. Ergo, computer science is the study of computers. The phenomena surrounding computers are varied, complex, rich. It remains only to answer the objections posed by many skeptics. Objection 4. Computers, like thermometers, are instruments, not phenomena. Instruments lead away to their user sciences; the behaviors of instruments are subsumed as special topics in other sciences (not always the user sciences – electron microscopy belongs to physics, not biology). Answer. The computer is such a novel and complex instrument that its behavior is subsumed under no other science; its study does not lead away to user sciences, but to further study of computers. Hence, the computer is not just an instrument but a phenomenon as well, requiring description and explanation. from What is Computer Science?"
"503","2018-09-17","2023-03-24","https://computinged.wordpress.com/2018/09/17/international-effort-to-improve-data-science-in-schools/","I’ve been involved in this project over the last few months. (Where “involved” means, “a couple of phone conversations, and a set of emails about frameworks, standards, and curricula, and I missed every physical meeting.”) Nick Fisher has drawn together an impressive range of experts and professional societies to back the effort. It’s not clear where it’s going, but it is indicative of a growing worldwide interest in “data science” in schools. The definition of “data science” is fuzzy for me, almost as fuzzy as the term “computational thinking.” Does data science include computer science? statistics? probability? I think the answer is “yes” to all of those, but then it might be too big to easily teach in secondary schools. If we’re struggling to teach CS to teachers, how do we teach them CS and statistics and probability? And if budgets and schedules are are a zero-sum game, what do we give up in order to teach data science? For example, teacher preparation programs are packed full. What do we not teach in order to teach teachers about data science? This group of experts knows a lot about what works in data science. Their opinion on what students need to know creates a useful measuring stick with which to look at the several data science classes that are being created (such as Unit 5 in Exploring CS). There’s some talk about this group of experts might develop their own course. I’m not sure that it’s possible to create a course to work internationally — school systems and expectations vary dramatically. But a framework is useful. The aim of the International Data Science in Schools Project (IDSSP) is to transform the way data science is taught the last two years of secondary school. Its objectives are: 1. To ensure that school children develop a sufficient understanding and appreciation of how data can be acquired and used to make decisions so that they can make informed judgments in their daily lives, as children and then as adults 2. To inspire mathematically able school students to pursue tertiary studies in data science and its related fields, with a view to a career. “In both cases, we want to teach people how to learn from data,” Dr Fisher said. Two curriculum frameworks are being created to support development of a pre-calculus course in data science that is rigorous, engaging and accessible to all students, and a joy to teach. Dr Fisher said that the draft frameworks will be published for widespread public consultation in early 2019 before completion by August. “We envisage the material will be used not just in schools, but also as a valuable source of information for data science courses in community colleges and universities and for private study.” For further information: idssp.info@gmail.com, or visit www.idssp.org"
"504","2015-04-06","2023-03-24","https://computinged.wordpress.com/2015/04/06/the-real-software-crisis-repeatability-as-a-core-value-march-cacm/","Repeatability presumes evidence (which can be repeated). Computer scientists have not valued evidence and repeatability as much as we need to for rigor and scientific advancement — in education, too. One of my favorite papers by Michael Caspersen is his Mental models and programming aptitude ITICSE 2007 paper where he and his colleagues attempt to replicate the results of the famous and controversial Dehnadi and Bornat paper (see here). Michael and his colleagues are unable to replicate the result, and they propose a research method for understanding the differences. That’s good science — attempting to replicate another’s result, and then developing the next steps to understand the differences. Science advances faster when we can build on existing results, and when new ideas can easily be measured against the state of the art. This is exceedingly difficult in an environment that does not reward the production of reusable software artifacts. Our goal is to get to the point where any published idea that has been evaluated, measured, or benchmarked is accompanied by the artifact that embodies it. Just as formal results are increasingly expected to come with mechanized proofs, empirical results should come with code. If a paper makes, or implies, claims that require software, those claims must be backed up. via The Real Software Crisis: Repeatability as a Core Value | March 2015 | Communications of the ACM."
"505","2016-02-02","2023-03-24","https://computinged.wordpress.com/2016/02/02/summarizing-the-research-on-designing-programming-languages-to-be-easier-to-learn-nsf-cs-ed-community-meeting/","I’m at the NSF STEM+Computing and Broadening Participation in Computing Community Meeting. At our ECEP meeting on Saturday, we heard from White House Champion of Change Jane Margolis. She did a great job of getting our states to think about how to change their state plans to emphasize diversity and equity — more on that in a future blog post.  I moderated a panel yesterday on how to integrate computing education into schools of education. Here’s the description of the session — again, more later on this. (Mark Guzdial (moderator), Leigh Ann DeLyser, Joanna Goode, Yasmin Kafai, Aman Yadav) Yesterday, our other computing education research Champion of Change, Andreas Stefik presented a summary of the empirical evidence on how to design programming languages to make them easier to learn. Follow the link below to get to the two-page PDF pamphlet he produced for his presentation — it’s dense with information and fascinating. This pamphlet is designed to provide an overview of recent evidence on human factors evidence in programming language design. In some cases, our intent is to dispel myths. In others, it is to provide the result of research lines. from Programming Languages and Learning by Andreas Stefik"
"506","2016-05-25","2023-03-24","https://computinged.wordpress.com/2016/05/25/crowd-sourcing-high-quality-cs-ed-assessments-cass-project-quantum/","Bold new project from the UK’s Computing at School project aims to create high-quality assessments for their entire computing curriculum, across grade levels. The goal is to generate crowd-sourced problems with quality control checks to produce a large online resource of free assessments. It’s a remarkable idea — I’ve not heard of anything this scale before. If it works, it’ll be a significant education outcome, as well as an enormous resource for computing educators. I’m a bit concerned whether it can work. Let’s use open-source software as a comparison. While there are many great open-source projects, most of them die off. There simply aren’t enough programmers in open-source to contribute to all the great ideas and keep them all going. There are fewer people who can write high-quality assessment questions in computing, and fewer still who will do it for free. Can we get enough assessments made for this to be useful? Project Quantum will help computing teachers check their students’ understanding, and support their progress, by providing free access to an online assessment system. The assessments will be formative, automatically marked, of high quality, and will support teaching by guiding content, measuring progress, and identifying misconceptions.Teachers will be able to direct pupils to specific quizzes and their pupils’ responses can be analysed to inform future teaching. Teachers can write questions themselves, and can create quizzes using their own questions or questions drawn from the question bank. A significant outcome is the crowd-sourced quality-checked question bank itself, and the subsequent anonymised analysis of the pupils’ responses to identify common misconceptions. Source: CAS Community | Quantum: tests worth teaching to"
"507","2017-11-10","2023-03-24","https://computinged.wordpress.com/2017/11/10/why-do-so-few-schools-try-livecode-we-let-industry-dictate-our-tools/","I’m an old HyperCard programmer, so I like LiveCode. LiveCode does very well on the five principles I suggest for picking an educational programming language. The language is highly readable, and was actually designed drawing on research on how novices best understand programming. It’s easy to put together something that looks authentic and that runs on virtually any platform — much easier than Python, Java, Scratch, Blockly, or any of the other top five most popular teaching languages. Authenticity is often engaging for students. The LiveCode folks have just put together a web page (linked below) describing some of the reasons why teachers should consider LiveCode. But in general, we don’t. Why not? I have two guesses: I think LiveCode, Smalltalk, and Lisp are all excellent pedagogical programming languages, but our teaching decisions in secondary and post-secondary CS education are rarely based on what will engage students, be easier to learn, or lead to transferable knowledge. Instead, we tend to make decisions on what obviously looks like what current professionals do. It binds us to normative practices. We’re stuck in apprenticeship as our teaching perspective, and can’t consider social reform or developmental perspectives. Better Exam Results, Better Real Life Outcomes, More Fun! Over a third of Scottish schools are now teaching using LiveCode. They are doing this because they have proven results showing that using LiveCode results in more students remaining engaged, reaching good grades, and continuing in the direction of a coding career. Source: Education | LiveCode"
"508","2013-04-26","2023-03-24","https://computinged.wordpress.com/2013/04/26/livecode-community-edition-is-released/","I’m excited about this and find myself thinking, “So what should I do with this first?” LiveCode isn’t as HyperCard-like as it could be (e.g., you edit in one place, then compile into an application), and it has all of HyperCard’s limitations (e.g., object-based not object-oriented, lines are syntax). But it’s free, including all engines. I can program iOS and Android from the same HyperCard stack! I can build new kinds of programming languages and environments on top of Livecode (but who in the world would want to do something like that?!?) that could compile into apps and applications! It’s a compellingly different model for introductory computing, that sits between visual block programming and professional textual programming. Wow… LiveCode Community is an Open Source application. This means that you can look at and edit all of the code used to run it, including the engine code. Of course, you do not have to do this, if you just want to write your app in LiveCode there is no need for you to get involved with the engine at all. You write your app using LiveCode, the English-like scripting language, and our drag and drop interface. Fast, easy, productive and powerful. via Community Edition Overview | RunRev."
"509","2013-04-05","2023-03-24","https://computinged.wordpress.com/2013/04/05/six-reasons-why-computer-science-education-is-failing-students/","Interesting arguments from the CEO of LiveCode. These two points are particularly interesting. The first is: What sits between Scratch, or Alice, or App Inventor, and professional-class languages like JavaScript or C++? I would put Python in there, but I still see that the Scratch->Python gap is a big one. The second paragraph is really striking, and I’d like to see more evidence. Does Israel’s great CS ed system lead to the strong startup culture, or is it because Israelis value technology that they have both a great startup culture and a great CS Ed system? Up to about age 13 there are some excellent tools in widespread use, most notable among them being the free and popular Scratch from MIT and MIT App Investor However students outgrow Scratch by around age 13 and schools often don’t make a good choice of language for the next phase in a child’s education. Many traditional programing languages such as JavaScript or C++ are completely inappropriate for this age group. Students struggle to understand what they are learning and often spend their lessons searching for a missing symbol. The current generation of students use smartphones and so selecting a tool that allows them to create their own apps is another great opportunity to make learning directly relevant to them. Our own LiveCode platform provides a handy solution to these issues by allowing students to create their own mobile apps using a programming language that is close to English. I firmly believe that a strengthening computer science education program has to be one of the most obvious and cost effective things we can do to ensure future economic prosperity. Israel has the highest rate of startup per capita anywhere and that in part stems from its strong computer science education program. Estonia, another country with both a strong tech sector and economy, recently announced a plan to expand teaching of computer science to all primary school children. Do we want to be left in the dust by these countries, or left unable to compete with the growing economies of India and China? What is it going to take to get computer science education moved up the agenda in the USA and here in the UK? via Six Reasons Why Computer Science Education is Failing Students."
"510","2016-06-20","2023-03-24","https://computinged.wordpress.com/2016/06/20/how-to-choose-programming-languages-for-learners/","My Blog@CACM post for June is Five Principles for Programming Languages for Learners. The five principles I identify are: I wrote the essay in response to Idit Harel’s influential essay American schools are teaching our kids how to code all wrong. There were many responses to Idit’s essay, on social media and in other blogs. Much of the discussion focused on text programming languages vs. drag-and-drop, blocks-based languages, which I don’t think is the most critical distinction. In this post, I respond to two of the suggestions that came up in some of these discussions. I use the five principles to review the suggestions in a kind of heuristic evaluation. If we were going to teach a professional language to students, JavaScript is attractive. It’s free and ubiquitous, available in every Web browser. There are many jobs for JavaScript programmers. Because so much is built on top of it, it’s likely to remain around for many years in a compatible form. I argue in the Blog@CACM post that there are many dimensions to “real” when it comes to programming languages. “Use by professionals” is not the most important one when we talk about learners. I recommend considering each of these five principles before choosing a programming language like JavaScript for learners. We should experiment more with JavaScript, but I suspect that students would do better (struggle less with syntax, learn more, connect to other disciplines more) with a different syntax. If I were trying to get the advantages of JavaScript without the syntax cost, I’d try something like ClojureScript — freely available, as fast as JavaScript, as ubiquitous as JavaScript, used professionally, can be used to control Web pages like JavaScript (so connectable for learners), and with the syntactic similarities to mathematics that Racket enjoys. Baker Franke of Code.org is promoting the essay Coding snobs are not helping our children prepare for the future as a response to Idit’s essay. The essay is about the application-building tool, Ready. Media theorist Dough Rushkoff has also been promoting Ready, What happens when anyone can code? We’re about to find out. I disagree with Rushkoff’s description of Ready, even in the title. As the first essay by David Bennahum (a “Ready Maker and Venture Partner) points out, it’s explicitly not about using a programming language. Our efforts at Ready, a platform that enables kids to make games, apps, whatever they want, without knowing a computer language, are designed to offer a new approach to broadening access to code literacy. Bennahum’s essay means to be provocative — and even insulting, especially to all the teachers, developers, and researchers who have been creating successful contextualized computing education: In this new world, learning coding is about moving away from computer languages, syntax, and academic exercises towards real world connections: game design and building projects that tie into other subjects like science and social studies… This is the inverse of how computer science has been taught, as an impersonal, disconnected, abstracted, mathematical exercise. I can see how Rushkoff could be confused. These two quotes from the Ready team seem contradictory. It’s not clear how Ready can be both about “learning coding” and “code literacy” while also allowing kids to make “without knowing a computer language.” There is no programming language in Ready. What is coding then? Is it just making stuff? I agree with Rushkoff’s concerns about Ready. True, if people don’t have to code, they may never find out how this stuff really works. They will be limited to the programming possibilities offered by the makers of the platforms, through which they assemble ready-made components into applications and other digital experiences. Let’s consider Ready against the five principles I propose. Ready is likely successful at helping students to make apps and games. It’s likely a bad choice for learners. I don’t see affordances in Ready for computational literacy."
"511","2015-10-21","2023-03-24","https://computinged.wordpress.com/2015/10/21/requirements-for-a-computing-literate-society-vlhcc-2105-keynote/","I gave a keynote talk at VL/HCC 2015 (see the program here) on Tuesday morning. Here is the abstract, the short form outline, and a link to the slides on SlideShare.net. Abstract: We share a vision of a society that is able to express problems and ideas computationally. Andrea diSessa called that computational literacy, and he invented the Boxer Programming Environment to explore the media of computational literacy. Education has the job of making citizens literate. Education systems around the world are exploring the question of what should all citizens know about computing and how do we provide that knowledge. The questions being asked are about public policy, but also about what does it mean to be expressive with computation and what should computing users know. The answers to these questions have implications for the future of human-centric computing. Outline: I. Our Job: The first computer scientists set the goal to achieve a Computing-Literate Society. II. Challenges to Achieving a Computing-Literate Society Access and Diversity Inverse Lake Wobegon Effect Unanswered research questions of policymakers III. Inventing New Kinds of Computing Education Story #1: Contextualized Computing Education. Story #2: Understanding the Needs of High School CS Teachers. "
"512","2017-12-14","2023-03-24","https://computinged.wordpress.com/2017/12/14/state-of-computing-education-in-the-commonwealth-of-virginia-guest-blog-post-from-rebecca-dovi/","Rebecca Dovi of CodeVA contacted me soon after my blog post of last Monday, inspired by Virginia’s new CS Education mandate. The story about the Virginia decision was much more complicated and interesting. I invited her to write a guest blog post, and I’m grateful that she agreed. It’s a fascinating story! In February 2016 Virginia’s legislature passed House Bill 831 making computer science a part of the core instruction that all students in state must learn. The law mandates specifically “computer science and computational thinking, including computer coding,” be integrated into Virginia’s core standards on coequal standing, in the words of Virginia Secretary of Education Dietra Trent, with English and math. (Bill language http://lis.virginia.gov/cgi-bin/legp604.exe?161+ful+CHAP0472 ) At CodeVA, core standards had been a “maybe someday” issue on our radar. In terms of strategic planning we were not really considering advocating for core standards until several years out. Then the 2016 legislation cycle started, and with it five separate bills to make computer science count as a foreign language credit. While standards were not yet something we actively sought, we knew all of these foreign language bills – while well intentioned – were not the means to the end the Virginia Assembly sought to achieve. Armed with information, CodeVA sought to educate legislators, and in the process was asked instead to propose a substitution. The substitution proposed was the language of HB 831, amending the state’s core education standards enabling legislation. At the insistence of legislators, the bill also originally included a high school mandate and a graduation credit requirement, but CodeVA managed to convince legislators to allow it to use these two items as bargaining chips in negotiations with stakeholders. CodeVA knew these two additional requirements were a bridge too far: previous high school mandates requiring economics and personal finance courses for all high school students still cause issues for many districts around the state already struggling to have enough faculty to teach other subjects. In the end, all stakeholders involved in the legislation were pleased with the law that was adopted, with acceptance of the final language from advocates representing the state’s superintendents, PTAs, teacher groups, school boards and from some of the state’s most influential school divisions. Once the governor signed the bill into law, it was up to the Virginia Department of Education (VDOE) to write standards for the Virginia Board of Education to approve. Virginia has a very prescribed system for developing and maintaining standards. It starts with creating a steering committee of current classroom teachers to act as the primary writing group. Once they have completed drafts multiple review boards give feedback on the standards. The groups weighing in as a part of this formal process include other teachers, educational stakeholders including groups like the Virginia Association of School Superintendents and the Virginia Department of Juvenile Justice, universities and community colleges and business and industry. Each external review group makes recommendations and the steering committee reviews and responds. Finally all standards go out for open public review, and public meetings are held across the state. The steering committee begin its formal work in March 2017 and the final draft was ready for the VDOE by October 2017. The final draft went up for a vote by the Board of Education at its November meeting. While the board minutes of this meeting have not yet been posted (as of Dec 11, 2017) you can watch the video here (link: http://www.doe.virginia.gov/boe/meetings/index.shtml# ). CodeVA’s executive director begins his presentation to the board at the 46:30 mark, and the board discussion of the CS standards continue from there. The mandate for instruction by districts exists for K-8 and means computer science will be integrated into the core subjects students learn in kindergarten through eighth grade. The committee that wrote the standards was very intentional about how these are designed, so there are a few key differences between the Virginia standards and the national standards. First, they are defined for each grade, not by band. Second, in kindergarten and first grade they are written so a teacher may have students coding, or that teacher may choose to guide a lesson with small groups. Third, all non-coding standards were specifically placed so that they aligned with topics currently covered in core areas. Lastly, a sixth strand for cybersecurity was added. The law also mandates creating standards for middle school and high school electives. These were defined, but the courses are currently optional for schools. CodeVA was intentional in advocating for this tiered approach to Virginia’s mandate: A school division where all students learn computer science concepts early as tools in math, science, language arts and other core subjects, and where parents come to expect quality offerings at the secondary level for their children, and where employers anticipate a CS-literate community, are more likely to ensure those elective offerings exist. While schools certainly may use our virtual system to offer online high school elective courses, and while Virginia has offered CS through this online instruction platform for over a decade, Virginia’s new CS law includes no mandate to do so. And online instruction options were not in any way a part of the design of the law or of the resulting standards. The idea is that the integration in K-8 allows students an “informed option” as they move from middle school to high school. By learning computer science early, they have a better idea of what they might want to pursue as an elective. The plan is to measure impact for the next few years, then evaluate the need for high school mandate or graduation requirements. If after data is collected and evaluated it is decided that the mandate needs to be expanded to high school legislators can certainly go back seeking further requirements. Right now we are asking legislators to hold back from trying to move this process faster. Lawmakers in Virginia have reason for their exuberance for this issue: Virginia has the highest concentration of computer science jobs in the country and with the number of open jobs legislators are under enormous pressure from our business community to act. Steering away from a high school mandate was a practical choice on two levels. First, we are not near capacity for having enough high school teachers to cover a mandate at that level, the average high school in state would need 4-6 full time computer science teachers to cover a graduation requirement, and an example. CodeVA has trained over 400 middle and high school teachers over the past four years, and this summer will be expanding from one central training to four statewide hubs serving up to 600 teachers. While this moves the state closer towards the goal of having one computer science teacher in each of the state’s 700-plus middle and high schools, that still is enough to meet the demand an immediate high school mandate would create. Second was the general feeling that it is OK for a student to pursue another field in high school and not want to continue with computer science.This is where measuring the impact of the current initiative becomes vital. We first must explore how exposing all students over several years to ongoing computer science instruction shifts landscape in high school and beyond. For CodeVA the next step is to continue to work with schools and districts to incorporate computer science in daily instruction. Expanding access to professional development by establishing three new hubs across the state is an important first step. These hubs will continue to run the middle and high school training cohorts we have lead since 2014 and add the new Elementary Coaches Academy we are currently piloting. In addition, to support the K-8 mandate we will be working with teams of teachers to create classroom curriculum that reflects the new standards. Finally, CodeVA is launching a pilot of a Computer Science Roadmap project that helps districts collect the information they need to plan the infrastructure needed for implementation. While two years ago we did not anticipate needing to build a statewide infrastructure to support the implementation of standards Virginia hopes that the lessons learned through this process can inform other states as they move to truly bring computer science to all of their students. "
"513","2017-12-04","2023-03-24","https://computinged.wordpress.com/2017/12/04/prediction-the-majority-of-us-high-school-students-will-take-cs-classes-online-csedweek/","The Washington Post got it wrong when it announced that Virginia is the first state to mandate CS education for all students. South Carolina has had that mandate for 30 years. But they couldn’t prepare enough teachers to teach computer science, so they took classes they were already teaching (like “keyboarding”) and counted those as CS classes. Virginia could fall into the same trap, but I don’t think so. Instead, I predict that most Virginia high school students will take CS on-line (and that likely goes for the rest of the US, too). I was struck by how the Richmond-Times Dispatch described the vote to mandate CS (below quoted from here): The standards, approved unanimously, but reluctantly, by the state Board of Education on Thursday, are a framework for computer science education in the state. Other states have advisory standards, but Virginia became the first to have mandatory standards. Board member Anne Holton voiced her concern with the grade level appropriateness of the standards before the vote. “The standards, they seem ambitious to me,” she said. “These are not meant as aspirational standards, they are meant as a mandate that our teachers need to be able to teach.” “We’re clearly leading the nation and that puts an extra burden on us to get it right.” Mark Saunders, the director of the Education Department’s Office of Technology and Virtual Learning, led a presentation of the department’s process in adopting the standards. The presentation satisfied the board enough to vote on the standards rather than delay action until January. I’m reading between the lines here, but I’m guessing the process went something like this: Board members balked at a statewide mandate because they knew they didn’t have the teachers to support it. There certainly are CS teachers in Virginia, many of them prepared by CodeVA. But not enough to support a statewide mandate. Then they were assured that the Virtual Learning system could handle the load, so they voted for it (“reluctantly” as the article says). I don’t know that anybody’s tracking this, but my guess is that it’s already the case that most high school students studying CS in the United States are doing it online. Since we are not producing enough new CS teachers, the push to grow CS education in high schools is probably going to push more CS students online. This is how schools in Arkansas and other states are meeting the requirements for schools to offer CS — simply make the virtual high school CS course available, and you’ve met the requirement. No teacher hiring or professional learning required. I know from log file analyses that we are seeing huge numbers of students coming into our ebooks through virtual high school classes. What are the ramifications of this trend? We know that not everyone succeeds in online classes, that they tend to have much higher withdrawal and failure rates. We know that most people learn best with active learning (see one of my posts on this), and we do not yet know how to replicate active learning methodologies in online classes. In particular, lecture-based learning (which is what much of online learning attempts to replicate) works best for the most privileged students. Our society depends on teachers who motivate students to persevere and learn. Does serving high school CS through online classes increase accessibility, or decrease diversity of those who successfully complete high school CS classes? Will students still be interested in pursuing CS in the future if their only experience is through a mandated online course? Does the end result of mostly-online high school CS classes serve the goals of high-quality CS education for all students? "
"514","2013-03-15","2023-03-24","https://computinged.wordpress.com/2013/03/15/online-learning-outcomes-equivalent-to-traditional-methods-but-what-about-the-drops/","This is a great result, if I can believe it. They took 605 students, some in a traditional course and some in a “hybrid” course, and did pre/post tests. They found no difference in outcomes. Here’s what I’m not sure about: What happened to those students who failed or who withdrew? Other studies have suggested that online courses have higher withdraw/failure rates. Is that the case here? There is only one footnote (page 18) that mentions withdraw/failure: “(27) Note that the pass rate in Figure 1 and Appendix Table A3 cannot be used to calculate the percentage of students who failed the course because the non-passing group includes students who never enrolled or withdrew from the course without receiving a grade.” But that’s it. If you lose more students in one format, and the students you lose are the weaker students (not an unreasonable assumption), then having the same learning gains doesn’t mean for all students. It means that you’ve biased your sample. The researchers asked the students to complete a number of tests and questionnaires before beginning the course and again after completing it, and they analyzed and compared the results between the two groups of students. The results revealed no statistical difference in educational outcomes between the two groups of students. In fact, the students in the hybrid course performed slightly better, but not enough to be statistically significant. via Online Learning Outcomes Equivalent to Traditional Methods, Study Finds — Campus Technology."
"515","2013-11-23","2023-03-24","https://computinged.wordpress.com/2013/11/23/logo-available-through-turtle-art-website/","This is wonderful for several reasons. So great to see a new version of Logo available that runs in a browser. So really great to see something new from Brian Silverman, one of the smartest people I’ve ever met. Brian has taught me a lot about education and computing, and he does wonderful work. Thanks to Gary Stager for pointing me to this. I’ve been teaching a lot of Logo lately, particularly a relatively new version called Turtle Art. Turtle Art is a real throwback to the days of one turtle focused on turtle geometry, but the interface has been simplified to allow block-based programming and the images resulting from mathematical ideas can be quite beautiful works of art. you can see some examples in the image gallery at Turtleart.org. Turtle Art was created by Brian Silverman, Artemis Papert (Seymour’s daughter), and their friend Paula Bonta. Turtle Art itself is a work of art that allows learners of all ages to begin programming, creating, solving problems, and engaging in hard fun within seconds of seeing it for the first time. Since an MIT undergraduate in the late 1970s, Brian Silverman has made Papert’s ideas live in products that often exceeded Papert’s expectations. via A Love Letter : Stager-to-Go."
"516","2013-11-22","2023-03-24","https://computinged.wordpress.com/2013/11/22/paying-to-attract-more-cs-teachers-in-england/","Computing is included as one of the priorities in England’s offer of special funding to attract more teachers. Scholarships up to 25K pounds are pretty impressive. Texas is offering loan forgiveness. I don’t know if there’s anyone else in the US trying this approach. Schools Minister David Laws said more scholarships and bursaries would be available to help recruit the most talented graduates with the potential to be brilliant teachers in key subjects. This would help raise standards in schools and ensure all children were given a good education. Scholarships, awarded by respected subject organisations, will be available to the most talented maths, physics, chemistry and computing trainees. Bursaries will be available to top graduates in maths, physics, chemistry, computing, and languages, in primary and in priority subjects at secondary school (English, history, biology, geography, music, and design and technology). via Bigger bursaries and scholarships to attract more top graduates into teaching – Press releases – GOV.UK."
"517","2013-07-19","2023-03-24","https://computinged.wordpress.com/2013/07/19/get-your-student-loan-forgiven-teach-cs-in-texas/","Talking to teachers from Texas at the CSTA Conference, I heard that the loan forgiveness program isn’t all that good. But the fact that Texas is listing CS as #2 on their “shortage” list is an indication that it’s something that they want more of. The Texas Education Agency (TEA) has received approval from the US Department of Education (USDE) for the 2013-2014 teacher shortage areas. Please note the shortage areas have changed from previous years. The approved shortage areas for the 2013-2014 school year are: The approved shortage areas allow the administrator the ability to recruit and retain qualified teachers and to help reward teachers for their hard work using the loan forgiveness opportunities. School principals can act on behalf of the Commissioner of Education to certify that a teacher has met the minimum qualifications required for certain loan forgiveness programs. via Texas Education Agency – 2013-2014 Teacher Shortage Areas."
"518","2013-11-24","2023-03-24","https://computinged.wordpress.com/2013/11/24/women-gain-in-some-stem-fields-but-not-computer-science-nytimes-com/","Brand new data, same old story.  As you can see, a majority of bachelor’s degrees in some STEM fields — psychology, biosciences, social sciences — were actually given to women in recent years. And women’s participation in these fields has also risen, on net, since 1991, even if there has been some erosion in biosciences in recent years. Women receive less than half of physical sciences degrees, but they earn a much higher share than they did two decades ago. Now take a look at the trends in computer science and engineering. Engineering is slightly more female-heavy than it was in 1991, but not much: 15.5 percent then versus 18.4 percent in 2010, the most recent year in the report. Computer science actually is more male-dominated today than it was two decades ago: Women received 29.6 percent of computer science B.A.’s in 1991, compared with 18.2 percent in 2010. via Women Gain in Some STEM Fields, but Not Computer Science – NYTimes.com."
"519","2013-11-25","2023-03-24","https://computinged.wordpress.com/2013/11/25/teasing-apart-the-issues-of-women-in-computing/","The NYTimes just had a piece about the lack of women in computing. There is, of course, no pop-culture corollary for computer science. A study financed by the Geena Davis Institute on Gender in Media found that recent family films, children’s shows and prime-time programs featured extraordinarily few characters with computer science or engineering occupations, and even fewer who were female. The ratio of men to women in those jobs is 14.25 to 1 in family films and 5.4 to 1 in prime time. Whenever high-ranking people in the tech industry meet, whether at the White House or a Clinton Global Initiative conference, one executive says, “we almost always walk away from the discussion having come to the conclusion we need a television show.” Nearly every tech or nonprofit executive I spoke with mentioned their hope that “The Social Network” has improved the public’s perception of programmers. They also mentioned how bummed they were that the hit film didn’t include more prominent female characters. Meanwhile, the National Academy of Sciences now offers a program called the Sciences and Entertainment Exchange that gives writers and producers free consultation with all kinds of scientists. Natalie Portman’s character in the superhero movie “Thor,” for instance, started out as a nurse. After a consultation with scientists introduced through the exchange, she became an astrophysicist. via I Am Woman, Watch Me Hack – NYTimes.com. It’s a big and complicated issue why there are so few women in computing in the US. The author of the NYTimes article thinks that it’s about exposure. Part of the issue, it seems, is exposure. Most people don’t come into contact with computer scientists or engineers in their daily lives, and don’t really understand what they do. American schools don’t do a great job of teaching computer science skills either. Trying to remedy this are numerous nonprofit and educational organizations, among them Code.org, which lobbies to get more computer science classes in schools. Others try to provide computer science lessons outside of a traditional school setting. Girls Who Code, for example, has eight-week boot camps that teach middle and high school girls programming skills – in languages like Java, PHP, and Python – as well as algorithms, Web design, robotics, and mobile app development. via Nudging Girls Toward Computer Science – NYTimes.com. Which seems to say that it’s mass media (like Hollywood) that deters women from computer science — the argument suggested below. I disagree. Yes, students are getting uninformed ideas about computer science from mass media, but that’s because they don’t see the real thing anywhere. People don’t leave Disneyworld thinking that six-foot rats can talk — because they have some other experience of rodents. Our real challenge is giving students the opportunity to see a real programmer, real programming, real program code. There’s a well-researched, much-fretted-over dearth of women in the tech sector, more specifically in the field of computer science. According to the Times’ Catherine Rampell, the dismal numbers of women majoring in computer science, or becoming computer programmers don’t seem to be improving, either: just 0.4 percent of all female college freshmen say they plan on majoring in computer science, despite the fact that, as far as professional fields go, computer science and engineering offer college grads some of the most promising employment opportunities. We need computer programs and bridges, college, not another pack of aimless fedora-wearers chain-smoking Parliaments outside of the liberal arts building. via How Hollywood Helps Deter Women from Computer Science."
"520","2013-11-01","2023-03-24","https://computinged.wordpress.com/2013/11/01/what-to-do-about-laptops-in-lectures-worse-for-the-bystanders/","Fascinating result: The bystanders have their learning impacted more than the ones who opened up the laptop. There is a fundamental tension here, and I don’t know how to resolve it. On the one hand, I like it when students have their laptops in class. Many of them are more comfortable taking notes this way than longhand. In the middle of a lecture I might ask someone to look something up that I don’t know off the top of my head. On the other hand, the potential for distraction is terrible. I’ve walked in the back of the classroom of many of my colleagues and seen that perhaps 50% of the students are on the Web. via What to do about laptops in lectures? – Daniel Willingham."
"521","2013-11-04","2023-03-24","https://computinged.wordpress.com/2013/11/04/strong-vision-drives-growth-in-course-at-princeton/","The course at Princeton does sound really cool, but I’m not convinced that the course content/curriculum is driving the growth. As we found with MediaComp, the curriculum seems to have little to do with enrollment in a course. I wonder what comparable courses (say, at Harvard or Yale) look like in terms of enrollment. I strongly agree with the argument that they’re making below for the importance of computational literacy. Sedgewick said he is pleased that the course leads many students to a greater interest in computer science, but he feels strongly that computers are so integral to modern society that a basic understanding of the field should be a part of any education. In the introduction to their textbook, “Introduction to Programming in Java,” Sedgewick and Wayne say that in the modern world computer science cannot be left to specialists. “The basis for education in the last millennium was reading, writing and arithmetic; now it is reading, writing and computing,” they write. via story-04 – Princeton Engineering."
"522","2013-11-05","2023-03-24","https://computinged.wordpress.com/2013/11/05/say-goodbye-to-myers-briggs-the-fad-that-wont-die/","Once in our Learning Sciences seminar, we all took the Myers-Briggs test on day 1 of the semester, and again at the end. Almost everybody’s score changed. So, why do people still use it as some kind of reliable test of personality? A test is reliable if it produces the same results from different sources. If you think your leg is broken, you can be more confident when two different radiologists diagnose a fracture. In personality testing, reliability means getting consistent results over time, or similar scores when rated by multiple people who know me well. As my inconsistent scores foreshadowed, the MBTI does poorly on reliability. Research shows “that as many as three-quarters of test takers achieve a different personality type when tested again,” writes Annie Murphy Paul in The Cult of Personality Testing, “and the sixteen distinctive types described by the Myers-Briggs have no scientific basis whatsoever.” In a recent article, Roman Krznaric adds that “if you retake the test after only a five-week gap, there’s around a 50% chance that you will fall into a different personality category.” via Say Goodbye to MBTI, the Fad That Won’t Die | LinkedIn."
"523","2013-11-06","2023-03-24","https://computinged.wordpress.com/2013/11/06/cs-teacher-repositories-cs-oer-portal-ensemble-csta-cas-and/","I just received this via email: We would like to inform you that we have added recently many new resources to the Computer Science Open Educational Resources Portal (CS OER Portal) (http://iiscs.wssu.edu/drupal/csoer ). For those of you who have not visited it, the Portal hosts a rich collection of links to open teaching/learning materials targeted specifically the area of Computer Science. It provides multiple ways for locating resources, including search with filtering the results by CS categories, material type, level, media format, etc., as well as browsing by institutional (OpenCourseWare) collections, by CS categories, or by topics as recommended by the ACM/IEEE Computer Science Curriculum. The browsing functionality is supplemented with recommendations for similar courses/resources. My first thought was, “Is this competition for Ensemble, the big NSF-sponsored digital library of CS curricular materials?” If we’re specifically thinking just about computing in schools (K-12 in the US), we should also consider the CSTA Source Web Repository and the Resources section of the Computing at Schools website (which is pretty big and growing almost daily). Specifically for a particular tool or approach, there’s the Greenfoot Greenroom, ScratchEd for Scratch Teachers and other Educators, the Alice teacher’s site, the TeaParty site (for the Alice + MediaComp website), and of course, the Media Computation site. I’m sure that there are many others — for particular books (like this one introducing Python with Objects), for particular curricular approaches (like Exploring Computer Science and CSUnplugged), and even for particular methods (I reference the Kinesthetic Learning Activities site in my TA preparation class). It’s really great that there are so many repositories, so many resources to help CS teachers, and so many people developing and sharing resources. I get concerned when I’m in a meeting where we’re talking about how to help CS teachers, and someone suggests (and it really happens in many of the meetings I attend), “If we only had a repository where teachers could find resources to help them…” No, I really don’t think that more repositories is going to solve any problems at this point."
"524","2013-11-07","2023-03-24","https://computinged.wordpress.com/2013/11/07/doctoral-fellowships-available-in-computational-craft-lab/","What a cool idea! A computational craft lab! Announcing… 4-year Doctoral Fellowship in Digital Fabrication & Learning Utah State University Instructional Technology & Learning Sciences Utah State University’s Instructional Technology and Learning Sciences (ITLS) department is pleased to announce the availability of a prestigious four-year doctoral fellowship for a new doctoral student interested in digital fabrication, the maker movement, and education. This involves bringing technologies as diverse as 3-D printers, sewable circuitry, low cost microcontrollers, and robotics to education. The fellowship provides full tuition and a stipend for four years, beginning Fall of 2014. The fellow will work with two leading researchers in the ITLS department, Drs. Victor Lee and Deborah Fields,who have produced innovative work in the areas of creative learning technologies, craft and computation, informal and formal learning environments, online social networking sites, and STEM education. The fellow will have numerous professional development and networking opportunities as well as access to the newly created “Computational Craft Lab” with brand new equipment and materials for digital fabrication. Drs. Lee and Fields have a strong reputation for providing mentorship and time to doctoral students, involving them in all aspects of research and implementation. This competitive fellowship is available for one student beginning doctoral studies in August 2014. Interested students should contact Victor Lee or Deborah Fields as soon as possible. Please include a resume and letter describing your research background, interests, and how they align with this fellowship. Victor Lee: victor.lee@usu.edu Deborah Fields: deborah.fields@usu.edu"
"525","2013-11-08","2023-03-24","https://computinged.wordpress.com/2013/11/08/common-core-whats-our-goal/","I’m not convinced that the purpose of Common Core is to prepare students for four year universities. Shouldn’t the common core be the minimum standard? This issue is coming up for us at ECEP as we work in South Carolina. In fact, we’re addressing it today in our Computing Education in South Carolina summit. Should everyone be required to take serious CS in high school? Or is it that everyone should have access to serious CS (e.g., preparation for undergrad CS courses), and everyone should know more about CS, but the college-going students are the ones who need the serious CS? One of the three drafters of the Common Core math standards has publicly admitted that Common Core – which moves Algebra I from 8th to 9th grade and includes little trigonometry, no pre-calculus, and no calculus – is designed to prepare students for non-selective community colleges, not four-year universities. In fact, President Bud Peterson of Georgia Tech has stated that a student cannot go to Tech without having had Algebra I in 8th grade and calculus by senior year. In other words, Common Core won’t get kids into Georgia Tech. This is the “quality” that has so impressed the Fordham lobbyists? via Common Core: Substandard educational scheme. Georgia can do… | Get Schooled | www.ajc.com."
"526","2013-11-09","2023-03-24","https://computinged.wordpress.com/2013/11/09/nsf-funding-new-improving-undergraduate-stem-education/","DUE funding is back! I wrote about TUES being closed down. This is the next iteration of a program in the NSF Division of Undergraduate Education to support STEM learning. A well-prepared, innovative science, technology, engineering and mathematics (STEM) workforce is crucial to the Nation’s health and economy. Indeed, recent policy actions and reports have drawn attention to the opportunities and challenges inherent in increasing the number of highly qualified STEM graduates, including STEM teachers. Priorities include educating students to be leaders and innovators in emerging and rapidly changing STEM fields as well as educating a scientifically literate populace; both of these priorities depend on the nature and quality of the undergraduate education experience. In addressing these STEM challenges and priorities, the National Science Foundation invests in research-based and research-generating approaches to understanding STEM learning; to designing, testing, and studying curricular change; to wide dissemination and implementation of best practices; and to broadening participation of individuals and institutions in STEM fields. The goals of these investments include: increasing student retention in STEM, to prepare students well to participate in science for tomorrow, and to improve students’ STEM learning outcomes. via nsf.gov – EHR – Funding – Improving Undergraduate STEM Education – US National Science Foundation (NSF)."
"527","2013-04-24","2023-03-24","https://computinged.wordpress.com/2013/04/24/nsf-tues-is-cancelled/","The report on the requested NSF budget for 2014 has a pretty dramatic list of programs that have been cancelled as part of the administration’s desire to reorganize and “consolidate” federal STEM education programs. CAUSE is an NSF-wide investment that incorporates funding from established programs in the EHR directorate and other NSF directorates funded though the Research and Related Activities (R&RA) account. It is created by consolidating three Division of Undergraduate Education (DUE) programs: STEM Talent Expansion Program (STEP), Widening Implementation and Demonstration of Evidence- based Reforms (WIDER), and Transforming Undergraduate Education in STEM (TUES); several R&RA programs: BIO’s Transforming Undergraduate Biology Education (TUBE); ENG’s Research in Engineering Education and Nanotechnology Undergraduate Education (NUE); GEO’s Geosciences Education and Opportunities for Enhancing Diversity in the Geosciences (OEDG); and the cross-NSF program, Climate Change Education (CCE). TUES used to be the Course, Curriculum, and Laboratory Improvement (CCLI) program. TUES and CCLI have funded most of the federally-funded efforts presented at SIGCSE. Earlier, CE21 was cancelled, and its replacement isn’t announced. An article in the latest Science magazine describes the new programs (and how surprised everyone in the STEM education community has been). K-12 belongs in the Department of Education (what does this mean for CS10K?), undergrad and grad in NSF, and informal ed in the Smithsonian (the Smithsonian?!?). As far as I can tell, the NSF budget document is the only reference to the new NSF CAUSE (Catalyzing Advances in Undergraduate STEM Education). There is no solicitation, and no date for submitting proposals. Bottomline: the programs that have funded most of CS curriculum support are now gone, and the replacements do not yet exist. I hope that this all works out well, but it’s a little scary right now."
"528","2013-04-15","2023-03-24","https://computinged.wordpress.com/2013/04/15/disappointing-nsf-ce21-is-gone/","From Farnham Jahanian’s email to the CISE-Announce list on the new NSF budget request from the President: CISE continues its focus on STEM-C Partnerships (formerly, the Computing Education for the 21st Century (CE21) program) in order to increase the pool of students and teachers who develop and practice computational and data competencies in a variety of contexts and to prepare more students to pursue degrees in computing, computation, and data-intensive fields of study. It might be that STEM-C will fund everything that CE21 funded (can’t find an announcement yet to see), but the departure of a program explicitly named “Computing Education” is a loss for those of us who are trying to grow the field of Computing Education Research. If it’s not named, it’s easier to ignore. "
"529","2013-11-11","2023-03-24","https://computinged.wordpress.com/2013/11/11/cs-ed-in-us-five-challenges-and-call-to-action/","The UChicago OS4CS study is now finished, and they have now summarized across all the components. The main five challenges are: 1. There is no shared understanding of what Computer Science is. 2. More comprehensive, quality, instructional resources are needed. 3. Computer science is not prioritized in schools. (An issue that I considered when explaining the lack of CS Ed in the US.) 4. There is a need for more CS teachers. 5. CS teachers are isolated. THE “BUILDING AN OPERATING SYSTEM FOR COMPUTER SCIENCE” (OS4CS) STUDY was designed as a collaborative research and communication effort to establish a more comprehensive understanding of our nation’s current high school computer science (CS) teaching population, the support they have, and contexts in which they teach. The OS4CS study has five major components: (1) the Professional Development (PD) Landscape Study; (2) the Teacher Capacity Study; (3) Stories from the Field; (4) the CS in Schools Study; and (5) the Design Studio. While each component of the study can be examined independently, when considered together they complement each other, providing a broad view of the issues affecting CS education as viewed through the lenses of different stakeholders. The study includes perspectives from teachers, PD providers, school administrators, community leaders, and others. via Computer Science – Five Challenges and Call to Action – The Center for Elementary Mathematics and Science Education."
"530","2013-11-12","2023-03-24","https://computinged.wordpress.com/2013/11/12/entrepreneurial-moocs-to-teach-cs-different-values-different-evaluation/","Lisa Kaczmarczyk wrote a blog post about a bunch of the private, for-profit groups teaching CS who visited the ACM Education Council meeting on Nov. 2. I quoted below the section where the Ed Council asked tough questions about evaluation. I wonder if the private efforts to educate mean the same things about evaluation as the academic and research folks mean by “evaluation.” There are different goals and different value systems between each. Learning for all in public education is very different from a privatized MOOC where it’s perfectly okay for 1-10% to complete. Of course there was controversy; members of the Ed Council asked all of the panelists some tough questions. One recurrent theme had to do with how they know what they are doing works. Evaluation how? what kind? what makes sense? what is practical? is an ongoing challenge in any pedagogical setting and when you are talking about a startup as 3 out of the 4 companies on the panel were in the fast paced world of high tech – its tricky. Some panelists addressed this question better than others. Needless to say I spent quite a bit of time on this – it was one of the longer topics of discussion over dinner at my table. Neil Fraser from Googles Blockly project said some things that were unquestionably controversial. The one that really got me was when he said several times, and with followup detail that one of the things they had learned was to ignore user feedback. I can’t remember his exact words after that but the idea seemed to be that users didnt know what was best for them. Coming on the heels of earlier comments that were less than tactful about computing degree programs and their graduates … I have to give Neil credit for having the guts to share his views. via Interdisciplinary Computing Blog: Entrepreneurial MOOCs at the ACM Ed Council Meeting."
"531","2013-11-13","2023-03-24","https://computinged.wordpress.com/2013/11/13/when-flipping-classrooms-may-not-make-much-difference/","This paper is getting a lot of discussion here at Georgia Tech: In preliminary research, professors at Harvey Mudd College haven’t found that students learn more or more easily in so-called flipped courses than in traditional classes, USA Today reports. In flipped courses, students watch professors’ lectures online before coming to class, then spend the class period in discussions or activities that reinforce and advance the lecture material. Earlier this year, the National Science Foundation gave four professors at the college in Claremont, Calif., a three-year grant for $199,544 to study flipped classrooms. That research isn’t complete yet, but the professors already tried flipping their own classes last year and found “no statistical difference” in student outcomes. via QuickWire: ‘Flipping’ Classrooms May Not Make Much Difference – Wired Campus – The Chronicle of Higher Education. The reason why it’s generating a lot of discussion is because we know that it can make a difference to flip a classroom. Jason Day and Jim Foley here at Georgia Tech did a careful and rigorous evaluation of a flipped classroom seven years ago (see IEEE paper on their study). We all know this study and take pride in it — it was really well done. It can work. The Harvey Mudd study also shows that it can be done in a way that it doesn’t work. That’s really the story for all educational technology. It can work, but it’s not guaranteed to work. It’s always possible to implement any educational technology (or any educational intervention at all) in such a way that it doesn’t work."
"532","2013-11-14","2023-03-24","https://computinged.wordpress.com/2013/11/14/what-really-helps-get-women-a-stem-college-degree/","This article highlights Georgia Tech as a negative example: “Just 37% of this year’s freshman class at Georgia Tech is female. And that’s increase over previous years, thanks in part to the school’s dedicated women’s recruitment team.” But I think that the author doesn’t really get what draws women into STEM (or any other field). Below, the argument is that there are so many women in CS in Qatar because the government emphasizes it. I visited Qatar, and spoke to women in CS there — no one once said that they were there because their government encouraged them. It had far more to do with values and family concerns. I’ll bet that Georgia Tech has a far larger recruitment effort than at Harvey Mudd, even though Harvey Mudd is getting more success drawing women into computing. It’s way more complicated than recruiting and emphasizing. Getting young women interested and immersed in computer science programs comes at a time when one million new jobs in tech-related fields will be created in the next decade. But fewer women are going into these fields. Just about 2% of women have a degree in a high-tech field, according to Catalyst. Currently, a quarter of all Americans in computer-related occupations are women, compare that figure to countries like Oman and Qatar, whose governments emphasize girls’ education and STEM fields. via Wanted: Women who want a college degree in a STEM field."
"533","2013-11-15","2023-03-24","https://computinged.wordpress.com/2013/11/15/data-typing-might-be-important-for-someone/","Excellent post and interesting discussion at Neil Brown’s blog, on the question of the role of types for professional software developers and for students. I agree with his points — I see why professional software developers find types valuable, but I see little value for novice programmers nor for end-user programmers. I have yet to use a typing system that I found useful, that wasn’t just making me specify details (int vs Integer vs Double vs Float) that were far lower level than I cared about nor wanted to care about. Broadly, what I’m wondering is: are dynamically/flexibly typed systems a benefit to learners by hiding complexity, or are they a hindrance because they hide the types that are there underneath? (Aside from the lambda calculus and basic assembly language, I can’t immediately think of any programming languages that are truly untyped. Python, Javascript et al do have types; they are just less apparent and more flexible.) Oddly, I haven’t found any research into these specific issues, which I suspect is because these variations tend to be per-language, and there are too many other confounds in comparing, say, Python and Java — they have many more differences than their type system. via The Importance of Types | Academic Computing."
"534","2013-11-16","2023-03-24","https://computinged.wordpress.com/2013/11/16/the-include-fellowship-to-high-school-students-from-she-inspiring-women-to-empower-computer-science/","Sign up by Dec 11! (Remind students that Stanford is a fabulous place to visit.) The #include Fellowship provides resources and content to ambitious high school students who wish to cultivate their own technical skills and facilitate conversations within their communities about computer science & the importance of diversity in technology. Each High School student will work with a College mentor to bring technology into their communities. High School students may apply to present their work over the course of the year at the #include Summit (April 3-5) at Stanford University. via she++: Inspiring Women to Empower Computer Science."
"535","2013-11-16","2023-03-24","https://computinged.wordpress.com/2013/11/16/try-out-the-hour-of-code-tutorials-for-csed-week-2013/","Try out the tutorials for the Hour of Code for CSEd Week 2013. Choose a tutorial for your students Check out the tutorials and pick one for your class. Note: we have not yet received the Hour of Code submissions from Scratch or KhanAcademy, so check back for those. Also, more international/multilingual support is on its way. Go through the tutorial yourself so you can help students during the Hour of Code. Test tutorials on student computers or devices. Make sure they work properly (with sound and video). Preview the congrats page to see what students will see when they finish. If the tutorial you choose works best with sound, provide headphones for your class, or ask students to bring their own. via Learn | The Hour of Code 2013."
"536","2013-11-18","2023-03-24","https://computinged.wordpress.com/2013/11/18/please-sign-petition-to-make-computer-science-count-as-a-core-subject-in-california/","Debra Richardson, our ECEP Partner in California, sent this to me yesterday. Please do support this initiative! Please sign ACCESS’ petition to George C. Johnson, Chair of University of California Board of Admissions and Relations with Schools; William Jacob, Chair of UC Academic Senate; Diana Wright Guerin, Chair of CSU Academic Senate: Computer science drives job growth and innovation in California. Help us make computer science count as a core subject requirement—mathematics or science—for admission to UC and CSU campuses. Please sign the petition and join this campaign: http://chn.ge/1bvfqPx "
"537","2013-11-19","2023-03-24","https://computinged.wordpress.com/2013/11/19/one-reason-we-have-so-much-engineering-and-so-little-computer-science-taught-at-us-high-schools-acm-inroads/","Joe Kmoch wrote an interesting follow-on to my blog post about why we have so little CS ed in the US. Why is that engineering is succeeding so much more than CS in high schools in the US? He suggests that (in part) it’s because engineering is getting the PD right. I think the reason is that groups like Project Lead the Way (PLTW) offer an “off the shelf” high quality program, vetted by engineers. The attractiveness of this is that the school and students get access to a number of well-written up-to-date courses and they also get access to intensive professional development for teachers who want to teach a particular PLTW course. Teachers must not only take but also pass the two-week intensive summer course before being allowed to teach a particular course. There is regular monitoring of schools in terms of offering a minimal 3-course sequence of engineering courses and evaluating how well these courses are being taught. In computer science we have really never had such a program available. The AP is not such a program. If a school wants to teach a computer science course, they have to find a teacher who is willing to put together a course syllabus, and then teach that course. (For AP, the course must be audited for fidelity). There really isn’t any professional development required to teach any kind of computer science course in most states. via One reason we have so much engineering and so little computer science taught at US high schools. | ACM Inroads."
"538","2013-11-20","2023-03-24","https://computinged.wordpress.com/2013/11/20/a-set-of-top-computer-science-education-blogs-from-drtomcrick/","I’m honored and pleased to be in this set! Worth checking out, every one. Further to my most-read blog post from May 2012: A set of top Computer Science blogs, 80,000 hits and counting, here’s a follow-up: blogs on computer science education.As before, instead of a list, it more closely resembles a set: the order is irrelevant and there are no duplicate elements; membership of this set of blogs satisfies all of the following conditions:they focus on computer science education research, policy and practice;they are of consistently high quality;I regularly read them. via A set of top Computer Science Education blogs | Computing: The Science of Nearly Everything."
"539","2013-11-21","2023-03-24","https://computinged.wordpress.com/2013/11/21/what-sir-ken-got-wrong-and-what-the-blogger-got-wrong-too/","Really interesting blog post, dissecting the mistakes made in a very popular TED talk. Sir Ken’s ideas aren’t just impractical; they are undesirable. Here’s the trouble with his arguments: 1. Talent, creativity and intelligence are not innate, but come through practice. 2. Learning styles and multiple intelligences don’t exist. 3. Literacy and numeracy are the basis for creativity. 4. Misbehaviour is a bigger problem in our schools than conformity. 5. Academic achievement is vital but unequal, partly because… 6. Rich kids get rich cultural knowledge, poor kids don’t. via What Sir Ken Got Wrong | Pragmatic Education. I don’t completely agree with all of Pragmatic Education’s arguments. But 90% — I think he gets what’s wrong with Sir Ken’s arguments."
"540","2013-11-26","2023-03-24","https://computinged.wordpress.com/2013/11/26/sew-electric-new-book-on-lilypad-from-leah-buechly/","A new book on LilyPad based projects: If you’re interested in interactive toys, smart accessories, or light-up fashions, this book is for you! Sew Electric is a set of hands-on LilyPad Arduino tutorials that bring together craft, electronics, and programming. The book walks you through the process of designing and making a series of quirky customizable projects including a sparkling bracelet, a glow in the dark bookmark, a fabric piano, and a monster that sings when you hold its hands. Play with cutting-edge technologies and learn sewing, programming, and circuit design along the way. It’s a book for all ages. Explore the projects with your friends, your parents, your kids, or your students! via SEW ELECTRIC | DIY PROJECTS THAT COMBINE FABRIC, ELECTRONICS AND PROGRAMMING."
"541","2013-11-27","2023-03-24","https://computinged.wordpress.com/2013/11/27/a-sign-of-the-higher-education-times-kennesaw-state-and-southern-polytechnic-will-consolidate/","I know faculty at both KSU and SPSU. My PhD student, Briana Morrison, is faculty at SPSU. No one that I spoke to had any idea this was happening. These aren’t small schools. SPSU is one of the few universities in Georgia with a publicly-funded engineering program. KSU+SPSU is considerably larger than Georgia Tech. Is this part of the consolidation of higher education foretold by the MOOCopalyptic visions? Kennesaw State University and Southern Polytechnic State University will consolidate to form a new institution to be named Kennesaw State University. The Board of Regents of the University System of Georgia will be asked by Chancellor Hank Huckaby to approve the consolidation plan during its upcoming November meeting. “We must continue to carefully examine our structure and programs to ensure we have the right model that best serves our students and the state,” Huckaby said. “This proposal offers us some exciting possibilities to enlarge our academic outreach through the existing talent and resources at both these institutions.” The decision to consolidate the two institutions, whose combined enrollment this fall is 31,178 students and combined annual economic impact on the region is $1.15 billion via Kennesaw State and Southern Polytechnic Will Consolidate – Newsroom – University System of Georgia."
"542","2013-11-28","2023-03-24","https://computinged.wordpress.com/2013/11/28/too-little-and-too-much-self-efficacy-is-bad-for-interest/","What an interesting paper! (Pun slightly intended.) In this paper from Paul Silvia, he found experimentally that self-efficacy and interest are related on a bell-shaped curve. Too little self-efficacy makes a task seem too daunting and uninteresting. Too much makes the task boring. This is important because we know that self-efficacy is among the most significant factors influencing non-majors success in learning to program. It’s clear that there’s a sweet spot that we’re aiming for. "
"543","2013-10-31","2023-03-24","https://computinged.wordpress.com/2013/10/31/uk-higher-education-lecturers-and-staff-strike/","I have a CS Ed PhD depth exam meeting later this morning. One of the committee members can’t make it, because she’s a UK faculty member who is going on strike today. (BBC coverage here.) The concerns of the strikers (press release linked below) seem pretty similar to the issues that we have in the United States: No pay raises for faculty (University System of Georgia faculty haven’t had a pay raise since 2008), big salaries for upper administration, and increasing middle management bloat. Interesting to see if this picks up on this side of the Atlantic. UCU, UNISON and Unite trade unions announced today that their members working in higher education will walk out on Thursday 31 October in an increasingly bitter row over pay. Staff have been offered a pay rise of just 1% this year, which means they have suffered a pay cut of 13% in real terms since October 2008. Will Hutton this weekend highlighted that as one the most sustained cut in wages since the Second World War. The squeeze on staff pay comes at a time when pay and benefits for university leaders increased, on average, by more than £5,000 in 2011-12, with the average pay and pensions package for vice-chancellors hitting almost £250,000. via UCU – University and College Union – University strike dates announced."
"544","2013-12-30","2023-03-24","https://computinged.wordpress.com/2013/12/30/the-acmieee-2013-computing-curriculum-is-released-in-the-nick-of-time/","Posted by Mehran Sahami to the SIGCSE members list. Congratulations to the team for finishing it in time. Dear Colleagues, We are delighted to announce the release of the ACM/IEEE-CS Computer Science Curricula 2013 (CS2013) Final Report. The report is available at the CS2013 website (http://cs2013.org) or directly at: http://cs2013.org/final-draft/CS2013-final-report.pdf (The report will also soon be posted at the ACM website as well as at doi.org.) The CS2013 Final Report contains guidance for undergraduate programs in computer science, including a revised Body of Knowledge, over 80 course exemplars (showing how the CS2013 Body of Knowledge may be covered in a variety of actual fielded courses), and 5 full curricular exemplars from a variety of educational institutions. The report also contains discussions of characteristics of CS graduates, design dimensions in introductory courses, and institutional challenges in CS programs, among other topics. The report has been endorsed by both the ACM and IEEE-Computer Society. We hope you find it useful. CITING THE CS2013 FINAL REPORT To cite the CS2013 report, please use the canonical citation provided below in ACM format and BibTex. ACM format: ACM/IEEE-CS Joint Task Force on Computing Curricula. 2013. Computer Science Curricula 2013. ACM Press and IEEE Computer Society Press. DOI: http://dx.doi.org/10.1145/2534860 BibTex: @techreport{CS2013, title = {Computer Science Curricula 2013}, author = {ACM/IEEE-CS Joint Task Force on Computing Curricula}, month = {December}, year = {2013}, institution = {ACM Press and IEEE Computer Society Press}, url = {http://dx.doi.org/10.1145/2534860}, doi = {10.1145/2534860} } Warm regards, Mehran Sahami and Steve Roach Co-Chairs, CS2013 Steering Committee CS2013 Steering Committee ACM Delegation Mehran Sahami, Chair (Stanford University) Andrea Danyluk (Williams College) Sally Fincher (University of Kent) Kathleen Fisher (Tufts University) Dan Grossman (University of Washington) Beth Hawthorne (Union County College) Randy Katz (UC Berkeley) Rich LeBlanc (Seattle University) Dave Reed (Creighton University) IEEE-CS Delegation Steve Roach, Chair (Exelis Inc.) Ernesto Cuadros-Vargas (Univ. Catolica San Pablo, Peru) Ronald Dodge (US Military Academy) Robert France (Colorado State University) Amruth Kumar (Ramapo College of New Jersey) Brian Robinson (ABB Corporation) Remzi Seker (Embry-Riddle Aeronautical Univ.) Alfred Thompson (Microsoft)"
"545","2018-11-02","2023-03-24","https://computinged.wordpress.com/2018/11/02/fixing-mathematical-notation-with-computing-and-proving-it-with-education/","I was looking for a paper that I needed to review last night, and came upon these paragraphs in the paper I brought up by mistake.  This is bold language: It might be argued that mathematical notation (MN) is adequate as it is, and could not benefit from the infusion of ideas from programming languages. However, MN suffers an important defect: it is not executable on a computer, and cannot be used for rapid and accurate exploration of mathematical notions. The paper I found in my archive “Computers and Mathematical Notation” doesn’t seem to be published anywhere.The author is Kenneth E. Iverson, the inventor of APL. This paper echoes some of the thoughts in Iverson’s 1980 Turing Award Lecture, “Notation as a Tool of Thought.” The unpbulished paper is notable because he wrote it in J, his successor language to APL. He realized that his languages would be more accessible if they used the ASCII character set. J (which you can find at http://jsoftware.com/) is essentially APL, but mapped to a normal keyboard. The attempt to “fix” mathematical notation (“suggestions for improvement,” to be exact) is bold and interesting. What makes his argument particularly relevant for this blog is how he made the argument. How do you “prove” that you have improved on traditional mathematics notation? Iverson decided that education was the way to do it. He wrote mathematics textbooks, using J. He wanted to show that basic mathematics is more explorable using his notation. I find this network of papers and textbooks fascinating. I love the goal of inventing a programming notation, not to develop software, but to improve the expression and exploration of mathematics. (In that sense, J is like Mathematica.) I am intrigued by the challenge of how to show that you succeeded, and to use education as a way to demonstrate that success. I’m amazed at these multiple textbooks that Iverson wrote and released for free, to encourage exploration of mathematical ideas with J. This week, I was informed that I will be receiving the 2019 SIGCSE Award for Outstanding Contribution to CS Education. The award will be presented at the 2019 SIGCSE Technical Symposium to be held in Minneapolis, MN from Feb 27 – March 2, 2019. I am honored and thrilled. SIGCSE has been my academic home since my first ACM publication at SIGCSE’94. The list of awardees is stunning, including my advisor, Elliot Soloway, Alan Kay, Hal Abelson, Jan Cuny, Alan Perlis, Judith Gal-Ezer, Sally Fincher, Grace Murray Hopper, Wirth, Knuth, and Dijkstra (among many others — the award started in 1981). It’s an impressive club I’m joining. That announcement didn’t feel like enough for a blog post in itself, so I’m just tacking it on down here. I’ll probably write more about it when I figure out what I’m going to say in my talk. "
"546","2016-08-17","2023-03-24","https://computinged.wordpress.com/2016/08/17/from-computational-thinking-to-computational-participation-in-k-12-education-yasmin-kafai-in-cacm/","Yasmin Kafai has been a friend and mentor to me for years — she introduced me to my PhD advisor, Elliot Soloway. Her book with Quinn Burke, Connected Code, updates thinking about the role of computing and programming in schools. They emphasize an idea they call Computational Participation as a contrast with computational thinking. I asked Yasmin to do a CACM Viewpoint on the idea, and it’s published this month. Yasmin has shared the paper on Academia.edu. In the 1980s many schools featured Basic, Logo, or Pascal programming computer labs. Students typically received weekly introductory programming instruction. These exercises were often of limited complexity, disconnected from classroom work, and lacking in relevance. They did not deliver on promises. By the mid-1990s most schools had turned away from programming. Pre-assembled multimedia packages burned onto glossy CD-ROMs took over. Toiling over syntax typos and debugging problems were no longer classroom activities. Computer science is making a comeback in schools. We should not repeat earlier mistakes, but leverage what we have learned. Why are students interested in programming? Under what circumstances do they do it, and how? Computational thinking and programming are social, creative practices. They offer a context for making applications of significance for others, communities in which design sharing and collaboration with others are paramount. Computational thinking should be reframed as computational participation. Source: From Computational Thinking to Computational Participation in K-12 Education | August 2016 | Communications of the ACM"
"547","2016-08-15","2023-03-24","https://computinged.wordpress.com/2016/08/15/supports-for-blind-cs-students-guest-blog-post-from-andreas-stefik/","After my post last week on learning CS and programming by blind students, Andreas Stefik sent me an email. Stefik has been working for years on these issues, and created the first programming language explicitly designed for blind programmers, Quorum, He provided additional information on some of the things I’d talked about, and corrected me, too. I asked if I could turn his message into a blog post, and he kindly agreed. Thanks! Mark, I came across your latest blog (about learning CS blind) and thought I would add a couple thoughts. Your student has it pretty spot on for the most part, but there’s a lot of variation in this community and thought I would add my perspective, for what it’s worth. First, if you aren’t aware of it, there’s a mailing list that many blind people use to discuss issues they face in blind programming called prog-l. I’ve lurked on there for years to try to get a sense of the diversity of needs in the community. It has everyone from total learners to experienced pros, with various levels of vision. People vary quite a bit in this community, so it’s a nice place to probe people’s brains and get opinions. Second, blind CS students should know there’s a conference they can participate in called EPIQ. That’s our national Quorum conference, which is heavily attended by TVIs (teachers for the visually impaired) and blind folks. This year, the conference was mostly on writing 3D games in Quorum (audio + visual). It’s the first time we’ve tried to make something as complicated as 3D gaming accessible, but I think it went really well. If students want to go, they should apply. We almost always have funding to help students come out. In terms of the post, there’s only one thing I would mention that is maybe questionable. That is when you say: The second surprise was about their tools. They showed me Visual Studio and EdSharp, a plain text editor developed by a blind programmer for blind programmers. I asked what features made an editor good for blind programmers. They said, “It works with screen readers.” And really, that’s it. They don’t want specialized tools with non-standard interfaces because of the cognitive load of switching between the standard screen reader interfaces and a novel interface. This is a tricky issue and in my view is not correct. Screen readers are not universal in the same way programming languages are not and blind programmers vary massively in their tool preferences. Different programming languages also connect to them in different ways (some good, some less so). Further, there is no such thing as a universal “screen reader API.” That doesn’t exist. I want to make this clear because it sounds like there would be, or at least should be, and it’s counterintuitive that it’s not true. On the web, it is true (it is called Aria), but not for desktops. A few examples: This isn’t to say that Apple doesn’t put a lot of work into making an API for accessibility: https://developer.apple.com/accessibility/ They do and it’s fine. But, the moment you stray from their API, which is in their languages, on their hardware, with their rules, it all breaks. Even if you connect into their API, voice over itself doesn’t have the kind of scripting capabilities that something like NVDA has, to my knowledge. Now, this is even trickier once you start taking other platforms into account. Most platforms have some mechanism by which they claim accessibility works. Oracle’s Java has an accessibility API. Does it work? Not very well. Other languages (e.g., smalltalk): total crapshoot. Java on Android? Totally different. Microsoft’s API is one of the better ones — yet somehow even Microsoft Edge isn’t accessible (yet), even though IE was. The language wars impacts this community, if nothing else because it makes this stuff such a mess at the global level. So, when I hear that an individual thinks connecting to a screen reader is good enough for an editor, I think that’s not quite right. That’s true today just because the field as a whole is incredibly inaccessible across the board, so when you get something — anything — working well, you suffer through and learn it. This is why some of my blind friends just use notepad and the console. However, we know from research that just a plain old editor for code, where you move up and down line-by-line is incredibly tedious and inefficient. Ignoring my own work on the topic (e.g., blind debugging) for a moment, check out this wonderful paper by one of Richard Ladner’s students (Catherine Baker): http://dl.acm.org/citation.cfm?id=2702589&CFID=653320883&CFTOKEN=24820033 The lesson: Even simple navigation aids in an editor make a big difference. For debugging, compiler errors, and so many other issues, this is true as well, although not in her paper. We try to combine all of the literature into Sodbeans (especially version 6), but our tools have their accessibility flaws as well. Our biggest flaw is caused largely by the fact that we connect through Java, which has accessibility problems caused by the JDK itself. Even with that flaw though, it’s used heavily in residential schools for the blind nowadays. Anyway, this is a lot more than I was planning to write, but of course, I’m fascinated by blind programming and like this community a lot. I just felt like sharing, so there you go. Stefik "
"548","2016-08-08","2023-03-24","https://computinged.wordpress.com/2016/08/08/programming-and-learning-cs-when-legally-blind/","Since I’ve been using blocks-based languages lately (see my posts on GP and MOHQ), I’ve been thinking more about the challenges of using blocks-based languages, and programming and learning CS more generally, when legally blind. One of our PhD students in the Human-Centered Computing PhD program is legally blind, and he generously came to visit me and brought with him one of his students who is legally blind and learning programming. The first and biggest surprise for me was that most (about 85%) legally blind people can actually see. One of the people I worked with can see light/dark (which doesn’t help with programming, but does help him with way-finding and spatial navigation). The other one loves to program in App Inventor using high magnification on her Mac. She’s low-vision and finds the large splotches of color useful in figuring out her code. The implication, they explained to me, is that some tactile-based affordances for blind people don’t work because low-vision blind people would prefer to use audio and what sight they have, rather than learn a touch-based encoding. I was surprised to learn that most blind people don’t learn Braille because it’s a complicated code, and low vision people would rather magnify the screen than learn the encoding. Blind programmers who know Braille will often use an audio screen reader along with a Braille reader for a single line of text. It’s easier to scan a line (especially for syntax errors) with Braille than with a screen reader. The second surprise was about their tools. They showed me Visual Studio and EdSharp, a plain text editor developed by a blind programmer for blind programmers. I asked what features made an editor good for blind programmers. They said, “It works with screen readers.” And really, that’s it. They don’t want specialized tools with non-standard interfaces because of the cognitive load of switching between the standard screen reader interfaces and a novel interface. I didn’t realize how few tools go to the trouble of accessing the screen reader API’s and providing good mappings from the interface to text. Processing (all platforms) and NetBeans (on Windows) are completely unusable for blind people because they are inaccessible by screen readers. Visual Studio has become a new favorite IDE, not because of any special features, but because it does “it doesn’t crash and I can access it with a screen reader.” I was particularly interested in the low-vision programmer’s use of App Inventor. We talked about what didn’t work for her and brainstormed what would make it better. One of the tougher parts of block-based languages is that scripts could be anywhere in a 2-D space. It’s hard to scan a 2-D space with a zoomed interface, and there’s no obvious interface for screen-readers. Having blocks snap to a grid would help a lot to make it easier to find scripts for both types of blind programmers. We talked about how CS classes might be better designed for legally blind students. I was surprised to learn how much they dislike active learning activities in classrooms. They said that when the whole class breaks into small group discussions, they can’t hear their group. The definition of the group is by physical proximity, but they discern “close” by “loud.” They end up listening in to whichever group is loudest around them. They need a different kind of active learning activity."
"549","2016-01-25","2023-03-24","https://computinged.wordpress.com/2016/01/25/white-house-champions-of-change-for-cs-education-jane-margolis-and-andreas-stefik/","Congratulations to Jane Margolis and Andy Stefik, two computing education researchers named by the White House as Champions of Change! Jane Margolis Jane Margolis is a researcher at the University of California, Los Angeles Graduate School of Education and Information Studies, where she investigates why so few women and students of color have learned computer science. Based on research discussed in her books Unlocking the Clubhouse: Women in Computing and Stuck in the Shallow End: Education, Race and Computing, she and her collaborators, with support from the National Science Foundation, created Exploring Computer Science (ECS), a high school curriculum and teacher professional development program committed to reaching all students, especially those in underserved communities and schools. ECS now exists across the nation, including in seven of the largest school districts. Andreas Stefik Andreas Stefik, Ph.D. is an assistant professor of computer science at the University of Nevada, Las Vegas. For the last decade, he has been creating technologies that make it easier for people, including those with disabilities, to write computer software. With grants from the National Science Foundation, he established the first national educational infrastructure for blind or visually impaired students to learn computer science. He is the inventor of Quorum, the first evidence-oriented programming language. The design of Quorum is based on rigorous empirical data from experiments on human behavior. Source: Champions of Change | The White House"
"550","2019-11-13","2023-03-24","https://computinged.wordpress.com/2019/11/13/we-should-be-emphasizing-design-of-computing-over-teaching-computational-thinking/","Alan Kay, Cathie Norris, Elliot Soloway, and I have an article in this month’s Communications of the ACM called “Computational Thinking Should Just Be Good Thinking.” (See link here, and a really nice summary at U-M which links to a preprint draft.) Our argument is that “computational thinking” is already here — students use computing every day, and that computing is undoubtedly influencing their thinking. But that fact is almost trivial. What we really care about is effective, critical, “expanded” thinking where computing can play a role in helping us think better. To do that, we need better computing. It’s more important to improve computing than to teach students to think with existing computing. The state of our current tools is poor. JavaScript wasn’t designed to be learnable and to help users think. (Actually, I might have just stopped with “JavaScript wasn’t designed.”) We really need to up our game, and we should not be focusing solely on how to teach students about current practices around iteration or abstraction. We should also be about developing better designs so that we spend less time on the artifacts of our current poor designs. Ken Kahn called us out, in the comments at the CACM site, suggesting that general-purpose programming tools are better than building specialized programming tools. I wrote a Blog@CACM post in response “The Size of Computing Education, By-The-Numbers.” We have so little success building tools that reach large numbers of students that it doesn’t make sense to just build on our best practice. They may all be local maxima. We should try a wide variety of approaches. I got asked an interesting question on Twitter in response to the article.  Do you think @Bootstrapworld and @BerkeleyDataSci Data 8 modules both embody your philosophy?  Do you think @Bootstrapworld and @BerkeleyDataSci Data 8 modules both embody your philosophy? I don’t think we’re espousing a philosophy. We’re suggesting a value for design and specifically improved design of computing. Bootstrap clearly does this. The whole Bootstrap team has worked hard to build, iterate, test, and invent. If you haven’t seen it, I recommend Shriram Krishnamurthi’s August 2019 keynote at the FCRC. They solved some significant computer science design problems in creating Bootstrap.  Berkeley’s Data 8 is curriculum about existing tools, R and Jupyter notebooks. That’s following an approach like most of computational thinking — the focus is on teaching the existing tools. That’s not a bad thing to do, but you end up spending a lot of time teaching around the design flaws in the existing tools. I just don’t buy that R or Jupyter notebooks are well-designed for students. We can do much better. LivelyR (see link here) is an example of trying to do better. We should be teaching students about computing. But computing is also the most flexible medium humans have ever invented. We should be having an even greater emphasis on fixing, designing, and inventing better computing. Many thanks to Barbara Ericson, Amy Ko, Shriram Krishnamurthi, and Ben Shapiro who gave me comments on versions (multiple!) of this essay while it was in development. They are not responsible for anything we said, but it would be far less clear without them. The feedback from experts was immensely valuable in tuning the essay. Thanks!"
"551","2019-11-04","2023-03-24","https://computinged.wordpress.com/2019/11/04/freakonomics-misunderstands-what-public-education-is-how-it-works-and-how-to-change-it/","I am a fan of Freakonomics Radio. I have heard all the old ones (some more than once), and I keep up with the new ones. Freakonomics informs and inspires me, including many posts in this blog. So, I want to respond when they get it really wrong. Episode 391 America’s Math Curriculum Doesn’t Add Up (see link here) is hosted by Steven Levitt (the economist) rather than the usual host Stephen Dubner (the journalist). The podcast is inspired by the struggles Levitt’s teenage children face with their mathematics classes. Levitt contends that the US mathematics curriculum is out-dated and in serious need of reform. I agree with his premise. His interviews with Jo Boaler and Sally Sadoff are interesting and worth listening to. But there are huge holes in his argument, and his solution makes no sense at all. Part of his argument is based on a poll they took through the Freakonomics twitter account. MARTSCHENKO: So, we’ve been putting together a survey that we sent out to Freakonomics listeners. We asked our survey respondents which subjects they use in their daily life, traditional math and data-related. So trigonometry, geometry, calculus, versus more data-related skills like analyzing and interpreting data and visualizing it. LEVITT: So what percent of people, say, use calculus on a daily basis? MARTSCHENKO: About 2 percent said that they use calculus on a daily basis, and almost 80 percent say they never use it. LEVITT: Okay. I would think calculus would get used more than trigonometry and geometry, although that would be hard if only 2 percent are using it. But what percent use trigonometry and geometry? MARTSCHENKO: Yeah. Less than 2 percent of respondents said that they use trigonometry in their daily life, but over 70 percent of them said that they never use it. LEVITT: And how about geometry? MARTSCHENKO: Geometry was a little bit better. There were about 4 percent of respondents who said that they use geometry daily, but again, over 50 percent said that they never use it. LEVITT: So it’s a pretty sad day when we’re celebrating the use of geometry because 4 percent of the people report using it. I don’t dispute his results. Even engineers don’t use geometry or trigonometry every day, but they have to learn it. We don’t only teach subjects that people use on a daily basis. I don’t think about the American Revolution or the three branches of the US government every day, but it’s important for American citizens to know how their country came to be and how it’s structured. We hope that every voter knows the roles that they’re voting for, though they may not think about them daily. One of the reasons we teach what we do is to provide the tools to learn other important things. Engineers and scientists have to know geometry and trigonometry to do what they do. We could wait until undergrad to teach geometry, trig, and calc — but that’s pretty late. There’s an argument that we should tell students what science and engineering is really about (and show them the real math), both to encourage them and to fully inform them. The Freakonomics on-line survey misunderstands why we teach what we teach. It’s not just about everyday. It’s also about the things that every student will need someday (like understanding how impeachment works) and about the things that might inspire them to think about a future day when they are people who use calculus and trigonometry. The moment that made me exclaim out loud while listening to the podcast was in the interview with David Coleman, CEO of the College Board. Levitt wants to replace some (all?) of the high school mathematics curriculum with a focus on data science. That’s an interesting proposal worth exploring. Levitt makes an important point — how do we teach teachers about data science? Levitt: But will teachers in AP Biology or AP Government have the skills to teach the data-fluency parts of their courses? COLEMAN: One magnificent thing about teaching is, it’s often the most lively when the teacher himself or herself is learning something. I think the model of practiced expertise being the only way that teaching is exciting is false. I think what’s more interesting is, can we create environments for teachers and students where together the data comes alive and fascinates them. The question is not to try to suddenly retrain the American teaching force to be data analysts, but instead design superb data experiences, superb courses, where the hunt for data and the experimentation is so lively that it excites them as well as their students. And then they together might be surprised at the outcomes. I know of no data that says that a teacher’s “surprise” leads to better learning outcomes than a teacher who has significant content knowledge. Much the opposite — the evidence I know suggests that teachers only learn pedagogical content knowledge (how to teach the subject matter) when they develop sufficient expertise in the content area. Learning outcomes are improved by teachers knowing the content and how to teach it. The idea that classes are somehow better (more “lively”) when the teacher doesn’t know what’s going to happen makes no sense to me at all. Finally, Levitt’s solution to reforming the mathematics curriculum is for all of us to sign a petition, because (he argues) there are only six to ten people in each state that we have to convince in order to reform each state’s mathematics curriculum. LEVITT: So tell me, who makes the decisions? How does curriculum get set in the U.S., in education systems? MARTSCHENKO: In public education, the people with power are those on the state boards of education. So each state will have a state board of education. There are typically six to 10 people on the board, and they’re the ones who make those decisions about the curriculum, what gets taught, how testing is done. LEVITT: So literally this set of six to 10 people have the power to set the guidelines, say, for whether or not data courses are required. MARTSCHENKO: That’s correct. LEVITT: So what you’re implying is that each state sets its own standards. Okay, so there are these state boards of education who have all the power, it seems to me what you’re saying is, if we can get in front of those boards, and we can convince, say, even one of them of the wisdom of what we’re doing, they can flip a switch, although that’s probably way too simple, and put into motion a whole series of events which will lead in that state to the teaching of data being part of the math curriculum. They have a petition (see link here) that they encourage people to fill out and send to their state boards. He’s right that his solution is “way too simple.” In fact, for every state that I have worked with (16 states and Puerto Rico, as part of the ECEP Alliance), his description is downright wrong. US States are all different, and they each own their own K-12 system. One of the important dimensions on which states differ is how much control remains at the state level (“state control”) and how much control is pushed down to districts and schools (“local control,” which is how California, Nebraska, and Massachusetts are all structured). What is being described is “state control,” but it still misses the complexity — it isn’t just the board that makes decisions. I have watched how Georgia (state control) and Michigan (local control) have created standards and curricula. Let’s imagine that Levitt’s worldview was right — six to ten people make all the decisions. Play it out. Who sets the standards (desired learning standards) for the new data science focus? Not just those six to ten people. Who defines the curriculum — resources, lesson plans, and assessments? Who prepares the teachers to teach the new curriculum? And in a local control state, how do you enforce these new standards with all those districts? Nothing as big as changing the US math curriculum happens with just those six to ten people. This last point is close to home for all of us in computing education. Every CS ed researcher I know who is in a CS department struggles with getting their colleagues to understand, appreciate, and use research-based methods. Even if the Chair is supportive, there are lots of teachers involved, each with their own opinion. How much more complicated is a whole state. Education in the United States is a vast system. I’ve mentioned before that I have an Alan Kay quote on a post-it on my monitor: “You can fix a clock. You have to negotiate with a system.” You can’t fix math in the US education system. You can only negotiate with it. Freakonomics misunderstands why the US education system exists the way that it does, what makes it work (informed teachers), and how decisions are made and executed within that system."
"552","2019-09-13","2023-03-24","https://computinged.wordpress.com/2019/09/13/come-talk-about-the-role-of-authentic-stem-learning-experiences-in-developing-interest-and-competencies-for-technology-and-computing-stemforcomptech/","I’m on a National Academies committee to write a report about the role of authentic STEM learning experiences in promoting interest and ability in computing. We’re having an open meeting/workshop (I don’t really know what it’s about yet) in November in DC. Visit this link for more information. "
"553","2014-02-02","2023-03-24","https://computinged.wordpress.com/2014/02/02/google-after-school-program-encourages-cs-ed-in-south-carolina/","Google is making some serious investments into South Carolina CS education, with their CS Fellows program and with this CS First after-school program. I’m curious as to why South Carolina first, but with my ECEP hat on, I’m glad! Through a pilot program launched in July 2013 at Google’s South Carolina data center, Google has been working with students to encourage their interest and show them some of the cool things they can do in the field of computer science, according to a Jan. 15 post by JamieSue Goodman, the program lead of the nascent CS First program. The computer science pilot program is especially aimed at gaining the interest of minorities and girls, who are typically underrepresented in the field of computer science. The program has been under way as a partnership of Google and the South Carolina Lowcountry school systems and teachers, according to Goodman’s post. The goals of the program include helping students develop a positive attitude toward CS and computers, as well as develop the confidence and curiosity to jump into a new computing experience, she wrote. Also integral in the program is showing the students that coding is used in a diverse set of jobs and hobbies and that to do the work, they have to have a “debugging mindset.” via Google After-School Program Encourages Study of Computer Science."
"554","2013-08-09","2023-03-24","https://computinged.wordpress.com/2013/08/09/google-pilots-cs-fellows-program-in-berkeley-county-south-carolina/","I got to meet Cameron Fadjo at the CSTA Conference in July. He’s really excited about the project, with lots of energy. Google says that, if successful, they plan to move it into other areas of the country later. Six of the fellows are recent STEM graduates. Google is heavily involved with STEM and has a number of national initiatives, including programs in Berkeley County and the surrounding areas. In addition there are two education researchers: Project Lead Cameron Fadjo and Project Manager Kate Berrio. “We have fellows from all around the region,” Fadjo said. “The next couple of weeks is introducing them to new things, training them to teach computer science and computer science pedagogy.” “We envision these folks will be the next leaders in this area,” Berrio said. “We’re adding a leadership element to it. We want to make sure they are well-rounded when they go out into the world.” via Google pilots teaching program in Berkeley County | Berkeley Independent."
"555","2013-08-12","2023-03-24","https://computinged.wordpress.com/2013/08/12/reforming-higher-education-via-improvements-in-learning-or-economics/","I’m interested in the discussions about corporate involvement in higher education, but am still trying to understand all the issues (e.g., who has a bigger stake and greater responsibility for higher education, industry or government). The point made below is one that I have definite opinions about. If we’re trying to improve higher education, why not try to make it more effective rather than just lower cost? I disagree with the below that we have to have 16:1 student:teacher ratios to have effective learning. We can increase those student numbers, with good pedagogy, to still get good learning — if we really do focus on good learning. Why is all the focus on getting rid of the faculty? Reducing the labor costs by simply removing the labor is unlikely to produce a good product. There is a lot wrong in this apples to oranges comparison, but the point is obvious—cutting labor costs is the path to “education reform,” not research and improved pedagogy. This is “reform” we need to reject when applied to public education. I say this without reservation: when it comes to education, you pay for what is most effective. Period. If small class sizes produce better teaching and learning, then that’s what you support when appropriate. Whatever your approach, stop conflating economic restructuring and education reform; it’s dishonest. via Citizen Gates | Sad Iron."
"556","2013-08-12","2023-03-24","https://computinged.wordpress.com/2013/08/12/ncaa-now-will-count-cs-towards-eligibility/","The NCAA has now revised their eligibility criteria, in favor of computer science: http://fs.ncaa.org/Docs/eligibility_center/CoreCourseInfo/Common_Core_Course_Questions/engage.html. The NCAA does an audit of an athlete’s high school classes, to decide if they really did complete a high school degree (e.g., rather than four years of gym all day every day). Computer science did not used to count. Under the new criteria, computer science can count if the state recognizes it as counting. This is a win, and as I understand it, this is due to the efforts of Hadi Partovi and Code.org."
"557","2013-08-02","2023-03-24","https://computinged.wordpress.com/2013/08/02/hadi-partovi-teaches-ryan-secrest-to-code-on-the-today-show/","This is pretty high visibility. (Here’s the link if the embed below doesn’t work: http://www.today.com/id/26184891/vp/52630136#52630136.) Visit NBCNews.com for breaking news, world news, and news about the economy"
"558","2013-08-05","2023-03-24","https://computinged.wordpress.com/2013/08/05/media-computation-collages-in-ap-cs/","Nice to see AP CS teachers picking up Media Computation, and hope to see more of that when Barbara’s Picture Lab starts rolling out. Myra Deister also sent me links to her AP CS students’ use of MediaComp. We worked through several activities, focusing on filters and transformations. The students enjoyed seeing that they could write programs that performed some of the same features as Photoshop. The unit concluded with a collage project in which students combined several of their filters and transformations into a final and unique image. I was extremely pleased to see that one of the new AP Computer Science labs, Picture Lab, was developed by Barbara Ericson and is based on her book. I think this new lab will bring an authentic and engaging series of activities to a wider audience. via Media Computation Collages | Pedagogue Padawan."
"559","2013-08-08","2023-03-24","https://computinged.wordpress.com/2013/08/08/acm-paywall-and-education-research/","I reference research papers regularly in this blog, often in the ACM Digital Library. I’ve been receiving more complaints lately when I reference papers “behind a paywall.” After I linked to the article that Leo Porter, Beth Simon, Charlie McDowell, and I wrote about successful practices in CS1, someone tweeted that we were “whores” by allowing our paper to be sold by ACM. As Greg Wilson said to me, the support for open access in our community is “vehement.” Now, there is a petition demanding that the ACM open up the Digital Library, free of charge. I’m a computing education researcher in the ACM SIGCSE community. “Open access” is much more complicated in my community. The arguments for opening access are more subtle in under-funded and even non-funded education community. The British Academy has just released a set of papers (July 2013) on the challenges of fitting social science and humanities research into open access models. They argue that we need a ‘mixed economy’ because there are different expectations and funding models for research in different disciplines. Open access is different for computing education research than other areas of computer science because it is a social science. The case for open access is made in the first sentence of the petition: Computer science research is largely funded by the public, for the public good. There are two cases to consider: the research that is funded by the public, and the research that is not. Let’s start with the research that is not funded publicly, because that’s a big part of what makes education unusual. Many (maybe most) of the papers published at the SIGCSE Symposium and the ICER Conference are not supported by public funds. Go through the SIGCSE papers and note which reference public funding and which don’t — it’s a pretty high percentage that don’t. ICER was created explicitly because there were groups of faculty, without public funding, who were collaborating and doing experiments in their classes and then pooling the data. They needed someplace to publish. Those faculty were paid to teach, and they had heavy teaching loads. They did the research on their own time, because they valued doing it. I don’t see how the public can lay claim to their work. Some of the work at SIGCSE is publicly funded, but maybe at lower levels compared to funding from Department of Defense, National Institutes of Health, or Department of Energy. My research is funded by the National Science Foundation (NSF). How much we are funded is limited by NSF rules and by institute rules. For example, graduate student research assistants can only be paid for up to 20 hours of work (and only 15 before passing qualifying examinations, in my school). Few PhD students complete his or her research work in only 20 hours a week. Let’s say it’s 60 hours per week. Are we really arguing that all of that student’s work is “funded by the public” when that is true for only 1/3 of the hours? Should the public be able to lay claim to all of the student’s work because of those 20 hours per week? If anyone does work outside of what they’re paid for, isn’t that their work? The issues are actually much the same for faculty, though we get paid much better. Faculty at my school are funded for 9 months by the state of Georgia, and I do federal NSF-funded work for an additional two months per year. For the last two years of “Georgia Computes!” I could only charge two weeks (specifically, 80 hours) of my time to that project per year. ECEP is a five year project on which I can only charge 160 hours per year. I spend 150 hours per year just on the management meetings for ECEP. I’ve already spent more than 40 hours on the road, doing the work of ECEP in Maryland, South Carolina, and at the CSTA Conference. All of that is before the work of evaluating data and writing papers. I am pretty sure that the state of Georgia does not see itself funding my work with these other states. Simply put: The federal government does not fund everything I do. If they don’t fund everything I do, I don’t believe that they can lay claim to it. When I shared this story with my colleague, Beki Grinter, she pointed out that the case is similarly murky for corporate-funded work. Microsoft paid for the robotics CS1 work here at Georgia Tech and Bryn Mawr. Can the public lay claim to that work, too? That work is in the ACM Digital Library. By what right is that work made freely available? All authors want their work to be distributed widely, to have impact. I usually provide copies of my papers when asked, and I use the ACM DL Authorizer service to provide free access to my papers. It’s up to other authors to decide if they are willing to do the same. Yes, opening up the DL would allow the papers to be distributed even more widely. But is that sustainable? What about the funds that are lost? I am willing to forego that breadth of access in favor of the good of closed access. That’s the deal that all the ACM authors made when they assign ACM copyright. The open access movement aims to change the agreement, after the fact. The petition I mentioned earlier focuses on the public funding for the public good. Another argument for open access that I’ve heard (and thanks to my college, Ellen Zegura, for helping me understand this) is to serve people the developing world — people who don’t have access to the resources of the developed world, and for whom ACM Digital Library access is prohibitively expensive. Education research is different than most CS research because it’s a social science. Are the papers published in the SIGCSE Symposium and the ICER conference directly useful to the developing world? “Transferring education from the United States to Africa wouldn’t work,” argued Bakary Diallo, rector of African Virtual University. “Because we have our own realities,” he added, “our own context and culture.” I have not worked in the developing world, so I can’t speak to the issues of bridging the gap between the developing and developed worlds. But most education researchers have faced these issues of differing cultures and audiences. I have talked about Media Computation in several countries. When the places I visited were like my culture and audience, it worked pretty well — MediaComp is being adopted successfully in Australia, for example. When the places I visited were not like my culture, I realized that I was solving completely the wrong problems for them and what I was saying was useless. When I spoke to teachers in China and Mexico and Qatar, I realized that I needed to listen before I could say anything worthwhile to them. The problem of transferring education research isn’t just a problem of the gap between the developed and developing world. In ECEP, we are realizing that even curricula, outreach programs, and policy approaches don’t transfer between states — even neighboring states! I work in Georgia, South Carolina, Massachusetts, and California now. The values and concerns are very different even between Georgia and South Carolina, and we’re really struggling to figure out what our summer camp model means in Massachusetts and California. There’s a perspective that says that this view is “patronizing,” and continuing an “us/them” perspective. I believe in tailoring for different audiences, but that doesn’t imply superiority of one audience over another audience. The key idea in my work is that one size does not fit all for computing education. In our CS classes, we often make the mistake of assuming that what works for some percentage of our class is good enough for everyone, and if some don’t succeed with that approach, it’s their fault. There is evidence to believe that different students succeed best at different approaches, e.g., that there are aptitude-treatment interactions,. Cognitive science has told us for decades that students’ prior background influences how and what they learn. Our Media Computation approach improved the success rates of liberal arts students at Georgia Tech, from a less than 50% success rate to an 85% success rate. I don’t believe that my liberal arts students are superior to my CS students, or vice-versa, but I do believe that each group has different goals and succeeds best with different approaches. I’m concerned that pushing for open access is making the same mistake that we keep making in CS — if it works for us, it’s good enough for them, so just give it to them and let them figure it out. (Kind of like MOOCs.) Any responsibility that the developed world has to share research with the developing world is not met by simply sending them our papers. If we want to share our research findings, we have to learn their educational problems and their educational goals and values. We would have to learn to communicate about their issues. I have to admit a bias here: I consider myself part of the ACM community. I value being part of that community, being an editor and reviewer and author, and that funds from those efforts goes to sustain the community. Language matters — ‘paywall’ sounds permanent, as a “wall” is. It’s really more like a ‘tollgate,’ where the tolls support the community. The ACM does good with the funding it receives, from my perspective in education. The funds generated by the DL go back to support the authors’ research communities Of course, part of the fee goes to maintaining the DL, and that’s not insignificant. I hope the DL will continue. That costs money. A fee-based system is sustainable. The ACM is not a nameless corporate entity. It’s a volunteer-driven, membership community. The DL is not a bank that is covetously hoarding intellectual wealth. It’s a source of knowledge for computing professionals, and a source of funding for the good work of ACM. If we want to make our research findings useful elsewhere, we should actively do that by understanding those cultures and audiences. We cannot expect that creating open access will necessarily fix educational problems elsewhere, but demanding open access may cost our community a lot. (Thanks to Ian Bogost, Briana Morrison, and Leo Porter for advice on an earlier draft of this post.)"
"560","2013-04-19","2023-03-24","https://computinged.wordpress.com/2013/04/19/what-makes-code-readable-not-what-you-think/","This is a nice post considering the interaction between language complexity, readability, and learnability. It could have been made stronger by including some of the empirical data. Thomas Green in his empirical research on language features didn’t just find that explicit BEGIN IF…END IF blocks were easier to read by novices, he found that they were TEN TIMES easier for novices to read. Being less succinct is not just easier for novices, it may be so much easier that it’s the difference between success and giving up. My point is, the larger the vocabulary you have, the more succinctly ideas can be expressed, thus making them more readable, BUT only to those who have a mastery of that vocabulary and grammar. If we made the English language smaller, and reduced the complex rules of grammar to a more much simple structure, we’d make it much easier to learn, but we’d make it harder to convey information. via What Makes Code Readable: Not What You Think | Making the Complex Simple."
"561","2013-08-13","2023-03-24","https://computinged.wordpress.com/2013/08/13/how-do-we-pick-k-12-coding-cs-resources/","I recommend reading over the list linked below. What’s fascinating to me is how the experts are making their arguments. Consider this comment: “Probably the Berkeley class is getting most traction.” That sounds like the recommendation is to try the Berkeley class because it’s polling well. The words “evaluation” and “data” don’t appear anywhere in the recommendations. The experts are probably giving the superintendent good advice, in that they are arguing in terms that the superintendent (and presumably, his stakeholders and constituents). The issue about “getting traction” reminds me of the old saying, “Nobody ever got fired for buying IBM.” Buying the popular and well-respected thing is a reasonable thing to do when you don’t understand all the issues. These aren’t the arguments that education researcher would use in making the same recommendations, but that’s why you don’t have researchers running big city schools — what we do informs the decisions, but the actual decisions involve bigger and more complex decisions. A big city superintendent called last week and asked for recommendations for K-12 resources for teaching coding and computer science so we reached out to some folks in the know. Here’s a summary of what we learned: via Experts Weigh in on K-12 Coding & CS Resources – Vander Ark on Innovation – Education Week."
"562","2013-08-14","2023-03-24","https://computinged.wordpress.com/2013/08/14/experiences-with-media-computation-at-u-adelaide/","Katrina Falkner has written up an excellent reflection (with gorgeous example student work) on her new MediaComp course at the University of Adelaide. I loved the artwork she shared, and I was particularly struck by the points she made about the value of “slowness” of the language, the challenges of helping students decontextualize programming after learning MediaComp, and the students complaining about using a curriculum “not invented here.”  The students didn’t really like working with Jython as it was very slow, but this had an unintended consequence, in that they became aware of the efficiency of their algorithms. I don’t think I have ever taught a first year course where students introduced efficiency as a discussion point on their own initiative. However, when working with their own images, which could sometimes be huge, they had to start thinking about whether there was a better way of solving their problems. I think this was a big win. Creativity and ownership. The last assignment we ran was a group assignment, where the students had to develop a piece of art using and extending the techniques they had learnt in the course. This was fantastic. We had run a similar assignment in previous years where the students developed JavaScript games, and that worked reasonably well, but I think Media Computation produced a better result as the outcomes were more individual, and creative. The students had a lot more fun sharing their results. via Experiences with Media Computation | Katrina Falkner."
"563","2013-08-16","2023-03-24","https://computinged.wordpress.com/2013/08/16/computer-scientists-do-outreach-or-your-science-dies/","All the more reason for more computer scientists to answer Cameron Wilson’s “All Hands on Deck!” call, and to get involved in the CS10K effort. The scientific community must also do the same, by convincing the public that it is worth spending tax dollars on research. Scientists: this isn’t someone else’s job – this is your job, starting immediately. If you personally hope to receive government research funds in the future, public engagement is now part of your job description. And if you and your colleagues don’t convincingly make the case to the public that your discipline should be funded, well then it won’t be. Without a public broadly supportive of funding science, it is all too easy for politicians looking for programs to cut to single out esoteric-sounding research programs as an excuse to further slash science funding. via Scientists: do outreach or your science dies | Guest Blog, Scientific American Blog Network."
"564","2013-08-19","2023-03-24","https://computinged.wordpress.com/2013/08/19/csit-higher-ed-degree-output-has-declined-since-2003/","I couldn’t believe this when Mark Miller sent the below to me. “Maybe it’s true in aggregate, but I’m sure it’s not true at Georgia Tech.” I checked. And yes, it has *declined*. In 2003 (summing Fall/Winter/Spring), the College of Computing had 367 graduates. In 2012, we had 217. Enrollments are up, but completions are down. What does this mean for the argument that we have a labor shortage in computer science, so we need to introduce computing earlier (in K-12) to get more people into computing? We have more people in computing (enrolled) today, and we’re producing fewer graduates. Maybe our real problem is the productivity at the college level? I shared these data with Rick Adrion, and he pointed out that degree output necessarily lags enrollment by 4-6 years. Yes, 2012 is at a high for enrollment, but the students who graduated in 2012 came into school in 2008 or 2007, when we were still “flatlined.” We’ll have to watch to see if output rises over the next few years. Computer-related degree output at U.S. universities and colleges flatlined from 2006 to 2009 and have steadily increased in the years since. But the fact remains: Total degree production (associate’s and above) was lower by almost 14,000 degrees in 2012 than in 2003. The biggest overall decreases came in three programs — computer science, computer and information sciences, general, and computer and information sciences and support services, other. This might reflect the surge in certifications and employer training programs, or the fact that some programmers can get jobs (or work independently) without a degree or formal training because their skills are in-demand. Of the 15 metros with the most computer and IT degrees in 2012, 10 saw decreases from their 2003 totals. That includes New York City (a 52% drop), San Francisco (55%), Atlanta (33%), Miami (32%), and Los Angeles (31%). via In the Spotlight: Higher Ed Degree Output by Field and Metro | Newgeography.com."
"565","2013-08-20","2023-03-24","https://computinged.wordpress.com/2013/08/20/virtual-faculty-communities-of-practice-to-improve-instructional-practices/","Posted to the SIGCSE-Members list — I really like this idea! Our work on DCCE showed that communities of teachers was an effective way of improving teacher’s sense of belonging and desire to improve. Will it work for faculty? ASEE is the organization to try! This is a great opportunity for CS faculty to work with like-minded faculty from across the country to explore and share support for introducing new instructional practices into your classroom. Please consider this for yourself and pass it on to your colleagues. Engineering education research has shown that many research-based instructional approaches improve student learning but these have not diffused widely. This is because (1) faculty members find it difficult to acquire the required knowledge and skills by themselves and (2) sustaining the on-going implementation efforts without continued encouragement and support is challenging. This project will explore ways to overcome both obstacles through virtual communities."
"566","2013-08-21","2023-03-24","https://computinged.wordpress.com/2013/08/21/a-portable-graphics-library-for-introductory-cs-cross-platform-mediacomp/","I just bumped into this paper looking for something else — how cool! Eric Roberts and Keith Schwarz have created a cross-platform layer on top of a Java server process, so that their portable graphics library (which includes facilities for doing pixel-level manipulations, as we do in MediaComp) can be accessed from anything! I often get asked “How can I do MediaComp in C++?” Here’s a way! For several decades, instructors who focus on introductory computer science courses have recognized the value of graphical examples. Supporting a graphics library that is appropriate for beginning students has become more difficult over time. This paper describes a new approach to building a graphics library that allows for multiple source languages and a wide range of target architectures and platforms. The key to this approach is using an interprocess pipe to communicate between a platform independent client library and a Java based process to perform the graphical operations specific to each platform. via A portable graphics library for introductory CS."
"567","2013-08-26","2023-03-24","https://computinged.wordpress.com/2013/08/26/programmer-insecurity-slate-everybody-does-not-need-to-learn-to-code/","I answered the criticism leveled below previously — it really is the case that many people who aren’t professional programmers are going to need to learn to program as part of their other-than-software jobs. Why are programmers pushing back against people learning to code? (And there seems to be a lot of pushback going on, as this mashup suggests.) Is it a sense of “What I do is important, and if everyone can do it, it lessens the importance”? I don’t really think that they’re afraid for their jobs — it does take a lot of hours and effort to learn to code well. The argument that it won’t “stick” (as suggested below) doesn’t work for me. Just because we don’t know now how to teach computer science to everyone doesn’t mean that we can’t learn how to teach computer science to everyone who needs it. Our lack of ability is not the same as the lack of need. We don’t teach everyone to read well and understand mathematics yet — does that mean we shouldn’t try? But if you aren’t dreaming of becoming a programmer—and therefore planning to embark on a lengthy course of study, whether self-directed or formal—I can’t endorse learning to code. Yes, it is a creative endeavor. At its base, it’s problem-solving, and the rewards for exposing holes in your thinking and discovering elegant solutions are awesome. I really think that some programs are beautiful. But I don’t think that most who “learn to code” will end up learning anything that sticks. One common argument for promoting programming to novices is that technology’s unprecedented pervasiveness in our lives demands that we understand the nitty-gritty details. But the fact is that no matter how pervasive a technology is, we don’t need to understand how it works—our society divides its labor so that everyone can use things without going to the trouble of making them. To justify everyone learning about programming, you would need to show that most jobs will actually require this. But instead all I see are vague predictions that the growth in “IT jobs” means that we must either “program or be programmed” and that a few rich companies want more programmers—which is not terribly persuasive. via “Everybody” does not need to learn to code. – Slate Magazine. I saw the below exchange on Twitter, and thought it captured the argument well: "
"568","2013-08-27","2023-03-24","https://computinged.wordpress.com/2013/08/27/the-bluej-blackbox-now-available-large-scale-programming-education-data-collection/","Neil Brown announced this at ICER last week. The new version of BlueJ now anonymously logs user actions onto a server for analysis by researchers. I just signed up to get access to the site. I have a couple of ideas for research projects using these data. It’s pretty exciting: Big data comes to computing education research! We have begun a data collection project, called Blackbox, to record the actions of BlueJ users. We’re inviting all the BlueJ users (with the latest version, 3.1.0, onwards) to take part. About 2 months in to the project, we already have 25,000 users who have agreed to take part, with 1,000 sending us data each day. Based on current estimates, I expect that in November 2013 we should see around 5,000 users sending data each day, with a total of over 100,000 users. Rather than hoarding the data, we are making this data available to other computing education researchers for use in their own research, so that we can all benefit from this project. via Blackbox: large scale programming education data collection | Academic Computing."
"569","2013-08-28","2023-03-24","https://computinged.wordpress.com/2013/08/28/nice-csta-blog-on-new-uchicago-study-of-us-cs-high-school-teachers/","The University of Chicago has released their latest study on the state of CS Education in US high schools. This one is a survey of CS teachers around the country, and Baker Franke introduces the study on the CSTA Blog. Two things stood out to me when I looked at survey results. First, computer science teachers, despite still reporting that they are the only CS teacher (or one of a few) in their community, reported feeling supported by their schools and administration. This was completely surprising to me. (Perhaps, it is the self-selecting nature of survey respondents, who are more likely to feel happy, satisfied and proud of the fact that they teach CS.) But, maybe this is evidence that the advocacy work of CSTA has been working and the shifting public view of computer science education has led to more schools supporting the teaching of computer science. Second, we have a real problem with misconceptions about computer science, still, in 2013. And as the survey results show, as a community, we are still not on the same page about what computer science education is either. At the moment, the word “code” is gaining attention as the stuff students should learn with computers, and whatever stigma used to be attached to programming seems to be dissipating – which is good. But we have a long way to go in clarifying what a high-quality, rigorous computer science education is and that that includes more that just programming. via Computer Science Teachers Association Blog “Who is Teaching CS?”."
"570","2013-08-30","2023-03-24","https://computinged.wordpress.com/2013/08/30/the-two-cultures-of-educational-reform-nytimes-com/","(Shoot — I meant to put this on “draft” and come back to it, but hit the wrong button. Sigh.) Here’s what I thought was interesting about this piece: I agree with Fish’s depiction of “data and experiment culture” about education, and the “ineffable culture,” too. But his alignment of MOOCs with “data and experiment culture” of MOOCs seems wrong. Our data about MOOCs says that they’re not working. So, belief in MOOCs is “ineffable.” It’s about having warm feelings for technology and the hopes for its role in education. About halfway through his magisterial study “Higher Education in America,” Derek Bok, twice president of Harvard, identifies what he calls the “two different cultures” of educational reform. The first “is an evidence-based approach to education … rooted in the belief that one can best advance teaching and learning by measuring student progress and testing experimental efforts to increase it.” The second “rests on a conviction that effective teaching is an art which one can improve over time through personal experience and intuition without any need for data-driven reforms imposed from above.” Bok is obviously a member of the data and experiment culture, which makes him cautiously sympathetic to developments in online teaching, including the recent explosion of MOOCs (massive open online courses). But at the same time, he is acutely aware of the limits of what can be tested, measured and assessed, and at crucial moments in his analysis that awareness pushes him in the direction of the other, “ineffable” culture. via The Two Cultures of Educational Reform – NYTimes.com."
"571","2013-08-31","2023-03-24","https://computinged.wordpress.com/2013/08/31/call-for-papers-special-issue-of-cs-ed-for-doctoral-research/","CALL FOR PAPERS THE JOURNAL OF COMPUTER SCIENCE EDUCATION SPECIAL ISSUE OF COMPUTER SCIENCE EDUCATION: DOCTORAL RESEARCH IN COMPUTING EDUCATION JUNE 2014 Guest Editor: Allison Elliott Tew, University of Washington Tacoma Submission Deadline: November 15, 2013 Journal Information: http://www.informaworld.com/cse Research undertaken in pursuit of a doctorate in any discipline is important because it is the first work of the next generation of researchers and highlights the most promising directions for the field. Doctoral research in our field is particularly interesting because the researchers have a unique perspective. Much of the research in computer science education is undertaken by teaching-active faculty. Doctoral students have the opportunity to reflect on our field from the perspective of studying the teaching and learning practice, often apart from being the actual teacher or learner. Thus, doctoral research offers a compelling lens from which to view the computing discipline. The guest editor invites authors to submit manuscripts for a special issue devoted to doctoral dissertation research on areas pertaining to computer science education. This issue will feature doctoral research that reports novel contributions to the field of computer science education and meets high academic standards. Manuscripts should include a description of the problem, appropriate background research, method of data collection and analyses, findings, open problems, and future research agenda. Full papers will feature doctoral work completed within the past two years. It is anticipated that these articles will be on the order of 5,000 to 8,000 words. Shorter articles, between 2,000 and 4,000 words, introducing well developed doctoral research that is not yet completed can also be published. Total length of the manuscript must be indicated, including word number equivalents for illustrations, tables, figures, and charts. Papers must contain an abstract summary of about 150 words, briefly summarizing the essential contents. Prospective authors are invited to send email indicating their intention to submit a manuscript to the guest editor of the special issue, Allison Elliott Tew (aetew@u.washington.edu). General questions may also be sent to The Journal of Computer Science Education editors, Sally Fincher or Laurie Murphy (CSE.Editors@gmail.com). Submit manuscripts electronically to: Allison Elliott Tew Institute of Technology University of Washington Tacoma 1900 Commerce Street Tacoma, WA 98402 Phone: 253-692-4700 aetew@u.washington.edu Important Dates: November 15, 2013 : Manuscripts due January 15, 2014 : Author notification March 1, 2014 : Final submission due June 2014 : Publication"
"572","2013-07-31","2023-03-24","https://computinged.wordpress.com/2013/07/31/writing-programs-using-ordinary-language-implications-for-computing-education/","Once upon a time, all computer scientists understood how floating point numbers were represented in binary. Numerical methods was an important part of every computing curriculum. I know few undergraduate programs that require numerical methods today. Results like the below make me think about what else we teach that will one day become passé, irrelevant, or automatized. The second result is particularly striking. If descriptions from programming competitions can lead to automatic program generation, what does that imply about what we’re testing in programming competitions — and why? The researchers’ recent papers demonstrate both approaches. In work presented in June at the annual Conference of the North American Chapter of the Association for Computational Linguistics, Barzilay and graduate student Nate Kushman used examples harvested from the Web to train a computer system to convert natural-language descriptions into so-called “regular expressions”: combinations of symbols that enable file searches that are far more flexible than the standard search functions available in desktop software. In a paper being presented at the Association for Computational Linguistics’ annual conference in August, Barzilay and another of her graduate students, Tao Lei, team up with professor of electrical engineering and computer science Martin Rinard and his graduate student Fan Long to describe a system that automatically learned how to handle data stored in different file formats, based on specifications prepared for a popular programming competition. via Writing programs using ordinary language – MIT News Office."
"573","2013-07-30","2023-03-24","https://computinged.wordpress.com/2013/07/30/taking-a-test-is-better-than-studying-even-if-you-just-guess/","The benefits of testing for learning are fascinating, and the result described below makes me even more impressed with the effect. It suggests even more strongly that the critical feature of learning is trying to understand, trying to generate an answer, even more than reading an answer. Suppose, for example, that I present you with an English vocabulary word you don’t know and either (1) provide a definition that you read (2) ask you to make up a definition or (3) ask you to choose from among a couple of candidate definitions. In conditions 2 & 3 you obviously must simply guess. (And if you get it wrong I’ll give you corrective feedback.) Will we see a testing effect? That’s what Rosalind Potts & David Shanks set out to find, and across four experiments the evidence is quite consistent. Yes, there is a testing effect. Subjects better remember the new definitions of English words when they first guess at what the meaning is–no matter how wild the guess. via Better studying = less studying. Wait, what? – Daniel Willingham. These results mesh well with a new study from Stanford. They found that the order of events in a “flipped” classroom matters — the problem-solving activity (in the classroom) should come before the reading or videos (at home). The general theme is the same in both sets of studies: problem-solving drives learning, and it’s less true that studying prepares one for problem-solving. A new study from the Stanford Graduate School of Education flips upside down the notion that students learn best by first independently reading texts or watching online videos before coming to class to engage in hands-on projects. Studying a particular lesson, the Stanford researchers showed that when the order was reversed, students’ performances improved substantially. via Classes should do hands-on exercises before reading and video, Stanford researchers say."
"574","2013-09-27","2023-03-24","https://computinged.wordpress.com/2013/09/27/what-will-programmers-have-to-know-by-2040/","Interesting claim below. Do we believe that being able to build a JIT compiler will be a critical threshold for programming in 2040? Or will programming become so much a literacy, that there will be people who can just write grocery lists and letters to Grandma and there will be Shakespeares? I’m predicting a broader spread, not a higher bar. The FizzBuzz problem described below is pretty interesting, a modern day version of the Rainfall problem. I will bet that the results claimed for FizzBuzz are true, but I haven’t seen any actual studies of it yet. While that may be true today, what will matter far more in the future is the quality of programmers, not the quantity. Any programmer who can’t hack together a JIT compiler in 2040 will be as useless as a programmer who can’t solve FizzBuzz today. via Neil Fraser: News: Programming TNG."
"575","2014-02-03","2023-03-24","https://computinged.wordpress.com/2014/02/03/call-for-papers-special-issue-of-acm-toce-on-team-projects/","null"
"576","2014-02-04","2023-03-24","https://computinged.wordpress.com/2014/02/04/are-schools-seeing-cs-as-an-elementary-school-activity/","The Atlanta Public Schools has a short article about their involvement in the Hour of Code — and it was all elementary school children. As far as I know, there is no more AP CS in any Atlanta Public high school. I’m wondering if the emphasis on “starting early” is having an unexpected effect. Are schools seeing activities like Blockly and Scratch as elementary school activities, and computer science belongs there, not in high schools? As members of the APS IT department went out to observe students throughout the district participating in the Hour of Code they observed computer science education at its finest. Students were actively engaged in challenges that required them to utilize high level problem solving and critical thinking skills. Students identified and found ways to correct their mistakes until they were successful in completing the activity. Lavant Burgess, a fifth grader at E.L. Connally Elementary, stated, “I like how it made me think. I had to keep using different strategies to figure out how to get the robot to the right squares.” via The Hour of Code 2013: APS students explore computer science skills and careers | Talk Up APS."
"577","2014-02-04","2023-03-24","https://computinged.wordpress.com/2014/02/04/sigcse-2014-needs-more/","Please pass on to students you know who might want to hang out at the world’s largest conference focused on CS education: Please please please.. have your students sign up to volunteer for SIGCSE 2014 at: https://www.cs.ubc.ca/~sig-cse/sigcse/ It’s fun, networking, service, free food, karma, and mitvah all rolled up into one glorious package! Details on being a student volunteer are available at the above site. If you have any questions, contact us at sigcse2014-volunteers@ggc.edu. Thanks! Pam Cutter, Sara Melnick, and Steve Wolfman SIGCSE 2014 Student Volunteer Co-Coordinators"
"578","2014-02-05","2023-03-24","https://computinged.wordpress.com/2014/02/05/should-everybody-learn-to-code-coverage-in-communications-of-the-acm/","I spoke to the author, Esther Shein, a few months ago, but didn’t know that this was coming out until now. She makes a good effort to address both sides of the issues, with Brian Dorn, Jeannette Wing, and me on the pro side, and Chase Felker and Jeff Atwood on the con side. As you might expect, I disagree with Felker and Atwood. “That assumes code is the goal.” No–computational literacy and expression, the ability to use the computer as a tool to think with, and empowerment are the goals. Code is the medium. Still, I’m excited about the article. Just as students are taught reading, writing, and the fundamentals of math and the sciences, computer science may one day become a standard part of a K–12 school curriculum. If that happens, there will be significant benefits, observers say. As the kinds of problems we will face in the future will continue to increase in complexity, the systems being built to deal with that complexity will require increasingly sophisticated computational thinking skills, such as abstraction, decomposition, and composition, says Wing. “If I had a magic wand, we would have some programming in every science, mathematics, and arts class, maybe even in English classes, too,” says Guzdial. “I definitely do not want to see computer science on the side … I would have computer science in every high school available to students as one of their required science or mathematics classes.” via Should Everybody Learn to Code? | February 2014 | Communications of the ACM."
"579","2014-02-06","2023-03-24","https://computinged.wordpress.com/2014/02/06/papers-and-presentations-from-future-computing-education-research-agenda-summit/","In early January, right after the NSF CE21 PI’s meeting, there was a summit on setting a Future Computing Education Research agenda. The materials from that event are now being made available. The conference web page has been updated so all presentations given during the meeting are linked to the agenda. http://stanford.edu/~kmenchac/FDS2014/schedule.html#agenda The Stanford Digital Library is housing the white papers from our conference. We do not plan to have them published, although some or all may be referred to in the final report (which will be shared with you). http://purl.stanford.edu/mn485tg1952 "
"580","2014-02-07","2023-03-24","https://computinged.wordpress.com/2014/02/07/nytimes-techs-diversity-problem-is-apparent-as-early-as-high-school-interview-with-barbara-ericson/","On the ongoing thread of media coverage over Barbara’s analysis of AP CS 2013 exam results, this is a standout. The NYTimes had a blog post interviewing Barb, and they did a nice job. They highlighted not just the outliers (like Wyoming with no test-takers) but the interesting trends (there used to be a good number of AP CS exam takers in Wyoming). Even in California, where it would seem that more children would be exposed to adults working in computer science, just 22 percent of test takers were girls, 1.5 percent were black and 8 percent were Hispanic. The A.P. data also shows how the situation in computer science has worsened over time. In Wyoming, for instance, no high school student of any race or gender took the test, while 35 students took the test there in 2001. via Tech’s Diversity Problem Is Apparent as Early as High School – NYTimes.com."
"581","2014-01-13","2023-03-24","https://computinged.wordpress.com/2014/01/13/media-coverage-of-barbara-ericsons-ap-cs-2013-analysis/","Barb does her analysis of AP CS data every year, but for some reason, her 2013 analysis has really taken off with the media. I’m going to use this post to track the ones I’ve found. If you find others, please send them my way and I’ll update here. If anyone’s interested, our more SIGCSE 2014 paper with more detailed analysis (e.g., controlling for state population, doing a six year historical view of six states, and using regression analysis to explore the relationship of wealth to exam-taking) can be found here: http://bit.ly/SIGCSE14-APCS"
"582","2014-01-01","2023-03-24","https://computinged.wordpress.com/2014/01/01/detailed-ap-cs-2013-results-unfortunately-much-the-same/","Guest post from Barbara Ericson: I have finished compiling the data for 2013 for AP CS A. You can download the spreadsheet from http://home.cc.gatech.edu/ice-gt/556 The spreadsheet has 3 sheets with detailed data by race and gender. The first sheet is from 2006 to 2013 for selected states. The second sheet is the race and gender information for every state for 2013. The third sheet is the race and gender information for every state for 2012. Here are some interesting findings from this data: You can also see historical data for all states for AP CS A at http://home.cc.gatech.edu/ice-gt/321"
"583","2014-02-08","2023-03-24","https://computinged.wordpress.com/2014/02/08/call-for-papers-special-issue-of-cs-ed-on-concept-inventories/","Call for Papers: COMPUTER SCIENCE EDUCATION A journal published by Taylor & Francis http://www.tandfonline.com/loi/ncse20 Special Issue on Concept Inventories in Computing SUBMISSION DEADLINE: May 9, 2014 Guest Editor: Steven A. Wolfman, University of British Columbia A concept inventory is a short, low-stakes assessment of core conceptual topics in a discipline that is both easy to process for individual students and aggregate across students—often composed only of multiple-choice questions. Physics’s Force Concept Inventory is the prototypical example. Concept inventories have revolutionized education in several disciplines by making assessment simple, sustainable, scalable, and generalizable. They enable educational researchers to make rapid progress by sharing assessment tools. They expose trends in student learning to educational practitioners and to the students themselves. The guest editor invites authors to submit manuscripts for this special issue devoted to concept inventories in computing. Suitable topics include, but are not limited to: + Introduction of full or partial concept inventories for areas of computing with evidence supporting their validity + Methodology for development of concept inventories in computing + Application of computing concept inventories to assess trends in student learning, to compare across institutions or types of institutions, to explore the impact of pedagogies, or otherwise further computing education + Evidence—e.g., from course analysis or expert interviews or surveys—to guide development of concept inventories in computing disciplines + Literature reviews of concept inventories in computing IMPORTANT DATES: May 9, 2013 :: Manuscripts due Jul 11, 2014 :: Author notification Aug 22, 2014 :: Final submission due December 2014 :: Publication Submissions should be emailed to the guest editor at: concept-inventory@cs.ubc.ca Full papers are ideally 5,000 to 7,000 words long. Both abstracts and full papers should be in Word or PDF, formatted according to the instructions at: http://www.tandfonline.com/action/authorSubmission?journalCode=ncse20&page=instructions Questions about the special issue should be sent to the guest editor Steven Wolfman <wolf@cs.ubc.ca>. General questions may also be sent to The Journal of Computer Science Education editors, Sally Fincher and Laurie Murphy <CSE.Editors@gmail.com>."
"584","2014-02-10","2023-03-24","https://computinged.wordpress.com/2014/02/10/california-community-colleges-experiment-with-accelerated-remediation-maybe-theres-more-learning-going-on/","Remedial courses in higher-education are important to get right, for lots of reasons. Certainly, that’s one of the big stumbling blocks in MOOCs — many people who start a MOOC aren’t prepared for that level material (or maybe, the MOOCs presume too much knowledge to start). The CAITE alliance was able to improve diversity in Massachusetts’ universities, by improving the transfer from community college, but that path sometimes requires remedial courses. If we could get remediation right, we might improve diversity, make distance learning more successful, and (as suggested below) improve graduation rates. The story below is unusual: Make remediation better, by making it shorter. A simple time-on-task model would suggest that there’s less being learned. I hypothesize that it might be working (i.e., resulting in more learning), by looking at it from a different model. At the Future Computer Science Research Summit in Orlando in early January, Nobel laureate Carl Wieman gave a talk where he referenced the famous Richard Hake 6000 subject study. One of the results of that study is that traditional lecture only results in students learning about 30-40 percent of what was being taught, but with student engagement pedagogies, 60-80 percent is learned. Note the word: engagement. We can engage by using techniques like peer instruction. I wonder if we can also engage by saying, “This required course will be made shorter. You still need it to move on to something you want, but now, it’s less painful.” Could that result in more learning? Maybe that 30-40% becomes 50-60%? So a reduction of a few weeks in time may actually result in equal or more learning? Remedial courses are widely seen as one of the biggest stumbling blocks to improving college graduation rates, as few students who place into remediation ever earn a degree. The problem is particularly severe for black and Hispanic students, who account for almost half of the California community college system’s total enrollment of 2.4 million. More than 50 percent of black and Hispanic community college students place three or more levels below college mathematics, said Myra Snell, a math professor at Los Medanos College. And only 6 percent of those remedial students will complete a credit-bearing math course within three years of starting the first remedial course. A key reason for abysmal pass rates is the length of remedial sequences, argue Snell and Katie Hern, an English instructor at Chabot College, which, like Los Medanos, is a two-year institution located in California. “The lower down you start, the fewer students complete,” Hern said. The two instructors decided to do something about the problem. In 2010 they founded the California Acceleration Project. Armed with research from the Carnegie Foundation for the Advanced of Teaching and the Community College Research Center at Columbia University’s Teachers College, they encouraged their peers to offer shorter remedial sequences in math and English. via California community colleges’ cautious experiment with accelerated remediation | Inside Higher Ed."
"585","2013-02-08","2023-03-24","https://computinged.wordpress.com/2013/02/08/why-moocs-wont-improve-diversity-in-computing/","Beki Grinter does a great job in her blog giving a personal account of why MOOCs won’t help address the lack of diversity in computing. Beki’s account (linked below) is a personal one, but it is an instance of a larger story that Joanne Cohoon has been telling for years now, based on a large scale survey of students, faculty, and department chairs. If you want women to persist in graduate computer science, encourage them. The gender of the encourager is not important, but the one-to-one connection is important. As Beki asks, how can you do that in a 50-100K MOOC? Given the lack of women in academia, particularly in STEM, I wonder whether the pattern of male dominance repeats itself in who offers the MOOC and I wonder what in turn that does to the student population. Perhaps some would say, offer a MOOC, redress it. But, my route into the field was not about volume encounters, but about those that were very personal. Its only maybe four people who made enough of a difference that I got through, but how can any person be that when they have 50,000 students? Also, how can you achieve these intimacies at a distance, across the network as opposed to face-to-face. via MOOC Diversity « Beki’s Blog."
"586","2014-02-11","2023-03-24","https://computinged.wordpress.com/2014/02/11/silicon-valley-isnt-a-meritocracy-and-its-dangerous-to-hero-worship-entrepreneurs/","An important and interesting position, that I first learned about from the work of Caroline Simard. There is significant evidence that Silicon Vally is not a meritocracy, but there is significant advantage to the people in power there to maintain the myth. But if the tech scene is really a meritocracy, why are so many of its key players, from Mark Zuckerberg to Steve Jobs, white men? If entrepreneurs are born, not made, why are there so many programs attempting to create entrepreneurs? If tech is truly game-changing, why are old-fashioned capitalism and the commodification of personal information never truly questioned? The myths of meritocracy and entrepreneurialism reinforce ideals of the tech scene that shore up its power structures and privileges. The myths of authenticity, meritocracy, and entrepreneurialism do have some basis in fact. But they are powerful because they reinforce ideals of the tech scene that shore up its power structures and privileges. Believing that the tech scene is a meritocracy implies that those who obtain great wealth deserve it, and that those who don’t succeed do not. The undue emphasis placed on entrepreneurship, combined with a limited view of who “counts” as an entrepreneur, function to exclude entire categories of people from ascending to the upper echelon of the industry. And the ideal of authenticity privileges a particular type of self-presentation that encourages people to strategically apply business logics to the way they see themselves and others. via Silicon Valley Isn’t a Meritocracy. And It’s Dangerous to Hero-Worship Entrepreneurs | Wired Opinion | Wired.com."
"587","2014-02-13","2023-03-24","https://computinged.wordpress.com/2014/02/13/shortage-in-the-it-u-s-labor-market-or-just-a-lack-of-graduates/","Is the shortage of STEM graduates a myth, as IEEE has been arguing recently? Is the case for IT different than the case for STEM overall? I found the analysis linked below interesting. Most IT workers do not have an IT-related degree. People with CS degrees are getting snapped up. The suggestion is that there’s not a shortage of IT workers, because IT workers are drawn from many disciplines. There may be a shortage of IT workers who have IT training. IT workers, who make up 59 percent of the entire STEM workforce, are predominantly drawn from fields outside of computer science and mathematics, if they have a college degree at all. Among the IT workforce, 36 percent do not have a four-year college degree; of those who do, only 38 percent have a computer science or math degree, and more than a third (36 percent) do not have a science or technology degree of any kind. Overall, less than a quarter (24 percent) of the IT workforce has at least a bachelor’s degree in computer science or math. Of the total IT workforce, two-thirds to three-quarters do not have a technology degree of any type (only 11 percent have an associate degree in any field).4 Although computer science graduates are only one segment of the overall IT workforce, at 24 percent, they are the largest segment by degree (as shown in Figure F, they are 46 percent of college graduates entering the IT workforce, while nearly a third of graduates entering IT do not have a STEM degree). The trend in computer scientist supply is important as a source of trained graduates for IT employers, particularly for the higher-skilled positions and industries, but it is clear that the IT workforce actually draws from a pool of graduates with a broad range of degrees. via Guestworkers in the high-skill U.S. labor market: An analysis of supply, employment, and wage trends | Economic Policy Institute."
"588","2014-02-14","2023-03-24","https://computinged.wordpress.com/2014/02/14/completion-rates-arent-the-best-way-to-judge-moocs-researchers-say-what-is/","I’m completely open to the idea that completion rates are the wrong measures of success for MOOCs. But I do believe that we need some measure. What would success for MOOCs mean? How do we know if it’s being achieved? Or if it’s a waste of time and money? In the meantime, the Harvard and MIT researchers said they hoped the new studies would help people understand that technology and scale are not the only things that distinguish MOOCs from other kinds of higher education. “People are projecting their own desires onto MOOCs,” said Mr. Ho, “and then holding them accountable for criteria that the instructors and institutions and, most importantly, students don’t hold for themselves.” via Completion Rates Aren’t the Best Way to Judge MOOCs, Researchers Say – Wired Campus – Blogs – The Chronicle of Higher Education."
"589","2014-02-15","2023-03-24","https://computinged.wordpress.com/2014/02/15/csta-keynote-speakers-for-2014-yasmin-kafai-and-michael-kolling/","Great names at the CSTA conference this year! CSTA is excited to announce our keynote speakers for 2014! Yasmin Kafai is a researcher, co-developer, author and professor of learning sciences at the University of Pennsylvania. She earned her doctorate from Harvard University and is a Fellow of the American Education Research Association. Kafai’s discussion titled “Connected Code: A New Agenda for K-12 Programming in Classrooms, Clubs, and Communities” will cover three central shifts that lead us from computational thinking to computational participation—from code to applications, from tools to communities, and from scratch to remix—in teaching and learning programming to broaden participation in computing for all. Michael Kölling is a professor at the School of Computing, University of Kent, in Canterbury, UK. He holds a PhD in computer science from Sydney University and has worked in Europe and Australia. He is also an author and lead-developer of educational programming environments and a Fellow of the UK Higher Education Academy. Kölling will discuss “What’s Next for CS Education: Thoughts on Topics, Tools, and All the Rest.” In his talk, Kölling will share his speculations and opinions on what should happen in the near future for computer science education, focusing on educational software tools. Please join us at Pheasant Run Resort in St. Charles, Illinois July 14-15, 2014. Learn more on our conference page at: http://csta.acm.org/ProfessionalDevelopment/sub/CSTAConference.html and register today at: https://www.softconf.com/d/csta2014/"
"590","2014-02-17","2023-03-24","https://computinged.wordpress.com/2014/02/17/microsoft-providing-uk-teachers-with-content-and-professional-development-for-new-curriculum/","There’s a new computer science curriculum rolling out in the UK for elementary school students (thanks to the Computing at Schools effort), and Microsoft is making a big push to help the adoption. Steve Beswick, senior director of Education at Microsoft UK, said: “We welcomed the news of the new computing curriculum alongside others in the industry because it is absolutely critical for the future success of our young people. The challenge now is to ensure that primary teachers are equipped to deliver it by September.” “That’s why we are launching our First Class Computing programme now, which, through new materials, teacher training, and our ongoing work with the education community, can help a new generation of teachers inspire young people.” via Microsoft unveils primary school suite for new computing curriculum teachers."
"591","2013-07-22","2023-03-24","https://computinged.wordpress.com/2013/07/22/new-uk-curriculum-five-year-olds-to-learn-programming-and-algorithms/","I haven’t read the new framework myself yet, but the press coverage suggests that this is really something noteworthy. I do hope that there is some serious assessment going on with this new curriculum. I’m curious about what happens when five year olds start programming. How far can they get? In Yasmin Kafai’s studies of Scratch and in Amy Bruckman’s studies of MOOSE Crossing, almost none of the younger students ever used conditionals or loops. But those were small studies compared to a national curriculum. How much transfers forward? If you do an abstract activity (programming) so early, does it lead to concrete operational reasoning earlier? Or does it get re-interpreted by the student when she reaches concrete operational? And, of course, the biggest question right now is: how can they get enough teachers quickly enough? The new curriculum will be mandatory from September 2014, and spans the breadth of all four ‘key stages’, from when a child first enters school at age five to when they end their GCSEs at 16. The initial draft of the curriculum was written by the British Computer Society (BCS) and the Royal Academy of Engineering in October 2012, before being handed back to the DfE for further tweaks. By the end of key stage one, students will be expected to ‘create and debug simple programs’ as well as ‘use technology safely and respectfully’. They will also be taught to, ‘understand what algorithms are; how they are implemented as programs on digital devices; and that programs execute by following precise and unambiguous instructions’. via Five-year-olds to learn programming and algorithms in major computing curriculum shake-up – IT News from V3.co.uk. Not everyone is happy about the new curriculum. Neil Brown has a nice post talking about some of the issues. He kindly sent me a set of links to the debate there, and I found this discussion from a transcript of Parliament proceedings fascinating — these are all really good issues. First, on professional development, the Minister made the point that some money was being made available for some of the professional development work. Does he feel that it will be sufficient? There is a serious issue about ongoing professional development throughout the system, starting at primary level, where updating computer skills will be part of a range of updated skills which all primary teachers will need to deliver the new curriculum. It is also an issue at secondary level, where it may not be easy but is possible to recruit specialist staff with up-to-date computing skills. However, if you are not careful, that knowledge and those skills can fall out of date very quickly. Secondly, what more are the Government planning to do to attract new specialist computing staff to teach in schools? It is fairly obvious that there would be alternative, better paid jobs for high-class performers in computing. They may not necessarily rush into the teaching profession. Thirdly, can the Minister confirm that the change in name does not represent a narrowing of the curriculum, and that pupils will be taught some of those broader skills such as internet use and safety, word processing and data processing, so that the subject will actually give people a range of knowledge and skills which the word “computing” does not necessarily encompass? Fourthly, the teaching will be successful only if it is supported by sufficient funds to modernise IT facilities and to keep modernising them as technology changes. The noble Lord made reference to some low-cost initiatives in terms of facilities in schools. However, I have seen reference to 3D printers. That is fine, it is just one example, but 3D printers are very expensive. The fact is that, for children to have an up-to-date and relevant experience, you would need to keep providing not just low-cost but some quite expensive technological equipment in schools on an ongoing basis. Will sufficient funds be available to do that? Finally, given that computing skills and the supporting equipment that would be needed are increasingly integral to the teaching of all subjects, not just computing, have the Government given sufficient thought to what computing skills should be taught within the confines of the computing curriculum and what computing skills need to be provided with all the other arts and science subjects that people will be studying, in all of which pupils will increasingly require computing skills to participate fully? Has that division of responsibilities been thought through? I look forward to the Minister’s response. via Lords Hansard text for 8 Jul 201308 July 2013 (pt 0001). We just had the ECEP Day at the Computer Science Teachers Assocation (CSTA) Conference on July 14, where I heard representatives from 16 states talk about their efforts to improve computing education. Special interests, where do state legislators have to be involved, what does “Computing” mean anyway — all of the states reported pretty much the same issues, but each in a completely different context. The issues seem to be pretty much the same in the UK, too."
"592","2014-02-18","2023-03-24","https://computinged.wordpress.com/2014/02/18/npr-a-push-to-boost-computer-science-learning-even-at-an-early-age/","Nice coverage in NPR, including Barb’s AP CS data, with interviews with Hadi Partovi and Chris Stephenson. What’s most striking about this piece are the comments. These are NPR listeners, and by and large, they are a reasonable group. But by and large, they are against teaching computer science in elementary school. Their arguments are interesting. Many are of the form “In my day…” Others are pushing back against the idea of teaching kids in elementary school something that is supposed to be a job skill. Still others are making an argument that I made this month in CACM: If the goal is more CS graduates, and there’s nothing in high school or middle school, what’s the point of making a significant effort to get computer science into elementary school? Part of the problem here is the kind of argument that we’re making for CS in schools, including this NPR piece. I believe that the strongest argument is that most professions need computing, so it makes sense to build up that literacy. But it’s a hard argument to sell, and we keep falling back on the “CS jobs are going unfilled” argument. A handful of nonprofit and for-profit groups are working to address what they see as a national education crisis: Too few of America’s K-12 public schools actually teach computer science basics and fewer still offer it for credit. It’s projected that in the next decade there will be about 1 million more U.S. jobs in the tech sector than computer science graduates to fill them. And it’s estimated that only about 10 percent of K-12 schools teach computer science. So some in the education technology sector, an industry worth some $8 billion a year and growing, are stepping in. At a Silicon Valley hotel recently, venture capitalists and interested parties heard funding pitches and watched demonstrations from 13 ed-tech start-ups backed by an incubator called Imagine K-12. One of them is Kodable, which aims to teach kids five years and younger the fundamentals of programming through a game where you guide a Pac-Man-esque fuzz ball. via A Push To Boost Computer Science Learning, Even At An Early Age : All Tech Considered : NPR."
"593","2014-02-19","2023-03-24","https://computinged.wordpress.com/2014/02/19/college-board-program-to-provide-funding-to-districts-to-start-ap-courses/","Here’s a great answer to the under-representation on the AP CS — the College Board (with funding from Google) will offer grants to help start AP programs, including AP CS (see details for AP CS for STEM Access). AP STEM Access Program: In fall 2013, the College Board implemented the AP STEM Access program in 335 public high schools across the country. With the support of a $5 million Google Global Impact Award to DonorsChoose.org, these schools started offering new AP math and science courses with the goal of enabling underrepresented minority and female students who have demonstrated strong academic potential to enroll in and explore these areas of study and related careers. Over the next three years, the AP STEM Access program will give an estimated 36,000 students the opportunity to study college-level STEM course work in these newly offered AP classes. via 10 Years of Advanced Placement Exam Data Show Significant Gains in Access and Success; Areas for Improvement | The College Board."
"594","2014-02-20","2023-03-24","https://computinged.wordpress.com/2014/02/20/nsf-career-awards-include-a-cs-ed-research-track/","For the first time ever, CS Education research is a field eligible for NSF CAREER. Applicants will be able to select STEM-CP: CE21 as the program for the July deadline. Please help getting the word out to potential applicants. We’d like to see some good proposals in this first year inviting CE21 CAREER proposals. Colleagues, The National Science Foundation’s Computer and Information Science and Engineering Directorate (CISE) invites proposals this year to the Faculty Early Career Development (CAREER) program for faculty engaging in Computing Education research. That is, if you apply for the CAREER program, you’ll be able to select “STEM-CP: CE21” as your Unit of Consideration. The intent of the CAREER program (http://www.nsf.gov/career) is to provide stable support at a sufficient level and duration to enable awardees to develop careers as outstanding researchers and educators who effectively integrate teaching, learning and discovery. CISE is organizing a one-day proposal writing workshop (registration and details at: http://cs.gmu.edu/events/nsfcisecareer2014/) for CAREER-eligible faculty on March 31, 2014 in Arlington, VA. The registration deadline is February 28th. Unlike past years, this will be the only CISE CAREER workshop during this calendar year. Please circulate this information among interested faculty. The next deadline for CISE CAREER proposals is July 21, 2014. Please let me know if you have any questions or concerns. Best, Jeff —"
"595","2014-02-21","2023-03-24","https://computinged.wordpress.com/2014/02/21/what-defines-quality-of-an-open-education-book/","I’m dubious about open-education resources, because I see that the capitalist system does encourage authors to produce books that teachers want and that work for students (books don’t remain adopted if students hate them). I’m willing to believe the claim below that “free, high-quality educational materials are available” but I’d like to know the definition of “high-quality.” Who measures the quality of open-education resources? By what definition can we claim that OpenStax books are high-quality? I’m working on an answer to this question for the ebooks we’re working on. While I am an author of textbooks with commercial publishers, I am also writing books for the Runestone Interactive site. For those books, we are developing assessments to measure learning pre/post, and we are measuring retention and student engagement. I hope to have evidence to support the claim that our books are high-quality. What kinds of processes are open-education resource providers using to make a claim about high-quality? “Although a growing number of free, high-quality educational materials are available, many instructors and academic leaders are uncertain about how to begin taking advantage of these resources,” said David Harris, editor-in-chief of OpenStax College. With a combination of high-quality content and a well-supported pathway to OER adoption, OpenStax College and Lumen Learning expect to achieve significant textbook cost savings at both two- and four-year colleges and universities nationwide. via Open-education partners hope to save students $10 million by 2015."
"596","2014-02-24","2023-03-24","https://computinged.wordpress.com/2014/02/24/interesting-new-nsf-career-award-in-interactive-data-visualization/","Here’s an interesting project that could really get at generalizable “computational thinking” skills: Wilkerson-Jerde’s research project will explore how young people think and learn about data visualization from the perspective of a conceptual toolkit. Her goals for “DataSketch: Exploring Computational Data Visualization in the Middle Grades” are to understand the knowledge and skills students bring together to make sense of novel data visualizations, and to design tools and activities that support students’ development of critical, flexible data visualization competence. “Usually when we think of data visualization in school, we think of histograms or line graphs. But in contemporary science and media, people rely on novel, interactive visualizations that tell unique stories using data,” she explains. via Michelle Wilkerson-Jerde (PhD12) Wins National Science Foundation CAREER Award :: School of Education & Social Policy :: Northwestern University."
"597","2014-02-25","2023-03-24","https://computinged.wordpress.com/2014/02/25/making-music-with-computers-book-is-finally-out/","I got a chance to review and write a foreword for: Making Music with Computers: Creative Programming in Python (Chapman & Hall/CRC Textbooks in Computing): Bill Manaris, Andrew R. Brown: 9781439867914: Amazon.com: Books. I’m really pleased to see that it’s finally out! Recommended."
"598","2014-02-26","2023-03-24","https://computinged.wordpress.com/2014/02/26/mercury-news-passes-the-buck-can-early-cs-education-boost-number-of-women-in-tech/","Check out the headline “Can early computer science education boost number of women in tech?” Then read the part (quoted below) where they show what works at Harvey Mudd. I don’t read anything there about early CS education. I do believe that we need CS in high schools to improve diversity in computing, but I’m not sure that much earlier than high school helps much. I worry about higher education giving up on issues of diversity, by changing the discussion to K12. I wish that Mercury News would have really said what they found: University Computing Programs, you have the power to improve your diversity! You can change your classes and your culture! Don’t just pass the buck to K12 schools! “The difference is, females in general are much more interested in what you can do with the technology, than with just the technology itself,” says Harvey Mudd President Maria Klawe, a computer scientist herself. So administrators created an introductory course specifically for students without programming experience. They emphasized coding’s connection to other disciplines. They paid for freshman women to attend the annual Grace Hopper Celebration of Women in Computing, a chance to meet programming role models in diverse fields. And they provided early research opportunities for women students to inspire them to stick with the field. The result? The percentage of female computer science majors at Harvey Mudd increased from about 10 percent before the initiatives to 43 percent today. via Can early computer science education boost number of women in tech? – San Jose Mercury News."
"599","2014-02-27","2023-03-24","https://computinged.wordpress.com/2014/02/27/there-are-no-computer-science-teachers-in-ny/","Here’s the next step after the Hour of Code and plans to implement comprehensive CS reform (like in Chicago): Where are you going to get the teachers? It is widely acknowledged that for New York City to prosper in the 21st century, its middle and high schools must teach computer science. What is not so well known is that there are no computer science teachers in New York—at least not on paper. The state does not recognize computer science as an official subject, which means that teachers do not get trained in it while they are becoming certified as instructors. That’s one reason public-school students have little exposure to the skills needed to snag computer software programming jobs, which are expected to grow faster than any other profession during the next decade. Out of 75,000 teachers in New York City public schools, fewer than 100 teach computer science. While state officials are trying to modernize the education syllabus, industry leaders have been filling in the gap with a handful of innovative efforts that illustrate the ad hoc nature of the solution to the shortfall of qualified teachers. But it will be years before all 800 of New York’s middle schools and high schools can offer even a single computer science class. via There are no computer science teachers in NY | Crain’s New York Business."
"600","2013-12-09","2023-03-24","https://computinged.wordpress.com/2013/12/09/try-an-hour-of-code-in-an-ebook-for-csedweek/","It’s CSEd Week this week. Code.org and Computing in the Core have effectively merged now, and that’s the organization that owns and promotes CSEd Week. The big focus this year is the Hour of Code — getting all students to do some kind of coding activity for one hour. There are a lot of tutorials now available at the CSEdWeek site. As readers of this blog now, one of my research activities is to create an electronic book to support high school teachers learning computer science. (Here’s our project webpage.) We’ve been exploring ideas like how best to create videos about computer science (hint: use subgoal labels!) and how to reduce cognitive load (hint: Parson’s problems). We’re also working on multi-modal explanations (evidence suggests that audio narration for code is more effective than text descriptions) and worked examples. Barb Ericson put together an Hour of Code activity using some of our ideas for learning Python with turtles here, as an Hour of Code activity: http://interactivepython.org/runestone/static/IntroPythonTurtles/index.html. Please do try it and let us know what you think! If you have an Hour of Code activity that isn’t making it to the main CSedWeek.org site, please feel free to link to it here in the comments!"
"601","2014-01-26","2023-03-24","https://computinged.wordpress.com/2014/01/26/chicago-announces-comprehensive-k-12-cs-program/","The scope of the Chicago plan is impressive. In case you thought that the idea of offering foreign language credit for CS was a joke, it’s being considered as part of the Chicago plan. The rationale for the plan is interesting: Arguing that it’s about national competitiveness, and about democratization. On the first day of Computer Science Education Week, Mayor Rahm Emanuel and CEO Barbara Byrd Bennett announced the most comprehensive K-12 computer science education plan in a major school district. This plan includes creating a pipeline for foundational computer science skills in elementary schools, offering at least one computer science class at every high school, and elevating computer science to a core subject. “This plan will help us compete with countries like China and the UK, where children take coding classes in elementary school, and create an environment where we can help support the next Bill Gates, Mark Zuckerberg, and Marissa Mayer,” said Mayor Emanuel. “By democratizing computer science, we are leveling the playing field for all children to have the same skills, appetite to learn, and access to technology to excel in this growing field.” The K-12 program will expand student access to computer science literacy over the next five years. The program will include: via City of Chicago :: Mayor Emanuel And CPS CEO Barbara Byrd-Bennett Announce Comprehensive K-12 Computer Science Program For CPS Students."
"602","2014-01-21","2023-03-24","https://computinged.wordpress.com/2014/01/21/should-coding-be-the-new-foreign-language-requirement-edutopia/","I don’t agree that learning a foreign language is as useful as learning a programming language, especially in terms of increased communication capability (so I wouldn’t see it as equivalent to a foreign language requirement). I see learning a foreign language as far more important and useful. It is interesting to think about cognitive effects of learning programming that might be similar to the cognitive effects of learning another human language. Learning a language increases perception. Multilingual students are better at observing their surroundings. They can focus on important information and exclude information that is less relevant. They’re also better at spotting misleading data. Likewise, programming necessitates being able to focus on what works while eliminating bugs. Foreign language instruction today emphasizes practical communication — what students can do with the language. Similarly, coding is practical, empowering and critical to the daily life of everyone living in the 21st century. via Should Coding be the “New Foreign Language” Requirement? | Edutopia."
"603","2014-01-31","2023-03-24","https://computinged.wordpress.com/2014/01/31/big-data-vs-old-psychology-work-harder-vs-work-smarter/","I met with a prospective PhD student recently, who told me that she’s interested in using big data to inform her design of computing education. She said that she disliked designing something, just crossing her fingers hoping it would work. She and the faculty she’s working with are trying to use big data to inform their design decisions. That’s a fine approach, but it’s pretty work-intensive. You gather all this data, then you have to figure out what’s relevant, and what it means, and how it influences practice. It’s a very computer science-y way of solving the problem, but it’s rather brute force. There is a richer data source with much more easily applicable design guidelines: educational psychology literature. Educational psychologists have been thinking about these issues for a long time. They know a lot of things. We’re finding that we can inform a lot of our design decisions by simply reading the relevant education literature: I was recently reading a computer science paper in which the author said that we don’t know much about mathematics education, and that’s because we’ve never had enough data to come up with findings. But there were no references to mathematics education literature. We actually know a lot about mathematics education literature. Too often, I fear that we computer scientists want to invent it all ourselves, as if that was a better approach. Why not just talk to and read the work of really smart people who have devoted their lives to figuring out how to teach better? "
"604","2014-03-31","2023-03-24","https://computinged.wordpress.com/2014/03/31/facts-that-conflict-with-identity-can-lead-to-rejection-trying-to-teach-with-different-tools/","Thought-provoking piece on NPR. Take parents who believe that the MMR vaccine causes autism. Show them the evidence that that’s not true. They might tell you that they believe you — but they become even less likely to vaccinate future children. What?!? The explanation (quoted below) is that these parents found a sense of identity in their role as vaccine-deniers. They rejected the evidence at a deeply personal level, even if they cognitively seemed to buy it. I wonder if this explains a phenomenon I’ve seen several times in CS education: teaching with a non-traditional but pedagogically-useful tool leads to rejection because it’s not the authentic/accepted tool. I saw it as an issue of students being legitimate peripheral participants in a community of practice. Identity conflict offers a different explanation for why students (especially the most experienced) reject Scheme in CS1, or the use of IDE’s other than Eclipse, or even CS teacher reaction when asked not to use the UNIX command line. It’s a rejection of their identity. An example: I used to teach object-oriented programming and user interface software using Squeak. I had empirical evidence that it really worked well for student learning. But students hated it — especially the students who knew something about OOP and UI software. “Why aren’t we using a real language? Real OOP practitioners use Java or C++!” I could point to Alan Kay’s quote, “I invented the term Object-Oriented, and I can tell you I did not have C++ in mind.” That didn’t squelch their anger and outrage. I’ve always interpreted their reaction to the perceived inauthenticity of Squeak — it’s not what the majority of programmers used. But I now wonder if it’s about a rejection of an identity. Students might be thinking, “I already know more about OOP than this bozo of a teacher! This is who I am! And I know that you use Java or C++!” Even showing them evidence that Squeak was more OOP, or that it could do anything they could do in Java or C++ (and some things that they couldn’t do in Java or C++) didn’t matter. I was telling them facts, and they were arguing about identity. What Nyhan seems to be finding is that when you’re confronted by information that you don’t like, at a certain level you accept that the information might be true, but it damages your sense of self-esteem. It damages something about your identity. And so what you do is you fight back against the new information. You try and martial other kinds of information that would counter the new information coming in. In the political realm, Nyhan is exploring the possibility that if you boost people’s self-esteem before you give them this disconfirming information, it might help them take in the new information because they don’t feel as threatened as they might have been otherwise. via When It Comes To Vaccines, Science Can Run Into A Brick Wall : NPR."
"605","2014-07-06","2023-03-24","https://computinged.wordpress.com/2014/07/06/things-you-love-are-made-with-code-50-million-google-coding-initiative-targets-girls/","The website https://www.madewithcode.com/ is really nice, with high-quality videos. I like the direction. It’s not clear to me how all the different Google initiatives in CS education integrate. Does MadeWithCode, CS First, their new CS teaching repository, and the CS Fellows program all fit together in a strategic direction? Made with Code’s mission is anchored by a website where girls can use basic coding technique to make bracelets and other items; Google also will dole out grants to host girl-coding parties at Girl Scouts and Boys and Girls Clubs around the country, as well as fund a range of marketing and other awareness campaigns.The idea is to de-couple coding with dry tech chores, and instead show how the skill is vital to everything from movie-making to helping cure malaria. via $50 million Google coding initiative targets girls."
"606","2014-04-25","2023-03-24","https://computinged.wordpress.com/2014/04/25/new-google-resource-a-search-engine-for-cs-teachers/","Cameron Fadjo at Google has been leading the development of a customized search engine for identifying K-12 computer science materials. He asked me to share it with all of you: Are you a K-12 classroom teacher or after school program volunteer looking for computer science education materials (such as lessons, tutorials, worksheets, or videos)? Visit CS4HS (http://cs4hs.com/resources/) or Google for Education (http://www.google.com/edu/tools-and-solutions/index.html#stem-cs) to access the ‘Search Engine for K-12 Computer Science Education’, a new customized search developed by Google to help you find K-12 coding, computer programming, or computer science resources for your classroom or extra-curricular program."
"607","2014-04-28","2023-03-24","https://computinged.wordpress.com/2014/04/28/summer-is-for-writing/","Here at Georgia Tech, this week is Finals Week. From here on out is summer. I’m going to cut back on my blogging for summer. I have a lot of writing to do. (1) I need to have a complete draft of our CS Principles ebook for testing with teachers by the end of May. (2) I’m giving a workshop at the NCWIT Summit (also in May) on how to launch state-wide computing education reform. (3) My biggest project of the summer: I need to to turn this:   into the 4th edition of the Python MediaComp book. (4) I’m teaching at a summer school in Tarragona, Spain in July on teaching computer science and computing education research. I’d like to produce some lecture notes before that. This Fall will still be a lot of writing. I’ve promised to produce a book on computing education research from a learning sciences perspective for Jack Carroll’s Synthesis Lectures on Human-Centered Informatics. Blog post writing isn’t all that time consuming. The real time costs are (a) spare writing time goes to the blog rather than to larger, long-term projects and (b) I read all comments (here and on Twitter and Facebook) and think about whether to respond and how. So please excuse fewer posts while I focus on directing my writing energies toward these bigger projects."
"608","2014-04-01","2023-03-24","https://computinged.wordpress.com/2014/04/01/how-do-we-make-programming-languages-more-usable-and-learnable/","Amy Ko made a fascinating claim recently, “Programming languages are the least usable, but most powerful human-computer interfaces ever invented” which she explained in a blog post. It’s a great argument, and I followed it up with a Blog@CACM post, “Programming languages are the most powerful, and least usable and learnable user interfaces.” How would we make them better? I suggest at the end of the Blog@CACM post that the answer is to follow the HCI dictum, “Know thy users, for they are not you.” We make programming languages today driven by theory — we aim to provide access to Turing/Von Neumann machines with a notation that has various features, e.g., type safety, security, provability, and so on. Usability is one of the goals, but typically, in a theoretical sense. Quorum is the only programming language that I know of that tested usability as part of the design process. But what if we took Amy Ko’s argument seriously? What if we designed programming languages like we defined good user interfaces — working with specific users on their tasks? Value would become more obvious. It would be more easily adopted by a community. The languages might not be anything that the existing software development community even likes — I’ve noted before that the LiveCoders seem to really like Lisp-like languages, and as we all know, Lisp is dead. What would our design process be? How much more usable and learnable could our programming languages become? How much easier would computing education be if the languages were more usable and learnable? I’d love it if programming language designers could put me out of a job."
"609","2013-10-01","2023-03-24","https://computinged.wordpress.com/2013/10/01/live-coding-systems-challenge-cs-to-think-about-expression-again/","Bret Victor’s great time traveling video emphasized that the 1960’s and 1970’s computer scientists were concerned with expression. How do you talk to a computer, and how should it help you express yourself? As I have complained previously, everything but C and C-like languages have disappeared from our undergraduate curriculum. Bret Victor has explored why we talked about expression in those earlier years. I have a different question: How do we get computer scientists to think about expression again? Live coders think about and talk about expression, as evidenced from the conversations at Dagstuhl. They build their own languages and their own systems. They talk about the abstractions that they’re using (both musical and computational, like temporal recursion), how their languages support various sound generation techniques (e.g., unit generators, synthesized instruments, sampled sounds) and musical styles. If you look at the live coders on the Dagstuhl Seminar participant list, most of them are in music programs, not computer science. Why are the musicians more willing to explore expressive notations than the computer scientists? Lisp is alive and well in live coding. I now have a half-dozen of these systems running on my laptop. Overtone is a wonderful system based in Clojure. (See here more on Overtone, and particularly powerful combined with quil for Processing visuals combined with music.) Andrew Sorensen’s Impromptu was in Scheme, as is his new environment Extempore. Extempore is amazing. Take a look at this video of an installation called “Physics Playroom,” all controlled in Extempore. It’s a huge touch sensitive display that lets groups of students play with physics in real-time, e.g., exploring gravity systems on different planets. Andrew said that he could build 90% of this in Impromptu, but the low-level bits would have to be coded in C. He wasn’t happy with changing his expressive tools, so he created Extempore whose lowest level parts would be compiled (via LLVM) directly to machine code. Andrew went to this effort because he care a lot about the expressiveness of his tools. (At the opposite end from the Physics Playroom, see this video of Extempore running on ARM boards.) Not everything is S-Expressions. Thor Magnusson’s Ixi Lang (more on the Ixi Lang project) is remarkable. I love how he explores the use of text programming as both a notation and a feedback mechanism. When he manipulates sequences of notes or percussion patterns, whatever line he defined the sequence on changes as well (seen in red and green below, as agents/lines that have been manipulated by other operations).  Tidal from Alex Maclean is a domain-specific language built on top of Haskell, and his new Texture system creates more of a diagramming notation. Dave Griffiths has built his live coding environment, Fluxus, in Racket which is used in Program by Design and Bootstrap CS education projects. Dave did all his live coding at Dagstuhl using his Scheme Bricks, which is a Scratch-like block language that represents Scheme forms. (See here for Dave’s blog post on the Dagstuhl seminar.)  How many of our undergraduates have ever seen or used notations like these? How many have considered the design challenges of creating a programming notation for a given domain? Consider especially the constraints of live coding (e.g., expressiveness, conciseness, and usability at 2 am in a dance club). David Ogbourn raised the fascinating question at Dagstuhl of designing programming languages for ad hoc groups, in a collaborative design process. Some evidence suggests that there may be nine times as many end-user programmers in various domains as professional software developers. Do we teach CS students how to design programming notations to meet the needs and constraints of various domains and communities? I wonder how many other domains are exploring their own notations, their own programming languages, without much contribution or involvement from computer scientists. I hope that the live coders and others designing domain-specific languages challenge the academic computer scientists to think again about expression. I really can’t believe that the peak of human expression in a computing medium was reached in 1973 with C, and everything else (Java, C++, C#) is just variations on the motif. We in computer science should be leading in exploring the design of expressive programming languages for different domains."
"610","2013-09-03","2023-03-24","https://computinged.wordpress.com/2013/09/03/the-best-bret-victor-video-yet-we-dont-know-anything-about-computing/","The punchline for computing education comes in the last 5 minutes, but the previous 27 minutes are well worth watching. Bret is critiquing the same mindset I was reporting on when I said that Lisp and Smalltalk are now dead in undergraduate computer science. “We don’t know what we’re doing” is the most important phrase for computer scientists to say to ourselves and to our students. I enjoy the flash and style of Bret’s previous videos, but I love the message of this video. The details (with copious references) can be found on his website."
"611","2014-04-02","2023-03-24","https://computinged.wordpress.com/2014/04/02/workshop-report-multidisciplinary-research-for-online-education-ccc-blog/","The report on the CCC’s workshop on MOOCs and other online education technologies is now out. In February 2013 the Computing Community Consortium (CCC) sponsored the Workshop on Multidisciplinary Research for Online Education (MROE). This visioning activity explored the research opportunities at the intersection of the learning sciences, and the many areas of computing, to include human-computer interactions, social computing, artificial intelligence, machine learning, and modeling and simulation. The workshop was motivated and informed by high profile activities in massive, open, online education (MOOE). Point values of “massive” and “open” are extreme values that make explicit, in ways not fully appreciated previously, variability along multiple dimensions of scale and openness. The report for MROE has been recently completed and is online. It summarizes the workshop activities and format, and synthesizes across these activities, elaborating on 4 recurring themes: via Workshop Report: Multidisciplinary Research for Online Education » CCC Blog."
"612","2014-04-03","2023-03-24","https://computinged.wordpress.com/2014/04/03/eisenhowers-cross-of-iron-speech/","I recently watched the documentary Why we fight, and was struck by the prescience of President Eisenhower’s warning. So many of our educational decisions are made because of the harsh economic realities of today. How many of these are guns-for-butter choices might we have made differently if education was considered? Here in Georgia, computer science curricular decisions are being made with a recognition that there will be little or no funding available for teacher professional development — certainly not enough for every high school CS teacher in the state. What percentage of the DoD budget would it cost to provide professional learning opportunities to every CS teacher in the country? It’s certainly in the single digits. Every gun that is made, every warship launched, every rocket fired signifies, in the final sense, a theft from those who hunger and are not fed, those who are cold and are not clothed. This world in arms in not spending money alone. It is spending the sweat of its laborers, the genius of its scientists, the hopes of its children. The cost of one modern heavy bomber is this: a modern brick school in more than 30 cities. It is two electric power plants, each serving a town of 60,000 population. It is two fine, fully equipped hospitals. It is some 50 miles of concrete highway. We pay for a single fighter with a half million bushels of wheat. We pay for a single destroyer with new homes that could have housed more than 8,000 people. This, I repeat, is the best way of life to be found on the road the world has been taking. This is not a way of life at all, in any true sense. Under the cloud of threatening war, it is humanity hanging from a cross of iron. via Cross of Iron Speech."
"613","2014-04-04","2023-03-24","https://computinged.wordpress.com/2014/04/04/why-bother-how-hackathons-can-become-more-female-friendly/","Hackathons seem the antithesis of what we want to promote about computer science. On the one hand, they emphasize the Geek stereotype (it’s all about caffeine and who needs showers?), so they don’t help to attract the students who aren’t interested in being labeled “geeky.” On the other hand, it’s completely against the idea of designing and engineering software. “Sure, you can do something important by working for 36 hours straight with no sleep or design! That’s how good software ought to be written!” It’s not good when facing the public (thinking about the Geek image) or when facing industry and academia. So why try to make them “female-friendly”? OK, so there are a number of valid reasons women tend to stay away from hackathons. But what can hackathon planners due to get more females to attend their events? I found some women offering advice on this subject. Here are some suggestions for making your hackathon more female-friendly. Amy Quispe, who works at Google and ran hackathons while a student at Carnegie Mellon University, writes that having a pre-registration period just for women makes them feel more explicitly welcome at your event. Also, shy away from announcing that its a competition (to reduce the intimidation factor), make sure the atmosphere is clean and not “grungy” and make it easy for people to ask questions. “A better hackathon for women was a better hackathon for everyone,” she writes. via How hackathons can become more female-friendly | PCWorld."
"614","2014-04-07","2023-03-24","https://computinged.wordpress.com/2014/04/07/julie-ann-horvath-describes-sexism-and-intimidation-behind-her-github-exit/","The story is interesting and disappointing. Why would GitHub go through all these contortions just because they had this one female engineer — and would have there been less drama and stress if there had been more than just one female engineer? The story has been updated in Sunday’s NYTimes. The exit of engineer Julie Ann Horvath from programming network GitHub has sparked yet another conversation concerning women in technology and startups. Her claims that she faced a sexist internal culture at GitHub came as a surprise to some, given her former defense of the startup and her internal work at the company to promote women in technology. In her initial tweets on her departure, Horvath did not provide extensive clarity on why she left the highly valued startup, or who created the conditions that led to her leaving and publicly repudiating the company. Horvath has given TechCrunch her version of the events, a story that contains serious allegations towards GitHub, its internal policies, and its culture. The situation has greater import than a single person’s struggle: Horvath’s story is a tale of what many underrepresented groups feel and experience in the tech sector. via Julie Ann Horvath Describes Sexism And Intimidation Behind Her GitHub Exit | TechCrunch."
"615","2014-04-08","2023-03-24","https://computinged.wordpress.com/2014/04/08/why-few-women-in-engineering-its-the-bs-from-gas-station-without-pumps/","I hadn’t heard about this theory before the below blog post — recommended reading. As usual, I appreciate Kevin’s analysis. As parents and teachers we encourage children to pursue fields that they enjoy, that they are good at, and that can support them later in life. It may be that girls are getting the “that they are good at” message more strongly than boys are, or that enjoyment is more related to grades for girls. These habits of thought can become firmly set by the time students become men and women in college, so minor setbacks (like getting a B in an intro CS course) may have a larger effect on women than on men. I’m a little wary of putting too much faith in this theory, though, as the author exhibits some naiveté. via Why few women in engineering? | Gas station without pumps."
"616","2014-04-09","2023-03-24","https://computinged.wordpress.com/2014/04/09/ap-in-career-and-technical-education-they-go-together/","If states offer career and technical education in pathways (typically 3-4 courses) with a pathway completion exam, they are eligible for Perkins legislation funding to pay for staff and equipment. If AP CS is one of those courses, it’s easier to build the pathway (2-3 courses to define, rather than 3-4) and the pathway is more likely to lead to college-level CS, if a student so chooses. But as the below report mentions, many states believe that Perkins legislation disallows the AP to count. It can, and here’s the report describing how. If you’re hearing this story in your state, be sure to send your department of education this report! Career and Technical Education and Advanced Placement (July 2013, PDF) Traditionally Advanced Placement® (AP) courses and exams have not been recommended for students in Career Technical Education (CTE) programs. This paper, jointly developed and released by NASDCTEc and the College Board aims to bust this myth by showing how AP courses and exams can be relevant to a student’s program of study across the 16 Career Clusters®. via National Association of State Directors of Career Technical Education Consortium : Policy & Legislation : Issue Briefs & Papers."
"617","2014-04-10","2023-03-24","https://computinged.wordpress.com/2014/04/10/how-moocs-and-big-data-could-lead-to-less-diverse-hiring-those-who-could-be-left-behind/","Yup, Herminia has the problem right — if CS MOOCs are even more white and male than our face-to-face CS classes, and if hiring starts to rely on big data from MOOCs, we become even less diverse. But that’s just the tip of the iceberg. One of the developments that will undoubtedly cement the relationship between big data and talent processes is the rise of massive open online courses, or MOOCs. Business schools are jumping into them whole hog. Soon, your MOOC performance will be sold to online recruiters taking advantage of the kinds of information that big data allows—fine distinctions not only on content assimilation but also participation, contribution to, and status within associated online communities. But what if these new possibilities—used by recruiters and managers to efficiently and objectively get the best talent—only bake in current inequities? Or create new ones? via Herminia’s Blog: Hiring and Big Data: Those Who Could Be Left Behind."
"618","2014-04-14","2023-03-24","https://computinged.wordpress.com/2014/04/14/big-data-are-we-making-a-big-mistake-yes-especially-in-education/","Important article that gets at some of my concerns about using MOOCs to inform education research. The sampling bias mentioned in the article below is one of my responses to the claim that we can inform education research by analyzing the results of MOOCs. We can only learn from the data of participants. If 90% of the students go away, we can’t learn about them. Making claims about computing education based on the 10% who complete a CS MOOC (and mostly white/Asian, male, wealthy, and well-educated at that) is bad science. Cheerleaders for big data have made four exciting claims, each one reflected in the success of Google Flu Trends: that data analysis produces uncannily accurate results; that every single data point can be captured, making old statistical sampling techniques obsolete; that it is passé to fret about what causes what, because statistical correlation tells us what we need to know; and that scientific or statistical models aren’t needed because, to quote “The End of Theory”, a provocative essay published in Wired in 2008, “with enough data, the numbers speak for themselves”. Unfortunately, these four articles of faith are at best optimistic oversimplifications. At worst, according to David Spiegelhalter, Winton Professor of the Public Understanding of Risk at Cambridge university, they can be “complete bollocks. Absolute nonsense.” via Big data: are we making a big mistake? – FT.com."
"619","2014-04-15","2023-03-24","https://computinged.wordpress.com/2014/04/15/crowd-sourcing-hints-for-code-org-tutorials-via-csta-teachers/","Really interesting idea — Code.org’s Pat Yongpradit sent a note to all of CSTA, asking CS teachers to help provide hints for Code.org tutorials. By reaching out to CSTA, they’re doing better than crowd-sourcing. They’re CS-teacher-sourcing. We’ve had millions of students try the Code.org tutorials. They’ve submitted over 11 million unique computer programs as solutions to roughly 100 puzzles. We’ve mapped out which submissions are errors (ie they don’t solve the puzzle), and which are sub-optimal solutions (they solve the puzzle, but not efficiently). Today, erroneous user submissions receive really unhelpful error feedback, such as “You’re using the right blocks, but not in the right way”. We want your help improving this, by providing highly personal feedback to very specific student errors. Watch the video below to see what we mean. via Add hints to Code.org tutorials | Code.org."
"620","2014-04-16","2023-03-24","https://computinged.wordpress.com/2014/04/16/guest-post-report-on-a-cs-mooc-from-a-cs-lecturer/","null"
"621","2014-04-17","2023-03-24","https://computinged.wordpress.com/2014/04/17/guest-post-debra-richardson-on-progress-on-california-cs-ed-legislation/","The California state legislature is attempting to affect change to computer science education in California, and for all the right reasons. They’re getting the message that computer science is what drives innovation and economic growth in California, and that the demand for computer science graduates in California far exceeds supply. There are simply not enough students prepared or preparing to join this high tech workforce. They’re also starting to understand that computer science needs to count for something other than an elective course for more schools to offer it and for more students to take it – especially girls and underrepresented students of color. What they may not quite understand yet is that there aren’t enough teachers prepared to teach computer science in K-12, although one assemblyman spoke of the need for a single subject teaching credential in computer science, so maybe someday we’ll get there … baby steps! So, it was exciting in Sacramento last week as the Assembly and Senate Education Committees passed a handful of CS-related bills with flying colors and broad bi-partisan support! ACCESS (the Alliance for California Computing Education in Students and Schools) was on hand to help provide analysis and information. Many thanks to Josh Paley, a computer science teacher at Gunn High School in Palo Alto and a CSTA advocacy and leadership team member, who provided substantive testimony on two priority bills*. Josh provided compelling stories of students who had graduated and gone on to solve important problems using their CS skills. Amy Hirotaka, State Policy and Advocacy Manager, of Code.org, Andrea Deveau, Executive Director of TechNet, and Barry Brokaw, lobbyist for Microsoft also testified on these bills. It was also exciting to see a wide range of organizations supporting this important discipline. All of the following CS-related bills passed out of committee, all but one with unanimous approval: 1) AB 1764* (Olsen and Buchanan) would allow school districts to award students credit for one mathematics course if they successfully complete one course in computer science approved by the University of California as a “category c” (math) requirement for admissions. Such credit would only be offered in districts where the school district requires more than two courses in mathematics for graduation, therefore, it does not replace core math requirements. 2) AB 1539* (Hagman) would create computer science standards that provide guidance for teaching computer science in grades 7-12. 3) AB 1540 (Hagman) establishes greater access to concurrent enrollment in community college computer science courses by high school students. 4) AB 1940 (Holden) establishes a pilot grant program to support establishing or expanding AP curriculum in STEM (including computer science) in high schools with such need (passed with two noes). 5) AB 2110 (Ting) requires computer science curriculum content to be incorporated into curriculum frameworks when next revised. 6) SB1200 (Padilla) would require CSU and request UC to establish a uniform set of academic standards for high school computer science courses, to satisfy the “a-g” subject requirements, as defined, for the area of mathematics (“c”) for purposes of recognition for undergraduate admission at their respective institutions. 7) ACR 108 (Wagner) would designate the week of December 8, 2014, as Computer Science Education Week (passed on consent). AB 1530 (Chau), to be heard by the Assembly Education Committee on April 23, would encourage the Superintendent of Public Instruction to develop or, as needed, revise a model curriculum on computer science, and to submit the model curriculum to the State Board of Education for adoption (specifically focuses on grades 1-6). Anyone really interested in hearing the bill presentation, testimony and supporters can see it here: Senate Education Committee: http://calchannel.granicus.com/MediaPlayer.php?view_id=7&clip_id=2012 Assembly Education Committee: http://calchannel.granicus.com/MediaPlayer.php?view_id=7&clip_id=2019 I’ll plan another update once these bills move further."
"622","2014-04-18","2023-03-24","https://computinged.wordpress.com/2014/04/18/moocs-one-size-doesnt-fit-all/","My colleague, Amy Bruckman, considers in her blog how HCI design principles lead us to question whether MOOCs can achieve their goals. Can a MOOC teach course content to anyone, anywhere? It’s an imagination-grabbing idea. Maybe everyone could learn about topics from the greatest teachers in the world! Create the class once, and millions could learn from it! It seems like an exciting idea. Until you realize that the entire history of human-computer interaction is about showing us that one size doesn’t fit all. via MOOCs: One Size Doesn’t Fit All | The Next Bison: Social Computing and Culture."
"623","2014-04-22","2023-03-24","https://computinged.wordpress.com/2014/04/22/i-dont-believe-it-early-stem-education-will-lead-to-more-women-in-it/","I don’t believe the main propositions of the article below. Not all STEM education will lead to more women discovering an interest in IT. Putting computing as a mandatory subject in all schools will not necessarily improve motivation and engagement in CS, and it’s a long stretch to say that that will lead to more people in IT jobs. I addressed the quote below, by Ashley Gavin, in my Blog@CACM post for this month: The Danger of Requiring CS in US K-12 Schools. “You make it an option, the girl is not going to take it. You have to make it mandatory and start it at a young age,” says Ashley Gavin, curriculum director at Girls Who Code, a nonprofit working to expose more girls to computer science at a young age that has drawn support from leading tech firms such as Google, Microsoft and Intel. “It’s important to start early because, most of the fields that people go into, they have exposure before they get to college. We all study English before we get to college, we all study history and … social studies before we get to college,” Gavin says. “No one has any idea what computer science is. By the time you get to college, you develop fear of things you don’t know. Therefore early exposure is really important.” via Early STEM Education Will Lead to More Women in IT – CIO.com."
"624","2014-04-30","2023-03-24","https://computinged.wordpress.com/2014/04/30/important-cra-study-how-long-does-it-take-to-get-a-phd-in-cs/","Really interesting new study out of Computing Research Association (CRA). How long does it take to get a PhD in CS? How does that compare to other STEM disciplines? How does it differ based on gender or minority status?  Table 3 and Figure 1 show the median time to complete a Ph.D. since first beginning a graduate program, for each subgroup, for each cohort. Gender . Women take longer than men. This is true in both cohorts; there is a larger difference (almost a year) in the second cohort. Citizenship status. In the earlier cohort, students on temporary visas take less time than citizen or permanent resident students. In the later cohort, the median times of the two groups are exactly the same. Minority status. Students from underrepresented minorities (URM) – that is, racial and ethnic groups underrepresented in computing – take longer than majority students to complete a Ph.D.. In the first cohort, the difference is almost two years; in the second cohort it is close to one year. Carnegie Class. Eighty percent of doctorates in computing are granted by “Very high research activity” institutions; students at those institutions take noticeably less time to complete their degrees than those at the less-research-intensive institutions. via Computing Research News – Online – Computing Research Association."
"625","2014-05-30","2023-03-24","https://computinged.wordpress.com/2014/05/30/high-school-cs-teachers-need-to-read-and-trace-code-not-develop-software/","My May 2014 Blog@CACM post, “What it takes to be a successful high school computer science teacher” sneaks up on a radical suggestion, that I’ll make explicitly here. High school computer science teachers need to be able to read and trace code. They don’t necessarily need to know much about writing code, and they certainly don’t need to know how to be software developers. As we are developing our CSLearning4u ebook, we’re reviewing a lot of our prior research on the practices of successful CS teachers. What do we need to be teaching teachers so that they are successful? We don’t hear successful CS teachers talking much about writing code. However, the successful ones read code a lot, while the less-successful ones do not. Raymond Lister has been giving us evidence for years that there’s a developmental path from reading and tracing code that precedes writing code. Yes, I’m talking about taking a short-cut here. I’m suggesting that our worldwide professional development efforts for high school teachers should emphasize reading and tracing code, not writing code. Our computer science classes do the reverse of that. We get students writing code as soon as possible. I’m suggesting that that is not useful or necessary for high school teachers. It is easier for them to read and trace code first (Lister’s studies) and it’s what they will need to do most often (our studies). We can reduce costs (in time and effort) of this huge teacher development effort by shuffling our priorities and focusing on reading. (We do know from studies of real software engineers that they read and debug more than they write code. Maybe it would be better for everyone to read before writing, but I’m focusing on the high school teachers right now.)"
"626","2013-04-25","2023-03-24","https://computinged.wordpress.com/2013/04/25/googles-computer-science-teach-fellows-program/","At first, Google contacted us to find existing CS teachers to be part of their new teaching fellows program, but they’ve just opened it up to new grads as well. Google is searching for talented (STEM) Science, Technology, Engineering or Math teachers to join a 2-year post-graduate program designed to grow leaders in computer science education. The program targets new graduates passionate about the future of computer science education. Applications are being accepted on a rolling basis for a two-year program that begins in June 2013. Applicants must be able to commit to the entire two years. As a part of the practicum, you will be working with thought leaders in education to learn the newest techniques and programs for computer science pedagogy, implementing programs with area schools and students, and creating your own innovative approaches to student learning. You can apply for the position and find more details about the program on this website. Please direct any questions you might have to TeachCS@google.com. The role: Computer Science Teaching Fellows, New Grad 2013 Minimum Qualifications: • Bachelor’s degree in computer science or related field • Some form of teaching or instruction experience (e.g., teaching assistant, tutor) • Able to commit to a 2-year program and start June 2013 • Willing to relocate to/within South Carolina http://www.google.com/intl/en/jobs/students/tech/fulltime/uscanada/computer-science-teaching-fellows-new-grad-2013-berkeley-county.html"
"627","2013-04-25","2023-03-24","https://computinged.wordpress.com/2013/04/25/school-for-poetic-computation/","I love the idea of this school. It reminds me of Donald Knuth’s Turing Award lecture Computing Programming as an Art and of Guy Steele’s call for an MFA in software practices. We are interested in craft, and the idea that every writer needs space and time to hone their trade. Our school aims to provide a safe haven – so you could get acquainted with the craft at your own pace, make it your own, find that part between your true creative process and the craft. This takes time, encouragement, the right push at the right time, conversations with colleagues, and more time. via SFPC – mission."
"628","2013-05-06","2023-03-24","https://computinged.wordpress.com/2013/05/06/hp-unveils-online-stemx-courses-for-teachers/","Interesting — HP is offering a MOOC for “STEMx” teachers (below), and Google is offering CS teacher fellowships. Nice to see the companies stepping up. I’m not convinced that MOOCs are the best way to reach teachers, but a bigger question is how many teachers will identify with the term “STEMx.” We have seen that teacher identity drives teacher’s pursuit of professional development. Will they see themselves in this term? Coined by the HP Catalyst Initiative, STEMx covers not only science, technology, engineering and math, but also other high-technology disciplines such as computer science, nanoscience and biotech. The modified acronym also refers to the skills of collaboration, creativity, communication, problem solving, inquiry, computational thinking and “global fluency.” The MOOC was announced by HP’s education partners, the International Society for Technology in Education (ISTE) and the New Media Consortium (NMC), during the 2013 HP Catalyst Summit in Sao Paulo, Brazil. The meeting attracted more than 120 educators and policy leaders. via HP Unveils Online ‘STEMx’ Courses For Teachers – Education – Online."
"629","2014-07-03","2023-03-24","https://computinged.wordpress.com/2014/07/03/online-education-is-dead-long-live-mentored-simulated-experiences/","Roger Schank (one of the founders of both cognitive science and learning science) declares MOOCs dead (including Georgia Tech’s OMS degree, explicitly), while recommending a shift to Mentored Simulation Experiences. I find his description of MSE’s interesting — I think our ebook work is close to what he’s describing, since we focus on worked examples (as a kind of “mentoring”) and low cognitive-load practice (with lots of feedback). So, while I am declaring online education dead, because every university is doing it and the market will soon be flooded with crap, I am not declaring the idea of a learning by doing mentored experience dead. So, I propose a new name, Mentored Simulated Experiences. via Education Outrage: Online education and Online degrees are dead; now let’s move on to something real."
"630","2013-05-21","2023-03-24","https://computinged.wordpress.com/2013/05/21/georgia-tech-will-offer-a-masters-degree-online-nytimes-com/","In case anyone didn’t see the various articles, Georgia Tech’s College of Computing will be offering a Udacity-based MS degree starting. The faculty did vote on the proposal. I argued against it (based mostly on learning and diversity arguments), but lost (which led to my long winter post). Faculty in the College of Computing have been asked not to talk about the online MS degree (which seems weird to me — asking faculty not to talk about their own degree programs). Please understand if I don’t answer questions in response to this announcement. Starting in the fall, the Georgia Institute of Technology, together with AT&T and Udacity, an online education venture, will offer a master’s degree in computer science that can be earned entirely through so-called massive open online courses, or MOOCs. While the courses would be available free online to the general public, students seeking the degree would have to have a bachelor’s degree in computer science, and pay tuition that is expected to be less than $7,000. via Georgia Tech Will Offer a Master’s Degree Online – NYTimes.com."
"631","2013-03-21","2023-03-24","https://computinged.wordpress.com/2013/03/21/living-with-moocs-surviving-the-long-open-learning-winter/","One of the positive benefits of MOOCs is that a lot of faculty and administration are exploring educational innovations with technology. When teachers explore how to facilitate learning, improved teaching and learning is likely to result. One of the problems is that many of these teachers and administrators are deciding that MOOCs and other open learning resources are the best bets for addressing educational problems. They are buying into the belief that open learning is the best that there is (or, perhaps, the only thing that they found) and into the associated beliefs (e.g., that existing educational systems are ineffective and unsustainable, that “everyone already knows that a college degree means next to nothing“). Those of us who do educational technology research and don’t do MOOCs are likely in for a stretch where our work will be under-appreciated, or simply ignored. The AI community talks about their “AI Winter.” Let’s call this the Open Learning Winter. Regular readers of this blog (and I’m grateful that you are here!) know that I’ve been doing a good bit of traveling the last few months. From MIT and Stanford, to Indiana and SIGCSE, I’ve had the opportunity to hear lots of people talk about the educational innovations that they are exploring, why they have decided on MOOCs and other open learning resources, and what they think about those of us who are not building MOOCs. The below are paraphrased snippets of some of these conversations (i.e., some of the parts of these quotes are literally cut-and-paste from email/notes, while other parts are me condensing the conversation into a single quote representing what I heard): These attitudes are not going to change quickly. People are investing in MOOCs and other open learning resources. While I do not believe that the MOOCopalypse will happen, people who do believe in it are making investments based on that belief. The MOOC-believers (perhaps MOOCopalypse survivalists?) are going to want to see their investments will pan out and will keep pursuing that agenda, in part due to the driving power of “sunk costs” (described in this well done Freakonomics podcast). That’s normal and reasonable, but it means that it will be a long time before some faculty and administrators start asking, “Is there anything other than MOOCs out there?” I think MOOCs are a fascinating technology with great potential. I do not invest my time developing MOOCs because I believe that the opportunity cost is too high. I have had three opportunities to build a MOOC, and each time, I have decided that the work that I would be giving up is more valuable to me than the MOOC I would be producing. I do not see MOOCs addressing my interests in high school teachers learning CS, or in end-users who are learning programming to use in their work, or in making CS more diverse. It may be that universities will be replaced by online learning, but I don’t think that they’ll all look like MOOCs. I’m working on some of those non-MOOC options. Researchers like me, who do educational technology but don’t do MOOCs, need to get ready to hunker down. Research funding may become more scarce since there are MOOCopalypse survivalists at NSF and other funding agencies. University administrators are going to be promoting and focusing attention on their pet MOOC projects, not on the non-believers who are doing something else. (Because we should realize that there won’t be anything else!) There will probably be fewer graduate students working in non-MOOC areas of educational technology. Most of the potential PhD students who contacted me during this last application cycle were clear about how important MOOCs were to them and the research that they wanted to do. We need to learn to live with MOOCs, even if we don’t do MOOCs. Here are a couple of the hunkering down strategies I’ve been developing: I can’t predict just how long the Open Learning Winter might be. Given the height of the hype curve associated with MOOCs and the depth of the pockets of the early adopters, I suspect that it’s going to be quite a long, cold winter. Make sure that you have lots of jerky on-hand — and hope that it’s just winter and not an Ice Age."
"632","2014-07-08","2023-03-24","https://computinged.wordpress.com/2014/07/08/have-we-reached-a-consensus-on-a-national-cs-curriculum-i-hope-not/","Alfred Thompson raises an important question here. I agree with him — we haven’t reached consensus. We also will never have a national CS curriculum in the United States, because we have a distributed education model. It’s a state decision. I do fear that there may be a de facto standard now. But the bigger concern is at a higher level of abstraction: How should we make curricular decisions in CS (or anywhere else)? I hope that we make our decisions based on empirical evidence. I don’t see that we have the empirical evidence that any of the below classes ought to be the dominant model. Oh boy are things up in the air in the HS CS curriculum these days. While we have some great advice from the CSTA (CSTA K-12 Computer Science Standards) the implementation of those standards are still left up to individual schools/districts/states. Still it is easy to come to the conclusion from watching social media and some conferences that there is a consensus on a high school Computer Science curriculum. Today I got the following from a friend. Is it an incorrect read or has a national consensus for CS in HS’s been achieved with a sequence of : –ECS (Exploring Computer Science) Curriculum –CS Principles/BJC Curriculum (Beauty and Joy of Computing) –AP CS (JAVA [for now]) via Computer Science Teacher: Have We Reached a Consensus on a National CS Curriculum?."
"633","2013-10-18","2023-03-24","https://computinged.wordpress.com/2013/10/18/computer-science-wins-chemistry-nobel-prize/","A big win for computational science, and for the argument that computer science is important, even for people who aren’t going to be professional software developers. When he conceived his prestigious prizes in 1895, Alfred Nobel never imagined the need to honor an unknown field called computer science. But the next best thing happened on Wednesday: Computing achieved a historic milestone when the Nobel Prize for chemistry went to a trio of researchers — one of them a Stanford University professor — for their groundbreaking work using computers to model the complex chemistry that sustains life. “Computers in biology have not been sufficiently appreciated. Now they have been,” said ebullient winner Michael Levitt of Stanford’s School of Medicine, the university’s second Nobel winner this week. via Stanford’s Nobel chemistry prize honors computer science – San Jose Mercury News."
"634","2013-06-10","2023-03-24","https://computinged.wordpress.com/2013/06/10/hake-on-moorfaps-massive-open-online-repetitions-of-failed-pedagogy/","I enjoy Richard Hake’s posts. He has done excellent empirical educational research, so he knows what he’s talking about. His posts are filled with links to all kinds of great research and other sources. This post does a nice job of making an argument similar to mine — MOOCs don’t utilize what we know works best in teaching. Hake goes on to point out, “And they’re not measuring learning, either!” 1. “The online and blended education world, really the higher ed world where most of us spend our days, fails to make any appearance.” 2. “If in fact the real story is the rise of blended and online learning, then [that story] will go completely untold if MOOCs are the sole focus.” In my opinion, two other problems are that “Laptop U”: 3. Fails to emphasize the fact that MOOCs, like most Higher Ed institutions, concentrate on DELIVERY OF INSTRUCTION rather than STUDENT LEARNING to the detriment of their effectiveness – – see “From Teaching to Learning: A New Paradigm for Undergraduate Education” [Barr and Tagg (1995)] at <http://bit.ly/8XGJPc>. 4. Ignores the failure of MOOC providers to gauge the effectiveness of their courses by pre-to-postcourse measurement of student learning gains utilizing “Concept Inventories” <http://bit.ly/dARkDY>. As I pointed out “Is Higher Education Running AMOOC?” [Hake (2013) at <http://yhoo.it/12nPMZB>, such assessment would probably demonstrate that MOOCs are actually MOORFAPs (Massive Open Online Repetitions of FAiled Pedagogy). There would then be some incentive to transform MOOCs into MOOLOs (Massive Open Online Learning Opportunities). via Net-Gold : Message: Re: ‘Laptop U’ Misses the Real Story."
"635","2013-07-09","2023-03-24","https://computinged.wordpress.com/2013/07/09/off-to-michigan-state-to-talk-education-and-engineering-then-csta-conference-for-ecep/","I’m going to Michigan State University on Wednesday July 10 through Friday August 12. On the 10th, I’m visiting with colleagues whom I knew in Education at the University of Michigan (Bob Geier and Joe Krajcik) and giving a brownbag talk. I’m really looking forward to hanging out with Education folks for the day. I’ve just learned that Danny Caballero has moved to MSU, so I’m hoping to meet up with him, too. On Thursday and Friday, I’m attending a workshop on integrated engineering education. Since I used to do work like that, and haven’t done much in Engineering Education in years, I thought it would be fun and interesting — something I might want to get involved in again. Plus, it was a great chance to get back ‘home’ to Michigan. The day after I get back, we are heading off to Boston and the CSTA Conference in Quincy, Massachusetts. We are holding an ECEP Day on Sunday July 14, to connect with CSTA Chapter Leaders and Leadership Cohort in the states where we’re working. On Monday, July 15, I’m just hanging out at the CSTA Conference, so if you’re there, I hope you will stop by the ECEP table and visit!"
"636","2014-11-09","2023-03-24","https://computinged.wordpress.com/2014/11/09/open-access-as-ip-communism/","Great piece by Moshe Vardi on the ills of open access (something I’ve written about). I agree with him — the open access movement is not sustainable in its current form. There are advantages to forms of capitalism. It is regrettable, I believe, that the open access OA movement found itself in the IP communist camp. OA advocates unrestricted online access to peer-reviewed scholarly research. On the face of it, this idea is seductively attractive. Who can object to unrestricted access to research? Furthermore, after seeing the price of scholarly publications escalate in the 1990s, open access seemed like a perfect solution; no more escalating subscription fees. But just like any other intellectual property, online publishing has fixed costs, which must be covered. OA advocates often ignore or minimize this issue, but this reality cannot be ignored forever and the dominant business model that has emerged to support OA publishing is “author pays,” whereby authors pay article-processing fees to cover publishing costs. This model is not new, but in recent years it has gained a strong foothold in science publishing, both with for-profit commercial publishers and non-profit societies like ACM, which now offers such an option for any and all articles in its Digital Library DL. via Openism, IPism, Fundamentalism, and Pragmatism | August 2014 | Communications of the ACM."
"637","2014-11-07","2023-03-24","https://computinged.wordpress.com/2014/11/07/educational-technology-as-imperialism-finding-a-middle-ground-between-papert-and-freire/","Audrey Watters is an insightful writer who tackles hard issues in educational technology. I’ve cited her work before in this blog. The post linked below made me realize that I need to read more by Paulo Freire and Paulo Blikstein, and how important it is to avoid, “The latest in a long line of educational salvations that the Global North has imposed on the Global South.” I deeply appreciate Freire’s emphasis on “school,” which Audrey emphasizes. The need for school can also be seen in the research findings of Yasmin Kafai and Deborah Fields (who found that kids who discover tools like Scratch tend to be even more privileged than those in undergrad CS classes) and Betsy DiSalvo (who found that immigrant families don’t even know what words to search for in order to find learning resources). Open education efforts alone are unlikely to reach the underprivileged students who most need the resources. We need school in order to reach everyone. It isn’t simply that an XPRIZE would likely offer an imperialist curriculum — that it’s in English is only part of the problem here. What does it mean to teach “O is for Octopus” in Sub-Saharan Africa, for example? It’s that all of this will be delivered on an Android tablet, and with that comes a host of other technological imperialist overtures — telecommunications companies offering hardware and software and banking and schooling; Google’s special brand of data-mining; and more broadly the tech sector’s penchant for surveillance, for starters.What is the goal of the Global Learning XPRIZE when it comes to learning? Is it for children in the developing world to join the global economy, for example? If so how? On whose terms? To what end? In what role? Why? How? Under whose Terms of Service? via Ed-Tech Imperialism and the XPRIZE for Global Learning."
"638","2013-03-08","2023-03-24","https://computinged.wordpress.com/2013/03/08/must-read-hacking-at-education-ted-technology-entrepreneurship-uncollege-and-the-hole-in-the-wall/","Audrey Watters has an insightful essay that show how the “Hack Education” and TED movements misunderstand school. Public school is not better than learning on your own. Public school is about making sure that everyone has the opportunity to learn. I believe that the issues are the same for MOOCs, which tend to draw a well-educated, majority-class, and male audience. I highly recommend reading her entire essay linked below. “I’m the first MacCaw not to go to Cambridge,” says one of the informant. This and a myriad of other utterances are rather mind-boggling markers of privilege, markers that Hacking Your Education fails to examine and that the book seems extraordinarily unaware of. One hack it offers for the young uncollege-er: “take people out for coffee” — budget $150 a month to do so. Another hack: “go to conferences.” Sneak in. “Hardly anyone will notice.” Another hack: “buy an airplane ticket.” “You can go anywhere in the world for $1500.” “Collect frequent flyer points.” Too bad if you’re big or black or brown or a non-native English speaker or the working poor or a single mom. Just practice your posture and your grammar and your email introductions, and you’re golden. via Hacking at Education: TED, Technology Entrepreneurship, Uncollege, and the Hole in the Wall."
"639","2013-01-29","2023-03-24","https://computinged.wordpress.com/2013/01/29/demographics-on-gts-first-coursera-mooc-computational-investing-by-tucker-balch/","My colleague Tucker Balch posted on his blog the detailed demographics of his Coursera MOOC (the first at Georgia Tech), “Computational Investing.” He got 41% of the completers to respond to his survey, but only 2.6% of those who enrolled but did not complete. That’s a remarkable response rate, so it’s a great snapshot into who completes a course like this. A big caveat up-front: This is “Computational Investing.” It’s clearly an elective subject, so we would expect demographics to shift from what we might hope to see in a required course (like CS1 or data structures) or a common upper-level course (like AI). Some of the results that I found intriguing:"
"640","2014-11-11","2023-03-24","https://computinged.wordpress.com/2014/11/11/come-visit-the-cs-education-zoo-from-steve-wolfman/","Post to SIGCSE-members, re-posted here with Steve’s permission. TL;DR version: Watch Will&Steve interview interesting CS Ed folks on the CS Ed Zoo at http://webyrd.net/zoo.html. Most recent episode with Mark Guzdial at https://www.youtube.com/watch?v=z1oTtPECHZI Full version: It’s a common lament that CS education is an isolated practice. You teach in your own classroom, a colleague drops by once a year for performance review, and otherwise only your students know what you do. We know what you’re thinking: I wish there were a place where CS educators were kept on 24-hour public display (locked securely behind iron bars, of course). Well, now there is! Announcing the CS Education Zoo http://webyrd.net/zoo.html, a bi-weekly-very-ish interview series where CS educators (and people with animal-themed last names) Will Byrd and Steve Wolfman interview interesting people involved in CS education (even if they lack animal-themed last names). So far, we’ve posted six episodes: + Mark Guzdial extols the power and potential of live coding (and MUCH more): https://www.youtube.com/watch?v=z1oTtPECHZI + David Nolen ponders the impact of a programmer’s first language on their learning (and MUCH more): https://www.youtube.com/watch?v=WxR-AjRZUrQ + Becky Bates shares how to craft a large, heterogeneous project course (and MUCH more): https://www.youtube.com/watch?v=8QSOHDo4pVA + Jeff Forbes explains why “rapid feedback is better than good feedback” (and MUCH more): https://www.youtube.com/watch?v=mJVoPE7IeaI + Rob Simmons discusses the subtleties of teaching formal reasoning about programming in intro courses (and MUCH more): http://www.youtube.com/watch?v=b2xd5Bc_-Os + Kim Voll tells us what to tell our students interested in gaming careers (and MUCH more): https://www.youtube.com/watch?v=4JcNHHSPMzE And in the works: a chat with some of the people behind Hacker School. P.S. Drop us a line (wolf@cs.ubc.ca or tweet like the cool kids apparently do to @steve_wolfman and @webyrd) if there’s some person, group, or other amorphous-but-audible entity you think we should invite!"
"641","2014-11-13","2023-03-24","https://computinged.wordpress.com/2014/11/13/why-nerd-culture-must-die-not-everyone-can-teach-themselves/","An interesting argument, with implications for computing education. If we went to get beyond “nerd culture,” then we have to take seriously the welcoming and education of new-comers to our field. And that’s where the problem lies. We’re still behaving like the rebel alliance, but now we’re the Empire. We got where we are by ignoring outsiders and believing in ourselves even when nobody else would. The decades have proved that our way was largely right and the critics were wrong, so our habit of not listening has become deeply entrenched. It even became a bit of a bonding ritual to attack critics of the culture because they usually didn’t understand what we were doing beyond a surface level. It didn’t used to matter because nobody except a handful of forum readers would see the rants. The same reflex becomes a massive problem now that nerds wield real power. GamerGate made me ashamed to be a gamer, but the scary thing is that the underlying behavior of attacking critics felt like something I’d always seen in our culture, and tolerated. It only shocked me when it was scaled up so massively into rape and death threats, and I saw mainstream corporations like Intel folding in the face of the pressure we can bring to bear. via Why nerd culture must die « Pete Warden’s blog."
"642","2013-08-02","2023-03-24","https://computinged.wordpress.com/2013/08/02/she-the-documentary-and-the-audience/","I was sent links to the She++ documentary by several people. It’s a nicely done documentary on the issues of women in undergraduate computing at Stanford. The Twitter account for She++ posted the video link with the comment, “Show this to your daughters!” Others in social media are suggesting that this should be seen by all girls to encourage them in CS. This is a great video for describing the students’ experience. I’m not sure it works as a recruiting tool. In some of our GaComputes work, we found that female workshop leaders were more likely to warn the girls in their computing workshops, “Now, I know that this is hard, but you’ll be able to do something cool here.” The male leaders were more likely to just say, “This is so cool!” The female leaders tended to get declines in interest in computing — girls left the workshop saying more often, “Computing is hard” and “Girls can’t do computing.” The male leaders tended to get positive improvement in attitudes. Notice that the male leaders didn’t say it was easy. They didn’t lie. They just emphasized the benefit. This video feels honest and heartfelt. The women interviewed say things like, “It was really difficult” and “I didn’t feel I fit in.” And when they speak to the camera, they say, “Girls, it will be hard at first, but it will get better.” I believe that the speakers are being honest, but I worry that those descriptions might trigger stereotype threat. Does telling girls about imposter syndrome make it less likely? Some pretty amazingly successful people suffer from imposter syndrome. I recommend that the video be seen by all computer science teachers, especially teachers of undergraduates. It’s important for teachers to know about the experience of women in their classrooms. I don’t recommend it for girls that you hope to recruit into computing."
"643","2014-11-01","2023-03-24","https://computinged.wordpress.com/2014/11/01/the-challenge-of-turning-business-teachers-into-cs-teachers-wheres-the-passion/","Josh Paley raises an important point here. The best teachers are passionate about what they do. Converting existing teachers (most often business teachers, since that’s how CS is classified in most states) into CS teachers may result in dispassionate, unhappy teachers. I don’t think it’s the only possible outcome, and I don’t think that hiring teachers with “CS background” (degrees? job experience?) is the only answer. But he’s right that it’s not the same as recruiting someone who decided on a career as a Computing Teacher. I think the same sort of thing applies in CS. Many retrained teachers will be enthusiastic about computing, study it intensely and, in time, become experts. Others will teach CS, but it won’t be their passion, and that’s often a recipe for unhappy students who see an unhappy teacher. There are lots of other possible outcomes, some better than others. No matter how you slice it, it isn’t the same as hiring a person with a CS background to teach CS. via If you want CS education, put your money where your mouth is. | Cheaper Than Rogaine."
"644","2014-11-03","2023-03-24","https://computinged.wordpress.com/2014/11/03/why-women-leave-tech-its-the-culture-not-because-math-is-hard/","Everything that I have found in my research, and everything that I see in my personal experience agrees with the finding below. Women like CS (maybe even more than men, on average). Women leave because of the culture. Do read the whole article — there’s a bunch of data and interesting analyses. One-hundred-ninety-two women cited discomfort working in environments that felt overtly or implicitly discriminatory as a primary factor in their decision to leave tech. That’s just over a quarter of the women surveyed. Several of them mention discrimination related to their age, race, or sexuality in addition to gender and motherhood. via Why women leave tech: It’s the culture, not because ‘math is hard’."
"645","2014-11-05","2023-03-24","https://computinged.wordpress.com/2014/11/05/off-to-wipsce-2014-9th-workshop-in-primary-and-secondary-computing-education-in-berlin/","Barbara and I are attending the WIPSCE 2014 conference, the 9th Workshop in Primary and Secondary Computing Education in Berlin. See the program here and the proceedings here. I was impressed as a reviewer this year — the quality of papers at WIPSCE is exceptionally high. There is worldwide interest in improving K-12 computing education, and reports are flowing into WIPSCE on research findings and lessons-learned from all over the world. Barbara is presenting a short paper on Friday (with co-authors Tom McKlin and me) on “Preparing Secondary Computer Science Teachers Through an Iterative Development Process.” She’s going to tell how her professional development effort at Georgia Tech developed, using feedback from Tom’s evaluation efforts. She’ll offer some of her lessons learned, such as using teachers themselves as providers where ever possible, to establish leaders in the community of teachers and to make the PD more sustainable. I am honored to be the keynote speaker on Thursday morning. My talk is on “Preparing Teachers is Different than Preparing Software Developers.” I’m going to talk about what teachers need to know and do that’s different from software developers, with a particular emphasis on pedagogical-content knowledge, on reading code more than writing code, and about writing code to learn rather than to produce software. I’m still working on my talk. The audience is going to be primary and secondary school CS teachers AND researchers and providers of teacher professional learning opportunities. So, how much do I tell teachers things that they might find useful in the classroom, and how much do I tell results from research or give suggestions on how to facilitate teacher learning? I’ll let you know how it goes. "
"646","2014-11-06","2023-03-24","https://computinged.wordpress.com/2014/11/06/computing-teachers-are-different-than-software-developers-wipsce-2014-keynote/","A computer science degree is neither necessary nor sufficient for success in teaching computing. The slides below miss the live demo of Media Computation. My TEDxGeorgiaTech talk (video on YouTube) has much of the same components, but is lacking the ukulele playing that I did today. There was no recording made of my talk."
"647","2014-11-15","2023-03-24","https://computinged.wordpress.com/2014/11/15/a-new-explanation-for-techs-pathetic-gender-diversity-the-personal-computer/","Barbara Ericson gets quoted in this interesting piece in Salon.com. I think that there were multiple things that happened at once. The PC also led to a boom in enrollment, which (Eric Robert argues) led to a raising of standards to reduce load on teachers, which had an inhibitory effect on gender and ethnic/racial diversity in computing. NPR’s Planet Money just had a piece (quoting Jane Margolis) where they explore this angle, that having a PC became a necessity to succeed in CS classes, and the PC was a “boy’s toy.” See here for the NPR piece. The PC, and a decade later, the Internet, changed all that. Silicon Valley became a destination not just for the engineering-minded, but also for the profit-seeking. People motivated by money are different than people motivated by science. It’s always dangerous to venture too far into the minefields of gender-based determination, but it seems at least possible that the arrival of a generation of testosterone-fueled, super aggressive men who saw computers primarily as a way to get rich ended up creating a less welcoming atmosphere for women. Silicon Valley became more sexist because it became more about money and power, and less about actually doing something interesting and useful. via A new explanation for tech’s pathetic gender diversity: The personal computer – Salon.com."
"648","2014-11-17","2023-03-24","https://computinged.wordpress.com/2014/11/17/techs-meritocracy-problem-perception-doesnt-match-reality/","The blog post linked below was inspired by Microsoft Chief Executive Officer Satya Nadella’s gaffe at Grace Hopper Celebration of Women in Computing, but connects to an important theme in the story of the lack of diversity in computing. Many in computing think that the tech industry is a meritocracy, where the most capable get the most credit and best pay. It underlies the entrepreneur’s belief that the successful entrepreneur gets there because of his or her hard work alone. But it’s clearly not true — a lesson that I first learned from Caroline Simard. Meritocracy is a myth. And our belief in it is holding back the tech industry from getting better.The intent to be meritocratic is not a myth, but we know what road is paved with good intentions. In practice, merit and impact in software engineering are impossible to measure objectively. And so we fall back on subjective evaluation of merit. And when we are measuring subjectively, we are prone to cognitive error stemming from stereotypes and other unconscious beliefs. We have unimpeachable research that when you ask any of us, male or female, to evaluate the work of women mathematicians, engineers, and scientists, we evaluate identical work to be less meritorious than a man’s. via Tech’s Meritocracy Problem — Medium."
"649","2014-11-19","2023-03-24","https://computinged.wordpress.com/2014/11/19/earn-your-human-centered-computing-phd-at-georgia-tech-applications-due-dec-15/","Georgia Tech founded the very first HCC degree program in 2004, focusing on the intersection of computing and people – where computing includes not just computers but also different kinds of computational artifacts from games to mobile applications, from robots to bionics and mobile applications; and people includes not only individuals but also teams, organizations, societies and cultures. Join our 29 faculty in working across the HCC spectrum: learning sciences & technologies, computing education, artificial intelligence, cognitive science, collaboration, design, human-computer interaction, health & wellness, informatics, information visualization & visual analytics, international development, learning sciences & technology, social computing, and ubiquitous & wearable computing. Join our 39 students, all doing research in one of three broad areas: Cognition, Learning & Creativity, Human-Computer Interaction, and Social Computing. We value diversity in all its dimensions; our students have a broad range of backgrounds, coming from across the world and with a variety of different and undergraduate degrees. Join a vibrant community of faculty and graduate students that encompasses not just the HCC PhD but also the PhDs in Digital Media, Computer Science with specialization in HCI, Psychology with specializations in Engineering Psychology and Cognitive Aging, Music Technology, and Industrial Design, and the interdisciplinary GVU Center with its multitude of research labs. Join, upon graduation, our alumni who have academic or research careers at Adobe Research, CMU, Drexel, Georgetown, Georgia Tech, Google, Kaiser Permanente, Kaltura, U. Maryland, U. Michigan, Michigan State, U. Minnesota, Oak Ridge National Labs, Northeastern, Penn State, Rose Hulman, Samsung, Sassafras, U. Washington, US Military Academy and Virginia Tech. Our curriculum is flexible, allowing considerable customizing based on individual interests: three core courses, three specialization courses and three minor courses. You get involved with research during your first semester, and never stop! Students receive tuition and a competitive stipend during their studies; outstanding US students are eligible for the President’s Fellowship. Applications are due December 15; see http://www.ic.gatech.edu/future/phdhcc for additional program and application information."
"650","2014-11-19","2023-03-24","https://computinged.wordpress.com/2014/11/19/seeking-study-participants-what-should-bs-in-cs-graduates-know-about-software-development/","Katrin was in our ICER DC this last August. She is trying to measure the expectations that software companies and universities have on BS in CS graduates. She has a survey on software development and the software development process. She asked me to share this message:"
"651","2014-11-21","2023-03-24","https://computinged.wordpress.com/2014/11/21/programming-with-pseudocode-keeping-student-interest-the-need-for-school-and-international-curricula-trip-report-on-wipsce-2014/","First week of this month, Barb and I went to Berlin for WiPSCE 2014 conference. See the program here and the proceedings here, and the post on my keynote here. Let me tell you about some of the interesting things I heard there. We heard about so many international CS curricula efforts. Tim Bell talked about different levels of programming activity going on in different curricula (all the images in this blog post are from me snapping pictures of presentations).  We heard about Austrian efforts, Flemish efforts, and programs I was aware of in the UK, New Zealand, Germany, Israel, and the United States. I had not previously hear much about Poland in CS Ed, but they’ve been including computing in their curriculum for a long time.  Quintin Cutts (Code or (not Code) – Separating Formal and Natural Language in CS Education) talked about a problem that they’re having in Scotland that we’re also facing in the US with the CS Principles effort. There are several different programming languages in use in schools. Nobody wants to be the bad guy to say “You have to use X (maybe Scratch? Alice? App Inventor? Python?), because that’s what the national test will be in.” So, national test-developers are creating pseudocode languages that aim to be understandable without getting hung up on syntax. Scotland has one that’s made up of bits and pieces of other languages (which they call “Haggis” — seriously!). The problem is that if a piece of code is never expected to run, it can have assumptions within it that would have to be cleared up to build a runtime system. Quintin showed how even simple examples of the pseudocode from their national test have all kinds of logical inconsistencies. It’s a real problem. Allison Elliott Tew’s dissertation (see here for post) showed that weakest performing students had the worst time transferring their knowledge from whatever language they learned to a pseudo-code. That means that your top students are going to be fine with a pseudo-code test, but your bottom students are not going to do well at all — they won’t know all the concepts, and they’re going to trip over the language. A pseudo-code test is going to be another barrier to underprepared students getting into CS. Now, once you get them in the door, how do you keep them there? One interesting paper (Scratch vs. Karel – Impact on Learning Outcomes and Motivation) compared student interest in using Scratch or Karol the Robot. Scratch is a blocks-based language, and Karol was programmed in a text-based language. Students liked Scratch and performed better with it, but felt that Karol was more “real-life” and thus was more motivating for doing more in CS later. Betsy DiSalvo found similar results with her Glitch students. When comparing Alice and Python, students liked what they could produce with Alice, but felt that Python was more like what real programmers did and was consequently more motivating for some students. This paper has had me thinking, “Maybe we should bring Logo back?” It’s text-based like Karol, designed for students, and we have LOTS of books and other materials available for Logo across the curriculum. Leigh Ann DeLyser talked about her work with CS NYC (Software Engineering Students in the City). It’s a remarkable program: 1900 students applied for 120 slots, and the selection among the qualified students was by lottery. They did pre and post surveys around the first year of the program, with questions like “Would you like to study CS or SE after this semester?” or “Want to be a computer scientist or software engineer one day?” Females lost much more interest in a future computing career then males.  Finally, the talk that has most been in my thoughts since the conference was by Debby Fields and Yasmin Kafai on their Scratch study (Programming in the Wild: Patterns of Computational Participation in the Scratch Online Social Networking Forum). They studied 5000 visitors to the Scratch website in the first quarter of 2012. First big finding — most of them don’t do much. 55% visit but don’t do anything. The other 45% engage at a variety of levels, and the levels are pretty much gender-balanced. The most active participants are about evenly split male-female.  Debbie and Yasmin defined four “classes” of programming activity based on the programs that these users uploaded to the Scratch website. Booleans are a big differentiator, as are variables and random numbers. The below figure describes how much of each kind of programming block appears in each class of programs, and what percentage of programs they saw land in each class.  Here’s the disappointing part: The highest level of programming activity was almost all boys. Girls don’t go much beyond the simplest programming.  Now, we don’t know much about ages or where these students are or their ethnic group. As Debby pointed out, age and location are self-reported on the Scratch website, and it’s remarkable how many 100 year old Scratch programmers there are in Antartica. Their data suggest that informal education activities like Scratch (or Kahn Academy or MOOCs) are unlikely to reach a broad range of users. Debby pointed out that what students are building influences what students do. If Scratch programmers can tell stories without booleans, how do you motivate more advanced programming actvities if they’re only story-telling? If we want to reach more diverse students, and we want to encourage more kinds of activities, we need school. We need formal education to reach everyone."
"652","2014-11-23","2023-03-24","https://computinged.wordpress.com/2014/11/23/gamergate-supporters-just-want-to-be-left-alone-will-bpc-efforts-generate-similar-backlash/","If you don’t know what #Gamergate is, count yourself fortunate. It gets discussed a lot in the circles I hang out in, especially in computational media. I’ve learned words like doxxing and how it can lead to people leaving their home because of death threats, and how conceal-and-carry laws in Utah can cause a feminism theorist to cancel a talk because of threats of a “massacre.” The article below (and the comments in response) gave me new insight into the supporters of Gamergate. The violent and immature behavior makes it hard to see what (I think) is a kind of free speech argument. Gamergate supporters want their culture just the way it is, thank you very much. Even if that culture lacks positive female role models and may overflow with misogyny, it’s their culture. They see feminists, academics, and journalists as a “conspiracy” to engineer social change (see the quote below). Even the original motivation of Gamergate stance (“It’s about ethics in games journalism”) boils down to resisting forces for change — there wouldn’t be any complaints about the journalism if they agreed with what the journalists were saying. One commenter to the article I’m citing below says, “Many members of this organization, including Ms. Consalvo and Ms. Shaw are on the record discussing how to dismantle what they see as a problematic male dominated gaming culture that is beholden to industrial motives (ergo: economics) rather than artistic aspirations.” In other words, “Our games make money. Leave us alone.” They don’t want their world to be re-made or re-engineered. I don’t approve of the Gamergate message, and I strongly reject how the message is being conveyed. Modern society values being inclusive. There is not one kind of gaming culture and gamer – it’s not all theirs to define. There are enough game developers out there so that they can have their “anti-feminism” (which I didn’t know was a thing before I read the below) while others have their feminism (as Anita Sarkeesian talked about in her interview on the Colbert Report). Threatening violence because you don’t like how things are changing is an unacceptable way of sending a message. I can understand why Gamergate supporters want to send a message about “Leave our culture alone.” People strongly resist having culture re-engineered around them, sometimes resisting with violence. If you think about other efforts to engineer culture and the pushback in response, you might recall the Arkansas Governor using the National Guard to keep out nine black students in Little Rock (see Wikipedia article here). I wonder about the implications for diversifying computing. Might an anti-diversity backlash happen in computing — not the threats of violence (I hope), but outrage against change? When looking up papers by Michael Kimmel (whom I wrote about here), I found the National Council for Men, which is decidedly anti-Kimmel (see example here). Read the comments on the Guardian article describing Mattel’s decision to pull their awful “Barbie: I can be a software engineer” book. There is clearly a backlash against feminism right now. We in the Broadening Participation in Computing (BPC) community are aiming to achieve a similar kind of social engineering that the Gamergate supporters are complaining about. I am part of a vast, international (though maybe not particularly well-organized) conspiracy to change computing culture and to invade computing with many women and members of under-represented groups. We are “actively plotting to influence” computing. The Gamergate supporters argue that the conspiracy is about “artistic aspirations.” In BPC, we say that we’re about social justice, equity, and diversity. From the perspective of the “engineered,” the difference in purpose may not make much difference. One of the pushbacks on the call I shared to eliminate nerd culture (see here) was, “Can’t we just shape/change nerd culture?” Do the nerds want to be changed? What might a response to BPC look like? Might well-prepared, privileged male and white/asian CS students complain about efforts to give seats in classes to women or under-represented minorities whom they may perceive as less-prepared? Or might we even see efforts arguing “We like Nerd Culture just way it is!” I’m not predicting Gamergate-style threats against supporters of BPC, but it’s worth considering what kind of pushback we might receive. Today, the challenge to broadening participation in computing is less a pushback and more a lack of priority. There’s a general awareness that there’s a problem, but there’s less conviction that it’s an important problem or that there’s an obvious way forward to fixing it. We see that in the Microsoft CEO gaffe and the male allies panels at Grace Hopper this year (see discussion here) — they knew there was a problem, but they weren’t really thinking about it deeply or taking steps to address it. But if change really started to happen, there would likely be resistance to that change. A good strategist is thinking several steps ahead in the game, and it’s worth watching the Gamergate present to glean lessons for the BPC future. At DiGRA’s annual conference this August, Shaw and Consalvo participated in a roundtable session on “identity and diversity in game culture.” Notes from the roundtable were discovered online, showing how participants discussed the impact of feminist game studies on the video game industry, and whether academics could influence developers. Some interpreted it as proof that members of DiGRA were actively plotting to influence game development. Sargon of Akkad, a YouTube user who regularly discusses “gaming, anti-feminism, history and fiction” on his channel, has fueled that conspiracy theory. The connections between DiGRA, Shaw, Golding and other journalists, Sargon argues, suggest “DiGRA is the poisoned spring from whence all of this evil flows” — meaning Gamergate and the argument that gamer culture is dying. via #Gamergate supporters attack Digital Games Research Association @insidehighered. (Thanks to Shriram Krishnamurthi, Blair MacIntyre, Barbara Ericson, Briana Morrison, and Betsy DiSalvo for helpful edits and advice on drafts of this post.)"
"653","2014-06-03","2023-03-24","https://computinged.wordpress.com/2014/06/03/ncwit-summit-2014-changing-states-for-computing-education/","The 2014 National Center for Women & IT (NCWIT) summit was fantastic. I was at the first NCWIT national meeting ten years ago, and I have been at several since. They are always thought-provoking and enlightening. I may have enjoyed this one more because I got a chance to present as well as be in the audience. (Thanks to Robert Walker for the picture and for allowing me to post it here.) I offered a workshop on how to change state education public policy to improve and broaden access to computing education. The slides from the workshop are available here in PDF and here in PPTX. The workshop was offered twice: Tuesday afternoon (SRO packed room of about 40!) and Wednesday morning (maybe 25). I had a half-dozen hallway conversations from people who wanted to talk about their state in particular. Overall, there was a significant interest. All the workshop presenters advertised their workshops as a Flash talk. A Flash talk is intense: exactly 20 slides, presented for exactly 15 seconds each. No control over either. Jeff Forbes hosted the Flash talks. They were all recorded by Turner Broadcasting, and you can see them all here. (I’m the first one.) My slides are available here in PPT format. What can you possibly say in exactly five minutes? I worked harder on that five minute talk than on most of the keynotes I have ever presented. I’ve been thinking about this since last December when I wrote the initial blog post on this idea. In the end, the structure of what I was saying was good, and I ended up using it for the workshop, too. To change a state, start here I proposed a four step process to start changing a state: Plenaries: 80-hour work weeks are a human issue, not a women’s issue NCWIT summits always have a mix of alliance meetings (Academic Alliance, K-12 Alliance, Workforce Development, Social Science Advisory Board) and plenaries, besides workshops. All the plenaries were recorded and are available here. A few of the plenaries were just so amazing that I want to highlight them. Michael Kimmel is a social scientist working in masculine studies. His talk on engaging men to support women in technology was the my favorite talk of the summit. He was hilarious, yet grounded in real data. He explained what Larry Summers got wrong in his comments when he said that “many women with young children are unwilling or unable to put in the 80-hour work-weeks needed to succeed in those fields.” Kimmel pointed out that that framing implies men inviting women into a world where men’s values rule. If men and women had equal status in science, would we require 80-hour work weeks? Do we want anyone to work that hard at science and the consequent neglect of other priorities? Survey results show that men value time with their families more, but feel pressured by other men to be the “unencumbered worker” who will put in those hours and value work above all else. “Why do we call these concerns women’s issues when they’re really family issues or even human issues?” Dr. Chelsea Clinton spoke and was amazing. She was articulate, confident, and well-prepared to speak to issues of gender diversity and technology. She just completed her doctorate at Oxford, so this was her first talk where she was introduced as Doctor Chelsea Clinton. I didn’t really know who Donna Brazile was before she spoke. I didn’t know that she ran Al Gore’s presidential campaign, or that she’s a CNN commentator and columnist, or that she’s done cameos on shows like “House of Cards.” I’ve looked her up since she gave such a terrific speech at the NCWIT Summit. She was funny, irreverent, and compelling. All in all, it was a great summit. I learned a lot and made a lot of useful contacts. We now are talking with people in several other states about ECEP working with them to improve and broaden participation in computing education."
"654","2014-11-25","2023-03-24","https://computinged.wordpress.com/2014/11/25/2014-csedweek-hour-of-code-and-new-georgia-day-of-code/","CSEdWeek is December 8-14 this year, and Code.org is repeating their Hour of Code activity. The idea of Hour of Code is to get millions of students to try out coding. See more on CSEdWeek here, and on Hour of Code here. This year, Andy Stefik’s accessible programming language Quorum is included in an Hour of Code activity: http://quorumlanguage.com/documents/hourofcode/part1.php Here in Georgia, the Technology Association of Georgia (TAG) in cooperation with other groups in Georgia are promoting a “Day of Code” on December 10. See here for more on that, including information on prizes available for classes and schools. "
"655","2014-11-28","2023-03-24","https://computinged.wordpress.com/2014/11/28/not-time-spent-expertise-developed/","Joel Spolsky argues that the time spent on an assignment by students is not correlated with the results. This is part of his argument that there is a 5x to 10x productivity gap between the best and average programmers. There’s just nothing to see here, and that’s the point. The quality of the work and the amount of time spent are simply uncorrelated. I asked Professor Eisenstat about this, and he pointed out one more thing: because assignments are due at a fixed time usually midnight and the penalties for being late are significant, a lot of students stop before the project is done. In other words, the maximum time spent on these assignments is as low as it is partially because there just aren’t enough hours between the time the assignment is handed out and the time it is due. If students had unlimited time to work on the projects which would correspond a little better to the working world, the spread could only be higher. via Hitting the High Notes – Joel on Software. I did my Blog@CACM post in November on this argument (see the post here). Joel is measuring the wrong thing in his experiment. Time spent doesn’t correlate with quality. Time on task correlates with learning. More knowledge correlates with greater quality, but you don’t know much about how much is already known by the students in the class that he’s studying. Therefore, you can’t possibly make an argument about productivity when the critical variable is unknown. There may be a productivity gap between the best and average programmers. There’s a productivity gap between the best and average practitioners in any field. The issue is whether we can generate the performance at the top end. Can we make someone highly productive? It’s a design problem. It’s an education problem."
"656","2014-11-29","2023-03-24","https://computinged.wordpress.com/2014/11/29/the-dark-at-the-end-of-the-funnel-the-pipeline-in-computing-education-leads-to-a-sewage-plant/","Recommended blog post from Neil Brown, in response to comments from Mark Zuckerberg that the problem with getting more women into computing is solved by getting computing education earlier. It’s not. It used to be that we’d say, “Women aren’t going into computing because they don’t know what it is.” Now we’d say, “Women aren’t going into computing because they know exactly what it’s like. Smart women.” However, this is not solely an issue with the education system though that would be a familiar narrative — work force not as we would like it? Must be the fault of schools and universities. The pipeline or funnel doesn’t just need filling by shoving lots of 5 year old girls in one end and waiting for the hordes of female developers to swim out of the other end into an idyllic tech industry pool. Zuckerberg mentions that the lack of women in the industry forms a vicious cycle. This is not a problem at the education end of the funnel. As this Fortune article describes, the industry is not welcoming to women. The Anita Borg Institute found that women’s quit rates were double those of men. Not to mention issues like maternity leave. The pool at the end of the pipeline is leaking, and for good reason. So the vicious cycle is not simply an accident of history; the women that are in the industry tend to leave. There are several reasons for this, some of which are identity and culture in the industry. via The dark at the end of the funnel | Academic Computing."
"657","2014-10-10","2023-03-24","https://computinged.wordpress.com/2014/10/10/where-ap-cs-is-taught-in-georgia-and-where-there-is-no-cs-at-all/","April Heard at Georgia Tech built this map for us about where AP CS is taught in the state of Georgia. Some of it is totally to be expected. Most of the schools are in the Atlanta region, with a couple in Columbus, a handful in Macon, and a few more in Augusta and Savannah area. But what’s disappointing is that huge swath in the south of the state with nothing. Not a single school south of Columbus and west of Brunswick. In terms of area, it’s about 1/3 of the state. Albany is home to Albany State University, the largest HBCU in Georgia. No AP CS at all there. And Georgia is one of the top states for having AP CS. Sure, there might be some non-AP CS teachers in South Georgia, but we’re talking a handful. Not double, and certainly not a magnitude more than AP CS. I suspect that much of the US looks like this, with wide stretches without a CS teacher in sight. April is continuing to generate these maps for states that we’re working with in ECEP. Here’s California, with big empty stretches.  Tom McKlin just generated this new map, which overlays the AP CS teacher data on top of mean household income in a school district. The correlation is very high — districts with money have AP CS, and those that don’t, don’t.  "
"658","2014-12-31","2023-03-24","https://computinged.wordpress.com/2014/12/31/2014-in-review/","The WordPress.com stats helper monkeys prepared a 2014 annual report for this blog.  Here’s an excerpt: The Louvre Museum has 8.5 million visitors per year. This blog was viewed about 250,000 times in 2014. If it were an exhibit at the Louvre Museum, it would take about 11 days for that many people to see it. Click here to see the complete report."
"659","2014-01-30","2023-03-24","https://computinged.wordpress.com/2014/01/30/powerful-visualization-of-gender-skew-in-ap-cs-from-usa-today/","The chart below (above, here in the blog) shows the ratio of boy to girl test-takers across AP exam subjects. In subjects whose bars do not reach the orange line, girls outnumber boys. In subjects where the bar extends past the orange line, boys outnumber girls. via AP Test Shows Wide Gender Gap in Computer Science, Physics – Data Mine usnews.com."
"660","2013-04-08","2023-03-24","https://computinged.wordpress.com/2013/04/08/stanford-teams-with-edx-shaking-out-open-learning-options-available/","The announcement that Stanford teamed with edX is interesting, but may be less significant than the interpretation that Stanford is nixing Coursera and Udacity. Rather, Stanford faculty will have options between Coursera, iTunes U, and YouTube. The report suggests that Class2Go will “publicly merge” with edX, so there will be one fewer options for Stanford faculty. (Discussed further in the The Chronicle.) This is also the first I’ve heard about MIT faculty feeling that OpenCourseWare is not a useful path to pursue. The options for open learning are shaking out, with multiple options going forward, but some falling by the wayside. Mitchell said Stanford faculty members will continue to post material on Apple’s iTunes U, on Google’s YouTube and on Coursera, and to also generally allow faculty to pick among different platforms.“We will work on a case-by-case basis with individual faculty,” Mitchell said. And, even though it is nonprofit, edX will also eventually need to make money. MIT and Harvard both chipped in $30 million apiece to get edX off the ground.While other open education resources, like MIT’s OpenCourseWare, are perpetually profitless and donor-backed, there may be little appetite to do that again. For instance, MIT faculty and trustees are “convinced that they cannot go down the same path again,” according to a new book about MOOCs by William Bowen, the former president of Princeton University. via Stanford teams up with edX | Inside Higher Ed."
"661","2013-04-08","2023-03-24","https://computinged.wordpress.com/2013/04/08/opening-a-gateway-for-girls-to-enter-the-computer-field-nytimes-com/","All these efforts to draw in more girls to computing are great, but the last sentence is a big deal. How do we keep them? How do we help girls to survive the thousand paper cuts? Girls Who Code is among the recent crop of programs aiming to close the gender gap in tech by intervening early, when young women are deciding what they want to study. With names like Hackbright Academy, Girl Develop It, Black Girls Code and Girls Teaching Girls to Code, these groups try to present a more exciting image of computer science. The dearth of women in the tech industry has been well documented. Even though women represent more than half the overall work force, they hold less than a quarter of computing and technical jobs, according to the National Center for Women and Information Technology based at the University of Colorado, Boulder. At the executive and founder levels, women are even scarcer. via Opening a Gateway for Girls to Enter the Computer Field – NYTimes.com."
"662","2013-03-28","2023-03-24","https://computinged.wordpress.com/2013/03/28/feds-give-nudge-to-competency-based-education-beyond-the-credit-hour/","Of all the open learning movement initiatives, this may be the most important. The credit hour is a poor measure of learning-attained. It’s too large a grain size to be important as a measure of instruction. Moving to competencies (whatever that may end up being) is a move in the right direction, in terms of facilitating our ability to measure the amount of learning and the amount of teaching effort involved in an education program. The U.S. Department of Education has endorsed competency-based education with the release today of a letter that encourages interested colleges to seek federal approval for degree programs that do not rely on the credit hour to measure student learning. Department officials also said Monday that they will give a green light soon to Southern New Hampshire University’s College for America, which would be the first to attempt the “direct assessment” of learning – meaning no link to the credit hour – and also be eligible for participation in federal financial aid programs. via Feds give nudge to competency-based education | Inside Higher Ed."
"663","2015-02-13","2023-03-24","https://computinged.wordpress.com/2015/02/13/in-stem-courses-a-gender-gap-in-online-class-discussions-what-drives-collaboration/","It’s not surprising that men and women participate differently in online class discussions. I’m disappointed that the interpretations of the results are not grounded in the literature on collaborative learning. We know something about why people might not want to participate in an online forum (as I wrote about in a previous blog post). Company officials argued that the differences in behavior by gender represent a “gap in confidence” between women and men enrolled in the courses. It’s a phenomenon that has long interested the company’s founder, Pooja Sankar, who says she felt isolated as one of only a few women studying computer science at a university in India and was too shy to collaborate with male classmates. Based on reports from hundreds of students and professors who use Piazza, “we know that students answer questions more when they feel more confident,” Ms. Gilmartin said. “We know that they use the anonymity setting when they feel less confident.” via In STEM Courses, a Gender Gap in Online Class Discussions – Wired Campus – Blogs – The Chronicle of Higher Education."
"664","2015-02-11","2023-03-24","https://computinged.wordpress.com/2015/02/11/csta-oracle-survey-access-to-and-understanding-of-computer-science-education-in-us-schools/","A new survey from both CSTA and Oracle. None of the findings are too surprising. What’s probably surprising is that this picture doesn’t seem too different from past CSTA surveys (see list of all of them here). Efforts like the Hour of Code are reaching lots of students, but may not yet be making much impact on most schools and districts. In addition, participants applied the term “computer science” to a vast array of topics and courses, many of which were submitted as “other” courses in response to the topics that were provided in the survey. Participants classified studies in business management, yearbook layout, artificial intelligence, robotics, office applications, and automated design as computer science courses. This broad use of “computer science” to encompass curriculum and courses that would not be considered “computer science” at a college/university or professional level indicates a need for educational community consensus on a common definition of computer science education and curricular content, lest we lead students or teachers to believe they are preparing students for college and careers when in fact, they are not. This perhaps begs the question whether “computer science” as a designation is being applied inappropriately for funding or other reasons. Administrators stated that the most prevalent computer science course offered was Web Design and Development, followed by Intro to Computer Science with 54% of the schools offering it in grade 9, 47% offering it in grade 10, 39% offering it in grade 11, 37% offering it in grade 12, and only 27% offering at least one intro to CS course all four years. These were followed by computer graphics and programming. The top four content areas covered in computer science courses were listed as problem solving at 65%, ethical and social issues and graphics tied at 57%, and web development at 51%. However, analysis of algorithms came in at 35% as did testing and debugging. Each of these content areas are core to computer science and in particular programming. One of the most important findings from the study suggests that better-funded schools are offering CS to their students at a far higher rate than low-income schools. This research verifies what was only previously suspected. Of the 27% of schools where the majority of students qualify for free or reduced lunch, 63% offer computer science courses. Of the 44% of schools where the majority of students do not qualify for free lunch, 84% offer computer science courses. via CSTA – OracleSurvey."
"665","2015-02-14","2023-03-24","https://computinged.wordpress.com/2015/02/14/earsketch-workshop-at-sigcse-2015/","I’m an advisor on the EarSketch project, and it’s really cool. Recommended. Next month, the EarSketch team will be offering a workshop at SIGCSE in Kansas City. This is a great opportunity to learn more about EarSketch, get hands on experience with the curriculum and environment, and learn how to use EarSketch in your classroom. This year’s workshop will also offer advice on integrating EarSketch into Computer Science Principles courses, though the workshop is of relevance to anyone teaching an introductory computing course. For more information about SIGCSE, visit http://sigcse2015.sigcse.org/index.html To register for the workshop, please visit https://www.regonline.com/register/login.aspx?eventID=1618015&MethodId=0&EventsessionId= Please contact Jason Freeman (jason.freeman@gatech.edu) with any questions. SIGCSE 2015 Workshop #20: Computer Science Principles with EarSketch Saturday, March 7th, 2015 3 pm – 6 pm Jason Freeman, Georgia Institute of Technology Brian Magerko, Georgia Institute of Technology Regis Verdin, Georgia Institute of Technology EarSketch (http://earsketch.gatech.edu) is an integrated curriculum, software toolset, audio loop library, and social sharing site that teaches computing principles through digital music composition and remixing. Attendees will learn to code in Python and/or JavaScript to place audio clips, create rhythms, and add and control effects within a multi-track digital audio workstation (DAW) environment while learning computing concepts such as variables, iteration, conditionals, strings, lists, functions, and recursion. Participants write code to make music, with a focus on popular genres such as hip hop. The agenda outlines the pedagogy of connecting musical expression to computation to broaden participation and engagement in computing; the underlying concept of thickly authentic STEAM that drives this approach; the alignment of the curriculum and learning environment with CS Principles; and basic musical concepts underlying EarSketch. The intended audience for this workshop is secondary and early post secondary CS educators. The course is of particular relevance to CS Principles teachers but also applicable to any introductory programming or computing course. No prior musical knowledge or experience is expected and no prior programming experience with Python or JavaScript is required."
"666","2014-01-17","2023-03-24","https://computinged.wordpress.com/2014/01/17/data-mining-exposes-embarrassing-problems-for-massive-open-online-courses-there-is-no-dialogue/","Interesting article studying the lack of discussion in MOOC discussion forums. I’m surprised that the teacher involvement doesn’t improve matters. It may be that the scale swamps out the teacher demonstrating value for the discussion. Our past work in CSCL suggests that the culture of the class (e.g., the subject, the rewards structure, etc.) influences discussion behavior, and that they’d get more on-target discussion with anchored collaboration. These guys have studied the behaviour in online discussion forums of over 100,000 students taking massive open online courses (or MOOCs). And they have depressing news. They say that participation falls precipitously and continuously throughout a course and that almost half of registered students never post more than twice to the forums. What’s more, the participation of a teacher doesn’t improve matters. Indeed, they say there is some evidence that a teacher’s participation in an online discussion actually increases the rate of decline. via Data Mining Exposes Embarrassing Problems For Massive Open Online Courses | MIT Technology Review."
"667","2013-07-05","2023-03-24","https://computinged.wordpress.com/2013/07/05/success-in-moocs-talk-offline-not-online/","That students who had offline help did the best in this MOOC study is not surprising. Sir John Daniel reported in Mega-Universities that face-to-face tutors was the largest line item in the Open University UK’s budget. But the fact that 90% of the students didn’t talk online (a statistic that is similar to what Tucker Balch found) says that success in MOOCs may be more about talking offline than online. “On average, with all other predictors being equal, a student who worked offline with someone else in the class or someone who had expertise in the subject would have a predicted score almost three points higher than someone working by him or herself,” write the authors.The correlation, described by the authors as the “strongest” in the data set, was limited to a single instance of a particular MOOC, and is not exactly damning to the format. But it nonetheless may give ammunition to critics who say human tutelage remains essential to a good education.Other findings could also raise eyebrows. For example, the course’s discussion forum was largely the dominion of a relatively small group of engaged users; most students simply lurked. “It should be stressed that over 90 percent of the activity on the discussion forum resulted from students who simply viewed pre-existing discussion threads, without posting questions, answers, or comments,” the authors write. via MOOC Students Who Got Offline Help Scored Higher, Study Finds – Wired Campus – The Chronicle of Higher Education."
"668","2013-11-18","2023-03-24","https://computinged.wordpress.com/2013/11/18/special-issue-of-journal-on-live-coding-in-music-education/","null"
"669","2015-03-20","2023-03-24","https://computinged.wordpress.com/2015/03/20/coding-is-not-the-new-literacy-modeling-is-chris-granger/","I buy Chris Granger’s argument here, that coding is not nearly as important as modeling systems. The problem is that models need a representation — we need a language for our models. The point is modeling, but I don’t think we can have modeling without coding. As Michael Mateas said, there will always be friction (see post). We build mental models of everything – from how to tie our shoes to the way macro-economic systems work. With these, we make decisions, predictions, and understand our experiences. If we want computers to be able to compute for us, then we have to accurately extract these models from our heads and record them. Writing Python isn’t the fundamental skill we need to teach people. Modeling systems is. via Chris Granger – Coding is not the new literacy."
"670","2015-03-22","2023-03-24","https://computinged.wordpress.com/2015/03/22/c-is-manly-python-is-for-n00bs-how-our-perception-of-programming-languages-interact-with-our-gender-expectations/","Surprising and interesting empirical evidence that language use is mostly gender-neutral. Our expectations about gender influence how we think about programming languages. These perceptions help explain the prevalence of C and C++ in many undergraduate computing programs. There is also a gendered perception of language hierarchy with the most “manly” at the top. One Slashdot commenter writes, “Bah, Python is for girls anyways. Everybody knows that PERL is the language of true men.” Someone else responds, “Actually, C is the language of true men…” Such views suggest that women might disproportionately use certain languages, but Ari and Leo found in their programmer surveys that knowledge of programming languages is largely equivalent between genders. Women are slightly more likely to know Excel and men are slightly more likely to know C, C#, and Ruby, but not enough to establish any gendered hierarchy. via C is Manly, Python is for “n00bs”: How False Stereotypes Turn Into Technical “Truths” by Jean Yang & Ari Rabkin | Model View Culture."
"671","2015-03-23","2023-03-24","https://computinged.wordpress.com/2015/03/23/first-computing-education-research-nsf-career-awards-from-cise/","The Computer and Information Sciences and Engineering (CISE) directorate of the National Science Foundation (NSF) has been giving early CAREER awards for decades, but this is the first year that they actively sought computing education awards. Kristy Boyer and Ben Shapiro are awardees — our first CISE-side NSF CAREER awardees in computing education! This is a big step towards establishing computing education within CS departments.  Here are pieces of their project summaries, to give you a sense of what they’re doing. Thanks to both of them for providing me with these, and CONGRATULATIONS! They’ve done a great service to our community by helping to explain computing education to the CISE community. Kristy Boyer: A rich body of evidence suggests that collaborative learning holds many benefits for computer science students, yet there is growing recognition that neither collaborative learning itself, nor the innovative curricula in which it may be situated, are “magic bullets” capable of single-handedly solving the computing pipeline problem. In contrast to being a one-size-fits-all solution, collaborative learning is highly dependent upon characteristics of the collaborators and on fine-grained interactions. Intellectual Merit : The overarching research question of the CS-CLIMATE project is, “How can we identify and support the facets of collaborative dialogue that are particularly effective for fostering learning,sense of identity, motivation, and continued engagement for diverse computer science learners?” The project will investigate this question through three thrusts: 1. Collect a rich set of computer science collaborative learning data. The project will leverage the ASCEND learning environment, built in the PI’s lab, which supports remote collaboration with textual natural language dialogue, synchronized code editing, and integrated repository control for two or more collaborators. Partnering with three participating institutions: North Carolina State University, Meredith College (an all-women’s institution), and Florida A&M University (a minority-serving university with 90% African American enrollment), the full suite of collected data will also include student characteristics of gender, race/ethnicity, personality profile, and achievement goal orientation, while measures of outcomes include learning, sense of computing identity, motivation, and engagement. 2. Examine the fine-grained facets of collaborative dialogue that are particularly effective for diverse computer science learners. By leveraging machine-learning frameworks for dialogue analysis developed within the PI’s lab, the project will see the creation of fine-grained, theoretically informed models that capture collaborative dialogue and problem solving phenomena associated with learning, identity development, motivation, and engagement. 3. Implement and evaluate evidence-based pedagogical support for fostering effective collaborative dialogue. The project will extract a set of evidence-based pedagogical strategies for fostering effective collaborative dialogue tailored to student characteristics. These evidence-based pedagogical supports will be evaluated through quasi-experimental studies. It is hypothesized that CS-CLIMATE pedagogical support will significantly improve learning, sense of identity, motivation, and continued engagement for students overall, and for women and African American students in particular. In addition to testing this primary hypothesis, the project will produce fine-grained sequential analyses and rich qualitative findings that further the state of knowledge about how diverse students learn computing. Broader Impacts : The project’s central goal is to foster effective collaboration for underrepresented groups in computing, focusing on women and African American students. The project partners with a 100% women’s college and a HBCU that is 90% African American, partnerships grounded in and facilitated by the STARS Alliance for which Boyer is a founding Executive Steering Committee member. The project will make substantial impact by building research capacity: Boyer has a track record of mentoring diverse graduate and undergraduate students. The project’s software and data, including the ASCEND learning environment and the CS-CLIMATE pedagogical support suite, will be released to the community. Finally, it is anticipated that the project will produce significant theoretical and practical advances that lead to a deeper understanding of how diverse students learn computing. Serving as the foundation for many future years of the PI’s faculty career, the project has the potential to transform the way collaboration is incorporated into computer science education. Ben Shapiro:Constructing Modern and Inclusive Trajectories for Computer Science Learning Research in computer science education and software engineering points to three acute problems: These problems raise the following question: How can we create new ways into computer science for distributed computing, broaden participation, and support transitions into mainstream computer science? I propose to investigate this broad question through the following activities: To do so, I will draw upon my interdisciplinary background in both learning sciences educational research and in computer science, as well as many years of experience on Chicago’s South Side and in Pittsburgh’s Hill District creating new media arts and technology learning environments for African-American youth, to build a software platform and curriculum that enable URM youth to collaboratively design and program distributed systems. I will study their learning, including how they transition from our beginner-specific tools into general-purpose programming languages and practices, and assess whether these activities build participants’ interest and self-efficacy in computer science."
"672","2015-03-02","2023-03-24","https://computinged.wordpress.com/2015/03/02/crowdsourcing-competitions-encourage-malicious-behavior-reason-why-answers-are-mean-on-stackoverflow/","StackOverflow is a competition. I read people bragging about their reputation score in StackOverflow regularly. I’m appalled at the rude and sexist comments in StackOverflow. I wonder if this paper helps to explain some of what’s going on. Crowdsourcing generally espouses openness and broad-based cooperation, but the researchers explained that it also brings out people’s worst competitive instincts.“[T]he openness makes crowdsourcing solutions vulnerable to malicious behaviour of other interested parties,” said one of the study’s authors, Victor Naroditskiy from the University of Southampton, in a release on the study. “Malicious behaviour can take many forms, ranging from sabotaging problem progress to submitting misinformation. This comes to the front in crowdsourcing contests where a single winner takes the prize.” via Crowdsourcing Competitions Encourage Malicious Behavior, Study Finds – Nextgov.com."
"673","2015-03-04","2023-03-24","https://computinged.wordpress.com/2015/03/04/ap-cs-2014-results-big-jumps-in-participation/","Every year, Barbara Ericson does an analysis of the AP CS exam demographics by state. The 2013 analysis (see here) got a lot of media attention (see on-going list). Here’s the run-down for 2014. Her detailed national analysis (from which I quote in this document) can be found here, and her detailed race and gender analysis (which I include some) can be found here. Nationally, 37,327 students took the AP CS A exam in 2014. This was a big increase (26.29%) from the 29,555 students who took it in 2013. The top 10 states in terms of the number of exams taken were in 2014 were (with their 2014 and 2013 positions listed — Florida rose and Maryland dropped):  But California is also the largest state. If we control for population, here are the top 10 states by # exams in 2014 / estimated 2012 population / 100,000:  Eight states had a decrease in the number of students taking the AP CS A exam from the previous year: Oregon, Oklahoma, South Dakota, Kansas, Montana, Arkansas, West Virginia, and Maine. Eighteen states had less than 100 people take the AP CS A exam in 2014, with Wyoming still the only state with no students taking the exam.  Barbara had help from Phil Sands from Purdue this year in doing the demographic analysis. Females: The top three states with the most women taking the exam in 2014 are: The top three states with the highest percentage of females taking the exam are (number of women / number of exams) Mississippi (1/4 = 25%), Washington (260/1048 = 25%), Oklahoma (42/171 = 25%). Tennessee, which had 31% female exam-takers in 2012, is no longer in the top ten of states. No females took the exam in Montana (0 women of 4 exam takers) or Wyoming (but nobody took the exam in Wyoming). Eight more states had at least one woman but less than 10 women take the exam:Mississippi (1/4), North Dakota (1/14), Nebraska (2/71), Kansas (3/40), Alaska (4/30), South Dakota (4/29) and Utah (5/104) and Delaware (7/79). African American: The top three states that had the most African American students take the exam in 2014 are: Thirteen states had no African American exam-takers in 2014 (number of African Americans / number of exams) Alaska (0/30), Idaho (0/58), Kansas (0/40), Maine (0/99), Mississippi (0/4), Montana (0/4), Nebraska (0/71), New Hampshire (0/108), New Mexico (0/61), North Dakota (0/14), South Dakota (0/29), Vermont (0/71), and Wyoming (0/0). Hispanic: The top three states that had the most Hispanics take the exam in 2014 (the College Board separates this into Mexican American, Puerto Rican, and Other Hispanic) Seven states had no Hispanics take the exam in 2014: Iowa (0/119) which is 5.5% Hispanic by population, Mississippi (0/4) which is 2.9% Hispanic, Montana (0/4), North Dakota (0/14), South Dakota (0/29), West Virginia (0/48), and Wyoming (0/0)."
"674","2015-03-05","2023-03-24","https://computinged.wordpress.com/2015/03/05/starting-from-the-students-to-build-effective-computing-courses-for-non-cs-majors-response-to-goldweber-and-walker/","Michael Goldweber and Henry Walker responded to my blog posts (here in Blog@CACM and here in this blog) in the Inroad blog (see article here). My thanks to them for taking the time to respond to me. I found their comments especially valuable in helping to see where I was making assumptions about common values, goals, and understanding. It’s too easy in a blog to only get responses from people who share a common understanding (even if we violently disagree about values and goals). I found it helpful to get feedback from Dr. Goldweber and Dr. Walker with whom I don’t correspond regularly. “Pedagogy” isn’t just “how to teach” for me. They argue that their articles are not about pedagogy but about what should be taught in a course that students might take to explore computer science. The page I linked to at the US Department of Education is about evidence-based education, not evidence-based pedagogy. The definition of pedagogy is “the discipline that deals with the theory and practice of education” (Wikipedia link). One meaning of pedagogy is the whole field of education, which is how I meant it in that piece (as in Pedagogy of the Oppressed.) What to teach is part of pedagogy. If we don’t use evidence for making decisions what to teach, we are practicing folk pedagogy. My larger point was about the role of evidence rather than intuition. Whether we’re talking about how to teach or what to teach, I believe that we have to gather evidence (or in Paulo Freire’s terms, have a dialog with the students and stakeholders). Certainly, we want to gather evidence about the effectiveness of our teaching. We also need to gather evidence when designing education. My background is in education and HCI. For me, “Know thy users for they are not you” is a given in HCI, and “Student-centered” is a given in Education. Both saying suggest that we start with not-me: not the designer, not the teacher, not the domain expert. But for Dr. Walker, “The starting point is identifying the themes and Big Ideas, not pedagogy.” The unspoken assumption behind my posts, which may not be shared with Dr. Walker and Dr. Goldweber, is that any CS course for non-CS majors (whether a service, elective, or exploratory course) should aim to increase interest in the field of CS, and especially, should be designed to attract and engage women and under-represented minorities in CS. If we are happy with just having the male white and Asian students that we typically attract now, then sure, Dr. Goldweber’s right — we can just do like Philosophy does and build the course based on what we think is important. Dr. Walker is absolutely right — there is too little time in a course to fit in everything that we think is important about CS. Even if we leave programming out, there is still too much material. How do we decide which Big Ideas to include? In my process, I start with the students. What are their life goals and desired careers? What’s needed from computing for them to be successful? What are their values? How can I show that computer science is relevant to those values? To choose among the ideas of computer science, we should use what the students need. To teach the ideas that students may not know they need, we should speak to their values. I disagree with Dr. Goldweber on these points: The design of a non-major’s course in computing, which is not a service course for some other department/program, should belong in the hands of the CS faculty. Students electing to explore a discipline take these courses. Surely, discipline experts are those who can best decide what to present from the discipline. We can just design courses for non-CS majors based on our own experience and intuition. We shouldn’t be surprised, then, if we mostly attract white or Asian males and if we fail to engage diverse audiences. Since all three of us (Dr. Walker, Dr. Goldweber, and me) are white, male, CS professors, I believe that we’re the wrong people to use only our own experience and intuition when designing courses for non-CS majors, for a more diverse student population. Yes, we’re disciplinary experts, but that’s not enough. It is our responsibility to design the courses — on that, we’re agreed. It’s our responsibility to design for the students’ success. One of my favorite quotes about computing education comes from Betsy DiSalvo and Amy Bruckman. “Computer science is not that difficult, but wanting to learn it is.” (See article here.) If we our goal is for students to learn computer science, we have to figure out will make them want to learn it."
"675","2015-03-06","2023-03-24","https://computinged.wordpress.com/2015/03/06/utoronto-tas-and-graduate-student-instructors-on-strike-pay-and-teaching-are-inversely-correlated-in-universities-today/","The graduate student Teaching Assistants and Instructors at the University of Toronto are on strike. I wouldn’t normally be aware about graduate student labor disputes in other countries, but UToronto has an active CS Education research group and at least one (very) active CS Ed PhD student, Elizabeth Patitsas who was in the ICER Doctoral Consortium last year. The website on the strike (see link below and here) is interesting in describing the situation for Canadian PhD students, both what’s different than in the US (Toronto PhD students pay tuition — it isn’t waived for them) and what’s similar. I’ll bet that the fact 3.5% of the university budget pays for 65% of the teaching is just as true in the US. The Chronicle had an article recently titled Teach or Perish (see link here) with this claim (that I’m quite certain is true where I’m at, success is measured in terms of salary): “While teaching undergraduates is, normally, a large part of a professor’s job, success in our field is correlated with a professor’s ability to avoid teaching undergraduates.” Graduate students in PhD programs continue to pay full tuition – almost $8,000 – even when they are not enrolled in courses. In return, graduate students receive the ‘privilege’ of underpaid work for the University, a library card, and meetings with supervisors. All comparable universities in North America offer post-residency fees or tuition wavers for graduate students finished with course work. The university rejected our proposals for similar provisions. CUPE 3902 membership has been without a permanent contract for more than eight months, despite carrying out more than 65% of the teaching across the three campuses at the University of Toronto. The university allocates a mere 3.5% of its $1.9 billion budget to CUPE 3902 workers, the vast majority of which comes from tuition and taxes. via We Are UofT."
"676","2015-03-09","2023-03-24","https://computinged.wordpress.com/2015/03/09/wipsce-2015-call-for-papers-and-participation/","Barb and I went to this last year, and it was terrific — diverse and high-quality. Call for Papers and Participation: WiPSCE 2015 We invite you to submit a paper, report, or poster for the 10th Workshop in Primary and Secondary Computing Education (WiPSCE 2015) and join us inLondon, United Kingdom, on November 9-11, 2015. WiPSCE aims at improving the exchange of research and practice relevant to teaching and learning in primary and secondary computing education, teacher training, and related research. Important 2015 Dates Submission deadline: Monday, June 1 Re-submission deadline: Monday, June 8 Notification of acceptance: Monday, July 27 Submission of revised manuscripts: Monday, September 15 Early Registration deadline: Monday, October 19 Original submissions in all areas related to primary and secondary computing education are invited in the following categories: Topics include: Special Theme:Computing? How young is too young? For more information, please contact: Judith Gal-Ezer: galezer@cs.openu.ac.il Sue Sentence: sue.sentance@kcl.ac.uk Jan Vahrenhold: jan.vahrenhold@uni-muenster.de"
"677","2015-03-11","2023-03-24","https://computinged.wordpress.com/2015/03/11/helping-states-collect-data-about-computing-education-for-landscape-reports/","Back at the NCWIT meeting last May, we in ECEP (Expanding Computing Education Pathways Alliance) started promoting a four step process for starting to improve computing education in your state (see blog post here): Part of Step 2 includes writing a Landscape Report. Does your state count CS towards high school graduation? As what? Who decides? Who can teach CS? Is there a CS curriculum? Do you have a Pathway? Do you have a certificate or endorsement to teach CS in your state? There are several of these available at the CSTA website, such as one from South Carolina and another on Maryland. ECEP now has a page with resources for gathering data for a landscape report — see below. Where is your state now? The resources linked below can help you quickly find state-level data about the status of computer science education in your state. These are good starting points for putting together a landscape report that answers common questions on CS education in your state. via State-level Data for CS Education Advocacy | Expanding Computing Education Pathways."
"678","2015-03-13","2023-03-24","https://computinged.wordpress.com/2015/03/13/a-female-computer-science-major-floored-by-the-sexism-valuable-first-person-perspective/","While disturbing, these first-person accounts of the sexism that women face in computing are also fascinating (see another one here and another one here). I haven’t had the experiences, and the accounts give me fresh insights into what others’ experience might be. But dresses and kimonos stand out in a sea of techie uniforms—jeans and free tech company tee-shirts. I noticed I got better feedback from interviewers when I “looked the part.” So on days I had on campus interviews, I sacrificed my dresses for boxy company tee-shirts. Even when I did wear company tee-shirts, I was sometimes assumed to be a recruiter in the same way women in scrubs are assumed to be nurses. My high-pitched voice also became an unexpected source of frustration as team meetings became small battlegrounds for respect. At another company (which I prefer not to name), I noticed that management listened more to what my male counterparts had to say even though I was offering insightful feedback. Managers asked my male coworkers about the status of projects, although I was touching all the same files. The guys were praised more on their progress although I was pushing the same amount of code. via A female computer science major at Stanford: “Floored” by the sexism – Fortune."
"679","2014-03-09","2023-03-24","https://computinged.wordpress.com/2014/03/09/im-an-engineer-not-a-cheerleader-lets-abandon-silly-rules-about-gender-roles/","Reminds me of the “thousand little cuts” story. The woman standing in front of us turned around to face me. “Are you the cheerleaders?” she beamed. I glanced at my all-girls robotics team with a look of disbelief. As their proud captain, I’ve spent hundreds of hours working with them to build and program a fully-functional robot. Walking into the massive competition arena, I had tuned out the screaming fans and blasting music, focusing on the engineering challenges at hand. But the last thing I ever thought would happen was that my group of twelve girls who routinely wire electronics, design complicated mechanical systems, and write detailed programs would be mistaken for another school’s dance team. As famed astrophysicist Meg Urry wrote in her Feb. 2005 article in The Post, “discrimination isn’t a thunderbolt, it isn’t an abrupt slap in the face. It’s the slow drumbeat of being unappreciated, feeling uncomfortable, and encountering roadblocks along the path to success.” My science research defines me. Reading journal articles and learning new techniques almost every day, I feel at home in the laboratory. But that isn’t the case for most girls in science and engineering; somewhere along the path to a PhD, girls fall off the scientific bandwagon. via I’m an engineer, not a cheerleader. Let’s abandon silly rules about gender roles.."
"680","2015-03-16","2023-03-24","https://computinged.wordpress.com/2015/03/16/my-wife-is-a-much-better-programmer-than-me-likeagirl/","The Always Super Bowl commercial “Like a Girl” was compelling (see video here). When did “Like a Girl” become an insult? The blog post linked below (thanks to Kate Harlan for this) offers several stories of female programmers presumed to be less-of-a-programmer because they’re females. These are sad stories. People are generally willing to believe that I can program, since I’m a white, male CS professor who has written programs in the past (e.g.,the original Swiki and Emile). In my family, we all know that Mom is the expert programmer. All three of our kids took AP CS, and they all asked Barb for help, with me only as a last resort. When we were writing our books, I’d leave notes next to my searching or sorting examples in the LaTeX source for Barb, my co-author: “Yeah, I know that this isn’t quite right. Can you fix it please?” I wrote the first version of the Java class files for Media Computation and JES. Then Barb looked at them, tsk-tsk-ed a bit, and made them work well and made them readable. My wife is an amazing programmer, far better than me #LikeAGirl. I’m sure that Barbara has had people question her as a programmer, and more than they typically question my abilities as a programmer — while the real ability is the opposite. One category of reactions that I receive all the time as a programmer that presents as feminine is: No one believes I am a programmer. I can’t tell you how many people, when meeting me and hearing my profession, tell me that I look like a designer, someone in accounting, someone in marketing, anything but a programmer. I have been a TA for weekend workshops that teach women to code. My male co-TA’s constantly asked me throughout the workshop how I was enjoying learning to program. Apparently, presenting as feminine makes you look like a beginner. It is very frustrating that I will either look like not a programmer or look like a permanent beginner because I have programmed since age 8. I have basically always wanted to be a programmer. I received undergrad and grad degrees from MIT. I’ve worked as a visiting researcher in Honda’s humanoid robotics division on machine learning algorithms for ASIMO. I don’t think that any of these things make me a better programmer; I list them because I am pretty sure that if I were a white man with these credentials or even less than these credentials no one would doubt my programmer status. via Coding Like a Girl — Medium."
"681","2015-03-25","2023-03-24","https://computinged.wordpress.com/2015/03/25/ap-is-a-national-curriculum-lawmakers-vote-overwhelmingly-to-ban-ap-us-history/","Oklahoma isn’t the only state picking a fight over AP US History. Georgia’s legislators just introduced a similar bill (see article here). I disagree with what they’re doing, but I do agree with the argument below. The Advanced Placement program is a kind of “national curriculum.” That’s why efforts like CS Principles are so valuable — they impact many schools across the country all at once. My PhD advisor, Elliot Soloway, argues that it’s past time to establish national curricula (see article here), and he’s probably right. The American political sentiment goes strongly against that perspective. For other lawmakers, however, Fisher is thinking too small. Oklahoma Rep. Sally Kern (R) claims that all “AP courses violate the legislation approved last year that repealed Common Core.” She has asked the Oklahoma Attorney General to issue a ruling. Kern argues that “AP courses are similar to Common Core, in that they could be construed as an attempt to impose a national curriculum on American schools.” via Oklahoma Lawmakers Vote Overwhelmingly To Ban Advanced Placement U.S. History | ThinkProgress."
"682","2015-03-27","2023-03-24","https://computinged.wordpress.com/2015/03/27/the-day-the-purpose-of-college-changed-what-was-the-impact-on-cs-education/","The article linked below makes the argument that then-Governor Ronald Reagan changed perception higher education in the United States when he said on February 28, 1967 that the purpose of higher education was jobs, not “intellectual curiosity.” The author presents evidence that date marks a turning point in how Americans thought about higher education. Most of CS education came after that date, and the focus in CS Education has always been jobs and meeting industry needs. Could CS Education been different if it had started before that date? Might we have had a CS education that was more like a liberal education? This is an issue for me since I teach mostly liberal arts students, and I believe that computing education is important for giving people powerful new tools for expression and thought. I wonder if the focus on tech jobs is why it’s been hard to establish computing requirements in universities (as I argued in this Blog@CACM post). If the purpose of computing education in post-Reagan higher education is about jobs, not about enhancing people’s lives, and most higher-education students aren’t going to become programmers, then it doesn’t make sense to teach everyone programming. The Chronicle of Higher Education ran a similar piece on research (see post here). Research today is about “grand challenges,” not about Reagan’s “intellectual curiosity.” It’s structured, and it’s focused. The Chronicle piece argues that some of these structured and focused efforts at the Gates Foundation were more successful at basic research than they were at achieving the project goals. “If a university is not a place where intellectual curiosity is to be encouraged, and subsidized,” the editors wrote, “then it is nothing.” The Times was giving voice to the ideal of liberal education, in which college is a vehicle for intellectual development, for cultivating a flexible mind, and, no matter the focus of study, for fostering a broad set of knowledge and skills whose value is not always immediately apparent. Reagan was staking out a competing vision. Learning for learning’s sake might be nice, but the rest of us shouldn’t have to pay for it. A higher education should prepare students for jobs. via The Day the Purpose of College Changed – Faculty – The Chronicle of Higher Education."
"683","2015-02-27","2023-03-24","https://computinged.wordpress.com/2015/02/27/10-women-who-changed-the-tech-industry-forever/","A nice list with interesting history — I didn’t know most of these (Thanks to Guy Haas who sent it to me): Although “Amazing Grace” Hopper is sometimes mentioned, Lovelace often serves as a token when talking about women in technology. However, her isolation in the midst of the male-dominated history of computer science does not reflect reality: There have been many, many other women who have made their careers in computer science, but whose stories have been erased and forgotten, many of their successes snubbed due to sexism. In fact, says Kathy Kleiman, founder of the ENIAC Programmers Project, “Programming was a pink-collar profession for about the first decade. There were some men, but it was actually hugely women.” Lest we forget these female pioneers, here are ten that should be remembered alongside their male counterparts. via 10 women who changed the tech industry forever."
"684","2013-01-25","2023-03-24","https://computinged.wordpress.com/2013/01/25/what-are-the-cognitive-skills-needed-for-model-building/","Mylène is describing in the below blog post about how she’s helping her students develop a set of cognitive skills (including a growth mindset) to help them build models. What I found fascinating in her post were the implicit points, obvious to her, about what the students didn’t know. One student said, “I wish someone had told me this a long time ago.” What are the cognitive skills necessary to enable people to build models, or program? Causal thinking is absolutely critical, of course. What else is necessary that we haven’t identified? We need to check if students have those skills, or if we need to teach them explicitly. Last year I found out in February that my students couldn’t consistently distinguish between a cause and a definition, and trying to promote that distinction while they were overloaded with circuit theory was just too much. So this year I created a unit called “Thinking Like a Technician,” in which I introduced the thinking skills we would use in the context of everyday examples. via Growth-Mindset Resource Could Support Model-Building « Shifting Phases."
"685","2013-01-24","2023-03-24","https://computinged.wordpress.com/2013/01/24/linking-csta-standards-to-other-national-standards/","CSTA has just published a useful set of documents, mapping their CS standards to other standards, including the Common Core. This is important for helping computer science teachers argue for how computer science helps achieve the goals of a variety of learning objectives. When designing state and district standards and school courses and curricula, it is often helpful to know how the CSTA K-12 Computer Science Standards correspond with other common national standards. To help with these efforts, we have created a series of downloadable documents that match the CSTA standards to the following standards documents: via CSTA – CSTA K-12 Standards."
"686","2019-02-18","2023-03-24","https://computinged.wordpress.com/2019/02/18/the-biggest-concerns-for-cs-education-in-the-united-states-standards-limited-models-and-undergraduate-enrollment-caps/","I was interviewed for the SIGCSE Bulletin by my long-time collaborator, Leo Porter (see https://sigcse.org/sigcse/files/bulletin/bulletin.51.1.pdf). I talk about this blog, how I started teaching in 1980, about Media Computation, and about what inspires me. One of the questions relates to the recent discussion about standards and frameworks (see post here). LP: You have worked with education public policymakers in “Georgia Computes!” and Expanding Computing Education Pathways (ECEP) over the last dozen years. What’s your biggest worry as US states start institutionalizing CS education? I have two. The first is that the efforts to standardize CS education are making the bar too low. When the K-12 CS Ed Framework was being developed, decisions were being made based on how current teachers might respond. “Teachers don’t like binary, so let’s not include that” is one argument I heard. I realize now that that’s exactly the wrong idea. Standards should drive progress and set goals. Defining standards in terms of what’s currently attainable is going to limit what we teach for years. Computing education research is all about making it possible to teach more, more easily and more effectively. I worry about setting standards based on our limited research base, not on what we hope to achieve. The second is that most of our decisions are being made around the assumption of standalone CS classes and having teachers with a lot of CS education. I just don’t see that happening at scale in the US. Even in the states with lots of CS teachers in lots of schools, a small percentage of students take those classes. This limits who sees computer science. To make CS education accessible for all, we have to be able to explore alternative models, like integrating computing education in other subjects without CS-specific teachers. If we only count success in CS education as having standalone CS classes, we are incentivizing only one model. I worry about building our policy to disadvantage schools that want to explore integrated models, or have to integrate because of the cost of standalone CS classes. Since this interview, I have a third concern, that may be more immediate than the other two. This is what I wrote my CACM Blog on this month. The NYTimes just published an article “The Hard Part of Computer Science? Getting Into Class” about the growing CS undergraduate enrollment and about the efforts by departments to manage the load. Departments used to talk about building capacity, but increasingly, the discussion is about capping or limiting enrollments. The reason why this is concerning is because we’ve been down this road before — see Eric Roberts’ history of CS capacity challenges. Our efforts to limit enrollment send a message about computer science being only for elites and being unwelcoming to non-CS majors. This is exactly opposed to the message that Code.org, CS for All, and the AP CS Principles exam is trying to send. We’re creating a real tension between higher education and the efforts to grow CS, and it may (as Eric suggests) send enrollments into the next dive."
"687","2017-02-03","2023-03-24","https://computinged.wordpress.com/2017/02/03/public-review-period-for-k-12-cs-csta-standards-now-open/","Note that this is not the framework — standards are the curriculum specifications which can be based on a framework. These are designed to align the K-12 CS Framework. Go to the page linked below to find the links which will lead you to the standards specific to various grade levels. The public review period for the revised K-12 Computer Science (CS) Standards is now open! In revising the K-12 CS Standards toward a more final form, the taskforce took specific steps to closely align its work with that of the K-12 CS Framework. This alignment will strengthen the value of both resources as tools to communicate the CS concepts and practices critical to student educational experiences today. The Computer Science Teachers Association invites teachers, curriculum supervisors, administrators, business leaders, the broad education and business communities to review the standards and offer feedback. The public review process is now open and ends Wednesday, February 15 at 11:59 PM PST. Source: Public Review Period for K-12 CS Standards Now Open! – CSTA"
"688","2013-01-23","2023-03-24","https://computinged.wordpress.com/2013/01/23/heres-the-real-reason-there-are-not-more-women-in-technology-forbes/","Interesting piece from Forbes, an interview with several female technical leaders about why there are too few women in technology. In the past, technology jobs were viewed by women as populated by men in basements, working alone, as an organ of the computer. Harvey Mudd’s President, Maria Klawe compiled her own research and offered a more substantive explanation, “We’ve done lots of research on why young women don’t choose tech careers and number one is they think it’s not interesting. Number two, they think they wouldn’t be good at it. Number three, they think they will be working with a number of people that they just wouldn’t feel comfortable or happy working alongside.” But, in today’s world, those views are officially over. Technology careers are interesting, women are great at it, and they get to work alongside extraordinary men and women. Being technology illiterate just doesn’t cut it anymore. It can’t when so many more job functions require so much more technical know-how. That’s my point. It’s not just that we have to encourage more women into technology related jobs; it’s that we need to show all women as Intel’s CIO Kim Stevenson put it to me, “the impact a technical background can have on a woman’s career, and the economic potential that accompanies it.” Stevenson, agreeing with Bates adds, “Often women don’t understand what options are available in tech fields – and that stops them.” via Here’s the Real Reason There Are Not More Women in Technology – Forbes."
"689","2013-01-04","2023-03-24","https://computinged.wordpress.com/2013/01/04/the-end-of-the-university-as-we-know-it-one-of-two-visions-of-a-mooc-filled-world/","When I talk to people about MOOCs, I realize that people are hearing two radically different stories. The first group hears that MOOCs can replace lectures, as MOOCs as a kind of textbook. They dream of higher-quality education with blended/flipped classrooms with more interactive exchange during classtime. This group wants to keep Colleges and Universities, and make them better (here’s an example of that vision). The second group hears the story linked below: that MOOCs will replace classes, then schools. They expect (and maybe even want) the MOOCopalypse. What’s fascinating to me is that each group generally dismisses the other’s story. I like the first story, and the second one scares me. Consider the implications of the vision described below (which is a clear second-group story). With less in-class interaction, graduation rates will plummet — online classes have dramatically lower completion rates without face-to-face contact. With far fewer schools, there is a much smaller demand for PhD’s, so fewer people will pursue higher degrees. Our technological innovation and competitiveness will whither. Think hard about what Universities provide for you before you write them off. In fifty years, if not much sooner, half of the roughly 4,500 colleges and universities now operating in the United States will have ceased to exist. The technology driving this change is already at work, and nothing can stop it. The future looks like this: Access to college-level education will be free for everyone; the residential college campus will become largely obsolete; tens of thousands of professors will lose their jobs; the bachelor’s degree will become increasingly irrelevant; and ten years from now Harvard will enroll ten million students. via The End of the University as We Know It – Nathan Harden – The American Interest Magazine."
"690","2013-01-07","2023-03-24","https://computinged.wordpress.com/2013/01/07/its-not-about-the-teachers-its-about-the-students-in-moocs-or-classroom/","I agree with the post below which suggests that MOOCs misunderstand what a good teacher does–that’s what my post earlier was about. I’m not convinced that I agree with the author’s definition of what a teacher does. Yes, a good teacher does all those things described in the second paragraph below, but a key part of what a teacher does is to motivate the student to learn. Learning results from what the student does and thinks. It’s the teacher’s job to cajole, motivate, engage, and even infuriate the student so that he or she thinks about things in a new way and learns. In the end, it’s always about the student, and the most important thing a teacher does is to get the student to do something. But even if Tabarrok’s model makes good economic sense, it makes bad education sense and misrepresents what genuine teaching is and what the “best” teachers actually do. For starters, unlike TED speakers, they don’t simply deliver lectures and profess. They also work with students to help them become better thinkers, readers, and writers. How? Through personal attention (such as tutorials) and classroom interaction (such as discussions and the guided close reading of texts). By constantly testing their students’ minds against theirs, forcing them to ask the hard questions and to explain them with significant answers. And by giving them appropriate personalized feedback. via A Cautious Word about MOOCs. Seb Schmoller had a nice response to my Friday post, where he asked what it will take for MOOCs to engage the student and lead to the learning that a good teacher can achieve. He included a wonderful quote from Herb Simon which really captures the key idea: “Learning results from what the student does and thinks, and only from what the student does and thinks. The teacher can advance learning only by influencing what the student does to learn.” – Herb Simon."
"691","2013-01-08","2023-03-24","https://computinged.wordpress.com/2013/01/08/hard-to-tell-if-universities-teach-the-challenge-of-low-stakes-testing/","What a great idea! Everybody who goes to University takes a test like the ACT or SAT. Simply give it to them again as they’re graduating! Now you have a measure of impact — the change between the entrance test and exit test is the value added by a University. Seems simple, but it doesn’t work. Students have a huge incentive to do well on the entrance exam, but zero incentive to do well on the exit exam. A new study published in Education Researcher shows that the motivation really matters, and it calls into question the value of the Academically Adrift study that claimed that Colleges aren’t teaching much. How do you know, if students don’t really have any incentive to do well on the post-intervention exams? To test the impact of motivation, the researchers randomly assigned students to groups that received different consent forms. One group of students received a consent form that indicated that their scores could be linked to them and (in theory) help them. “[Y]our test scores may be released to faculty in your college or to potential employers to evaluate your academic ability.” The researchers referred to those in this group as having received the “personal condition.” After the students took the test, and a survey, they were debriefed and told the truth, which was that their scores would be shared only with the research team. The study found that those with a personal motivation did “significantly and consistently” better than other students — and reported in surveys a much higher level of motivation to take the test seriously. Likewise, these student groups with a personal stake in the tests showed higher gains in the test — such that if their collective scores were being used to evaluate learning at their college, the institution would have looked like it was teaching more effectively. via Study raises questions about common tools to assess learning in college | Inside Higher Ed."
"692","2013-01-09","2023-03-24","https://computinged.wordpress.com/2013/01/09/what-happens-when-professionals-take-on-line-cs-classes-when-life-and-learning-do-not-fit/","The journal article on the research that Klara Benda, Amy Bruckman, and I did finally came out last month the ACM Transactions on Computing Education. The abstract is below. Klara has a background in sociology, and she’s done a great job of blending research from sociology with more traditional education and learning sciences perspectives to explain what happens when working professionals take on-line CS classes. This work has informed our CSLearning4U project significantly, and informs my perspective on MOOCs. We present the results of an interview study investigating student experiences in two online introductory computer science courses. Our theoretical approach is situated at the intersection of two research traditions: distance and adult education research, which tends to be sociologically oriented, and computer science education research, which has strong connections with pedagogy and psychology. The article reviews contributions from both traditions on student failure in the context of higher education, distance and online education as well as introductory computer science. Our research relies on a combination of the two perspectives, which provides useful results for the field of computer science education in general, as well as its online or distance versions. The interviewed students exhibited great diversity in both socio-demographic and educational background. We identified no profiles that predicted student success or failure. At the same time, we found that expectations about programming resulted in challenges of time-management and communication. The time requirements of programming assignments were unpredictable, often disproportionate to expectations, and clashed with the external commitments of adult professionals. Too little communication was available to access adequate instructor help. On the basis of these findings, we suggest instructional design solutions for adult professionals studying introductory computer science education. via When Life and Learning Do Not Fit."
"693","2013-01-10","2023-03-24","https://computinged.wordpress.com/2013/01/10/gender-parity-in-intro-cs-class-doesnt-imply-gender-parity-in-degree/","This article from TechCrunch seems mis-named, “No women in CS? Well, not for long!” The intro course at Stanford now has gender parity, which is terrific. But the article talks about how that isn’t translating into gender parity in the degree. Optimistic thinking is great, but ignoring the data isn’t. Many students continue from 106A to further develop their skills in CS 106B. But those who want to major in computer science must continue from 106B to the daunting 107, often considered a “weeding” class to separate the wheat from the chaff before students can take upper-level courses. Women do just as well as men in CS 106A and 106B but continue on to 107 in far fewer numbers. While many students, regardless of gender, drop the class, several students say that stereotypes, misconceptions, and lack of confidence cause women to drop the class in large numbers. The often anti-social, male-dominated culture is characterized by 107’s unofficial mantra of “dump your girlfriend before this class.” via No Women In CS? Well, Not For Long | TechCrunch."
"694","2013-01-11","2023-03-24","https://computinged.wordpress.com/2013/01/11/kiki-prottsman-why-american-students-are-trailing-in-computer-science/","It’s an interesting argument in favor of computational literacy, computing education for everyone. It’s a pretty accurate description of what happens at the first undergraduate classes. Imagine, if you will, a world where Americans don’t teach their children math in elementary school. Imagine that children no longer learn addition in first grade, subtraction in second or multiplication and division in third and fourth. Imagine instead that children make it all the way through high school without having any formal presentation of mathematical concepts. Now imagine that a student is observant enough to realize that adults who have a firm grasp on mathematics have much better problem-solving life skills and financial opportunities than adults who don’t. If that student is curious enough to enroll in an undergraduate math class, imagine how frustrating it would be to have the whole of arithmetic, algebra and statistics thrown at you in your very first term. Wouldn’t it feel overwhelming? Wouldn’t you be discouraged… especially if you noticed that several people in the class already seemed to understand the stuff fluently? Wouldn’t it be difficult to perceive the subject as one where you have talent? This hypothetical may seem ridiculous, but the truth is that a similar situation is being played out in America today with the subject of computer science. For many, computer science isn’t introduced at a k-12 level, so their first exposure comes in an undergraduate classroom, where they’re forced to absorb all of the basic building blocks of computational thinking at lightning speed before they can begin to fathom the concept of programming, design or engineering. To add further blows, a handful of students (often boys) will actually have skills in these areas, making the newcomers feel deficient, awkward and behind. via Kiki Prottsman: Why American Students Are Trailing in Computer Science."
"695","2013-01-14","2023-03-24","https://computinged.wordpress.com/2013/01/14/a-stem-modeling-contest-not-programming-not-games/","I got this from Bill Jordan of the Florida Virtual High School and was intrigued. It’s a programming contest to make models — and not about speed of programming, not quality of games. As I’ve mentioned before, we’ve had some good luck with competitions in terms of teacher professional development. Getting teachers to learn about modeling is even more exciting! STEM Modeling Challenge (Register by Jan. 31) Are you interested in Science, Technology, Engineering, Art, or Math? How often have you asked yourself, “When will I ever use this?” Find the answers by participating in the STEM Modeling Challenge©. FREE registration is now open but the deadline is January 31, 2013. Don’t miss this opportunity to use your problem-solving skills to win cash prizes! For details and contest rules, visit http://smc2013.weebly.com/."
"696","2013-01-16","2023-03-24","https://computinged.wordpress.com/2013/01/16/computer-code-frees-us-to-think-in-new-ways-bbc-news-viewpoint/","A nice piece describing reasons to learn code. What makes this one particularly noteworthy is how it talks about art, architecture, and aesthetic — learning to code as a way of connecting to our world. Both aesthetic and rooted in physics, sturdy yet beautiful, containing both purpose and artistic intent. Code is now a core part of the architecture of the world we live in. It both powers and shapes finance, business, and entertainment; it is embedded in our homes and in our pockets. And so “architecture” feels like the appropriate metaphor for the skills needed to master it: for architecture both shapes its inhabitants and is shaped by them. Computer programs can make people more efficient in day to day life It can’t really exist without people inside it. And we can’t separate code from people; from the people who write it; from the people who are shaped by it. via BBC News – Viewpoint: Computer code frees us to think in new ways."
"697","2013-01-17","2023-03-24","https://computinged.wordpress.com/2013/01/17/meet-kyla-mcmullen-the-1st-black-woman-to-graduate-with-a-phd-in-cs-at-u-michigan/","I just learned this fact at the NSF BPC/CE21 meeting from Jane Margolis’s talk. This last Fall 2012, the first female African-American CS PhD graduated from the University of Michigan. Michigan is 14% African-American. University of Michigan is a state institution. Really? 2012? I guess it’s not too surprising, when we know from the AP CS data that I talked about last year that few African-Americans get access to computer science in Michigan. Dr. Kyla McMullen is the first African American woman to graduate with a PhD in computer science at the University of Michigan. When asked how she feels about her new title, the scholar replied “Bittersweet.” She explained that it’s gratifying to have the distinction of being the university’s first African American female to acquire a PhD in computer science, it reminds her of a sad reality: There aren’t enough men and women of color pursuing advanced degrees in computer science. via Meet Kyla McMullen: The 1st Black Woman to Graduate With a PhD In Computer Science at Univ of Michigan | Your Black World."
"698","2013-01-17","2023-03-24","https://computinged.wordpress.com/2013/01/17/first-endowed-chair-cs-ed-professor-ben-shapiro-at-tufts/","While Ben Shapiro’s chair says “Engineering Education,” his PhD in Education and CS and the kinds of projects he works on says to me that we can claim him as a CS Ed guy. Which makes this the first (as far as I know) Endowed Chair for CS Ed. Ben will be part of CEEO at Tufts — they have a new MAT for teaching engineering that I wrote about earlier, and I visited them last month and wrote about here. A win for Ben, Tufts, and the CS Ed community! The James S. McDonnell Family Foundation has donated $3 million to Tufts University in Medford, Mass., to fund an endowed chair at its school of engineering, university officials announced. The gift will also support the Center for Engineering Education and Outreach (CEEO) to expand research into educational technologies to help children in grades K-12 learn engineering and technology concepts. R. Ben Shapiro will be the inaugural holder of the McDonnell Family Foundation professorship in engineering education (pending university provost and trustee approval), and he will be a faculty member of CEEO. via McDonnell Foundation gifts $3 million to Tufts University – St. Louis Business Journal."
"699","2013-01-18","2023-03-24","https://computinged.wordpress.com/2013/01/18/teaching-programming-to-a-highly-motivated-beginner-the-difference-between-anecdote-and-data/","Phillip Guo has a piece in Blog@CACM on how he tutored a single adult to learn to program. He contrasts it with the MOOC approach of teaching thousands. There’s another important contrast–between anecdote and data. Phillip’s story is interesting and compelling. He raises some key insights, like the value of motivation to drive someone to come to a new understanding. But some of his claims are just too broad, like the one he boldfaced below in his original, “I don’t think there is any better way to internalize knowledge than first spending hours upon hours growing emotionally distraught over such struggles and only then being helped by a mentor.” Phillip could be right. (I don’t think that he is.) But to suggest that there isn’t a better way based on the study of one learner is over-generalizing. There is a research methods for produce case studies, which is the closest research method to what Phillip did. There’s only so much you can claim from a single case study, though. Brian usually did 10-15 hours of programming on his own before each 1-2 hour Skype call with me, so he always had plenty of urgent questions and newly-written code that he wanted me to help him debug or improve. If I had just given him lectures without any context, he would not have internalized the lessons as thoroughly. He would have probably nodded his head and been like, “uh huh, ok that makes sense … cool. what’s next?” Instead, because he was usually struggling with concrete, code-related problems before our tutoring sessions — often to the point of frustration and discouragement — he would respond more like, “OHHH, WOW! Now I totally get it!”, whenever I guided him over some problem that seemed insurmountable to him at the time. His joy and relief were always unmistakable. I don’t think there is any better way to internalize knowledge than first spending hours upon hours growing emotionally distraught over such struggles and only then being helped by a mentor. via Teaching Programming To A Highly Motivated Beginner | blog@CACM | Communications of the ACM."
"700","2013-01-21","2023-03-24","https://computinged.wordpress.com/2013/01/21/first-do-no-harm-inequality-in-american-education-will-not-be-solved-online/","Ian raises a really important issue that I don’t think is being discussed enough. I predict that computer science MOOC completers are even more white and male than in existing computing education. Replacing more face-to-face CS courses with MOOCs may be reversing the hard-fought gains we’ve made through NCWIT and NSF BPC efforts. I’ve asked both Udacity and Coursera about the demographics of their completers. Coursera said that they don’t know yet because they simply haven’t looked. Udacity said that it’s “about the same” as in existing face-to-face CS classes. To address issues of inequality, we will have to do something different than what we are doing now, but we want to do something different that has better results. We need to be careful that we don’t make choices that lead us to a worse place than we are now. Here’s a concrete proposal: Any institution that belongs to NCWIT (or more significantly, the NCWIT Pacesetters program) that runs a MOOC for computer science and does not check demographics should have its membership revoked. (See Note.) We should not be promoting computer science education that is even more exclusive. We need new forms of computer science education that broaden participation. At the very least, we ought to be checking — are we doing no harm? Are we advancing our agenda of broadening participation, or making it more exclusionary? I wonder if the responsibility to check is even greater for public institutions. Public institutions have a responsibility to the citizens of their state to be inclusive. Readers of this blog have argued that Title IX does not apply to academic programs, suggesting that there is no legal requirement for CS departments to try to draw in more women and minorities. We in public universities still have a moral responsibility to make our courses and programs accessible. If we choose to offer instruction via MOOCs, particularly as a replacement for face-to-face courses, don’t we have a responsibility to make sure that we are not driving away women and minorities? The SJSU test will be run on “remedial” courses at one of the country’s most ethnically diverse universities, of which only 25 percent of the student population is white, and which is primarily comprised of minorities, first-generation college students, and commuting students. This is a population that has more likely been subject to underfunded primary and secondary schools and, generally speaking, a whole regime of distress, neglect, and bias compared to California residents who would attend Berkeley or UCLA. Put differently, the conditions that produced the situation that the Udacity deal is meant to solve, at least in part, was first caused by a lack of sufficient investment in and attention to early- and mid-childhood education. In response, California could reinvest in public schools and the profession of secondary teaching. But instead, the state has decided to go the private paved surface and illumination services route — siphoning California taxpayer receipts and student tuition directly into a for-profit startup created, like all startups, with the purpose of producing rapid financial value for its investors. Just how much of those proceeds Udacity will hold onto is unclear. While the company has reportedly paid instructors in the past, it’s unclear if its new institutional relationships will support paid teaching or not. Coursera, Udacity’s primary competitor in the private MOOC marketplace, has managed to get faculty from prestigious institutions to provide courses for free, in exchange for the glory of a large audience and the marketing benefit of the host institution. via Inequality in American Education Will Not Be Solved Online – Ian Bogost – The Atlantic. Note: While I sit on the NCWIT Leadership Team, the opinions in this blog are my own. They do not represent NCWIT’s policy. I shared this blog post with Lucy Sanders, CEO of NCWIT, and she made an interesting suggestion. Some NCWIT Pacesetters are departments who may have little control over what their college, school, or university does. If they must use MOOCs, because of decisions made higher in the administrative chain, then perhaps measuring the demographics of the completers might be a way of being a Pacesetter."
"701","2013-01-22","2023-03-24","https://computinged.wordpress.com/2013/01/22/where-did-cs-phds-get-their-undergraduate-degrees/","The latest issue of Computing Research News has a report from CRA-E (their Education subcommittee) on where CS PhD’s come from. Research universities, institutions that stop at Masters degrees, four year colleges, or top liberal arts institutions? Turns out the answer is that the vast majority of CS PhD’s get their undergraduate degrees from research universities, but the sum of the PhD’s who get their undergraduate degrees from the top 25 liberal arts institutions is greater than any single research institution. There’s also evidence that the research universities produce better graduate students, using NSF fellowships as the quality metric. That was quite unexpected — I would have guessed that the four years and the liberal arts institutions would have played a much greater role. In 2010, 1665 Ph.D.’s were awarded in computer science of which 714 went to domestic students. Approximately 71% of the domestic Ph.D.’s received their undergraduate degrees from research universities, 15% from master’s institutions, 11% from four-year colleges, and 4% from other colleges. These proportions have remained essentially unchanged since 2000 with all four types seeing similar increases since 2005. via Computing Research News – Online – Computing Research Association."
"702","2013-01-30","2023-03-24","https://computinged.wordpress.com/2013/01/30/how-can-we-get-more-boys-into-ballet-response-to-an-argument-against-getting-more-women-into-computing/","Do we have a desperate need for more ballet dancers? Has ballet dancing become the lifeblood of our society? If so, then we really should try to get more boys into ballet. Or maybe ballet dancers made much more than average. Then getting more boys into ballet (or figuring out, at least, why they weren’t there) would be about being fair, giving everyone a chance at the high-paying jobs by making sure that there weren’t any accidental barriers or implicit bias. Fortunately, we’re talking computing, not ballet, and we know the answers to many of those questions for computing. Computing is ubiquitous in our society and is critical to our economy. We face a labor shortage of skilled computing professionals. Computing professionals are rarely female. There are forms of bias that prevent many women from engaging and persisting in computing. Finally, when there are more diverse teams, design gets better. For all these reasons, we need more women in computing. There are answers beyond a “positive discrimination policy.” Changing what we do can making computing education more attractive and engaging for women, and make it better for men, too. Curb cuts help everyone. I have a great amount of respect for the efforts of others in doing what they can to try to redress these outmoded stereotypes. I’m just not sure that I agree completely that a positive discrimination policy is an effective solution. This issue is not confined to just this sector of tech and computing but applies in many others. In our school there is one boy in the GCSE Textiles class and 3 boys in the GCSE Food class. I wonder if as a society we should question whether we celebrate the differences between male and female or seek to remove and reduce them. When I stand up on the bus to offer my seat to a lady or hold the door open for a female colleague, am I being courteous, chivalrous or disrespectful to men? via How Can We Get More Boys Into Ballet? « Teach Computing."
"703","2013-01-31","2023-03-24","https://computinged.wordpress.com/2013/01/31/documentary-aims-to-make-programming-cool/","Code.org is aimed at making programming cool, and they’re going to do it with a documentary: Code.org’s initial effort will be a short film, currently being edited, that will feature various luminaries from the technology industry talking about how exciting and accessible programming is. Two of the most famous programmers and entrepreneurs in history — Mark Zuckerberg, the chief executive of Facebook, and Bill Gates, the chairman and co-founder of Microsoft – were among the people interviewed for the film, according to a person with knowledge of the project who wasn’t authorized to discuss details about it. Lesley Chilcott, a producer of the documentaries “Waiting for ‘Superman’” and “An Inconvenient Truth,” is making the film. via A New Group Aims to Make Programming Cool – NYTimes.com."
"704","2013-01-31","2023-03-24","https://computinged.wordpress.com/2013/01/31/grades-are-in-for-a-pioneering-free-johns-hopkins-online-class-adding-more-to-the-public-good/","Some more statistics from another Coursera course. The final comments are interesting: Through MOOCs, “everyone can get at least some fraction of what we believe is fundamental knowledge.” That’s true. The interesting question is whether MOOCs get more students a fraction that they didn’t have previously (see the edX data about 80% repeating the course) than a similar face-to-face course. It’s not obvious to me either way — there are certainly results that have us questioning the effectiveness of our face-to-face classes. While MOOCs lead to few finishing, maybe those that do finish learn more than in a face-to-face class, and maybe overall (amount of learning across number of students), MOOCs contribute more to the public good? Read on for the final metrics on Caffo’s class and a few thoughts from the associate professor at the university’s school of public health. Number of students who signed up for Caffo’s class: 15,930. Number who ordinarily sign up for the class when it is taught solely on campus in Baltimore: a few dozen. Active users in the final week of the class: 2,778 Total unique visitors who watched Caffo’s video lectures: 8,380 Total who submitted a quiz: 2,882 Total who submitted homework: 2,492 Total who passed the course (averaging 70 percent or better on quizzes): 748 Total who passed with distinction (averaging 90 percent or better): 447 And here is Caffo’s take: “Regardless of how MOOCs wind up, it is awesome to be a professor in a time where teaching is the hottest topic in higher education at research-driven universities. I also have a lot of sympathy for democratizing education and information. Very few people will have the privilege of a Johns Hopkins University Bloomberg School of Public Health education. But, with these efforts [including free online initiatives such as Open Courseware, iTunes U, Coursera] everyone can get at least some fraction of what we believe is fundamental knowledge for attacking the world’s public health problems.” via Grades are in for a pioneering free Johns Hopkins online class – College, Inc. – The Washington Post."
"705","2013-02-28","2023-03-24","https://computinged.wordpress.com/2013/02/28/it-research-hearing-focuses-on-security-and-computing-education/","A congressional committee heard about the importance of computing research, and what the committee members responded with was a need for more cyber-security and more computing education. Lazowska spoke about the NITRD program’s history and the role of computing in the US economy. He showed an NRC chart on research and IT sectors with billion dollar markets. Lazowska also talked about the need to integrate security into the building of systems and not added on at the end as a defensive measure when questioned about cybersecurity by Congressman Steven Stockman R-TX. Stockman, who credits support from the fiscally-conservative Tea Party for his election, had the quote of the hearing, when after having pressed Lazowska for an order-of-magnitude estimate on how much additional investment in fundamental cyber security research would move the needle seemed surprised that the number PITAC requested back in 2005 was “only” $90 million. “Well, I’m interested in getting you billions, not millions,” he said, indicating he was very concerned about the U.S. vulnerability to cyber attack.The Subcommittee members were very interested in how to tackle the education problem in computing as well as how they could help researchers address cybersecurity moving forward. via IT Research Hearing Focuses on Security, Education."
"706","2016-11-04","2023-03-24","https://computinged.wordpress.com/2016/11/04/we-overvalue-innovation-and-entrepreneurship-shifting-the-focus-to-maintenance-over-fads/","Until I heard this recent Freakonomics podcast, I was not aware of this response to innovation and entrepreneurship trends. The quote below speaks directly to engineering education, but is as much about computing education. The value of engineering is much, much more than just innovation and new things. Focusing on taking care of the world rather than just creating the new nifty thing that’s going to solve all of our problems. If you look at what engineers do, out in the world, like 70-80 percent of them spend most of their time just keeping things going. And so, this comes down to engineering education too, when we’re forcing entrepreneurship and innovation as the message, is that we’re just kind of skewing reality for young people and we’re not giving them a real picture and we’re also not valuing the work that they’re probably going to do in their life. That just seems to me to be kind of a bad idea. Source: In Praise of Maintenance – Freakonomics Freakonomics The quote is from Lee Vinsel who was a co-author on a thought-provoking essay, Hail the maintainers, sub-titled: “Capitalism excels at innovation but is failing at maintenance, and for most lives it is maintenance that matters more.” To take the place of progress, ‘innovation’, a smaller, and morally neutral, concept arose. Innovation provided a way to celebrate the accomplishments of a high-tech age without expecting too much from them in the way of moral and social improvement. It’s easy to see this emphasis on innovation over maintenance. We talk about disruption and transformation much more than reforming, repairing, or improving. We talk more about creation than understanding. We increasingly teach computer science to prepare students to be innovators and create new things (e.g., join startups), when the reality is that most computer science graduates are going to spend the majority of their time maintaining existing systems. (See the papers by Beth Simon and Andy Begel tracking new hires at Microsoft.) Few who do enter the startup world will create successful software and successful companies, so it’s unlikely that those students who aim to create startups will have a lifelong career in startups. In terms of impact and importance, keeping large, legacy systems running is a much greater social contribution than creating yet another app or game, when so few of those startup efforts are successful. Aren’t we then as guilty as the engineering educators, described in the first quote? In terms of what we teach in computing and how, innovation and maintenance is a hard balance to strike. As Alan Kay has noted, “The computing revolution hasn’t happened yet.” We’re still inventing and innovating because what we have isn’t good enough. But, that desire to value what’s new leads us to overvaluing the fad of the moment, rather than exploring, developing, and understanding what we have at-hand. Why do we have to keep changing the introductory programming language, when it’s clear that we don’t understand how students learn (and don’t learn) the programming languages that we currently teach? Why did we give up on Logo when it’s still better than most languages for children today? It’s a tough balance — to strive for better than we have, but valuing, developing, and improving what we currently have."
"707","2016-11-02","2023-03-24","https://computinged.wordpress.com/2016/11/02/what-research-will-you-do-for-csforall-white-house-call-for-commitments/","Ruthe Farmer let me know that the White House Office of Science and Technology Policy (OSTP) is explicitly interested in getting research commitments in response to this call: In less than two months, there will be another opportunity to celebrate, to mark progress, and to grow the coalition working to expand computer science. This Computer Science Education Week (CSEdWeek), taking place from December 5-11, schools, community organizations, families, companies, and government agencies-including the White House and Federal agencies like NASA, the National Science Foundation, the US Patent and Trademark Office, and the Department of Energy-will host events and activities to give students direct access to CS. This will include everything from Family Code Nights that engage parents and students in learning computer science together, to Hour of Code events at schools, in homes, and online worldwide, to events here at the White House highlighting making and computer science, bringing broadband internet access to all Americans, and using open data to drive innovation. With your help, this upcoming CSEdWeek has the potential to be the largest and most successful to date and we look forward to hearing about your plans. One of the ways your organization can get involved is to commit to expand computer science in your community or nationally, with measurable, specific goals that uniquely utilize what you can do to spread opportunity. If you have an action you want to undertake to support CS education, submit it here by November 14, 2016. We want to hear about remarkable strides being made in your community and how we can build on them! https://www.whitehouse.gov/blog/2016/10/27/call-new-csforall-actions-during-computer-science-education-week The Research+Practice Collaboratory led the ECEP State Teams last week in framing research questions relevant to the President’s CS for All initiative. Below are some of my pictures from that effort, to prime thinking about the research questions that surround CS for All. (I have a lot more to tell about last week’s meetings, but first I have to recover and recoup time lost to planning/logistics/travel.) "
"708","2015-01-21","2023-03-24","https://computinged.wordpress.com/2015/01/21/spatial-visualization-skills-faqs-engage-engineering/","A cool FAQ on the importance of spatial visualization skills in most STEM fields, and the research on how to improve them. Research has demonstrated that training is an effective way to improve spatial visualization skills Contero et al., 2006; Ferguson, Ball, McDaniel, & Anderson, 2008; Hand, Uttal, Marulis, & Newcombe, 2008; Hsi et al., 1997; Martín-Dorta et al., 2008; Newcombe, 2006; Onyancha, Derov, & Kinsey, 2009; Onyancha, R., Towle, E., & Kinsey, B., 2007; Sorby, 2009; Sorby & Baartmans, 2000; Terlecki, Newcombe, & Little, 2008. In the area of mental rotation where the largest gender gap in performance exists, training has been effective as well Sorby & Baartmans, 2000; Sorby, Drummer, Hungwe, Parolini, & Molzan, 2006.In one study, students who failed the Purdue Spatial Visualization Test PSVT:R and enrolled in spatial skills training were able to improve their scores on the mental rotation test from approximately 50% to 77% or higher than students who failed the test and did not enroll in the course. These students also got better grades in 1st year STEM courses Sorby, 2009. via Spatial Visualization Skills FAQs – Engage Engineering."
"709","2017-01-11","2023-03-24","https://computinged.wordpress.com/2017/01/11/how-do-we-move-forward-in-cs-ed-and-not-just-retrace-the-past/","Interesting essay from Neil Brown who decided to try to resurrect some of the best of CS Education research software from the past. As I mentioned in a previous blog post, I have found that Logo code from the past doesn’t run as-is on modern Logo implementations. I was just talking to a colleague about how great it would be to be able to run Boxer and HyperCard again. (Yes, I have a license for Livecode, but it’s not the same interface as HyperCard.) Etoys still runs on everything, but it’s a rare exception. It’s important to make progress that we build on the past, and not simply re-invent it, forget it, or mis-remember it.  I did have one or two successes, such as getting a version of the GENIE editor running in an emulator. And it was a revelation that greatly pushed forward my understanding of old structured editors. By modern standards, they were awful. The papers’ descriptions didn’t make clear how tedious and fiddly the navigation was, how unhelpful the editor was, how awkward it was to deal with errors. Running the software was an absolutely crucial step to comparing our work to theirs. It allowed me to understand the design and critique the editor’s operation for myself, rather than relying on the authors’ incomplete descriptions of their own software.For all the other editors which I couldn’t run, there are these reviewers asking the perfectly valid question in research: “How does your work relate to previous work X?” And the honest answer is: I don’t know. Perhaps nobody can know any more — the paper wasn’t very detailed and the software is lost in time. This is no way to do research. Source: A case for publishing research software | Academic Computing | Essays and arguments about computing education"
"710","2015-01-14","2023-03-24","https://computinged.wordpress.com/2015/01/14/logo-changes-the-challenge-of-making-a-square-in-modern-logos/","I’ve always been a Logo fan. After WIPSCE and my thoughts about the value of resurrecting Logo (see the post), I decided to download some modern Logo implementations and do the classic square. The basic square works perfectly fine in Brian Harvey’s Berkeley Logo (see here) — it’s a straightforward implementation from the past. That means that you’re missing more modern and more platform-dependent features (e.g., no sound at all, no networking primitives, etc.). Next, I tried StarLogo. Took me awhile to figure it out — I had to put the pen down (PD) because it wasn’t by default, and then I had a hard time getting the procedures to work, so I just typed in the code directly. I think I drew a square, but I think I was actually controlling thousands of turtles, because the effect was not at all what I expected.  I then tried NetLogo, which changes turtles from the old days. When you start out, you have no turtles at all. You have to create a turtle, and then you can ask the turtles to do something. I did it, but I didn’t get a square. Or maybe it’s a square but just wrapped around a lot?  The point is that modern Logo implementations were developed for different purposes than older Logo implementations. StarLogo and NetLogo are modeling platforms that support thousands of turtles. That makes it confusing for an oldster like me who wants to do the old things. If we want to be able to use the old curriculum, we’ll have to make some new Logo implementations that work like the old ones but provide the kinds of facilities that we’d want to play with today. Shouldn’t Logo know about the Web? I’d like to be able to manipulate pixels in a picture and samples in a sound — probably no surprise."
"711","2015-01-16","2023-03-24","https://computinged.wordpress.com/2015/01/16/google-computer-science-for-high-school-open-for-face-to-face-again/","Really great news: The Google CS4HS program is again open to face-to-face professional development! Last year, they only offered MOOC-based PD (see blog post here). The new call is backed up with research, so that the CS4HS programs are designed to be more effective. (I suspect that Chris Stephenson’s move to Google had something to do with this…) Google believes the new Advanced Placement Computer Science Principles (CSP) course being developed by the National Science Foundation and the College Board is key to engaging a more diverse audience of students in computer science. Adoption and exemplary teaching of this course requires a community-wide effort to prepare teachers. To that end, in 2015 the CS4HS program will be providing grants to universities and educational non-profits interested in helping their local teacher community prepare to teach CSP. Research (Joyce & Showers, 2002; Wiske, Stone, & Levinson, 1993) shows that peer-to-peer professional development and on-going support improve teachers’ abilities to adopt and implement new content and skills. Based on this research Google’s intention in 2015 is to provide funding support for: Eligibility Applicants must satisfy the following criteria in order to be eligible: You must be affiliated with a college, university, technical college, community college, or an official non-profit organization focused on education. Your workshop must have a clear focus on the College Board’s new AP Computer Science Principles curriculum. Your workshop must be followed up with a plan for year-round communities of practice work that supports ongoing PD and advocacy for the Computer Science Principles curriculum. Online courses must use Google products for content delivery. Online courses must be massive, open, and online; therefore enrollment cannot be capped. via Google Computer Science for High School."
"712","2014-05-06","2023-03-24","https://computinged.wordpress.com/2014/05/06/chris-stephenson-steps-down-as-executive-director-of-csta/","I do think that it’s fair to say that every K-12 CS initiative in the US has benefited from CSTA and its members, and it’s also fair to say that Chris Stephenson has personally played a major role in (many, if not most of) those initiatives. Wishing her best of luck at Google! I think it would be fair to say that there is not a single K-12 computer science initiative in this country (and other countries as well) that has not benefited directly from CSTA and its many dedicated volunteers. This is something in which every CSTA member can take great pride. In the last year we have seen the pay off for much of CSTA’s early work. Public interest in computer science education has never been so high. Coalitions of powerful education and industry allies are working together to change educational policy. Great research is underway. And teachers now have access to unprecedented opportunities for professional development. K-12 computer science education is an overnight sensation more than 10 years in the making. So what of the next 10 years? Like any truly great organization, CSTA continues to evolve and change as the needs of educators and their students do the same. But as long as computer science is taught in schools, there must be a peer-driven professional organization that does the countless things needed to ensure that it remains relevant, supported, and strong. I recently submitted my resignation as Executive Director of CSTA, and May 23, 2014 will be my last day. I will be moving on to my new role as a Computer Science Education Program Manager at Google where I look forward to continuing my work on behalf of the computer science education community. via Computer Science Teachers Association."
"713","2014-05-05","2023-03-24","https://computinged.wordpress.com/2014/05/05/launching-livecoding-network/","Interesting announcement from Thor Magnusson and Alex McLean — more energy going into livecoding. Check out the doctoral consortium around livecoding, too. AHRC Live Coding Research Network http://www.livecodenetwork.org We are happy to announce the launch of the Live Coding Research Network (LCRN), hosting a diverse series of events and activities over the next two years, funded by the UK Arts and Humanities Research Council (AHRC). In addition the TOPLAP organisation will run a year-long programme of performance events around the country, supported by the Sound and Music national agency for new music. If you are unfamiliar with the practice of live coding, for now we refer you to the website of our sister organisation TOPLAP: http://toplap.org/about/ Following a successful launch symposium last month, we have three more symposia, an international conference as well as a range of associated events already planned. UPCOMING SYMPOSIA 4th-6th July 2014, University of Sussex, Brighton – “Live coding and the body” Our second symposium will be preceded by an “algorave” night of performances at The Loft on the 4th July, with the symposium proper running on the 5th and 6th of July. This symposium will follow after the NIME conference in London (http://www.nime2014.org/), which will itself include a good number of live coding performances and papers. Please see our website for more information: http://www.livecodenetwork.org/2014/04/12/symposium-on-live-coding-and-the-body-and-algorave/ 25th-28th September 2014, Birmingham – “Live coding in collaboration and network music” Our third symposium will run from the 25th-26th September 2014, with the first day focussed on doctoral research. It will lead into the well established Network Music Festival (http://networkmusicfestival.org/), running over the weekend, which will itself showcase network-based live coding music amongst its programme. Watch our website for details. UPCOMING ASSOCIATED EVENTS * 26th April 2014, Gateshead from 10pm – An algorave celebrating great Northern live coders Holger Ballweg, Hellocatfood, Shelly Knotts, Sick Lincoln, Norah Lorway, Section_9, Yaxu + more. Organised by the Audacious Art Experiment. More info: https://www.facebook.com/events/291980540962097/291989147627903/ * 13th May 2014, London – Sonic Pattern and the Textility of Code, a daytime symposium in collaboration with the Craft Council. More details on our website next week. We have much more in the pipeline, please watch our website and social media feeds for more information: http://www.livecodenetwork.org http://twitter.com/livecodenet/ http://facebook.com/livecodenet/ Or get in contact with network co-ordinators Thor Magnusson <Thor Magnusson <T.Magnusson@sussex.ac.uk> and Alex McLean <a.mclean@leeds.ac.uk>"
"714","2014-05-07","2023-03-24","https://computinged.wordpress.com/2014/05/07/coding-in-schools-a-is-for-algorithm-the-economist/","The Economist does a nice job of capturing succinctly the history of teaching computing in schools, the explosion of interest worldwide, and the greatest challenges to making it work. Above all, the new subject will require teachers who know what they are doing. Only a few places take this seriously: Israel has about 1,000 trained computer-science teachers, and Bavaria more than 700. Mathematics and computer-science graduates generally choose more lucrative trades; the humanities and social-science graduates who will find themselves teaching coding will need plenty of support. Britain is skimping: it is introducing its new curriculum in a rush, and preparing teachers has mostly been left to industry groups such as Computing at School, which helped put together the syllabus. If coding is to take its rightful place in the classroom, it cannot be done on the cheap. via Coding in schools: A is for algorithm | The Economist."
"715","2014-05-15","2023-03-24","https://computinged.wordpress.com/2014/05/15/reading-writing-arithmetic-and-lately-coding-but-mostly-a-video-game-elliot-soloway/","Elliot gets it right in his NYtimes quote from this last weekend. Young kids who code are probably not learning much computer science that might lead to future jobs. Rather, they’re “programming” as if it’s a video game. That’s not at all bad, but it makes less believable the argument that we need coding in skills to improve the future labor force. The spread of coding instruction, while still nascent, is “unprecedented — there’s never been a move this fast in education,” said Elliot Soloway, a professor of education and computer science at the University of Michigan. He sees it as very positive, potentially inspiring students to develop a new passion, perhaps the way that teaching frog dissection may inspire future surgeons and biologists. But the momentum for early coding comes with caveats, too. It is not clear that teaching basic computer science in grade school will beget future jobs or foster broader creativity and logical thinking, as some champions of the movement are projecting. And particularly for younger children, Dr. Soloway said, the activity is more like a video game — better than simulated gunplay, but not likely to impart actual programming skills. via Reading, Writing, Arithmetic, and Lately, Coding – NYTimes.com."
"716","2014-05-14","2023-03-24","https://computinged.wordpress.com/2014/05/14/teaching-code-in-the-classroom-room-for-debate-nytimes-com/","Remarkable debate on the NYTimes website about “Should coding be part of the elementary school curriculum?” All the debaters have very short statements, and they’re disappointing. Take a look and see what you think. It’s exciting to have this kind of debate in the NYTimes! Despite the rapid spread of coding instruction in grade schools, there is some concern that creative thinking and other important social and creative skills could be compromised by a growing focus on technology, particularly among younger students. Should coding be part of the elementary school curriculum? via Teaching Code in the Classroom – Room for Debate – NYTimes.com."
"717","2014-05-09","2023-03-24","https://computinged.wordpress.com/2014/05/09/hackathon-models-that-draw-in-women/","I had some off-blog responses to my post about women in hackathons. Here are a couple of them: These both look interesting and successful, in terms of drawing more women in. I’m still left with questions. Why do a large-number-of-hours hackfest/stitchfest at all? The Brown article does give a reason: to build community. I do believe that a sleepless all-nighter experience can build community. Are there other, maybe better ways? Are these replicable models? Both of these examples are at Ivy League institutions. Both of these efforts had significant corporate sponsorship. The Brown hackathon had a professional engineer to work with almost every student group. Can other schools duplicate that draw? There are interventions that are easier at an Ivy League institution. The Harvard CS50 experience is absolutely amazing, but will Facebook sponsor pizza party coding sessions for every school in the US, and is Microsoft willing to host every school at the NERD Center? I know I’m at Georgia Tech, so I need to watch for being painted with the same brush. Not everything we do is easily replicated elsewhere. We explicitly design for replicability and measure it. Maybe there is value in hackathons, and maybe it can even play a role in improving diversity in computing. Microsoft and Code.org are supporting hackathons for women. If we’re going to do this, we should articulate the desired value and role, design for it, and test to see if it’s happening. I’d rather not believe that hackathons are simply there, part of the new computing culture, and now we can only learn how to make them as not-awful as possible."
"718","2015-01-17","2023-03-24","https://computinged.wordpress.com/2015/01/17/search-is-on-for-new-csta-executive-director/","I wrote a while back about Chris Stephenson moving to Google. It’s time to find a new executive director for CSTA! The Computer Science Teachers Association (CSTA) announces its search for an Executive Director. The Executive Director must be deeply committed to CSTA’s core mission, which is to empower, support and advocate for K-12 computer science teachers worldwide. The Executive Director reports to and works collaboratively with the Board of Directors to set strategic direction, develop goals, attain/manage resources, and establish policies for the organization. The Executive Director is responsible for the organization’s consistent achievement of its mission and financial objectives and ensures ongoing programmatic excellence, rigorous program evaluation, and consistent quality of finance, administration, fundraising, communications, and organizational systems. This is a full-time position. The Executive Director manages a staff including an Assistant Director and four part-time administrators (meeting planner, web developer, project coordinator, and newsletter editor), and conducts their work from a virtual office. Considerable travel is required. For position specifications, including key responsibilities, qualifications, and procedures for candidacy, please visit http://summitsearchsolutions.com/wp-content/uploads/2015/01/CSTA-ExecutiveDirector-Spec.pdf."
"719","2014-05-02","2023-03-24","https://computinged.wordpress.com/2014/05/02/a-really-nice-mediacomp-image-blending-lesson/","I got to see this at SIGCSE and was really impressed — both the effect, and how it’s written up. Thanks for letting me share it, Dwight!  A much better effect would be combine the images to give the impression that Bogart’s character, Rick, is thinking about Bergman’s character, Ilsa. This requires blending the images together. When blending images the necessary step required is to combine the colors of corresponding pixels of the images together. The RGB values of the pixels to be blended are added together using a percentage of the color of each pixel. If even blending is desired then 50% of each RGB value of the source pixels is added to 50% of each RGB value of the target pixels to make the color of the blended pixel. In the Bergman/Bogart merging above we do not wish an even blending instead we will use 33% of the Bergman pixel color and 67% of the Bogart pixel color. You should now be able to write a blend33() function to perform this blending. To view the completed function move your mouse over the following paragraph. via Image Blending."
"720","2014-05-11","2023-03-24","https://computinged.wordpress.com/2014/05/11/the-personal-cost-of-applying-for-research-grants/","For academics, this study falls in the category of “Duh! Who didn’t know that?!?” But it might not be obvious to non-academics. NSF hit-rates are below 10% in most fields. Proposals take tons of time to put together (way more than a conference paper, on par with a journal paper), and you have to keep producing them until you get hits in a research-intensive university. When hit rates were around 30%, you’d do four proposals and could expect one to hit. Nowadays, you’re doing over 10, and then you’re still not sure you’ll get funded. It’s a huge cost. The pressure to win high-status funding means that researchers go to extraordinary lengths to prepare their proposals, often sacrificing family time and personal relationships. During our research into the stressful process of applying for research grants, one researcher, typical of many, said, “My family hates my profession. Not just my partner and children, but my parents and siblings. The insecurity despite the crushing hours is a soul-destroying combination that is not sustainable.” via The personal cost of applying for research grants | Higher Education Network | Guardian Professional."
"721","2014-05-12","2023-03-24","https://computinged.wordpress.com/2014/05/12/happy-50th-birthday-to-basic-the-programming-language-that-made-computers-personal/","A really fun article, with videos of lots of classic Basic systems running. Kemeny believed that these electronic brains would play an increasingly important role in everyday life, and that everyone at Dartmouth should be introduced to them. “Our vision was that every student on campus should have access to a computer, and any faculty member should be able to use a computer in the classroom whenever appropriate,” he said in a 1991 video interview. “It was as simple as that.” via Fifty Years of BASIC, the Programming Language That Made Computers Personal | TIME.com."
"722","2014-05-16","2023-03-24","https://computinged.wordpress.com/2014/05/16/those-who-say-code-does-not-matter-are-wrong/","Bertrand Meyer is making a similar point to Amy Ko’s argument about programming languages. Programming does matter, and the language we use also matters. Meyer’s goes on to suggest that those saying that “code doesn’t matter” may be just rationalizing that they continue to live with antiquated languages. It can’t be that the peak of human-computer programming interfaces was reached back in New Jersey in the 1970’s. Often, you will be told that programming languages do not matter much. What actually matters more is not clear; maybe tools, maybe methodology, maybe process. It is a pretty general rule that people arguing that language does not matter are simply trying to justify their use of bad languages. via Those Who Say Code Does Not Matter | blog@CACM | Communications of the ACM."
"723","2014-05-17","2023-03-24","https://computinged.wordpress.com/2014/05/17/nsf-funding-for-junior-faculty-in-first-two-years/","Computing education (CE21) researchers are explicitly encouraged in this solicitation. It’s a nice idea to try to deal with the low success rates of NSF proposals these days. With the goal of encouraging research independence immediately upon obtaining one’s first academic position after receipt of the PhD, the Directorate for Computer and Information Science and Engineering (CISE) will award grants to initiate the course of one’s independent research. Understanding the critical role of establishing that independence early in one’s career, it is expected that funds will be used to support untenured faculty or research scientists (or equivalent) in their first two years in an academic position after the PhD. One may not yet have received any other grants in the Principal Investigator (PI) role from any institution or agency, including from the CAREER program or any other award post-PhD. Serving as co-PI, Senior Personnel, Post-doctoral Fellow, or other Fellow does not count against this eligibility rule. It is expected that these funds will allow the new CISE Research Initiation Initiative PI to support one or more graduate students for up to two years. via Computer and Information Science and Engineering (CISE) Research Initiation Initiative (CRII) (nsf14562)."
"724","2014-05-19","2023-03-24","https://computinged.wordpress.com/2014/05/19/fake-geek-guys-a-message-to-men-about-sexual-harassment/","An important message to post on the first day of the NCWIT Summit for 2014. There is a significant role for guys in making the culture better for women. Do read the whole article — it’s frightening. How do we fight this war? We stop enabling. We check ourselves and, when necessary, wreck ourselves. Do you know a guy who’s hate-following women on Twitter just to troll them? You check him. Do you know a guy who’s writing disgusting screeds to women journalists because they don’t like the same things he likes? You check him. Do you know a professional whose discourse with women in his field is loaded with gender-specific language and condescension that could enable further abuse? You check him. Are your Twitter followers identifying you as a sympathetic ear for their sexist views? You check yourself. Is your website’s message board a cesspool of ignorance and hate? You check it like you actually give a damn. Do you know a guy who’s sending rape threats to women for any reason? Oh, you report that guy. Let me make it plain: A woman objecting to the content of a comic book — even if you think she’s dead wrong — does not rise to the occasion of vicious name calling and rape threats. via Fake Geek Guys: A Message to Men About Sexual Harassment."
"725","2014-05-20","2023-03-24","https://computinged.wordpress.com/2014/05/20/technologys-man-problem-an-important-issue-for-ncwit/","I’m speaking today at the NCWIT Summit, and this is a good article from NYTimes to re-read before the summit: After the Titstare presentation, a commenter calling himself White_N_Nerdy wrote on Reddit, “I’m honestly trying to understand why anyone says that females are ‘needed’ in the tech industry.” He continued: “The tech community works fine without females, just like any other mostly male industry. Feminists probably just want women making more money.” Online gathering spots for engineers, like Reddit, Hacker News and 4chan, where people often post anonymously, can feel like hostile territory for women. via Technology’s Man Problem – NYTimes.com."
"726","2014-05-21","2023-03-24","https://computinged.wordpress.com/2014/05/21/boycotting-a-science-conference-because-program-is-all-male/","Salon.com wrote about the boycott that’s emerging because a major chemistry conference is all male. The linked article, from the President of the University of Cincinnati, talks about what’s needed to retain and grow women in STEM. I wouldn’t have guessed that we’d have this problem in Chemistry before Computer Science. The recent threat to boycott an upcoming international chemistry conference because of its all-male speaking program reminds us how far we still have to go when it comes to women in the science, technology, engineering and math (STEM) fields. The challenge remains that many STEM professions remain male-dominated, especially in academia. via Campuses must create formal networks for female STEM professors (essay) | Inside Higher Ed."
"727","2014-05-26","2023-03-24","https://computinged.wordpress.com/2014/05/26/a-stunningly-beautiful-connection-between-music-and-computing-jason-freemans-grow-old/","My eldest child graduated from college this last year, and I’m feeling my first half-century these days. That may be why I was particularly struck by the themes in Jason Freeman’s beautiful new work. I recommend visiting and reading the page, and you’ll get why this is so cool, even before you listen to the music. It’s not live coding — it’s kind of the opposite. It’s another great example of using music to motivate the learning of computing. Why can’t my music grow old with me? Why does a recording sound exactly the same every time I listen to it? That makes sense when recordings are frozen in time on wax cylinders or vinyl or compact discs. But most of the music I listen to these days comes from a cloud-based streaming music service, and those digital 1s and 0s are streamed pretty much the same way every time. In this world of infinitely malleable, movable bits, why must the music always stay the same? From day to day and year to year, I change. I bring new perspectives and experiences to the music I hear. Can my music change with me? This streaming EP is my attempt to answer these questions. Once a day, a simple computer program recreates each track. From one day to the next, the changes in each track are usually quite subtle, and you may not even notice a difference. But over longer periods of time — weeks, months, or years — the changes become more substantial. So when you return to this music after a hiatus, then it, like you, will have changed. via Jason Freeman: Grow Old."
"728","2014-05-28","2023-03-24","https://computinged.wordpress.com/2014/05/28/adding-coding-to-the-curriculum-considering-the-claims/","There are lots of claims about the benefits of introducing computing early. This article in the NYTimes (even just the quote below) considers several of them: We do have to make our message clear, and it should be a message that’s supported by research. If the computing education policy-and-PR machine ignores the research, we’re showing more disrespect for the field of computing education research and makes it even harder to establish reforms. Around the world, students from elementary school to the Ph.D. level are increasingly getting acquainted with the basics of coding, as computer programming is also known. From Singapore to Tallinn, governments, educators and advocates from the tech industry argue that it has become crucial to hold at least a basic understanding of how the devices that play such a large role in modern life actually work. Such knowledge, the advocates say, is important not only to individual students’ future career prospects, but also for their countries’ economic competitiveness and the technology industry’s ability to find qualified workers. Exposing students to coding from an early age helps to demystify an area that can be intimidating. It also breaks down stereotypes of computer scientists as boring geeks, supporters argue. Plus, they say, programming is highly creative: Studying it can help to develop problem-solving abilities, as well as equip students for a world transformed by technology. via Adding Coding to the Curriculum – NYTimes.com."
"729","2014-05-29","2023-03-24","https://computinged.wordpress.com/2014/05/29/google-finally-discloses-its-diversity-record-and-its-not-good-everybody-else/","Google is going to take a lot of heat for these low numbers, but let’s not forget how long the computing industry has hidden and actively protected its diversity numbers. Kudos to Google for coming forward! Now, Apple, Amazon, and Facebook? (Thanks to Rick Adrion for sending me this link.) And then let’s get to work on making this better.  In an industry that has been famously guarded about its workplace diversity, Google on Wednesday disclosed its record when it comes to hiring women, African-Americans and Hispanics. The data reveals statistics that the company itself admits are too low and strikingly below other industry averages. Women comprise just 17 percent of its global tech workforce, according to data Google published on its website and released exclusively to the PBS NewsHour. When it comes to leadership, women only account for 21 percent of the top positions in the company, which has a workforce of just under 50,000 people. via Google finally discloses its diversity record, and it’s not good | PBS NewsHour."
"730","2014-06-28","2023-03-24","https://computinged.wordpress.com/2014/06/28/male-and-female-dominated-fields-gas-station-without-pumps/","Interesting post on how STEM isn’t all male-dominant, but Engineering and CS are SO male dominant, it shifts the average.  Computer science is a particularly strange case, as it has seen more fluctuation both in raw numbers of students data not shown here and gender balance than any other field. Other fields have seen large shifts in gender balance, but they have generally been gradual and nearly monotonic—not reversing course in the early 1980s. It seems to me that the biggest drops in the ratio of women in CS came at times when the overall number of students in CS was dropping like after the dot-com bubble burst in the 2000. When CS grew, the number of women grew faster than the number of men. When CS shrunk, the number of women shrunk faster than the men. Perhaps if CS education had had a steady growth, rather than the boom-and-bust cycles that have plagued it since the late 1970s, it would not have had such a mysterious rise and fall in proportion of women in the field. The boom-and-bust cycles are not driven by the real need for CS degrees, but by media hype about relatively small shortages or excesses of personnel. I believe that the demand for CS degrees has been stabler than the supply unlike most other fields, where the supply has been steady even as demand has fluctuated. via Male- and female-dominated fields | Gas station without pumps."
"731","2015-01-05","2023-03-24","https://computinged.wordpress.com/2015/01/05/first-international-conference-on-live-coding-in-july-2015/","First International Conference on Live Coding 13-15th July 2015, University of Leeds, UK http://iclc.livecodenetwork.org/ With pleasure we announce the initial call for papers and performances for the first International Conference on Live Coding, hosted by ICSRiM in the School of Music, University of Leeds, UK. This conference follows a long line of international events on liveness in computer programming; the Changing Grammars live audio programming symposium in Hamburg 2004, the LOSS Livecode festival in Sheffield 2007, the annual Vivo festivals in Mexico City from 2012, the live.code.festival in Karlsruhe, the LIVE workshop at ICSE on live programming, and Dagstuhl Seminar 13382 on Collaboration and Learning through Live Coding in 2013, as well as numerous workshops, concerts, algoraves and conference special sessions. It also follows a series of Live Coding Research Network symposia on diverse topics, and the activities of the TOPLAP community since 2004. We hope that this conference will act as a confluence for all this work, helping establish live coding as an interdisciplinary field, exploring liveness in symbolic abstractions, and understanding the perceptual, creative, productive, philosophical and cultural consequences. The proceedings will be published with ISSN, and there will also be an follow-on opportunity to contribute to a special issue of the Journal on Performance Arts and Digital Media; details will be announced soon. Timeline * Templates available and submissions system open: 8th December 2014 * Performance submissions deadline: 16th February 2015 * Paper submissions deadline: 1st March 2015 * Notification of results: 10th April 2015 * Camera ready deadline: 10th May 2015 * Conference: 13-15th July 2015 Submission categories * Long papers (6-12 pages) * Short papers (4-6 pages) * Poster/demo papers (2-4 pages) * Performances (1 page abstract and technical rider) ICLC is an interdisciplinary conference, so a wide range of approaches are encouraged and we recognise that the appropriate length of a paper may vary considerably depending on the approach. However, all submissions must propose an original contribution to Live Coding research, cite relevant previous work, and apply appropriate research methods. The following long list of topics, contributed by early career researchers in the field, are indicative of the breadth of research we wish to include: * Live coding and the body; tangibility, gesture, embodiment * Creative collaboration through live code * Live coding in education, teaching and learning * Live coding terminology and the cognitive dimensions of notation * Live language and interface design * CUIs: Code as live user interface * Domain specific languages, and the live coding ecosystem * Programming language experience design: visualising live process and state in code interfaces * Virtuosity, flow, aesthetics and phenomenology of live code * Live coding: composition, improvisation or something else? * Time in notation, process, and perception * Live coding of and inside computer games and virtual reality * Live programming languages as art: esoteric and idiosyncratic systems * Bugfixing in/as performance * Individual expression in shared live coding environments * Live coding across the senses and algorithmic synaesthesia * Audience research and ethnographies of live coding * Live coding without computers * Live coding before Live Coding; historical perspectives on live programming languages * Heritage, vintage and nostalgia – bringing the past to life with code * Live coding in public and in private * Cultural processes of live programming language design * General purpose live programming languages and live coding operating systems * Connecting live coding with ancient arts or crafts practice * Live coding and the hacker/maker movement: DIY and hacker aesthetics * Critical reflections; diversity in the live coding community * The freedom of liveness, and free/open source software Submissions which work beyond the above are encouraged, but all should have live coding research or practice at their core. Please contact us if you have any questions about remit. Contact Please email feedback and/or questions to livecodenet@gmail.com http://iclc.livecodenetwork.org/"
"732","2015-01-07","2023-03-24","https://computinged.wordpress.com/2015/01/07/on-nerd-entitlement-those-who-were-underprivileged-are-now-the-privileged/","Interesting blog post about a discussion going on with MIT Professor Scott Aaronson on his blog (see here). The point of the post linked below is that some white males may feel underprivileged, attacked because of their geekiness as kids, but are actually in-charge now. Those who felt underprivileged are now privileged and may not realize it, and that might be what’s making it so hard to change computing culture. (Later update in The Chronicle blog here.) Scott, imagine what it’s like to have all the problems you had and then putting up with structural misogyny on top of that. Or how about a triple whammy: you have to go through your entire school years again but this time you’re a lonely nerd who also faces sexism and racism. This is why Silicon Valley is fucked up. Because it’s built and run by some of the most privileged people in the world who are convinced that they are among the least. People whose received trauma makes them disinclined to listen to pleas from people whose trauma was compounded by structural oppression. People who don’t want to hear that there is anyone more oppressed than them, who definitely don’t want to hear that maybe women and people of colour had to go through the hell of nerd puberty as well, because they haven’t recovered from their own appalling nerdolescence. People who definitely don’t want to hear that, smart as they are, there might be basic things about society that they haven’t understood, because they have been prevented from understanding by the very forces that caused them such pain as children. via On Nerd Entitlement."
"733","2015-01-08","2023-03-24","https://computinged.wordpress.com/2015/01/08/slow-searching-research-about-gender-in-the-stem-workplace/","Below is just a bit of a really terrific annotated bibliography about gender in the STEM workplace — including a lot on computer science. Great resource! Science Faculty’s Subtle Gender Biases Favor Male Students by Corinne A. Moss-Racusina et al. In a study with 127 science faculty at research-intensive universities, candidates with identical resumes were more likely to be offered a job and paid more if their name was “John” instead of “Jennifer.” The gender of the faculty participating did not impact the outcome. How Stereotypes Impair Women’s Careers in Science by Ernesto Reuben et al.Men are much more likely than women to be hired for a math task, even when equally qualified. This happens regardless of the gender of the hiring manager. Measuring the Glass Ceiling Effect: An Assessment of Discrimination in Academia by Katherine Weisshaar. In computer science, men are significantly more likely to earn tenure than women with the same research productivity. [From a summary] A Study on the Status of Women Faculty in Science at MIT by the Committee on Women Faculty. Reveals significant differences in terms of the distribution of resources and rewards to faculty by gender. via Slow Searching: Research about Gender in the STEM Workplace."
"734","2015-01-09","2023-03-24","https://computinged.wordpress.com/2015/01/09/stem-closing-the-gender-gap-pearson/","Colleagues at Pearson asked me to share this announcement with you. Join Pearson and learning leaders from Higher Ed, K–12, and STEM industries in Silicon Valley to discuss strategies for closing the gender gap in STEM. We’ve partnered with Google, Code.org, Maker Ed, Girls Who Code, and the City of San Francisco to bring you lively discussions and presentations on how educators and industry leaders can work together to close the gap in STEM education and STEM careers. Event Highlights"
"735","2015-01-19","2023-03-24","https://computinged.wordpress.com/2015/01/19/new-solicitation-for-nsf-stem-c-emphasis-on-k-12-and-integration-with-other-stem-disciplines/","The new NSF STEM-C solicitation is out: See http://www.nsf.gov/pubs/2015/nsf15537/nsf15537.htm. The introduction to the new solicitation is visionary and speaks of the power of computing in STEM and for all students. Here’s just the first paragraph: The STEM + Computing (STEM+C) Partnerships program seeks to advance a 21st century conceptualization of education in science, technology, engineering and mathematics (STEM) that includes computing. The “+ Computing” notation emphasizes that computing is integral to the practice of all the other STEM disciplines. In this solicitation, computing refers to the whole set of fundamental concepts and skills that will allow students to creatively apply and adapt computation across a range of application domains, to “bend digital technology to one’s needs, purposes, and will.” The focus of this solicitation is primarily on integration of computing with other STEM education disciplines, and secondarily, on computing education in K-12 (including teachers). The prioritization is pretty clear from the budget limits: The maximum total budget for Track 1: Integration of Computing in STEM Education awards is $2.5 million for Design and Development awards, $1.25 million for Exploratory Integration awards, and $250,000 for Field-Building Conferences and Workshops. The maximum total budget for Track 2: Computing Education Knowledge and Capacity Building awards is $600,000 for Research on Education and Broadening Participation awards and $1.0 million for CS 10K awards. You can get up to $1.25M USD to explore integration of computing in STEM ($2.5M to design and develop), but at most $1M to put computing into schools and at most $600K to do research on computing education and broadening participation. We might argue about the ratios, but in the end, both tracks and all the types of proposals have enough funding to do important work that needs to happen."
"736","2015-01-20","2023-03-24","https://computinged.wordpress.com/2015/01/20/15-higher-ed-technology-predictions-for-2015-page-2-of-2-ecampus-news-ecampus-news-2/","There are lots of these kinds of lists around the beginning of a new year, but I thought that these predictions were interesting. I’m betting that the first one below is right, but I know a lot of people are betting against it. I’m seeing the second one in my discussions with K12 education policymakers in states. They want their students to come out with “job skills,” which is hard to do with an introduction to computing designed for students who have no previous background. 10. Online learning will grow modestly (Eduventures): The company predicts that enrollment in wholly online degree programs will be modest this year, with only 2 percent growth due mostly to uncertainty and indecision among adult learners. At the same time, the percentage of colleges entering the online market will grow very little, if at all. “Growth will be stunted due to increased regulatory concerns such as state authorization, competition from large adult-serving providers, and enrollment strategies incapable of keeping pace with the savvyness of today’s adult learners,” it stated. “Institutions will back away from online programming to focus on blended learning and improving quality and access for traditional age students.” 11. Outcomes will dominate (Eduventures): Eduventures research shows that in 2013, “career preparation” surpassed “academic strength” as the top priority for both students and parents in selecting a school. Adding to parent and student concerns, the government has increased its focus on this issue, including the possibility of Title IV funding consequences. “Look for schools to become more aggressive in differentiating themselves in reporting outcomes data in 2015,” said the company. via 15 higher-ed technology predictions for 2015 – Page 2 of 2 – eCampus News | eCampus News | 2."
"737","2015-01-22","2023-03-24","https://computinged.wordpress.com/2015/01/22/call-for-papers-for-icer-2015-in-omaha-due-april-13/","null"
"738","2015-01-23","2023-03-24","https://computinged.wordpress.com/2015/01/23/what-are-the-barriers-and-supports-to-intro-cs-in-school-basics-the-center-for-elementary-mathematics-and-science-education/","I’m an advisor on the BASICS project at U. Chicago — the Barriers and Supports to Introductory CS in schools. I visited them in December after our semester ended. The link below goes to a page with some of the first results of the project. Computer Science teachers in Chicago and Washington, DC completed a questionnaire in Spring 2014 that, among other things, asked them to identify the three biggest supports for and barriers to their computer science classes. All of the teachers were using Exploring Computer Science (ECS) instructional materials. via BASICS – The Center for Elementary Mathematics and Science Education. They have links on the page referenced above to the top barriers and supports that they heard from ECS teachers in those districts. Top barrier for teachers: their own lack of self-efficacy. Top support for teachers: professional development."
"739","2015-01-24","2023-03-24","https://computinged.wordpress.com/2015/01/24/new-international-conference-research-on-equity-and-sustained-participation-in-engineering-computing-and-technology-respect/","Shared from Tiffany Barnes, with her permission. The engagement of diverse people in an endeavor drives creativity and innovation, but in computing and STEM fields, broadening participation is also a matter of equity. It is critical that we, as the computer science education community, improve inclusion of diverse people, especially those from underrepresented populations. Globally, underrepresentation differs regionally and culturally by gender, race, ethnicity, socio-economic advantage, physical, mental, and cognitive ability, and LGBT status. The need to support diversity becomes even more important for disenfranchised groups with limited legal rights and protections. Lest we think that this is a minority-only issue, consider developing countries or the poor of every nation, with little to no access to education and resources, where computing could help build the economy, health, education, and financial systems. We invite you to join IEEE Computer’s newly-established Special Technical Community on Broadening Participation (stcbp.org) to create a collective global strategy to research and improve participation and inclusion in computing. Research on Equity and Sustained Participation in Engineering, Computing, and Technology (RESPECT) is the focus of our first international meeting. Co-located with the STARS Celebration in Charlotte, NC, just after ICER, RESPECT 2015 will be a premier research conference with research papers, experience reports (due March 27), posters and panels (due June 5). We invite all interdisciplinary work that draws on computer science, education, learning sciences, and the social sciences to help us build a strong community, theory, and foundation for broadening participation research. We hope you will get involved today by joining stcbp.org, submitting to stcbp.org/RESPECT2015, attending RESPECT 2015 August 13-14, or contacting the STC-BP chairs Tiffany Barnes, tiffany.barnes@gmail.com, or George K. Thiruvathukal, gkt@cs.luc.edu."
"740","2015-01-26","2023-03-24","https://computinged.wordpress.com/2015/01/26/fourth-edition-of-python-media-computation-released-today/","According to Amazon, the Fourth Edition of the Python Media Computation book is released today (see page here). That’s the new cover above. I’ve been working on the 4th edition for most of the summer. Some of the bigger changes are: We’re working on teacher resources now. Currently in development (aiming to have ready in the next couple months) the Powerpoint slides for each chapter of the book, a collection of all the code in the book for teachers, and a solutions manual for every end of chapter problem. These are surprisingly controversial. There are lots (mostly University) teachers who think that I shouldn’t provide any of these resources — teachers should be able to develop all of those themselves. Most of the high school and community college teachers I know appreciate having them. In searching for the Fourth Edition on Amazon, I read the comments on the Third Edition (see here). Authors probably shouldn’t read the reviews of the book — they’re painful. But I did, and even worse, I actually responded. Here is a quote from one, titled “False Advertising.” Its biggest problem: false advertising. This is NOT a book on Python, it’s about JYTHON – A Java based imitation of Python. Why? Well, there’s some pretty software, available to download, which uses the the JRE. The author chose to stick with this “easy learning environment” and basically cripple anyone wanting to write Python code for Blender, Maya, Android etc. You may learn to program from this text, but don’t expect a trouble-free life when you get exposed to the real language. Here was my response: Everything in this book is useful when wanting to write Python code for Blender, Maya, Android, etc. This is an introductory book on data, loops, conditionals, and objects. Those parts of Python are identical in this book and in the Python that you’ll use in Blender, Maya, and Android. For introductory Python programming, Jython and CPython are exactly the same. I was surprised to see the original commenter responded. His point was that some kinds of friction, in dealing with the “real world” is desirable: As an introductory book, I would expect a section on how to install and configure Python. Written covering Windows, Linux, and the Mac OSX. There is no such section; the whole point of Jython is to “hide” this technical level. Which is fine for learning loops etc. but leaves a student lost when encountering Python out in the real world. It’s an interesting perspective, kind of a “rugged individualism” approach. I do agree with the notion of desirable difficulties in learning (see more here), but don’t agree that installing Python is one of those. Do most Python programmers install Python themselves, or is it already installed on the servers, computers, etc. that they will be programming? Is it a critical part of learning a language? Is it significantly different than installing JES (try that here)? Are you “lost” and unable to program if you don’t install it yourself first? A sad addendum to this story: Our Media Computation data structures book (see the Amazon page here) has gone out of print. The publisher didn’t notify us. Someone approached us about using the book, and was told that it was out of print. When I queried Pearson, they admitted it. More, because it’s not out of print everywhere (I guess it’s available in some non-US markets), Pearson won’t let us post the content anywhere. It’s a dead book now."
"741","2014-09-18","2023-03-24","https://computinged.wordpress.com/2014/09/18/jes-5-0-now-released-new-jython-faster-updated-watcher-with-jython-music/","Thanks to Matthew for pulling this all together! Matthew’s effort was supported by NSF REU funding."
"742","2015-01-28","2023-03-24","https://computinged.wordpress.com/2015/01/28/why-the-maker-movement-is-important-for-schools-outside-the-skinner-box/","I liked Gary Stager’s argument in the post below about what’s important about the Maker Movement for schools: it’s authentic in a physical way, and it contextualizes mathematics and computing in an artistic setting. For too long, models, simulations, and rhetoric limited schools to abstraction. Schools embracing the energy, tools, and passion of the Maker Movement recognize that, for the first time in history, kids can make real things – and, as a result, their learning is that much more authentic. Best of all, these new technologies carry the seeds of education reform dreamed of for a century. Seymour Papert said that John Dewey’s educational vision was sound but impossible with the technology of his day. In the early- to mid-20th century, the humanities could be taught in a project-based, hands-on fashion, but the technology would not afford similarly authentic opportunities in mathematics, science, and engineering. This is no longer the case. Increasingly affordable 3-D printers, laser cutters, and computer numerical control (CNC) machines allow laypeople to design and produce real objects on their computers. The revolution is not in having seventh-graders 3-D print identical Yoda key chains, but in providing children with access to the Z-axis for the first time. Usable 3-D design software allows students to engage with powerful mathematical ideas while producing an aesthetically pleasing artifact. Most important, the emerging fabrication technologies point to a day when we will use technology to produce the objects we need to solve specific problems. via Outside the Skinner Box."
"743","2015-01-30","2023-03-24","https://computinged.wordpress.com/2015/01/30/mit-computer-scientists-demonstrate-the-hard-way-that-gender-still-matters-wired/","I met Elena Glassman at the ICER Doctoral Consortium in 2013. Her article below on her “Ask Me Anything” session on Reddit is an interesting commentary on gender bias in computing. As it turned out, people were extremely interested in our AMA, though some not for the reasons we expected. Within an hour, the thread had rocketed to the Reddit front page, with hundreds of thousands of pageviews and more than 4,700 comments. But to our surprise, the most common questions were about why our gender was relevant at all. Some people wondered why we did not simply present ourselves as “computer scientists.” Others questioned if calling attention to gender perpetuated sexism. Yet others felt that we were taking advantage of the fact that we were women to get more attention for our AMA. The interactions in the AMA itself showed that gender does still matter. Many of the comments and questions illustrated how women are often treated in male-dominated STEM fields. Commenters interacted with us in a way they would not have interacted with men, asking us about our bra sizes, how often we “copy male classmates’ answers,” and even demanding we show our contributions “or GTFO [Get The **** Out]”. One redditor helpfully called out the double standard, saying, “Don’t worry guys – when the male dog groomer did his AMA (where he specifically identified as male), there were also dozens of comments asking why his sex mattered. Oh no, wait, there weren’t.” via MIT Computer Scientists Demonstrate the Hard Way That Gender Still Matters | WIRED."
"744","2015-01-31","2023-03-24","https://computinged.wordpress.com/2015/01/31/genderit-conference-at-penn-papers-due-feb-20/","GenderIT 2015 Advancing Diversity Join us April 24-25 at the University of Pennsylvania! http://www.genderit2015.info/ In IT and technology-related fields at large, diversity has been a longstanding and troubling issue. Particularly, girls, women and minorities continue to be underrepresented in these fields; few engage in STEM-related classes or enter IT professions. What can we do to address these challenges? What do we know about interests, images, and intersections around gender, race, and IT? How can we design K-12 education and craft career trajectories so that more girls and minorities express interest and participate in IT? What are some promising and innovative designs and interventions? How are trends in related fields, such as gaming, connected to larger IT developments? In GenderIT 2015, we will set out to examine and discuss these issues and more around three focal areas: – Promoting computer science education in K-12 – Understanding developments around gender and gaming – Developing new interventions and applications for STEM Call for Papers and Posters We invite researchers, designers, and practitioners to participate in the conference through contributions from your own work. Relevant topics include: + gender specific aspects of IT appropriation and use + the role of the new media for learning + gender awareness in computer science curricula and IT trainings + the relation of gender and IT in education, training, and work + the significance of gender for career choices and qualification paths in the IT domain We welcome submissions following ACM format in the form of long papers (8 pages), short papers (4 pages) or posters (2 pages). SUBMISSION DATES ▪ Submissions: February 20, 2015 ▪ Notifications: March 5, 2015 ▪ Camera-Ready: March 20, 2015 SUBMISSION FORMATS ▪ Paper (long and short): A long paper should consist of no more than 8 pages; a short paper should be no more than 4 pages. This is including figures, references and appendices, and an abstract of no more than 150 words. Longer submissions will automatically be rejected. The submission must be original; it cannot be published or be in a review process elsewhere. Long and short papers will be published in the ACM Digital Library. ▪ Poster: Posters are for new work, preliminary findings, designs or educational projects. They are accompanied by a two-page abstract. This text should articulate out the aspect of the work that is apt to lead to productive discussion with conference participants in the poster session. Posters will be published in the in the ACM Digital Library. All submissions must adhere to the formatting guidelines in the ACM proceedings template. All submissions will be blind-reviewed. Please prepare your submission accordingly. SUBMISSION SYSTEM Please submit your papers for GIT 2015 here. The paper submission system is supported by Easy Chair and requires the creation of an “author” account for all submissions."
"745","2017-01-09","2023-03-24","https://computinged.wordpress.com/2017/01/09/computer-science-added-to-us-dept-of-ed-civil-rights-data-collection/","From Ruthe Farmer in White House OSTP. It’s great that we’re going to get more data about CS Education in the United States. Should it be at the federal level, when decisions about K-12 in the US are at the state level? I’d like to get data collected at a level that impacts decision-making. How do we get states to track CS education? Will the federal government’s effort be a prompt to get the states to track who takes CS classes, where they’re offered, and where they’re not? Computer science has been added to the proposed 2017-18 Dept of Ed Civil Rights Data Collection. The proposed new collection instruments are open for public comment through 2/28/17. You can view the documents here: https://www.regulations.gov/document?D=ED-2016-ICCD-0147-0003 (you will find the proposed data collection instruments on pages 29-31 of the doc titled A-2_CRDC_Data_Groups_12_23_16) You can add comments here: https://www.regulations.gov/docket?D=ED-2016-ICCD-0147 Comments from the public are critical to inclusion of this new data request, as the overall push is to lessen the reporting load for schools. However, we felt it was necessary to add computer science as a separately tracked subject to obtain a better picture of total enrollment nationally. Please share this opportunity to comment with your networks. Regards, Ruthe A. Farmer | Senior Policy Advisor for Tech Inclusion Office of Science & Technology Policy Executive Office of the President "
"746","2017-01-02","2023-03-24","https://computinged.wordpress.com/2017/01/02/why-the-software-industry-needs-computing-education-research/","Interesting argument from Amy Ko and Susanne Hambrusch about why we need more computing education research. To fill the available jobs with skilled software developers, learners need to actually be learning. Unfortunately, recent research shows that many students simply aren’t. For example, a 2004 study conducted across seven countries and 12 universities found that even after passing college-level introductory programming courses, the majority of students could not predict the output of even basic computer programs. In some of our research on coding bootcamps, we are seeing similar trends, with students failing to learn and failing to get jobs. If learning outcomes are as bad as these studies show, we need to be deeply concerned. Existing and new programs may be training tens of thousands of new software developers who aren’t quite good enough to get even an entry level position. This leaves the status quo of top companies fighting over top coders, leaving many jobs unfilled while they wait for more skilled developers. Worse yet, the demand for developers may be so high that they do get jobs, but write poor-quality code, putting at risk the software-based infrastructure that society increasingly needs to be robust, secure, and usable. Source: Why the Software Industry Needs Computing Education Research | The Huffington Post"
"747","2017-01-04","2023-03-24","https://computinged.wordpress.com/2017/01/04/latice-2017-in-hong-kong/","LaTiCE was announced to be in Saudi Arabia (see previous blog post), but it didn’t work out. I don’t know why. It will now be held in Hong Kong. FIRST ANNOUNCEMENT AND CALL FOR PAPERS Learning and Teaching in Computing and Engineering (LaTiCE 2017) April 20-23, 2017 Hong Kong http://www.latice-conference.org/ The Fifth International Conference on Learning and Teaching in Computing and Engineering (LaTiCE 2017) aims to create a platform towards sharing rigorous research and current practices being conducted in computing and engineering education. The previous four LaTiCE conferences have been successfully held in Macau (2013), Malaysia (2014), Taiwan (2015) and Mumbai (2016). The fifth LaTiCE conference will be held at the University of Hong Kong, from April 20th to 23rd, 2017. LaTiCE 2017 is jointly organized by the University of Hong Kong, Hong Kong, and the Uppsala Computing Education Research Group (UpCERG), Uppsala University, Sweden. It is technically co-sponsored by the Special Technical Community for Education Research (STC Education), which is an IEEE Computer Society initiative to connect those interested in all forms of educational research and pedagogy in the field of computing and engineering. The conference is preceded by a doctoral consortium on April 20th. The conference is a gathering for presentations of research papers, practice sharing papers, work-in-process papers, and display of posters and demos. MAIN CONFERENCE THEMES – Computer Science and Engineering Education research – Secondary School Computer Science – ICT in Education CONFERENCE SUB-THEMES – Computing and engineering education research, theories, and methodologies – Cross-cultural aspects of computing and engineering education – Educational technology, software, and tools – Teaching innovations, best practices, experience sharing in computing and engineering education – Course module design, proficiency assessment, and module cross-accreditation – Improving student engagement in computing and engineering – Collaborative learning in computing and engineering- team and project skills – “Flipped” classrooms and active learning – Work-integrated learning and project-based learning PAPER SUBMISSION Research Papers Research papers (6-8 pages) present original, unpublished work relevant to the conference themes. Papers may be theoretical or based on empirical investigations. Papers are evaluated with respect to their theoretical contribution and the quality and relevance of the research. Practice / Work-in-progress Papers Practice / work-in-progress papers (3-5 pages) present original, unpublished practice sharing or work-in-progress work with a focus on innovative and valued practices within specific institutions. They can present preliminary results or raise issues of significance to the discipline. Poster/Demo Poster/demo (2 pages abstract) should present innovative ideas for work in the early stages related to research, teaching practice, or tools. Demonstration of tools should stress the methodology and can include some hands-on work for participants. Papers should be submitted to the EasyChair review management system. All papers will undergo double-blind peer review. Conference content will be submitted for inclusion into IEEE Xplore as well as other Abstracting and Indexing (A&I) databases. All papers should follow the IEEE Xplore Conference Publishing formatting guidelines. IMPORTANT DATES Paper submission: January 15th, 2017 Notification of acceptance: February 15th, 2017 Camera-ready deadline: March 1st Author registration deadline: March 1st Doctoral consortium: April 20th LaTiCE conference: April 21st-23rd PROGRAMME COMMITTEE CO-CHAIRS Roger Hadgraft, University of Technology, Sydney, Australia, Roger.Hadgraft@uts.edu.au James Harland, RMIT University, Australia, james.harland@rmit.edu.au"
"748","2017-01-13","2023-03-24","https://computinged.wordpress.com/2017/01/13/california-developing-computer-science-standards/","California is now starting a process of developing computer science standards for K-12, explicitly using the new K-12 CS Framework. California is huge and has a huge influence on the rest of the country’s education policy and practice. This will likely be one of the most important outcomes of the K-12 CS Framework process. Computer Science Content Standards Development The CDE, Instructional Quality Commission, and State Board of Education (SBE) are commencing the process for developing new California computer science content standards. Per California Education Code. Section 60605.4, “on or before July 31, 2019, the Instructional Quality Commission shall consider developing and recommending to the SBE computer science content standards for kindergarten and grades 1 to 12, inclusive, pursuant to recommendations developed by a group of computer science experts.” Information and updates concerning the development of computer science content standards for California public schools will be posted here. Source: Computer Science Education – Content Standards (CA Dept of Education)"
"749","2017-01-16","2023-03-24","https://computinged.wordpress.com/2017/01/16/insightful-report-on-the-state-of-ap-cs-in-california/","Insightful new report from ACCESS-CA on who is taking AP CS in California and on the challenges (quoted below): Despite the strong outlook for the technology economy in California, there are major challenges in meeting the growing demand for skilled technology workers and preparing Californians to participate in the workforce of the future: The lack of computer science standards, courses, and teachers and the lack of alignment between computing pathways and workforce needs. Roughly 65% of high schools in California offer no computing classes and the state has yet to develop a statewide plan for computing education. The lack of diversity in the computing education pipeline and within the technology sector, particularly given the rapidly-increasing diversity of California’s population. 60% of California’s student population is Latinx or African American, yet these students comprise just 16% of students taking AP CS A and 15% of the technology workforce From COMPUTER SCIENCE IN CALIFORNIA’S SCHOOLS: 2016 AP CS Results and Implications"
"750","2017-01-18","2023-03-24","https://computinged.wordpress.com/2017/01/18/power-law-of-practice-in-software-implementation-does-this-explain-the-w-going-away/","I wonder if this result explains why the second semester students in Briana’s studies (see previous blog post) didn’t have the “W” effect. If you do enough code, you move down the power law of practice, and now you can attend to things like context and generating subgoal labels.  Different subjects start the experiment with different amounts of ability and past experience. Before starting, subjects took a multiple choice test of their knowledge. If we take the results of this test as a proxy for the ability/knowledge at the start of the experiment, then the power law equation becomes (a similar modification can be made to the exponential equation):  That is, the test score is treated as equivalent to performing some number of rounds of implementation). A power law is a better fit than exponential to this data (code+data); the fit captures the general shape, but misses lots of what look like important details. Source: The Shape of Code » Power law of practice in software implementation"
"751","2016-06-03","2023-03-24","https://computinged.wordpress.com/2016/06/03/growing-cer-to-critical-mass-at-uno-and-ucsd/","I recently posted a piece about my personal plans for the future, and I talked about how great it would be to be at a place where there were three or more CS Ed faculty — a critical mass. Kevin rightly called me out on that in the comments, suggesting that it would be hard to get more than a couple Computing Education researchers in a US CS department. (Outside the US, there are multiple institutions with critical mass CER communities, including U. Kent at Canterbury and U. Adelaide.) With this year’s hires, there are now two US campuses with that kind of depth! In both cases, they’re avoiding the problem Kevin describes by spreading across multiple departments, not just in CS. University of Nebraska at Omaha: I knew that my PhD student, Briana Morrison (dissertation proposal is described here, and her award-winning ICER paper is described here) was joining (my former student) Brian Dorn (here’s a post on his dissertation) in the CS department at UNO. Then I learned that Michelle Friend (whose work with middle school girls in CS was presented at ICER 2013 and mentioned in this post) just finished her PhD at Stanford is also joining UNO in teacher education. They are well-situated to become a (the?) major player in research on CS teacher professional development. University of California – San Diego: Leo Porter (winner of many SIGCSE and ICER best paper awards, including work described in this post) is in CS, Christine Alvarado (who was key to the growth of women in computing at Harvey Mudd), Scott Klemmer (who gave the keynote at ICER 2012) is in the Design Lab, and Beth Simon (whom still probably has the most ICER publications of anyone) has just returned to UCSD (from Coursera) to join Education. And now, Philip Guo just announced that he’s joining UCSD in Cognitive Science. Philip built the Python Tutor that we use in our ebooks, blogs frequently on CS Ed issues, and has been publishing a ton recently (including four papers at VL/HCC last year) on issues related to learning programming. While I’m jealous that I’m not part of a critical mass CER group, it’s a great thing for the field — more students, more CS teachers, more development and evaluation of interventions and curricula, more answers for the growing demand for computing education research, and more attention to the issues of computing education."
"752","2017-01-20","2023-03-24","https://computinged.wordpress.com/2017/01/20/a-review-of-one-of-my-papers-cognitive-apprenticeship-collins-brown-newman/","I drew on Cognitive Apprenticeship a lot in my dissertation — so much so that Carl Berger asked me at my proposal, “Are you testing Cognitive Apprenticeship as a model?” I had no idea how to respond, and 25 years later, I still don’t. How do you test a conceptual framework? Cognitive apprenticeship, like situated learning, starts from the assumption that apprenticeship is a particularly effective form of education. Then it asks, “How do you offer an apprenticeship around invisible tasks?” What I like about the essay linked below is that it places cognitive apprenticeship in a broader context. Apprenticeship isn’t always the best option (as discussed in the post about the Herb Simon paper). Active listeners or readers, who test their understanding and pursue the issues that are raised in their minds, learn things that apprenticeship can never teach. To the degree that readers or listeners are passive, however, they will not learn as much as they would by apprenticeship, because apprenticeship forces them to use their knowledge. Moreover, few people learn to be active readers and listeners on their own, and that is where cognitive apprenticeship is critical–observing the processes by which an expert listener or reader thinks and practicing these skills under the guidance of the expert can teach students to learn on their own more skillfully. Source: Cognitive Apprenticeship (Collins, Brown, Newman) | Reading for Pleasure"
"753","2017-01-23","2023-03-24","https://computinged.wordpress.com/2017/01/23/scientists-looking-at-programmers-brains-see-more-language-than-mathematics-the-neuroscience-of-programming/","I’m not convinced that our ability to image brains is actually telling us much about cognition yet. I did find this result surprising, that our understanding of programming languages seems more linguistic than mathematical Scientists are finding that there may be a deeper connection between programming languages and other languages then previously thought. Brain-imaging techniques, such as fMRI allow scientists to compare and contrast different cognitive tasks by analyzing differences in brain locations that are activated by the tasks. For people that are fluent in a second language, studies have shown distinct developmental differences in language processing regions of the brain. A new study provides new evidence that programmers are using language regions of the brain when understanding code and found little activation in other regions of the brain devoted to mathematical thinking. Source: Scientists Begin Looking at Programmers’ Brains: The Neuroscience of Programming | Huffington Post"
"754","2017-01-27","2023-03-24","https://computinged.wordpress.com/2017/01/27/how-the-tech-sector-could-move-in-one-direction-to-get-more-women-in-computing/","Thanks to Greg Wilson for sending this to me. It takes a while to get to the point about computing education, but it’s worthwhile. The notion is related to my post earlier in the month about engagement and motivation.  I’d been socialised out of using computers at high school, because there weren’t any girls in the computer classes, and it wasn’t cool, and I just wanted to fit in. I wound up becoming a lawyer, and spending the better part of twenty years masquerading as someone who wasn’t part of the “tech” industry, even though basically all of my time was spent online. And I can’t begin to tell you how common it is. So what if your first experience of “code” is cutting and pasting something to bring back replies because Tumblr took them away and broke your experience of the site. Is that any more or less valid than any dev cutting and pasting from Stack Exchange all day long?What if your first online experiences were places like Myspace and Geocities. Or if you started working with WordPress and then eventually moved into more complex themes and then eventually into plugin development? Is that more or less valid than the standard “hacker archetype”? Aurynn gave a great talk recently about the language we use to describe roles in tech. How “wizards” became “rockstars” and “ninjas”. But also, and crucially, how we make people who haven’t followed a traditional path feel excluded. Because they haven’t learnt the “right” programming language, or they haven’t been programming since they were four, or because, god forbid, they use the wrong text editor. Source: How the tech sector could move in One Direction — Sacha Judd"
"755","2017-01-30","2023-03-24","https://computinged.wordpress.com/2017/01/30/higher-education-should-be-about-more-than-lectures-what-students-do-is-more-important-than-what-they-hear/","I was reminded of this work by Ken Koedinger in a recent faculty meeting focusing on Georgia Tech’s future strategic directions in education. We got to considering the quality of different courses, and the analysis centered around “materials” (e.g., slides, textbook), “lectures” (the dynamic presentation of the materials), and “assessment” (e.g., exams and homework). That feels like the wrong set of categories to me. The most important category is “What students do to learn.” “Lectures” simply aren’t an important part of student learning. So it was difficult for me to open my mind to fresh data analysis, from Professor Ken Koedinger of Carnegie Mellon University, which adds more weight to the argument that lectures aren’t an effective way to learn, despite our nostalgic memories of enjoying them. Koedinger didn’t study live lectures, but recorded ones that were part of a free online psychology class produced by the Georgia Institute of Technology. He and a team of four Carnegie Mellon researchers mined the data from almost 28,000 students who took the course over the Coursera platform for Massive Open Online Courses (MOOCs). They found that video lecturers were the least effective way to learn. Students who primarily learned through watching video lectures did the worst both on the 11 quizzes during the 12-week course and on the final exam. Students who primarily learned through reading, or a combination of reading and video lectures, did a bit better, but not much. The students who did the best were those who clicked on interactive exercises. For example, one exercise asked students to click and drag personality factors to their corresponding psychological traits. A student would need to drag “neuroticism” to the same line with “calm” and “worrying,” in this case. Hints popped up when a student guessed wrong. Source: Did you love watching lectures from your professors? – The Hechinger Report"
"756","2016-12-12","2023-03-24","https://computinged.wordpress.com/2016/12/12/if-you-really-want-a-diverse-workforce-why-not-go-where-there-is-diversity/","Nick Black, brilliant GT alum and (now former) Google engineer, says it like he sees it. His critique of Google and their efforts to improving diversity extend to most of Silicon Valley. If you really want a diverse workforce, open offices where there’s diversity. Nick’s analysis (and I encourage you to read the whole post below) talks about the density of middle class Black workers. He doesn’t consider where there are Black workers who know computing. Computing education is still pretty rare in the US. Let’s use AP CS exam-taking as a measure of where there is CS education. In Michigan last year, there were 19 Black AP CS exam-takers. 11 in Missouri. None in Mississippi. There are middle class Black families in these states. They may not be getting access to CS education. Google talks endlessly about diversity, and spends millions of dollars on the cause. My NYC office lends its prodigiously expensive square feet to Black Girls Code. We attempt to hook the recruiting pipeline up to HBCUs. We tweet about social justice and blog about the very real problem of racial inequality in America. Noble endeavors, all. It’s too bad that they’re not taking place where black people actually, you know, live. According to census.gov’s data as of 2016, Mountain View is 2% black. In 2010, the Bay Area Census Project recorded 1,468 blacks in MTV. I saw more black people than that crossing Peachtree Street today. census.gov reports, as of 2010, blacks making up 25.1% of NYC, 9.6% of Los Angeles, and 6.1% of famously liberal San Francisco. census.gov does not provide data for Dublin or Zürich, but we can make some reasonable assumptions about those other largest Google offices, n’est-ce pas? And let’s be honest — I doubt much of that 25.1% of NYC is centered around Chelsea.  Atlanta’s a bit down from 67% in 1990, but 54% ain’t so bad. Source: A dispatch from Terminus – dankwiki, the wiki of nick black"
"757","2016-12-09","2023-03-24","https://computinged.wordpress.com/2016/12/09/making-choices-in-state-computing-education-policy-towards-csforall/","At the ECEP Summit, I sat with the team from North Carolina as they were reviewing data that our evaluation team from Sagefox had assembled. It was fascinating to work with them as they reviewed their state data. I realized in a new way the difficult choices that a state has to make when deciding how to make progress towards the CS for All goal. In the discussion that follows, I don’t mean to critique North Carolina in any way — every state has similar strengths and weaknesses, and has to make difficult choices. I just spent time working with the North Carolina team, so I have their numbers at-hand. North Carolina has 5,000 students taking CS in the state right now. That was higher than some of the other states in the room. I had been sitting with the Georgia state team, and knew that Georgia was unsure if we have even one full-time CS teacher in a public high school in the whole state. The North Carolina team knew for a fact that they had at least 10 full-time high school CS teachers. Some of the other statistics that Sagefox had gathered: Given all of this, if you wanted to achieve CS for All, where would you make a strategic investment? The problem is that you can’t do all of these things. Each of these is expensive. You can really only go after one goal at a time. Which one first? It’s a hard choice, and we don’t have enough evidence to advise which is likely to pay off the most in the long run. And you can’t achieve all of the goal all at once — as I described in Blog@CACM, you take incremental steps. These are all tough choices."
"758","2017-02-27","2023-03-24","https://computinged.wordpress.com/2017/02/27/googles-brief-on-k-12-cs-experiences-of-black-students-in-the-us-for-black-history-month/","For Black History Month, the Google K-12 Education Outreach Team has released a 1 sheet brief that focuses exclusively on the K-12 CS experiences of Black students in the U.S. and provides specific recommendations as informed by our Diversity Gaps in Computer Science report. Computer science (CS) education is critical in preparing students for the future. CS education not only gives students the skills they need across career fields, but it also fosters critical thinking, creativity, and innovation. This summary highlights the state of CS education during 2015–16 for Black students in 7th–12th grade, a group less likely to take the AP Computer Science Exam and with a lower pass rate on it compared to other racial groups. See report here."
"759","2013-02-19","2023-03-24","https://computinged.wordpress.com/2013/02/19/taming-the-monolith-refactoring-for-an-open-source-hypercard/","LiveCode had an earlier blog piece on how they want to implement “Open Language” so that the HyperTalk syntax could be extended. This piece (linked below) goes into more detail and is an interesting history of how LiveCode evolved from HyperCard, and how they plan to refactor it so that it’s extensible by an open source community. LiveCode is a large, mature software product which has been around in some form for over 20 years. In this highly technical article, Mark Waddingham, RunRev CTO, takes us under the hood to look at our plan to modularize the code, making it easy for a community to contribute to the project. The project described in this post will make the platform an order of magnitude more flexible, extensible and faster to develop by both our team and the community. Like many such projects which are developed by a small team (a single person to begin with – Dr Scott Raney – who had a vision for a HyperCard environment running on UNIX systems and thus started MetaCard from which LiveCode derives), LiveCode has grown organically over two decades as it adapts to ever expanding needs. With the focus on maintenance, porting to new platforms and adding features after all this time evolving we now have what you’d describe as a monolithic system – where all aspects are interwoven to some degree rather than being architecturally separate components. via Taming the Monolith."
"760","2016-11-14","2023-03-24","https://computinged.wordpress.com/2016/11/14/we-will-all-code-but-few-will-be-professional-software-engineers-disagree-with-quartz/","I disagree with the claim below “In the future, everyone is going to be a software engineer, but only a few will learn how to code,” but we need a better definition of what it means to “code” and to “program” (as discussed with respect to recent ITICSE 2016 papers). If you’re using tools like Hypercard (“low-code” platforms), isn’t that still programming? It’s certainly more than the no loops, conditionals, or variables that’s often seen in elementary school students’ use of Scratch. Those tools are not software engineering tools. Just because you’re developing software doesn’t mean that you’re doing software engineering. We need a range of tools from no-code to low-code to software engineering support. It’s an insult to those who carefully engineer software to say that anyone who assembles software is an engineer. A new industry is emerging to serve the Morts of the world by designing and selling what are called no-code or low-code platforms. Companies like Caspio, QuickBase, Appian, and Mendix are creating visual interfaces that enable people to essentially snap together blocks of software, and bypass the actual lines of code underlying those blocks (skilled developers can also dive into the code). With basic training, a non-technical employee can rapidly assemble software tools that solve business problems ranging from simple database queries to applications lashing together multiple legacy enterprise applications. Forrester reports the sector earned $1.7 billion in 2015 and is on track to bring in $15 billion by 2020 as the majority of large companies adopt “Citizen Development” policies similar to the bring-your-own-device rules. Employees will be empowered to choose tools, and even partially assemble software, to solve their own business problems without IT approval. Source: In the future, everyone is going to be a software engineer, but only a few will learn how to code. — Quartz"
"761","2016-11-11","2023-03-24","https://computinged.wordpress.com/2016/11/11/as-college-tuitions-rise-scholarships-fail-to-keep-pace-using-tuition-to-address-inequity/","This blog post isn’t about computing education. You might want to simply delete this email, or skip over this post. I’m using blog author’s prerogative to talk about things that fascinate me, even if they’re not in the title of the blog. As frequent readers know, I increasingly read and think about economics, particularly with respect to higher education. I’m going to collect in one blog post here (so that I don’t stray too far from the focus of the blog) some of the ideas and articles that have more interested me recently. From Gladwell’s Revisionist History, we know that diverting tuition from the rich kids to the poor kids is common in schools that aim to bring in more lower-SES students and address issues of social inequity. Unfortunately, this isn’t always possible. Here in Georgia, we’re forbidden by law to use tuition revenue to offer scholarships to less-advantaged children. Puts us in a rough place when competing with schools that can. Simply put, scholarship aid is not keeping pace with the rising price of college. While half of all families use a scholarship of some type to pay for college, much of that money is coming in the form of “discounts” off the tuition bill. Tuition discounts grew from $30 billion in 2007 to more than $50 billion in 2015, according to the College Board.While tuition discounts are marketed as scholarships in a student’s financial-aid package, they are not really scholarships. It’s not like a donor gave money to support a needy student with academic or musical talent. Rather, the scholarship money was diverted from another student’s tuition check. Last year, the average tuition discount for first-year students reached a staggering 47 percent — that’s nearly half off the published sticker price of tuition, up from about 40 percent just seven years ago. Source: As College Tuitions Rise, Scholarships Fail to Keep Pace | Jeff Selingo | Pulse | LinkedIn Without a doubt, one of saddest features of US higher education economics today: many of the kids saddled with higher education debt don’t even graduate! This is the awful perfect storm of increasing student debt and declining completion rates. Now, these students have massive debt, but don’t have the degree to get them a better paying job. The author of the article linked below, Michael Crow, President of Arizona State University and author of Designing the New American University, visited at Georgia Tech this week, the day after Donald Trump became President-Elect of the US. ASU has programs explicitly targeting those students, to help them get a degree that gives them entree to a better paying job that can help them to pay down their debt. Crow said that the anger in this population is enormous — when they get saddled with debt, and higher ed fails them, they want to just blow up the system. They’re through with how the existing system works. Crow suggests that voices like that were what swept Trump to his surprising triumph. Think about it: Tens of millions of people in the US are saddled with student debt and have no degree to help pay it off. They won’t get the substantial return on their investment—graduates with a bachelor’s degree earn about $1 million more in additional income over their lifetime than those with only a high school diploma—and they typically have not developed the adaptive learning skills that will help them prosper in a rapidly changing economy.In too many cases, they may never recover, leaving them feeling frustrated and bitter, disenfranchised and unable to find a way to better jobs and greater opportunity. Too many, saddled with debt and lacking a degree, feel trapped. According to US Department of Education data, the ability to repay college loans depends more on whether a student graduated than on how much debt they are carrying. The research also found that students who don’t graduate are three times more likely to default on their loans than those who do. Source: The Biggest Crisis in Higher Ed Isn’t Student Debt, It’s Students Who Don’t Graduate | Michael Crow | Pulse | LinkedIn This last one is one that I saw linked to Emmanuel Schanzer’s wall in Facebook, and is deeply distressing. Rich kids who drop out of high school do as well as poor kids who complete college? Opportunity hoarding makes it difficult to really move the needle in terms of addressing economic inequity. Crow talked about these kinds of inequalities in his talk, too. If you’re in the bottom quartile in the US, you have an 8% chance of getting an undergraduate degree. If you’re in the top quartile, you have an 80% chance — even if you do much worse in academics than the poor kids. Even poor kids who do everything right don’t do much better than rich kids who do everything wrong. Advantages and disadvantages, in other words, tend to perpetuate themselves. You can see that in the above chart, based on a new paper from Richard Reeves and Isabel Sawhill, presented at the Federal Reserve Bank of Boston’s annual conference, which is underway. Specifically, rich high school dropouts remain in the top about as much as poor college grads stay stuck in the bottom — 14 versus 16 percent, respectively. Not only that, but these low-income strivers are just as likely to end up in the bottom as these wealthy ne’er-do-wells. Some meritocracy. What’s going on? Well, it’s all about glass floors and glass ceilings. Rich kids who can go work for the family business — and, in Canada at least, 70 percent of the sons of the top 1 percent do just that — or inherit the family estate don’t need a high school diploma to get ahead. It’s an extreme example of what economists call “opportunity hoarding.” That includes everything from legacy college admissions to unpaid internships that let affluent parents rig the game a little more in their children’s favor. Source: Poor kids who do everything right don’t do better than rich kids who do everything wrong – The Washington Post"
"762","2016-11-18","2023-03-24","https://computinged.wordpress.com/2016/11/18/does-your-teaching-encourage-epistemological-pluralism/","Turkle and Papert’s paper on epistemological pluralisms is one of my favorite by Seymour (which I talked about here). This is the first paper I’ve read about how to encourage them. I remember a math teacher I once had. He would ask students to go up to the board and explain how they solved the problem. But he wouldn’t stop there. He would then ask if someone else had a different way of solving the problem and allow the different approaches to be shared with the class. This validated that there were multiple ways a problem can be solved, and that it was not enough to know just one way… It also meant no one remained in doubt about whether their (different) approach was “incorrect” (there was room to clear up misconceptions, for example). It’s not as deep as epistemology, but it’s a start. A start to plurality of the “how”, but we should consider maybe also the plurality of the “what” and “why” (because which questions we choose to pursue for learning and why they matter to us are deep ontological and epistemological questions). Source: Does Your Teaching Encourage Epistemological Pluralism? – ProfHacker – Blogs – The Chronicle of Higher Education"
"763","2016-08-01","2023-03-24","https://computinged.wordpress.com/2016/08/01/seymour-papert-has-died-and-leaves-a-lasting-legacy/","We have now lost both Seymour and Marvin Minsky this year. I met Seymour a few times, and heard him speak at several Logo conferences and at Alan Kay’s Apple Hill camps (and even contra danced next to him once!). Probably the most frightening meeting was when, as a PhD student, I sat next to Seymour at dinner, and he challenged my dissertation ideas for over an hour. At the time, one of the directions that I was exploring was the interaction of learning styles and how that might influence how we learn programming. (Yes, I was a learning styles believer, too.) Seymour did believe in styles of thinking, but didn’t buy the simplistic learning styles definition. He insisted that I read the book Neurotic Styles because he thought the psychoanalytic perspective provided more insight into how people might approach programming. I realized later that our discussion was probably just as he and Sherry Turkle were developing their paper Epistemological Pluralism and the Revaluation of the Concrete which has been one of my favorite Seymour papers. While I had only a few direct experiences with Seymour, I have been mightily influenced by his papers, book, and most of all, his students. Yasmin Kafai, Brian Silverman, Amy Bruckman, Gary Stager, Mitchel Resnick, Uri Wilensky, Idit Harel, David Shaffer, David Cavallo, Marina Bers — I am hesitant to list them because I’m sure that I’m forgetting many. Seymour’s students have been my friends, mentors, (constructive) critics, colleagues, and co-authors. Through them, I have developed my understanding of constructionism and the power of computing as a medium for expression and learning. What a wonderful legacy Seymour Papert has left us! Seymour Papert, Co-Founder and Chairman of the Logo Foundation, died on July 31 at his home in Blue Hill, Maine. He has inspired millions of people around the word to be joyful and creative learners and teachers. Source: Logo Foundation"
"764","2016-11-21","2023-03-24","https://computinged.wordpress.com/2016/11/21/african-americans-gain-more-in-cs-ms-but-not-cs-bachelors-minorities-gain-some-ground-in-cse-degrees/","We’re seeing this in the AP CS data, too — more minority students are entering CS, but at different levels. For African Americans, the picture in computer science is mixed. The share of bachelor’s degrees they receive has fallen off since the high point of 2007, but new data suggest that their share of master’s degrees surged for almost a decade before retreating somewhat after 2013. African Americans are actually overrepresented among Americans who receive master’s degrees.[i] Why? A report in Science Magazine cited this trend in Master’s degrees as early as 2011 and speculated that efforts to attract more African Americans into computer science graduate degrees were bearing fruit. That may well be true, but disappointing trends in bachelor’s degrees will surely thwart further progress in advanced degrees. Source: New Data: Minorities Gain Some Ground in Computer Science and Engineering Degrees | Change the Equation"
"765","2016-11-23","2023-03-24","https://computinged.wordpress.com/2016/11/23/broadening-what-core-cs-looks-at-people-of-acm-margaret-burnett/","Margaret is a remarkable researcher whose work has influenced that of me and my students. Her interview linked below is worth reading. It’s the particular point I quote below that connects to ideas that I’ve been introduced to lately. I’ve been working with a group that’s developing a proposal that will get reviewed across NSF CS, and it’s been eye-opening and a bit depressing. I’ve learned that “core CS” researchers (e.g., programming languages, theory, systems, software engineering) don’t see much value in computing education research. Margaret below is talking about the interaction between software engineering and end-user programming researchers. One perspective I have now heard is that “core CS” faculty don’t believe end-user programmers exist, and if they do exist, the faculty wish they didn’t because they’ll write cruddy code (a perspective I have heard before). People whom I trust have significant insight into NSF reviewers across CS have told me that talking about “diversity” will turn off “core CS” reviewers. Much of what I do can’t be part of the proposal. I didn’t realize my CS Ed “bubble” — I’m in a School of Interactive Computing, and my proposals are mostly reviewed as ed research. Margaret has explicitly been working at building bridges across communities.  End-user software engineering (EUSE) is important not only because of the number of people it impacts—end-user developers outnumber professional developers by an order of magnitude—but also because it can bring useful ideas back to traditional software engineering. EUSE is about technologies that collaborate with end users engaging in aspects of software development to improve the quality of the software they shape, using programming devices like spreadsheet formulas, macros by demonstration, setting configurations, and adding customizations. Thus, EUSE approaches do not attempt to impose work practices on end-user developers; rather, they attempt to blend in seamlessly with their existing work practices. Looking toward the future, EUSE research is at a crossroads. Aligning its work too closely to the classic software engineering lifecycle raises a risk of over-siloing the area, restricting future EUSE researchers’ vision of what can be achieved. By a silo, I mean a system, process, department, etc. that operates in isolation from others. Silos raise the risk that an area can become overly narrow, and in doing so, become disconnected from the way users really work. One strategy that can help researchers guard against such siloing is to focus on intents of end-user developers (e.g., “update my spreadsheet to meet my company’s standards”) instead of lifecycle stages (e.g., a requirements engineering tool for spreadsheets). Guarding against overly siloed thinking by incorporating more user-intent thinking can open the door to big gains that are cross-cutting and impactful, for both EUSE and for software engineering in general. Source: People of ACM – Margaret Burnett"
"766","2016-11-28","2023-03-24","https://computinged.wordpress.com/2016/11/28/community-college-pathways-to-a-four-year-computer-science-degree-new-google-reports/","My ECEP colleagues at the University of Massachusetts Amherst, Rick Adrion and Renee Fall, led a successful NSF alliance called CAITE. One of CAITE’s most successful strategies to improve diversity at university-level CS was to make it easier for students to transfer from community colleges. Community colleges are much more diverse. The latest reports from Google tell us more about the obstacles that CS students still face in moving from community colleges to bachelor’s degrees, and how to make it easier. Our latest research shows that students who attend community colleges on the way to computer science (CS) bachelor’s degrees encounter many challenges and obstacles along the way. But there are many ways for community colleges and four-year colleges to work together and with industry to remove these obstacles and support students seeking to transfer into CS majors. Today, we are releasing two complementary research reports that explore the pathways that community college students follow to a bachelor’s degree in CS. The reports also examine the experiences of these students and the opportunities that exist or that might be created to ensure their successful career advancement. Longitudinal Analysis of Community College Pathways to Computer Science Bachelor’s Degrees investigates the national landscape of CS students at community colleges in order to better understand student behaviors and institutional characteristics that support or hinder community college students’ efforts to attain a CS bachelor’s degree. The companion report, Student Perspectives of Community College Pathways to Computer Science Bachelor’s Degrees, takes a complimentary in-depth and qualitative look at the experiences of students from underrepresented groups at community colleges in California, a state that enrolls one quarter of all community college students in the U.S.  Source: Community college pathways to a four-year computer science degree"
"767","2016-11-30","2023-03-24","https://computinged.wordpress.com/2016/11/30/steps-teachers-can-take-to-keep-girls-and-minorities-in-computer-science-education-cynthia-lee-in-kqed-news/","So glad to see Cynthia Lee’s list (described in this blog post) get wider coverage. Last summer, Cynthia Lee, a lecturer in the computer science department at Stanford University, created a widely-circulated document called, “What can I do today to create a more inclusive community in CS?” The list was developed during a summer workshop funded by the National Science Foundation for newly hired computer science faculty and was designed for busy educators. “I know the research behind these best practices,” said Lee, “but my passion comes from what I’ve experienced in tech spaces, and what students have told me about their experiences in computer science classrooms.” Too often students from diverse backgrounds “feel that they simply aren’t wanted,” said Lee. “What I hear from students is that when they are working on their assignments, they love [computer science]. But when they look up and look around the classroom, they see that ‘there aren’t many people like me here.’ If anything is said or done to accentuate that, it can raise these doubts in their mind that cause them to questions their positive feelings about the subject matter.” Source: Steps Teachers Can Take to Keep Girls and Minorities in Computer Science Education | MindShift | KQED News"
"768","2016-10-31","2023-03-24","https://computinged.wordpress.com/2016/10/31/how-to-teach-computational-literacythinking-wolframs-language-and-code-orgs-response/","Stephen Wolfram has published an essay arguing for a programming language as key to teaching computational literacy. He says computational thinking — I think he means the same thing as I do with CL instead of CT. I agree with him, and made a similar argument in my book. He goes on to argue that Wolfram Language (and the Mathematica infrastructure behind it) is particularly good for this. But how does one “tell a computer” anything? One has to have a language. And the great thing is that today with the Wolfram Language we’re in a position to communicate very directly with computers about things we think about. The Wolfram Language is knowledge based: it knows about things in the world—like cities, or species, or songs, or photos we take—and it knows how to compute with them. And as soon as we have an idea that we can formulate computationally, the point is that the language lets us express it, and then—thanks to 30 years of technology development—lets us as automatically as possible actually execute the idea. The Wolfram Language is a programming language. So when you write in it, you’re doing programming. But it’s a new kind of programming. It’s programming in which one’s as directly as possible expressing computational thinking—rather than just telling the computer step-by-step what low-level operations it should do. It’s programming where humans—including kids—provide the ideas, then it’s up to the computer and the Wolfram Language to handle the details of how they get executed. Programming—and programming education—have traditionally been about telling a computer at a low level what to do. But thanks to all the technology we’ve built in the Wolfram Language, one doesn’t have to do that any more. One can express things at a much higher level—so one can concentrate on computational thinking, not mere programming. Yes, there’s certainly a need for some number of software engineers in the world who can write low-level programs in languages like C++ or Java or JavaScript—and can handle the details of loops and declarations. But that number is tiny compared to the number of people who need to be able to think computationally. Source: How to Teach Computational Thinking—Stephen Wolfram Blog He may be right. I don’t know of any studies of the Wolfram Language in any setting. The idea of providing a programming language with such rich knowledge behind it is intriguing and promising — so much there for just about any kind of inquiry, for any kind of context. Hadi Partovi, CEO of Code.org, wrote an essay in response, where he similarly agreed with Wolfram on the issues of what we’re trying to teach and the importance of a programming language to teach those concepts. I disagree with Hadi on his critique of Wolfram, which is that the Wolfram Language is functional and lacks loops and declarations, and is inappropriate for use with learners. It’s totally true that most professional software engineers use procedural programming. But that doesn’t mean we have to. If we’re teaching computational literacy or computational thinking, it’s not clear why the practices of professional software engineers should influence what we teach or how we teach it. That’s not what we are teaching. I argue that we need to take a learner-centered approach, where we recognize that learners are not professionals or experts, and particularly in computing, may not want to become professional software engineers. What gets used in daily practice by professionals is the result of historical and cultural factors that in no way imply that we made choices optimized what is best for learners. Fortran won over Lisp because (in part) we didn’t know how to compile Lisp efficiently, but we do now and we know how to teach Lisp well. C++ and then Java won over Pascal because of perceptions of what industry wanted, not because of data and not because Pascal was shown to be ineffective for learners. What we know about what is “natural” for learners when they are first thinking about programming strongly implies that Wolfram’s functional structures are easier for learners than loops and declarations. We should strive to make decisions for what we use in classrooms based on evidence, not on what is professional practice, nor what we decide based on social defense mechanisms. More importantly, there is no “best” platform for teaching computer science. As a functional programming language, the Wolfram Language is fantastic for data analysis and exploration, but it can’t be used to create a traditional “app.” Most professional software engineers use procedural programming, using exactly the same concepts that Wolfram criticizes: loops, conditionals, event-handlers, and such. Without these concepts, none of today’s software would function. The debate about which is better—functional vs procedural programming—has raged for decades without an answer. Source: The Keys to a Well Rounded Computer Science Education | EdSurge News"
"769","2016-03-07","2023-03-24","https://computinged.wordpress.com/2016/03/07/notional-machines-and-misconceptions-in-cs-developing-a-research-agenda-at-dagstuhl/","I facilitated a breakout group at the Dagstuhl Seminar on Assessment in Introductory Computer Science. We started talking about what students know and should know, and several of us started using terms like “notional machines” and “mental models” — and there were some strong disagreements. We decided to have a breakout group to define our terms, and came up with a fascinating set of issues and questions. It was a large group (maybe a dozen?), and I think there were some differences in attendance between the two days, so I’m not going to try to list everyone here. We agreed on the definition of a notional machine (NM) as a set of abstractions that define the structure and behavior of a computational device. A notional machine includes a grammar and a vocabulary, and is specific to a programming paradigm. It’s consistent and predictive — given a notional machine and a program to run on that machine, we should be able to define the result. The abstract machine of a compiler is a possible notional machine. This definition meshes with duBoulay’s original one and the one that Juha Sorva used in his dissertation (which we could check, because Juha was there). Note that a NM doesn’t include function. It doesn’t tell a user, “Why would I use this feature? What is it for?” Carsten Shulte and Ashok Goel both found that students tend to focus on structure and behavior, and significant expertise is needed before students can discern function for a program or a NM component. In CS education, we care about the student’s understanding of the notional machine. Mental model isn’t the right term for that understanding, because (for some) that implies a consistent, executable model in the student’s head. But modern learning science suggests that students are more likely to have “knowledge in pieces” (e.g., diSessa). Students will try to explain one program using one set of predictions about program behavior, and another program in another way. They respond to different programs differently When Michael Caspersen tried to replicate the Dehnadi and Bornat paper (Camel has two humps paper, and its retraction), he found that students would use one rule set for interpreting assignment in part of the test, and another set of rules later — and they either didn’t care or didn’t notice that they were inconsistent. An early form of student understanding of the NM is simply mimicry. “I saw the teacher type commands like this. So if I repeat them exactly, I should get the same behavior.” As they start to realize that the program causes behavior, cognitive load limits how much of the NM students can think about at once. They can’t predict as we would like them to, simply because they can’t think about all of the NM components and all of the program at once. The greatest challenge to understanding the NM is Roy Pea’s Superbug — the belief that the computer is in fact a human-like intelligent agent trying to discern our intentions. We define student misconceptions (about the NM) as incorrect beliefs about the notional machine that are reliable (the student will use more than once) and common (more than one student uses it). There are lots of misunderstandings that pop up, but those aren’t interesting if they’re not common and reliable. We decided to avoid the “alternative conception” model in science education because, unlike natural science, we know ground truth. CS is a science of the artificial. We construct notional machines. Conceptions are provably correct or incorrect about the NM. One of the challenging aspects of student understandings of NM is that our current evidence suggests that students never fix existing models. We develop new understandings, and learn new triggers/indices when to apply these understandings. Sometimes we layer new understandings so deeply that we can’t reach the old ones. Sometimes, when we are stressed or face edge/corner conditions, we fall back on previous understandings. We help students develop new understandings by constraining their process to an appropriate path (e.g., cognitive tutors, cognitive apprenticeship) or by providing the right contexts and examples (like in Betsy Davis’s paper with Mike Clancy Mind your P’s and Q’s). We don’t know for sure, but we have hypotheses and research questions to explore: RQ: How much do students identify their own gaps in understanding of a NM (e.g., edge conditions, problem sets that don’t answer their questions)? Are they aware of what they don’t understand? How do they try to answer their questions? One advantage of CS over natural sciences is that we can design curriculum to cover the whole NM. (Gail Sinatra was mentioned as someone who has designed instruction to fill all gaps in a NM.) Shriram Krishnamurthi told us that he designs problem-sets to probe understanding of the Java notional machine that he expects students to miss, and his predictions are often right. RQ: Could we do this automatically given a formal specification for an NM? Could we define a set of examples that cover all paths in a NM? Could we develop a model that predicts where students will likely develop misconceptions? RQ: Do students try to understand their own computational world (e.g., how behavior in a Web page works, how an ATM works, how Web search works) with what we’re teaching them? Kathi Fisler predicts that they rarely do that, because transfer is hard. But if they’re actively trying to understand their computational world, it’s possible. We don’t know how much students think explicitly about a NM. We know from Juha’s work that students don’t always see visualizations as visible incarnations of the NM — for some students, it’s just another set of confusing abstractions. Carsten Schulte pointed out that Ira Diethelm has a cool way of finding out what students are confused about. She gives them a “miracle question” — if you had an oracle that knew all, what one question would you ask about how the Internet works, or Scratch, or Java? Whatever they say — that’s a gap. RQ: How we define the right set of examples or questions to probe gaps in understanding of a NM? Can we define it in terms of a NM? We want such a set to lead to reflection and self-explanation that might lead to improved understanding of the NM. Geoffrey Herman had an interesting way of finding gaps in NM understanding: using historical texts. Turns out Newton used the wrong terms for many physical phenomena, or at least, the terms he used were problematic (“momentum” for both momentum and velocity) and we have better, more exact ones today. Terms that have changed meaning or have been used historically in more than one way tend to be the things that are hard to understand — for scholars past, and for students today. State is a significant source of misconceptions for students. They often don’t differentiate input state, output state, and internal states. Visualization of state only works for students who can handle those kinds of abstractions. Specification of a NM through experimentation (trying out example programs) can really help if students see that programs causally determine behavior, and if they have enough cognitive load to computer behavior (and emergent behavior is particularly hard). System state is the collection of smaller states, which is a large tax on cognitive load. Geoffrey told us about three kinds of state problems: control state, data state, and indirection/reference state. State has temporality, which is a source of misconceptions for students, like the common misconception that assignment states define a constraint, not an action in time. RQ: Why? Raymond Lister wondered about our understanding of state in the physical world and how that influences our understanding of state in the computational world. Does state in the real world have less temporality? Do students get confused about temporality in state in the physical world? Another source of misconceptions is state in code, which is always invisible. The THEN part of an IF has implicit state — that block gets executed only if the expression is true. The block with a loop is different than the block after a condition (executed many times, versus once) but look identical. RQ: How common are code state misconceptions? Scratch has state, but it’s implicit in sprites (e.g., position, costume). Deborah Fields and Yasmin Kafai found that students didn’t use variables much in state, but maybe because they didn’t tackle problems that needed them. RQ: What kinds of problems encourage use of state, and better understanding of state? RQ: Some functional curricula move students from stateless computation to stateful computation. We don’t know if that’s easier. We don’t know if more/fewer/different misconceptions arise. Maybe the reverse is easier? RQ: When students get confused about states, how do they think about? How do they resolve their gaps in understanding? RQ: What if you start students thinking about data (state) before control? Most introductory curricula start out talking about control structures. Do students develop different understanding of state? Different misconceptions? What if you start with events (like in John Pane’s HANDS system)? RQ: What if you teach different problem-solving strategies? Can we problematize gaps in NM understanding, so that students see them and actively try to correct them?"
"770","2016-03-09","2023-03-24","https://computinged.wordpress.com/2016/03/09/a-dagstuhl-discussion-about-social-and-professional-practices/","Another of the breakouts that I was in at the recent Dagstuhl seminar on assessment in CS learning focused on how we teach and assess in CS classes social and professional practices. This was a small group: Amy Ko, Lisa Kaczmarczyk, Jan Erik Moström, and me. Amy and her students have been studying (via interviews and surveys) what makes a great engineer. Since I’ve worked with Lijun Ni on high school CS teachers, I know some of the social and professional practices of teachers. They have content knowledge, and they have pedagogical content knowledge. They know how to teach. They know how to identify and diagnose student misunderstandings, and they know techniques for addressing these. We know some techniques for teaching these practices. We can have students watch professionals, by shadowing or using case-based systems like the Ask systems. We can put students in apprenticeships (like student teaching or internships) or in design teams. We could even use games and other simulations. We have to convey authenticity — students have to believe that these are the real social and professional practices. An interesting question we came up with: How would you know if you covered the set of social and professional practice? Here’s the big question: How similar are these sets? They seem quite different to me, and these are just two possible communities of practice for students in an intro course. Are there social and professional practices that we might teach in the same intro CS — for any community of practice that the student might later join? My sense is that the important social and professional practices are not in the intersection. The most important are unique to the community of practice. How would we know if we got there? How would you assess student learning about social and professional practice? Knowledge isn’t enough — we’re talking about practice. We have to know that they’d do the right things. And if you found out that they didn’t have the right practices, is it still actionable? Can we “fix” practices while in undergrad? Maybe students will just do the right things when they actually get out there? The countries with low teacher attrition spend a lot of time on teacher on-boarding. In Japan, the whole school helps to prepare a new teacher, and the whole school feels a sense of failure if the first year teacher doesn’t pass the required certification exam. US schools tend not to have much on-boarding — at schools for teachers, or in industry for software engineers (as Begel and Simon found in their studies at Microsoft). On-boarding seems like a really good place, to me, for teaching professional practice. And since the student is then doing the job, assessment is job assessment. The problems of teaching and assessing professional practice are particularly hard when you’re trying to design a new community of practice. We’d like computing to be more diverse, to be more welcoming to women and to people from under-represented groups. We’d want cultural sensitivity to be a practice for software professionals. How would you design that? How do you define a practice for a community that doesn’t exist yet? How do you convince students about the authenticity? It’s an interesting set of problems, and some interesting questions to explore, but I came away dubious. Is this something that we can do effectively in school? Perhaps it’s more effective to teach professional practices in the professional context?"
"771","2016-03-11","2023-03-24","https://computinged.wordpress.com/2016/03/11/helping-adults-to-learn-while-saving-face-ukulele-and-moocs-at-dagstuhl/","I played ukulele every night while at the Dagstuhl seminar on CS learning assessment. Most nights, there was a group of us — some on guitars from the music room, one on piano, and several singers. It was wonderful fun! I don’t often get a chance to play in a group of other instruments and other singers, and I learned a lot about styles of play and synchronizing. The guitar players were all much more experienced, but we were all playing and singing music seen for the first time. We weren’t performance-quality — there were lots of off-key notes, missed entrances/exits. We were a bunch of amateurs having fun. (Thanks to Ben Shapiro, Jan Erik Moström, Lisa Kaczmarczyk, and Shriram Krishnamurthi for sharing these photos.)  We were not always a popular group. Some participants groaned when the guitars and ukulele came in to the room. One commenter asked if the singing was meant to drown out the playing. Another complained that our choice of songs was “wrong” for the instruments and voices. Clearly, some of the complaints were for humorous effect, and some were pretty funny. Here’s the thought experiment: Imagine these were kids playing music and singing. I predict the result would be different. I doubt the listeners would criticize the players and singers in the same way, not even for humorous effect. While adults certainly criticize children when in a teacher-student or mentoring relationship, casual criticism by passerby adults of a child playing or practicing is unusual. Why is it different for adults? I’ve talked before about the challenges of adult learning. We expect adults to have expertise. We expect quality. It’s hard for adults to be novices. It’s hard for adults to learn and to save face. My colleague Betsy DiSalvo points out that we typically critique people at a near-peer level of power — we don’t casually critique those with much less power than us (children) because that’s mean, and we don’t casually critique our bosses and managers (to their faces) because that’s foolish. Getting critiqued is a sign that you’re recognized as a peer. After her work at Xerox PARC, Adele Goldberg helped develop learning systems, including systems for the Open University in the UK. She once told me that online systems were particularly important for adult learners. She said, “It’s hard for people with 20 years of expertise in a field to raise their hands and say that they don’t know something.” Amy Ko framed MOOCs for me in a new way at the Dagstuhl Seminar on Assessment in CS. In the discussion of social and professional practice (see previous blog post), I told her about some ideas I had about helping people to retrain for the second half of life. We live much longer than people did 30-50 years ago. Many college-educated workers can expect a work life into our 70’s. I’ve been wondering what it might be like to support adult students who might retrain in their 40’s or 50’s for another 20 year career later. Amy pointed out MOOCs are perfect for this. College-educated professionals currently in their careers do have prior education, which is a population with which MOOCs are most successful. MOOCs can allow well-educated students to retrain themselves as time permits and without loss of face. A recent Harvard study shows that students who participate Georgia Tech’s MOOC-based OMS CS program are in a demographic unlikely to have participated in a face-to-face MS in CS program (see page here). The MOOCs are serving an untapped need — it’s not necessarily reaching those who wouldn’t have access to education otherwise, but it can be a significant help to people who want to re-train themselves. There are lots of uses of MOOCs that still don’t make sense to me. Based on the empirical evidence of MOOCs today (in their current forms), I argue that: Adults will still have to have tough skins when practicing their new skills. We expect a lot of expertise out of the starting gate for adults in our society, even when retraining for a second career. MOOCs might be excellent preparation for adults in their second acts."
"772","2013-02-19","2023-03-24","https://computinged.wordpress.com/2013/02/19/survey-of-non-doctoral-computing-departments-please-participate/","The Computing Research Association conducts an annual survey of US doctorate-granting departments in Computing, called the Taulbee Survey. It’s an important resource for understanding the state of computing education in the United States, but only gives the research-focused side of the picture. The ACM has launched an effort to do a similar survey of the-rest-of-us (hence it’s original name, “TauRUs,” Taulbee for the Rest of Us). Please do help to get the word out so that we can get a clearer picture of US post-secondary computing education. As of last week, the NDC Survey of Non-Doctoral Granting Departments in Computing (all U.S., not-for-profit bachelor’s and master’s programs in CE, CS, IS, IT, SE), previously known as TauRUs, is live. We have gone out to our list of qualifying schools, but we can use YOUR help in getting the word out so we can get to those who may have been left off the mailing, and those who might “forget” to participate! Among other benefits, there is a drawing for five $2,500 grants for the respondents’ departments! Here is an informational flyer you can share with your colleagues in the non-doctoral computing program community: http://www.acm.org/education/acm-ndc_flyer.pdf. There will also be an announcement in SIGCSE welcome bags and its listserv."
"773","2013-02-18","2023-03-24","https://computinged.wordpress.com/2013/02/18/code-org-creating-a-database-of-all-programming-courses-bad-news-for-researchers/","One of the challenges of being a social science researcher today is anonymizing your data. In our project at Georgia Tech, we are asking the Human Subjects Review Board about sharing a data set that we created in an anonymized form. There’s some question as to whether it was sufficiently anonymized. “African-American, female, 15 years old, Hall County” feels pretty anonymous, but when you add “in a computer class” or “taking a Girl Scout animation workshop,” we’re now talking about a very small number of people. It might be possible for someone to identify the student. The Board is trying to decide if that’s anonymous enough. The dataset becomes much more anonymous if we leave out the school district or county, but if we do, we lose our connection to socioeconomic status, school district performance on tests and high school completion rates, and other factors that do matter to our analyses. If we provide those other variables and not the district, it becomes possible to triangulate the county. I recently received this message from CSTA: Code.org is a recently launched public 501c3 nonprofit dedicated to the vision that every student in every school should have the opportunity to learn to code. (see recent features on TechCrunch and in the NY Times) We’re building a database of every classroom that teaches computer programming – whether in elementary school, college, full-time, or afterschool/summer. However, we’re only looking to list classrooms that teach programming (as opposed to computer usage/literacy) You can search the existing database and if your class/course/university isn’t listed, PLEASE submit it at http://www.code.org. (your private contact info won’t be shared, spammed, or sold. But the other info is listed publicly to help students and teachers find the class) I checked with our external evaluators, and they’re worried. With even “female, 15 years old, Hall County,In a CS class,” you can go look up in Code.org where all the CS classes are in Hall County. This wouldn’t be a big deal if there were hundreds of classes, but there aren’t. The number of programming classes for most counties and school districts will be countable on your fingers. (You probably won’t need your toes). This is a huge deal for researchers. We won’t be able to share our data and collaborate on analyses anywhere near the same way, not without breaking federal guidelines about anonymizing participants data. It’s not at all clear if the data that Code.org is assembling about schools is at all useful. Sure, there’s a high school in your school district offering programming. You may be able to send your kid there rather than local school district, but it depends on the policies of your school district. Let’s say that you learn that there’s an elementary school the next county over that’s offering programming. You definitely can’t enroll your kids there without moving. I don’t see how getting schools to make public where they are offering computer science helps us promote computer science. (I’m also wondering who vets and maintains this database — a spotcheck shows several errors already.) I exchanged email about this blog with Hadi Partovi, the founder of Code.org. His argument is that if there are computer courses in every school, his database is not a problem, and that’s where he wants to get to. I agree with the goal, but the database creates a short-term stumbling block. It prevents the researchers from studying and improving computing education while it’s growing. I love the idea of making sure that people can find learning opportunities. I believe that this national database of programming courses creates more privacy and research ethics problems than it solves."
"774","2013-03-18","2023-03-24","https://computinged.wordpress.com/2013/03/18/computer-science-enrollments-soared-last-year-rising-30-computerworld/","The growth of departments in the Taulbee report is astonishing, but what Computerworld got wrong is calling it “computer science enrollments,” as opposed to “computer science enrollments in PhD-granting institutions.” The Taulbee report doesn’t cover all CS departments, and that’s why the new NDC survey has been launched. The Taulbee report also indicates that the percent of women graduating with a Bachelors in CS has risen slightly, while the Computer Engineering percentage has dropped. Both are well south of 15%, though — a depressingly small percentage. The number of new undergraduate computing majors in U.S. computer science departments increased more than 29% last year, a pace called “astonishing” by the Computing Research Association. The increase was the fifth straight annual computer science enrollment gain, according to the CRA’s annual surveyof computer science departments at Ph.D.-granting institutions. via Computer science enrollments soared last year, rising 30% – Computerworld."
"775","2013-02-20","2023-03-24","https://computinged.wordpress.com/2013/02/20/kids-use-coding-skills-to-hack-online-games-singular-or-plural/","What a strange story! Are there really “kids” using coding skills to hack accounts? Or is there one case of one 11 year old Canadian boy, which has AVG concerned about coding instruction? And who’s calling C# “elementary”? What elementary schools are teaching “C#”? Why would AVG be concerned about kids learning to program? It’s not the case that most CS classes cover “How to make a virus 101” or “Advanced how to cheat other gamers.” I wonder if this is another case of “Don’t learn to code — leave it to the experts.” Is it really threatening to IT firms that more teenagers are learning to program? Kids as young as 11 are using coding skills to hack accounts on social media and gaming sites, according to one report. Antivirus firm AVG says children are writing malware to steal data and virtual currency from friends. However, the hacks are still in their infancy, as researchers found errors that trace back to the original source. One author included his exact email address, password and additional information, revealing an 11-year-old boy in Canada. Most programming languages researchers found in the study were elementary, such as C# and Visual Basic. Check out the video, above, for more. via Kids Use Coding Skills to Hack Online Games."
"776","2013-02-01","2023-03-24","https://computinged.wordpress.com/2013/02/01/nsa-built-stuxnet-but-real-trick-is-building-crew-of-hackers-us-news-and-world-report/","If the reporter really understood NSA’s strategies for building up their cybersecurity workforce, they would said “personpower” instead of “manpower.” NSA is a big supporter of the Anita Borg Institute and the Grace Hopper Conference. They recognize that they’ll need women to help fill those cybersecurity ranks. When Stuxnet—a massive computer worm that damaged a uranium enrichment plant in Iran—was discovered in 2010, cybersecurity experts marveled at its intricacy and power. But maybe just as impressive as the exploit itself was the fact that the National Security Administration was able to find the manpower needed to design the attack. That’s because the NSA, CIA, the Army’s Cyber Command, and private companies are quickly learning there aren’t enough cybersecurity experts steeped in the skills needed to wage cyberwarfare. Experts have suggested that the United States government will need to hire at least 10,000 cybersecurity experts over the next several years, while the private sector will need even more. While most of those jobs are in defense, there’s also a growing need for people who are able to hack into complicated networks. via NSA Built Stuxnet, but Real Trick Is Building Crew of Hackers – US News and World Report."
"777","2013-02-04","2023-03-24","https://computinged.wordpress.com/2013/02/04/computer-science-counts-towards-the-english-baccalaureate/","I mentioned a while back that the Vint Cerf had expressed support for CS becoming part of the English Baccalaureate degree. It’s been announced that CS does now count, but as a science. Pretty much the same decision we made here in Georgia. The decision by Education Secretary Michael Gove will mean that computing will count as a science in the English Baccalaureate for secondary school league tables from January 2014 – alongside physics, chemistry, biology and pupils taking double science. The Department for Education says the change is intended to reflect the “importance of computer science to both education and the economy”. via BBC News – Computer science part of English Baccalaureate."
"778","2013-02-05","2023-03-24","https://computinged.wordpress.com/2013/02/05/gt-and-courseras-mooc-stumble-why-they-are-still-experiments/","Since I do write about MOOCs a lot here, it would be disingenuous of me not to report on the Coursera MOOC that got pulled, especially since it was from Georgia Tech. I think this is an example that proves MOOCs are still experiments. This would be a much worse story if this was a required course, or one that students had paid tuition for. The course got off to a bad start; one student reported that the first e-mail he got from the instructor “was not an introduction to the course per se, nor instructions for getting started, but rather an apology for the technical glitches that were, unbeknownst to me, already occurring.” Ms. Wirth had tried to use Google Docs to help the course’s 40,000 enrolled students to organize themselves into groups. But that method soon became derailed when various authors began editing the documents. Things continued downhill from there; some students also had problems downloading certain course materials that had been added to the syllabus at the last minute. When the confusion continued, Georgia Tech decided to call a timeout. via Georgia Tech and Coursera Try to Recover From MOOC Stumble – Wired Campus – The Chronicle of Higher Education."
"779","2013-02-06","2023-03-24","https://computinged.wordpress.com/2013/02/06/berners-lee-calls-for-computer-science-education-for-children/","The first part of what Berners-Lee says below makes sense to me. Students don’t really see computing until there’s breakdown. Interfaces carefully hide away the computing underneath. But it does not really make sense for children to check log files and re-write scripts when something breaks with Twitter or Facebook. I think he may be confounding two reasons for knowing about computing education: (a) to understand your world (“I think I have a clue why this broke, or even why it was working in the first place”) versus (b) to be able to construct in that world — to be a producer, as well as a consumer. Both are good reasons for learning about computing, but it’s not always the case that you can construct around every bug that comes up, especially with large social networks. “A quarter of the planet uses the web,” he cautioned, “then within this quarter of people who may tweet and use social networks and so on, there’s a fairly small set of people who code. But when you look at those people, they have the ability to make a computer do whatever they can imagine. “I think a lot of folks growing up today, when they open a computer, it’s like opening a refrigerator. It’s an appliance, it’s white goods, there’s some stuff in it, if it needs more in it you stock it, you put more music in it, you play it. And If it breaks it’s: ‘Mom, can I have a new one’.” “It’s not actually ‘what went wrong there? Let me go in there, lets look at the log files, what crashed, why didn’t it have the right permissions, lets see if we can re-write that script so that it works in the new version of the operating system.’” via Berners-Lee calls for computer science education at a younger age | VG247."
"780","2013-02-07","2023-03-24","https://computinged.wordpress.com/2013/02/07/special-issue-of-acm-toce-on-computing-in-schools/","The ACM journal Transactions on Computing Education is going to have a special issue devoted to Computer Science Education in K-12 Schools. Well worth exploring. Recent activities in several countries, for example in the USA, the United Kingdom, New Zealand and South Korea, show a growing awareness of the importance of rigorous computer science education (CSE) for a successful, self-responsive and self-deciding life in the modern world. Consequently, serious efforts are made to introduce or to improve CSE in schools that will be followed by other countries, as we hope. Yet, for any country that wants to improve CSE in schools, it would be advisable to learn from the experiences that were made somewhere else. Nevertheless, those experiences were gathered under preconditions and circumstances that usually differ strongly from country to country. Unfortunately, the short format of conventional scientific papers prevents most reports about such experiences from covering all relevant aspects of the respective context. To produce relief, this Special Issue of TOCE aims to collect extensive, detailed case studies that discuss as many relevant aspects as possible, for example regarding the category system that was proposed in 2011 by the ITiCSE Working Group about Informatics in Secondary Education [1]. via Computer Science in Schools Solicitation Letter."
"781","2013-02-11","2023-03-24","https://computinged.wordpress.com/2013/02/11/college-degree-no-class-time-required-just-religious-faith-in-tests/","The announcement from U. Wisconsin (that they’ll test students to get a degree, rather than requiring any coursework at all) is showing enormous and unsupported (almost religious) faith in our ability to construct tests, especially online tests. Building reliable and valid assessments is part of my research, and it’s really hard. Can I come up with assessments that are at least as good as having 32 (roughly) teachers assess you over a four year period? I already know that there is a lot that I don’t know how to assess in computing education (because we’ve tried and failed), e.g., the kinds of process knowledge that one gains in software engineering and senior design classes. I’m sure that there are many assessment experts who are far better than me, so certainly, someone else could do what I could not. Since I’m also a consumer of others’ assessments, I don’t see high-quality assessments (e.g., I trust them, they’ve been shown to be reliable and valid) that cover everything that we want students to learn. So, no, I do not believe currently that we can build tests to assess an entire computer science undergraduate degree. To create programs like what Wisconsin proposes is having unsupported faith that new assessments will miraculously appear. (“Miraculous” because as far as I can tell, no funding is going into building new assessments, and that’s pretty expensive to do well!) Now, educators in Wisconsin are offering a possible solution by decoupling the learning part of education from student assessment and degree-granting. Wisconsin officials tout the UW Flexible Option as the first to offer multiple, competency-based bachelor’s degrees from a public university system. Officials encourage students to complete their education independently through online courses, which have grown in popularity through efforts by companies such as Coursera, edX and Udacity. via College Degree, No Class Time Required – WSJ.com."
"782","2013-02-12","2023-03-24","https://computinged.wordpress.com/2013/02/12/why-big-data-mostly-cant-help-improve-teaching/","The Muller research being described in the below post was discussed here previously, and is related to the predict-before-demo work that Eric Mazur presented at last year’s ICER. The uppermost bit here is that data mining can’t get at this level of abstraction in terms of identifying good teaching. I’m also concerned that data mining can’t help if you lose 80% of your subject pool — you can’t learn about people who aren’t there. But even granting that you can get sufficiently rich information about the students, there’s another hard problem. Let’s say that, thanks to the upgrade in your big data infinite improbability drive made possible by your new Spacely’s space sprocket, your system is able to flag at least a critical mass of videos taught in the Mueller method as having a bigger educational impact on the students the average educational video by some measure you have identified. Would the machine be able to infer that these videos belong in a common category in terms of the reason for their effectiveness? Would it be able to figure out what Muller did? There are lots of reasons why a video might be more effective than average. And many of those ways are internal to the narrative structure of the video. The machine only knows things like the format of the video, the length, what kind of class it’s in, who the creator is, when it was made, and so on. Other than the external characteristics of the video file, it mostly knows what we tell it about the contents. It has no way for it to inspect the video and deduce that a particular presentation strategy is being used. We are nowhere close to having a machine that is smart enough to do what Muller did and identify a pattern in the narrative of the speaker. via Why Big Data Mostly Cant Help Improve Teaching |e-Literate."
"783","2013-06-06","2023-03-24","https://computinged.wordpress.com/2013/06/06/what-do-we-actually-learn-from-ted-talk-videos/","I usually really like Annie Murphy Paul’s articles, but this one didn’t work for me. Below are her reasons why TED talk videos work well in learning, with my comments interspersed. • They gratify our preference for visual learning. Effective presentations treat our visual sense as being integral to learning. This elevation of the image—and the eschewal of text-heavy Power Point presentations—comports well with cognitive scientists’ findings that we understand and remember pictures much better than mere words. Cognitive scientists like Richard Mayer have found that diagrams and pictures can enhance learning — absolutely. But his work combined diagrams with words (e.g., best combination with diagrams: audio narration, not visual text). This quote seems to suggest that pictures are better than words. For most of STEM, that’s not true. We may have an affinity for visual, but that doesn’t mean that it works better for learning complex material. • They engage the power of social learning. The robust conversation that videos can inspire, both online and off, recognizes a central principle of adult education: We learn best from other people. In the discussions, debates, and occasional arguments about the content of the talks they see, video-watchers are deepening their own knowledge and understanding. Wait a minute — isn’t she just saying that TED talks give us something to talk about? TED talks are not themselves inherently social. Isn’t a book discussed in a book club just as effective for “engaging the power of social learning”? What makes TED talks so “social”? • They enable self-directed, “just-in-time” learning. Because video viewers choose which talks to watch and when to watch them, they’re able to tailor their education to their own needs. Knowledge is easiest to absorb at the moment when we’re ready to apply it. This was the quote that inspired this blog post. It’s an open question, but here’s my hypothesis. Nobody watches a TED talk for “just-in-time” learning. People watch TED talk for entertainment. “I am about to go to my school board meeting — I think I’ll watch Sir Ken Robinson to figure out what to say!” “I need to be able to guess birthdays — isn’t there a TED talk on that?” There are videos that really work for “just-in-time” learning. TED talks aren’t like that. • They encourage viewers to build on what they already know. Adults are not blank slates: They bring to learning a lifetime of previously acquired information and experience. Effective video instruction build on top of this knowledge, adding and elaborating without dumbing down. via What Do We Actually Learn From Videos? | MindShift. It’s absolutely true that effective instruction builds on top of existing knowledge, which is something that the best teachers know how to do — to figure out what students know and care about, and relate knowledge to that. How does a fixed video build on what viewers (all hundreds of thousands of them) actually know? No, I don’t see how TED talks do that."
"784","2013-04-01","2023-03-24","https://computinged.wordpress.com/2013/04/01/addressing-computer-science-student-misconceptions-with-contrasts/","I have wanted to figure out how to use in my class the interesting findings about the use of video to address science misconceptions. The idea is that you want to use real student misunderstandings and contrast them with better, more powerful ways of understanding something. The challenge for me has been how to get those misunderstandings in class. I don’t want to call on someone that I know has a misconception and have him lay out his explanation — just to pounce on it to say, “And that’s wrong!” Then I realized my chance this last week. I was grading the second midterm, and saw all these surprising misconceptions made evident in the students answers. Normally, the class time after a midterm is about going over the midterm answers. I decided instead to make it about the misconceptions. I built a Powerpoint slide deck filled with these contrasting bits of code (like the contrasting explanations in the science videos) and with alternative code for answering the same problem. I tried to disguise the code so as not to embarrass any particular student. For example, I changed variable names — and since students expect that changing variable names should make plagiarized code impossible to detect, that should be enough, right? I formed students into pairs, and then put up the slides and asked for them to respond or to answer a question in their pair. For example, I noticed that several students seemed to confuse IF and WHEN. So I put up this slide.  I asked students to punch into their clickers what they thought “A” would print out. And yes, about 20% of the students guessed something other than “1.” I executed “A” as a way of checking the answer. I then had students answer for “B.” I could hear lots of discussion suggesting that students were seeing the difference between IF and WHILE. I put code up like this:  I had each group discuss what would be the output of this code, then took suggestions of the output from around the room. I wrote them on the board, and then had pairs vote on which answer they most agreed with. By the time we voted, everyone got it right — just generating the options, and hearing the discussion as each option went up, they figured out what the best answer was. I really liked hearing students “discovering” invariants as they talked, e.g., “The loop can never end, because you never change node1a in the loop!” I have no real evidence of learning here — we’ll see how things go in the class. I do have a sense that this was a more fruitful activity for a most-midterm discussion than just me giving the answers and telling them why the wrong answers were wrong. That recitation of sins usually just results in students coming up to me with, “You only give me 5 points for this, but based on the discussion, I think I deserved 7.” This way, the discussion was punctuated more often with “Ohhhh — now I get it!”   "
"785","2013-09-13","2023-03-24","https://computinged.wordpress.com/2013/09/13/how-much-is-too-much-time-spent-on-testing-in-schools/","Exactly how much standardized testing are school districts subjecting students to these days? A nearly staggering amount, according to a new analysis. “Testing More, Teaching Less: What America’s Obsession with Student Testing Costs in Money and Lost Instructional Time,” released by the American Federation of Teachers, looks closely at two unnamed medium-sized school districts — one in the Midwest and one in the East — through the prism of their standardized testing calendars. via How much time do school districts spend on standardized testing? This much.. This article is worth blogging on for two reasons: First, my colleagues in the UK were stunned when I told them that most tests that students take in US schools are locally invented. “Doesn’t that lead to alot of wasted effort?” Perhaps so — this report seems to support my claim. Second, I don’t find that much testing either staggering nor undesirable. Consider the results on the Testing Effect — students learn from testing. 20 hours in an academic year is not too much, if we think about testing as driving learning. We don’t know if these are good or useful tests, or if they are being used in a way that might motivate more learning, so 20 hours isn’t obviously a good thing. But it’s also not obviously a bad thing. Consider the results of the paper presented by Michael Lee at ICER 2013 this year (and which won the “John Henry Award,” the people’s choice best paper award). They took a video game that required programming (Gidget) and added to it explicit assessments — quizzes that popped up at the end of each level, to ask you questions about what you did. They found that such assessments actually increased engagement and time-on-task. Their participants (both control and experimental) were recruited from Amazon’s Mechanical Turk, so they were paid to complete more levels. Adding assessments led to more levels completed and less time per level — that’s pretty remarkable.  Maybe what we need is not fewer tests, but better and more engaging tests. "
"786","2013-02-13","2023-03-24","https://computinged.wordpress.com/2013/02/13/reaching-an-intellectual-peak-should-everyone-go-to-college/","Ann Sobel has an article in IEEE Computer asking “Should everyone go to College?” as part of a special issue on education. Her answer is, “No.” She might be right, but I disagree with her argument. For example, below she suggests that students should avoid college if they “have already reached their intellectual peak.” Modern cognitive science suggests that fluid intelligence “peaks” in students’ 20’s, but other forms of intelligence develop and grow throughout one’s life. I’m particularly concerned about this article appearing in IEEE Computer. Thinking that high school is enough for a computing job is (a) wrong and (b) counter-productive at the high school level, since it encourages the instruction to be more vocational and less about developing computing concepts that could be used in post-secondary instruction. I’m particularly worried about what an emphasis on high school computing education means for under-represented minorities. A high-school only IT job will earn, on average, far less than a college degree IT job. Emphasizing high school IT jobs may mean trapping more under-represented minorities “in the shallow end.” Ann identifies several important issues that prevent students from succeeding in college, like lack of adequate preparation and cost. I see those as challenges to be addressed, not roadblocks. If the context of the piece is taken seriously (i.e., high school degrees as preparation for jobs like those of IEEE Computer readers), then we have to consider the far more considerable issues of inadequate numbers and preparation for teachers. We are challenged to produce enough high school teachers to cover Exploring CS or CS:Principles, both of which de-emphasize programming compared to a traditional CS1. If we wanted students to be ready to get an IT job right out of high school, they better learn some serious vocational computing skills, from network management, to database administration, to low-level coding. How are we going to develop enough high school teachers to teach all of that?!? Here’s my bottom-line: “Should everyone go to college?” If you want a job in computing, yes. Students can attend a community college to help improve these test scores, but this route doesn’t always work, particularly when students have already reached their intellectual peak. While students have the potential for intellectual growth, if they can’t grow sufficiently, they should be supported in considering myriad rewarding career paths that don’t require a college degree. via Computing Now | Should Everyone Go to College?."
"787","2013-02-14","2023-03-24","https://computinged.wordpress.com/2013/02/14/code-acts-how-computer-code-influences-the-way-we-perceive-the-world/","This is a fascinating essay. Some of it goes too far for me (e.g., that code “produces new forms of algorithmic identity”), but the section I quote below is making a deep comment relative to the arguments we’ve been making here about “computing for everyone.” Why should everyone know about computing? I’ve argued about the value of computational literacy as literacy — a way of expressing and notating thought. I’ve also argued about the value of computer science as science — insight into how the world we inhabit works. This part of the essay is saying something more generative — that code provides metaphors for the way we think about the world, so not knowing about code thus limits one’s ability to understand modern culture and science. The idea is akin to computational thinking, but more about cultural practices than cognitive processes. Code is the language of computation; it instructs software how to act. But as the instructions written down in code travel out into the world, organized in the algorithmic procedures that make up software, it also has a significant influence on everything it touches. The result is a profound softwarization of society as software has begun to mediate our everyday ways of thinking and doing. For example, software and its constituent codes and algorithms have become a metaphor for the mind, for ideology, for biology, for government, and for the economy, and with the rapid proliferation of software as an interface to the world, code has been seemingly naturalized in collective life. Computer code has also been described as a kind of law, or the set of rules and constitutional values that regulate the web. The idea that code is law suggests that choices about how to code the web will define the controls and freedoms that are built or programmed into it. These ways of looking at code demonstrate that code is much more than a language for instructing computing machines. Instead, we need to understand code as a system of thought that spills out of the domain of computation to transform and reconfigure the world it inhabits. via Code Acts: How Computer Code Configures Learning | DMLcentral."
"788","2013-02-15","2023-03-24","https://computinged.wordpress.com/2013/02/15/sigcse-2013-preview-measuring-attitudes-in-introductory-computing/","Brian Dorn and Allison Elliott Tew have been working on a new assessment instrument for measuring attitudes towards computing. They published a paper at ICER 2012 on its development, and the new SIGCSE 2013 paper is on its initial uses. In general, we have too few research measures in computing education research. Allison’s dissertation work stands alone as the only validated language-independent measure of CS1. Brian and Allison have been following a careful process of developing the Computing Attitudes Survey (CAS). They’re developing their instrument based on a measure created for Physics. The Physics instrument has already been adapted for Chemistry and Biology, so the process of adaptation is well-defined. What’s particularly cool about CAS is that it can be used as a pre-test/post-test. What were the attitude effects of a particular intervention? The SIGCSE 2013 paper describes use of CAS in a set of pre-test/post-test situations. Here comes the remarkable part. In the other fields, an introductory course actually leads to decreased interest in the field (more specifically, in attitudes less-like experts in the field). But not in computer science! The CAS indicates increased interest in the field after the first course. Why is that? I like the hypothesis that Brian and Allison suggest. Students have some clue what physics, biology, and chemistry — but it’s probably significantly wrong about real practice, and real practice is more rigorous than they thought. Students have almost no clue what computer science is. They probably have misconceptions, but they are not tightly held — we’ve found that high school students’ perceptions of what CS is can be changed pretty easily. After a first CS course, students realize that it’s more interesting than they thought, so attitudes become more expert-like and positive."
"789","2013-06-14","2023-03-24","https://computinged.wordpress.com/2013/06/14/coding-is-coming-to-every-industry-you-can-think-of-time-to-start-learning-it-now/","A nice piece arguing motivating computing across the curriculum and computing for everyone. Next step: thinking about how to teach computing across the curriculum. As British technologist, Conrad Wolfram said in a TED talk on teaching math with computers: “In the real world math isn’t necessarily done by mathematicians. It’s done by geologists, engineers, biologists, all sorts of different people.” The same applies for computer science. Just ask Alex Tran, fellowship program manager at Code for America, a nonprofit “civic startup accelerator” that sees coding as a new form of public service. Each year, he works with more than 20 startups and fellows who build a variety of apps and online programs to improve how citizens engage and interact with their communities. So far, they’ve built tools for services like community disaster management, food stamps, virtual townhalls, student data interoperability, and even snazzy icons. via Coding Is Coming To Every Industry You Can Think Of, Time To Start Learning It Now | Co.Exist: World changing ideas and innovation."
"790","2013-02-16","2023-03-24","https://computinged.wordpress.com/2013/02/16/president-obama-emphasizes-the-importance-of-cs-education/","From his February 14, 2013 Google+ Hangout, President Obama discusses the importance of computer science in preparing the nation’s future workforce. via Computer Science, Zuckerberg and Video Games – YouTube."
"791","2013-02-21","2023-03-24","https://computinged.wordpress.com/2013/02/21/first-phd-in-cs-in-us-went-to-a-sister/","An interesting excursion into the history of computing. One of the first two PhD’s in Computer Science in the United States went to a female and a member of a religious order! I would never have guessed. But at virtually the same time in June 1965, two other degrees were completed: Sister Mary Kenneth Keller, BVM, earned a Ph.D. from the Computer Sciences Department at the University of Wisconsin, and Irving C. Tang earned a D.Sc. from the Applied Mathematics and Computer Science Department at Washington University in St. Louis. The purpose of this article is to show that in the United States, Keller and Tang were not just earlier but also first, thereby providing a more accurate historical record. via Who Earned First Computer Science Ph.D.? | blog@CACM | Communications of the ACM."
"792","2013-02-21","2023-03-24","https://computinged.wordpress.com/2013/02/21/u-k-just-like-us-students-not-lining-up-to-study-it/","I hear all the time about the decline of interest in computing among high school students in the US. Not surprising, but still disappointing, to see that the problem is also in the UK. Between now and 2020, according to an October report from the Royal Academy of Engineering, the U.K. will need 10,000 more new graduates in science, technology, engineering and mathematics (STEM) each year just to fill current employment needs. It’s difficult to see where they’re going to come from, especially in tech, judging from January data from the U.K Department for Education. Only 3,420 British students, or 0.4%, took a computer science A-level (similar to a U.S. high school diploma) in 2011-12, compared to a high of 12,529 in 1998. The gender gap is another concern here, as a mere 7% — 255 total — of computing A-level students were female in the 2011-12 school year. via U.K. Students Not Lining Up To Study IT – Education – K-12 –."
"793","2013-02-22","2023-03-24","https://computinged.wordpress.com/2013/02/22/pedagogy-trumps-technology-why-all-the-fuss-about-moocs/","Nice piece in our C21U newsletter, suggesting that pedagogy is more important than the MOOC technology. How we teach is much more important for dramatic impacts on learning, than aiming for scale via advanced technology. We may find that MOOCs work well for self-motivated students who have a lot of technology at their fingertips, have been raised in stimulating intellectual environments all their lives, who have lots of support mechanisms within their grasp to help them learn the material, and who have the wherewithal to spend the time and energy required to learn deeply what is being taught in these MOOCs. But what about those students who don’t have the resources required to support their learning, who have not been raised in intellectually stimulating environments, who don’t even know how to study well? It is hard to see how MOOCs will work for these students, yet these are the students that it is most important that we reach in order to meet the challenges of 21st-century education. I would much rather see the resources of Georgia Tech and our nation’s other educational institutions, being used to support the creation of research-based learning environments that can most effectively support the learning of all students, regardless of their background. Learning environments that do not rely on the lecture. Learning environments that make good use of those precious and valuable times when students are in direct contact with their instructors. via Why All the Fuss about MOOCs? | Center for 21st Century Universities."
"794","2013-02-25","2023-03-24","https://computinged.wordpress.com/2013/02/25/its-not-disruption-of-higher-education-its-privatization/","Great piece by Aaron Bady about the trends in higher education. I particularly liked the definition of “Borg complex” about MOOCs, which I’d not heard of previously. So I want to shift the debate a bit. Shirky thinks in terms of “disruption” and what can come of it, in theory. I think in terms of what the “disruption” of the University of California system looks like in practice, as a complex of politicians, financiers, and career administrators move in lock-step to transform it into a self-sufficient corporate entity, and to enrich private industry in the bargain. I see a group of decision-makers who quite manifestly do not know what they are talking about and who barely try to disguise it, for whom “online” is code word for privatization. If I am against MOOC’s, I am against the way “MOOC” is being experienced in California, in practice: as an excuse to cheapen education and free the state budget from its responsibility to educate its citizenry. via Tree Sitting – The New Inquiry."
"795","2013-02-27","2023-03-24","https://computinged.wordpress.com/2013/02/27/connecticut-aims-to-grow-stem-enrollment/","Interesting model. To be effective, I’d suggest hiring the STEM faculty with an eye toward STEM education. Hire faculty who want to make improving the quality and retention of STEM graduates, not just more STEM researchers. Make it count. Connecticut Governor Dannel Malloy announced Thursday a plan to dedicate $1.5 billion to growing the science, technology, engineering, and math programs at the University of Connecticut. The money will be used to hire more faculty members, enroll more students, build new STEM facilities and dorms, and create new doctoral fellowships and a STEM honors program. The proposal, called Next Generation Connecticut, spans UConn’s three campuses. If the program passes the state legislature, it would increase the number of engineering undergraduates enrolled by 70 percent and the number of STEM graduates by 47 percent. UConn currently enrolls 7,701 undergraduates and 1,973 graduate students in STEM fields. It would also fund the hiring of 259 new faculty members, 200 of whom would be in the STEM fields. “It’s transformational,” said UConn President Susan Herbst. “It’s really every president’s hope that they get this kind of investment from their state or from their donors.” via Connecticut and Texas aim to grow STEM enrollment, but take different approaches | Inside Higher Ed."
"796","2013-03-29","2023-03-24","https://computinged.wordpress.com/2013/03/29/interview-with-code-org-video-director/","Interesting interview with the director of the Code.org video. The comments are intriguing and reflect the diverse and contrary perspectives on these issues: “There are nowhere near 1 Million unfilled software engineer jobs in the United States. Becoming a software engineer is a choice that is not a sideline choice, it becomes your whole life. While learning some coding may be a help for students, the premise of Code Stars is deeply flawed.” (Thanks to Mark Miller for the tip!) Michelle Fields talks to filmmaker Lesley Chilcott about her film Code Stars. There is a dearth of computer engineers in America, and Chilcott is trying to reverse this trend through documentary film. Hear how many computer engineers started their lucrative careers at a young age with very simple programs, and how you can too. via Decoding Success: Striking It Rich in the Tech Industry – YouTube."
"797","2013-03-28","2023-03-24","https://computinged.wordpress.com/2013/03/28/cybersecurity-as-a-motivation-for-drawing-in-high-schoolers-into-cs/","We’ve talked about the UK and the US worrying about having enough cyberwarriors to deal with future cybersecurity issues. CMU is helping to build a game to entice high school students into computing, with cybersecurity as the focus. Carnegie Mellon University and one of the government’s top spy agencies want to interest high school students in a game of computer hacking. Their goal with “Toaster Wars” is to cultivate the nation’s next generation of cyber warriors in offensive and defensive strategies. The free, online “high school hacking competition” is scheduled to run from April 26 to May 6, and any U.S. student or team in grades six through 12 can apply and participate. David Brumley, professor of computer science at Carnegie Mellon, said the game is designed to be fun and challenging, but he hopes participants come to see computer security as an excellent career choice. via Carnegie Mellon, NSA seek high school hackers – Yahoo! News."
"798","2013-03-01","2023-03-24","https://computinged.wordpress.com/2013/03/01/it-skills-shortage-hampers-uk-response-to-cybersecurity-needs/","From the US yesterday to the UK today, there’s a similar theme connecting computing education and cybersecurity. Maybe the next round of government investment in computing education is going to happen with a goal of providing more warriors (and defenders) in the cybersecurity wars. The UK is worried (below) that the lack of computing education in schools means that not enough kids are getting interested in computing to work in cybersecurity. A new report by the National Audit Office claims the IT security skills gap will take up to 20 years to close, and leave UK PLC at risk of attack. The IT security skills shortage could hamper the UK’s ability to protect itself from cyber threats, as the “decade-long decline” in computer science teaching in schools and universities takes its toll. via IT skills shortage hampers UK response to cyber threats | IT PRO."
"799","2013-02-05","2023-03-24","https://computinged.wordpress.com/2013/02/05/open-source-edition-of-livecode-modern-hypercard/","HyperCard is likely still the world’s most successful end-user programming environment. Having an open source version that runs on all modern OS and mobile platforms would be fabulous. I’m backing. LiveCode lets you create an app for your smartphone, tablet, desktop computer or server, whether you are a programmer or not. We are excited to bring you this Kickstarter project to create a brand new edition of our award-winning software creation platform. LiveCode has been available as a proprietary platform for over a decade. Now with your support we can make it open and available to everyone. With your help, we will re-engineer the platform to make it suitable for open source development with a wide variety of contributors. Support our campaign and help to change coding forever. via Open Source Edition of LiveCode by RunRev Ltd — Kickstarter."
"800","2013-02-05","2023-03-24","https://computinged.wordpress.com/2013/02/05/measuring-the-success-of-online-education-duolingo-and-moocs/","Was anyone else bothered by the argument in this NYtimes blog post? “MOOCS aren’t effective in terms of completion rates; Duolingo is not a MOOC; Duolingo is effective.” So…what does that tell us about MOOCs? The paper on Duolingo effectiveness is pretty cool. I think it’s particularly noteworthy that more prior knowledge of Spanish led to less of an effect of Duolingo. I wonder if that’s because Duolingo is essentially using a worked example model, and worked examples do suffer from the expertise reversal effect. Moreover, there are early indications that the high interactivity and personalized feedback of online education might ultimately offer a learning structure that can’t be matched by the traditional classroom. Duolingo, a free Web-based language learning system that grew out of a Carnegie Mellon University research project, is not an example of a traditional MOOC. However, the system, which now teaches German, French, Portuguese, Italian, Spanish and English, has roughly one million users and about 100,000 people spend time on the site daily. via Measuring the Success of Online Education – NYTimes.com."
"801","2014-03-02","2023-03-24","https://computinged.wordpress.com/2014/03/02/sigcse-preview-khan-academy-gamifies-cs/","Briana Morrison and Betsy DiSalvo use theory about gaming and media to analyze how Khan Academy “gamifies” the study of computer science. What do they get right? What are they missing? Thursday from 10:45-12 in Room Regency VI. Gamification is the buzzword for adding gaming elements such as points or badges to learning experiences to make them more engaging and to increase motivation. In this paper we explore how Khan Academy has incorporated gaming elements into its CS learning platform. By mapping the literature on motivational processes to popular games we critically analyze how successful Khan Academy is at gamifying their site. via SIGCSE2014 – OpenConf Peer Review & Conference Management System."
"802","2018-04-30","2023-03-24","https://computinged.wordpress.com/2018/04/30/indian-supreme-court-rules-that-cs-degrees-cannot-be-provided-on-line/","On-line CS degrees cannot be on par with face-to-face CS degrees, rules the highest court in India. What makes an online class worse than a face-to-face class? I think that there’s a good bit of evidence that they are worse for many students, e.g., the NYTimes article about how on-line classes hinder students needing remedial help. I’m interested in the research question of why on-line classes have such differential results from face-to-face classes — it isn’t obvious to me. But the court’s rules says that on-line classes always are worse, and even that they always will be. There’s a design space to explore, and it’s short-sighted to rule that on-line is always worse and never on par. But how should the court have ruled? We need a measure of quality such that we can compare the results of the two degrees. It’s hard to figure out what such a measure might be — maybe success in work, or employability, or even a measure of skill or content knowledge. Any reasonable measure would be better than making a decision based on the medium. (Thanks to Amy Bruckman for sending me this article.) The Court affirmed the findings of the Punjab and Haryana High Court which had given a similar ruling two years ago, stating that a degree in the subject of ‘computer science’ from a distance learning course could not be considered on par with one attained by attending regular classes. The verdict came on a batch of appeals challenging the orders of the High Courts of Orissa and Punjab and Haryana by which the former held the degrees in engineering obtained by serving diploma holders through distance learning mode offered by certain deemed universities to be valid, whereas the latter termed such degrees to be invalid. The top court also directed the University Grants Commission (UGC) to restrain such institutions from using the word ‘University’ within one month from today, observing that commercialisation of education “seriously affects the credibility of standards in education, eroding power and essence of knowledge and seriously affecting excellence and merit”. Source: Cannot provide technical education through correspondence, rules Supreme Court"
"803","2013-06-04","2023-03-24","https://computinged.wordpress.com/2013/06/04/aaas-forum-can-moocs-work-for-all-students/","Way to go, Wendy! My Georgia Tech colleague did really well at a recent AAAS forum on MOOCs. The tone between the three speakers is striking. Anant Agarwal says “Hype is a good thing!” Kevin Wehrbach says that a MOOC is “an extraordinary teaching and learning experience.” Then Wendy Newstetter lets loose with concerns supported with citations and hard research questions. In any learning environment, students should gain “transferable knowledge” that can be applied in many contexts, said Newstetter, citing a 2012 National Academies’ report on Education for Life and Work. Specifically, she said, researcher James Pellegrino has identified an array of cognitive, interpersonal and intrapersonal skills that all students need in order to succeed. How can the array of new online learning models help students achieve those goals? Newstetter proposed a series of questions that should be answered by research. Educators need to know, for example, under what conditions technology-mediated experiences can result in enhanced learning competencies, she said. Do MOOCs effectively encourage students to develop perseverance, self-regulation and other such skills? Is knowledge gained in a MOOC “transferable,” so that what students learn can help them solve problems in other contexts? How can MOOCs be enhanced to promote interpersonal skills, and what intrapersonal attributes are needed for optimal learning in MOOCs? Some observers have suggested that MOOCs tend to work best for more affluent students, Newstetter noted. She mentioned the 2013 William D. Carey lecture, presented at the AAAS Forum by Freeman Hrabowski III, president of the University of Maryland, Baltimore County, who focused on strategies for helping underrepresented minorities succeed in science fields. “What he described was high-contact, intensive mentoring,” she pointed out. via AAAS – Massive Open Online Courses Help Make STEM Education More Accessible, But Do They Work for All Students?."
"804","2018-04-27","2023-03-24","https://computinged.wordpress.com/2018/04/27/lack-of-funding-leads-to-lack-of-teachers-leads-to-lack-of-cs-classes-we-may-need-to-change-our-strategy/","Pat Yongpradit of Code.org linked to this article on Facebook. Cambridge MA schools are turning away CS students because of a lack of teachers. Eight folks gave urgent pitches for at least one more computer teacher at Cambridge Ridge and Latin School. Teacher Liz Atwood, who said she was “disappointed to hear that our request for another hire was denied,” declared that demand was so high for computer science classes that, based on registration requests for next year from current ninth- through-11th graders, without a new teacher, “we will be turning away six classes of students.” Atwood, two parents and two current students stressed the importance of access to the classes, and several others appearing for other reasons echoed support after hearing their pleas. “Over 50 percent of students signing up for Level 2 [computer science] courses next year identify as African Americans,” Atwood said, speaking before eighth-graders had registered. “These are high-paying jobs. [State curriculum standards] are moving toward making computer science a graduation requirement. This seems like a step in the wrong direction” to reject a new hire, she said. From “Shortages in computer education stand out in a swift process for $191.1M school budget” in Cambridge Day I see this as evidence in support of my previous post that states are making a mistake by requiring CS without funding it. I don’t think Cambridge schools are requiring CS, but they’re allowing students to sign up for it without the funding and teachers to support those classes. There are multiple ways to fix this problem. We may not be able to achieve CS for All with CS-specific classes. They’re just too expensive. "
"805","2018-02-23","2023-03-24","https://computinged.wordpress.com/2018/02/23/what-universities-must-do-to-prepare-computer-science-teachers-uteach-leads-a-multi-university-group-to-grow-computing-education/","Kimberly Hughes, Director of the UTeach Institute at The University of Texas at Austin has written a blog post about a multi-university effort to grow CS education. They have an interesting set of recommendations. I look forward to seeing the white paper that the blog post promises! In-service teacher professional development has been key to the explosive growth of K–12 CS education offerings, but the role of universities in the preparation of computer science teachers is absolutely critical if we are going to address the current shortage of CS teachers at scale and with any kind of lasting impact. Yet there are precious few exemplars on which to model new programs. Partly this has been a chicken and egg problem. For example, the UTeach program at UT Austin has had an undergraduate pathway to CS certification for more than ten years. But with so little demand for CS teachers at secondary schools throughout the state, very few students were recruited and prepared. Now that the demand for CS teachers is increasing, UTeach Austin and other UTeach partner universities are ramping up and expanding their efforts. Source: What Universities Must Do to Prepare Computer Science Teachers: Networked Improvement in Action"
"806","2018-04-23","2023-03-24","https://computinged.wordpress.com/2018/04/23/open-letter-to-future-students-on-the-shortage-of-computer-science-faculty/","Thanks to Pat Yongpradit for sending the below links article to me. I knew that CS faculty have been complaining about the costs of the enrollment pressure. This was the first I’d heard of the students rising up to complain, and even to recommend to future students not to go into CS. Being able to take on and graduate its own majors, which the department already strains to do, is the bare minimum of what we should expect from a department at a liberal arts college. As much as Haverford likes to present itself as an environment where each student can explore a diversity of academic interests and cultivate a multifaceted worldview, right now the CS department is unable to help broaden the education of non-majors. It has even been forced to eliminate the CS minor, because non-majors simply cannot get into upper-level courses to complete it. That this should be necessary at an institution of our caliber is shameful, and as the situation continues to deteriorate it will actively undermine the institution’s status. What kind of a college, prospective students are (appropriately) thinking, cannot offer its students the ability to understand how computing works? Deception by omission from the admissions office about the availability of CS courses is a very limited tool in holding back this information, as illustrated by the recent open letter to admitted Bryn Mawr students urging them to consider not enrolling if they are interested in science (especially CS). Source: Open Letter: On the Shortage of Computer Science Faculty"
"807","2018-05-04","2023-03-24","https://computinged.wordpress.com/2018/05/04/ever-so-slowly-diversity-in-computing-jobs-is-improving-itll-be-equitable-in-a-century/","A great but sobering blog post from Code.org. Yes, computing is becoming more diverse, but at a disappointingly slow rate. Is it possible to go faster? Or is this just the pace at which we can change a field?  According to the Bureau of Labor Statistics, yes, but very slowly. We’ve analyzed the Current Population Survey data from the past few years to see how many people are employed in computing occupations, and the percentage of women, Black/African American, and Hispanic/Latino employees. What did we find? There are about 5 million people employed in computing occupations, 24% of whom are women, and 15% of whom are Black/African American or Hispanic/Latino. Since 2014, the trends in representation, although small, have been moving in the right direction — all three groups showed a tiny increase in representation. However, changes would need to accelerate significantly to reach meaningful societal balance in our lifetimes. If the current pace of increases continue, it would take over a century* until we saw balanced representation in computing careers. Source: Is diversity in computing jobs improving? – Code.org – Medium"
"808","2018-04-02","2023-03-24","https://computinged.wordpress.com/2018/04/02/states-requiring-cs-for-all-students-may-be-making-a-mistake/","As of this writing, New Jersey and Wyoming are the latest states to require CS for all their students (as described in this article) or to be offered in all their schools (as described in this Code.org post and this news article), respectively. Wyoming has a particularly hard hill to climb. As measured by involvement in AP exams, there’s just not much there — only 8 students took the AP CS A exam in the whole state last year, and 13 took AP CS Principles. In 2014, I wrote an article titled “The Danger of Requiring Computer Science in K-12 Schools.” I still stand by the claim that we should not mandate computer science for US schoolchildren yet. We don’t know how to do it, and we’re unlikely to fund it to do it well. I can’t find any news articles describing what funding New Jersey and Wyoming are going to put toward the goal of teaching CS across their state. How do you teach every student CS or teach CS in every school without any increase in funding? Based on what we’ve seen in other US states, I predict one of three things will happen: Neither of the first two options furthers the goal of having high-quality CS education for all students. The third one may be the best position, if funding doesn’t appear."
"809","2018-04-20","2023-03-24","https://computinged.wordpress.com/2018/04/20/teaching-computational-thinking-across-an-entire-university-with-guest-blogger-roland-tormey/","During Spring Break, Barbara and I were invited to go to Switzerland. Sure, when most people go someplace warm for Spring Break, let’s head to the mountains! Roland Tormey organized a fascinating workshop at EPFL in Lausanne, Switzerland (see workshop page here) to inform a bold and innovative new effort at EPFL. They want to integrate computational thinking across their entire university, from required courses for freshman, to support for graduate students doing Computational X (where X is everything that EPFL does). The initiative has the highest level of administrative support, with the President and Vice-President of Education for EPFL speaking at the workshop. The faculty really bought in — the room held 80-some folks, and it was packed most of the day. Roland got a good videographer who captured both of the keynotes well. I had the first keynote on “Improving Computing Education with Learning Sciences: Methods for Teaching Computing Across Disciplines.” I argued that we need different methods to teach computing across the curriculum — we can’t teach CS the same way we teach CS majors as future software developers. I talk about Media Computation, predictions (and they caught my audio demo with ukulele playing well), subgoal labeling, and Parsons problems.  Shriram Krishnamurthi had the second keynote on “Curriculum Design as an Engineering Problem.” He talked about the problems of transfer and how Bootstrap works. I liked how he broke down the problem of transfer — there there are three requirements: Deep structural similarities between the problems, explicit instruction, and a process for performing tasks. He showed how all other design disciplines have multi-stage processes, use multiple representations in their designs, and look at problems from multiple viewpoints. Mostly in CS classes, we just code. I learned about how Bootstrap scaffolds problem-solving, and includes all of those elements. I recommend the talk.  Barb’s panel on teaching computational thinking wasn’t captured. She talked about the methods she’s developed for teaching computing, including her great results on Parsons problems. In a short talk, she gave a lot of pointers to her work and others’ on how to teach CT. Roland sent me a note with what he took away from the workshop. I thought it was a great list, so with his permission, I’m including it here: For me, we also had a lot of other valuable take home points from the day: (1) We need to work on putting Computational thinking (and maybe Math and Physics too) into the context of the students’ own disciplines — at least, though the examples and exercises we choose. (2) The drive to better develop scientific thinking in disciplines like chemistry and life sciences and the development of CT are entirely consistent, but one shouldn’t eclipse the other. It’s not about replacing existing scientific processes with CT. It’s about augmenting them. (3) We need to help professors gather data on effective methods of teaching as well as help them become aware of methodologies with demonstrated effectiveness (like the Parsons Problems for example). (4) The exercises and exercise sessions will be crucial for making the link between CT and disciplines, but this implies giving the doctoral and teaching assistants a clear understanding of the goals and methods of CT. They have to understand what we are trying to achieve. (5) CT provides an understanding of, a language for, and a toolbox for analysing processes, and these can be applied in a lot of domains. However that is not going to happen unless we explicitly teach CT in ways that promote near and far transfer (6) We need to make the most of the EPFL initiative by properly evaluating the impact, which implies the need to collect some pre-intervention data now."
"810","2018-03-26","2023-03-24","https://computinged.wordpress.com/2018/03/26/new-programming-languages-might-make-enormous-difference-for-learning/","I was at a workshop at Google a couple weeks ago where someone asked me, “Do you still think that there’s a place for developing new programming languages in computing education?” I said, “ABSOLUTELY!”. We know little about how people learn programming, and developing new programming languages is important for improving usability, learnability, and productivity of programmers (professional, novice, end-user, casual, or conversational). The interplay between design of programming languages and research into how people learn programming languages is a hot and important research topic. (See, for example, the recent Dagstuhl seminar on empirical data for programming language design.) My Blog@CACM post for this month (see link here) is based on the cover story for the March Communications of the ACM (CACM), on “A Programmable Programming Language.” The (interesting and recommended) article is on building problem-specific programming languages. My post was about the educational questions raised by these languages. Would they be easier or harder to learn if they’re problem-specific? Will novices be willing to put in the effort to learn a programming language that is specific to a problem? Do problem-specific languages make it harder or easier to find (or train) programmers to work on old software (built in these problem-specific languages)? If a programmer learns a problem-specific programming language created at Company X, then leaves for Company Y and creates a similar problem-specific programming language, was intellectual property stolen? Barbara Ericson’s defense was March 12 (as mentioned here). It was very successful — not only did she pass, but all of her committee signed off on the same day. She’s Dr. Ericson! Alan Kay was on her committee and asked some insightful questions about her work with Parsons problems. In a Parson problem, students are ordering lines of code into a correct solution. Barb did her research using Python, and she’s also done work with Parsons problems in Java. These are pretty similar languages in terms of notional machines. What’s the influence of the programming language on student success with Parsons problems? What if the underlying notional machine was simpler to understand? Would students find it easier to sequence a program? In general, we explore non-imperative programming paradigms so rarely in computing education research. We change modality (e.g., Scratch), but not the underlying computational model. The work with Racket is a rare example. Alan mentioned HyperCard in his comments, which was explicitly designed to be easy to learn. Would HyperCard programs be easier for students to order correctly? I hope that we continue to invent new programming languages and explore the educational implications of them. There’s a big space of possible designs, and we have only started evaluating them empirically."
"811","2018-05-30","2023-03-24","https://computinged.wordpress.com/2018/05/30/a-place-to-get-feedback-and-develop-new-ideas-wipw-at-icer-2018/","Everybody’s got an idea that they’re sure is great, or could be great with just a bit of development. Similarly, everyone has hit a tricky crossroads in their research and could use a little nudge to get unstuck. The ICER Work in Progress workshop is the place to get feedback and help on that idea, and give feedback and help to others on their cool ideas. I did it a few years ago at the Glasgow ICER and had a wonderful day. You learn a lot, and you get a bunch of new insights about your own idea. As Workshop Leader (and the inventor of the ICER Work in Progress workshop series) Colleen Lewis put it, “You get the chance to borrow the brains of some really awesome people to work on your problem.” Colleen is the Senior Chair again this year, and I’m the Junior Chair-in-Training. The workshop is only one day and super-fun. If you’re attending ICER this year, please apply for the Work in Progress workshop! https://icer.hosting.acm.org/icer-2018/work-in-progress/ The application is due June 8 (it’s just a quick Google form). Let Colleen or me know if you have questions!"
"812","2015-09-18","2023-03-24","https://computinged.wordpress.com/2015/09/18/growing-evidence-that-lectures-disadvantage-underprivileged-students/","The New York Times weighs in on the argument about active learning versus passive lecture. The article linked below supports the proposition that college lectures unfairly advantage those students who are already privileged. (See the post about Miranda Parker’s work for a definition of what is meant by privilege.) The argument that we should promote active learning over passive lecture has been a regular theme for me for a few weeks now: The NYTimes piece pushes on the point that this is not just an argument about quality of education. The argument is about what is ethical and just. If we value broadening participation in computing, we should use active learning methods and avoid lecture. If we lecture, we bias the class in favor of those who have already had significant advantages. Thanks to both Jeff Gray and Briana Morrison who brought this article to my attention. Yet a growing body of evidence suggests that the lecture is not generic or neutral, but a specific cultural form that favors some people while discriminating against others, including women, minorities and low-income and first-generation college students. This is not a matter of instructor bias; it is the lecture format itself — when used on its own without other instructional supports — that offers unfair advantages to an already privileged population. The partiality of the lecture format has been made visible by studies that compare it with a different style of instruction, called active learning. This approach provides increased structure, feedback and interaction, prompting students to become participants in constructing their own knowledge rather than passive recipients. Research comparing the two methods has consistently found that students over all perform better in active-learning courses than in traditional lecture courses. However, women, minorities, and low-income and first-generation students benefit more, on average, than white males from more affluent, educated families. Source: Are College Lectures Unfair? – The New York Times"
"813","2017-03-31","2023-03-24","https://computinged.wordpress.com/2017/03/31/the-need-for-better-software-and-systems-to-support-active-cs-learning/","I believe strongly in active learning, such as Peer Instruction (as I have argued here and here). I have discovered that it is far harder than I thought to do for large CS classes. I decided to use clickers in CS1315 this semester (n=217), rather than use the colored index cards that I’ve used in the past for Peer Instruction (see blog post here). With cards, I can only take a vote — no histogram of results, and I can’t provide any grade value for the participation. With clickers, I can use the evidence-based practice as developed by Eric Mazur, Cynthia Lee, Beth Simon, Leo Porter, et al. (plugging the Peer Instruction for CS website): To make it worthwhile, I’m giving 10 points of final course grade for scoring over 50% on the second question (only — first one is just to get predictions and activate knowledge), 5 points for scoring over 30%. I’m trying to do this all with campus-approved standards: TurningPoint clickers, TurningPoint software. I’d love to use an app-based solution, but our campus Office of Information Technologies warns against it. They can’t guarantee that, in large classes, the network will support all the traffic for everyone to vote at once. The process is so complicated: Turn on clickers in our learning management software (a form of Sakai called T-Square), download the participant list, open up ResponseWare and define a session (for those using the app version), plug in receiver. After class, save the session, integrate the session with the participant list, then integrate the results with T-Square for grades. The default question-creation process in TurningPoint software automatically shows results and demands a specific format (e.g., which makes it hard to show screenshots as part of a question), so I’m using “Poll Anywhere” option, which requires me to process the session file after class to delete the first question (where everyone votes to prime their thinking) and to define the correct response(s) for each question. I’m willing to do all that. But it’s more complicated than that. Turns out that Georgia Tech hasn’t upgraded to the latest version of the TurningPoint software (TurningPoint Cloud). GT only supports TurningPoint 5. TurningPoint stopped distributing that version of the software in May 2016, so you have to get it directly from the on-campus Center for Teaching and Learning. I got the software and installed it — and discovered that it doesn’t run on the current version of MacOS, Sierra. I did find a solution. Here’s what I do. Before each lecture, I move my lecture slides to a network drive. When I get to class, I load my lecture on the lecture/podium computer (which runs Windows and TurningPoint 5 and has a receiver built-in). I gather all the session data while I teach with the podium computer and do live coding on my computer (two screens in the massive lecture hall). I save the session data back to the network drive. Back in my office, I use an older Mac that still runs an older version of MacOS to download the session data, import it using TurningPoint 5, do all the deletions of priming questions and correct-marking of other questions, then integrate and upload to T-Square. Counting my laptop where I make up slides and do live coding, my Peer Instruction classes require three computers. Every CS teacher should use active learning methodologies in our classes. Our classes are huge. We need better and easier mechanisms to make this work. "
"814","2016-08-26","2023-03-24","https://computinged.wordpress.com/2016/08/26/white-house-call-to-action-incorporating-active-stem-learning-strategies-into-k-12-and-higher-education/","I’m so happy to see this! I’ve received significant pushback on adopting active learning among CS faculty. Maybe a White House call can convince CS higher education faculty to adopt active learning strategies? Active learning strategies include experiences such as: Today, the White House Office of Science and Technology Policy is issuing a call to action to educators in K-12 and higher education, professional development providers, non-profit organizations, Federal agencies, private industry, and members of the public to participate in a nationwide effort to meet the goals of STEM for All through the use of active learning at all grade levels and in higher education. Source: A Call to Action: Incorporating Active STEM Learning Strategies into K-12 and Higher Education | whitehouse.gov"
"815","2015-09-16","2023-03-24","https://computinged.wordpress.com/2015/09/16/statistics-worrying-about-losing-ground-to-cs-claim-that-cs-isnt-worthy/","The linked blog post below bemoans the fact that the AP CS is growing, perhaps at the expense of growth in AP Statistics. AP Stats is still enormously successful, but the part of the post that’s most interesting is the author’s complaints about what’s wrong with CS. I read it as, “Students should know that CS is not worthy of their attention.” It’s always worthwhile to consider thoughtful critiques seriously. The author’s points about CS being mostly free of models and theories is well taken. I do believe that there are theories and models used in many areas of CS, like networking, programming languages, and HCI. I don’t believe that most CS papers draw on them or build on them. It’s an empirical question, and unfortunately, we have the answer for computing education research. A recent multi-national study concluded that less than half of the papers in computing education research draw on or build on any theory (see paper here). Though the Stat leaders seem to regard all this as something of an existential threat to the well-being of their profession, I view it as much worse than that. The problem is not that CS people are doing Statistics, but rather that they are doing it poorly: Generally the quality of CS work in Stat is weak. It is not a problem of quality of the researchers themselves; indeed, many of them are very highly talented. Instead, there are a number of systemic reasons for this, structural problems with the CS research “business model.” Source: Statistics: Losing Ground to CS, Losing Image Among Students"
"816","2016-03-04","2023-03-24","https://computinged.wordpress.com/2016/03/04/friction-between-programming-professionals-and-beginners/","It’s not obvious that professional programmers are the best people to answer questions for beginners, yet that’s often recommended as a strategy for providing support to CS students when there are too few teachers. The below article gathers some stories about user experience, and offers advice on how to make the interaction of programming professionals and beginners more successful. Where is the most obvious place to ask a programming question? Stack Overflow. Stack Overflow is a community of 4.7 million programmers, just like you, helping each other. Join them; it only takes a minute. Join the Stack Overflow community to: Ask programming questions, […] — Stack Overflow (the front page) It sounds like exactly the right place to be. It even sounds friendly. But actually asking questions on Stack Overflow is often far from friendly, for a beginner programmer. “I gave up programming after the last time I asked a question on StackOverflow.”— commenter on reddit Stack Overflow users ands moderators are quick to downvote and close questions, for a multitude of reasons. These reasons are often surprising to first-time users. I’m going to pick on Stack Overflow as an example in this article, because it is the most obvious place to ask questions, but the same problems can be seen anywhere that beginners ask questions. “I must have gone to a couple dozen IRC rooms, whatever online communities I could find. Everywhere I went people shat on me, and I never got an answer to a single question.”— commenter on reddit Source: Friction Between Programming Professionals and Beginners – Programming for Beginners"
"817","2014-03-12","2023-03-24","https://computinged.wordpress.com/2014/03/12/wisdom-of-massive-open-online-courses-now-in-doubt-hennessy-critiques-moocs/","I thought John Hennessy’s quote below was remarkable, and quite different from his tsunami rhetoric of just last July. I was also struck by this quote later in the piece: “MOOCs are basically the 21st-century equivalent of reading a bunch of books and saying you got a degree.” “Two words are wrong in ‘MOOC’: massive and open,” Stanford President John Hennessy said in a widely noted interview with the Financial Times. At Tufts University outside Boston, members of the schools of arts and sciences and faculty in the engineering department approved a policyin December that would allow more Web-based classes to be used toward graduation. But Tufts instructors stopped short of joining the world of MOOCs. “So much of the big conversation around the country is around these massive online courses, and from our perspective, we don’t see evidence that that’s a model that leads to real learning,” Education Policy Committee head David Hammer told The Tufts Daily, the school newspaper. “If I had 750 students, if I had 7,500 students I’m not going to hear and respond to student thinking.” via Wisdom of massive open online courses now in doubt – Washington Times."
"818","2013-07-11","2023-03-24","https://computinged.wordpress.com/2013/07/11/context-matters-when-designing-courses-too-know-thy-learner/","In 1994, Elliot Soloway, Ken Hay, and I wrote an article about “learner-centered design.” We contrasted it with the prevailing paradigm of “user-centered design,” arguing that designing for learners is different than designing for experts (which, we suggested, is really what user-centered design is). I like the below as pointing toward borrowing ideas from modern UX design for learning design. The most important lesson that we try to teach undergraduates about human-computer interface design is, “Know Thy User, for the User is not You.” You have to get to know your user, and they’re not like you. You can’t use introspection to design interfaces. That same lesson is what we’re hearing below, but about learning. “Know Thy Learner, for the Learner is not You.” Your learner has a different context than you, and you have to get to know it before you can design for it. “Transferring education from the United States to Africa wouldn’t work,” argued Bakary Diallo, rector of African Virtual University. “Because we have our own realities,” he added, “our own context and culture.” Naveed A. Malik, founding rector of the Virtual University of Pakistan, echoed that sentiment. “This is something that we learned very early in our virtual-university experience,” he said. “We couldn’t pick up a course from outside and then transplant it into a Pakistani landscape—the context was completely different.” via Virtual Universities Abroad Say They Already Deliver ‘Massive’ Courses – Wired Campus – The Chronicle of Higher Education."
"819","2014-03-01","2023-03-24","https://computinged.wordpress.com/2014/03/01/sigcse2014-preview-engaging-underrepresented-groups-in-high-school-introductory-computing-through-computational-remixing-with-earsketch/","EarSketch is an interesting environment that I got to demo for Jason Freeman and Brian Magerko at the Dagstuhl Livecoding conference. It’s Python programming that creates complex, layered music. The current version of EarSketch isn’t really livecoding (e.g., there’s a “compilation” step from program into digital audio workstation), but I got to see a demo of their new Web-based version which might be usable for live coding . I got to see the preview talk and was blown away. The paper is about use in a 10 week programming unit in a high school course, with significant under-represented minority and female involvement. The evaluation results are stunning. The authenticity angle here is particularly interesting. In the preview talk, Jason talked about “authentic STEAM.” They have audio loops from real musicians, and involve hip-hop artists in the classroom. Students talk about how they value making music that sounds professional, with tools that professional musicians use. In this paper, we describe a pilot study of EarSketch, a computational remixing approach to introductory computer science, in a formal academic computing course at the high school level. EarSketch, an integrated curriculum, Python API, digital audio workstation (DAW), audio loop library, and social sharing site, seeks to broaden participation in computing, particularly by traditionally underrepresented groups, through a thickly authentic learning environment that has personal and industry relevance in both computational and artistic domains. The pilot results show statistically significant gains in computing attitudes across multiple constructs, with particularly strong results for female and minority participants. via SIGCSE2014 – OpenConf Peer Review & Conference Management System."
"820","2013-03-07","2023-03-24","https://computinged.wordpress.com/2013/03/07/steam-education-gains-momentum-in-schools-more-focus-on-design/","I’ve heard about the STEAM movement (STEM + Art) and thought it was a good idea. Thinking of the “Art” piece as also including Design makes it a great idea. According to the website, the movement aims to include art and design in STEM policy decisions; encourage the integration of art and design in K-20 education; and influence employers to hire artists and designers to drive innovation. “Design is increasingly becoming a key differentiator for technology startups and products,” the website states, and art and design “provide real solutions for our everyday lives, distinguish American products in a global marketplace, and create opportunity for economic growth.” via ‘STEAM’ education gains momentum in schools | eSchool News."
"821","2013-07-09","2023-03-24","https://computinged.wordpress.com/2013/07/09/seymour-papert-tribute-at-idc-2013/","I only planned to watch a little bit of this. Allison Druin’s talk was particularly recommended to me. So I started watching, and Paulo Blikstein’s opening remarks were so intriguing. (I loved his characterization that today’s notions of “personalized learning” were “like telling a prisoner that he can walk around his cell all he wants.”) I hadn’t heard Edith Ackermann in decades, and was particularly struck by her comment, “Any theory of learning that ignore resistances to teaching misses the point!” Mike Eisenberg, Mitchel Resnick, and Uri Wilensky were all wonderful and insightful talks, and Allison was as good as the recommendation promised. 90 minutes later, I’m explaining to my family where I’d disappeared to… The intellectual ideas discussed are fascinating, from epistemology to politics to education to design. Recommended."
"822","2013-05-30","2023-03-24","https://computinged.wordpress.com/2013/05/30/design-based-implementation-research-what-we-need-for-cs10k-and-ecep/","This caught my eye as something that we really need to push computing education. For CS10K to be successful, we need a mesh of education research with public policy work. That’s what ECEP is about. In particular, this kind of multiple stakeholders work is what I think that the U. Chicago Landscape Study is pointing toward. “Design-Based Implementation Research applies design-based perspectives and methods to address and study problems of implementation…DBIR challenges education researchers to break down barriers between sub-disciplines of educational research that isolate those who design and study innovations within classrooms from those who study the diffusion of innovations.” From the Introduction to the forthcoming NSSE Yearbook, Design-Based Implementation Research: Theories, methods, and exemplars. This web site presents resources related to an emerging model of research and development called Design-Based Implementation Research (DBIR). DBIR has four key principles: via Home."
"823","2015-04-10","2023-03-24","https://computinged.wordpress.com/2015/04/10/stem-as-the-goal-steam-as-a-pathway/","Dr. Gary May, Dean of the College of Engineering at Georgia Tech, is one of my role models. I’ve learned from him on how to broaden participation in computing, what academic leadership looks like, and how to make sure that education gets its due attention, even at a research-intensive university. He wrote an essay (linked below) critical of the idea of “STEAM” (Science, Technology, the Arts, and Mathematics). I just recently wrote a blog post saying that STEAM was a good idea (see link here). I’m not convinced that I’m at odds with Gary’s point. I suspect that the single acronym, “STEM” or “STEAM,” has too many assumptions built into it. We probably agree on “STEM,” but may have different interpretations of “STEAM.” The term “STEM” has come to represent an emphasis on science, technology, engineering, and mathematics education in schools. A recent Washington Post article critiques exactly that focus: Why America’s obsession with STEM education is dangerous. From Gary’s essay, I think he reads “STEAM” to mean “We need to integrate Arts into STEM education.” Or maybe, “We need to emphasize Arts as well as STEM in our schools.” Or even, “All STEM majors must also study Art.” Gary argues that STEM is too important to risk diffusing by adding Art into the mix. That’s not exactly what I mean when I see a value for STEAM. I agree that STEM is the goal. I see STEAM as a pathway. Media Computation is a form of blending STEM plus Art. I’m teaching computer science by using the manipulation of media at different levels of abstraction (pixels and pictures, samples and sounds, characters and HTML, frames and video) as an inviting entryway into STEM. There are many possible and equally valid pathways into Computing, as one form of STEM. I am saying that my STEAM approach may bring people to STEM who might not otherwise consider it. I do have a lot of evidence that MediaComp has engaged and retained students who didn’t used to succeed in CS, and that part of that success has been because students see MediaComp as a “creative” form of computing (see my ICER 2013 paper). I have heard arguments for STEAM as enhancing STEM. For example, design studio approaches can enhance engineering education (as in Chris Hundhausen’s work — see link here). In that sense of STEAM, Art offers ways of investigating and inventing that may enhance engineering design and problem-solving. That’s about using STEAM to enhance STEM, not to dilute or create new course requirements. Jessica Hodgins gave an inspiring opening keynote lecture at SIGCSE 2015 (mentioned here) where she talked about classes that combined art and engineering students in teams. Students learned from each other new perspectives that informed and improved their practice. “STEM” and “STEAM” as acronyms don’t have enough content to say whether we’ve in favor or against them. There is a connotation for “STEM” about a goal: More kids need to know STEM subjects, and we should emphasize STEM subjects in school. For me, STEM is an important goal (meaning an emphasis on science, technology, engineering, and mathematics in schools), and STEAM is one pathway (meaning using art to engage STEM learning, or using art as a valuable perspective for STEM learners) to that goal. No one — least of all me — is suggesting that STEM majors should not study the arts. The arts are a source of enlightenment and inspiration, and exposure to the arts broadens one’s perspective. Such a broad perspective is crucial to the creativity and critical thinking that is required for effective engineering design and innovation. The humanities fuel inquisitiveness and expansive thinking, providing the scientific mind with larger context and the potential to communicate better. The clear value of the arts would seem to make adding A to STEM a no-brainer. But when taken too far, this leads to the generic idea of a well-rounded education, which dilutes the essential need and focus for STEM. via Essay criticizes idea of adding the arts to push for STEM education @insidehighered."
"824","2014-12-15","2023-03-24","https://computinged.wordpress.com/2014/12/15/stem-is-incredibly-valuable-but-steam-is-for-innovation/","I am sympathetic to this argument for the value of STEAM (STEM+Art), rather than just STEM. I strongly believe in the value of creative expression in learning STEM subjects. That’s core to our goals for Media Computation. I believe that the STEAM perspective is why MediaComp has measurably improved motivation, engagement, and retention. As a researcher, it’s challenging to measure the value of including art in learning STEM. I’m particularly concerned about the argument below. Singapore and Japan are less creative because they have less art in school? If we include more art in our schools, our students will be more innovative? If we’re already more innovative, and we have too little art classes, why should we believe that adding more art will increase our innovation? But STEM leaves out a big part of the picture. “It misses the fact that having multiple perspectives are an invaluable aspect of how we learn to become agile, curious human beings,” Maeda said. “The STEM ‘bundle’ is suitable for building a Vulcan civilization, but misses wonderful irrationalities inherent to living life as a human being and in relation to other human beings.” A foundation in STEM education is exceptional at making us more efficient or increasing speed all within set processes, but it’s not so good at growing our curiosity or imagination. Its focus is poor at sparking our creativity. It doesn’t teach us empathy or what it means to relate to others on a deep emotional level. Singapore and Japan are two great examples. “[They] are looked to as exemplar STEM nations, but as nations they suffer the ability to be perceived as creative on a global scale.” Maeda said. Is the United States completely misinformed and heading down the wrong track? Not entirely. Science, technology, engineering and math are great things to teach and focus on, but they can’t do the job alone. In order to prepare our students to lead the world in innovation, we need to focus on the creative thought that gives individuals that innovative edge. via STEM is incredibly valuable, but if we want the best innovators we must teach the arts – The Washington Post."
"825","2017-02-10","2023-03-24","https://computinged.wordpress.com/2017/02/10/georgia-techs-earsketch-uses-music-to-teach-students-coding/","Pleased to see that my colleagues are getting recognition for their cool work. The White House recognized Georgia Tech last Monday for a coding program that uses music to teach code. It was recognized as part of its national initiatives for Computer Science Education Week.EarSketch is a free online tool that uses music to teach the programming languages of Python and JavaScript.Georgia Tech professors plan to expand the program to more than 250 middle and high schools nationwide next year. Source: Georgia Tech’s EarSketch Uses Music To Teach Students Coding | WABE 90.1 FM"
"826","2014-03-03","2023-03-24","https://computinged.wordpress.com/2014/03/03/sigcse-preview-a-bof-on-state-level-computing-education-policy-change/","Please do consider coming to the Birds of a Feather session (#20) this Thursday (see SIGCSE 2014 Program) from 6:10-7:00 where Rick Adrion (my ECEP friend and co-PI) will be hosting a discussion on state-level change to education policy in support of computing education. Here’s what we have in mind: Agenda: 6:10-6:40 Choose Group that is most important to your state (or you). Complete short questionnaire and hand to Group Leader. Groups: – Making CS Count – Getting Computing into K12: curricula, standards, promoting – K12 Teacher Certification/Licensure – Teacher Professional Development – Creating/Expanding State-Based Alliances for CS Ed Reform Groups will identify 3-4 Action Items and/or Best Practices (30 minutes) 6:40-6:55 Report Out (5 minutes each) State-Level Advocacy for Computing Education Reform While it is exciting to see an increasing number of national efforts to reform computing education, such as those led by CSTA, Computing in the Core, ACM, NCWIT, code.org and many others, real change at the state, district and school level requires the active participation of individuals and local organizations to engage policy makers, superintendents and communities. The U.S. education system is highly distributed, with critical decisions pushed more to the community level and less at the national (or even state) level – with large differences between neighboring states. The system is organized along pathways of elementary schools, middle and high schools, community colleges, four-year colleges, and universities. A reform process for improving computing education pathways will take place at multiple levels and state by state. This birds-of-a-feather session will bring together emerging leaders at the state level with representatives from national initiatives to share best practices for implementing change."
"827","2014-03-04","2023-03-24","https://computinged.wordpress.com/2014/03/04/call-for-participants-in-2nd-annual-acm-non-doctoral-computing-programs-study/","2nd Annual ACM NDC Study Of Non-Doctoral Granting Departments in Computing If you… Please contact ACM Education Manager Yan Timanovsky (timanovsky@hq.acm.org) ASAP! Deadline is March 16 (extensions possible upon request).  Why participate: • As an annual survey, NDC produces timely data on enrollment, degree production, student body composition, and faculty salaries/demographics that can benchmark your institution/program(s) and invite useful conversations with your faculty and administration. • Those who qualify for and complete NDC in its entirety will be entered in a drawing to receive one of (3) unrestricted grants of $2,500 toward your department’s discretionary fund.     "
"828","2014-03-05","2023-03-24","https://computinged.wordpress.com/2014/03/05/new-acm-report-on-the-need-for-cs-in-k-12/","ACM has just released a report arguing for the need for computer science in K-12 schools. They are very strongly making the jobs argument. The appendix to the report details state-by-state what jobs are available in computing, the salaries being paid for those jobs, and how many computing graduates (including how many AP CS exams vs other AP exams were taken in 2013) in that state. The report Rebooting the Pathway to Success: Preparing Students for Computing Workforce Needs in the United States calls on education and business leaders and public policy officials in every state to take immediate action aimed at filling the pipeline of qualified students pursuing computing and related degrees, and to prepare them for the 21st century workforce. The report provides recommendations to help these leaders join together to create a comprehensive plan that addresses K-12 computer science education and that aligns state policy, programs, and resources to implement these efforts. via ACM Report – Rebooting the Pathway to Success."
"829","2014-03-06","2023-03-24","https://computinged.wordpress.com/2014/03/06/getting-politicians-to-support-cs-when-they-dont-understand-cs/","The article below describes a political furor over appointing someone to lead an effort to support computing education — who doesn’t herself understand much about computing. But this is a general problem, and is probably a problem for engineering education, too. Most US politicians in Washington DC don’t have STEM backgrounds. Few know anything about engineering. Fewer still know anything about computer science. Even if they really want to support STEM, engineering, and computing education, not knowing what it is themselves makes it more challenging for them to make good choices. The row over Tory cronies in taxpayer-backed positions look set to intensify after it emerges the boss of the government’s coding education initiative cannot code — or even give a decent explanation of what is involved. Figures behind the scheme include Michael Gove, who is at the centre of the furore over Conservative placemen in Whitehall and the ‘quangocracy’. Conservative activist Lottie Dexter was ridiculed by IT experts and educationalists for her clueless performance on Newsnight — in which she claimed that teachers could be trained how to educate students in computer programming “in a day” via Tories’ ‘Year of Code’ boss Lottie Dexter can’t code | Political Scrapbook."
"830","2014-03-07","2023-03-24","https://computinged.wordpress.com/2014/03/07/interview-with-friday-sigcse-2014-keynoter-hadi-partovi/","Hadi Partovi will be delivering the keynote today at SIGCSE 2014. The interview they just had with him last month on ACM’s website has some nice bits: As a tech industry veteran and visionary, what would you say to young people who may not realize that two-thirds of the jobs in software engineering are outside the technology sector? I would say that the reason to study software isn’t because you want to get a job in technology. School teaches you how to dissect a frog, or how electricity works, even if you want to become a journalist or a lawyer. In the 21st century, it’s equally important, or more important even, to know how to “dissect an app” or learn how the Internet works, even if you want to become a doctor, a chemist, or the President of the United States. Maybe you’ll fall in love with it and decide to get a job in software, and if you do, you’ll be in one of the most creative, highest-paying careers in the world. Most students who study computer science in high school will go on to careers outside of computing — but they will still benefit from it. This is a fundamental, foundational science for the 21st century. via February 6, 2014: People of ACM: Hadi Partovi — Association for Computing Machinery."
"831","2014-03-08","2023-03-24","https://computinged.wordpress.com/2014/03/08/seeking-advice-on-python-media-computation-fourth-edition-for-q1-2015/","Pearson has asked me to update our Python Media Computation book, “Introduction to Computing and Programming: A Multimedia Approach.” This will be the fourth edition. I plan to address the errata (as well as the ones I haven’t yet posted to the website), add new assignments, and change out the pictures (a lot of those pictures are 12 years old now). I think I’m going to give up on trying to do screen-scraping off a live website — they keep changing too fast. Instead, I might add something about how to parse CSV files, which are common and useful. I have a couple of bigger ideas for changes, and I’d appreciate feedback from readers. (And I’m certainly interested in other advice you might give me.) (1) CPython cross-platform libraries have come a long way since the 3rd edition was written. It’s likely that we could write a media library for CPython that works much like media library in JES. A CPython version of Media Computation would likely be faster. We probably would not re-create JES in CPython. It will take some time to develop a CPython version, so a Jython/JES-based 4th edition could be available in early 2015 (aiming to be out before SIGCSE 2015), but a CPython version would probably be mid-2015. (2) At Georgia Tech, we have started teaching the book with a brief excursion into strings and lists before introducing pictures. We talk about the medium as being language or text, and we manipulate characters in the strings using algorithms like those we later use with pixels in a picture or samples in a sound. For example, we can “mirror” words as we later mirror sounds or pictures. The advantage is that students can see all the characters in the string, and print out every step of the loop — where neither of those is reasonable to do with pictures or sounds. We’re considering adding an OPTIONAL chapter at the beginning of the book in the 4th edition. We wouldn’t remove the introduction to loops in Chapter 3. We would move some of the string processing from Chapter 10 into this new Chapter 2.5, but leave methods and file I/O for Chapter 10. You would be able to use the book as-is, but if you want to start with characters and words as a text medium first, we would support that path, too. Thanks for any advice you would like to give me on producing the 4th edition of the book! "
"832","2014-03-10","2023-03-24","https://computinged.wordpress.com/2014/03/10/the-joy-of-teaching-computer-science-in-the-age-of-facebook-interview-with-mehran-sahami/","Great interview with Stanford’s Mehran Sahami. I think he has his finger on what’s influencing students going into CS today. And now a lot more students everywhere are choosing to major in computer science. In terms of that trend turning around, part of it is the recovery in the high-tech economy, part of it is a change in perception. When people see companies like Google and Facebook being founded by relatively young people, they feel empowered and think: I can do that. And there’s the realization that the demand for computing, at least looking out over the next ten years, is certainly going to be there. What are the factors that are still holding students back from studying computer science? The problem is the educational opportunities. You take your average high school, and kids have several years of math classes, they have several years of science classes, several years of English, options for various kinds of vocational training, or history, or economics. But very few schools actually offer real computer science classes. So students don’t get the exposure in high school, of those who go to college, some have never considered computing before because they don’t really know what it is. One of the phenomena we see at Stanford is that the vast majority of our students, 90 percent of undergrads, take computer science classes even though there’s no requirement to do so. Some of them take it and end up loving it, but it’s too late to major in computer science. Had they been exposed to computer science earlier on, they could’ve started at a point that would allow them to pursue this as a major and as a career. When you take your first class your senior year and realize you love it, but you’re going to graduate in another quarter, you can’t complete a major. If there are more of those opportunities earlier in the pipeline, it will help address this. via The Joy of Teaching Computer Science in the Age of Facebook – Hope Reese – The Atlantic."
"833","2014-03-11","2023-03-24","https://computinged.wordpress.com/2014/03/11/are-we-getting-better-at-handling-abstraction-radiolab-podcast-on-killing-babies-saving-the-world/","I’m a fan of Radiolab podcasts. The one referenced below talks about the Flynn effect. Comparison of various tests of IQ over decades suggest that we’ve been getting smarter over the last 100 years. Josh Greene argues that we (as humans in the developing world) may be developing greater ability to handle abstract thinking. Abstraction isn’t everything in computer science (as Bennedsen and Caspersen showed us in 2008), but it is important. Could our problems with computing education resolve over time, because we’re all getting better at abstraction? Might it become easier to teach computer science in future decades, as we develop better cognitive abilities? Given that performance on the Rainfall Problem has not improved over the last thirty years, I doubt it, but it’s an intriguing hypothesis. Robert talks to Josh Greene, the Harvard professor we had on our Morality show. They revisit some ideas from that show in the context of the big, complicated problems of today (think global warming and nuclear war). Josh argues that to deal with those problems, we’re going to have to learn how to make better use of that tiny part of our brain that handles abstract thinking. Not a simple proposition, but, despite the odds, Josh has hope. via Killing Babies, Saving the World – Radiolab."
"834","2014-03-13","2023-03-24","https://computinged.wordpress.com/2014/03/13/bard-college-offers-an-mat-with-a-concentration-in-cs-ed/","Announced on the CSTA website. There are relatively few pre-service CS Ed programs in the United States. Bard College Master of Arts in Teaching Program, a CSTA sponsoring school, is accepting applications for the 2014-2015 preservice program. Bard College’s preservice teaching program offers a one-year, 63 credit Master of Arts in Teaching degree and NYS Initial Teaching Certification, grades 7-12 for math, biology, history, and English. Applications are being accepted for the program now through April 30th. Responding to a nationally recognized need for computer science curriculum in our public schools, the Bard MAT Program is offering a unique curriculum for math teachers with a commitment to teaching computer science in secondary public schools. The student dedicated to becoming a mathematics and computer science teacher values the Bard MAT Program’s commitment to the discipline with its substantive research projects in mathematics, computer science, and math/cs education. Students will work with computer science teachers in the middle and high schools in New York’s Hudson Valley, preparing for teaching careers in computer science. Visit our website http://www.bard.edu/mat for more information Apply online at: https://bard.slideroom.com/"
"835","2014-03-14","2023-03-24","https://computinged.wordpress.com/2014/03/14/depressing-story-in-washington-post-keeping-women-in-high-tech-fields-is-big-challenge/","I know that NCWIT has been exploring how to support male advocates for women. Overall, this article seemed to be saying that women are leaving tech companies, and there’s not much we can do about it. But keeping women in those fields — and helping them reach the top — may be an even bigger challenge. A report released Wednesday by the Center for Talent Innovation (CTI), a research think tank founded by economist Sylvia Ann Hewlett, finds that U.S. women working in these fields are 45 percent more likely than their male peers to leave the industry within a year. In addition, the study also found that nearly one-third of senior leaders — both men and women — who work in science, engineering and technology fields reported that a woman would never reach the top position in their companies. “Even the senior guys who are in a position to make change for the women in their company don’t feel like they can do it,” said Laura Sherbin, the director of research for CTI. When that’s the case, she asks, “what’s left?” via Keeping women in high-tech fields is big challenge, report finds – The Washington Post."
"836","2014-03-17","2023-03-24","https://computinged.wordpress.com/2014/03/17/studying-under-representation-in-ap-cs-from-the-perspective-of-a-single-state/","Mihaela Sabin at University of New Hampshire Manchester took Barb’s AP analysis, and produced a version specific to New Hampshire. Quite interesting — would be great to see other states do this! 77% exam takers passed the test, which is closer to the upper end of the 43% – 83% range reported across all states. Only twelve girls took the AP CS exam, which represents 11.88% of all AP CS exam takers. This participation percentile of girls taking the exam is 4 times smaller that female representation in the state and nation. Half of the girls who took the exam passed. 82% of the boys who took the exam passed. One Hispanic and two Black students took the AP CS exam. The College Board requires that a minimum of five students from a gender, racial, and ethnic group take the test in order to have their passing scores recorded. 2012 NH census data reports that Blacks represent 1.4% of the state population and Hispanics represent 3%. Having two Black students taking the test in 2013 means that their participation of 1.98% of all AP CS exam takers is 1.4 times higher than the percentage of the Black population in the state of NH. However, Hispanics participation in the AP CS exam of 0.99% is 3 times lower than their representation of 3% in the state. nh-underrepresentation-hs-computing-education – Google Drive."
"837","2014-03-18","2023-03-24","https://computinged.wordpress.com/2014/03/18/candidate-for-massachusetts-governor-pushing-cs-ed/","An interesting piece on “The importance of expanding CS Education in Massachusetts.” I’m particularly interested in her use of AP CS data to argue for the need to broaden access to computing education. In July, the Boston Globe reported that, of the nearly 86,000 Advanced Placement tests taken by high school students in Massachusetts, only about 900 were in computer science. This is far too low for a state that aspires to lead the world in technological innovation. Part of the problem is that, too often, students simply don’t have the interest, or the basic computer skills, necessary to tackle higher-level computer science courses. But the greater challenge, across all levels, is that we do not have enough computer science teachers, so students who are interested are left out in the cold. In 2012, more than half of all students who passed the computer science AP exam came from just 14 high schools around the state, meaning that the other 364 high schools in Massachusetts accounted for only around 275 students who passed the exam. via Boston Governor Martha Coakley Economy, Education & Job Creation Platform | BostInno."
"838","2014-03-19","2023-03-24","https://computinged.wordpress.com/2014/03/19/2014-annual-csta-conference-reserve-your-place/","I’ve mentioned before that Yasmin Kafai and Michael Kölling will be keynoters there. Barbara and I will also be there, offering a MediaComp Python workshop. 2014 CSTA Annual Conference July 14-15, 2014 Pheasant Run Resort, St. Charles, Illinois  The CSTA annual conference is a professional development opportunity for computer science and information technology teachers who need practical, classroom-focused information to help them prepare their students for the future. Highlights:  Some of this year’s session topics include:  Keynotes:  Pre-registration is required and will be accepted for the first 500 teachers. The registration deadline is June 26, 2014. Also, please note that you must complete the payment portion of the online form in order to be fully registered for the conference!  Thanks to the generous donations of our sponsors, the registration fee of $75 (+$60 per workshop) includes lunch, resource materials, and a closing session raffle. The 2014 CSTA Annual Conference is made possible by the generous support of Oracle and Universal Technical Institute. Please note that all workshops are “bring your own laptop” and that workshop registration is limited to 30-40 participants; so be sure to register early to get your workshop choice. Register at: www.cstaconference.org For more information contact: t.nash@csta-hq.org"
"839","2014-03-24","2023-03-24","https://computinged.wordpress.com/2014/03/24/scratchjr-coding-for-young-kids-kickstarter-campaign/","I got to see a build of ScratchJr at the NSF CE21 PI’s meeting in January — it’s really fun. Attractive, responsive, and well thought through, as one would expect with this team. Coding (or computer programming) is a new type of literacy. Just as writing helps you organize your thinking and express your ideas, the same is true for coding. In the past, coding was seen as too difficult for most people. But we think coding should be for everyone, just like writing. As young children code with ScratchJr, they learn how to create and express themselves with the computer, not just interact with it. In the process, children develop design and problem-solving skills that are foundational for later academic success, and they use math and language in a meaningful and motivating context, supporting the development of early-childhood numeracy and literacy. With ScratchJr, children aren’t just learning to code, they are coding to learn. via ScratchJr: Coding for Young Kids by Mitchel Resnick — Kickstarter."
"840","2014-03-25","2023-03-24","https://computinged.wordpress.com/2014/03/25/computer-science-for-non-majors-in-the-ccc-blog/","Nice post from Ran Libeskind-Hadas, Chair of Computer Science at Harvey Mudd College, on the importance of computer science for everyone on campus. College students across all fields are quickly recognizing two important facts: Every well educated citizen should understand something about the computationally-pervasive world in which we live. Second, computing skills are likely to be useful across virtually all disciplines including the arts, humanities, and social sciences. Many of these students discover computing late in their college lives and/or have other constraints that prevent them from taking more than one or two computing courses. Those students, I believe, are not ideally served by traditional CS 1 and 2 courses which are often designed as the stepping stones of a computer science major. While implementing a queue as a doubly-linked list is probably important for a CS major (although one could reasonably argue that it still doesn’t have to be presented in CS 1), it’s almost certainly not the highest priority for a social scientist or a biologist. via Computer Science for Non-Majors » CCC Blog."
"841","2014-03-26","2023-03-24","https://computinged.wordpress.com/2014/03/26/revamped-computer-science-classes-attracting-more-girls-maybe-or-maybe-they-just-want-cs/","Great to see Dan Garcia and his class getting this kind of press! I’m not sure I buy the argument that SFGate is making, though. Do female students at Berkeley find out about this terrific class and then decide to take it? Or are they deciding to take some CS and end up in this class? Based on Mike Hewner’s work, I don’t think that students know much about the content of even great classes like Dan’s before they get there. It is a predictable college scene, but this Berkeley computer science class is at the vanguard of a tech world shift. The class has 106 women and 104 men. The gender flip first occurred last spring. It was the first time since at least 1993 – as far back as university enrollment records are digitized – that more women enrolled in an introductory computer science course. It was likely the first time ever. It’s a small but a significant benchmark. Male computer science majors still far outnumber female, but Prof. Dan Garcia’s class is a sign that efforts to attract more women to a field where they have always been vastly underrepresented are working. “We are starting to see a shift,” said Telle Whitney, president of the Anita Borg Institute for Women and Technology. via Revamped computer science classes attracting more girls – SFGate."
"842","2014-03-27","2023-03-24","https://computinged.wordpress.com/2014/03/27/gesture-interfaces-can-convey-scale-better-than-fixed-diagrams/","The title on the post linked below is wrong, “Can iPads help students learn science? Yes, study shows.” It’s never whether a technology can help learning. It’s how it can help, and what it can help with. The study described is a great example of this. iPads can be used really badly (while also being quite expensive) in schools. Philip Sadler’s new study shows that students can use the gesture-based interface of the iPad to understand issues of scale (just how far is the Moon from the Earth?) better than any diagram can convey. They found that while the traditional approaches produced no evident gain in understanding, the iPad classrooms showed strong gains. Students similarly struggle with concepts of scale when learning ideas in biology, chemistry, physics, and geology, which suggests that iPad-based simulations also may be beneficial for teaching concepts in many other scientific fields beyond astronomy. Moreover, student understanding improved with as little as 20 minutes of iPad use. Guided instruction could produce even more dramatic and rapid gains in student comprehension. “While it may seem obvious that hands-on use of computer simulations that accurately portray scale would lead to better understanding,” says Philip Sadler, a co-author of the study, “we don’t generally teach that way.” All too often, instruction makes use of models and drawings that distort the scale of the universe, “and this leads to misconceptions.” via Can iPads help students learn science? Yes, study shows."
"843","2017-04-26","2023-03-24","https://computinged.wordpress.com/2017/04/26/report-on-addressing-unconscious-bias-in-cs-classrooms/","New research report available at http://services.google.com/fh/files/misc/unconscious-bias-in-the-classroom-report.pdf from with Google and Thomas Dee of Stanford University and Seth Gershenson from American University. In sum, Unconscious Bias (UB) is a nontrivial problem in education, especially in CS and STEM education, and it is not easily addressed via traditional educational policies and interventions. However, interventions that identify and alter the frequently unconscious psychological processes that harm individuals’ outcomes are currently being developed and piloted. Teacher-facing interventions, which can be administered to both pre- and in-service teachers, are particularly promising. In part, this is because by addressing UB among teachers, we can help shape the entire classroom context in supportive ways. Furthermore, teacher-facing interventions are potentially cost-effective and scalable, because infrastructure for teacher training is already in place."
"844","2014-03-28","2023-03-24","https://computinged.wordpress.com/2014/03/28/computer-coding-more-in-demand-than-languages-survey-of-uk-adults/","It’s almost a race to the bottom — which do people care less about, learning programming or learning a modern language? The teaching of computer coding should be prioritised over modern languages, according to a survey of British adults. Twice as many thought teaching computer coding in school should be a priority than the number who saw Mandarin Chinese as more important. Coding was the top choice for 52%, against 38% who favoured French lessons, 32% Spanish, 25% German and 24% Mandarin. The poll was published by code.org, a campaign to introduce children and parents to coding. It has created Hour of Code, a series of free tutorials designed to show students the basics of programming in an hour. via Computer coding more in demand than languages, survey shows | Education | The Guardian."
"845","2014-02-26","2023-03-24","https://computinged.wordpress.com/2014/02/26/are-moocs-the-new-textbooks-misunderstanding-the-role-of-the-teacher/","An interesting blog post by an important CS researcher in programming languages and software engineering, but with a deep misperception about teaching. Teaching is not presentation. Making “production” better doesn’t make the teaching more effective. Student engagement pedagogies are likely to make teaching more effective, but it’s still an open question how to make those happen in a MOOC. But the presenter of a MOOC is not likely to be a passive player in the same sense. Video is a dynamic medium, that used well can establish a significant emotional connection between the speaker and the audience. This is already clear in some MOOCs, and as production gets better and better this emotional quality of the courses will only improve. What’s more, MOOC instructors are always at their best. They never have an off day. They never have a pressing grant deadline. All those bad takes got edited out. The students will also always hear them clearly, and when they don’t, the MOOC instructor will patiently repeat what they said. As many times as the student wants. via Are MOOCs the New Textbooks? | Flexible Learning."
"846","2014-06-10","2023-03-24","https://computinged.wordpress.com/2014/06/10/a-flawed-case-against-teaching-scaffolding-direct-instruction-and-learner-centered-classrooms/","Premise 1: Teaching is a human endeavor that does not and cannot improve over time. Premise 2: Human beings are fantastic learners. Premise 3: Humans don’t learn well in the teaching-focused classroom. Conclusion: We won’t meet the needs for more and better higher education until professors become designers of learning experiences and not teachers. at Change | The Case Against Teaching —— Interesting argument linked above, but wrong. "
"847","2014-06-08","2023-03-24","https://computinged.wordpress.com/2014/06/08/hands-up-who-likes-php-the-role-of-popular-programming-languages-in-computing-education/","I was at the NSF CS10K Evaluators meeting earlier this summer, and we got to talk about important research questions. Someone suggested the issue of learning progressions. How do students move from Scratch or Alice or Blockly to Java or C++? One of the evaluators, whose background is entirely in education and evaluation, asked, “Professional programmers don’t use Scratch and Alice?” We explained what professional programmers really do. “Then why are we teaching Scratch and Alice, especially if we don’t know how the transfer works?!?” The tension between what languages are “useful” (read: “we use them today in industry”) and what languages are helpful for learning has always existed in CS Ed. I’ve recommended the blog below to several people this summer, including reading the comments from the developers who push back — “Yeah, stop with Alice and teach real languages!” I agree with the post’s author, but I see that, even in the CS10K project, the notion that we should teach what’s vocationally useful is strong. At the NSF CS10K Evaluators meeting, I got to wondering about a different question. Most of our evaluators come from science and math education projects, where you teach the way the world is. If you have trouble teaching students that F=ma, you better just find a new way to teach it. I told the evaluators that I hope their results inform the design of future programming languages. Computer science is a science of the artificial, I explained. If you find that mutable variables are hard to understand, we can provide programming languages without them. If the syntax of curly braces on blocks is too subtle for novices to parse (as I predict from past research findings), we can fix that, too. I got confused looks. The idea that the content and the medium could be changed is not something familiar to this audience. We have to figure out how to close that loop from the evaluators to the designers, because it’s too important an opportunity to base our language design for novices on empirical results. It is a school’s job to churn out students who will be able to walk into a job in industry on day one and work in whatever language/paradigm is flavour du jour. WRONG! We’re here to teach children the core concepts of Computer Science. Working on that basis to produce someone with employable skills is your job. Do you expect Chemistry students to walk out of school ready to begin work in a lab? Should we stop using Scratch as a teaching language because nobody programs with it in industry? Of course not, so please stop recommending that we should be teaching using Scala/JSON/whatever is currently flavour of the month. via Hands up who likes PHP? | Code? Boom.."
"848","2014-06-05","2023-03-24","https://computinged.wordpress.com/2014/06/05/engaging-women-with-hard-science-not-just-service-a-visit-to-spacex/","After the NCWIT Summit, we had two days of meetings with ECEP State Partners and our Advisory Board, hosted by Debra Richardson at the University of California at Irvine. Then, Barbara and I got a chance to visit with Alan Kay for a few hours on Friday. As always, we came away with pages of notes and a long list of things to read and think about. All of these meetings were productive and interesting, but the next stage on our California adventure has had me thinking about how we teach hard science and hard computer science. A former student at Georgia Tech and one of the first MediaComp Teaching Assistants, Jim Gruen, now works at SpaceX. He invited Barb and I to come up for a tour. We rented a car and drove to Hawthorne.  Barb at SpaceX What an amazing place! The front third of the building are where the 40 programmers (“Everything is software,” Jim told us) sit with other engineers and developers. The back 2/3’s of the building is the factory floor where rockets are assembled. As you walk onto the floor, there is mission control to your right, and above your head is the actual Dragon capsule that first docked with the International Space Station. It is an inspiring sight as you walk onto the factory floor. We saw rockets being built! Jim showed us where engines are being assembled into racks, where carbon composites are molded into parts, where detailed metal parts are made with 3-D (metal!) printers, and where the parts of the fuel tanks are welded together then painted. We saw the shop where they’re making prototype space suits. We saw via live video stream (on a giant TV on the wall of the developers’ floor) the amazing Dragon Taxi that was just recently unveiled. We saw lots of people (mostly men, unfortunately) working to build a future where humans are space-faring. I was deeply impressed. SpaceX has a corporate goal to put human beings on Mars. What a noble goal! (Perhaps we could compare that to a corporate goal of, say, getting more people around the world to drink fizzy, flavored sugar-water?) Jim does kernel-level hacking. He works on the boot sequence for the flight computer, networking, and device drivers. He showed us his current project. He is integrating in the module responsible for firing the rocket that will pull the astronauts off of the rocket in case there is an explosion during take-off. I left the SpaceX feeling like I just had a glimpse of the future. The discussions when I tell people about our visit have had me thinking about how we prepare students for that future. SpaceX is exciting and motivating to everyone I’ve talked to. Admittedly, I tend to hang out with people interested in science and engineering. Our daughters were jealous that we got to visit SpaceX. The other night, my 16 year old daughter had a girlfriend over for dinner, and the friend had questions for me about SpaceX. I was shocked — my teenage daughter is telling her female friends stories about her parents’ adventures?!? All the undergraduate and graduate students that I have told about SpaceX were impressed and had questions about our visit, both male and female students. I do believe in the literature that suggests that women are socialized to be motivated to help people, and that efforts like service learning can motivate women to study CS. That’s part of the motivation for efforts like HFOSS. Many people are asking the question why women aren’t pursuing the “hard sciences.” Maybe we’re using the wrong context in the hard sciences. Many people (not just women) don’t get too excited about physics, chemistry, and engineering. Everyone I’ve talked to is very excited about SpaceX. Working at SpaceX requires lots of “hard science.” The stuff that Jim is doing is low-level and geeky — rebuilding the Linux kernel stuff. My kids are still fascinated about it. Maybe women and other students would be more excited about science if the connection was made to end goals like SpaceX and to helping get humans onto other planets. Context matters for science education, as well as for computing education. As my colleagues Betsy DiSalvo and Amy Bruckman (2011) wrote: Computer science is not that difficult but wanting to learn it is. Maybe that goes for “hard science,” too. SpaceX is a great reason to want to learn a lot of “hard science.”  Postscript: I told my daughters about this blog post. One daughter said, “We’ve both been to Space Camp (in Huntsville). Space Camp would be great except for that one annoying guy who always thinks he knows everything and wants to tell everyone all about it.” The other daughter agreed. Context is important, but we have to get the social stuff right, too. "
"849","2014-01-30","2023-03-24","https://computinged.wordpress.com/2014/01/30/call-for-papers-for-icer-2014/","Why submit to/attend ICER 2014? – Authors have in the past explicitly noted how the quality of ICER reviews significantly improved their work. – Our single-track, discussion-oriented, paper sessions result in significant additional feedback being provided on every paper. – The format enables you to meet new researchers and initiate valuable new research activities. – If you are new to empirical computer science education research, you will be immersed in a practising community for three days. – Either before or after the conference, you have an opportunity to significantly enhance your research agenda, via the DC or the CRR. – You can include a holiday in Scotland, including the Edinburgh Festival, the Commonwealth Games (in Glasgow!), and more historic and pre-historic castles, lochs, glens, islands and mountains than you’ve ever dreamed of… Full details, including the full CFP, available at http://icer.hosting.acm.org We’re looking forward to receiving your papers, best regards, Quintin, Beth and Brian."
"850","2014-06-17","2023-03-24","https://computinged.wordpress.com/2014/06/17/teaching-programming-could-be-made-easier/","Gas station without pump’s post on Garth’s complaint “Teaching programming is not getting easier” intrigued me. Garth does a good job of pulling together a lot of the themes of what makes teaching CS hard today. I think that we can improve the situation. I’m particularly interested in learning how to scaffold the development of programming knowledge, and we have to find ways to create professional communities of CS teachers. There are techniques to share (worked examples, peer instruction, pair programming, Parson’s problems, audio tours), and we’re clearly not doing a good job of it yet. In programming there are 4 homework problems over the period of a week, none of which are “easy”, and all require some problem solving and thinking. There is somewhat of an incremental progression to the problems but that step from written problem to code is always a big one. It is somewhat similar to solving word problems in math, every student’s favorite task. For programming there are no colleagues available that have as much or more experience to pull teaching ideas from, if there are any other programming teachers at all. There are no pedagogical resources anywhere online for teaching strategies. After watching a number (3) of programming teachers teach it seems the teaching strategy is pretty consistent; show and tell and hope. via Teaching programming is not getting easier. | Garth’s CS Education Blog."
"851","2014-06-19","2023-03-24","https://computinged.wordpress.com/2014/06/19/lets-do-the-math-does-it-make-sense-to-fill-a-pipeline-of-stem-workers-from-3rd-grade/","According to the article linked below, there is a large effort to fill STEM worker jobs in Northern Virginia by getting kids interested in STEM (including computing) from 3rd grade on. The evidence for this need is that there will be 50K new jobs in the region between 2013 and 2018. The third graders are 8 years old. If they can be effective STEM workers right out of high school, there’s another 10 years to wait before they can enter the workforce — 2024. If they need undergrad, 2028. If they need advanced degrees, early 2030’s. Is it even possible to predict workforce needs out over a decade? Now, let’s consider the cost of keeping that pipeline going, just in terms of CS. Even in Northern Virginia, only about 12% of high schools offer CS today. So, we need a fourfold increase in CS teachers — but that’s just high school. The article says that we want these kids supported in CS from 3rd grade on. Most middle schools have no CS teachers. Few elementary schools do. We’re going to have to hire and train a LOT of teachers to fulfill that promise. Making a jobs argument for teaching 3rd graders CS doesn’t make sense. The demand is only projected to grow greater. The Washington area is poised to add 50,000 net new STEM jobs between 2013 and 2018, according to projections by Stephen S. Fuller, the director of the Center for Regional Analysis at George Mason University. And Fuller said that STEM jobs are crucial in that they typically pay about twice as much as the average job in the Washington area and they generate significantly more economic value. It is against this backdrop that SySTEMic Solutions is working to build a pipeline of STEM workers for the state of Virginia, starting with elementary school children and working to keep them consistently interested in the subject matter until they finish school and enter the workforce. via To create a pipeline of STEM workers in Virginia, program starts with littlest learners – The Washington Post."
"852","2014-06-22","2023-03-24","https://computinged.wordpress.com/2014/06/22/is-coding-the-new-literacy-what-does-learning-to-code-buy-you/","The article posted below is a carefully-considered (not a “Rah! Rah! Let’s Code!”) and intriguing consideration of the role of coding in modern notion of literacy. I particularly liked the idea below. Is Annettee Vee right? Does knowing about coding inform your ability to think about things to code? I suspect that’s true, but it’s an empirical question. It’s much nearer transfer, and is not as much of a stretch as looking for evidence of general problem-solving skills from programming (which is very rare) or applying a computational framework for understanding the world (i.e., computational thinking). The happy truth is, if you get the fundamentals about how computers think, and how humans can talk to them in a language the machines understand, you can imagine a project that a computer could do, and discuss it in a way that will make sense to an actual programmer. Because as programmers will tell you, the building part is often not the hardest part: It’s figuring out what to build. “Unless you can think about the ways computers can solve problems, you can’t even know how to ask the questions that need to be answered,” says Annette Vee, a University of Pittsburgh professor who studies the spread of computer science literacy. via Is Coding the New Literacy? | Mother Jones."
"853","2014-06-24","2023-03-24","https://computinged.wordpress.com/2014/06/24/we-need-computing-in-schools-doesnt-matter-the-category/","At the NCWIT Summit this year, I heard an interesting concern. If CS counts as a mathematics or science course towards high school graduation requirements, will that make CS even less diverse? Should we keep CS as a business topic (elective) where the women and under-represented minorities are? I took up that question for my Blog@CACM post for this month: Why Counting CS as Science or Math is Not Considered Harmful. I argue that our goal is universal computational literacy, with everyone using computing in every class and everyone taking CS. I don’t really care how it gets a foothold in schools. It was fun to write about Alan Kay, Adele Goldberg, and Andy diSessa, pointing out that they were talking about these ideas a long time before computational thinking. "
"854","2013-03-01","2023-03-24","https://computinged.wordpress.com/2013/03/01/computational-thinking-in-k-12-a-report-in-ed-researcher/","Shuchi Grover and Roy Pea (Stanford) have a review of the field of computational thinking in K-12 schools in this month’s Educational Researcher. It’s a very nice paper. I’m excited that the paper is published where it is! Educational Researcher is the main publication venue for the largest education research organization in the United States (American Educational Research Association). Roy has been doing work in computing education for a very long time (e.g., “On the prerequisites of learning computer programming,” 1983, Pea and Kurland). This is computational thinking hitting the education mainstream. Jeannette Wing’s influential article on computational thinking 6 years ago argued for adding this new competency to every child’s analytical ability as a vital ingredient of science, technology, engineering, and mathematics (STEM) learning. What is computational thinking? Why did this article resonate with so many and serve as a rallying cry for educators, education researchers, and policy makers? How have they interpreted Wing’s definition, and what advances have been made since Wing’s article was published? This article frames the current state of discourse on computational thinking in K–12 education by examining mostly recently published academic literature that uses Wing’s article as a springboard, identifies gaps in research, and articulates priorities for future inquiries. via Computational Thinking in K–12."
"855","2014-07-31","2023-03-24","https://computinged.wordpress.com/2014/07/31/why-moocs-dont-help-cs-education-a-personal-view/","Last year, Peter Denning approached me about contributing a post to an on-line Symposium that he was going to hold in the ACM Ubiquity magazine. The opening statement was written by Candace Thille — I am a big fan of Candace’s work, and I really liked her statement. I agreed to provide a response for the symposium. My article has just been published (here). The whole symposium with all the preceding posts is here. But the ending I quote below is not the ending it had originally. Back in May, when I originally wrote the ending, I was concerned that so many Computer Scientists were working in MOOCs. MOOCs don’t address the critical needs of CS education, which are broadening participation and preparing more teachers. The real worry I had was that MOOCs would suck all the air out of the room. When all the attention is going to MOOCs, not enough attention is going to meeting our real needs. MOOCs are a solution in search of a problem, when we already have big problems with too few solutions. My original ending took off from Cameron Wilson’s (then director of public policy for ACM, now COO of Code.org) call for “All Hands on Deck” to address issues of broadening participation and teacher professional development. Extending the metaphor, I suggested that the computer scientists working on MOOCs had gone “AWOL.” They were deserters from the main front for CS education. This was the first article that I’ve ever written where the editor sent it back saying (paraphrased), “Lighten up, man.” I agreed. I wrote the new conclusion (below). MOOCs are worth exploring, and are clearly attractive for computer scientists to work on. Researchers should explore the avenues that they think are most interesting and most promising. I’m still worried that we need more attention on challenges in computing education, and I still think that MOOCs won’t get us there. Critiquing MOOC proponents for not working on CS ed issues will not get us to solutions any faster. But I do plan to keep prodding and cajoling folks to turn attention to computing education. Here’s the new ending to the paper: MOOCs may be bringing the American university to an end—a tsunami wiping out higher education. Given that MOOCs are least effective for our most at-risk students, replacing existing courses and degrees with MOOCs is the wrong direction. We would be tailoring higher education only to those who already succeed well at the current models, where we ought to be broadening our offerings to support more students. Computer science owns the MOOC movement. MOOC companies were started by faculty from computing, and the first MOOC courses were in computer science. One might expect that our educational advances should address our educational problems. In computing education, our most significant educational challenges are to educate a diverse audience, and to educate non-IT professionals, such as teachers. MOOCs are unlikely to help with either of these right now—and that’s surprising. The allure of MOOCs for computer scientists is obvious. It’s a bright, shiny new technology. Computer scientists are expert at exploring the potential of new computing technology. However, we should be careful not to let “the shoemaker’s children go barefoot.” As we develop MOOC technology, let’s aim to address our educational problems. And if we can’t address the problems with MOOC technology, let’s look for other answers. Computing education is too important for our community and for our society. via Ubiquity symposium: MOOCs and technology to advance learning and learning research."
"856","2013-03-14","2023-03-24","https://computinged.wordpress.com/2013/03/14/teaching-tree-a-source-for-cs-videos/","Here’s a repository for videos that teach computer science. Unlike Khan, it’s open to anyone to contribute. Unlike YouTube, it’s only about teaching CS. TeachingTree is an open platform that lets anybody organize educational content. Our goal is for students to quickly access the exact clips they need in order to learn individual concepts. Everyone is encouraged to help by adding videos or tagging concepts. via Teaching Tree."
"857","2013-03-13","2023-03-24","https://computinged.wordpress.com/2013/03/13/adaptability-to-online-learning-differences-across-types-of-students-and-academic-subject-areas/","A new study supports the concern that MOOCs are a particularly poor fit for underprepared students, the ones most likely to be taking remedial courses. It relates to the issues raised yesterday about the difficulty of covering all aptitudes and backgrounds with a single class. Using a dataset containing nearly 500,000 courses taken by over 40,000 community and technical college students in Washington State, this study examines how well students adapt to the online environment in terms of their ability to persist and earn strong grades in online courses relative to their ability to do so in face-to-face courses. While all types of students in the study suffered decrements in performance in online courses, some struggled more than others to adapt: males, younger students, Black students, and students with lower grade point averages. In particular, students struggled in subject areas such as English and social science, which was due in part to negative peer effects in these online courses. via Adaptability to Online Learning: Differences Across Types of Students and Academic Subject Areas."
"858","2013-03-12","2023-03-24","https://computinged.wordpress.com/2013/03/12/meeting-everyones-educational-needs-with-a-single-course-can-we-even-do-that/","Probably lots of people have now heard about the professor who walked out on his Coursera MOOC. What I found striking was Irvine’s response. They suggest that the course was just fine and would meet the needs of just about everyone, from those who just wanted a taste to those who wanted a serious education. What we know aptitude-treatment interaction suggests that that’s not possible. A single course, with no personalization, is unlikely to meet the needs of tens of thousands of students. Irvine officials, however, “felt that the course was very strong and well designed,” he said, “and that it would, indeed, meet the learning objectives of the large audience, including both those interested only in dipping into the subject and those who were seriously committed” to completing the course. via Professor Leaves a MOOC in Mid-Course in Dispute Over Teaching – Wired Campus – The Chronicle of Higher Education."
"859","2013-03-14","2023-03-24","https://computinged.wordpress.com/2013/03/14/stereotypes-and-stereotype-threat-affect-computing-students-ncwit/","Hooray for NCWIT, for producing materials aimed at higher-education faculty to get them to change their teaching practices! Stereotype threat is real (measurable, reliable, consistent), and can be addressed through better teaching. It’s worth the effort to try to get faculty to pay attention to these issues. This slide deck is a companion piece to the NCWIT Talking Point Card Talk with Faculty Colleagues About Stereotype Threat (www.ncwit.org/stereotypethreattp). You can hand out the card to your colleagues and then share these slides at a faculty meeting. via Stereotypes and Stereotype Threat Affect Computing Students | National Center for Women & Information Technology."
"860","2013-03-02","2023-03-24","https://computinged.wordpress.com/2013/03/02/summer-camps-in-georgia-roll-up-report-and-invitation-to-play-with-data/","I had posted this blog piece back in January, but then was asked to take it down. There were concerns that the data were not anonymized enough to guarantee participant anonymity. Tom McKlin did a great job of working with the Human Subjects Review board here at Georgia Tech, to figure out a set of data that would be useful to other computing education researchers, but would guarantee participant anonymity (to the extent feasible). Here’s our newly approved data set. Our external evaluators (The Findings Group) has just produced the roll-up analysis for all the GaComputes related summer camps from Summer 2012. These include camps offered at Georgia Tech, and those offere elsewhere in the state, started by GaComputes seed grants (as described in the 2011 SIGCSE paper that I blogged about). The results are strong: The Findings Group had a particularly interesting proposal for the Computing Education Research community. They are making all the survey data from all the camps freely available, in an anonymous form. They have a sense that there is more to learn from these data. It’s a lot of students, and there’s a lot to explore there in terms of motivation, engagement, and learning. If you play with these data, do let us know what you learn!"
"861","2013-03-04","2023-03-24","https://computinged.wordpress.com/2013/03/04/where-are-we-going-to-get-the-teachers-uk-version/","The biggest challenge to computing education in the United States is finding the teachers. Turns out that the issue is the same in the UK. I read on the Computing at Schools discussion boards, and part of the explanation for the ‘collapse’ described below is confusion about the curriculum. What’s going to be offered? ICT or Computing? The bigger picture remains — just as we’re having a hard time getting the students engaged about computing, we’re having a hard time engaging the teachers, too. The government’s plans to revolutionise computer science in schools are in jeopardy after a “collapse” in the number of applications to teacher training courses, experts have warned. Graduates are shunning courses designed to prepare teachers for a new curriculum backed by technology giants including Facebook, Microsoft and IBM, figures reveal, despite scholarships of £20,000 for the best recruits. The number of people applying for computer science PGCEs in England is down by a third compared with applications for the old ICT course at the same time last year. The number of applicants last year was itself down by more than 50 per cent on 2011, which suggests a continuing crisis in recruitment. via ‘Collapse’ in trainee numbers threatens computing plans – news – TES."
"862","2013-03-05","2023-03-24","https://computinged.wordpress.com/2013/03/05/the-trouble-with-online-college-nytimes-com/","Nice to see that NYTimes is seeing the problems, too. First, student attrition rates — around 90 percent for some huge online courses — appear to be a problem even in small-scale online courses when compared with traditional face-to-face classes. Second, courses delivered solely online may be fine for highly skilled, highly motivated people, but they are inappropriate for struggling students who make up a significant portion of college enrollment and who need close contact with instructors to succeed. via The Trouble With Online College – NYTimes.com."
"863","2013-03-05","2023-03-24","https://computinged.wordpress.com/2013/03/05/where-to-find-guzdial-at-sigcse-2013/","I’ve already written a couple of SIGCSE Symposium 2013 preview posts (on the Dorn and Elliott Tew paper, and on the UCSD set of papers on Peer Instruction). Here in my last preview post, I’ll give you a sense for what I’ll be up to. I fly out to Denver Tuesday 5 March in the evening. (If I miss some days of the blog in here, I hope you’ll understand.)"
"864","2013-03-06","2023-03-24","https://computinged.wordpress.com/2013/03/06/just-in-time-for-sigcse13-ironman-draft-of-cs2013-is-out/","Posted by Mehran Sahami. There are several sessions for feedback on the draft and to provide exemplars for the curriculum section. Dear Colleagues, Just in time for SIGCSE, we are happy to announce the availability of the ACM/IEEE-CS Computer Science Curricula 2013 (CS2013) – Ironman v1.0 draft. The draft is available at the CS2013 website (http://cs2013.org) or directly at: http://cs2013.org/ironman-draft/cs2013-ironman-v1.0.pdf The Ironman v1.0 draft contains a revision of the CS2013 Body of Knowledge, based on comments from the previously released CS2013 Strawman and Ironman v0.8 drafts. The Ironman v1.0 draft also includes additional new chapters as well as over 50 course exemplars, showing how the CS2013 Body of Knowledge may be covered in a variety of actual fielded courses. ** SIGCSE-13 SPECIAL SESSION: CS2013: Reviewing the Ironman Report ** A special session, entitled “ACM/IEEE-CS Computer Science Curriculum 2013: Reviewing the Ironman Report,” will be held at SIGCSE-13. This session will give you an overview of the current state of the CS2013 curricular guidelines and provide opportunities for discussion and feedback from the community. The special session will be held on Thursday, March 7, 2013 from 10:45am to 12:00pm in Ballroom E. ** SIGCSE-13 SPECIAL SESSION: CS2013 EXEMPLAR-FEST ** Another SIGCSE-13 special session is the “CS 2013: Exemplar-Fest”. This session will showcase submitted samples of CS2013 course/curriculum exemplars and provide the opportunity to engage the community in the development of additional course/curricular exemplars for CS2013. The special session will be held on Friday, March 8, 2013 from 10:45am to 12:00pm in Ballroom F. COMMENTING ON CS2013 IRONMAN v1.0 DRAFT The Ironman v1.0 draft is the penultimate draft of the CS2013 curricular guidelines. The final version of the CS2013 guidelines will be published in Fall 2013. We welcome additional comments on the CS2013 Ironman draft from the computing community. Information on how to comment on the draft is available at the CS2013 website. Comments on the Ironman draft will be addressed in the final released version of CS2013. CALL FOR EXEMPLARS The CS2013 Curriculum Steering Committee is continuing to seek exemplars of courses and curricula from the broader community. This open process will better connect the CS2013 Body of Knowledge to real, existing approaches representing diverse and innovative ways to teach computer science. In Computer Science terms, the topics and learning outcomes in the Body of Knowledge represent a “specification”, whereas a curriculum is an “implementation” and a course is part of a curriculum. Information on how to contribute course/curriculum exemplars is available at the CS2013 website (http://cs2013.org) or directly at: http://cs2013.org/exemplars.html Warm regards, Mehran Sahami and Steve Roach Co-Chairs, CS2013 Steering Committee CS2013 Steering Committee ACM Delegation Mehran Sahami, Chair (Stanford University) Andrea Danyluk (Williams College) Sally Fincher (University of Kent) Kathleen Fisher (Tufts University) Dan Grossman (University of Washington) Beth Hawthorne (Union County College) Randy Katz (UC Berkeley) Rich LeBlanc (Seattle University) Dave Reed (Creighton University) IEEE-CS Delegation Steve Roach, Chair (Univ. of Texas, El Paso) Ernesto Cuadros-Vargas (Univ. Catolica San Pablo, Peru) Ronald Dodge (US Military Academy) Robert France (Colorado State University) Amruth Kumar (Ramapo Coll. of New Jersey) Brian Robinson (ABB Corporation) Remzi Seker (Embry-Riddle Aeronautical Univ.) Alfred Thompson (Microsoft) ############################"
"865","2013-03-07","2023-03-24","https://computinged.wordpress.com/2013/03/07/computer-science-education-had-a-good-day-in-america-techcrunch/","A nice upbeat piece! I hadn’t talked about the Code.org video here — I recommend checking it out. (I will point out that Chris Bosh who “coded in college” according to the video, was at Georgia Tech for his one year in college.) America’s elite institutions came out in full force for computer science education. First, the House of Representatives voted to update its traditional students arts competition to include a nationwide mobile apps competition. Then, to top off the day, the nation’s leading geeks, from Mark Zuckerberg to Bill Gates, helped launch a national nonprofit to encourage young programmers. via Computer Science Education Had A Good Day In America | TechCrunch."
"866","2013-03-08","2023-03-24","https://computinged.wordpress.com/2013/03/08/kudos-to-duke-for-giving-us-mooc-data/","Duke University has done a great thing in doing a really detailed report on their first MOOCs, including effort required to build the course. One interesting data point presented within this persistence data was that, “25% of students who answered at least one question correctly on the quizzes during Week 1 were successful in completing the course requirements.” This represented 313 students from at least 37 countries, most of whom already held a bachelor’s degree or higher. Duke also reported video views and downloads, which are one indication of student engagement. Throughout the 8-week course, there were 156,000 total streaming views and 179,000 video downloads, while views were ~1,000/week by around week 5. via Big (MOOC) Data | Inside Higher Ed."
"867","2013-03-09","2023-03-24","https://computinged.wordpress.com/2013/03/09/slides-from-the-revolution-will-be-televised-moocopalypse-panel/","The SIGCSE 2013 panel on “The Revolution will be Televised” on MOOCs and the impending MOOCopalypse was well attended and led to some great discussion. Our entire slide deck is available here. My favorite part of the session was the response to my comments about access to MOOCs in Africa, i.e., that’s a motivating claim for many (“MOOCs provide learning opportunities to the developing world, like in Africa!”) while the reality is that there is very little access in Africa. We had two people in the audience then take the microphone and talk about their experiences in Tanzania and Sudan. The former department chair in Tanzania said that the MOOCs don’t contain the content yet that they need. The faculty member from Sudan said that only 50% of Sudan has access to the Internet. She said that the connected half doesn’t know that MOOCs exist. My thanks to Mehran Sahami for organizing the panel, and to my fellow panelists Nick Parlante (eternal optimist about MOOCs) and Fred Martin (hero to the rebel forces battling the MOOCopalypse, for pushing his vision of MOOCs for flipped classrooms) for an engaging session! "
"868","2013-03-11","2023-03-24","https://computinged.wordpress.com/2013/03/11/csab-and-abetcac-criteria-committee-survey/","At the ACM Education Council meeting this last weekend, I heard about changes in the accreditation criteria being considered for computing disciplines (e.g., Computer Science, Information Systems, Information Technology). The committee has asked for feedback on several issues that they’re considering, e.g., how much mathematics do students really need in computing? That question, in particular, is one that I’m reading about in The Computer Boys Take Over by Nathan Ensmenger. Ensmenger tells the story of how mathematics got associated with preparation of programmers (not computer scientists). Mathematics showed up on the early aptitude tests that industry created as a way of figuring out who might be a good programmer. But Ensmenger points out that mathematic ability only correlated with performance in academic courses, and did not correlated with performance as a programmer. It’s not really clear how much math is really useful (let alone necessary) for being a programming. Mathematics got associated with programming decades ago, and it remains there today. The Committee is inviting feedback on this and other issues that they’re considering: This survey was developed by a joint committee from CSAB and the ABET Computing Accreditation Commission, and is designed to obtain feedback on potential changes on the ABET Computing Accreditation Criteria. We are looking for opinions about some of the existing ideas under discussion for change, as well as other input regarding opportunities to improve the existing criteria. Respondents to the survey may be computing education stakeholders in any computing sub discipline, including computer science, information systems, information technology, and many others. Stakeholders may include professionals in the discipline, educators, and/or employers of graduates from computing degree programs. The survey may be completed online: https://www.surveymonkey.com/s/caccriteria2013. Please send inquiries to csab@csab.org. Thank you for your participation."
"869","2013-03-11","2023-03-24","https://computinged.wordpress.com/2013/03/11/moocmania-the-state-pays-twice/","Nice essay, but particularly interesting with the commentary that follows. Siva Vaidhyanathan raises issue of the role of government in education and in supporting the agendas of education start-ups. This is a very helpful essay that does a good job working through many of the issues surrounding MOOCs. I wish you had considered, however, the problem raised by the political economy of MOOCs-via-corporation: UC makes MOOCs at a high cost per MOOC (and no faculty compensation); UC donates them to Udacity or Coursera; Udacity charges Cal State for their use in courses meant for those who need and deserve the best teaching, not just the latest experimental teaching. The state pays twice. Udacity walks away laughing. via MOOCmania | DMLcentral."
"870","2013-03-12","2023-03-24","https://computinged.wordpress.com/2013/03/12/cmus-online-efforts-focus-on-sustainable-business-model-but-not-moocs/","CMU’s OLI (Open Learning Inititative) is decades ahead of the MOOCs in terms of quality of offerings and evidence of effectiveness. So why aren’t they hyping their better product? I’ve asked that question several times of colleagues at CMU. This article explains it — basically, they’re focusing on sustainable business models, rather than launching into MOOCs without a clear revenue model. Kamlet said Carnegie Mellon is working on an approach that encourages financially solvent business plans from the get-go. “To be honest, I think there are some challenges – edX and Coursera would be the first to admit that they are going to see how things go over time in terms of a business model,” Kamlet said. via Carnegie Mellon’s online efforts include spinoffs and subsidiaries but not MOOCs | Inside Higher Ed."
"871","2013-03-13","2023-03-24","https://computinged.wordpress.com/2013/03/13/a-better-name-for-moocs-very-low-teacherstudent-ratio-courses-vlrcs-the-next-bison-social-computing-and-culture/","Amy Bruckman asks us to change our language: It’s not MOOCs, it’s VLRCs. Her argument makes sense to me. Free online classes with large numbers of enrolled students are lately being called “Massively Open Online Courses” (MOOCs). As writers like George Lakoff have eloquently explained, the words we use to describe a phenomenon shape how we think about them. I would like to suggest that a more accurate name than “MOOCs” is “Very Low teacher/student Ratio Courses” or “VLRCs” (pronounced “vlercs”). via A Better Name for MOOCs: Very Low teacher/student Ratio Courses (VLRCs) | The Next Bison: Social Computing and Culture."
"872","2013-03-14","2023-03-24","https://computinged.wordpress.com/2013/03/14/washington-state-house-votes-to-count-computer-science-for-mathscience-credit/","So cool! There is a petition on the linked page (below) if you would like to express your support for this bill. In overwhelming fashion, the Washington State House voted 95-3 to pass a new bill in the Washington State Legislature that may allow computer science classes to count as a math or science requirement toward high school graduation. The bill now moves onto the Senate. Currently, Washington high schoolers who take a computer science class don’t receive a math or science credit. HB 1472 would enable this and “provide initiatives to improve and expand access to computer science education.” via Washington House votes to count computer science for math, science credit – GeekWire."
"873","2013-03-15","2023-03-24","https://computinged.wordpress.com/2013/03/15/first-workshop-on-ai-supported-education-for-computer-science/","Shared by Leigh Ann Sudol-DeLyser (Visiting Scholar, New York University) with the SIGCSE list. Dear SIGCSE-ers! I would like to announce the First Workshop on AI-Supported Education for Computer Science to be held at the Artificial Intelligence in Education conference this summer in Memphis and invite the submission of papers from the SIGCSE community. Please see the website at: https://sites.google.com/site/aiedcs2013/ Submissions are due by April 12, 2013. Workshop Description: Designing and deploying AI techniques within computer science learning environments presents numerous important challenges. First, computer science focuses largely on problem solving skills in a domain with an infinitely large problem space. Modeling the possible problem solving strategies of experts and novices requires techniques that represent a large and complex solution space and address many types of unique but correct solutions to problems. Additionally, with current approaches to intelligent learning environments for computer science, problems that are provided by AI-supported educational tools are often difficult to generalize to new contexts. The need is great for advances that address these challenging research problems. Finally, there is growing need to support affective and motivational aspects of computer science learning, to address widespread attrition of students from the discipline. Addressing these problems as a research community, AIED researchers are poised to make great strides in building intelligent, highly effective AI-supported learning environments and educational tools for computer science and information technology. Topics of Interest:"
"874","2013-03-20","2023-03-24","https://computinged.wordpress.com/2013/03/20/icer-2013-conference-call-for-papers-released/","Call for papers due 22 April 2013: http://wp.acm.org/icer-conference/icer-2013/call-for-papers/ The International Computing Education Research (ICER) Workshop aims at gathering high-quality contributions to the computing education research discipline. Papers for the ICER workshop will be double blind peer-reviewed. Papers ICER accepts papers in two different categories. Research papers. 8 pages A clear theoretical basis, building on existing literature in computing education, computer science, and other related disciplines. A strong empirical basis, drawing on relevant research methods. Papers that re-interpret and explain others’ empirical results are welcome. An explication of the paper’s impact on, and contribution to, existing knowledge about computing education. Discussion papers. 6 pages Work in progress, or dissemination and discussion of new ideas in Computing Education Research. Discussion papers fail to meet one or more of the criteria for research papers, but have the potential to become exemplary ICER papers if given the opportunity to be presented to and discussed by the community. Discussion papers should include explicit discussion questions or ideas that the authors are interested in hearing discussed by the community. Time will be allotted at the conference to enable these discussions. via Call for papers – icer-conference."
"875","2013-03-21","2023-03-24","https://computinged.wordpress.com/2013/03/21/fostering-gender-diversity-in-computing-march-issue-of-ieee-computer/","The March issue of IEEE Computer is going to be devoted to fostering gender diversity in computing. It looks like it’s going to be a great issue, including a piece by my school chair, Annie Anton. Why is this important to us? Computing and information technology are among the fastest growing U.S. industries: technical innovation plays a critical role in every sector of the U.S. and global economy, and computing ranks among the top 10 high-profile professions. However, as a nation, we are not prepared to attract and retain the professional workforce required to meet future needs. By 2018, US universities will produce only 52 percent of the computer science bachelor’s degrees needed to fill the 1.4 million available jobs. A lack of diverse perspectives will inhibit innovation, productivity, and competitiveness. In addition to failing to attract new and diverse talent, industry is also losing trained professionals who are already interested in technology. While 74 percent of professional women report “loving their work,” 56 percent leave at the career “midlevel” point just when their loss is most costly to the company—this is more than double the quit rate for men. via Fostering Gender Diversity in Computing."
"876","2013-03-22","2023-03-24","https://computinged.wordpress.com/2013/03/22/thy-employee-is-not-you-new-study-exposes-gender-bias-in-tech-job-listings/","I found the study linked below fascinating, in part because I saw myself making exactly these mistakes. I have absolutely described jobs in those masculine terms instead of the more neutral terms. I didn’t realize that those were terms that would dissuade females from applying. When we teach classes on designing user interfaces, a key idea that we want students to learn is that “Thy User is Not You.” Don’t design for yourself. Don’t judge the interface only from your own eyes. You can’t imagine how the user is really going to use your interface. Try it with real users. Get input from real users. You can’t design interfaces for yourself and expect them to be usable for others. (Just like you can’t develop educational software for the developed world and expect it to work in the developing world.) I heard the same lesson in this study. If you want to hire employees different than you, find out what you need to put in your job ad to attract them. You do not know how they will read your ad. Get input from others (who see things differently than you), and use expert guidance. Thy employee is not you. The paper — which details a series of five studies conducted by researchers at the University of Waterloo and Duke University — found that job listings for positions in engineering and other male-dominated professions used more masculine words, such as “leader,” “competitive” and “dominant.” Listings for jobs in female-dominated professions — such as office administration and human resources — did not include such words. A listing that seeks someone who can “analyze markets to determine appropriate selling prices,” the paper says, may attract more men than a list that seeks someone who can “understand markets to establish appropriate selling prices.” The difference may seem small, but according to the paper, it could be enough to tilt the balance. The paper found that the mere presence of “masculine words” in job listings made women less interested in applying — even if they thought they were qualified for the position. via New Study Exposes Gender Bias in Tech Job Listings | Wired Enterprise | Wired.com."
"877","2013-03-25","2023-03-24","https://computinged.wordpress.com/2013/03/25/cerias-some-thoughts-on-cybersecurity-professionalization-and-education/","Relates to the issue of when an employee needs college, and when they don’t. For Cybersecurity, they do. Relates to the growing needs in cybersecurity in the UK and in the US. Too many (current) educational programs stress only the technology — and many others include significant technology training components — because of pressure by outside entities, rather than a full spectrum of education and skills. We have a real shortage of people who have any significant insight into the scope of application of policy, management, law, economics, psychology and the like to cybersecurity, although arguably, those are some of the problems most obvious to those who have the long view. (BTW, that is why CERIAS was founded 15 years including faculty in nearly 20 academic departments: “cybersecurity” is not solely a technology issue; this has been recognized by several other universities that are treating it more holistically.) These other skill areas often require deeper education and repetition of exercises involving abstract thought. It seems that not as many people are naturally capable of mastering these skills. The primary means we use to designate mastery is through postsecondary degrees, although their exact meaning does vary based on the granting institution. via CERIAS : Some thoughts on “cybersecurity” professionalization and education."
"878","2013-03-26","2023-03-24","https://computinged.wordpress.com/2013/03/26/guided-computer-science-inquiry-in-data-structures-class/","Inquiry-based learning is the best practice for science education. Education activities focus on a driving question that is personally meaningful for students, like “Why is the sky blue?” or “Why is the stream by our school so acidic (or basic)?” or “What’s involved in building a house powered entirely by solar power?” Answering those questions leads to deeper learning about science. Learning sciences results support the value of this approach. It’s hard for us to apply this idea from science education and teach an introductory computing course via inquiry, because students may not have many questions that relate to computer science when they first get started. Questions like “How do I make an app to do X?” or “How do I use Snap on my laptop?” are design and task oriented, not inquiry oriented. Answering them may not lead to deeper understanding of computer science. Our everyday experience of computing, through (hopefully) well-designed interfaces, hides away the underlying computing. We only really start to think about computing at moments of breakdown (what Heidigger called “present-at-hand”). “Why can’t I get to YouTube, even though the cable modem light is on?” and “How does a virus get on my computer, and how can it pop up windows on my screen?” It’s an interesting research project to explore what questions students have about computing when they enter our classes. I realized this semester that I could prompt students to define questions for inquiry-based learning in a second computer science class, a data structures course. I’m teaching our Media Computation Data Structures course this semester. These students have seen under the covers and know that computing technology is programmed. I can use that to prompt them about how new things work. What I particularly like about this approach is how it gets me out of the “Tour of the Code” lecturing style. Here’s an example. We had already created music using linked lists of MIDI phrases. I then showed them code for creating a linked list of images, then presented this output.  I asked students, “What do you want to know about how this worked?” This was the gamble for me — would they come up with questions? They did, and they were great questions. “Why are the images lined up along the bottom?” “Why can we see the background image?” I formed the students into small groups, and assigned them one of the questions that the students had generated. I gave them 10 minutes to find the answers, and then report back. The discussion around the room was on-topic and had the students exploring the code in depth. We then went through each group to get their answers. Not every answer was great, but I could take the answer and expand upon it to reach the issues that I wanted to make sure that we highlighted. It was great — way better and more interactive than me paging through umpteen Powerpoint slides of code. Then I showed them this output from another linked list of images.  Again, the questions that the students generated were terrific. “What data are stored in each instance such that some have positions and some are just stacked up on the bottom?” and “Why are there gaps along the bottom?” Still later in the course, I showed them an animation, rendered from a scene graph, and I showed them the code that created the scene graph and generated the animation. Now, I asked them about both the animation code and the class hierarchy that the scene graph nodes was drawing upon. Their questions were both about the code, and about the engineering of the code — why was it decomposed in just this way?   (We didn’t finish answering these questions in a single class period, so I took pictures of the questions so that I could display them and we could return to them in the next class.) I have really enjoyed these class sessions. I’m not lecturing about data structures — they’re learning about data structures. The students are really engaged in trying to figure out, “How does that work like that?” I’m busy in class suggesting where they should look in the code to get their questions answered. We jointly try to make sense of their questions and their answers. Frankly, I hope to never again have to show sequences of Powerpoint slides of code ever again.   "
"879","2013-03-26","2023-03-24","https://computinged.wordpress.com/2013/03/26/free-early-career-learning-sciences-workshop-at-cmu-learnlab/","Call for Participation 2nd Annual Learning Science Workshop Research and Innovation for Enhancing Achievement and Equity http://www.learnlab.org/opportunities/summerworkshop.php June 22-23 Carnegie Mellon University Pittsburgh PA Applications Due May 5, 2013 *No Cost To Attend* Overview LearnLab, an NSF Science of Learning Center (SLC) at Carnegie Mellon and the University of Pittsburgh, has an exciting summer research opportunity available to early career researchers in the fields of psychology, education, computer science, human-computer interfaces and language technologies. The workshop is targeted to senior graduate students, post-docs and early career faculty. The workshop seeks broad participation, including members of underrepresented groups as defined by NSF (African American, Hispanic, Native American) who may be considering a research or faculty position in the learning sciences. This two-day workshop immediately precedes the LearnLab Summer School (www.learnlab.org/opportunities/summer/). Our research theme is theresearch and innovation for enhancing achievement and equity, including these five areas: * Enhancing Achievement through Educational Technology and Data Mining. Using domain modeling, and large datasets to discover when learning occurs and to provide scaffolding for struggling students. See http://www.learnlab.org/research/wiki/index.php/Computational_Modeling_and_Data_Mining. * 21st Century Skills, Dispositions, and Opportunities. Re-examining the goals of education and assessment and considering transformative changes in how and where learning occurs. * Opening Classroom Discourse. Studying how classroom talk contributes to domain learning and supports equity of learning opportunity. See LearnLab’s Social-Communicative Factors thrustwww.learnlab.org/research/wiki/index.php/Social_and_Communicative_Factors_in_Learning. * Course-Situated Research. Running principle-testing experiments while navigating the complex waters of real-world classrooms. Seewww.learnlab.org/research/wiki/index.php/In_vivo_experiment. * Motivation Interventions for Learning. Implementing theory based motivational interventions to target at risk populations to improve robust student learning. Seehttp://www.learnlab.org/research/wiki/index.php/Metacognition_and_Motivation The substantive focus of the workshop is the use of current research and innovations to enhance achievement and equity at all levels of learning. Activities will include demonstrations of the diverse set of ongoing learning sciences research projects at LearnLab, and poster presentations or talks by participants. Participants will also meet with LearnLab faculty in research groups and various informal settings. We will provide information about becoming a part of the Carnegie Mellon or University of Pittsburgh learning science community. In addition to these substantive themes, the workshop will provide participants with opportunities for professional development and the chance to gain a better understanding of the academic career ladder. These include mentoring that focuses on skills, strategies and “insider information” for career paths. Sessions will include keynote speakers and LearnLab senior faculty discussing professional development topics of interest to the attendees. These may include the tenure and promotion process, launching a research program, professionalism, proposal writing, among other topics. There is no cost to attend this workshop We are very pleased to announce that the workshop will have two distinguished keynote speakers: Nora S. Newcombe, Ph.D. is the James H. Glackin Distinguished Faculty Fellow and Professor of Psychology at Temple University. Dr. Newcombe is the PI of the Spatial Intelligence and Learning Center (SILC), headquartered at Temple and involving Northwestern, the University of Chicago and the University of Pennsylvania as primary partners. Dr. Newcombe was educated at Antioch College, where she graduated with a major in psychology in 1972; and at Harvard University, where she received her Ph.D. in Psychology and Social Relations in 1976. She taught previously at Penn State University. A nationally recognized expert on cognitive development, Dr. Newcombe’s research has focused on spatial development and the development of episodic and autobiographical memory. Her work has been federally funded by NICHD and the National Science Foundation for over 30 years. She is the author of numerous scholarly chapters and articles on aspects of cognitive development, and the author or editor of five books, including Making Space: The Development of Spatial Representation and Reasoning (with Janellen Huttenlocher) published by the MIT Press in 2000. Tammy Clegg, Ph.D. is an assistant professor in the College of Education with a joint appointment in the College of Information Studies at the University of Maryland. She received her PhD in Computer Science at Georgia Tech in 2010 and her Bachelor of Science in Computer Science from North Carolina State University in 2002. From 2010-2012 Tamara was a postdoctoral fellow at the University of Maryland with the Computing Innovations Fellows program. Her work focuses on developing technology to support life-relevant learning environments where children engage in science in the context of achieving goals relevant to their lives. Kitchen Chemistry is the first life-relevant learning environment she designed along with colleagues at Georgia Tech. In Kitchen Chemistry, middle-school children learn and use science inquiry to make and perfect dishes. Clegg uses participatory design with children to design these new technologies. Her work currently includes creating new life-relevant learning environments (e.g., Sports Physics, Backyard Biology) to understand how identity development happens across these environments. From this analysis, she aims to draw out design guidelines for life-relevant learning activities and technology in various contexts (e.g., sports, gardening). About LearnLab LearnLab is funded by the National Science Foundation (award number SBE-0836012). Our center leverages cognitive theory and computational modeling to identify the instructional conditions that cause robust student learning. Our researchers study robust learning by conducting in vivo experiments in math, science and language courses. We also support collaborative primary and secondary analysis of learning data through our open data repository LearnLab DataShop, which provides data import and export features as well as advanced visualization, statistical, and data mining tools. To learn more about our cognitive science theoretical framework, read our Knowledge-Learning-Instruction Framework. The results of our research are collected in our theoretical wiki which currently has over 400 pages. It also includes a list of principles of learning which are supported by learning science research. The wiki is open and freely editable, and we invite you to learn more and contribute. Application Process Applicants should email their CV, this demographic form, a proposed presentation title and abstract, and a brief statement describing their research interests to Jo Bodnar (jobodnar@cs.cmu.edu) by May 5, 2013. Please use the subject Application for LearnLab Summer Workshop 2013. Upon acceptance, we will let you know if you have been selected for a talk or poster presentation. Costs There is no registration fee for this workshop. However, attendance is limited so early applications are encouraged. Scholarships for travel are available. Scholarships will be awarded based on your application, including your research interests, future plans, and optional recommendation letter."
"880","2013-03-27","2023-03-24","https://computinged.wordpress.com/2013/03/27/meet-wikipedia-the-encyclopedia-anyone-can-code/","It sounds like you can only use Lua for encyclopedia-like functions (e.g., handling citations), but what a wonderful step toward having a tool for building simulations and data processing & visualizations into the encyclopedia. It’s a nice new motivation for “Computing for Everyone.” It began as the encyclopedia anyone can edit. And now it’s also the encyclopedia anyone can program. As of this weekend, anyone on Earth can use Lua — a 20-year-old programming language already championed by the likes of Angry Birds and World of Warcraft — to build material on Wikipedia and its many sister sites, such as Wikiquote and Wiktionary. Wikipedia has long offered simple tools that let tens of thousands of volunteer editors reuse little bits of text across its encyclopedia pages, but this is something different. “We wanted to provide editors with a real programming language,” says Rob Lanphier, the director of platform engineering at the Wikimedia Foundation, the not-for-profit that oversees the online encyclopedia. “This will make things easier for editors, but it will also be significantly faster.” via Meet Wikipedia, the Encyclopedia Anyone Can Code | Wired Enterprise | Wired.com."
"881","2013-04-30","2023-03-24","https://computinged.wordpress.com/2013/04/30/learning-about-learning-in-a-musical-the-power-of-deliberate-practice-in-a-complete-setting/","I am working set crew for a musical for the last two weeks and through this weekend. This is my third year doing it, so I’m not quite the novice I was when I first wrote about the experience. We’re doing “Curtains” which is a show-in-a-show musical — the setting is a theater in Boston where a Western musical is being readied for Broadway, when murders start backstage. Again, I’m struck by the complexity of musical theater. The actors have been at it since January, and everything they have to learn amazes me. As stage crew, I only owe them three weeks of every evening, but I still have had a lot to learn in a short time. In part of Act Two, I’m setting flats, then racing back to help actors with their quick change (it’s way harder to button someone else’s shirt buttons than your own), then lift a globe into place (turning it sideways to fit through door frames), before racing back to set up a river in the next scene. What’s particularly striking me this year is how we have not only learned some fairly complex activities, but we have learned them well enough to self-monitor and invent. I could go on and on. A prop is missing, a costume breaks, someone flubs their line or doesn’t get on stage quick enough. Things happen, and people have to think on their feet. Let’s compare this to introductory computer science class, where students famously have difficulty figuring out one way to do something in 10-15 weeks of practice. Or when they do something the one way that they can figure out, it just barely works and the code is frequently awful — ugly and hard to read. What we see going on in the musical is complex learning, with flexibility. It’s not quantum physics, but it is complex. If you’ve ever learned a dance or martial arts, you know that remembering and recreating a sequence of physical moves can be challenging. Now combine that across multiple scenes, with rapid timing (quick changes have to be completed before the orchestra finishes the song), with lots of people involved, and it’s complicated. I just bought the “Curtains” soundtrack and am impressed. Our actors and singers can hold their own with the original cast recording. How did everyone involved in the musical learn so much, so well, in such a short amount of time? And why doesn’t that happen so often in formal education? There are lots of things going on. Here are two that I’ve been thinking about: P.S. If you’re in Atlanta, there are shows this Friday and Saturday at 8 pm, and Sunday at 4 pm. Come see it!"
"882","2013-04-29","2023-03-24","https://computinged.wordpress.com/2013/04/29/new-center-for-research-on-cyberlearning/","This is a pretty exciting center. EDC does very good work, and Jeremy Roschelle is an excellent researcher in learning sciences (author of the JLS article on economic benefits of STEM education that I blogged on last year). The new center aims to maximize the potential of NSF-funded projects focused on learning with technology, with the goal of addressing pressing needs in STEM education. Of particular interest are technological advances that allow more personalized learning experiences, that draw in and promote learning among those in populations not currently well-served, and that allow access to learning resources. EDC’s role will be to assess the needs of NSF grantees, foster the development of partnerships, and facilitate and lead events that bring together grantees and stakeholders from the national cyberlearning community. “This initiative brings another NSF program resource center to EDC and allows us to harness our collective experience and knowledge in this area,” said EDC’s Sarita Pillai, who will lead the EDC team. “Through this work, we expect to accelerate progress in the field of cyberlearning and to improve student learning in the areas of science, technology, engineering, and math.” “This is a timely, important opportunity to connect high-quality research with the rapidly growing market for digital learning, an area of intense need and investment in Silicon Valley and throughout the country,” said SRI’s Jeremy Roschelle, director of CIRCL. via EDC a Partner in New Center for Research on Cyberlearning | Education Development Center."
"883","2013-06-21","2023-03-24","https://computinged.wordpress.com/2013/06/21/why-women-leave-academia-and-why-universities-should-be-worried/","Fascinating study — not surprising, but worthwhile noting. This work was done in Chemistry, so it bears replication in other STEM disciplines. Some on the SIGCSE-Members list were wondering, “Is this just for research-oriented universities? Or for teaching-oriented universities, too?” In our work interviewing faculty as part of our work in GaComputes and DCCE, we heard surprisingly similar concerns at both kinds of institutions. The faculty at schools with a teaching mission told us that their tenure was based on research publications, and they felt similar levels of stress. Young women scientists leave academia in far greater numbers than men for three reasons. During their time as PhD candidates, large numbers of women conclude that (i) the characteristics of academic careers are unappealing, (ii) the impediments they will encounter are disproportionate, and (iii) the sacrifices they will have to make are great. via Why women leave academia and why universities should be worried | Higher Education Network | Guardian Professional."
"884","2013-06-20","2023-03-24","https://computinged.wordpress.com/2013/06/20/unexpected-issues-in-online-education-deal/","Interesting issue came up in the efforts to provide online education through San Jose. “I get this call from San Jose State: ‘Uh, we have a problem,'” recalled Mark Ryan, superintendent of a charter school in Oakland that was taking part in the project to offer for-credit online classes to students, including high school students. According to the newspaper, “It turned out some of the low-income teens didn’t have computers and high-speed Internet connections at home that the online course required. Many needed personal attention to make it through. The final results aren’t in yet, but the experiment exposed some challenges to the promise of a low-cost online education. And it showed there is still a divide between technology-driven educators and the low-income, first-generation college hopefuls they are trying to reach.” via Unexpected Issues in Online Education Deal | Inside Higher Ed. So why isn’t there better bandwidth everywhere? The NYTimes says that it’s an issue of “digital literacy.” Which creates this interesting Catch-22 problem: How can we use online education to improve digital literacy if there’s not enough bandwidth for online education because of too little digital literacy? The major causes for low subscribership, as extensive survey research shows, are low interest in the Internet and minimal digital literacy. And too many American households lack the money or interest to buy a computer. As a result, more Americans subscribe to cable TV and cellphones than to Internet service. Our broadband subscription rate is 70 percent, but could easily surpass 90 percent if computer ownership and digital literacy were widespread. via No Country for Slow Broadband – NYTimes.com."
"885","2018-11-09","2023-03-24","https://computinged.wordpress.com/2018/11/09/when-do-we-know-that-a-programming-course-is-not-working-for-non-cs-majors/","There’s a good discussion going on in Facebook that I wanted to make more public and raise as a question here. The crush of undergraduates in CS today is making it difficult to offer tailored introductory CS courses to different majors. The problem is particularly acute when designing instruction for future CS teachers. If you put the CS teachers in the same course as the CS majors, it’s cheaper and easier — you just teach one big course, rather than multiple smaller courses. But is it as effective? Some of my colleagues suggest that we can design undergraduate introductory computing courses that are effective for both non-CS and CS majors. Here’s my question: How do you know when it’s not working? At what point would you admit that the one course option isn’t working? It’s an interesting empirical question. Here are some possible measures: What do you think? How would you know if your intro course was meeting non-CS students’ needs?"
"886","2019-09-09","2023-03-24","https://computinged.wordpress.com/2019/09/09/where-a-notional-machine-doesnt-help-javascript-and-the-dom/","At the Dagstuhl Seminar on Notional Machines and Programming Language Semantics, I came to a new understanding about where notional machines are not useful and another kind of support is needed. I joined a breakout group on “Notional Machines for everything else.” There had been discussions about notional machines for popular programming languages for Scratch and Python, and one breakout group was formed around that goal. This group was about exploring where else notional machines could be useful, like trying to understand machine learning, generating proofs, and JavaScript for Web development. Joe Politz was our group leader. After the first round of discussion, we all decided to focus on JavaScript. We had some serious experts on JavaScript and the DOM in our group, like Shriram Krishnamurthi and Titus Barik. The discussion was amazing! I was learning so much, and I took pages and pages of notes. Everyone noticed my feverish note-taking, so I got elected to report back to the group. That’s this blog post — it’s the work of the whole group (not just me). I just happened to be the guy who made the slides. We had already come to the realization that there isn’t just one notional machine per language. A notional machine is about helping students understand a computational process, and there can be lots of processes in a given language. So we picked a specific scenario that we were aiming to explain: You (as a student) want to turn the background yellow when the button is clicked.  But the student makes a mistake.  And I came to realize that, without a lot of support:  The problem is that window.bg = ""yellow"" isn’t wrong. Because there isn’t a previously defined bg property, this assignment simply creates a property bg for the window object. No error. It just doesn’t do what the students wanted. How does the student figure out that the desired property is backgroundColor? Get a list of all bindings on window? There are hundreds or even thousands of them. How do you find backgroundColor among all of those? The breakout group started listing on the blackboard the things we might need to explain to students to help them understand when went wrong or what might go wrong with clicking on a button to turn the background yellow. It was a long list.  You probably can’t read all of those, so I’ll list a few of them here: I really had no idea just how complicated JavaScript and the DOM were! Amy Ko looked up the JavaScript definition of what == means (see link here). This isn’t the formal semantics. This is meant to be understandable. It’s insanely complicated.  At this point, Ben Shapiro raised a really interesting side question: What’s the cost of JavaScript’s overly-complicated rules? Is there a way of measuring the lost productivity of bad programming language design?  So, what’s the answer?  I realized that the answer is not a notional machine. The problem is that long list Amy found for us. I can teach part of that list as a notional machine, but I can’t teach all of it with a simplified model. Any simplification I create would be insufficient for the complexity of the reality. And even having a notional machine wouldn’t help if a student typed window.bg = ""yellow"". The student needs IDE’s and other supports to figure out errors that never trigger an error. The solution is to reduce complexity to make it teachable. In an earlier talk at Dagstuhl, Ben Shapiro explained how Shriram and Joe and their collaborators did this with Pyret. In Pyret, they explicitly disallow some things that Python allows but are way too complicated to explain. Probably the best idea for JavaScript, following Racket’s lead, is to have language levels. We should teach students a strict subset of JavaScript, where the really complicated things are simply disallowed. The goal is to help students to learn a real subset, then grow the subset. TypeScript offers an alternative model, because it offers a more sane way of doing JavaScript. For example, TypeScript’s type checking might help figure out the window.bg bug. There are lots of other languages that are more reasonable and compile to JavaScript — but those are avoiding JavaScript entirely. The very best idea would be to fix JavaScript and the DOM, but it’s probably too late for that. This working group was useful to me for two reasons. First, I really do have to teach JavaScript and the DOM (again) in January 2020, and now I have a new sense of the challenges and my options. Second, this was a great example of where a notional machine is not the answer to a pedagogical problem. Thanks to members of the group who reviewed an earlier draft of this summary. They’re not responsible for where I still didn’t get the details right. "
"887","2018-11-16","2023-03-24","https://computinged.wordpress.com/2018/11/16/how-machine-learning-impacts-the-undergraduate-computing-curriculum/","I’ve been looking forward to seeing this article in print since Ben Shapiro first talked about this, months and months ago. Ben, Rebecca Fiebrink, and Peter Norvig raise the (reasonable) argument that machine learning is now a central activity in computer science, and should be a core topic in undergraduate computing curriculum. What does that mean for what we teach and how we teach it? It’s something that we ought to be talking about. The growing importance of machine learning creates challenging questions for computing education… Changes to the Introductory Sequence…These same two aims can also describe introductory courses for an ML-as-core world. We do not envision that ML methods would replace symbolic programming in such courses, but they would provide alternative means for defining and debugging the behaviors of functions within students’ programs. Students will learn early on about two kinds of notional machine—that of the classical logical computer and that of the statistical model. They will learn methods for authoring, testing, and debugging programs for each kind of notional machine, and learn to combine both models within software systems. We imagine that future introductory courses will include ML through the use of beginner-friendly program editors, libraries, and assignments that encourage students to define some functions using ML, and then to integrate those functions within programs that are authored using more traditional methods. For instance, students might take a game they created in a prior assignment using classical programming, and then use ML techniques to create a gestural interface (for example, using accelerometers from a smartphone, pose information from a webcam, or audio from a microphone) for moving the player’s character up, down, left, and right within that game. Such assignments would engage students in creating or curating training examples, measuring how well their trained models perform, and debugging models by adjusting training data or choices about learning algorithms and features.  Source: How Machine Learning Impacts the Undergraduate Computing Curriculum"
"888","2018-11-19","2023-03-24","https://computinged.wordpress.com/2018/11/19/mit-creates-a-college-of-computing-to-integrate-across-all-disciplines/","Last month, MIT announced the creation of the MIT Schwarzman College of Computing, with a $1 Billion commitment (see article here). Below is my favorite part of the press release. I’ll paraphrase the elements that have me excited about what MIT is going do with this new College: He defines bilinguals as people in fields like biology, chemistry, politics, history and linguistics who are also skilled in the techniques of modern computing that can be applied to them. Yes! That’s an exciting vision. Headquartered in a signature new building on MIT’s campus, the new MIT Schwarzman College of Computing will be an interdisciplinary hub for work in computer science, AI, data science, and related fields. The College will: reorient MIT to bring the power of computing and AI to all fields of study at MIT, allowing the future of computing and AI to be shaped by insights from all other disciplines; create 50 new faculty positions that will be located both within the College and jointly with other departments across MIT — nearly doubling MIT’s academic capability in computing and AI; give MIT’s five schools a shared structure for collaborative education, research, and innovation in computing and AI; educate students in every discipline to responsibly use and develop AI and computing technologies to help make a better world; and transform education and research in public policy and ethical considerations relevant to computing and AI. "
"889","2018-11-26","2023-03-24","https://computinged.wordpress.com/2018/11/26/african-americans-dont-want-to-play-baseball-like-women-dont-want-to-code-both-claims-are-false/","I listened to few of my podcasts this summer with our move, so I’m catching up on them now. I just heard one that gave me a whole new insight into Stuart Reges’s essay Why Women Don’t Code. In Here’s Why You’re Not an Elite Athlete (see transcript here), they consider why: In 1981, there was 18.7 percent black, African-American players in the major leagues. As of 2018, 7.8 percent. Why was there such a precipitous drop? David Canton, a professor at Connecticut College, offers three explanations: I look at these factors: deindustrialisation, mass incarceration, and suburbanization. With deindustrialisation — lack of tax base — we know there’s no funds to what? Construct and maintain ball fields. You see the rapid decline of the physical space in the Bronx, in Chicago, in these other urban areas, which leads to what? Lack of participation. Suburbanization drew the tax base out of the cities. With fewer taxes in the cities, there were fewer funds to support ball fields and maintain baseball leagues. The incarceration rates for African-American men is larger than for other demographic groups (see NCAA stats). Canton explains why that impacts participation in baseball: I can imagine in 1980, if you were 18-year-old black man in L.A., Chicago, New York, all of a sudden, you’re getting locked up for nonviolent offenses. I’m going to assume that you played baseball. I’m arguing that those men — if you did a survey, and go to prison today, federal and state, I bet you a nice percentage of these guys played baseball. Now some were not old enough to have children. And the ones that did weren’t there to teach their son to play baseball, to volunteer in Little League because they were in jail for nonviolent offenses. There is now a program called RBI, for Reviving Baseball in Inner cities, funded by Major League Baseball, to try to increase the participation in baseball by African-Americans and other under-served youth. There are RBI Academies in Los Angeles, New York, Kansas City, and St. Louis. So, why are there so few African-Americans in baseball? One might assume that they just choose not to play baseball, just as how Stuart Reges decided that the lack of women in the Tech industry means that they don’t want to code. I find the parallels between the two stories striking: Maybe there are people pushing back on the RBI program in baseball, who believe that African-Americans have chosen not to play baseball. I haven’t seen or heard that. If we accept that we ought to do something to get more African-Americans past the systemic barriers into baseball, isn’t it just as evident that we should do something to get more females into Computing?"
"890","2018-10-29","2023-03-24","https://computinged.wordpress.com/2018/10/29/novum-organum-the-original-how-to-not-be-wrong/","When I visited with Alan Kay and Bonnie MacBird in June, one of the ideas that he got me thinking about was Sir Francis Bacon’s Novum Organum (1620, wikipedia link), for ‘new instrument of science.’ Bacon understood human tendencies for bias long before behavioral economics. His book was the prototype for the modern popular book “How to Not Be Wrong: The Power of Mathematical Thinking” which advocates for mathematics as an approach to addressing human biases and limitations. Bacon aimed to construct a foundation for real science, a body of knowledge that we could trust despite the fact that our minds are weak and that we are easily swayed. He lists four “idols” — the biases which keep us from thinking objectively and scientifically. Wikipedia has a short description for each. A couple that I found particularly striking: I haven’t read the whole document — it’s available on Project Gutenberg, but it’s tough going. I have found that Bacon talks about issues not in the Wikipedia article that are are significant today. For example, Bacon decries making decisions based on too “few experiments” which is explicitly a concern addressed in the efforts to replicate prior results (e.g., article here). I keep thinking about what Bacon would say about computing education research. CER has some deep research questions it’s pondering (which I plan to address in some future blog posts). How do we make sure that we’re doing Science and not just following our Baconian idols?"
"891","2018-12-21","2023-03-24","https://computinged.wordpress.com/2018/12/21/do-we-want-stem-education-or-do-we-want-stem-learning/","null"
"892","2018-09-14","2023-03-24","https://computinged.wordpress.com/2018/09/14/applying-disessas-knowledge-in-pieces-framework-to-understanding-the-notional-machine/","In Lauren Margulieux’s blog where she summarizes papers from learning sciences and educational psychology, she takes on Andy diSessa’s 1993 paper “Toward an epistemology of physics” where diSessa applies his “knowledge in pieces” framework to how students develop an understanding of physics. (See blog post here.) The idea is that humans assemble their understanding of complex phenomenon out of knowledge of physical experiences, p-prims. Quoting Lauren: Elements: P-prims are knowledge structures that are minimal abstractions of common phenomena and typically involve only a few simple parts, e.g., an observed phenomenon, like a person hitting a pen and that pen rolling across the table, and an explanation, like when people hit things, they move. P-prims are both phenomenological, meaning that they are interpretations of reality, and primitive, meaning that are (1) based on often rudimentary self-explanations and (2) an atomic-level mental structure that is only separated into parts by excessive force. Cognitive Mechanism: P-prims are only activated when the learner recognizes similarities between a p-prim and the current phenomena. Recognition is impacted by many different features, such as cuing, frequency of activation, suppression, salience, and reinforcement. Because activation of p-prims depends on contextual features of phenomena, novices often fail to recognize relevant p-prims unless the contextual features align. I find diSessa’s framework fascinating, and I’ve always wondered how we could apply it to students learning the notional machine (see blog post here on notional machine). My guess is that students use p-prims to develop their mental model of how the computer works, because — what else could they use? In the end, isn’t all our understanding grounded in physical experiences? But using p-prims will likely lead to misconceptions since the notional machine is not based in the physical world. Maybe this is a source of common misconceptions in learning computing. The list of misconceptions that students have about variables, loops, scope, conditionals, and data structures is long and surprisingly consistent — across languages, over time. What could possibly be the common source of all those misconceptions? Maybe it’s physical reality. Maybe students generally apply the same p-prims when trying to understand computing, and that’s why the same misconceptions arise. It’s sort of like using a metaphor to understand something in computing, but then realizing that the metaphor itself is leading to misconceptions. And the metaphor that’s getting in our way is the use of physical world primitives for understanding the computational world. Colleen Lewis, as a student of diSessa’s, uses the Knowledge in Pieces framework in her work. In her terrific ICER 2012 paper, she does a detailed analysis of students’ debugging to identify misconceptions that they have about state. State is an interesting concept to study from a KiP perspective. It’s a common issue in CS, but less common in Physics. It’s not clear to me how students connect computational state to state in the real world. Is it state like water being frozen or liquid, or state like being painted blue? Do they get that state is malleable? This is a rich space to explore in computing education. What are the p-prims for understanding the notional machine? How do students use the physical world to understand the computational one? Read more of Lauren’s post here: Article Summary: diSessa (1993) Knowledge in Pieces Framework"
"893","2018-09-10","2023-03-24","https://computinged.wordpress.com/2018/09/10/south-carolina-requires-cs-to-fulfill-high-school-requirement-not-keyboarding/","Pat Yongpradit of Code.org shared some great news with me. Well, it’s not really “new” — it happened back in March 2018. But it was something that both of us worked on, and it was great to finally see it happen. South Carolina was one of the first ECEP (Expanding Computing Education Pathways) Alliance states. They had one of the first statewide summits on computing education (see blog post here). They were one of the first states to require computer science for all high school students. The problem was that they didn’t actually require computer science. They allowed some 90 classes to count as CS, and only six actually contained CS content (like programming or algorithms). Even a course on “keyboarding” counted as “CS” under the South Carolina system. South Carolina resisted changing this requirement, as Tony Dillon of the state Department of Education argued (see this blog post). I’ve worried that other states that mandate CS would fall into a similar trap (see blog post here on that). That changed March 28, 2018 with this memo. South Carolina has computer science standards. Keyboarding no longer counts. It’s an interesting question how this happened. I know that Pat and others at Code.org have been working a lot in South Carolina. I know that our South Carolina ECEP collaborators, like Eileen Kraemer, Tiffany Barnes, and Mary Lou Maher, have been working tirelessly on the state. I also know that my involvement from Georgia had limited success. As one Department of Education official said when I was working in Columbia, “No professor from Georgia Tech is going to tell me about AP CS.” My suspicion is that this happened because there was significant internal and external pressure. South Carolina wasn’t going to do much when it was just external pressure. But when it was both, there were changes made. Pat has promised me that Code.org is going to be helping South Carolina fulfill their plans for new CS requirements. "
"894","2018-09-07","2023-03-24","https://computinged.wordpress.com/2018/09/07/growth-mindset-matters-for-individual-human-performance-not-for-academic-success/","null"
"895","2018-09-21","2023-03-24","https://computinged.wordpress.com/2018/09/21/why-dont-women-want-to-code-wrong-question-why-dont-women-choose-cs-more-often/","Jen Mankoff (U. Washington faculty member, and Georgia Tech alumna) has written a thoughtful piece in response to the Stuart Reges blog post (which I talked about here), where she tells her own stories and reframes the question. Foremost, I think this is the wrong question to be asking. As my colleague Anna Karlin argues, women and everyone else should code. In many careers that women choose, they will code. And very little of my time as an academic is spent actually coding, since I also write, mentor, teach, etc. In my opinion, a more relevant question is, “Why don’t women choose computer science more often?” My answer is not to presume prejudice, by women (against computer science) or by computer scientists (against women). I would argue instead that the structural inequalities faced by women are dangerous to women’s choice precisely because they are subtle and pervasive, and that they exist throughout a woman’s entire computer science career. Their insidious nature makes them hard to detect and correct. Source: Why Don’t Women Want to Code? Ask Them! – Jennifer Mankoff – Medium"
"896","2018-08-06","2023-03-24","https://computinged.wordpress.com/2018/08/06/cs-educators-listen-to-authority-more-than-evidence-time-to-move-on/","My CACM Blog post for July starts from Stuart Reges’ inflammatory blog post in June “Why Women Don’t Code.” I use his post and other writing as a foil to critique how we make arguments in computing education. They tend to be arguments from authority, not from evidence. Why is that? Why do CS educators use evidence and research less than (as quoted in the CACM post) Physics educators? Is it because of the youth of the field, so when we grow up we’ll think more about research on how to teach well? Is it because of the economics of the field? Getting a CS background is so lucrative that students are desperate to succeed in the classes. We don’t have to teach well — student motivation will make up for where our teaching lacks. Or is it something else — is it something about CS in its nature that leads to opposition to using evidence and research when making educational decisions? In June, Stuart Reges, principal lecturer in Computer Science and Engineering at the University of Washington, published a blog post Why Women Don’t Code that led to several articles and blog posts in response (e.g., Seattle Times and GeekWire). Reges argues that women are simply never going to enter computing at significant numbers, and 20% is about all that we’re ever going to get. Our community must face the difficult truth that we aren’t likely to make further progress in attracting women to computer science. Women can code, but often they don’t want to. We will never reach gender parity. You can shame and fire all of the Damores you find, but that won’t change the underlying reality. It’s time for everyone to be honest, and my honest view is that having 20 percent women in tech is probably the best we are likely to achieve. Accepting that idea doesn’t mean that women should feel unwelcome. Recognizing that women will be in the minority makes me even more appreciative of the women who choose to join us. Hank Levy, Director of the U-W CSE School, wrote a great statement in response (see here). Levy disagrees with Reges’s conclusions, but supports Reges’s right to make his argument. Levy puts the current gender ratio in computer science in context by comparing to other disciplines. I was most struck by the 20% claim. That’s easily proven wrong. There are many CS educational programs in the US with more than 20% female (like Computational Media at Georgia Tech). There are countries where CS is more than 50% female. How can Reges claim that 20% is the best that we can possibly do? Here’s something important about Stuart Reges that people outside of CS education might not know — he’s a rockstar. He packs the house when he speaks at education conferences. He publishes regularly in the field. He has written a popular book on how to teach Java in introductory computer science (see Building Java Programs). Students love him, and teachers want to be like him. When Stuart Reges speaks, CS educators listen. In this post, I want to step back and consider how Reges is making his argument, because it says something about how we make decisions in computing education. I am going to characterize the argument style in computing education as argument from authority which Wikipedia describes as “a claimed authority’s support is used as evidence for an argument’s conclusion.” We need to recognize the form before we can move beyond it. Click here to read the rest of the CACM Blog Post."
"897","2018-08-31","2023-03-24","https://computinged.wordpress.com/2018/08/31/us-national-science-foundation-increases-emphasis-on-broadening-participation-in-computing/","The computing directorate at the US National Science Foundation (CISE) has increased its emphasis on broadening participation in computing (BPC). (See quote below and FAQ here.) They had a pilot program where large research grants were required to include a plan to increase the participation of groups or populations underrepresented or under-served in computing. They are now expanding the program to include medium and large scale grants. The idea is to get more computing researchers nationwide focusing on BPC goals. CISE recognizes that BPC requires an array of long-term, sustained efforts, and will require the participation of the entire community. Efforts to broaden participation must be action-oriented and must take advantage of multiple approaches to eliminate or overcome barriers. BPC depends on many factors, and involves changing culture throughout academia—within departments, classrooms, and research groups. This change begins with enhanced awareness of barriers to participation as well as remedies throughout the CISE community, including among principal investigators (PIs), students, and reviewers. BPC may therefore involve a wide range of activities, examples of which include participating in professional development opportunities aimed at providing more inclusive environments, joining various existing and future collective impact programs to helping develop and implement departmental BPC plans that build awareness, inclusion, and engagement, and conducting outreach to underrepresented groups at all levels (K-12, undergraduate, graduate, and postgraduate). In 2017, CISE commenced a pilot effort to increase the community’s involvement in BPC, by requiring BPC plans to be included in proposals for certain large awards [notably proposals to the Expeditions in Computing program, plus Frontier proposals to the Cyber-Physical Systems and Secure and Trustworthy Cyberspace (SaTC) programs]. By expanding the pilot to require that Medium and Large projects in certain CISE programs [the core programs of the CISE Divisions of Computing and Communication Foundations (CCF), Computer and Network Systems (CNS), and Information and Intelligent Systems (IIS), plus the SaTC program] have approved plans in place at award time in 2019, CISE hopes to accomplish several things: The long-term goal of this pilot is for all segments of the population to have clear paths and opportunities to contribute to computing and closely related disciplines. Read more at https://www.nsf.gov/pubs/2018/nsf18101/nsf18101.jsp"
"898","2019-08-19","2023-03-24","https://computinged.wordpress.com/2019/08/19/summarizing-findings-about-block-based-programming-in-computing-education/","As readers of my blog know, I’m interested in alternative modalities and representations for programming. I’m an avid follower of David Weintrop’s work, especially the work comparing blocks and text for programming (e.g., as discussed in this blog post). David wrote a piece for CACM summarizing some of his studies on block-based programming in computing education. It has just been published in the August issue. Here’s the link to the piece — I recommend it. To understand how learners make sense of the block-based modality and understand the scaffolds that novice programmers find useful, I conducted a series of studies in high-school computer science classrooms. As part of this work, I observed novices writing programs in block-based tools and interviewed them about the experience. Through these interviews and a series of surveys, a picture emerged of what the learners themselves identified as being useful about the block-based approach to programming. Students cited features discussed here such as the shape and visual layout of blocks, the ability to browse available commands, and the ease of the drag-and-drop composition interaction. They also cited the language of the blocks themselves, with one student saying “Java is not in English it’s in Java language, and the blocks are in English, it’s easier to understand.” I also surveyed students after working in both block-based and text-based programming environment and they overwhelmingly reported block-based tools as being easier. These findings show that students themselves see block-based tools as useful and shed light as to why this is the case."
"899","2019-07-01","2023-03-24","https://computinged.wordpress.com/2019/07/01/iterative-and-interdisciplinary-participatory-design-sessions-seeking-advice-on-a-research-method/","Here’s an unusual post for this blog: I’m looking for a research methodology, and I don’t know where to look for it. I’m hoping somebody here will have a suggestion — please do forward this blog post to others you think might have suggestions for me. We’re running participatory design sessions with teachers — asking teachers to try out programming languages with scaffolded activities, and then tell us about what they’d like for their classroom. I’m collaborating with Tammy Shreiner and Bradford Dykes at Grand Valley State University around having social studies teachers build data visualizations. We’re scouring the book Participatory Design for Learning, and in particular, we’re using Michelle Wilkerson’s chapter (which I’ve read twice now) because it matches the kind of work we’re doing. Michelle uses a technique called Conjecture Mapping to describe how her teams thinks about the components of a participatory design session. A session has a specific embodiment (things you put into the classroom or session), which you hope will lead to mediating processes (e.g., participants exploring data, people talking about their code, etc.). These are processes which should lead to desired outcomes based on theory. A conjecture map is like a logic model in that it connects your design to what you want to have happen, but a conjecture map is less about measuring outcomes. Rather, it’s more about describing mediating processes, which you theorize will lead to desired outcomes. The mediating process column is really key — it tells you what to look for when you run the design session. If you don’t hear the kind of talk you want and see participant success in the activity, something has gone wrong. Fix it before the next iteration. The paper on this technique is Conjecture Mapping: An Approach to Systematic Educational Design Research by William Sandoval. So here’s the first problem: We have different set of outcomes for our sessions. They’re interdisciplinary. I want to see the teachers being successful with their programs, my collaborators Tammy Shreiner and Bradford Dyke wants to see them talking about their data, and we all want to see participants relating their data visualizations to their history class (e.g., they shouldn’t be just making pretty pictures, and they should be connecting the visual elements to the historical meaning). Should we put all of these mediating processes and outcomes into one big conjecture map? We are not satisfied with this combined approach, because we’re going to be iterating on our designs over time. Most participatory design approaches are iterative, but I haven’t seen a way of tracking changes (in embodiment or mediating practices) over time. Right now, we’re working with Vega-Lite and JavaScript. In our next iterations, we’ll likely do different examples with Vega-Lite. Over time, we want to be building prototypes of data visualization languages designed explicitly for social studies educators (task-specific programming languages). We are concerned about two big problems as we iterate: The diagram at the bottom may help describe the problem — it’s the sketch that my PhD student Bahare Naimipour and I made while talking through this problem. We need to track multiple disciplinary processes and outcomes over time as we iterate across different embodiments. This isn’t about assessing an intervention or design. This is about gathering input as we design and implement technology prototypes. We want to be moving in the right direction, for the processes and outcomes that we want. Here’s where I’m asking for help: Where should we be looking for exemplars? Who else is doing iterative, multidisciplinary participatory design sessions? What are good methods for use to use? Thanks! "
"900","2019-06-12","2023-03-24","https://computinged.wordpress.com/2019/06/12/blocks-and-beyond-2019-call-for-papers/","#SnapCon19, the first Snap Conference, will be held September 22-25, 2019, in Heidelberg, Germany. Register by June 24 at this website. Blocks and Beyond 2019: Beyond Blocks Blocks programming has become increasingly popular in programming environments targeted at beginner programmers, end users, and casual programmers. Capitalizing on the energy and enthusiasm from the first two Blocks and Beyond workshops, we are pleased to announce the 2019 Blocks and Beyond workshop. Since blocks are only a small step towards leveraging visual languages and notations for specifying and understanding computation, the emphasis of the 2019 workshop is on the Beyond aspect of Blocks & Beyond: what kinds of visual notations and programming environment scaffolding facilitate: Understanding program semantics? Learning computational concepts? Developing computational identity and fostering computational participation and computational action? The goal of this workshop is to bring together language designers, educators, researchers, and members of the broader VL/HCC community to answer these questions. We seek participants with diverse expertise, including, but not limited to: design of programming environments, instruction with these environments, human factors, the learning sciences, and learning analytics. This workshop will engage participants to (1) discuss the state of the art of visual languages targeted at beginners, end users, and casual programmers; (2) assess the usability and effectiveness of these languages and their associated pedagogies; and (3) brainstorm about future directions for these languages. We invite three kinds of paper submissions to spark discussion at the workshop: To maximize discussion time at the workshop, paper presentation times will be very short. All workshop participants (whether or not they have an accepted paper) are encouraged to present a demo and/or poster of their work during the workshop. Anyone wishing to present a demo/poster should submit a 1 to 2 paragraph abstract. There is also an option to submit a 1 to 2 page demo/poster summary document that will appear in the proceedings. Submission details for papers and demo/poster abstracts and summary documents can be found at the workshop website: http://cs.wellesley.edu/blocks-and-beyond As with the first two Blocks and Beyond workshops, we are applying to publish the proceedings of this workshop with the IEEE. "
"901","2019-05-31","2023-03-24","https://computinged.wordpress.com/2019/05/31/come-hang-out-with-wil-and-me-to-talk-about-new-research-ideas-acm-icer-2019-work-in-progress-workshop/","Wil Doane and I are co-hosting the ACM ICER 2019 Work in Progress workshop that Colleen Lewis introduced at ICER 2014 in Glasgow (my report on participating). Colleen and I co-hosted last year. It really is a “hosting” job more than an “organizing” or “presenting” role. I love Colleen’s informal description of WiP, “You’re borrowing 4 other smart people’s brains for an hour. Then you loan them yours.” The participants do the presenting. For one hour, your group listens to your idea and helps you think through it, and then you pass the baton. The whole organizing task is “Let’s put these 4 people together, and those 4 people together, and so on. We give them 4 hours, and appropriate coffee/lunch breaks.” (Where the value “4” may be replaced with “5” or “6”.) Another useful description of WiP is “doctoral consortia for after-graduation.” Doctoral consortia are these great opportunities to share your research ideas and get feedback on them. Then there’s this sense that you graduate and…not have those ideas anymore? Or don’t need to share them or get feedback on them? I’ve expressed concern previously about the challenges of learning when you’re no longer seen as a learner. Of course, PhD graduates are supposed to have new research ideas, which go into proposals and papers. But how do you develop ideas when you’re at the early stages, when they’re not ready for proposals or papers? That’s what the WiP is about. The WiP page is here (and quoted in part below). To sign up, you just fill out this form, and later give us a drafty concept paper to share with your group. The WIP Workshop (formerly named the Critical Research Review) is a dedicated 1-day workshop for ICER attendees to provide and receive friendly, constructive feedback on works-in-progress. To apply for the workshop you will specify a likely topic about which you’ll request feedback. WIP participants will be assigned to thematic groups with 4-6 participants. Two weeks before ICER, participants will submit to the members of their group a 2-4 page primer document to help prepare for the session and identify the types of feedback sought. At WIP, depending upon group size, each participant will have 45-75 minutes to provide context, elicit advice, support, feedback, and critique. Typically, one of the other group members acts as a notetaker during an individual’s time in order to allow the presenter to engage fully in the discussion. WIP may be the right experience for you, if you would like to provide and receive constructive advice, support, feedback, or critique on computing education research issues such as: The goal of the workshop is to provide a space where we can receive support and provide support. The workshop is intended for active CS education researchers. PhD students are instead encouraged to apply for the Doctoral Consortium, held on the same day as WIP."
"902","2014-08-27","2023-03-24","https://computinged.wordpress.com/2014/08/27/the-first-critical-research-review-at-icer-2014/","My report on ICER 2014 is at Blog@CACM here. I also participated in the post-ICER Critical Research Review or Work-in-Progress Workshop (both titles have appeared at different times). Colleen Lewis organized it, based on the “functions” peer review that Education graduate students do at Berkeley. It was great, far better than I might have guessed. I wanted to participate, in order to support and be part of this new kind of activity at ICER. I was expecting maybe a dozen people in a room, where one at a time a person would present for 15-20 minutes and then get feedback for a few minutes. Y’know — a “workshop.” Boy, was I wrong. Instead, Colleen broke us up into two groups of five. (The small size was critical.) All of us presented some brief paper (couple pages preferred) that everyone read beforehand. Colleen gave each of us a writeup on the desired culture and tone for the event. “Don’t be mean” and “Don’t be defensive” and “Be nice” were some of the common themes in those directions. At the CRR, each of the five went off to a different room/space. Over the course of five hours (two the first day, three the next), each participant had her or his turn to share their work. Sometimes we saw data (a video, or a bit of interview transcript), that the group was meant to help interpret. Sometimes we saw a student problem or a design problem, and we brainstormed theoretical perspectives that could help to gain leverage on understand the student’s issues or to improve the design. It wasn’t a presentation, and it wasn’t an audience. It was (to use Colleen’s phrase) “borrowing four smart people’s brains to work on your problem for an hour.” I got a lot out of the feedback on my problem (related to the Constructionism for Adults post from awhile back). It was enormous fun digging into the others’ problems. Ben Shapiro of Tufts, Craig Miller from Depaul, Sara Esper of UCSD, and Kate Sanders from Rhode Island College were my teammates — it really felt more like a team, working together toward joint success than a presentation. At the end, we evaluated the activity to figure out what worked and what didn’t. It really worked to have an easel for a note-taker (not the presenter/leader) to use to track all the discussion. The notes helped the group figure out where they were at, and were a wonderful artifact for the presenter afterward. Overall, it was a huge success. I expect that we’ll see many future ICER (and other CER venue) papers coming out of the work we shared in Glasgow. I encourage others to participate in the CRR in future years."
"903","2017-06-12","2023-03-24","https://computinged.wordpress.com/2017/06/12/older-adults-learning-computer-programming-motivations-frustrations-and-design-opportunities/","Great new Blog@CACM post by Philip Guo summarizing his recent CHI publication — how do people over 60 learn to program? I’m so excited that Philip is exploring these issues. I’m interested in these issues, too, since I wrote about the challenges of learning as an adult and about the possibility of CS meet-ups for adult learners. Philip is offering data, which I very much appreciate. Why study older adults in particular? Because this population is already significant and also quickly growing as we all (hopefully!) continue to live longer in the coming decades. The United Nations estimates that by 2030, 25% of North Americans and Europeans will be over 60 years old, and 16% of the worldwide population will be over 60. There has been extensive research on how older adults consume technology, and some studies of how they curate and produce digital content such as blogs and personal photo collections. But so far nobody has yet studied how older adults learn to produce new technologies via computer programming. Thus, to discover older adults’ motivations and frustrations when learning to code, I designed a 10-question online survey that asked about their employment status (e.g., working, semi-retired, retired), occupation, why they are learning, what resources they use to learn, and what has been the most frustrating part of their learning experience thus far. Source: Older Adults Learning Computer Programming: Motivations, Frustrations, and Design Opportunities | blog@CACM | Communications of the ACM"
"904","2014-10-08","2023-03-24","https://computinged.wordpress.com/2014/10/08/creating-cs-meetups-for-constructionist-adult-education/","A few months ago, I wrote a post on Constructionism for Adults. I argued that we want constructionist learning for adults, but most constructionist learning environments are aimed at children. I suggested that adults have three challenges in constructionism that kids don’t have: I mentioned in that post that I was learning to play the ukulele, and that that experience was leading to new insights for me about adult education. I’m going to continue to use my ukulele learning to suggest a way to create constructionist learning opportunities for adults. From this point of view a very remarkable aspect of the Samba School is the presence in one place of people engaged in a common activity – dancing – at all levels of competence from beginning children who seem scarcely yet able to talk, to superstars who would not be put to shame by the soloists of dance companies anywhere in the world. The fact of being together would in itself be “educational” for the beginners; but what is more deeply so is the degree of interaction between dancers of different levels of competence. From time to time a dancer will gather a group of others to work together on some technical aspect; the life of the group might be ten minutes or half an hour, its average age five or twenty five, its mode of operation might be highly didactic or more simply a chance to interact with a more advanced dancer. The details are not important: what counts is the weaving of education into the larger, richer cultural-social experience of the Samba School. So we have as our problem: to transfer the positive features of the Samba School into the context of learning traditional “school material” — let’s say mathematics or grammar. Can we solve it? — Seymour Papert, “Some Poetic and Social Criteria for Education Design” (1975) What Seymour was seeing in Samba schools is what Jean Lave and Etienne Wenger called a community of practice. My colleagues Jose Zagal and Amy Bruckman have a wonderful paper describing how Samba schools are a form of a community of practice, and how that model appears in the Computer Clubhouses that Yasmin writes about in her new book. In their influential 1991 book Situated learning: Legitimate Peripheral Participation, Lave and Wenger described several examples for how learning occurs in everyday settings, often with adults. Lave and Wenger point out There are some key elements to these stories: In my quest to learn to play ukulele, I’ve joined the Southeast Ukers, a group of ukulele players in Atlanta. I was fortunate to know a Uker who invited me to a meet-up. A meet-up is the experience I’ve had that is closest to how I understand a Samba school. The meet-up is held at a local Hawaiian BBQ restaurant at 2 pm on the 1st and 3rd Sunday’s in a month. Ukers show up with a couple of Ukulele songbooks with literally hundreds of songs. (I happened to have one of them on my iPad when I first went, and had both by my second meet-up.) For the first 90 minutes, it’s a “strum-along.” The leader calls out a page number, then after a count off, everyone plays the same song and sings along. This is a remarkably successful learning activity for me as a newcomer. The gaps between the songs are when a lot of the learning happens for me. I get coaching (e.g., “You are doing really well!” or “I heard you stammer in your rhythm on that hard chord change”). I can ask specific questions and get specific advice. I’ve received tips on how to make D7 chords more easily, and different ways to do barre chords. After 90 minutes, it’s open-mic time. Individual ukers sign up during the strum-along, and then go up to the corner stage to perform (a quality setup, with separate mics for singing and for playing and someone at a sound board). Here’s where we get to see those on their way or at the center of the community of practice. Those at the center of the community of practice reference other meet-ups and other performances, and often play their own compositions. As a newcomer, I stare slack-jawed at the open-mic performances. They create music that I didn’t know could be made on a ukulele. Slowly, I’m starting to imagine myself playing at open-mic, even writing my own music. I’m starting to set a personal goal to become more central to this community of practice. At a meet-up, I talk to my fellow ukers and get a sense of how much effort does it take to develop that level of expertise. I start to get a sense of how much effort it will take me to reach different levels of expertise. There’s no expectations set on me, and no presumption of expertise. I can decide for myself on how good I want to get and how much effort I can afford to put in. I can set my own pace for when I might one day sign up for an open-mic performance, and maybe even try to compose my own music. (But it won’t be soon.) Could we create an experience like the Samba school or like the meet-up for learning computing by adults, like undergraduates, end-user programmers, and high school teachers? What are the critical parts that we would need to duplicate? It must be safe. People should be able to save face at the meet-up. Participants need to be able to talk with one another privately, without overhead (e.g., learning some complicated mechanism to open a private chat line). Newcomers need to be able to participate without expectation or responsibility, but be able to take on expectation and responsibility as they become more central to the community. There must be legitimate peripheral participation. Newcomers have to be able to participate in a way that’s meaningful while working at the edge of the community of practice. Asking the noobs in an open-source project to write the docs or to do user testing is not a form of legitimate peripheral participation because most open source projects don’t care about either of those. The activity is not valued. Everyone’s work must be visible. Newcomers should be able to see the great work of the more central participants just by looking around. This is probably the trickiest part. We tend to confuse accessibility with visibility. Yes, on an open source project, everyone’s contributions are accessible — if you can figure out github, and figure out which files are meaningful, and figure out who contributed which. Visible means that you can look around without overhead and see what’s going on. I must be able to work alone. Everyone needs a lot of hours of practice to develop expertise. It can’t happen just in the meetup. There needs to be a way to develop one’s work alone, and share it in the meetup. Here are some early thoughts on what it might be like to create an environment for learning computing the way that the ukulele meetup works. Years ago, the Kansas environment was implemented in the programming language Self. Kansas was remarkable. It was a shared desktop where all participants could see each other, see their cursors, and see their developing work. Lex Spoon created a version of Kansas for the Squeak programming language called Nebraska (for another “large, flat, sparsely-populated space”). Nebraska in Squeak is particularly interesting for a meet-up because all the rich multi-media features of Squeak are available in both a programmable and a drag-and-drop form. Here’s a sketch of what I propose, using a shared space like Kansas or Nebraska: Would this kind of meet-up be a way for adults to learn computation in a constructionist manner?"
"905","2018-12-05","2023-03-24","https://computinged.wordpress.com/2018/12/05/microblocks-joins-conservancy-csedweek/","This is great news for fans of GP and John Maloney’s many cool projects. MicroBlocks is a form of GP. This means that GP can be funded through contributions to the Conservancy. We’re proud to announce that we’re bringing MicroBlocks into the Conservancy as our newest member project. MicroBlocks provides a quick way for new programmers to jump right in using “blocks” to make toys or tools. People have been proclaiming that IoT is the future for almost a decade, so we’re very pleased to be able to support a human-friendly project that makes it really easy to get started building embedded stuff. Curious? Check out a few of the neat things people have already built with MicroBlocks. MicroBlocks is the next in a long line of open projects for beginners or “casual programmers” lead by John Maloney, one of the creators of Squeak (also a Conservancy project!) and a longtime Scratch contributor. MicroBlocks is a new programming language that runs right inside microcontroller boards such as the micro:bit, the NodeMCU and many Arduino boards. The versatility and interactivity of MicroBlocks helps users build their own custom tools for everything from wearables to model rockets or custom measuring devices and funky synthesizers. Source: MicroBlocks Joins Conservancy"
"906","2019-03-22","2023-03-24","https://computinged.wordpress.com/2019/03/22/where-to-find-guzdial-and-ericson-web-resources-post-georgia-tech-bookmark-this-post/","Georgia Tech has now shut down the web servers that Barbara Ericson and I have been using to share resources for the last umpteen years. They warned us back in the Fall that they were going to, so we have been moving Web resources over to the University of Michigan. Here are links to where to find some of our most often accessed resources (not all links and images will work, since some were hardcoded to Georgia Tech URLs): We do not have everything moved over. I believe that there were FERPA concerns about some of our websites (that we might be referencing student names), so we were not able to download those. We are recreating those resources best we can. Barbara has now set up a new blog for her AP CS A tracking data (see http://cs4all.home.blog), and I have uploaded my Computational Freakonomics slides and coursenotes to U-M. Bookmark this post, and as I find more resources in the stash I downloaded, I’ll link them from here. "
"907","2018-12-03","2023-03-24","https://computinged.wordpress.com/2018/12/03/the-systemic-factors-that-limit-black-participation-in-the-tech-sector/","I learned a lot from Kamau Bobb’s recent Atlantic article, “The Black Struggle for Technology Jobs.” In it, he details the systemic factors that limit Black participation in the Tech sector. He uses the possibility of Amazon’s HQ2 going to Atlanta as a framing. After Atlanta made the shortlist of cities vying for Amazon’s second global headquarters, HQ2, it submitted a multibillion-dollar investment to try to seal the deal. (Other cities’ proposals were even bigger.) At stake is nothing less than the city’s economic future: HQ2 promises more than 50,000 high-tech jobs with an average salary of more than $100,000. With the tech industry looking like the future of all industry, Atlanta landing Amazon’s HQ2 would be a dream come true. But a dream for whom? Highly educated people, particularly those with technical skills, are the ones who are really eligible for these prized jobs. People without that kind of education risk becoming even more marginalized in an increasingly tech-driven economy. In Atlanta, one of the most segregated cities in the United States, history has already largely determined who gets to benefit from the potential of Amazon. In 2016, there was only one census tract in Atlanta where the population was more than 65 percent black, and where more than half the population age 25 or older had a bachelor’s degree or higher. In 2000, there were 10. Here, many black and brown students, and poor students of all backgrounds, receive a substandard education that does not prepare them for entry to the select colleges and universities tech companies draw their workforces from. Consequently, with or without Amazon’s investment, the city’s black population likely won’t land stem jobs unless they can gain access to the rigorous educational paths required to compete for them. In Atlanta and the many other American cities still scarred by decades of racist education policies, the future of work is still largely defined by a past from which their residents of color can’t seem to break free. I’m biased in favor of this article because one of the students he interviews in this piece is my daughter, Katie. I learned from Katie’s comments, too. I knew that the public high school where we sent all three of our children was unusually diverse, yet it was a family conversation how the gifted/accelerated classes were almost all white and Asian. Because of what Barb and I do, we kept an eye on the AP CS class at that high school, and were surprised every year at how few Blacks ever entered the class, despite the significant percentage of Black students in the school. I’m glad that, years later, Katie still thinks about those issues and why so few Black students made it into her AP classes. "
"908","2018-12-10","2023-03-24","https://computinged.wordpress.com/2018/12/10/computational-thinking-abstracts-too-far-from-the-computer/","Judy Robertson has a blog post that I really enjoyed: What Children Want to Know About Computers. She argues that computational thinking has abstracted too far away from what students really want to know about, the machine. Computational thinking has been a hugely successful idea and is now taught at school in many countries across the world. Although I welcome the positioning of computer science as a respectable, influential intellectual discipline, in my view computational thinking has abstracted us too far away from the heart of computation – the machine. The world would be a tedious place if we had to do all our computational thinking ourselves; that’s why we invented computers in the first place. Yet, the new school curricula across the world have lost focus on hardware and how code executes on it. Her post includes pictures drawn by children about what they think is going on inside of the computer. They’re interested in these things! We should teach them about it. One of the strongest findings in modern science education is that inquiry works. Students learn science well if it’s based in the things that they want to know. Judy argues that kids want to know about the computer and how code executes on the computer. We shouldn’t be abstracting away from that. We should be teaching what the kids most want to learn. To be clear, I am not criticizing the children, who were curious, interested and made perfectly reasonable inferences based on the facts they picked up in their everyday lives. But I think that computer science educators can do better here. Our discipline is built upon the remarkable fact that we can write instructions in a representation which makes sense to humans and then automatically translate them into an equivalent representation which can be followed by a machine dumbly switching electrical pulses on and off. Children are not going to be able to figure that out for themselves by dissecting old computers or by making the Scratch cat dance. We need to get better at explicitly explaining this in interesting ways."
"909","2019-01-18","2023-03-24","https://computinged.wordpress.com/2019/01/18/vote-for-sigcses-top-10-papers-of-the-first-50-years/","The ACM Special Interest Group in CS Education (SIGCSE) has created a new “Test of Time” award. They are trying to define the top 10 papers of SIGCSE’s first 50 years. You can see the list and vote here. Because SIGCSE is celebrating their 50th anniversary, ALL SIGCSE conference papers are freely available in the ACM Digital Library through the Symposium (Feb 27-March 2 in Minneapolis). I don’t know all the papers on the list, but I’m happy that some of my favorites are there. Just mentioning a few: I do encourage you to check them all out, vote, and download as many papers as you can while they’re all free.  "
"910","2014-10-06","2023-03-24","https://computinged.wordpress.com/2014/10/06/can-female-lego-figures-attract-more-girls-to-science-sometimes-not-always/","Interesting question: When do toys lead to changes in stereotypes, and when don’t they? Why is including female scientists in toys for young kids so important? Because children begin making stereotypical assumptions of what a scientist looks like early in elementary school, and these stereotypes become more firmly implanted year-by-year. Starting in 1957, several research groups have asked school children to “draw a scientist” in order to probe these stereotypes. Normally, when someone is asked to draw a generic person they will draw a person of their own gender. This is not true when children are asked to draw scientists. In study after study, the vast majority of students of both genders draw a scientist as a white man in a lab coat.What is really fascinating is that several studies—although not all—have found that these stereotypes can be changed by simply exposing children to female and/or minority scientists. After interacting with diverse examples of scientists, children made more realistic images of scientists—portraying them without dangerous, smoking test tubes for example—and were more likely to draw female and minority scientists. via Can female LEGO figures attract more girls to science? | AAAS MemberCentral."
"911","2014-10-04","2023-03-24","https://computinged.wordpress.com/2014/10/04/programming-is-not-math/","Fun and interesting blog addressing the belief that mathematics is necessary for programming, a misconception that Nathan Ensmenger claims has reduced the percentage of women in computing. Sarah Mei goes into some depth addressing (and dispensing with) each of the three claims below Specifically, learning to program is more like learning a new language than it is like doing math problems. And the experience of programming today, in industry, is more about language than it is about math.And my next thought, of course, was why doesn’t anyone else think this? Why do we still have this idea that math skills indicate programming potential, while language skills mean you should go into poli sci?Well, when I feel out of my depth, I usually start by looking for “official” opinions. So I looked for relevant academic research. WTF ACADEMIA?!? I found absolutely none, which is pretty flabbergasting. I found a lot of opinions, both from computer science educators, and from people in industry. Perhaps within academia, the link between math and programming is considered such an obvious truth that it isn’t worth confirming with research.It seems more likely, though, that this research exists, but not under the search terms I tried. Please let me know if you are aware of relevant papers.In the meantime, if we can’t have data, we can at least examine the conversations people have on this topic. Here are some things people often say when asserting that people must be good at math to be good developers.Generally, they fall into three categories: 1. “You need to know math to be a good programmer.” 2. “You need to learn math to get the skills you need for programming.” 3. “Plenty of programming is still math!” via Sarah Mei » Programming Is Not Math."
"912","2014-10-02","2023-03-24","https://computinged.wordpress.com/2014/10/02/coding-is-the-new-writing-for-developing-self-expression-communication-imagination-and-solving-hard-problems-dr-idit-harel-caperton/","A really nice article by Dr. Idit Harel Caperton on why to learn to code. She really captures well the insight that computing is a medium, and the value of developing literacy in this medium. To summarize, kids and adults too learn best by teaching, explaining, inventing and representing information to others. Coding is the new writing tool for young minds to do just that and especially well when integrated into a harder problem and a larger purpose, than learning coding for the sake of learning coding. via Coding Is the New Writing for Developing Self-Expression, Communication, Imagination and Solving Hard Problems | Dr. Idit Harel Caperton."
"913","2014-10-12","2023-03-24","https://computinged.wordpress.com/2014/10/12/what-computing-education-research-gets-that-engineering-ed-and-physics-ed-research-doesnt/","In my most recent recent Blog@CACM post on last month’s ACM Ed Council meeting, I mentioned that I gave a talk about the differences between computing education research and engineering education research (EER) and physics education research (PER). Let me spell these out a bit here. The context was a panel on how to grow computing education research (CER). We were asked to consider the issue of getting more respect for computing education research (an issue I’ve written on before). I decided to explore the characteristics of CER that are important and that are not present in EER or PER. Engineering Education Research (EER) and Physics Education Research (PER) are better established and more well-respected in the United States. But I’ve come to realize that CER has characteristics that are different from what’s in EER and PER. Engineering Education Research I came to a new understanding of EER because of a cross-campus STEM Education Research seminar that we’re holding at Georgia Tech this semester. It’s given me the opportunity to spend a couple hours each week with people who publish in Journal of Engineering Education (see here), review for them, and edit for them. JEE is generally considered to top EER journal. If you’re not familiar, engineering education research is a big deal in the United States. There are well-funded engineering education research centers. There are three academic departments of EER. It’s well-established. In one of the early sessions, we talked about the McCracken Study (Mike McCracken has been coming to the sessions, which has been great), where an experimental assignment was used in five classes in four countries. Are there similar studies in EER? Our EER colleagues looked at one another and shrugged their shoulders. For the most part, EER studies occur in individual classes at individual institutions. Laboratory studies are rare. International collaborations are really rare. I started digging into JEE. The last issue of JEE only had papers by American authors from American institutions. I’m digging further back. My colleagues are right — international authors and collaborations are unusual in JEE. In contrast, I don’t think that the ACM Transactions on Computing Education has ever had an only-American issue. Our ICER conference is not even American-dominated. The ICER 2014 best paper award went to a paper by Leo Porter (American) who worked with Raymond Lister (Australian) using data collected from Daniel Zingaro’s classroom (at U. Toronto in Canada) to address a theory by Anthony Robins (New Zealand). We use classroom studies, laboratories studies, and frequently use multi-institutional, multi-national (MIMN) collaborative studies (and study how to conduct them well). Physics Education Research At the January workshop on CER that Steve Cooper organized (paper to appear in CACM next month — it’s where Eric Roberts gave a keynote that I wrote about here), Carl Wieman was the opening keynote speaker. He talked about the hot issues in physics education research. After his talk, he was asked about how physics education researchers were dealing with the gender skew in physics and about improving access in K-12 to quality educational opportunities. If you look at Brian Danielak’s visualization of AP CS test data, you’ll see that CS is the most gender-skewed, but Physics follows closely after. (Click on the picture to get a bigger version, and look at the lower left-hand corner.)   Carl said that gender diversity just wasn’t a priority in PER. I dug into the PER groups around the US. From what I could find, he’s right. Eric Mazur’s group has one paper on this issue, from 2006 (see here). I couldn’t find any at U. Washington or at Boulder. There probably is work on gender diversity in physics education research, but it certainly doesn’t stand out like the broadening participation in computing effort in the United States (see papers listing from Google Scholar). The January workshop really brought home for me that a key characteristic of CER, particularly in comparison with PER, is an emphasis on broadening participation, on social justice, on improving the diversity of the field, and guaranteeing access to quality educational opportunities for all. I don’t have a deep bottom-line here. It was only a few minute talk. My exploration of EER and PER gave me a new appreciation that CER has something special. It’s not as big or established as EER or PER, but we’re collaborative, international, working on hard and important problems, and using a wide variety of methods, from in-classroom to laboratory studies. That’s pretty cool."
"914","2014-10-16","2023-03-24","https://computinged.wordpress.com/2014/10/16/is-there-a-crisis-in-computer-science-education-decrease-in-graduation-rates-in-cs/","We’ve talked about this problem before — that it looks like we’re graduating fewer CS undergraduates, despite rising enrollment. Interesting analysis in The Chronicle:  Aside from looking remarkably like the Cisco logo itself a representation of San Francisco’s iconic Golden Gate Bridge, the chart clearly shows fluctuation in interest among undergraduates and graduates in computer science.The reason for that fluctuation isn’t clear from the graph, but we have a couple of theories: 1. The pipeline was primed: In the 1970s and 1980s, many elementary, middle, and high schools taught computer programming to students, according to Joanna Goode. As an associate professor of education studies at the University of Oregon, Ms. Goode has researched access for women and students of color in computer science.“But, as the PC revolution took place, the introduction to the CD-ROMS and other prepackaged software, and then the Internet, changed the typical school curriculum from a programming approach to a ‘computer literacy’ skill-building course about ‘how to use the computer,’”… 2. The job market: Fluctuations in college-degree attainment are often connected to fluctuations in the job market in certain industries. via Is There a Crisis in Computer-Science Education? – Data Points – Blogs – The Chronicle of Higher Education."
"915","2014-10-17","2023-03-24","https://computinged.wordpress.com/2014/10/17/why-the-coding-for-all-movement-is-more-than-a-boutique-reform-margolis-and-kafai-respond-to-cuban-in-washington-post/","Highly recommended reading — Jane Margolis and Yasmin Kafai respond to the concerns of Larry Cuban about the “coding for all” movement (that I blogged on here). They address a wide range of issues, from the challenges of changing school to the importance of education about coding for empowerment. On a functional level, a basic understanding of code allows for an understanding of the design and functionalities that underlie all aspects of interfaces, technologies, and systems we encounter daily. On a political level, understanding code empowers and provides everyone with resources to examine and question the design decisions that populate their screens. Finally, on a personal level, everyone needs and uses code in some ways for expressive purposes to better communicate, interact with others, and build relationships. We need to be able to constructively, creatively, and critically examine designs and decisions that went into making them. via Why the ‘coding for all’ movement is more than a boutique reform – The Washington Post."
"916","2014-09-19","2023-03-24","https://computinged.wordpress.com/2014/09/19/larry-cuban-on-why-requiring-coding-is-a-bad-idea/","Larry Cuban is a remarkable educational historian. He’s written an article about why requiring coding is a bad idea, and links it to the history of Logo in the 1980’s. I think #1 is the most important, and is similar to Seymour Papert’s “Why School Reform is Impossible” article and to Roy Pea’s concerns about requiring computing. The reasons are instructive to current enthusiasts for coding: 1. While the overall national context clearly favors technological expertise, Big Data, and 21st century skills like programming, the history of Logo showed clearly, that schools as institutions have lot to say about how any reform is put into practice. Traditional schools adapt reforms to meet institutional needs. 2. Then and now, schools eager to teach coding , for the most part, catered to mostly white, middle- and upper-middle class students. They were and are boutique offerings. 3. Then and now, most teachers were uninvolved in teaching Logo and had little incentive or interest in doing so. Ditto for coding. 4. Then and now, Logo and coding depend upon the principle of transfer and the research supporting such confidence is lacking. via All students should learn to code. Right? Not so fast.."
"917","2014-10-18","2023-03-24","https://computinged.wordpress.com/2014/10/18/learners-dont-know-whats-best-for-them/","Annie Murphy Paul has a nice article about autodidacts — yes, there are some, but most of us aren’t. MOOCs are mostly for autodidacts. The paper from Educational Psychologist is excellent, and I reading the original as well as Paul’s review. In a paper published in Educational Psychologist last year, Jeroen J.G. van Merriënboer of Maastricht University and Paul A. Kirschner of the Open University of the Netherlands challenge the popular assumption “that it is the learner who knows best and that she or he should be the controlling force in her or his learning.” There are three problems with this premise, van Merriënboer and Kirschner write. The first is that novices, by definition, don’t yet know much about the subject they’re learning, and so are ill equipped to make effective choices about what and how to learn next. The second problem is that learners “often choose what they prefer, but what they prefer is not always what is best for them;” that is, they practice tasks that they enjoy or are already proficient at, instead of tackling the more difficult tasks that would actually enhance their expertise. And third, although learners like having some options, unlimited choices quickly become frustrating—as well as mentally taxing, constraining the very learning such freedom was supposed to liberate. via Ed tech promoters need to understand how most of us learn | The Hechinger Report."
"918","2014-10-20","2023-03-24","https://computinged.wordpress.com/2014/10/20/the-growing-tide-of-anti-intellectualism/","The issues raised about education are particularly relevant to this blog. State cutbacks of funding to universities send a message about what’s valued and what’s not. CS departments in state schools (and elsewhere) are facing enormous increases in enrollment, and without additional resources, are going to be imposing caps — which will serve to reduce the diversity of computing, as it did in the 1980’s. Where we place our resources indicates our values. Spaf's Thoughts There is an undeniable, politically-supported growth of denial — and even hatred — of learning, facts, and the educated. Greed (and, most likely, fear of minorities) feeds demagoguery. Demagoguery can lead to harmful policies and thereafter to mob actions. I’ve written on this topic here before. I also have cited an excellent essay from Scientific American about how the rising tide of anti-intellectualism threatens our democracy and future (you should read it). What prompts this post is a recent article about a thinly-veiled political probe of the National Science Foundation, combined with the pending national election in the US. (Some of these issues apply elsewhere in the world, but this is a US-centric post.) This view is also reinforced by my current experience — I am on a combined speaking tour and family vacation in Poland. I recently visited a memorial to the Katyn massacre, remembering when Soviet… View original post 1,026 more words"
"919","2014-10-22","2023-03-24","https://computinged.wordpress.com/2014/10/22/in-silicon-valley-diversity-conversations-age-is-left-out/","I’ve heard this from former students in Silicon Valley. It’s hard to stay in the game for long, because you “age out.” But one set of statistics has been noticeably absent: the age of those companies workers.Silicon Valleys conversation about diversity has revolved chiefly around gender and race, although the stereotype of the techie as white, male and young has written out the over-40 set as well.”Walk into any hot tech company and you’ll find disproportionate representation of young Caucasian and Asian males,” said Ed Lazowska, who holds the Bill & Melinda Gates chair in Computer Science & Engineering at the University of Washington. “All forms of diversity are important, for the same reasons: workforce demand, equality of opportunity and quality of end product.” via In Silicon Valley diversity conversations, age is left out – SFGate."
"920","2014-10-26","2023-03-24","https://computinged.wordpress.com/2014/10/26/adjunct-faculty-starting-to-unionize/","I wonder if this is the start of a trend that will change higher education. The job of being faculty is becoming harder, especially in CS as enrollments rise without a rise in faculty numbers. Adjunct faculty are particularly put upon in universities, and unionizing is one way for them to push back. Part-time faculty members at downtown Pittsburgh’s Point Park University have voted to join the Adjunct Faculty Association of the United Steelworkers AFA-USW.The group filed a petition with the National Labor Relations Board NLRB in April to hold a mail ballot election. A total of 314 part-time Point Park instructors were eligible to vote, and the ballots were counted this morning at the NLRB’s downtown offices. via Point Park Adjunct Faculty Votes to Join AFA-USW Union | United Steelworkers."
"921","2014-10-28","2023-03-24","https://computinged.wordpress.com/2014/10/28/going-beyond-the-cognitivist-in-computing-education-research-questions/","In Josh Tenenberg’s lead article in the September 2014 ACM Transactions on Computing Education (linked below), he uses this blog, and in particular, this blog post on research questions, as a foil for exploring what questions we ask in computing education research. I was both delighted (“How wonderful! I have readers who are thinking about what I’m writing!”) and aghast (“But wait! It’s just a blog post! I didn’t carefully craft the language the way I might a serious paper!”) — but much more the former. Josh is kind in his consideration, and raises interesting issues about our perspectives in our research questions. I disagree with one part of his analysis, though. He argues that my conception of computing education (“the study of how people come to understand computing”) is inherently cognitivist (centered in the brain, ignoring the social context) because of the word “understand.” Maybe. If understanding is centered in cognition, yes, I agree. If understanding is demonstrated through purposeful action in the world (i.e., you understand computing if you can do with computing what you want), then it’s a more situated definition. If understanding is a dialogue with others (i.e., you understand computing if you can communicate about computing with others), then it’s more of a sociocognitive definition. The questions he calls out are clearly cognitivist. I’m guilty as charged — my first PhD advisor was a cognitive scientist, and I “grew up” as the learning science community was being born. That is my default position when it comes to thinking about learning. But I think that my definition of the field is more encompassing, and in my own work, I tend toward thinking more about motivation and about communities of practice. Asking significant research questions is a crucial aspect of building a research foundation in computer science CS education. In this article, I argue that the questions that we ask are shaped by internalized theoretical presuppositions about how the social and behavioral worlds operate. And although such presuppositions are essential in making the world sensible, at the same time they preclude carrying out many research studies that may further our collective research enterprise. I build this argument by first considering a few proposed research questions typical of much of the existing research in CS education, making visible the cognitivist assumptions that these questions presuppose. I then provide a different set of assumptions based on sociocultural theories of cognition and enumerate some of the different research questions to which these presuppositions give rise. My point is not to debate the merits of the contrasting theories but to demonstrate how theories about how minds and sociality operate are imminent in the very questions that researchers ask. Finally, I argue that by appropriating existing theory from the social, behavioral, and learning sciences, and making such theories explicit in carrying out and reporting their research, CS education researchers will advance the field. via Asking Research Questions."
"922","2014-09-28","2023-03-24","https://computinged.wordpress.com/2014/09/28/why-one-school-district-decided-giving-laptops-to-students-is-a-terrible-idea/","A really fascinating piece about all the problems that Hoboken had with their one-laptop-per-child program. The quote listed below describes the problems with breakage and pornography. The article goes on to describe problems with too little memory, bad educational software, wireless network overload, anti-virus expense, and teacher professional learning costs. I firmly believe in the vision of one-laptop-per-student. I also firmly believe that it’s crazy-expensive and hard to make work right, especially in large school districts. We had “half a dozen kids in a day, on a regular basis, bringing laptops down, going ‘my books fell on top of it, somebody sat on it, I dropped it,’ ” said Crocamo. Screens cracked. Batteries died. Keys popped off. Viruses attacked. Crocamo found that teenagers with laptops are still… teenagers. “We bought laptops that had reinforced hard-shell cases so that we could try to offset some of the damage these kids were going to do,” said Crocamo. “I was pretty impressed with some of the damage they did anyway. Some of the laptops would come back to us completely destroyed.” Crocamo’s time was also eaten up with theft. Despite the anti-theft tracking software he installed, some laptops were never found. Crocamo had to file police reports and even testify in court. Hoboken school officials were also worried they couldn’t control which websites students would visit. Crocamo installed software called Net Nanny to block pornography, gaming sites and Facebook. He disabled the built-in web cameras. He even installed software to block students from undoing these controls. But Crocamo says students found forums on the Internet that showed them how to access everything.“There is no more determined hacker, so to speak, than a 12-year-old who has a computer,” said Crocamo. via Why a New Jersey school district decided giving laptops to students is a terrible idea | The Hechinger Report."
"923","2013-10-02","2023-03-24","https://computinged.wordpress.com/2013/10/02/a-playful-live-coding-practice-to-explore-syntax-and-semantics/","Three of the nights of the Dagstuhl Seminar on Live Coding included performances. Several of these combined live coders with analogue instruments (guitar, piano, cello, and even kazoo), which was terrific to watch.  I found one of their practices fascinating, with real potential for the computer science classroom. Alex Maclean introduced it as “Mexican Roulette,” because they first did it at a live coding event in Mexico City. Live coders take turns (the roulette part) at a shared computer connected to speakers at the front of the room. What I found most promising about this practice is that (to use Briana Morrison’s phrase for this) nothing is ever wrong here. The game is to keep the music going and change it in interesting ways. Responsibility for the music is shared. Mistakes are part of the process, and are really up for definition. Is that a mistake, or an exploration of a new direction? This activity encourages playing with syntax and semantics, in a collaborative setting. It relies on the separation of program and process — the music is going, while the next live coder is figuring out the change. This could be used for learning any language that can be used for live coding."
"924","2013-10-03","2023-03-24","https://computinged.wordpress.com/2013/10/03/live-coding-as-a-path-to-music-education/","We have talked here before about the use of computing to teach physics and the use of Logo to teach a wide range of topics. Live coding raises another fascinating possibility: Using coding to teach music. There’s a wonderful video by Chris Ford introducing a range of music theory ideas through the use of Clojure and Sam Aaron’s Overtone library. (The video is not embeddable, so you’ll have to click the link to see it.) I highly recommend it. It uses Clojure notation to move from sine waves, through creating different instruments, through scales, to canon forms. I’ve used Lisp and Scheme, but I don’t know Clojure, and I still learned a lot from this. I looked up the Georgia Performance Standards for Music. Some of the standards include a large collection of music ideas, like this: Describe similarities and differences in the terminology of the subject matter between music and other subject areas including: color, movement, expression, style, symmetry, form, interpretation, texture, harmony, patterns and sequence, repetition, texts and lyrics, meter, wave and sound production, timbre, frequency of pitch, volume, acoustics, physiology and anatomy, technology, history, and culture, etc. Several of these ideas appear in Chris Ford’s 40 minute video. Many other musical ideas could be introduced through code. (We’re probably talking about music programming, rather than live coding — exploring all of these under the pressure of real-time performance is probably more than we need or want.) Could these ideas be made more constructionist through code (i.e., letting students build music and play with these ideas) than through learning an instrument well enough to explore the ideas? Learning an instrument is clearly valuable (and is part of these standards), but perhaps more could be learned and explored through code. The general form of this idea is “STEAM” — STEM + Art. There is a growing community suggesting that we need to teach students about art and design, as well as STEM. Here, I am asking the question: Is Art an avenue for productively introducing STEM ideas? The even more general form of this idea dates back to Seymour Papert’s ideas about computing across the curriculum. Seymour believed that computing was a powerful literacy to use in learning science and mathematics — and explicitly, music, too. At a more practical level, one of the questions raised at Dagstuhl was this: We’re not having great success getting computing into STEM. Is Art more amenable to accepting computing as a medium? Is music and art the way to get computing taught in schools? The argument I’m making here is, we can use computing to achieve math education goals. Maybe computing education goals, too."
"925","2013-10-07","2023-03-24","https://computinged.wordpress.com/2013/10/07/is-it-worth-teaching-young-kids-to-code/","How young can we teach kids to code? Is it worth teaching really young kids to code? The argument below is missing the whole point of the difference between natural and artificial languages. Programming requires specification of details that do not occur in natural language (as seen in John Pane’s work, and related to the “Communicating with Aliens” problem). Why should our evolved language acquisition systems help with that? The article linked below is pretty good as these things go, but they’re missing a lot of nuance in what it means “to code.” I am not convinced that we can fruitfully teach five or six year olds to code — though it’s certainly worth exploring and experimenting with. I would not expect it to have much effect, though. If we had a school system that used code in interesting and powerful ways across the curriculum, then starting to teach kids to program at five or six as steps toward computational literacy would make lots of sense. But if only 12% of US high schools have computer science, and far fewer middle and elementary schools have it, and CS is still just this little class in the corner that doesn’t connect to anything else — then you can’t expect the coding that happens at that age to have much effect. But that pessimism is at odds not only with the experiences of Gibson and other pioneering teachers but also with the science of language acquisition. Extensive research has shown that because young brains are so adept at picking up languages, it’s best to introduce children to foreign tongues as early as possible. This is why so many ambitious parents are now clamoring for kindergartens that offer intensive Mandarin—they want to give their kids the best possible shot at learning a key language of the Asian century. What those parents likely don’t realize is that the same neural mechanisms that make kids sponges for Mandarin likely also make them highly receptive to computer languages. Kindergartners cannot become C++ ninjas, but they can certainly start to develop the skills that will eventually cement lifelong fluency in code. via Forget Foreign Languages and Music. Teach Our Kids to Code | Wired Opinion | Wired.com."
"926","2013-10-08","2023-03-24","https://computinged.wordpress.com/2013/10/08/why-schoolgirls-are-not-interested-in-studying-it/","An interesting though somewhat sad story from a school-age girl (probably high school level?) about why she’s not interested in Information and Communications Technology. A good part of her story has to do with self-efficacy — how do you get better at this? Throughout my first two years, my ICT assessment levels have always been much lower than other subjects and this can put you in the frame of mind that you’re bad at ICT, and if there are other subjects you’re better at, surely it’s simpler to take them for GCSE. And of course, IT is not the ideal job for me if I can’t even pass an exam. Unless computing was made a compulsory subject like a language or maths, I don’t think this will change. To improve your English you can read, and to improve your ICT there are particular websites, but I certainly would not spend time on them and I’m sure my friends wouldn’t either via Why schoolgirls are not interested in studying IT – WITsend."
"927","2013-10-09","2023-03-24","https://computinged.wordpress.com/2013/10/09/tennessee-allows-cs-to-count-the-impact-claims-look-wrong/","The announcement is good news: Congratulations Tennessee! This year, for the first time, the State of Tennessee Board of Education allows high school computer science courses to count towards graduation requirements. Now, Advanced Placement Computer Science A satisfies a math requirement for all high Tennessee high school students. via Tennessee now allows computer science to count toward high school graduation | Code.org. Then there’s a claim later on the same page, “In these states, enrollment in computer science is higher (particularly among women and students of color), compared to the other states.” That claim is intriguing. Where’d they get this data? I’d love to get CS enrollment data by state! So I followed the link to this PDF. Where I found this graph:  I don’t know where one can get AP CS class size data. I’ve not seen that from the College Board. As far as I can tell from the AP Report to the Nation, the College Board doesn’t have enrollment data. What could they be counting to get these results, using variables from the College Board? The numbers looked close to something that I’d seen in Barb’s data. So, I tried an analysis with Barb’s spreadsheet of AP CS data. I created a “CountsCS” variable (1=on the Code.org list, 0=everyone else), and looked at the number of AP CS test takers in a state divided by the number of schools passing AP CS audit in the state. I think of this as the “yield” — the number of actual test-takers by teacher (assuming one teacher per school, which is pretty much the rule for AP CS). Below are the yield distributions for 2012 (with average and +/- standard deviation). These numbers look pretty close to the above, so I’m guessing that this is what they’re counting (for some year previous to 2012). It is true that the average yield (not enrollment) for CountCS states is higher than for non-CountCS states. There isn’t a statistically significant difference, though (using t-test with a 95% confidence interval).  It could be that these distributions will become more distinct over time. Some states (like Tennessee) have just made CS count. It will take years to see an impact. Digging deeper, I looked at the number of test-takers by state in terms of whether the state counts CS. Below is the distribution. There is on average more test-takers in states that count CS, but the distribution is broad. There isn’t a statistically significant difference.  Given that the test-takers are not significantly different based on whether a state counts CS or not, I didn’t think that the minority or female numbers would either. It is true that there are on average more women test-takers from states that count CS, but the distribution is large. The difference is not statistically significant. The CountCS states include Vermont (which had 1 female AP CS test-taker in 2012), but does not include North and South Dakota, each of which had 2 female AP CS test-takers in 2012. (Alaska, Mississippi, Montana, and Wyoming all had zero female AP CS test-takers, and none of them count CS.) I didn’t see significant differences based on under-represented minority groups.  If we really want to show that counting CS matters, we’d really want to do it a different way entirely. We should compare the same state pre/post making the decision to count CS. Even then, we’d want to give it a few years to filter through the system (e.g., Juniors and Seniors in high school are unlikely to change their plans for graduation to take CS as soon as it counts). I do believe that counting CS towards high school graduation will increase the number of students taking CS, but measuring that impact is challenging."
"928","2013-07-26","2023-03-24","https://computinged.wordpress.com/2013/07/26/more-women-pass-ap-cs-than-ap-calculus/","Barbara Ericson has generated her 2012 Advanced Placement Computer Science report. http://home.cc.gatech.edu/ice-gt/321 has all of her reports. http://home.cc.gatech.edu/ice-gt/548 has her more detailed analysis just of 2012. Since one of our concerns with GaComputes and ECEP is on pass rates, not just test-takers, she dug deeper into pass rates. For a point of comparison, she looked up AP Calculus pass rates. What she found is somewhat surprising — below is quoted from her page. Comparison of AP CS A to AP Calculus AB in 2012 The number of students that take the exam per teacher is much higher for AP Calculus AB at 21 students per teacher versus 11 for Computer Science A The number of schools that teach Calculus is 11,694 versus 2,103 AP CS A had a higher pass rate than Calculus – 63% versus 59% AP CS A had a higher female pass rate than Calculus – 56% versus 55% AP CS A had a higher Hispanic pass rate than Calculus – 39.8% versus 38.4% AP Calculus had a higher black pass rate than CS – 28.7% versus 27.3% Calculus had a much higher percentage of women take the exam than CS – 48.3% versus 18.7% Calculus had a higher percentage of black students take the exam than CS – 5.4% versus 4.0% Calculus had a higher percentage of Hispanic/Latino students take the exam than CS – 11.5% versus 7.7%"
"929","2013-10-10","2023-03-24","https://computinged.wordpress.com/2013/10/10/six-learning-barriers-in-end-user-programming-systems-wins-most-influential-paper-award/","Congratulations! Well-deserved! Here’s a link to the original paper. Brad A. Myers, professor in the Human-Computer Interaction Institute, will be honored for the second year in a row as the author of a Most Influential Paper at the IEEE Symposium on Visual Languages and Human-Centric Computing, (VL/HCC). He is the first person to win the award twice since it was established in 2008. Myers and his co-authors — former students Andrew Ko, the first author, is now an assistant professor at the University of Washington, and Htet Htet Aung, now a principal user experience designer at Harris Healthcare Solutions in the Washington, D.C., area — will receive the Most Influential Paper award at VL/HCC 2013, Sept. 15-19 in San Jose, Calif. The symposium is the premier international forum for research on how computation can be made easier to express, manipulate, and understand. Their 2004 paper, “Six Learning Barriers in End-User Programming Systems,” focused on barriers to learning programming skills beyond the programming languages themselves. Their study of beginning programmers identified six types of barriers: design, selection, coordination, use, understanding, and information. This deeper understanding of learning challenges, in turn, supported a more learner-centric view of the design of the entire programming system. via SCHOOL OF COMPUTER SCIENCE, Carnegie Mellon."
"930","2013-10-11","2023-03-24","https://computinged.wordpress.com/2013/10/11/all-female-engineering-class-and-programming-academy/","In one week, I found two articles about all female programming academy (first quote and link below) and engineering high school class (second link and quote below). Both of them talk about issues of sexism and intimidation that they hope an all-female cohort will help to avoid. Why just for women? Because some hiring managers, in response to these statistics, are particularly interested in hiring women, Worthy says. “The need is very top-of-mind,” she says. In addition, there are other training options for men, though they aren’t free like the Ada Developers Academy is, she admits. Moreover, some women and girls have encountered sexism in school and training programs themselves; an all-female class may forestall that problem. The Ada Developers Academy isn’t the only such effort to challenge this trend. A number of other parallel training opportunities for women are also springing up, some for students and some for working women, to help fill jobs and address the growing gender gap in programming. via Washington State Group Announces One-Year Programming Academy for Women. Seventeen female students are enrolled in Wisconsin’s first high school class aimed at women in engineering. … Women comprise more than 20% of engineering school graduates but only 11% of practicing engineers, according to the National Science Foundation. Only about 30% of the 14 million Americans who work in manufacturing are women, a study from the National Women’s Law Center noted. “If we are going to have any hope of replacing all of the retiring baby boomers, we have to get women involved,” Moerchen said. “It’s a pretty wide gender gap,” Moerchen said, adding that only about three of 35 students in computer-aided machining courses are female. “The data show that female students are easily intimidated by technology and engineering classes that are traditionally dominated by male students,” Moerchen said. After researching programs in other states, the Kewaskum teachers said they believed they could create an engineering class specifically for girls that would prepare the students for advanced courses. via Kewaskum High School launches all-female engineering class."
"931","2013-10-12","2023-03-24","https://computinged.wordpress.com/2013/10/12/hour-of-code-information-from-hadi-partovi-of-code-org/","This December, to celebrate Computer Science Education Week, we’re organizing a massive campaign to encourage 10 million students (and adults) to try an Hour of Code. This will be the largest initiative of its kind, ever. Please help us recruit your local school, community organizations, or even your company to participate. Learn more. It’s an introduction to computer science designed to demystify “code” and show that anyone can learn the basics. There will be a variety of hour-long tutorials everyone can do – on a web-browser, tablet, smartphone, or even with no computer at all. Computer science is an important foundation for all students, for all careers. Too many people think programming is hard or requires math; the Hour of Code is designed to inspire. Code.org will gift 50 class-sets of laptops to 50 lucky schools, one in every state in the US. Ask your local school to plan an Hour of Code for every grade to qualify. Let’s make history: Help bring 10,000,000 students to try an Hour of Code  The Hour of Code materials will be available in several languages. If you want to help us as a volunteer translator, let us know. Thank you for your support, Hadi Partovi Founder, Code.org"
"932","2013-10-14","2023-03-24","https://computinged.wordpress.com/2013/10/14/everything-youve-ever-been-told-about-how-you-learn-is-a-lie/","The first of these “lies” is the one that that the students in my TA Prep (Teaching Assistant Preparation course, for PhD students learning to be teaching assistants) courses most often say back to me. The third lie (where “___” is “computer programming”) is a pernicious one among CS teachers. When I was in middle school and high school, teachers loved to impart various tidbits of wisdom about the way students learn during lectures, always couched in such a way as to indicate these were scientifically accepted facts. You know everyone learns differently. Do you think you learn better through words or pictures? Did you know you learn different subjects with different sides of the brain? Welp, they were wrong. Many of the theories of “brain-based” education, a method of instruction supposedly based on neuroscience, have been largely debunked by rigorous science. Brain-based education studies are usually poorly designed and badly controlled. Nevertheless, myths about how we learn persist in the popular imagination, and, most importantly, in educational materials and references for teachers. 1. We Learn Best When Teaching Is Tailored To Our Learning Style 2. Some People Are Left-Brained, Some People Are Right-Brained 3. __ Will Make You Smarter via Everything You’ve Ever Been Told About How You Learn Is A Lie | Popular Science. "
"933","2013-10-15","2023-03-24","https://computinged.wordpress.com/2013/10/15/black-enrollment-falls-at-umich-as-michigan-voters-reject-affirmative-action/","This is a big deal that the Supreme Court is facing this week. The NYTimes is in support of striking down the Michigan constitutional amendment. Let me put the below statistic in a bit of CS Ed context. As mentioned previously, UMich just graduated last year the first Black female CS PhD. Barb’s analysis of AP CS stats includes Michigan. Michigan has 9.8 million residents. It is 14.3% Black. In the last six years, only 27 Black students have taken the AP CS exam, never more than 7 in any year. A decade ago, the University of Michigan waged a successful U.S. Supreme Court fight to save affirmative action. Now Michigan is learning to live without it. Three years after the court allowed race-based admissions, Michigan voters blocked them at state schools through a ballot initiative. The result is fewer black students crisscrossing the Diag, the wide space that cuts through the heart of the university’s Ann Arbor campus. Black enrollment is down about 30 percent at the undergraduate and law schools. via Black Enrollment Falls as Michigan Rejects Affirmative Action – Bloomberg."
"934","2013-10-16","2023-03-24","https://computinged.wordpress.com/2013/10/16/andrew-williams-reflects-on-diversity-at-apple/","Interesting blog from Andrew Williams, reflecting on his interactions with Steve Jobs about diversity at Apple. Two years later, I wonder if Steve would be happy with the progress made at Apple and other major computing companies like Google, Facebook, Amazon, Microsoft, and Twitter. The issue of diversity in engineering and computing goes way beyond just finding students in college. It starts when they are born, nurtured, educated in their families and communities. If children are not valued and exposed to technology, engineering, and science when they are young and encouraged throughout their developing years, they will not be equipped to meet the opportunities of meeting a Steve Jobs or a Marissa Mayer, Yahoo CEO, in the cafe to talk about issues of engineering, computing, and diversity. via Andrew B. Williams, Ph.D. – Out of the Box: Building Robots, Transforming Lives – Marquette University – Blog Large."
"935","2013-10-17","2023-03-24","https://computinged.wordpress.com/2013/10/17/coding-the-curriculum-how-high-schools-are-reprogramming-their-classes/","I’d love to see more detail on what they’re doing. It’s what Seymour Papert wanted for Logo, now happening not far from MIT and the original Logo experiments. I love what they say later in the piece about the goal being computing for creativity and calculation, not to become a professional software developer. It’s a new, albeit eccentric experiment. The school isn’t launching mandatory programming courses into the schedule, exactly, but is instead having its teachers introduce coding (ideally, in the most organic ways possible) into their respective subjects. Calculation-heavy courses such as math and science, as well as humanities such as English, Spanish and history — even theater and music — will all be getting a coded upgrade. True, Beaver may be the first of its kind to experiment with coding in every class, but the idea that more high school students should take STEM-related courses — particularly in programming and coding — isn’t new. via Coding the Curriculum: How High Schools Are Reprogramming Their Classes."
"936","2013-10-21","2023-03-24","https://computinged.wordpress.com/2013/10/21/a-collision-between-changes-in-higher-education-and-changes-in-publishing-the-next-bison-social-computing-and-culture/","Amy Bruckman has been doing a great job of finding the interesting issues in our on-line MS in CS degree program. She’s doing innovative work in making project-based learning work in MOOCs. In this blog post, she considers a problem with doing graduate classes in a MOOC setting. How do you assign readings to a large number of people in a free online course? I’ve been puzzling over this question this week. I voted against the creation of our online master’s of computer science, and I still have serious reservations about it–particularly about the hastiness of the development plan. But since we’re going ahead with the program, I was thinking maybe I’d offer a class. (We’re doing it–I might as well help.) Our model is that classes have a for-credit section for which students pay a low tuition, and a free not-for-credit one (MOOC). The for-credit students will have access to our library. The free students of course can’t. So this week I asked what I thought was a simple question: how do we get readings to the MOOC students? I asked colleagues teaching online classes, administrators, and our library. No one really had an answer. One colleague suggested the students “will just have to find the reading on their own.” (That seems like a lawsuit in the making–encouraging copyright infringement.) Another said “I might not assign any reading, since the MOOC students can’t get access to it.” (Really? Does the future of higher education involve watching videos and not reading?) via A Collision Between Changes in Higher Education and Changes in Publishing | The Next Bison: Social Computing and Culture."
"937","2013-10-22","2023-03-24","https://computinged.wordpress.com/2013/10/22/on-line-course-in-educational-robotics/","This is from Jennie Kay, who was one of the organizers of the SIGCSE Robot Rodeo a few years ago, and is a leader in the use of robotics in CS education in the SIGCSE community. Got a LEGO NXT robot kit but don’t know where to begin? Come learn the basics of LEGO NXT Robot Programming and discover a new way to bring math, science, and computer science content to your students both in and out of the classroom. By the end of this class, you (YES YOU!) will have built your own robot and programmed it to dance around the room. This course, developed by the Rowan University Laboratory for Educational Robotics and supported by a generous grant from Google CS4HS, is specifically designed for K-12 teachers, but is free and open to anyone who is interested in learning about LEGO NXT robotics. The course will be starting at the end of October. Preregister now and we’ll send you an email when we open up the course. To preregister, as well as to see our video “trailer” and get the answers to frequently asked questions please visit: http://cs4hsrobots.appspot.com/"
"938","2013-10-23","2023-03-24","https://computinged.wordpress.com/2013/10/23/unreliable-research-stereotype-threat/","The Economist has an article in a recent issue that’s leading to lots of discussion: Are we making mistakes with science? Can scientists really tell the good stuff from the bad stuff? Are we really making sure that our key results are replicable? One of the topics that they explore is “priming” research. “I SEE a train wreck looming,” warned Daniel Kahneman, an eminent psychologist, in an open letter last year. The premonition concerned research on a phenomenon known as “priming”. Priming studies suggest that decisions can be influenced by apparently irrelevant actions or events that took place just before the cusp of choice. They have been a boom area in psychology over the past decade, and some of their insights have already made it out of the lab and into the toolkits of policy wonks keen on “nudging” the populace.Dr Kahneman and a growing number of his colleagues fear that a lot of this priming research is poorly founded. Over the past few years various researchers have made systematic attempts to replicate some of the more widely cited priming experiments. Many of these replications have failed. In April, for instance, a paper in PLoS ONE, a journal, reported that nine separate experiments had not managed to reproduce the results of a famous study from 1998 purporting to show that thinking about a professor before taking an intelligence test leads to a higher score than imagining a football hooligan. via Unreliable research: Trouble at the lab | The Economist. Stereotype threat is a kind of priming effect. Stereotype threat is where you remind someone of a negative stereotype associated with a group that the person belongs to, and that reminding impacts performance. The argument is that stereotype threat might be leading to the gaps between races and genders. A common situation of stereotype threat for girls and women is when they are tested on their knowledge of math or science. The Educational Testing Services performed an experiment to see if girls performed better or worse on a math exam if they were asked their gender either before or after the exam. Researchers found that the group of girls who were asked their gender before the exam scored several points lower than the boys, while girls who were asked their gender after the exam scored on par with the boys. via The Stereotype Threat and How It Affects Women in Computing » Anita Borg Institute. If there are questions being raised about “priming” research, I got to wondering about whether anyone was checking the reliability of the stereotype threat research. They are, and it’s not promising. Men and women score similarly in most areas of mathematics, but a gap favoring men is consistently found at the high end of performance. One explanation for this gap, stereotype threat, was first proposed by Spencer, Steele, and Quinn 1999 and has received much attention. We discuss merits and shortcomings of this study and review replication attempts. Only 55% of the articles with experimental designs that could have replicated the original results did so. But half of these were confounded by statistical adjustment of preexisting mathematics exam scores. Of the unconfounded experiments, only 30% replicated the original. A meta-analysis of these effects confirmed that only the group of studies with adjusted mathematics scores displayed the stereotype threat effect. We conclude that although stereotype threat may affect some women, the existing state of knowledge does not support the current level of enthusiasm for this as a mechanism underlying the gender gap in mathematics. We argue there are many reasons to close this gap, and that too much weight on the stereotype explanation may hamper research and implementation of effective interventions via Dienekes’ Anthropology Blog: Shortage of female math geniuses not due to “stereotype threat”. As I dug into this further, I found that there has been a lot of misinterpretation of the research on stereotype threat. There is already a gap between genders and between races on many of these tests. If you remind someone of a negative stereotype, that can make the gap larger. But if you don’t remind someone of the stereotype, the gap is just the same. The gap was already there. If you adjust the scores so that they’re the same pre-test (that’s the “statistical adjustment of the preexisting mathematics exam scores” referenced above), you find no difference absent the threat invocation. The measured impact of stereotype threat has worked when the test-takers are consciously aware of the threat. The blog post cited below goes into alot of detail into the efforts to replicate, the problems with interpreting the result, and how the methodology of the experiment matters. Thus, rather than showing that eliminating threat eliminates the large score gap on standardized tests, the research actually shows something very different. Specifically, absent stereotype threat, the African American–White difference is just what one would expect based on the African American–White difference in SAT scores, whereas in the presence of stereotype threat, the difference is larger than would be expected based on the difference in SAT scores. via Race and IQ : Stereotype Threat R.I.P. « Meng Hu’s Blog. I come away with the opinion that stereotype threat is real, but it needs more experimentation to understand just how reliable the effect is and what triggers it. It’s probably a small impact, more like the impact of general test anxiety than an explanation for much of the gaps between genders and races."
"939","2013-10-24","2023-03-24","https://computinged.wordpress.com/2013/10/24/iu-project-to-understand-how-children-learn-about-complex-systems/","I got to see some of this when I visited Indiana last year. It’s really interesting — young children (kindergarten) play at understanding systems by exploring how bees work. The National Science Foundation has awarded over $999,000 to three Indiana University faculty members for a unique effort intended to shed light on how children best learn about complex systems and how new technologies can best serve that learning. The NSF is granting the money to Kylie Peppler and Joshua Danish, both assistant professors in the Learning Sciences program at the IU School of Education, and Armin Moczek, associate professor in the Department of Biology in the IU College of Arts and Sciences. Specifically, the project will develop electronically enhanced puppets, or “e-puppets,” that allow students to simulate biological phenomena such as honeybees collecting nectar or ants scavenging for food. Work on “Design and Implementation (DIP) BioSim: Developing a Wearable Toolkit for Teaching Science Through Embodied Play” begins immediately. via Federal grant funding IU project to understand how children learn about complex systems: IU News Room: Indiana University."
"940","2013-10-25","2023-03-24","https://computinged.wordpress.com/2013/10/25/moocs-as-colonialism-let-them-eat-moocs/","Great blog post that really captures the most important criticism of MOOCs (thanks to Karen Head for forwarding it). We had Armando Fox of Berkeley’s “MOOC” Center visit (video of his GVU Brown Bag talk), and he said explicitly in his talk, “MOOCs are not about democratization of education. They’re really about the rich getting richer.” I blogged on these themes this month for Blogs@CACM: Results from the first-year course MOOCs: Not there yet Worst of all, they may become a convenient excuse for giving up on the reforms needed to provide broad access to affordable higher education. The traditional kind, that is, which for all its problems still affords graduates higher chances of employment and long-term economic advantages. Seen from this perspective, the techno-democratization of education looks like a cover story for its aristocratization. MOOCs aren’t digital keys to great classrooms’ doors. At best, they are infomercials for those classrooms. At worst, they are digital postcards from gated communities. This is why I am a MOOC dissenter. More than a revolution, so far this movement reminds me of a different kind of disruption: colonialism. via Let Them Eat MOOCs – Gianpiero Petriglieri – Harvard Business Review."
"941","2013-10-26","2023-03-24","https://computinged.wordpress.com/2013/10/26/acm-ndc-report-confirms-growth-in-graduates-with-computing-skills/","The first ACM study of non-doctoral computing (NDC) departments has just released its report (to contrast with the Taulbee Survey which is focused on doctoral-granting department). Below is the coverage in the Huffington Post. The study shows that enrollment in undergraduate computer science (CS) programs within these departments increased 11 percent between 2011-12 and 2012-13. Computer science bachelor’s degree production in these departments is expected to increase nearly 14 percent during this period. Other areas of computing, such as software engineering and information technology, also are experiencing growth according to the report. Only in the information systems area is there no real evidence of growth. Master’s degree production in the NDC departments also generally is increasing, adding to the skilled employment base in these key technology areas. via ACM Report Confirms Growth in Graduates With Computing Skills | Stuart Zweben."
"942","2013-09-16","2023-03-24","https://computinged.wordpress.com/2013/09/16/doctoral-consortium-at-the-australasian-computing-education-conference/","null"
"943","2013-05-21","2023-03-24","https://computinged.wordpress.com/2013/05/21/please-apply-to-icer-2013-doctoral-consortium/","I’ve been involved in the SIGCSE Doctoral Consortium when it was associated with the SIGCSE Symposium, and it’s even more valuable now that it’s associated with the ICER Conference. I think I’m allowed to say that I’ve been invited to be a discussant at this year’s DC, and I’m looking forward to being there. Graduate students, please do apply; Advisors of students working in computing education, please encourage your students to apply! The ICER 2013 Doctoral Consortium provides an opportunity for doctoral students to explore and develop their research interests in a workshop under the guidance of a panel of distinguished researchers. We invite students who feel they would benefit from this kind of feedback on their dissertation work to apply for this unique opportunity to share their work with students in a similar situation as well as senior researchers in the field. The strongest candidates will be those who have a clear topic and research approach, and have made some progress, but who are not so far along that they can no longer make changes. However, we welcome submissions from students at any stage of their doctoral studies. In addition to stating how you will gain from participation, both you and your advisor should be clear on what you can contribute to the Doctoral Consortium. Allison Elliott Tew, University of Washington Tacoma Jonas Boustedt, University of Gävle icerdc2013@gmail.com What is the Doctoral Consortium? The Consortium has the following objectives: via Doctoral Consortium | ICER Conference."
"944","2013-10-29","2023-03-24","https://computinged.wordpress.com/2013/10/29/suburban-wiz-wants-to-lead-women-into-tech-world-dailyherald-com/","It’s great to hold this woman up as a role model, but isn’t it a shame that she is so unusual. Only girl in AP CS? One of only five women in CS at Iowa State? Cassidy Williams was the only girl in her AP computer science class at Downers Grove South High School. Now, she is one of only five women majoring in computer science, along with 57 men, in the 2014 graduating class at Iowa State University. It’s a trend the 21-year-old Downers Grove native hopes to help change for future girls studying computer science. “If we don’t have women in computer science, we’re only seeing half the picture,” Cassidy said. “We need to have women in the computing workforce to bring their diverse perspectives to a development team, thus creating the best products.” via Suburban wiz wants to lead women into tech world – DailyHerald.com."
"945","2013-10-30","2023-03-24","https://computinged.wordpress.com/2013/10/30/poverty-impedes-cognitive-function/","An interesting experiment, with a deeply disturbing result. The poor often behave in less capable ways, which can further perpetuate poverty. We hypothesize that poverty directly impedes cognitive function and present two studies that test this hypothesis. First, we experimentally induced thoughts about finances and found that this reduces cognitive performance among poor but not in well-off participants. Second, we examined the cognitive function of farmers over the planting cycle. We found that the same farmer shows diminished cognitive performance before harvest, when poor, as compared with after harvest, when rich. This cannot be explained by differences in time available, nutrition, or work effort. Nor can it be explained with stress: Although farmers do show more stress before harvest, that does not account for diminished cognitive performance. Instead, it appears that poverty itself reduces cognitive capacity. We suggest that this is because poverty-related concerns consume mental resources, leaving less for other tasks. These data provide a previously unexamined perspective and help explain a spectrum of behaviors among the poor. We discuss some implications for poverty policy. via Poverty Impedes Cognitive Function."
"946","2013-10-31","2023-03-24","https://computinged.wordpress.com/2013/10/31/marvel-girls-in-stem-mentor-contest-the-value-and-challenge-of-role-models/","I’m glad to hear that Marvel wants to get involved in drawing more women into STEM. The involvement of Natalie Portman is interesting, but also challenging. There are these interesting studies showing that role models of women in STEM can trigger a kind of stereotype threat: “That can never be me, so I’d better not even try.” They’ll have to be careful in how they frame her involvement in science. Since I’ve been thinking about live coding, I’ve been wondering more about the importance of seeing embodiments of STEM workers that are otherwise invisible. Perhaps Marvel can provide that through this effort. Marvel has announced the Ultimate Mentor Adventure, part mentor program, part contest, that gives American girls in grades 9-12 the resources to find and interview professional women in science, technology, engineering, and math, and then rewards them for doing it. Natalie Portman has always been a consistent voice for greater screentime and opportunities behind the scenes for female characters and real women in the Marvel Cinematic Universe, so it doesn’t surprise me at all to learn that she’s the first face you see on the Ultimate Mentor Adventure’s explanatory video. Portman talks about her character Jane Foster, an astrophysicist, amid finished and behind the scenes clips of Jane in Thor: The Dark World, and, while the bombastic music of the trailers plays, she says, “the truth is, I really do love science. And the role gave me an amazing opportunity to explore science in all its possibilities.” via Marvel Girls in Stem Mentor Contest | The Mary Sue."
"947","2013-07-23","2023-03-24","https://computinged.wordpress.com/2013/07/23/interaction-between-stereotypes-expectations-of-success-and-learning-from-failure/","An interesting study suggesting that role models and how they’re described (in terms of their achievements, or in terms of their struggles) has an interaction with students’ stereotypes about scientists and other professionals in STEM fields. So there are not just cognitive benefits to learning from failure, but there are affective dimensions to focusing on the struggle (including failures) and not just the success. But when the researchers exposed middle-school girls to women who were feminine and successful in STEM fields, the experience actually diminished the girls’ interest in math, depressed their plans to study math, and reduced their expectations of future success. The women’s “combination of femininity and success seemed particularly unattainable to STEM-disidentified girls,” the authors conclude, adding that “gender-neutral STEM role models,” as well as feminine women who were successful in non-STEM fields, did not have this effect. Does this mean that we have to give up our most illustrious role models? There is a way to gain inspiration from truly exceptional individuals: attend to their failures as well as their successes. This was demonstrated in a study by Huang-Yao Hong of National Chengchi University in Taiwan and Xiaodong Lin-Siegler of Columbia University. The researchers gave a group of physics students information about the theories of Galileo Galilei, Issac Newton and Albert Einstein. A second group received readings praising the achievements of these scientists. And a third group was given a text that described the thinkers’ struggles. The students who learned about scientists’ struggles developed less-stereotyped images of scientists, became more interested in science, remembered the material better, and did better at complex open-ended problem-solving tasks related to the lesson—while the students who read the achievement-based text actually developed more stereotypical images of scientists. via why you’re choosing the wrong role models."
"948","2015-02-20","2023-03-24","https://computinged.wordpress.com/2015/02/20/the-individual-teacher-versus-the-educational-system-what-if-finlands-great-teachers-taught-in-u-s-schools/","I highly recommend the article below, for the perspective above all. The issue of “If we fix teachers, do we fix the American educational system” is discussed below and in a recent Freakonomics podcast (see link here). The Freakonomics team comes to the same conclusion as below — no, the home life is a far bigger factor than any particular teacher. But I’m more struck by the focus on the education system more than the individual teacher in the below essay. If your focus is on the education system, then the goal shouldn’t be to identify and get rid of the “bad” teachers. In the end, that’s just one teacher in a whole system. You’re better off improving the system, by making the teachers as good as possible (e.g., with high-quality professional development, and lots of it). Develop your teachers, and the system improves itself. The comments about Teach for America are relevant to the TEALS program, too. If we value teaching as a profession and want highly-skilled, prepared, and experienced teachers, then you don’t take newbies and make them teachers. Make them assistants, or make them para-professionals. Take a legitimate peripheral participation approach and let them help on the edges. But keep the teacher front-and-center, valuing her or him for the experience and development that she or he brings to the classroom — don’t try to replace the teacher with someone who doesn’t have that experience and preparation. When I told Barbara Ericson about these comments, she countered that I’m assuming that (with respect to computer science) schools have these well-prepared and experienced teachers. She says that she’s seen whole districts without a single teacher with preparation as a CS teacher — but they’re teaching CS. She argues that in most schools, a TEALS professional could not be just an assistant or para-professional, because the teacher can’t adequately support the course on his or her own. In recent years the “no excuses”’ argument has been particularly persistent in the education debate. There are those who argue that poverty is only an excuse not to insist that all schools should reach higher standards. Solution: better teachers. Then there are those who claim that schools and teachers alone cannot overcome the negative impact that poverty causes in many children’s learning in school. Solution: Elevate children out of poverty by other public policies. For me the latter is right. In the United States today, 23 percent of children live in poor homes. In Finland, the same way to calculate child poverty would show that figure to be almost five times smaller. The United States ranked in the bottom four in the recent United Nations review on child well-being. Among 29 wealthy countries, the United States landed second from the last in child poverty and held a similarly poor position in “child life satisfaction.” Teachers alone, regardless of how effective they are, will not be able to overcome the challenges that poor children bring with them to schools everyday. via What if Finland’s great teachers taught in U.S. schools? – The Washington Post."
"949","2015-02-19","2023-03-24","https://computinged.wordpress.com/2015/02/19/why-some-teams-are-smarter-than-others-have-more-women-on-the-team/","An argument for diversity is that it leads to better team decisions and designs. But it turns out that having women on the team at all leads to better group performance. It’s an important finding to argue why we need more women in CS, which is still a question I hear regularly, “So what if almost all our undergraduates are women?” Or as one blogger recently put it (see here if you really want to read more of this), “No one in the tech sector right now gives a shit about diversity. There is no reason whatsoever why a lack of diversity in the field would be a problem unless it comes from government quotas and legal threats.” Instead, the smartest teams were distinguished by three characteristics. First, their members contributed more equally to the team’s discussions, rather than letting one or two people dominate the group. Second, their members scored higher on a test called Reading the Mind in the Eyes, which measures how well people can read complex emotional states from images of faces with only the eyes visible. Finally, teams with more women outperformed teams with more men. Indeed, it appeared that it was not “diversity” (having equal numbers of men and women) that mattered for a team’s intelligence, but simply having more women. This last effect, however, was partly explained by the fact that women, on average, were better at “mindreading” than men. via Why Some Teams Are Smarter Than Others – NYTimes.com."
"950","2015-02-02","2023-03-24","https://computinged.wordpress.com/2015/02/02/why-theres-no-such-thing-as-an-f-in-computer-science-the-fear-factor-in-cs-and-other-things-we-learn/","Nice article by my colleague Ayanna Howard and Oracle’s Alison Derbenwick Miller. I’m teaching Media Computation again this semester, and it seems to me that the biggest barrier for my students is simply fear. They don’t type code because they’re afraid of failure. They don’t try to understand the code because they’re afraid they can’t. It’s not just CS, of course. At my last ukulele meetup, I sat next to a woman who brought her ukulele, but wouldn’t take it out of the case. She just sang the songs along with us. When I encouraged her to bring it out, she said, “I’m just a beginner. I’ll learn to play it first, then I’ll play along.” That gets the process wrong — it’s playing along that leads to learning to play it. But I was struck by her body language and voice when she made the statement. She was deeply frightened — of making mistakes and being ridiculed for it, I guess. I get that. I did my first public performance singing and playing the ukulele in December. (Christmas carols are pretty easy, and are completely acceptable at a December open mic night.) I was so frightened. I finished one song (“Silent Night”), then invited my daughters up to sing with me (“Jingle Bells”) to help me get through it (thanks to them for the support!), but still couldn’t get past one verse. My legs and arms were shaking so badly I didn’t think I could go on. Fear is powerful. Ayanna and Alison point out something important and real that we have to help students get past. They will give you myriad reasons, among them that the work just isn’t interesting, that the cool kids don’t do it, and fear – fear it’s too hard, fear they’ll be ridiculed as “nerds,” fear of being exposed as an intellectual fraud, or ironically, as the “too smart kid,” fear of failure. Fear is an awful thing. It’s a four-letter “f” word that holds incredible power – power to keep us from doing what is good, what is right. Power to stop us from taking risks. Power to maintain the status quo, to stop disruption, to inhibit change. Power to stymie innovation, and to limit opportunity. Fear is bad. Fear stands between us and a better world. It stands between us and our better selves. via Why there’s no such thing as an ‘F’ in computer science | The Hechinger Report."
"951","2015-02-04","2023-03-24","https://computinged.wordpress.com/2015/02/04/could-our-cs-enrollment-boom-and-bust-cycle-be-the-result-of-inability-to-manage-the-boom/","I wrote my Blog@CACM post for January on the rising enrollment in computer science and how that is making irrelevant our advances in retaining students (see article here). Retention is simply not the problem in US CS programs today. But thinking about the 1980’s and today (as described in this blog post), I began wondering if our boom-and-bust cycles might be related to our inability to manage the boom. If we could give everyone a seat who wanted one, and we continued to focus on retention and high-quality education, might we actually have a steady-state of a large CS class? Could our inability to manage the load actually be causing the bust side of the cycle?"
"952","2015-02-06","2023-03-24","https://computinged.wordpress.com/2015/02/06/belief-in-the-geek-gene-explains-lack-of-diversity-in-computing-phds/","I’ve argued before that there is no reason to believe in the Geek Gene (see post here), and every reason to believe that good teaching can overcome “innate” differences (see post here). Now, a study in Science suggests that that belief in “innate gift or talent” can explain why some fields have more diversity and others do not. Sparked by sharing anecdotes about their personal experiences in fields with very different gender ratios, a team of authors, led by Andrei Cimpian, a psychologist at the University of Illinois, Urbana-Champaign, and philosopher Sarah-Jane Leslie of Princeton University, surveyed graduate students, postdoctoral fellows, and faculty members at nine major U.S. research institutions. Participants rated the importance of having “an innate gift or talent” or “a special aptitude that just can’t be taught” to succeed in their field versus the value of “motivation and sustained effort.” The study, published online today in Science, looked across 30 disciplines in STEM (science, technology, engineering, and mathematics) fields, the social sciences, and the humanities. The authors found that fields in which inborn ability is prized over hard work produced relatively fewer female Ph.D.s. This trend, based on 2011 data from the National Science Foundation’s Survey of Earned Doctorates, also helps explain why gender ratios don’t follow the simplified STEM/non-STEM divide in some fields, including philosophy and biology, they conclude. via Belief that some fields require ‘brilliance’ may keep women out | Science/AAAS | News."
"953","2015-02-16","2023-03-24","https://computinged.wordpress.com/2015/02/16/people-of-acm-mehran-sahami-co-chair-of-acm-ed-board/","Nice (short) interview with Mehran Sahami — addresses several issues around computing education and about Stanford’s CS department. How did you convince Mark Zuckerberg to come to your class every year for the last four years to lead a Q&A with students? The last assignment I usually give in my introductory programming class is called “FacePamphlet,” as it’s supposed to be a very simple version of Facebook. I thought it would be great if Mike Schroepfer, the CTO at Facebook and a long-time friend and Stanford alum, would talk to my class about Facebook and, more broadly, the ways in which computer science can have an impact in the world. When I first invited him to come a few years ago, he responded by asking if I’d like him to bring Mark Zuckerberg to the class too. I was thrilled at the possibility. As you can imagine, their visit to the class was a huge hit, and they spent the whole hour engaged with the students, answering a broad range of questions. They have been so kind as to continue that tradition, visiting the course to do Q&A with the students for four years in a row—their last visit drew over 700 students. Both Mark and Mike are very committed to promoting computer science education, and I feel fortunate that coming to my class is one of the many ways they have encouraged students to pursue computer science. Interestingly enough, my young kids learned some of the basics of programming from Mark through the videos he did for code.org. I think he was a bit surprised at first when I thanked him for helping teach my kids to code on one of his more recent visits to my class. via January 13, 2015: People of ACM: Mehran Sahami — Association for Computing Machinery."
"954","2015-02-25","2023-03-24","https://computinged.wordpress.com/2015/02/25/more-diversity-and-more-progress-with-cs-teachers-vs-just-on-line-code-org/","Hadi Partovi of Code.org has a blog post (see here) with data from their on-line classes. He’s making the argument that classroom teachers are super important for diversity and for student success. Learning #1: Classrooms progress farther than students studying alone In the graph below, the X axis is student age, the Y axis is their average progress in our courses. The blue line is students in classrooms with teachers. The red line is students studying without a classroom/teacher.   Learning #3: The ethnic backgrounds of students with teachers are impressively diverse The data below doesn’t come from all students, because (for privacy reasons) we do not allow students to tell us their ethnic background. This chart was collected via an opt-in survey of teachers in the U.S. offering our courses, and as such is susceptible to inaccuracy. The picture it paints helps confirm our thesis that by integrating computer science into younger-aged classrooms in public schools, we can increase the diversity of students learning computer science. "
"955","2013-05-16","2023-03-24","https://computinged.wordpress.com/2013/05/16/visiting-west-point-to-give-the-castle-lecture/","Barbara Ericson and I gave the Castle Lecture at West Point in April. The Castle Lecture is a big deal — we spoke before the entire first-year class at West Point. (Last year’s lecture was David Ferrucci, PI of the IBM Watson project.) We received this honor because West Point requires Computer Science of everyone, and this is the first year that they all the first years used our Media Computation Python textbook in that class. So, we got a chance to lecture to 1200 future Army officers and their instructors who all knew Media Computation. It was a stunning experience. The whole day was amazing. If you’ve never been to West Point, I highly recommend that you take the opportunity. The campus is beautiful. The traditions and stories about the place are amazing. There’s such a sense of history, such a buzz about the place. We ate lunch with a group of cadets (in an absolutely enormous mess hall where thousands of students eat lunch in 20 minutes) and were deeply impressed. These are undergraduate students who are making a huge commitment to service to their country. The biggest intellectual treat for me was learning more about their course, IT 105. 700 students every semester take the course — in groups of 20. 16 instructors are involved in teaching the course. We met with the instructors who teach just about nothing but IT 105, but also met some of the other West Point EECS instructors who teach a section or two of IT 105 along with their other courses. (Like Dr. Tanya Tolles Markow, a GT alumna, who teaches IT 105 and database classes.) The person who makes this all work is Susan K. Schwartz (CAPT, USN, Ret). Her attention to detail is phenomenal. Susan is going to give me her errata for the third edition when she finishes this semester, which is more detailed than all the corrections that all instructors have sent me for both of the previous editions combined. Susan creates detailed lecture notes and assignments that drive all the sections for every day across the entire semester. All the students who take the course take the same exams, so Susan provides enough detail so that all the instructors know what to do in each class so that all students get to the finish line. Barb and I each got to sit in one section. This is the opposite of a MOOC. The teacher knows every student. She (I attended one of Susan’s classes) calls on individual students, prods students to engage, and gives them activities in class. It’s small, interactive, and individualized. Yet, there are 700 students taking it at once. It’s an enormous effort to make that large of a class work such that students can all have that small class experience. We’re going to try to get Susan’s materials available to other Media Computation teachers. The lecture was fun and exciting to do. We talked about how media was going to influence them for the rest of their lives. I gave a brief audio lecture, then we talked about computers that can process all that we can hear and see, and have the processing power of ten year’s forward. What does that mean for the rest of their lives? Barb gave a great overview of advances in robotics and cyber-security and even prosthetics. Afterward at the reception, we each had 9-12 cadets asking us follow-up questions for about an hour. We got back to the Thayer Hotel (what a place!) just buzzing from the amazing adventure of the day. "
"956","2017-06-09","2023-03-24","https://computinged.wordpress.com/2017/06/09/take-the-computer-scientists-oath/","My colleague Beth Mynatt (on the right above) gave a commencement address at one of her alma maters, and came up with the great idea of a Computer Scientists Oath. I’m quoting it below in its entirely, but recommend the article for more context on her oath and her speech. I am teaching ethics (“CS4001 Computers and Society”) for the first time this summer in Barcelona. I hadn’t realized that most students in my classes haven’t thought about these issues — I didn’t realize the bubble in which I live (e.g., Human-Centered Computing PhD program, a School of Interactive Computing) where we do talk about such things. I agree with Beth for the need of such an oath, and I’m proud of her efforts to create one. Barbara Ericson sent me an Engineering Oath that is particularly aimed at Facebook and other Silicon Valley engineers — some of these ideas could influence a future Computer Scientists Oath. During her remarks, Mynatt lamented that the field of computer science lacks a professional oath to bind them together at this important moment as they embark on their careers. In the spirit of the medical field’s Hippocratic oath, she challenged the graduates to join her and take the following oath, as a formal recognition of the importance of our field to the wellbeing of society, and our collective responsibility to fulfill our obligations: Today, I join the ranks of computer scientists worldwide. I will remember that I remain a member of society, with special obligations to all my fellow human beings. I will design and build computing systems that enhance the quality of daily life for individuals and for society. I will protect the dignity of users and others affected by computing systems, respecting the diversity of all cultures, and safeguarding against threats to health and safety. I will respect the privacy and rights of all people and recognize the special role I have in judiciously collecting, storing and using their information, and creating systems that aim to shape their behavior. I will work for fair wages; honorably guarding my reputation and my colleagues in our work practices, while respecting the intellectual contributions of others.I will improve the public understanding of computing and its consequences. May I always act so, as to preserve the finest traditions of my field, and may I long experience the joy of inventing the future through my endeavors. Source: Department of Computer Science at North Carolina State University"
"957","2016-09-28","2023-03-24","https://computinged.wordpress.com/2016/09/28/an-interview-with-an-educational-realist-and-grumpy-old-man-paul-kirschner/","I am a fan of Paul Kirschner‘s work. This interview is great with useful insights about education — deep and pragmatic thinking. I want to fundamentally understand how people can learn in effective, efficient, and enjoyable ways, and how you can teach and design learning materials to achieve this objective. If a learner doesn’t enjoy the learning experience, even if it’s effective and/or efficient, they won’t do it. The same is true for teaching: that is it must also be effective, efficient, and enjoyable for the teacher because if a teacher doesn’t enjoy the teaching process, even if it’s effective and/or efficient, they won’t do it. Source: GUEST POST: An Interview With an Educational Realist and Grumpy Old Man — The Learning Scientists"
"958","2016-09-26","2023-03-24","https://computinged.wordpress.com/2016/09/26/assessing-learning-in-introductory-computer-science-dagstuhl-seminar-report-now-available/","I have written about this Dagstuhl Seminar (see earlier post). The formal report is now available. This seminar discussed educational outcomes for first-year (university-level) computer science. We explored which outcomes were widely shared across both countries and individual universities, best practices for assessing outcomes, and research projects that would significantly advance assessment of learning in computer science. We considered both technical and professional outcomes (some narrow and some broad) as well as how to create assessments that focused on individual learners. Several concrete research projects took shape during the seminar and are being pursued by some participants. Source: DROPS – Assessing Learning In Introductory Computer Science (Dagstuhl Seminar 16072)"
"959","2016-02-19","2023-03-24","https://computinged.wordpress.com/2016/02/19/dagstuhl-seminar-poster-critiquing-cs-assessment-from-a-cs-for-all-lens/","Today’s the last day of the Dagstuhl Seminar I’ve been attending on Assessing Learning In Introductory Computer Science (see seminar description here). We all presented posters about the theme, and I presented a poster where I critiqued CS assessment from a CS for All Lens (see Slideshare link).  Not everyone who learns CS is going to want to be a software engineer. Then why teach them CS? And how would you teach them, if the goal is not for students to develop software to professional standards? That’s what my new book is about. If we have different learning outcomes, assessment has to change, too. I argue that we have to consider what the learner wants to do and wants to be (i.e., their desired Community of Practice) when assessing learning. Different CoP, different outcomes, different assessments. I learned a lot from this seminar. I was in a great breakout group that came up with shared definitions of a notional machine and student misconceptions, and defined a research agenda for understanding student misconceptions. In a breakout group on conveying social and professional practice (bottom line for me: I’m not sure that we can or should in school), Amy Ko taught me a whole new way of thinking about MOOCs, about the positive role that they can play in society. The whole week has me thinking more about adult learning and how we support lifelong development. I have plans to write blog posts about these themes in future weeks. But first, a long trip home."
"960","2017-06-19","2023-03-24","https://computinged.wordpress.com/2017/06/19/we-need-to-separate-computing-for-all-from-software-development-coding-is-not-fun-its-technically-and-ethically-complex/","The problem with the article linked below is that Code.org and the author mean two different things by the word “programming.” Programming can be fun, insightful, sloppy, small, and still useful without demanding “superhuman focus” and “manic attention to detail.” This is an issue I’ve talked about with respect to the thick line between programmer and user where most people will be in the future. I’m teaching an ethics course this summer — building software for others is technically and ethically complex, as the author states. But building software as an end-user, as a hobbyist, as a scientist or engineer exploring an idea? We need a different word. Programming computers is a piece of cake. Or so the world’s digital-skills gurus would have us believe. From the non-profit Code.org’s promise that “Anybody can learn!” to Apple chief executive Tim Cook’s comment that writing code is “fun and interactive,” the art and science of making software is now as accessible as the alphabet. Unfortunately, this rosy portrait bears no relation to reality. For starters, the profile of a programmer’s mind is pretty uncommon. As well as being highly analytical and creative, software developers need almost superhuman focus to manage the complexity of their tasks. Manic attention to detail is a must; slovenliness is verboten. Attaining this level of concentration requires a state of mind called being “in the flow,” a quasi-symbiotic relationship between human and machine that improves performance and motivation. Source: Coding is not “fun,” it’s technically and ethically complex — Quartz"
"961","2017-06-23","2023-03-24","https://computinged.wordpress.com/2017/06/23/call-for-papers-for-2nd-blocks-and-beyond-workshop/","Blocks and Beyond 2: 2nd Workshop on Lessons and Directions for First Programming Environments http://cs.wellesley.edu/blocks–and–beyond October 9-10, 2017, Raleigh, NC, USA A satellite workshop of the 2017 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC) https://sites.google.com/site/vlhcc2017/ Call for Participation Blocks programming environments represent program syntax trees as compositions of visual blocks. They are an increasingly popular way to introduce programming and computational thinking; tens of millions of people have used tools like Scratch, Blockly, App Inventor, Snap!, Pencil Code, Alice/Looking Glass, AgentSheets/AgentCubes, and Code.org’s curricula. But blocks programming is not just for beginners; environments like GP and domain-specific blocks languages are targeted at hobbyists, scientists. and other casual programmers. Capitalizing on the energy and enthusiasm from the 1st Blocks and Beyond Workshop in Atlanta in 2015, this workshop aims to continue studying the usability, effectiveness, and generalizability of affordances of these environments and their associated pedagogies. The workshop will bring together educators and researchers with experience in blocks languages, as well as members of the broader VL/HCC community who wish to examine this area more deeply. We seek participants with diverse expertise, including, but not limited to: design of programming environments, instruction with these environments, the learning sciences, data analytics, usability, and more. The workshop will be a generative discussion that sets the stage for future work and collaboration. It will include participant presentations and demonstrations that frame the discussion, followed by reflection on the state of the field and smaller working-group discussion and brainstorming sessions. · Who uses blocks programming environments and why? · Which features of blocks environments help or hinder users? How do we know? Which of these features are worth incorporating into more traditional IDEs? What helpful features are missing? · How can blocks environments and associated curricular materials be made more accessible to everyone, especially those with disabilities? · Can blocks programming appeal to a wider range of interests (e.g., by allowing connections to different types of devices, web services, data sources, etc.)? · What are the best ways to introduce programming to novices and to support their progression towards mastery? Do these approaches differ for for learners of computing basics and for makers? · What are the conceptual and practical hurdles encountered by novice users of blocks languages when they face the transition to text languages and traditional programming communities? What can be done to reduce these hurdles? · How can we best harness online communities to support growth through teaching, motivating, andproviding inspiration and feedback? · What roles should collaboration play in blocks programming? How can environments support that collaboration? · In these environments, what data can be collected, and how can that data be analyzed to determine answers to questions like those above? How can we use data to answer larger scale questions about early experiences with programming? · What are the lessons learned (both positive and negative) from creating first programming environments that can be shared with future environment designers? We invite two kinds of submissions: 1. A 1 to 4 page position statement describing an idea or research question related to the design, teaching, or study of blocks programming environments. 2. A paper (up to 8 pages) describing previously unpublished results involving the design, study, or pedagogy of blocks programming environments. All submissions must be made as PDF files to the Easy Chair Blocks and Beyond workshop submission site. As with the Proceedings of the 1st Blocks and Beyond Workshop, we plan to publish the proceedings of the 2nd Workshop with the IEEE. Please use an IEEE Conference template to format your submission. · 19 Jul 2017: Submissions due (due by end of day, anytime on Earth) · 16 Aug 2017: Author notification · 30 Aug 2017: Camera ready copies due · 9-10 Oct 2017: Workshop in Raleigh"
"962","2019-05-03","2023-03-24","https://computinged.wordpress.com/2019/05/03/whats-not-computational-thinking-maybe-x-x-1/","In the previous blog post, I suggested that Computational Thinking is the friction necessary to make your problem solvable by a computer. It should be minimized unless it’s generative. It’s a very different framing for computational thinking. Rather than “what’s everything that we use in computing that might be useful for kids,” it’s closer to, “the day is full and students are already in so many subjects — what do they have to know about computing in order to use it to further their learning and their lives?” I have been talking to my students about what’s on the list of things that we typically teach but don’t fit into this model of computational thinking. Here’s what I’ve thought of so-far: Here are criteria for what should NOT be part of teaching computational thinking: If Computational Thinking is something we should teach to everyone, these are items that are not worth teaching to everyone. Computational thinking includes programming, for me. It is generative. It allows students to explore causal models that are tested with automation. It’s the most powerful idea in computational thinking. Then there are the ideas that are on most lists of computational thinking, like decomposition and abstraction. I absolutely believe that all programmers have those skills. They are absolutely generative. I believe that programming is a terrific place to try out and play with those ideas. In the Rich et al. paper about learning trajectories that I reference so often, they talk about students learning “Different sets of instructions can produce the same outcome.” That’s a critical idea if you want students to learn that different decompositions can still result in the same outcome. But does abstraction and decomposition belong in a Computational Thinking class? They feel more like mathematics, science, and engineering to me. Yes, use computing there, but don’t break them out into a separate class. A mathematics teacher may be better prepared to teach decomposition and abstraction than are computer science teachers. It’s better to teach these ideas in a context with a teacher who has the PCK to teach them. What’s more, it’s clear that you don’t need abstraction and decomposition to program computers as a way to learn. Task-specific programming languages are usable for learning something else without developing new abilities to abstract or decompose. Our social studies teachers did in our participatory design study in March — they learned things about life expectancy in different parts of the world, using programming that they did themselves, in 10-20 minutes. There’s another list we could make that is ideas in computer science that everyone should know because it helps them to understand the computation in their lives. Yes, there’s a lot in the school day — but this is worth it for the same reason that Physics or Biology is worth it. This is a different matter than what helps them solve problems (which is the guts of the computational thinking definitions we have seen earlier). On my list, I’d include: Other suggestions?"
"963","2019-04-12","2023-03-24","https://computinged.wordpress.com/2019/04/12/european-best-practices-in-education-award-focus-on-inclusive-education/","I know several members of the awards committee this year, and was asked to share this broadly. Best Practices in Education Award 2019 Edition ‘Inclusive Education’ Presented by Informatics Europe Sponsored by Microsoft Call for Submissions Now Open *********************************************************************** Informatics Europe proudly announces its 2019 Best Practices in Education Award devoted to initiatives targeting Inclusive Education of different student groups such as the elderly, immigrants or people with functional diversity. The Informatics Europe Best Practices in Education Award recognizes outstanding European educational initiatives that improve the quality of Informatics teaching and the attractiveness of the discipline, and can be applied and extended beyond their institutions of origin. The Award rewards a successful teaching effort in Europe that: Examples of impact include course results, e-accessibility frameworks and techniques, such as guidelines or frameworks based on robotics; traditional and online courses, learners’ projects, textbooks, professional development, and influence on the curriculum of other institutions/countries. The initiatives are not limited to programming but include design and use of technology. The 2019 Award is devoted to outstanding European educational innovations that address Inclusion in Informatics teaching in the classroom or beyond, at school or university level, or outside of institutions. Innovation maybe technology-based (for example using instructional technologies, MOOCs, learning analytics, etc.) or pedagogical. The Award honours original contributions that focus on innovative Informatics teaching practice toward Inclusion. Experiences and reports showing how to use software or hardware tools in order to improve inclusion and learning in other disciplines than informatics will not be considered. The Award is sponsored by Microsoft and carries a prize of EUR 5,000. Submissions: The Award can be given to an individual or to a group. To be eligible, participants must be located in one of the member or candidate member countries of the Council of Europe (www.coe.int), or Israel. Members of the Informatics Europe Education Working Group and of the Award Committee are not eligible. The Award Committee will review and evaluate each proposal. It reserves the right to split the prize between at most two different proposals (individuals or teams). Proposals should be submitted only at: https://easychair.org/conferences/?conf=iebpea2019 The proposal should include: Deadlines: The Award will be presented at the 15th European Computer Science Summit, in Rome, October 28-30, 2019, where a representative of the winning institution will be invited to give a talk on their achievements. Award Committee: Further inquiries: education-award@informatics-europe.org"
"964","2019-03-29","2023-03-24","https://computinged.wordpress.com/2019/03/29/using-moocs-for-computer-science-teacher-professional-development/","When our ebook work was funded by IUSE, our budget was cut from what we proposed. Something had to be dropped from our plan of work. What we dropped was a comparison between ebooks and MOOCs. I had predicted that we could get better learning and higher completion rates from our ebooks than from our MOOCs. That’s the part that got dropped — we never did that comparison. I’m glad now. It’s kind of a ridiculous comparison because it’s about the media, not particular instances. I’m absolutely positive that we could find a terrible ebook that led to much worse results than the absolutely best possible MOOC, even if my hypothesis is right about the average ebook and the average MOOC. The medium itself has strengths and weaknesses, but I don’t know how to experimentally compare two media. I’m particularly glad since I wouldn’t want to go up against Carol Fletcher and her creative team who are finding ways to use MOOCs successfully for CS teacher PD. You can find their recent presentation “Comparing the Efficacy of Face to Face, MOOC, and Hybrid Computer Science Teacher Professional Development” on SlideShare: Carol sent me a copy of the paper from the 2016″Learning with MOOCs” conference*. I’m quoting from the abstract below: This research examines the effectiveness of three primary strategies for increasing the number of teachers who are CS certified in Texas to determine which strategies are most likely to assist non-CS teachers in becoming CS certified. The three strategies compared are face-to-face training, a MOOC, and a hybrid of both F2F and MOOC participation. From October 2015, to August of 2016, 727 in-service teachers who expressed an interest in becoming CS certified participated in one of these pathways. Researchers included variables such as educational background, teaching certifications, background in and motivation to learn computer science, and their connection to computer science through their employment or the community at large as covariates in the regression analysis. Findings indicate that the online only group was no less effective than the face-to-face only group in achieving certification success. Teachers that completed both the online and face-to-face experiences were significantly more likely to achieve certification. In addition, teachers with prior certification in mathematics, a STEM degree, or a graduate degree had greater odds of obtaining certification but prior certification in science or technology did not. Given the long-term lower costs and capacity to reach large numbers that online courses can deliver, these results indicate that investment in online teacher training directed at increasing the number of CS certified teachers may prove an effective mechanism for scaling up teacher certification in this high need area, particularly if paired with some opportunities for direct face-to-face support as well. That they got comparable results from MOOC-based on-line and face-to-face is an achievement. It matches my expectations that a blended model with both would be more successful than just on-line. Carol and team are offering a new on-line course for the Praxis test that several states use for CS teacher certification. You can find details about this course at https://utakeit.stemcenter.utexas.edu/foundations-cs-praxis-beta/. * Fletcher, C., Monroe, W., Warner, J., Anthony, K. (2016, October). Comparing the Efficacy of Face-to-Face, MOOC, and Hybrid Computer Science Teacher Professional Development. Paper presented at the Learning with MOOCs Conference, Philadelphia, PA."
"965","2019-02-15","2023-03-24","https://computinged.wordpress.com/2019/02/15/how-to-organize-a-state-summit-from-ecep-and-ncwit/","Soon after we started the Expanding Computing Education Pathways (ECEP) Alliance, we were asked: What should a state do first? If they want to improve CS Education, what are the steps? We developed a four step model — you can see a three minute video on ECEP that includes the four step model here. It was evidence-based in the sense that, yup, we really saw states doing this. We had no causal evidence. I’m not sure that that’s possible in any kind of education public policy research. One of those steps is “Organize.” Gather your allies. Have meetings where you CS Ed people rub elbows with the state public policymakers, like legislators and staffers in the Department of Education (or Department of Public Instruction, or whatever it’s called in your state). A lot of states have had summits since then (see a list of some here). Now, working with the fabulous NCWIT team of communicators, graphic designers, and social scientists, ECEP has released a state summit toolkit. We can’t yet tell you how to organize a state. We can tell you how to organize a state summit. From finding change agents to building a steering committee of diverse stakeholders, convenings play an important role in broadening participation in computing at the state level. ECEP and NCWIT have developed the State Summit Toolkit to assist leadership teams as they organize meetings, events, and summits focused on advancing K-16 computer science education. From https://ecepalliance.org/summit-toolkit"
"966","2019-02-14","2023-03-24","https://computinged.wordpress.com/2019/02/14/need-for-reviewers-for-us-department-of-education-cs-education-grants-guest-post-from-pat-yongpradit/","Pat Yongpradit of Code.org asked me to share this with everyone. The US Department of Education has announced the EIR grant competition for FY 2019. This year EIR incorporates an exclusive priority for computer science with a focus on increasing diversity and equity in access, as compared to last year where the highlight was that CS was merged with STEM as a combined priority. See more detail in our blog. There are many moving parts to the federal grant review and award process, including a merit-based review process. In order to adequately score grants featuring computer science, the US Department of Education must have enough reviewers with K-12 computer science education experience. There is more information on the merit-review process and the Department’s mechanism for selecting reviewers in this blog. Code.org has been asked to put interested folks in touch with leaders of the EIR grant program. If interested, please send your CV to EIRpeerreview@ed.gov. Having CS knowledgeable reviewers participating in the federal grant review process is crucial to maximizing the opportunity these grants present the field and our collective goal of expanding access to K-12 computer science. Best, Pat"
"967","2019-02-11","2023-03-24","https://computinged.wordpress.com/2019/02/11/hadi-partovis-keynote-at-crossroads-2018-cs-ed-research-needs-to-up-its-game/","I was scheduled to be on a panel at last year’s InfoSys Crossroads 2018 conference, but my father passed the week before, so I couldn’t make it. Several people told me that I had to see the video of Hadi Partovi’s talk, because “he talks about CS Education Research.” The facial expression suggested I should feel warned. I enjoyed the talk. Hadi made some critical and completely fair statements about CS Ed Research today. I recommend watching.   The really research-y stuff is around 30 minutes into the talk. He talks about CS competing with other fields (a point that Joan Ferrini-Mundy also made to ECEP), and that CS has to make the argument for itself. I most appreciated the point (around 31:50) that no CS Ed research meets the “What Works Clearinghouse” standards for “works without reservations.” He’s right, and it’s a fair criticism. Maybe it’s too early, but at some point, we have to be able to compete at the evaluation standards applied to all other subjects. Code.org is stepping up their game, with the first evaluation demonstrating that their CSP curriculum significantly increases the rate at which students take and pass the AP CSP exam (see paper here). I learned a lot from his talk, especially his points about how to scale. I love the advice to “Execute first, raise funding after.” Since I’m trying to re-start my research program at Michigan, I am thinking about that advice a lot. I hear Hadi saying that I need to be executing on something interesting to fund first, before trying to sell the something interesting I want to do. Writing proposals about things I’m not executing on will probably not be convincing, and delays me making progress on the things I’m passionate about. Of course, I vehemently agree with his argument that the future of CS Ed is to integrate CS into other subjects. "
"968","2013-04-09","2023-03-24","https://computinged.wordpress.com/2013/04/09/a-goal-too-far-computing-education-for-all/","My thinking on computing education has been significantly influenced by a podcast about hand-washing and financial illiteracy. I suspect that education is an ineffective strategy for achieving the goal of Computing Literacy for Everyone. I have a greater appreciation for work like Alan Kay’s on STEPS, Amy Ko’s work on tools for end-user programming, and the work on Racket. On Hand-Washing and Financial Illiteracy I have been listening to Freakonomics podcasts on long drives. Last month, I listened to “What do hand-washing and financial illiteracy have in common?” I listened to it again over the next few days, and started digging into the literature they cited. At hospitals, hand-washing is far less common than our knowledge of germ theory says it ought to be. What’s most surprising is that doctors, the ones with the most education in the hospital, are the least likely to wash their hands often enough. The podcast describes how one hospital was able to improve their hand-washing rates through other behavioral methods, like shaming those who didn’t wash their hands and providing evidence that their hands were likely to be filled with bacteria. More education doesn’t necessarily lead to behavioral change. Much more important was the segment on financial illiteracy. First, they present the work of Annamuria Lusardia who has directly measured the amazing financial illiteracy in our country. There is evidence that much of the Great Recession was caused by poor financial decisions by individuals. Less than a third of the over-50-year-old Americans that Lusardia studied could correctly answer the question, “If you put $100 in a savings account with 2% annual interest, at the end of five years you will have (a) less than $102, (b) exactly $102, or (c) more than $102?” More mathematics background did lead to more success on her questions, but she calls for a much more concerted effort in financial education. Her arguments are supported by some pretty influential officials, like Fed Reserve Chair Ben Bernanke and former Secretary of the Treasury Paul O’Neill. It makes sense: If people lack knowledge, we should teach them. Lauren Willis strongly disagrees, and she’s got the data to back up her argument. She has a 2008 paper with the shocking title, Against Financial Literacy Education that I highly recommend. She presents evidence that financial literacy education has not worked — not that it couldn’t work, but it isn’t working. She cited several studies that showed negative effects of financial education. For example, high school students who participated in the Jump$start program become much more confident about their ability to make financial decisions, and yet made worse decisions than those students who did not participate in the program. The problem is that financial decisions are just too complicated, and education (especially universal education) is expensive to do well (though Willis doesn’t offer an estimated cost). Educational curricula (even if tested successful) is not always implemented well. The gap between education in teen years and making decisions in your 40’s and 50’s is huge. Instead of education, we should try to prevent damage from ignorance. Willis suggests that we should create a cadre professional of financial advisors and make them available to everyone (for some “pro bono”), and that we should increase regulation of financial markets so that there are fewer riskier investments for the general public. It costs the entire society enormously when large numbers of people make poor financial decisions, and it’s even more expensive to provide enough education to prevent the cost of all that ignorance. This was a radical idea for me. Education is not free, and sometimes it’s cheaper to prevent the damage of ignorance than correcting the ignorance. Implications for Computing Literacy Education I share the vision of Andy DiSessa and others of computing as a kind of literacy, and a goal of “Computing for All” where everyone has the knowledge and facility to build programs (for modeling, simulations, data analyses, etc.) for their needs. Let’s call that a goal of “Universal Computing Literacy,” and we can consider the costs of using education to reach that goal, e.g., “Universal Computing Education to achieve Universal Computing Literacy.” The challenge of computing literacy may be even greater than the challenge of financial literacy. People know even less about computing than they do about finance. We don’t know the costs of that ignorance, but we do know that it has been difficult and expensive to provide enough education to correct that ignorance. Computing may be even more complicated than finance. Willis talks about the myriad terms that people need to know to make good financial decisions (like “adjustable rate mortgages”), but they are at least compounds of English words! I attended a student talk this week, where terms like “D3” and “GreaseMonkey” were bandied about like they were common knowledge. We invent so much language all the time. What could we possibly teach today in high school that will be useful in even five or ten years, when those students are in their careers, to be able to build something that they could use? “We’ll teach conceptual knowledge so that they can pick up any tools or languages they need.” We have no idea how to achieve this goal in computer science. It takes an enormous effort to develop transferable knowledge, and progress in computing changes the target task all the time. I have a PhD in Computer Science, and it takes me way too much effort to pick up JavaScript libraries that I might want to use — far more effort than a non-technical person will be willing to put in. The problem is that education is often inefficient and ineffective. Jeremy Roschelle pointed out that education improvements rarely impact economic outputs. Greg Wilson shared a great paper with me in response to some tweets I sent about these ideas. Americans have always turned to education to solve a wide variety of ills, but surprisingly, without much evidence of efficacy. We can teach kids all about healthy eating, but we still have a lot of obesity. Smokers often know lots of details about how bad smoking is for them. Education does not guarantee a change of behavior. This doesn’t mean that education could not be made more effective and more efficient. But it might be even more expensive to fix education than to deal with ignorance. Universal education is always going to be expensive, and some things are worth it. Text illiteracy and innumeracy are very expensive for our society. We need to address those, and we’re not doing a great job at that yet. Computing education to achieve real literacy is just not as important. I am no longer convinced that providing computing education to everyone is going to be effective to reach the goal of making everyone computing literate, and I am quite convinced that it will be very expensive. Requiring computing education for STEM professionals at undergraduate level may still be cost-effective, because those are the professionals most likely to see the value of computing in their careers, which reduces the costs and makes the education more likely to be effective. Barb sees a benefit in Universal Computing Education, but not to achieve Universal Computing Literacy. We need to make computing education available everywhere for broadening participation in computing. To get computing into every school, Barb argues that we have to make it required for everyone. Without the requirement, schools won’t go to the effort of including it. Without a requirement, female and URM students who might not see themselves in computing, would never even give it a chance. In response to my argument about cost, she argues that the computing education for everyone doesn’t have to be effective. We don’t have to achieve lifelong literacy for everyone. Merely, it has to give everyone exposure, to give everyone the opportunity to discover a love for computing. Those that find that love will educate themselves and/or will pursue more educational opportunities later. I heard Mike Eisenberg give a talk once many years ago, where he said something that still sticks with me: that the point of school is to give everyone the opportunity to find out what they’re passionate about. For that reason, we have to give everyone the chance to discover computing, and requiring it may be the only way to reach that goal. It’s always possible that we’ll figure out to educate more effectively at lower cost. For example, integrating computing literacy education into mathematics and science classes may be cheaper — students will be using it in context, teachers in STEM are better prepared to learn and teach computing, and we may improve mathematics and science teaching along the way. My argument about being too expensive is based on what we know now how to do. Economic arguments are often changed by improved science (see Malthus). As Willis suggests for financial literacy, we in computing literacy are probably going to be more successful for less cost by focusing on the demand side of the equation. We need to make computing easier, and make tools and languages that are more accessible, as Alan Kay, Amy Ko, and the Racket folks are doing. We have to figure out how to change computing so that it’s possible to learn and use it over an entire career, without a PhD in Computer Science. We have to figure out how to get these tools into use so that students see use of such tools as authentic and not a “toy.” “Computing for All” is an important goal. “Access to Computing Education for All” is critical. “Universal Computing Education to achieve Universal Computing Literacy” is likely to be ineffective and will be very expensive. On the other hand, requiring computing education may be the only way to broaden participation in computing."
"969","2013-04-10","2023-03-24","https://computinged.wordpress.com/2013/04/10/facebook-google-and-other-hypocrites-need-to-lean-in-to-some-honesty-about-lack-of-diversity-in-hiring-siliconbeat/","This theme has appeared here before. Why do Tech companies get to keep secret their lack of diversity? OK, I’ll stipulate that tech companies get to fight tooth and nail to keep secret how awful they are at hiring women, blacks and Latinos. And they do, according to CNN and the Mercury News. But you know what? If they get to do that – as Facebook, LinkedIn, Netflix, Twitter, Yelp, Zynga, Amazon, Groupon, Hulu, LivingSocial, Apple, Google, Hewlett Packard, IBM and Microsoft have done – then we get to criticize them mercilessly. via Facebook, Google and other hypocrites need to Lean In to some honesty about lack of diversity in hiring | SiliconBeat."
"970","2013-04-10","2023-03-24","https://computinged.wordpress.com/2013/04/10/congratulations-to-eric-roberts-on-the-2012-acm-karl-v-karlstrom-outstanding-educator-award/","Eric Roberts has been a truly outstanding educator for decades, starting as the first computer scientist at Wellesley College in 1980. He has personally taught thousands of computer scientists, and reached many more through his textbooks and curriculum development. His textbooks are exemplary; the first, Thinking Recursively, was named in a 1998 CACM survey article as one of the core texts that every computer science educator should know. He built an organization of professional lecturers at Stanford that has become a model for effective teaching of computer science at universities across the country. Eric has shown exceptional leadership in computing education, made all the more effective because of the obvious priority he placed on being an outstanding educator. He devotes enormous time and energy to drawing attention to and addressing problems in our community, such as underrepresentation of women in computing and the need to devote more resources to computing education during times of enrollment surge. His principles and values have made him a respected voice in the computing education community. Erics leadership is international in scope. He co-chaired the ACM Education Board for several years, and was one of the founding co-chairs of the ACM Education Council. From 1999 to 2005, he worked to develop a computing curriculum for public high schools in Bermuda. This program was the first national computing curriculum to be certified by an international standard board. Erics work on Computing Curriculum 2001 exemplifies his leadership. He drew together diverse constituencies and stakeholders in a multi-year process. He was the principal author of the final report. The report is a significant intellectual achievement that has served educators around the world as they consider what every computing student needs to learn.  "
"971","2013-04-01","2023-03-24","https://computinged.wordpress.com/2013/04/01/beware-of-the-high-cost-of-free-online-courses-nytimes-com/","It nice to see someone with a background in management making this argument, that the costs of MOOCs may be greater than the benefits. Give-away pricing in education, Mr. Cusumano warns, may well be a comparable misstep. The damage would occur, he writes in the article, “if increasing numbers of universities and colleges joined the free online education movement and set a new threshold price for the industry — zero — which becomes commonly accepted and difficult to undo.” In our conversation, I offered the obvious counterargument. Why should education necessarily be immune from this digital, Darwinian wave, when other industries are not? Isn’t this just further evidence of the march of disruptive progress that ultimately benefits society? Mr. Cusumano has heard this reasoning before, and he is unconvinced. In the article, he explains, “I am mostly concerned about second- and third-tier universities and colleges, and community colleges, many of which play critical roles for education and economic development in their local regions and communities.” “In education,” Mr. Cusumano adds, “‘free’ in the long run may actually reduce variety and opportunities for learning as well as lessen our stocks of knowledge.” via Beware of the High Cost of ‘Free’ Online Courses – NYTimes.com."
"972","2013-04-02","2023-03-24","https://computinged.wordpress.com/2013/04/02/research-subcommittee-reviews-industrial-and-non-profit-philanthropic-stem-education-initiatives/","This is actually pretty scary. The goal of these reviews is to “ensure efficiency and eliminate duplication,” especially between federal, private, and philanthropic programs. Does that mean that FIRST Robotics makes all other research and outreach for robotics in CS education “duplication”? Subcommittee Chairman Larry Bucshon (R-IN) highlighted that the COMPETES Reauthorization Act of 2010 requires the National Science and Technology Council Committee on STEM to develop and implement a 5-year strategic plan. This plan would specify and prioritize objectives and define the role of each of the government agencies which fund STEM programs and activities. In this process of strategic planning, Bucshon stated that he wanted to recognize the importance of private sector and non-profit collaborations in STEM education. He also noted that the Government Accountability Office (GAO) suggested that the Office of Science and Technology Policy (OSTP) should work with agencies to produce strategies that ensure efficiency and eliminate duplication and ineffective programs. The GAO also concluded in a 2012 report that there is a need for strategic planning in order to better manage the overlap of federal STEM education programs. via Research Subcommittee Reviews Industrial and Non-Profit Philanthropic STEM Education Initiatives."
"973","2013-04-03","2023-03-24","https://computinged.wordpress.com/2013/04/03/our-problem-in-cs-ed-is-too-much-utility/","One of my insights from SIGCSE 2013 was about the problem of “eating our seed corn,” and how this stems from too much utility. For most STEM fields (like mathematics, physics, or biology), a little bit of it isn’t enough to do much. One course in Biology does not lead to a lab technician job, and much less a job doing surgery. A student needs a significant amount of STEM learning in most disciplines before being useful to an employer. Not true for computer science, and this has been a problem since the 1960’s. In The Computing Boys Take Over, Nathan Ensmenger describes how companies were desperate to identify and hire programmers to deal with the severe labor shortage as computers moved into business settings. Knowing anything about computing made you useful. Not necessarily good, but useful. And that’s still our problem today: In a sense, these are good problems to have. I would not want computer science to be less useful. But the high utility of computer science knowledge does pose problems that educators in other STEM disciplines may not appreciate or understand."
"974","2013-04-04","2023-03-24","https://computinged.wordpress.com/2013/04/04/trends-in-cs-enrollments-at-small-liberal-arts-colleges/","Great to see some data on what’s going on at smaller schools, not just in the doctoral-granting institutions. On average, as much of an upswing as what’s reported in the Taulbee, but not all schools reporting increases. Interesting analyses of what’s working and what’s not. What contributes to the program’s success? Faculty involvement, quality teaching, and enthusiasm for undergraduate research. Flexibility with prerequisites and independent studies. Outreach. Interdisciplinary projects. Growing knowledge/visibility about CS and its broad usefulness, including awareness among faculty colleagues. The job market. Multiple introductory courses/sections. Inclusion in general distribution requirements. Becoming a separate department. Stable set of faculty. Students choosing first-semester courses themselves. Decline? External forces/national trends. Not enough faculty to offer enough spaces in lower level courses. Faculty turnover. Student rumor mill (regarding a potential cut). via Trends in CS Enrollments at Small, Liberal Arts Colleges (BoF Survey Results) – Google Drive."
"975","2013-04-04","2023-03-24","https://computinged.wordpress.com/2013/04/04/nytimes-rejects-the-moocopalypse/","NYTimes gets it. The quote below reflects my concerns about replacing courses with MOOCs. I particularly enjoyed the reference to the proposed “New University of California” (whose online-tests-only degrees sound like what the University of Wisconsin just agreed to) as “particularly ludicrous.” The same California State Legislature that cut the higher education budget to ribbons, while spending ever larger sums on prisons, now proposes to magically set things right by requiring public colleges and universities to offer more online courses. The problem is that online courses as generally configured are not broadly useful. They work well for highly skilled, highly motivated students but are potentially disastrous for large numbers of struggling students who lack basic competencies and require remedial education. These courses would be a questionable fit for first-time freshmen in the 23-campus California State University system, more than 60 percent of whom need remedial instruction in math, English or both. via Resurrecting California’s Public Universities – NYTimes.com."
"976","2013-04-05","2023-03-24","https://computinged.wordpress.com/2013/04/05/everybody-should-be-afraid-of-moocs/","“MOOC-phobia” — I’m enjoying all the MOOCterms that are getting invented to explain these new phenomena. “There’s a distinction that people often don’t make,” said Professor Thrun, “which is whether these classes reach existing students and take away business, or whether they reach new students and add to the business?” While that question is being answered, MOOC-phobia continues to spread. Last year, the University Professional and Continuing Education Association entitled its annual conference “Resilience.” This year’s event is called “Disruption 2.0.” “Everybody should be afraid of MOOCs,” said Gary W. Matkin, dean of continuing education, distance learning and summer session at the University of California, Irvine, “although there are some that should be more afraid than others.” via Colleges Assess Cost of Free Online-Only Courses – NYTimes.com."
"977","2013-04-11","2023-03-24","https://computinged.wordpress.com/2013/04/11/no-dynabook-yet-an-interview-with-computing-pioneer-alan-kay/","Nice interview with Alan Kay, with nice links to Engelbart and Knowledge Navigator videos. Here’s the segment where Alan describes why the iPad is not a Dynabook. The interesting thing about this question is that it is quite clear from the several early papers that it was an ancillary point for the Dynabook to be able to simulate all existing media in an editable/authorable form in a highly portable networked (including wireless) form. The main point was for it to be able to qualitatively extend the notions of “reading, writing, sharing, publishing, etc. of ideas” literacy to include the “computer reading, writing, sharing, publishing of ideas” that is the computer’s special province. For all media, the original intent was “symmetric authoring and consuming”. Isn’t it crystal clear that this last and most important service is quite lacking in today’s computing for the general public? Apple with the iPad and iPhone goes even further and does not allow children to download an Etoy made by another child somewhere in the world. This could not be farther from the original intentions of the entire ARPA-IPTO/PARC community in the ’60s and ’70s. via An Interview with Computing Pioneer Alan Kay | TIME.com."
"978","2013-04-12","2023-03-24","https://computinged.wordpress.com/2013/04/12/neil-fraser-on-cs-in-vietnam-and-unfortunately-in-us/","I read with great interest Neil Fraser’s fascinating account of computer science education in Vietnam. The efforts going on in Vietnam are really terrific, and Neil does a good job of describing what he saw there. Then a colleague sent me a link to the Slashdot discussion about Neil’s blog post. The focus of the discussion was on Neil’s description of the state of computer science education in the United States, which is not nearly as accurate or as well-informed as his descriptions of the state of Vietnamese CS education. Here’s what Neil says, with my responses interspersed. His original is more detailed than the bits I’m grabbing here. The state of American computer science education is striking in comparison. School boards fight to keep CS out of schools, since every minute spent on CS is one less minute spent on core subjects like English and math. The students’ test scores in these core subjects determine next year’s funding, so CS is a threat. I have never heard of a school board fighting to keep CS out of their schools. Describing it like that paints a picture of a poor group of School Board members fighting against the hoards of computer scientists. A more accurate analogy is School Board members riding on the backs of lumbering elephants, and every once in awhile, a pesky computer scientist mosquito tries to annoy the elephant. If there ever was a massive battle for the schools’ curriculum, the CS army would have lost, because it never showed up! Computer science does not count toward Annual Yearly Progress, but that doesn’t mean that it couldn’t. It’s absolutely true that computer science is not part of the Common Core — that’s the goal of the “Computing in the Core” group. Computer science does count towards high school graduation in nine states now. It could be more, but it hasn’t happened yet. There’s a big effort going on in Washington and in Massachusetts now. I don’t know of any organized effort anywhere to keep CS out of schools. Rather, there’s not enough effort to get CS into schools yet. (There is no school suffering the problem of too many hours and too few things to teach!) There’s an implicit assumption here that School Boards make the decision on what gets taught and what doesn’t. I keep learning how different each and every state is. Decisions about what gets taught (and what doesn’t get made) at the State level, the district level, and the individual school/teacher level, and what gets decided at what level differs from state to state. Teachers often refuse to teach real CS because more often than not they don’t understand it. Instead, they end up teaching word processing and website construction, while calling it CS. I have been involved several studies of high school teachers (e.g., DCCE and Lijun Ni’s work and through GaComputes). Teachers want to teach what they know and what their students need and want. Absolutely, they are unlikely to know real CS, but not knowing something isn’t the same as “refusing to teach” it. Professional development to prepare high school teachers in computer science is a huge international problem. Absolutely, applications and keyboarding skills often get misclassified as computer science. I recommend the CSTA report Running on Empty to see where this is happening and about the efforts to explain what is real computer science. Parents often oppose CS classes since the grade has no direct benefit on their child’s academic prospects. This is compounded by a lack of understanding of the difference between their child playing video games and their child writing video games. Absolutely, I believe this happens. I have heard similar stories. I don’t know how widespread it is. I have not seen any data showing that parents oppose CS classes in enough numbers to influence participation in a significant way. I have never seen any data that parents are confused about the difference between playing video games and writing video games. In general, we know that parents influence students’ educational decision-making processes, but we don’t know that parental recommendations away from computing prevent computing education from growing. Students intentionally tune out of CS class since there are few things worse in American high school than being labelled a nerd. Studies like the ACM-WGBH image of computing, Stuck in the Shallow End, and Betsy DiSalvo’s work with Glitch all say that students value computing and want computing courses, but rarely get access to it. Agreed that nobody wants to be labelled a “nerd,” and Betsy’s work shows that “face-saving” is an important part of her efforts. But that’s not the main reason why students aren’t taking computer science. The real problem is a lack of access. Remember that there are 2K AP CS teachers for 24K high schools in the United States. If students WANTED to be “labelled a nerd” and take a CS course, they are unlikely to get a chance. The result in America is a prefect storm of opposition from every level. Effecting meaningful change is virtually impossible. I work for the education department at Google and the stories our external educators return with are as shocking as they are unpublishable. We’ve been spending enormous resources with frankly minimal impact. I am absolutely sure that Neil is hearing all kinds of awful stories, but that’s not the same as careful studies. Those are anecdotes. Efforts to measure what’s going on paint a somewhat different picture. At the ACM Education Council meeting last month, we learned that China is spending $25 BILLION per year on computer science education. Those are enormous resources. The United States has barely started."
"979","2013-03-25","2023-03-24","https://computinged.wordpress.com/2013/03/25/massachusetts-governor-deval-patrick-says-he-wants-cs-in-every-ma-school/","The question from Kelly Powers starts around time 0:50, and the Governor responds at 2:25: “Sure, count me in” computer science should be in every school in Massachusetts. http://www.masstlc.org – Scott Kirnser of the Boston Globe interviews Massachusetts Governor Deval Patrick at the Mass Technology Leadership Council’s annual membership meeting on March 12, 2013. via Governor Deval Patrick Q&A Session at MassTLC Annual Meeting – YouTube."
"980","2013-04-15","2023-03-24","https://computinged.wordpress.com/2013/04/15/david-brooks-on-the-the-practical-university-nytimes-com/","David Brooks considers the role of the university in today’s society in the United States, and how those responsibilities might be shared across online and face-to-face education. A more reasonable response than the MOOCopalypse. Recommended. Are universities mostly sorting devices to separate smart and hard-working high school students from their less-able fellows so that employers can more easily identify them? Are universities factories for the dissemination of job skills? Are universities mostly boot camps for adulthood, where young people learn how to drink moderately, fornicate meaningfully and hand things in on time?My own stab at an answer would be that universities are places where young people acquire two sorts of knowledge, what the philosopher Michael Oakeshott called technical knowledge and practical knowledge. via The Practical University – NYTimes.com."
"981","2013-04-16","2023-03-24","https://computinged.wordpress.com/2013/04/16/resolved-academic-cs-will-never-meet-the-needs-of-the-it-profession/","Would love to be in London on 12 June to hear this debate! The blurb describing the debate does a balanced job of laying out the questions. “This house believes that Academic Education will never meet the skills needs of the IT Profession” ‘Universities are failing to educate graduates with the skills we need’ – this is the oft heard complaint by employers of IT graduates. Does the problem start in school with the dire state of ICT teaching and assessment at GCSE and A Level? Should academia be trying to produce graduates with only ’employable skills’ that have a shelf life of at best a couple of years? Are employers really expecting universities to produce a mature, rounded professional with 20 years experience straight out of university? Is it reasonable to expect Academia to bridge the skills gap when employers are not prepared to provide a robust career path for IT professionals? via Oxford Union Style Debate | Events | Learning and Development Specialist Group | Specialist Groups | Member Groups | Membership | BCS – The Chartered Institute for IT."
"982","2013-04-17","2023-03-24","https://computinged.wordpress.com/2013/04/17/selective-colleges-getting-super-selective-but-a-college-degree-isnt-worth-anything/","When I read about the burgeoning applications to colleges, I’m reminded of the claim that college degrees aren’t worth anything and that higher education is completely broken. Stanford offered admission to 2,210 students via electronic notification today, producing – at 5.69 percent – the lowest admit rate in University history.…On Thursday, several peer institutions also reported historically low admit rates. Harvard, Yale, Columbia and Princeton admitted 5.8, 6.72, 6.89 and 7.29 percent of applicants respectively. via Selective colleges getting super-selective | Gas station without pumps."
"983","2013-04-18","2023-03-24","https://computinged.wordpress.com/2013/04/18/the-meme-hustler-free-software-vs-open-source/","A difficult but fascinating piece. I found most interesting this contrast between Stallman’s “free software” and O’Reilly’s “open source.” These are important distinctions for computing education, as we think about the culture that we’re inviting students into. This stood in stark contrast to Stallman’s plan of curtailing—by appeals to ethics and, one day, perhaps, law—the freedom of developers in order to promote the freedom of users. O’Reilly opposed this agenda: “I completely support the right of Richard [Stallman] or any individual author to make his or her work available under the terms of the GPL; I balk when they say that others who do not do so are doing something wrong.” The right thing to do, according to O’Reilly, was to leave developers alone. “I am willing to accept any argument that says that there are advantages and disadvantages to any particular licensing method. . . . My moral position is that people should be free to find out what works for them,” he wrote in 2001. That “what works” for developers might eventually hurt everyone else—which was essentially Stallman’s argument—did not bother O’Reilly. For all his economistic outlook, he was not one to talk externalities. via The Meme Hustler | Evgeny Morozov | The Baffler."
"984","2013-04-19","2023-03-24","https://computinged.wordpress.com/2013/04/19/computer-science-as-a-great-target-for-science-careers/","Nice interview with Ed Lazowska of U-W in Science about the state of computer science education and research. The below section is getting picked up elsewhere as an argument for CS as a great choice for students interested in a career in science. I would have to say “about right.” Ph.D. production in computer science is far lower than in fields with far fewer employment opportunities. And Ph.D.s in computer science have a broad range of employment opportunities that take full advantage of their training. In most other STEM [science, technology, engineering, and mathematics] fields, the vast majority of graduates at all levels take jobs unrelated to their field of study. In computer science, the opposite is true: The vast majority of graduates at all levels take jobs that are in their “sweet spot.” Google hires roughly the same number of graduate students as undergraduate students from the University of Washington. Microsoft also hires a large number of our best Ph.D. students, both for Microsoft Research [MSR] and for the development organization. I do think we need to be cautious. We need to avoid the overproduction—and, honestly, exploitation—that characterizes other fields. Hopefully we’ll be smart enough to learn from their behavior. via “We Are the World” | Science Careers."
"985","2013-04-22","2023-03-24","https://computinged.wordpress.com/2013/04/22/acm-europe-recommends-computing-for-all-students/","From the new report from Informatics Europe and ACM Europe: • Recommendation 1. All students should benefit from education in digital literacy, starting from an early age and mastering the basic concepts by age 12. Digital literacy education should emphasize not only skills but also the principles and practices of using them effectively and ethically. • Recommendation 2. All students should benefit from education in informatics as an independent scientific subject, studied both for its intrinsic intellectual and educational value and for its applications to other disciplines. • Recommendation 3. A large-scale teacher training program should urgently be started. To bootstrap the process in the short term, creative solutions should be developed involving school teachers paired with experts from academia and industry. • Recommendation 4. The definition of informatics curricula should rely on the considerable body of existing work on the topic and the specific recommendations of the present report (section 4). "
"986","2013-04-23","2023-03-24","https://computinged.wordpress.com/2013/04/23/reading-student-writing-the-value-of-what-cant-be-automated/","I really liked this post, in part because of how differently it is being interpreted within my department. I posted it on a school-wide discussion list, to emphasize the value of what we do that cannot be automated. However, my MOOC-favoring colleagues read this post in exactly the opposite way to how I interpreted it. “Anyone can do this kind of grading, so we shouldn’t waste our time at it! Instead, we should abandon all courses that require this kind of grading.” What can’t be automated isn’t worth doing? I know that a lot of MOOC-proponents are pushing automatic grading of papers as a cost-effective way to handle classes with over 1000 students. Quite frankly, the idea appalls me—I can’t see any way that computer programs could provide anything like useful feedback to students on any sort of writing above the 1st-grade level. Even spelling checkers (which I insist on students using) do a terrible job, and what passes for grammar checking is ludicrous nonsense. And spelling and grammar are just the minor surface problems, where the computer has some hope of providing non-negative advice. But the feedback I’m providing covers lots of other things like the structure of the document, audience assessment, ordering of ideas, flow of sentences within a paragraph, proper topic sentences, design of graphical representation of data, feedback on citations, even suggestions on experiments to try—none of which would be remotely feasible with the very best of artificial intelligence available in the next 10 years. via Reading student writing | Gas station without pumps."
"987","2013-04-24","2023-03-24","https://computinged.wordpress.com/2013/04/24/diversity-programs-give-illusion-of-corporate-fairness-costs-of-just-a-little-education/","Reminds me of the Jump$start program that made students over-confident and worse at making financial decisions. Teach people a little about diversity, and they think it doesn’t exist anymore. Diversity training programs lead people to believe that work environments are fair even when given evidence of hiring, promotion or salary inequities, according to new findings by psychologists at the University of Washington and other universities. The study also revealed that participants, all of whom were white, were less likely to take discrimination complaints seriously against companies who had diversity programs. via Diversity programs give illusion of corporate fairness, study shows | UW Today."
"988","2013-04-29","2023-03-24","https://computinged.wordpress.com/2013/04/29/making-education-a-team-sport/","This is a compelling vision. Set aside MOOCs or not — how could we use a team-based approach in building postsecondary education, so that we have the best of texts, tools, in-class experiences, videos, and individualized tutoring and advising? If we want higher-quality, we can’t expect one teacher to perform all roles for increasing numbers of students. The real threat to traditional higher education embraces a more radical vision that removes faculty from the organizational center and uses cognitive science to organize the learning around the learner. Such models exist now. Consider, for example the implications of Carnegie Mellon’s Open Learning Initiative. More than 10 years ago, Herb Simon, the Carnegie Mellon University professor and Nobel laureate, declared, “Improvement in postsecondary education will require converting teaching from a solo sport to a community-based research activity.” The Open Learning Initiative (OLI) is an outgrowth of that vision and has been striving to realize it for more than a decade. via Essay on how technology and new ways of teaching could upend colleges’ traditional models | Inside Higher Ed."
"989","2013-05-31","2023-03-24","https://computinged.wordpress.com/2013/05/31/a-c-coding-workshop-for-young-kids-but-why/","This article at ComputerWorld covers more than just the C# coding workshop — it also talks about ScratchJr and Code.org. It’s a nice collection of news pieces, but I’m missing the underlying argument. I just don’t get the argument that they’re trying to make. Wendy Drexler, director of online development at Brown University, said teaching programming early can pay off in improved thinking and decision-making skills. “Programming is an excellent skill to have and not just for the marketability it offers,” she said in an interview. “Programming skills are so integral to what’s happening in our world. Name a field that doesn’t have some technology integration,” she said. As much as teaching students a specific computer program, Drexler said educators need to “teach a mindset for programming, to lay a foundation for it.” via For young students, a C# coding workshop for kids – Computerworld."
"990","2018-10-08","2023-03-24","https://computinged.wordpress.com/2018/10/08/ecep-has-a-new-home-at-the-university-of-texas-at-austin-first-meeting-this-week-at-csforall/","I can’t tell you how exciting this press release is for me. Rick Adrion, Renee Fall, Barbara Ericson, and I started the Expanding Computing Education Pathways Alliance (http://ecepalliance.org) in 2012 to provide states with support as they broadened participation in computing education. Six years later, we had 16 states and Puerto Rico involved — but we were ready to be done. We all four had worked on previous alliances (CAITE and Georgia Computes) and felt that the movement needed new leaders. I am so very pleased that Carol Fletcher and her wonderful team decided to carry on ECEP, and NSF has agreed to continue funding ECEP as it expands to TWENTY-THREE states and US territories! ECEP (now based out of UT-Austin) will have its first meeting this week, at Wayne State University in Detroit (where Barbara and I first met in 1983) as part of the CSforAll summit. The National Science Foundation (NSF) has awarded the UT STEM Center a three-year $2.5 million grant to lead the Expanding Computing Education Pathways (ECEP) Alliance. ECEP is one of eight Broadening Participation in Computing Alliances (BPC) funded by the NSF to increase the number and diversity of students in K-16 pathways. ECEP works with state leadership teams to achieve this goal through education policy reform. First launched in 2012 through an NSF grant to Georgia Tech and the University of Massachusetts Amherst, ECEP has since grown through four phases from two states to sixteen and Puerto Rico. Building on the existing network of ECEP states noted in the map above, the ECEP leadership team is pleased to announce the fifth phase addition of six new states to the Alliance: Hawaii, Minnesota, Mississippi, Ohio, Oregon, and Washington. Source: National Alliance for Expanding Computing Education Pathways has a new home at The University of Texas at Austin"
"991","2018-01-26","2023-03-24","https://computinged.wordpress.com/2018/01/26/the-pushback-begins-who-benefits-from-the-push-to-teach-every-kid-to-code/","The pushback was inevitable. Slate published a piece in December, “Who Benefits From the Push to Teach Every Kid to Code?” The article provides an answer in the subtitle, “Tech companies, for one.” The article is more history lesson than explicit argument that the driver behind the current effort to promote computing is simply for Tech companies to bolster their bottom line. It’s still an interesting piece and worth reading. For some tech companies, this is an explicit goal. In 2016, Oracle and Micron Technology helped write a state education bill in Idaho that read, “It is essential that efforts to increase computer science instruction, kindergarten through career, be driven by the needs of industry and be developed in partnership with industry.” While two lawmakers objected to the corporate influence on the bill, it passed with an overwhelming majority. Some critics argue that the goal of the coding push is to massively increase the number of programmers on the market, depressing wages and bolstering tech companies’ profit margins. Though there is no concrete evidence to support this claim, the fact remains that only half of college students who majored in science, technology, engineering, or math-related subjects get jobs in their field after graduation. That certainly casts doubt on the idea that there is a “skills gap“ between workers’ abilities and employers’ needs. Concerns about these disparities have helped justify investment in tech education over the past 20 years."
"992","2018-01-22","2023-03-24","https://computinged.wordpress.com/2018/01/22/should-computer-science-fulfill-a-foreign-language-admissions-requirement/","An Atlanta-area PBS station did an article at the end of last year praising Georgia’s stance allowing CS to count as a foreign language: Is Computer Science A Foreign Language? Ga. Says Yes, Sees Boost In Enrollment | 90.1 FM WABE The GT director of admissions was interviewed about this requirement in Insider HigherEd and had a much more reasonable take: Rick Clark, director of undergraduate admissions at Georgia Institute of Technology, said he saw value in the steps by Georgia to encourage more study of computer science in elementary and secondary school. “I like that kids, even in eighth and ninth grade, who are planning their path through school would take these courses, because basic coding and language will set them up for opportunities upon high school graduation that they would not have otherwise,” Clark said. In fact, he said his concern is that access to computer science is unequal in Georgia high schools. Most of those who not only take a course, but are able to take Advanced Placement in computer science, are in the metro Atlanta area, Clark said. Georgia Tech is worried about these inequities and is exploring ways to use online instruction to make sure those outside the Atlanta area have access. At the same time, Clark said, the push for computer science should not be viewed as either/or with foreign languages. He said Georgia Tech is “looking for students who demonstrate that international vision and interest,” and that he finds many of those applicants who are taking AP computer science in high school are also pursuing foreign language instruction as advanced levels. More than half of Georgia Tech students participate in study abroad, he noted, and 10 percent of undergraduates are from outside the United States. “We are intent upon enrolling students who in high school chose to seek out that global perspective,” he said. Source: Should computer science fulfill a foreign language admissions requirement?"
"993","2018-01-29","2023-03-24","https://computinged.wordpress.com/2018/01/29/ecep-2018-measuring-and-making-progress-on-broadening-participation-in-computing/","The 2018 Annual Meeting of the Expanding Computing Education Pathways (ECEP) Alliance was at Georgia Tech January 26-27. ECEP is an NSF-funded alliance to broaden participation in computing. We had about 90 participants, state leaders from 16 states and Puerto Rico. Attendees were from a range of positions, from state departments of education, state boards of education, STEM centers, non-profits, Governor’s offices, University professors, and CS teachers from elementary or high school. The focus at this meeting was to define what it means to broaden participation in computing (BPC) education for each state. The state teams worked at defining what data variables they needed in order to inform their BPC goals, and how they would know (by looking at those data) if they were making progress towards those goals. You can see the play-by-play with pictures via Twitter hashtag #ECEP2017. I learned so much at this event. I’m still processing all of it, but here are some of the things that are standing out to me right now.  Caitlin Dooley from Georgia Department of Education gave a terrific talk about the challenges in Georgia. She made the argument that CS is the equity issue of our age. She said that the challenge of getting CS teachers into poorer (low-SES) and rural districts is that teachers are leaving when they have the skillsets. The challenge is to have good school leaders to retain teachers. Anne DeMallie from Massachusetts gave a compelling talk about how they’re integrating CS across the curriculum, especially in elementary school. Massachusetts and New Jersey are two states that integrated their CS and Digital Literacy standards, trying to make it easier for schools to integrate CS education. I liked the framework she offered on how to think about integrating CS into other subjects: exist, enhance, and extend.  I was impressed by the states who are setting concrete, measurable goals. Alabama has set a goal of every high school student having access to CS education by 2022. South Carolina plans to provide access to CS education in every middle and high school in five years. Maryland has a detailed 15 year plan that gets every student access to high-quality CS education with certified high school teachers. (Seen below, presented by Megean Garvin.)  Kamau Bobb of Constellations gave our keynote (as a “fireside chat” with Debra Richardson). His talk was exciting and challenging. He pointed out that high school CS isn’t going to get kids into University. Pushing CS instead of math and science isn’t helping students get admission to higher education. Schools aren’t held accountable for CS — they’re being held accountable for math, science, and language arts learning. CS has to play a role in meeting student and school needs.  Kamau pointed out that “Segregation is an immutable truth.” One of the stories he told was to about textual literacy. During Reconstruction (starting 1865), leaders realized the critical need for all African-Americans to learn to read. The Georgia Literacy Project to address the dramatic literacy gap was just started in 2010 — 145 years later. How long will it take us to achieve equitable access to computing education? Most of the time was spent in working meetings — state teams sitting down with data reports, developing plans for broadening participation in CS, and grounding the plans in what data they have and what trends they expect to see in those data. The challenges of gathering data on the ground are huge. I was sitting with one state where a CS teacher on the team pointed out that she had 85 students this year. The Department of Education person from that state did a search, and found that none of those students showed up in their database. Other states pointed out how hard it is to compare data across states. We use AP CS data for these kinds of comparisons, but in some states (like Arkansas), all AP exams are paid for by the state. That means that more kids are taking the exam, which means that the pass rates have a different context. The amount of support for CS Education from each state varies dramatically. Many states have no one in the Department of Education who is informed about CS. Here in Georgia, we have one full-time CS coordinator, which is terrific. In Arkansas, they have nine full-time CS specialists to help teachers. It was energizing to be with so many passionate leaders who are working to improve computing education in their state. It’s also amazing to see how much work there is to go to reach everyone with high-quality computing education. This was the last ECEP meeting organized by this group of NSF Principal Investigators. Rick Adrion, Renee Fall, Barbara Ericson, and I are done when the existing ECEP grant runs out at the end of September. We’ve worked with a new team of PI’s to help them build a proposal for ECEP 2. The amazing Sarah Dunton, the manager of our state and territory alliance, will continue in ECEP 2. The PIs for ECEP 2 are Carol Fletcher, Anne Leftwich, Debra Richardson, Maureen Biggers, and Leigh Ann DeLyser. We’re hoping that they get funded and continue to help states make progress on implementing and broadening computing education."
"994","2018-01-12","2023-03-24","https://computinged.wordpress.com/2018/01/12/georgia-tech-launches-constellations-center-aimed-at-equity-in-computing/","The Constellations Center was launched at a big event on December 11. I was there, to hear Executive Director Charles Isbell host the night, which included a great conversation with Senior Director Kamau Bobb (formerly of NSF).  Constellations is going to play a significant role in keeping a focus on broadening participation in computing in Georgia, and to serve as a national leader in making sure that everyone gets access to computing education. Georgia Tech’s College of Computing has launched the Constellations Center for Equity in Computing with the goal of democratizing computer science education. The mission of the new center is to ensure that all students—especially students of color, women, and others underserved in K-12 and post-secondary institutions—have access to quality computer science education, a fundamental life skill in the 21st century. Constellations is dedicated to challenging and improving the national computer science (CS) educational ecosystem through the provision of curricular content, educational policy assessment, and development of strategic institutional partnerships. According to Senior Director Kamau Bobb, democratizing computing requires a “real reckoning with the race and class divisions of contemporary American life.” See more here."
"995","2018-01-15","2023-03-24","https://computinged.wordpress.com/2018/01/15/icer-2018-call-for-participation-im-co-chairing-works-in-progress/","Do submit to ICER 2018 in Finland. I particularly encourage you to join the Works in Progress workshop, for which I’ll be the junior co-chair as I learn the ropes from Colleen Lewis. I was a participant in the Works in Progress workshop in Glasgow and found it fun and useful.          "
"996","2018-02-26","2023-03-24","https://computinged.wordpress.com/2018/02/26/confusion-over-the-forms-of-programming-problems-mathematics-physics-versus-cs/","I’m teaching Media Computation again this semester, about 250 students (over 50% female) in a huge lecture hall. It’s hard to wander the room to answer questions, especially during peer instruction, but we do it anyways. I’ve been thinking a lot about one question on the first quiz in week #2 of the class. All my students are Georgia Tech undergraduates but not-CS majors, so, very smart, lots of math and science background, but almost no programming background. Here was one of the two problems that had the lowest score. Students were to write down what this program would print. I suspect most teachers would think that this is a pretty standard first semester, even first couple weeks problem. I certainly did. I even discussed almost the exact same program in lecture. The most common wrong answer was to write only what the second print statement generated. The first print statement was ignored. During the last 5-10 minutes of the quiz, almost everyone was gone, and I answered lots of questions from the remaining students — picking my way through the narrow aisles in the lecture hall. They were struggling, so one might expect that they would try to get clues by asking questions. This was a problem that they asked lots of questions about. I was struck by the words that students used when they described what was the one number that they were writing. One told me that the number she wrote down was the “result” of the function. Another told me that that was the “answer.” I came away with the sense that the students were thinking about the program as a mathematics function or a physics story problem. We often talk about how computer programs might lead to misconceptions for students because of flawed transfer from mathematics. For example, Python functions have mutable data, use the “=” sign in a non-mathematical way, and have side effects. I wonder if the confusion here is about the similarity in form of the problem. Students see a series of equations in math, or a description of a situation in physics, and the answer is a number, an answer, a single result. Not so with programs — it’s a series of statements (like those others), but there may be more than one thing that the program does. We’d need to do real research to see if there is anything to this, not just me noting anecdotal comments from a half dozen students."
"997","2018-08-27","2023-03-24","https://computinged.wordpress.com/2018/08/27/a-guide-to-teaching-computing-to-adults-in-informal-settings/","Greg Wilson is a pioneer and a visionary. He saw an education problem and invented an organization to address it. The problem he’s addressing is that scientists, engineers, and other professionals (what he called “free-range learners”) are discovering that they need computing, but aren’t going to be taking formal classes on-campus. Greg co-founded “Software Carpentry” to offer workshops to adults that addresses their needs. I care about this problem, too, and am amazed at and impressed with how much Greg has grown Software Carpentry. He has recently published an online text on how to teach technology in these settings. You can find it here. It’s more than just a how-to. Greg recognizes the value of drawing on the research on education, and computing education specifically. Greg explains why he makes these recommendations with lots of references to research literature, including some of my favorite work that I mention regularly here. I want to make clear that it’s not a general guide for computing educators. There’s little here for K-12 teachers — this is about teaching adults. Few of the kinds of things that we teach in our New Faculty Workshops about active learning in the classroom are here. Still, there’s a lot here that CS faculty will find valuable and will learn from. Teaching Tech Together Hundreds of grassroots groups have sprung up around the world to teach programming, web design, robotics, and other skills to free-range learners outside traditional classrooms. These groups exist so that people don’t have to learn these things on their own, but ironically, their founders and instructors are often teaching themselves how to teach. There’s a better way. Just as knowing a few basic facts about germs and nutrition can help you stay healthy, knowing a few things about psychology, instructional design, inclusivity, and community organization can help you be a more effective teacher. This book presents evidence-based practices you can use right now, explains why we believe they are true, and points you at other resources that will help you go further. Its four sections cover: • how people learn; • how to design lessons that work; • how to deliver those lessons; and • how to grow a community of practice around teaching. Find more at: http://teachtogether.tech/en/partner/"
"998","2018-06-12","2023-03-24","https://computinged.wordpress.com/2018/06/12/computinged-blog-post-new-computing-faculty-workshops-in-summer-2018/","This is our fourth year, and our last NSF-funded year, for the New Computing Faculty Workshops which will be held August 5-10, 2018 in San Diego. The goal of the workshops is to help new computing faculty to be better and more efficient teachers. By learning a little about teaching, we will help new faculty (a) make their teaching more efficient and effective and (b) make their teaching more enjoyable. We want students to learn more and teachers to have fun teaching them. The workshops were described in Communications of the ACM in the May 2017 issue (see article here) which I talked about in this blog post. The workshop will be run by Beth Simon (UCSD), Cynthia Bailey Lee (Stanford), Leo Porter (UCSD), and Mark Guzdial (Georgia Tech). This year, for the first time, we will offer two separate workshop tracks: This year we added new organizers, Ben Shapiro (Boulder) for the research-intensive track, and Helen Hu (Westminster) and Colleen Lewis (Harvey Mudd) for the teaching-intensive track. The new teaching-oriented faculty track is being added this year due to enthusiasm and feedback we heard from past participants and would-be participants. When I announced the workshops last year (see post here), we heard complaints (a little on email, and a lot on Twitter) asking why we were only including research-oriented faculty and institutions. We did have teaching-track faculty come to our last three years of new faculty workshops that were research-faculty focused, and unfortunately those participants were not satisfied. They didn’t get what they wanted or needed as new faculty. Yes, the sessions on peer instruction and how to build a syllabus were useful for everyone. But the teaching-track faculty also wanted to know how to set up their teaching portfolio, how to do research with undergraduate students, and how to get good student evaluations, and didn’t really care about how to minimize time spent preparing for teaching and how to build up a research program with graduate students while still enjoying teaching undergraduate students. So, this year we made a special extension request to NSF, and we are very pleased to announce that the request was granted and we are able to offer two different workshops. The content will have substantial overlap, but with a different focus and framing in each. To apply for registration, To apply for registration, please apply to the appropriate workshop based on the type of your position: research-focused position http://bit.ly/ncsfw2018-research or teaching-focused position http://bit.ly/ncsfw2018-teaching. Admission will be based on capacity, grant limitations, fit to the workshop goals, and application order, with a maximum of 40 participants. Apply on or before June 21 to ensure eligibility for workshop hotel accommodation. (We will notify respondents by June 30.) Many thanks to Cynthia Lee who helped a lot with this post"
"999","2016-07-01","2023-03-24","https://computinged.wordpress.com/2016/07/01/the-connected-learner-the-teaching-research-taboo/","The Connected Learner is an interesting project led by Mary Lou Maher at the University of North Carolina Charlotte. Her blog post quoted below points to one of the difficulties in talking about teaching among CS faculty. It seems relatively uncommon for research-track CS faculty to discuss their teaching at conferences and research meetings (no, I’m not saying it never happens, but it is rarely the focus, except at CS education conferences like SIGCSE and ICER). So, while we are likely aware of our colleagues’ research projects, we may not realize that our colleagues are experimenting with innovative teaching methods, trying out new learning technologies or adapting some best practices related to active learning. Because we don’t talk about it, we may think it’s not happening and this can lead to us not wanting to talk about our own innovations. We think our colleagues only value core research, so that is what we focus our own discussions on. Source: The Connected Learner: The Teaching Research Taboo"
"1000","2016-07-04","2023-03-24","https://computinged.wordpress.com/2016/07/04/hillary-clinton-proposes-to-continue-obamas-cs-for-all-initiative-cs4all/","It’s just plans and campaign promises, but it’s nice to see. Invest in Computer Science and STEM Education by: Providing Every Student in America an Opportunity to Learn Computer Science: To build on the President Obama’s “Computer Science Education for All” initiative, Hillary will launch the next generation of Investing in Innovation (“i3”) grants, double investment in the program, and establish a 50% set-aside for CS Education. Engaging the Private Sector to Train up to 50,000 Computer Science Teachers: Hillary will launch an initiative to expand the pool of computer science teachers—both through recruiting new teachers into the field, and through helping current teachers in other subjects gain additional training. Encouraging Local STEM Education Investments: Hillary’s Department of Education will support states and districts in developing innovative schools that prioritize STEM, implementing “makerspaces,” and build public-private partnerships. Source: Hillary Clinton’s Initiative on Technology & Innovation"
"1001","2018-06-01","2023-03-24","https://computinged.wordpress.com/2018/06/01/integrating-cs-into-other-fields-so-that-other-fields-dont-feel-threatened-interview-with-jane-prey/","I really enjoyed the interview in the last SIGCSE Bulletin with Jane Prey. Her reason for doing more to integrate CS into other disciplines, at the undergraduate level, is fascinating — one I hadn’t heard before. Other fields are nervous because they think we’re taking so many students from them, and universities are nervous because they’re afraid of losing us to industry. I would hate to lose any other faculty position to add a CS professor. I really believe it’s important for computing professionals to be well-rounded, to be able to appreciate what they learned in history, biology, and anthropology classes. We need to do a better job of integrating more of a student’s educational experiences. For example, how do we do more work together with the education schools? We just aren’t there. We have to work cross-disciplines to develop a path forward, even though it’s really hard."
"1002","2018-06-25","2023-03-24","https://computinged.wordpress.com/2018/06/25/we-can-build-new-programming-languages-that-people-will-teach-learn-and-use-scratch-3-0-in-august/","When I come out with blog posts saying that we need new programming languages (like this one), I regularly get a bunch of skepticism. People will only use industry-approved languages, says one argument. We need to teach the languages that exist, says another. Then I just reply, “Scratch.” It’s real programming, it’s popular, and it’s taught around the world. We ought to study how Scratch succeeded. One key insight: Don’t beat your head against the traditional CS1 teachers. There’s a lot more people to teach, and not everyone has to become a software developer.  A new version of Scratch is coming this August! Source: 3 Things To Know About Scratch 3.0 – The Scratch Team Blog – Medium"
"1003","2018-06-29","2023-03-24","https://computinged.wordpress.com/2018/06/29/the-value-of-naive-and-delusional-phd-students/","We’re in the midst of cleaning out 25 years of accumulated stuff in our house in order to sell this house, buy a new house in Ann Arbor, and move to the University of Michigan by September 1. As I was cleaning, I found the below — my original statement of purpose that I submitted to the University of Michigan in 1988 to start my doctorate. I shared it with some friends, ruefully. It felt silly, as well as grammatically flawed. I really did think that I was going to get a faculty position in “Computer Science and Education” when I graduated in the early 1990’s. I was naive, maybe even delusional. I had no idea what academic CS was like when I applied. The reality is far different than what I imagined. At the Home4CS event just this last April, I mentioned that it would be great if we had CS Education faculty slots in Schools of Education today. As Diane Levitt reported on Twitter, the audience roared with laughter. How crazy was I to think that we’d have some in the 1990’s? But now, some positions like that do exist. There are faculty who have been hired at US higher-education institutions to focus on CS Ed. My new job at the University of Michigan is a joint position between CS and their Engineering Education Research program. It took 25 years, but yeah, I’m going to have the kind of job for which I earned my PhD. Some friends encouraged me to share this statement. Maybe it’s a good thing to have naive new PhD students. Maybe that’s what we want in PhD students. We want PhD students to think long term, i.e., to have bought into a goal, a set of research questions, or a vision — and be willing to work at it for decades. Eventually, if the student is really lucky and others are working on similar visions at the same time, the vision doesn’t seem not quite so naive, not quite so delusional.  I’ll be taking some time off from the blog while making the move to Michigan. I may post some guest contributions over the next few weeks, but for now, I’m putting the blog on hiatus."
"1004","2018-08-24","2023-03-24","https://computinged.wordpress.com/2018/08/24/in-last-five-years-little-progress-in-increasing-the-fraction-of-american-cs-bs-degree-recipients-who-are-african-americans/","Keith Bowman published a series of blog posts this summer on African American undergraduate degrees in engineering. In July, he wrote one on computer science – linked here. It’s interesting, careful, and depressing. I’m quoting the conclusion below, but I highly recommend clicking on the link and seeing the whole report. What’s most interesting is the greater context — Bowman is comparing across different engineering programs, so he has a strong and data-driven sense of what’s average and what’s below average. There has been little progress in increasing the fraction of American CS BS degree recipients who are African Americans. Progress will likely only take place through a concerted effort by industry, professional societies, academia and government to foster change, including stronger efforts in graduate degrees. CS undergraduate programs fare poorly compared to many other engineering disciplines in the context of gender diversity and slightly worse than engineering overall in the fraction of African Americans earning undergraduate degrees. Many of the largest CS programs in the US are strikingly behind the national averages for CS BS degrees earned by African Americans. "
"1005","2018-08-12","2023-03-24","https://computinged.wordpress.com/2018/08/12/how-computing-education-researchers-and-learning-scientists-might-better-collaborate/","Lauren Margulieux has started a blog which is pretty terrific. I wrote about Lauren’s doctoral studies here, and I last blogged about her work (a paper comparing learning in programming, statistics, and chemistry) here. In her blog, Lauren is explaining in lay terms papers from learning sciences, educational psychology, and educational technology. She’s an interdisciplinary researcher, and she’s blogging to help others connect across disciplines. Her most recent blog post is about an issue I’ve been thinking about a lot lately. I wrote a blog post in the summer about the challenge of bridging the modes of science and truth-seeking in (computing) education vs. computer science. Lauren summarizes a paper by Peffer and Renken about concrete strategies to be used between discipline-based education researchers (like math education researchers, science education researchers, or computing education researchers) and learning scientists. Quoting part of it below: Challenges in Interdisciplinary Research: Collaboration within a field can be difficult as people attempt to reconcile different ideas towards one goal. Collaboration between fields, each with its own traditions in theory and methodology, can seem like a minefield. Below are some common challenges that DBERers and learning scientists face. Differences in hard and soft sciences – researchers in the hard sciences can often feel frustrated by the lack of predictability in human-subjects research, and researchers in social sciences can become frustrated when those in the hard sciences have unrealistic expectations or view research in the soft sciences as non-scientific. Differences in theories and frameworks – What constitutes a theory or framework can be different in different domains, confusing what is often a fundamental building block of research. Differences in research methodologies – those unfamiliar with human-subjects research can find its methodologies complex, varied, and full of uncertainty, and those who have endured countless hours of training in these methodologies can find it difficult to describe or justify methodological decisions in a concise way. See more at https://laurenmarg.com/2018/07/29/peffer-renken-2016-dber-and-learning-sciences-collaboration-strategies/"
"1006","2018-05-28","2023-03-24","https://computinged.wordpress.com/2018/05/28/some-principals-are-getting-interested-in-cs-but-think-pressure-for-cs-is-mostly-coming-from-tech-companies/","How do high school principals in small, medium and large districts view the Computer Science for All movement?   High school leaders in smaller districts are most enthusiastic about the trend, a new survey by the Education Week Research Center found. Overall, 30% of all principals say CS is not “on their radar,” and 32% say CS is an “occasional supplement or enrichment opportunity.” I found the two graphs above interesting. The majority of principals aren’t particularly excited by CS, and most principals think that it’s the Tech firms that are pushing CS onto schools, not parents. Source: Principals Warm Up to Computer Science, Despite Obstacles"
"1007","2018-05-25","2023-03-24","https://computinged.wordpress.com/2018/05/25/andrew-mcgettrick-receives-2018-acm-presidential-award-for-contributions-to-computing-education/","Don Gotterbarn, Andrew McGettrick and Fabrizio Gagliardi will receive 2018 ACM Presidential Awards. Andrew McGettrick, honored for his unwavering commitment to computer science education—particularly in terms of its quality, breadth, and access—for generations of students worldwide. McGettrick served as chair of ACM’s Education Board and Education Council for over 15 years, leaving an indelible imprint as a passionate advocate for equipping computer science students with the knowledge, skills, and tools to succeed in the field. During his tenure, he steered the development of key curricula in computer science and software engineering. In recent years, he has played an instrumental role in championing European educational efforts and professional societies, through his work with ACM’s Europe Council and Informatics Europe. McGettrick was one of the leading forces behind the Informatics for All initiative, an acclaimed report that explores strategies for Informatics education in Europe at all levels. I am so thrilled to see Andrew receive this award. It’s so well-deserved. The paragraph above gives a good summary, but doesn’t capture how Andrew has had such an impact in computing education. He’s a diplomat, tireless and stalwart. He’s such a nice guy. He draws you in, talks to you, listens to you, recognizes your concerns, and helps reach a position that meets everyones’ needs. I worked with him for several years on some of his initiatives, and was always impressed with his thoughtfulness, kindness, and work ethic. Few people I know have had such broad impact on computing education, across multiple continents. Congratulations to Andrew! Source: Three leaders will receive 2018 ACM Presidential Awards for contributions to computer ethics, education and public policy"
"1008","2018-05-11","2023-03-24","https://computinged.wordpress.com/2018/05/11/feeling-disadvantaged-in-cs-courses-at-uc-berkeley/","Even at Berkeley, the home of the great course emphasizing CS teaching for everyone, The Beauty and Joy of Computing, there are students who don’t feel that they belong in CS. See the post quoted and linked below. Of course, the story below is not about Berkeley. This is about the slow pace of change, and how difficult it is to get whole CS departments to buy into the vision of “CS for All.” CS 61A was a completely different story. Last fall, I had the opportunity to work as a lab assistant for Data 8: “Foundations of Data Science,” and I couldn’t help but notice the difference in atmosphere between the students in Data 8 and my own experience in CS 61A. Data 8 is one of the alternative courses offered for UC Berkeley students who are new programmers. Data 8 and CS 10: “The Beauty and Joy of Computing” are offered to students who want to test the waters of programming before jumping into 61A. Data 8 uses Python, just like 61A. But the concepts are taught more slowly so new programmers can really understand how to use these concepts properly in their code. Source: Column | Feeling disadvantaged in CS courses at UC Berkeley"
"1009","2018-05-14","2023-03-24","https://computinged.wordpress.com/2018/05/14/scale-or-fail-making-national-cs-education-work-in-switzerland/","Alex Repenning has the CACM Viewpoints Education column this month where he sets out a bold challenge — scale CS education to a national scale, or fail at making CS education work for all. K–12 computer science Education (CSed) is an international challenge with different countries engaging in diverse strategies to reach systemic impact by broadening participation among students, teachers and the general population. For instance, the CS4All initiative in the U.S. and the Computing at School movement in the U.K. have scaled up CSed remarkably. While large successes with these kinds of initiatives have resulted in significant impact, it remains unclear how early impact becomes truly systemic. The main challenge preventing K–12 CSed to advance from teachers who are technology enthusiasts to pragmatists is perhaps best characterized by Crossing the Chasm, a notion anchored in the diffusion of innovation literature. This chasm appears to exist for CSed. It suggests it is difficult to move beyond early adopters of a new idea, such as K–12 CSed, to the early majority. Switzerland, a highly affluent, but in terms of K–12 CSed somewhat conservative country, is radically shifting its strategy to cross this chasm by introducing mandatory pre-service teacher computer science education starting at the elementary school level. Three fundamental CSed stages are characterized by permutations of self-selected/all and students/teachers combinations. It took approximately 20 years to transition through these stages. Each stage is described here from a more general CSed perspective as well as my personal perspective. Source: Scale or Fail"
"1010","2018-05-18","2023-03-24","https://computinged.wordpress.com/2018/05/18/is-there-a-hype-cycle-for-educational-programming-languages/","As a longtime Smalltalk-er, I loved this piece: “The 50-year Gartner Hype Cycle for Smalltalk” Interesting how the hype cycle applies to Smalltalk: Educational programming languages (or maybe just programming languages’ use in education) don’t seem to follow this curve at all. Does a programming language ever “come back” once it has left classrooms? Logo? Pascal? Even if there’s a “Trough of Disillusionment” (e.g., when we realized just how hard C++ and Java are), we still see longterm use. Even if we later realize how good something was (e.g., Logo for integration into curriculum), it doesn’t come back. I wonder what the similar curve looks like for programming languages in education."
"1011","2018-03-23","2023-03-24","https://computinged.wordpress.com/2018/03/23/when-more-information-leads-to-worse-performance/","Eliane Wiese gave a talk here this last week. She told a story that I found fascinating. It connects to a story I just read about from Kahneman and Tversky. The theme has important implications for the design of software for CS education. Story One: In Eliane’s dissertation work she explored how to give grounded feedback that would lead students to learn from mistakes. Here (in summary form) is the result of one of her studies.  In some questions, students were shown graphical representations of fractions. In other questions, they were shown some combination of graphical representations and symbolic fractions. In a fourth kind of questions, they’re just shown symbolic fractions. The vertical axis is performance. The part that I find amazing is the results for condition two and three for fraction addition. Getting more information led to worse performance. Symbolic fractions are so confusing that their appearance depresses performance, even when the graphical information is still there. The students don’t just ignore the fractions. The mere presence of the fractions makes the problem harder for students. (Original paper available here. Her follow-up/replication study can be found here. Thanks to Eliane for reviewing this post and sending me these links!) Story Two: I just finished reading The Undoing Project (Amazon link) by Michael Lewis, the story of Daniel Kahneman and Amos Tversky’s amazing collaboration and friendship. One of their experiments is particularly relevant to Eliane’s finding. You tell people that they’re going to pick a person at random from a pool of 100 people, 70 of whom are engineers and 30 of whom are lawyers. What is the probability that you’re going to get an engineer? Participants in the studies correctly guess 70%. You can change it to lawyers, or change around the ratios, and people solve this problem correctly and easily. Now you tell them that, from the same pool, they have selected “Dick.” Dick is a 30 year old man. He is married with no children. A man of high ability and high motivation, he promises to be quite successful in his field. He is well liked by his colleagues. Now, what is the probability that Dick is an engineer? Participants say that the probability is 50% — they can’t tell. Notice that the description of Dick offers no additional information to discern if he is an engineer or a lawyer. Yet, people can’t ignore the useless descriptive information. They can’t just rely on the numbers. Getting more information leads to worse performance. People seem to feel a need to use all available information, even if it’s not useful, even if leads to worst performance. What’s the implication for CS Ed? Our programming languages and professional IDE’s are complex. How about public static void main(String[] args)? How about all the bells and whistles in Eclipse? When I point these out to teachers, the most common response I get is, “It’s okay. Students just ignore that part.” I’m not sure that they do, or that they even can. People try to make sense of the information in front of them. We are drawn to create narratives. It is difficult for us to ignore information and make decisions based on only the relevant information. This is particularly hard for novices who don’t understand the relevant information, let alone separate the relevant from the irrelevant. Before we toss something into our classes, we should pause and consider these stories. Sure, your CS1 students could use a cool new library that lets them do something cool (whatever — robotics, data visualizations, social network analysis) but has a confusing API and almost no documentation. The new library will consume their time and effort to understand. Sure, you might decide to introduce something (maybe list comprehensions or lambda expressions) into your Python code, just as “something fun” and “totally optional.” But students will try to understand it, and might not learn the things you really want them to learn. Sure, you could throw in a quick algorithm animation or use some super cool new debugger, but if your students are already confused, you’ve now just given them yet another representation or interface to make sense of. Think about the fact that the additional/extra/irrelevant information may be distracting your students from what is important. And that might lead to worse performance."
"1012","2018-03-05","2023-03-24","https://computinged.wordpress.com/2018/03/05/what-can-the-uber-gender-pay-gap-study-tell-us-about-improving-diversity-in-computing/","The gig economy offers the ultimate flexibility to set your own hours. That’s why economists thought it would help eliminate the gender pay gap. A new study, using data from over a million Uber drivers, finds the story isn’t so simple. Source: What Can Uber Teach Us About the Gender Pay Gap? – Freakonomics A fascinating Freakonomics podcast tells us about why women are paid less than men (by about 7%) on Uber. They ruled out discrimination, after looking at a variety of sources. They found that they could explain all of that 7% from three factors. They found that even in a labor market where discrimination can be ruled out, women still earn 7 percent less than men — in this case, roughly 20 dollars an hour versus 21. The difference is due to three factors: time and location of driving; driver experience; and average speed. The first factor is that women choose to be Uber drivers in different places and at different times than men. Men are far more often to be drivers at 3 am on Saturday morning. The second factor is particularly interesting to me. Men tend to stick around on Uber longer than women, so they learn how to work the system. The third factor is that men drive faster, so they get more rides per hour. When someone from Uber was asked about how they might respond to these results, he focused on the second factor. But for example, you could imagine that if we make our software easier to use and we can steepen up the learning curve, then if people learn more quickly on the system, then that portion of the gap could be resolved via some kind of intervention. But that’s just an example. And we’re not there yet with our depth of understanding, to just simply write off the gender gap as a preference. Improving learning might help shrink the gender pay gap. Obviously, I’m connecting this to computing education here. What role could computing education play in reducing gaps between males and females in computing? We have reason to believe that our inability to teach programming well led to the gender gap in computing. Could we make things better if we could teach computing well? Here are two thoughts exploring that question. Maybe better computing education could be an important part of improving diversity, along multiple paths."
"1013","2018-03-02","2023-03-24","https://computinged.wordpress.com/2018/03/02/the-role-of-encouragement-for-success-in-computing-education-and-how-that-differs-by-demgraphics/","A new report from NSF tells us a story that we’ve heard before — encouragement is a critical aspect of developing the confidence to succeed in CS. We found this in our statewide study in 2010, and Joanne Cohoon found this to be critical in her work. In our work, we found that encouragement was more critical for under-represented groups. The new Google study tells us that the encouragement is not received equally. The important part of Joanne’s work is that the encouragement could come from teachers of any gender. This report is part of the growing trend to study the importance of affect in succeeding in computing education. Students who have been told by parents or teachers they would be good at computer science (CS) are 2.5 to three times more likely to be interested in learning CS in the future, but students do not receive this encouragement equally. Additionally, despite positive perceptions about the CS field, lower personal perceptions of skills in math and science and a self-perceived low ability to learn CS may contribute to a gap in interest in CS among underrepresented groups that starts as early as age 14. This report summarizes key differences in interest in and confidence to learn CS among seventh- to 12th-grade students from underrepresented groups — girls, Black students and Hispanic students — as well as the level of encouragement to learn CS that these groups receive from key influencers such as parents and teachers, based on 2015- 2016 surveys. Source: Google Report: Encouraging Students Toward Computer Science Learning"
"1014","2018-02-16","2023-03-24","https://computinged.wordpress.com/2018/02/16/governor-of-rhode-island-explains-why-we-should-teach-programming-to-everyone/","Gina Raimondo, the governor of Rhode Island, was on Freakonomics Radio a few weeks ago. Stephen Dubner challenged their plans to offer computing education at all grade levels in every district. She had a strong response. Dubner’s question is good. We still don’t have the empirical evidence for the value of teaching computing to everyone. We should do that research — not to figure out if Raimondo made the right bet, but to tune what we’re doing to make sure that we get the maximum benefit for the investment. I recommend the whole interview. DUBNER: So, I hear about this kind of thinking a lot, and I certainly understand the appeal and the resonance. But I do also wonder if there’s a proven upside of having everyone learn computer science or programming. It strikes me a little bit like the equivalent of having every student in America during the boom of the internal combustion engine learn to take apart a carburetor. And then I think, if you look at the history of economics and progress, that one of the main strengths of economic progress is the division of labor and specialization, rather than everybody chasing after the latest trends. So I’m curious what the evidence was that inspired that move of yours. RAIMONDO: I think of it as access and exposure, and also just providing people with a basic level of essential skills. So, everyone has to take math. They may become a writer, they may become an actor, but they ought to have a certain basic level of math skills. First of all, because it’s an essential skill to function. And by the way, they might like math. I think digital skills are the same thing. No matter what job you have, you have to have some basic familiarity with computer skills and digital skills. And so it is as essential in this economy as any other skill that we teach. But also, we know — and there’s loads of data on this girls, people of color, and low-income folks are less likely to go into I.T. fields, which tend to be higher-paying. However, if they’re exposed to some computer training, they’re much more likely to go into the field and do well at it. Source: How to Be a Modern Democrat — and Win – Freakonomics"
"1015","2018-02-09","2023-03-24","https://computinged.wordpress.com/2018/02/09/finding-a-home-for-computing-education-in-us-schools-of-education-priming-the-computing-teacher-prompt/","Please sign up join us for an event to launch our report and share: Priming the Computing Teacher Pump: Integrating Computing Education into Schools of Education This report focuses on Schools of Education (rather than Departments or Colleges of Computer Science/Computing) for creating pathways for CS teacher education. We challenge US teacher education programs to innovate and integrate a new discipline into their programs. What we propose is nothing less than a change to the American Education canon. Such enormous change will require innovating in different ways, using different models and strategies, before we find models that work. The report, Priming the Pump, will highlight examples of integration from across the United States, and provide concrete recommendations for discussion. With the expansion of computing education in mainstream K-12 schools, the current training mechanisms for teachers quickly will fall short of supporting a sustainable pipeline of teachers for the scale many cities and states have committed to. Location: Microsoft Times Square – 11 Times Square, New York, NY Date + Time: Thursday, April 12th, 2018; 3PM – 6PM ET www.computingteacher.org ____________________________________________________________________ Apply to Attend and for possible travel funding: Formal Invite to Follow Upon Receipt of Registration _____________________________________________________________________ Highlights from Priming the Computer Teacher Pump “What do teachers need to know about computing? The question of what teachers need to know about computing should be at the core of developing both the structure and content of teacher preparation programs.” “Teacher Development Models for Computing Education: Currently, few models exist in the United States for the development of rigorous computing education teachers, especially focused on computer science or computational thinking, within schools of education.” “CS Education in Teacher Education: Schools of Education face a number of challenges in terms of preparing more computer science teachers. Trends over the last decade have shown a general lack interest from graduating students in pursuing a career as a teacher. In a 2016 national survey, The National Education Association reported that the number of students planning to major in education in 2014 dropped to an historic low of 4.2%.” “Preparing Educational Leaders to Support CS Education: There is urgency around preparing administrators and other educational leaders with the knowledge and skills needed to support computer science teaching and learning for all students. To successfully do this, computer science education must be fully established within the complex and multi-layered United States school system.” _______________________________________________________________________ Organizers/Authors Leigh Ann DeLyser NYC Foundation for CS Education (CSNYC) Joanna Goode University of Oregon Mark Guzdial Georgia Institute of Technology Yasmin Kafai University of Pennsylvania Aman YadavMichigan State University"
"1016","2017-12-13","2023-03-24","https://computinged.wordpress.com/2017/12/13/resources-for-dealing-with-the-undergraduate-cs-capacity-crisis-guest-post-from-eric-roberts/","Everyone, https://www.nap.edu/catalog/24926/assessing-and-responding-to-the-growth-of-computer-science-undergraduate-enrollments/ SInce it’s hard to wade through a 184-page report (especially since our massive enrollments leave most of us with little free time), I’ve put together a web page of resources to help institutions meet these capacity challenges, which you can find here: http://cs.stanford.edu/~eroberts/ResourcesForTheCSCapacityCrisis/ http://cs.stanford.edu/~eroberts/ResourcesForTheCSCapacityCrisis/files/AnnotatedFindings.pptx"
"1017","2017-12-11","2023-03-24","https://computinged.wordpress.com/2017/12/11/how-the-imagined-rationality-of-engineering-is-hurting-diversity-and-engineering/","Just a few weeks ago, Richard Thaler won the Nobel prize in Economics. Thaler is famous for showing that real human beings are not the wholly rational beings that Economic theory had previously assumed. It’s timely to consider where else we assume rationality, and where that rational assumption may lead us into flawed decisions and undesirable outcomes. The below article from Harvard Business Review considers how dangerous the Engineering “purity” argument is. Just how common are the views on gender espoused in the memo that former Google engineer James Damore was recently fired for distributing on an internal company message board? The flap has women and men in tech — and elsewhere — wondering what their colleagues really think about diversity. Research we’ve conducted shows that while most people don’t share Damore’s views, male engineers are more likely to… But our most interesting finding concerned engineering purity. “Merit is vastly more important than gender or race, and efforts to ‘balance’ gender and race diminish the overall quality of an organization by reducing collective merit of the personnel,” a male engineer commented in the survey. Note the undefended assumption that tapping the full talent pool of engineers rather than limiting hiring to a subgroup (white men) will decrease the quality of engineers hired. Damore’s memo echoes this view, decrying “hiring practices which can effectively lower the bar for ‘diversity’ candidates.” Google and taxpayer money, Damore opines, “is spent to water only one side of the lawn.” Many male engineers in our survey agreed that women engineers are unfairly favored. “As regards gender bias, my workplace offers women more incentives and monetary support than it does to males,” commented one male engineer. Said another, women “will always be safe from a RIF [reduction in force]. As well as certain companies guaranteeing female engineers higher raises.” Source: How the Imagined “Rationality” of Engineering Is Hurting Diversity — and Engineering"
"1018","2017-12-01","2023-03-24","https://computinged.wordpress.com/2017/12/01/where-the-stem-jobs-are-and-where-they-arent-ignoring-health-care-and-ignoring/","The NY Times linked below attracted a lot of attention because it claims that CS is the only field where demand outstrips supply. There’s a big asterisk on the graph below — the claim that there are more life sciences graduates than jobs “does not include health care occupations.” This report still underestimates the demand for CS in industry. Here at Georgia Tech (and at many other schools, as I read Generation CS), a huge part of our undergraduate course load comes from students who are not majoring in CS, but they expect to use CS in their non-software-development jobs.  “There is a huge divide between the computing technology roles and the traditional sciences,” said Andrew Chamberlain, Glassdoor’s chief economist. At LinkedIn, researchers identified the skills most in demand. The top 10 last year were all computer skills, including expertise in cloud computing, data mining and statistical analysis, and writing smartphone applications. In a recent analysis, Edward Lazowska, a professor of computer science at the University of Washington, focused on the Bureau of Labor Statistics employment forecasts in STEM categories. In the decade ending in 2024, 73 percent of STEM job growth will be in computer occupations, but only 3 percent will be in the physical sciences and 3 percent in the life sciences. A working grasp of the principles of science and math should be essential knowledge for all Americans, said Michael S. Teitelbaum, an expert on science education and policy. But he believes that STEM advocates, often executives and lobbyists for technology companies, do a disservice when they raise the alarm that America is facing a worrying shortfall of STEM workers, based on shortages in a relative handful of fast-growing fields like data analytics, artificial intelligence, cloud computing and computer security. "
"1019","2017-12-07","2023-03-24","https://computinged.wordpress.com/2017/12/07/nsf-funds-flip-alliance-to-diversify-cs-professoriate-csedweek/","This is an exciting new project from Valerie Taylor (University of Chicago), Charles Isbell (Georgia Tech), and Jeffrey Forbes (Duke University). It’s based on an observation that Charles has made before, that we can diversify CS faculty by impacting just a handful of schools. The goal of the NSF-funded FLIP (Diversifying Future Leadership in the Professoriate) Alliance is to address the broadening participation challenge of increasing the diversity of the future leadership in the professoriate in computing at research universities as a way to achieve diversity across the field. In particular, the problem that we address is stark and straightforward: only 4.3% of the current tenure-track faculty in computing at these universities are from underrepresented groups. The FLIP Alliance solution is equally stark and straightforward: we intentionally bring together the very small number of departments responsible for producing the majority of the professoriate with individuals and organizations that understand how to recruit, retain, and develop students from underrepresented groups in order to create a network that can quickly and radically change the demographic diversity of the professoriate across the entire field. from CMD-IT FLIP Alliance"
"1020","2015-08-26","2023-03-24","https://computinged.wordpress.com/2015/08/26/want-to-change-the-demographics-of-cs-phds-you-only-have-to-change-a-handful-of-school/","Terrific insight from my colleague Charles Isbell. Since school rankings matter so much in faculty hiring, you only have to change things at a few schools to change the field. We could broaden participation in CS PhD’s much more easily than you might think.  Professor Charles Isbell of Georgia Tech delivered an “aha moment” for me. More than 60 percent of the faculty at the top 4, 10, 20, and 25 computer science programs are graduates of one of these same programs. The ranking of one’s PhD institution is a huge factor in hiring—departments hire at their own rank or higher. This is common knowledge, but Charles connected it to diversity. If the very top programs would make a truly concerted effort to increase the participation of women and minorities in PhD programs, the effect would propagate throughout the entire computer science field. Only a few people, those who lead and serve on the PhD admissions committees, can make it happen. via 2015 Faculty Summit informs and inspires – Microsoft Research Connections Blog – Site Home – MSDN Blogs."
"1021","2017-12-08","2023-03-24","https://computinged.wordpress.com/2017/12/08/advancing-computational-thinking-across-k-12-education-across-many-disciplines-digital-promise-csedweek/","New report on coding, computer science, and computational thinking has just come out from Digital Promise. I have been critical of some definitions of computational thinking (as I described in my book). I like the way Digital Promise defined them, and particularly how they connect CT to learning in other disciplines. Advocating for computational thinking throughout the K-12 curriculum does not replace or compete with efforts to expand computer science education: on the contrary, it complements them. Where computer science is not yet offered, integrating computational thinking into existing disciplines can empower educators and students to better understand and participate in a computational world. And schools already teaching coding and computer science will benefit from weaving computational thinking across disciplines in order to enrich and amplify lessons that are beyond the reaches of computer science classes. We offer a number of recommendations to move this work forward. Among them are advocacy campaigns, curriculum and resource development, professional development for teachers and administrators, and continued research. Source: Advancing Computational Thinking Across K-12 Education – Digital Promise"
"1022","2017-10-18","2023-03-24","https://computinged.wordpress.com/2017/10/18/more-teachers-fewer-3d-printers-how-to-improve-k-12-computer-science-education/","A nice summary of where we’re at with CS Ed in the United States, where additional funding and effort should go, and where it shouldn’t. Addressing the teacher shortage should be the number one use for the new funds allocated by the Trump administration, says Mark Stehlik, a computer science professor at Carnegie Mellon University. A lack of qualified teachers is the biggest barrier to CS education in the U.S., he says, and he thinks the problem is going to get worse. An earlier generation of CS educators has started to retire, and he says younger CS graduates “aren’t going into education because they can make twice or more working in the software industry.” One solution could be to expand the reach of each CS educator through online classes. But “online curricula aren’t going to save the day, especially for elementary and high school,” Stehlik says. “A motivated teacher who can inspire students and provide tailored feedback to them is the coin of the realm here.” Where the money should not be spent? On hardware and equipment. Laptops, robots, and 3D printers are important, says Code.org’s Yongpradit, “but they don’t make a CS class. A trained teacher makes a CS class. So money should be focused on training teachers and offering robust curriculum.” Source: More Teachers, Fewer 3D Printers: How to Improve K–12 Computer Science Education – IEEE Spectrum"
"1023","2017-07-21","2023-03-24","https://computinged.wordpress.com/2017/07/21/why-are-underrepresented-minorities-and-poor-over-represented-in-code-org-courses/","Code.org has a blog post describing their latest demographics results showing that they have remarkably high percentages of women (45%) and under-represented minorities (48%). In fact, their students are 49% on free and reduced meals. Only 38% of students in the US are on free and reduced lunch. 44% of students in the US are Black or Hispanic (using US Department of Education data). What does it mean that Code.org classes are over-sampling under-represented groups and poorer students? I don’t know. Certainly, it’s because Code.org targeted large, urban school districts. That’s who’s there. But it’s not like the classes are unavailable to anyone else. If the perception was these are valuable, shouldn’t more suburban schools be wanting them, too? One explanation I can imagine is that schools that are majority poor and/or minority might be under-funded, so Code.org classes with their well-defined curriculum and clear teacher preparation models are very attractive. Those schools may not have the option of hiring (say) an AP CS teacher who might pick from one of the non-Code.org curriculum options, or even develop his or her own. The key question for me is: Why aren’t the more majority and wealthier schools using Code.org classes? CS is a new-to-schools, mostly-elective subject. Usually those new opportunities get to the wealthy kids first. Unless they don’t want it. Maybe the wealthy schools are dismissing these opportunities? It’s possible that Code.org classes (and maybe CS in high school more generally) might get end up stigmatized as being for the poor and minority kids? Perhaps the majority kids or the middle/upper-class kids and schools avoid those classes? We have had computing classes in Georgia that were considered “so easy” that administrators would fill the classes with problem students — college-bound students would avoid those classes. We want CS for all. Code.org has achieved something wonderful in getting so many diverse students into computing classes. The questions I’m raising are not meant as any criticism of Code.org. Rather, I’m asking how the public at large is thinking about CS, and I’m using Code.org classes as an exemplar since we have data on them. Perceptions matter, and I’m raising questions about the perceptions of CS classes in K-12. I do have a complaint with the claim in the post quoted below. The citation is to the College Board’s 2007 study which found that AP CS students are more likely to major in CS than most other AP’s, with a differentially strong impact for female and under-represented minority students. “Taking AP CS” is not the same as “learn computer science in K-12 classrooms.” That’s too broad a claim — not all K-12 CS is likely to have the same result.  Today, we’re happy to announce that our annual survey results are in. And, for the second year in a row, underrepresented minorities make up 48% of students in our courses and females once again make up 45% of our students…When females learn computer science in K-12 classrooms, they’re ten times more likely to major in it in college. Underrepresented minorities are seven to eight times more likely. Source: Girls and underrepresented minorities are represented in Code.org courses"
"1024","2017-07-07","2023-03-24","https://computinged.wordpress.com/2017/07/07/remembering-seymour-papert-by-sherry-turkle/","A lovely piece on Seymour’s passing by Sherry Turkle. Seymour called the identification of mind and object, mind and machine, the ‘ego-syntonic’ quality of programming. He used the language of syntonicity deliberately, to create a resonance between the language of computation and the language of psychoanalysis. And then he heightened the resonance by talking about body syntonicity as well. Which brings me to the boy draped around the Turtle. Seymour loved to get children to figure out how to program by ‘playing Turtle’. He loved that children could experience their ideas through the Turtle’s physical actions. That they could connect body-to-body with something that came from their mind.We love the objects we think with; we think with the objects we love. So teach people with the objects they are in love with. And if you are a teacher, measure your success by whether your students are falling in love with their objects. Because if they are, the way they think about themselves will also be changing. Source: Remembering Seymour Papert « LRB blog"
"1025","2016-05-06","2023-03-24","https://computinged.wordpress.com/2016/05/06/i-had-so-many-advantages-and-i-barely-made-it-stanford-alumna-and-pinterest-engineer-on-silicon-valley-sexism/","I’m a believer in empirical evidence, and I worry about getting a representative sample. Sometimes, the right size sample for the question is one. CS is now the biggest major among women at Stanford (see article here). Do the issues that Jane Margolis and Alan Fisher described in Unlocking the Clubhouse still exist there? As the article linked below describes, women don’t always feel welcome in CS at Stanford. It’s hard to address the issues of classroom culture described. Having separate classes for different groups of students with different backgrounds/interests (as at Harvey Mudd does) might help. I know of even worse experiences at other CS departments. The Stanford CS teachers actively encourage women. There are still CS teachers who discourage women in their classes. It’s hard to get administrators to focus on broadening participation in computing in the face of overwhelming enrollment. It’s even harder to push better teaching from the top down. “Teachers have academic freedom,” is a common response to requests to change teaching (see my efforts to incentivize active learning) — we allow teachers teach anyway they want. It isn’t clear that still makes sense when there are empirically better and worse ways to teach. That’s like letting modern doctors use bloodletting or not wash their hands (see NPR piece making that argument). At Stanford, I took two introductory computer science classes. I soon became convinced that I was much too behind my male classmates to ever catch up. I was surrounded by men who’d breezily skipped prerequisite courses. As freshmen, they’d signed up for classes that I was intimidated to take even as a sophomore. They casually mentioned software engineering internships they had completed back in high school, and declared they were unfazed by any of the challenges professors might throw our way. My classmates bragged about finishing assignments in three hours. I told myself that they were quantifiably five times better me. I remember the first “weeder” computer science course I took–meant to discourage the unworthy from pursuing the major. My classmates bragged about finishing assignments in three hours. Listening to them chat, I felt mortified: the same work had taken me 15 hours of anguish at the keyboard to complete. They are quantifiably five times better than I am, I told myself. Source: “I had so many advantages, and I barely made it”: Pinterest engineer on Silicon Valley sexism — Quartz"
"1026","2017-07-14","2023-03-24","https://computinged.wordpress.com/2017/07/14/sotomayor-says-universities-need-more-blacks/","The below article is pretty stunning — a sitting justice on the Supreme Court calling out an elite University for a lack of diversity. This isn’t just about the University of Michigan. This isn’t about computing, but it could be. Sotomayor is speaking about an important social need, where computing is part of the problem. We see that in the Generation CS report. We are falling further behind in getting African Americans into CS. (An interesting side note here that Georgia Tech alumna, Sarita Yardi (whom I mentioned in this blog post), just won an award at the University of Michigan for her work in promoting diversity.) Daryl Chubin sent me a workshop report on “Better STEM Outcomes: Developing an Accountability System for Broadening Participation.” How would we know if we’re doing better? We could measure participation rates in Universities, but that will take time to change. How do you know if you’re doing the right things now for success later? For example, what would you measure at the high school level that would suggest progress towards broader participation in the future at the undergraduate level? It’s a good question — we’re far from where we need to be, but we need to take meaningful steps towards the goal of broad participation in computing. U.S. Supreme Court Justice Sonia Sotomayor on Monday said future diversity on college campuses is a key to diversifying society at large, noting the lack of black students at the University of Michigan is a “real problem.” Sotomayor, the first Hispanic on the Supreme Court and daughter of Puerto Rican-born parents, was asked by a moderator what a university will need to look like in the years ahead to be inclusive and innovative. “It’s going to look a lot like Michigan,” she said to applause, “but with even greater diversity.” The percentage of black undergraduate students at the University of Michigan has been pretty steady in recent years at less than 5 percent. Hispanics are 5.5 percent. White undergraduates are 65.4 percent. Source: Sotomayor says University of Michigan needs more blacks"
"1027","2017-07-17","2023-03-24","https://computinged.wordpress.com/2017/07/17/algorithms-arent-racist-your-skin-is-just-too-dark/","In my Ethics class this summer, I had my students watch Joy Buolamwini’s TED talk when we talked about professional ethics and responsibility. My students had not before considered the possibility that bias is being built into software, but they recognized the importance of her message. Our students who will be software engineers have to be thinking about her message, about the racism that we build into our machines. She’s been getting a lot of press since her TED talk, including this recent piece in The Guardian. In her blog post quoted below, she responds to her critics in a careful and respectful tone, which took an enormous amount of maturity and patience. “Suggesting people with dark skin keep extra lights around to better illuminate themselves misses the point.” She is more patient and well-spoken than me. I think my response to the critics would have included the phrase, “Are you kidding me?!?” (with perhaps a couple more words in there).  One of the goals of the Algorithmic Justice League is to highlight problems with artificial intelligence so we can start working on solutions. We provide actionable critique while working on research to make more inclusive artificial intelligence. In speaking up about my experiences, others have been encouraged to share their stories. The silence is broken. More people are aware that we can embed bias in machines. This is only the beginning as we start to collect more reports. Source: Algorithms aren’t racist. Your skin is just too dark."
"1028","2017-07-28","2023-03-24","https://computinged.wordpress.com/2017/07/28/silicon-valley-pushing-coding-into-american-classrooms-through-code-org-nytimes/","When the New York Times does an article on Code.org, it’s worth noting. I had my class on Computing and Society read the essay and critique it, and they were dubious. They have a bias — they’re all Georgia Tech students in STEM, and almost all majoring in Computer Science. They tend to think learning to code is a good thing. Still, they were concerned about the article, with good reason. They wondered, “Where exactly is Code.org doing something wrong?” I had similar concerns. I read the quote from Jane Margolis (“It gets very problematic when industry is deciding the content and direction of public education”) and thought, “Jane didn’t just say that. She would have explained what she meant by ‘problematic.'” It felt to me like the quote was taken out of context. Is Code.org really “deciding” what goes into public education? Or are they simply influencing those who do decide? Maybe Silicon Valley is having undue influence. This article didn’t really make the case. Code.org’s multilevel influence machine also raises the question of whether Silicon Valley is swaying public schools to serve its own interests — in this case, its need for software engineers — with little scrutiny. “If I were a state legislator, I would certainly be wondering about motives,” said Sarah Reckhow, an assistant professor of political science at Michigan State University. “You want to see public investment in a skill set that is the skill set you need for your business?”Mr. Partovi, 44, said he simply wanted to give students the opportunity to develop the same skills that helped him and his backers succeed. He immigrated as a child to the United States from Iran with his family, went on to study computer science at Harvard, and later sold a voice-recognition start-up he had co-founded to Microsoft for a reported $800 million. “That dream is much less accessible if you are in one of America’s schools where they don’t even tell you you could go into that field,” Mr. Partovi said. Even so, he acknowledged some industry self-interest. “If you are running a tech company,” he said, “it’s extremely hard to hire and retain engineers.”"
"1029","2017-04-19","2023-03-24","https://computinged.wordpress.com/2017/04/19/google-seeking-input-on-next-directions-in-cs-education-research/","Please follow the survey link below to give feedback to Google on what you think is important in CS education research. We are collecting input to inform the direction of Google’s computer science (CS) education research in order to better support the field. As researchers, educators, and advocates working in the field everyday, your input is extremely valued. Please complete this survey by Sunday, April 23. Feel free to share this survey with others who may be interested in sharing their insights."
"1030","2017-04-07","2023-03-24","https://computinged.wordpress.com/2017/04/07/research-highlight-cra-board-member-susanne-hambrusch/","I’ve worked with Susanne in a variety of contexts and recommend checking out her page linked below. She’s taught me a lot about how computing education research connects to the rest of CS, as described in the quote below. She’s done some interesting work on CS teacher professional development. Most recently, she is one of the authors of the “Generation CS” CRA report. As computer science evolves into a recognized subject in K-12 curricula, we not only need to know how students learn, but we also need to know how to educate and prepare their teachers. The National Science Foundation’s CS10K effort has been an ambitious project with a significant impact on schools and computer science education research. Online learning opportunities, including MOOCs, Khan Academy, Stack Overflow, and Code.org, help many students learn to code and advance their computing knowledge. Online forums can provide data on clicks, completions, progress, and more. How can this data be used to advance how users learn? How can the background and the goals of the learner be integrated into providing personalized and more meaningful help that advances and enhances learning? To answer questions like this, we need to apply knowledge from a range of areas. Computer science education research is an interdisciplinary field that combines learning sciences and areas of computer science, including software engineering, programming languages, machine learning, human-computer interaction, and natural language processing. Techniques, approaches, and tools developed by researchers in these areas have the potential to create new knowledge about learning and teaching computer science. In turn, this new knowledge has the potential to drive new research in computer science. Source: Research Highlight: CRA Board Member Susanne Hambrusch – CRA"
"1031","2017-04-10","2023-03-24","https://computinged.wordpress.com/2017/04/10/university-cs-graduation-surpasses-its-2003-peak-with-poor-diversity/","Code.org just blogged that we have set a record in the number of BS in CS graduates. University CS graduates have set a new record, finally surpassing the number of degrees earned 14 years ago.With a 15% increase in computer science graduates (49,291 bachelor’s degrees), 2015 had the largest number of CS graduates EVER! The previous high point was over a decade ago, in 2003. Source: University computer science finally surpasses its 2003 peak! But look at the female numbers there — they are less than what they were in 2003. We are graduating 2/3 as many women today as in 2003. (Thanks to Bobby Schnabel for pointing this out.) We have lost ground. My most recent Blog@CACM is on the new CRA “Generation CS” report, and about the impacts the rise in enrollment are having on diversity. One of the positive messages in this report is that departments that have worked to improve their diversity have been successful. As a national statistic, this doesn’t feel like a celebration when CS is becoming less diverse in just 12 years. "
"1032","2017-04-12","2023-03-24","https://computinged.wordpress.com/2017/04/12/nsf-report-women-minorities-and-persons-with-disabilities-in-science-and-engineering/","A useful report when trying to make an argument for the importance of Broadening Participation in Computing efforts: Women, Minorities, and Persons with Disabilities in Science and Engineering provides statistical information about the participation of these three groups in science and engineering education and employment. Its primary purpose is to serve as a statistical abstract with no endorsement of or recommendations about policies or programs. National Science Foundation reporting on this topic is mandated by the Science and Engineering Equal Opportunities Act (Public Law 96-516).This digest highlights key statistics drawn from a wide variety of data sources. Data and figures in this digest are organized into five topical areas—enrollment, field of degree, occupation, employment status, and early career doctorate holders. Source: About this report – nsf.gov – Women, Minorities, and Persons with Disabilities in Science and Engineering – NCSES – US National Science Foundation (NSF)"
"1033","2017-03-27","2023-03-24","https://computinged.wordpress.com/2017/03/27/weapons-of-math-destruction-invisible-ubiquitous-algorithms-are-ruining-millions-of-lives/","C.P. Snow got it right in 1961. Algorithms control our lives, and those who don’t know what algorithms are don’t know what questions to ask about them. This is a powerful argument for universal computing education. I like the below quote for highlighting that a better term for the concern is “model,” not “algorithm.” Discussions about big data’s role in our society tends to focus on algorithms, but the algorithms for handling giant data sets are all well understood and work well. The real issue isn’t algorithms, it’s models. Models are what you get when you feed data to an algorithm and ask it to make predictions. As O’Neil puts it, “Models are opinions embedded in mathematics.” Source: Weapons of Math Destruction: invisible, ubiquitous algorithms are ruining millions of lives / Boing Boing"
"1034","2017-03-24","2023-03-24","https://computinged.wordpress.com/2017/03/24/sepehr-vakil-appointed-first-associate-director-of-equity-and-inclusion-in-stem-education-at-u-texas-austin/","I just met Sepehr at an ECEP planning meeting. Exciting to meet another CS Ed faculty in an Education school! He won the Yamashita Prize at Berkeley in 2015 for his STEM activism. Dr. Vakil’s research revolves around the intersection of equity and the teaching and learning of STEM, particularly in computer science and technology. This focus has led Dr. Vakil to conduct participatory design research projects in several contexts. These efforts include founding and directing the Oakland Science and Mathematics Outreach (OSMO) program—an after school program serving youth of color in the city of Oakland. Dr. Vakil also has experience teaching and conducting research within public schools. During graduate school, he co-taught Introductory Computer Science Courses for 3 years in the Oakland Unified and Berkeley Unified School Districts. As part of a university-research collaboration between UC Berkeley and the Oakland Unified School District, he worked with students and teachers in the Computer Science and Technology Academy at Oakland Technical High School to design an after school racial justice organization named SPOCN (Supporting People of Color Now!) Dr. Vakil’s work at the intersection of equity, STEM, and urban education has also led to publications in prestigious journals such as Cognition & Instruction, Equity and Excellence in Education, and the Journal of the Learning Sciences. Source: Sepehr Vakil appointed first Associate Director of Equity and Inclusion in STEM Education – Center for STEM Education"
"1035","2017-03-22","2023-03-24","https://computinged.wordpress.com/2017/03/22/brief-from-google-on-the-state-of-girls-in-cs-education/","Following up on the brief that Google did last month on Blacks in CS, this month they’ve prepared a brief on the state of girls in CS. Computer science (CS) education is critical in preparing students for the future. CS education not only gives students the skills they need to succeed in the workforce, but it also fosters critical thinking, creativity, and innovation. Women make up half the U.S. college-educated workforce, yet only 25% of computing professionals. This summary highlights the state of CS education for girls in 7th–12th grade during 2015–16. Girls are less likely than boys to be aware of and encouraged to pursue CS learning opportunities. Girls are also less likely to express interest in and confidence in learning CS. See http://services.google.com/fh/files/misc/computer-science-learning-closing-the-gap-girls-brief.pdf"
"1036","2017-03-20","2023-03-24","https://computinged.wordpress.com/2017/03/20/expanding-the-pipeline-characteristics-of-male-and-female-prospective-computer-science-majors-examining-four-decades-of-changes-crn/","Interesting report from CRA that offers a nuanced view about gender differences in goals for STEM education and how those interact with pursuing a degree in CS. Another example of a variable becoming more salient over time relates to one’s scientific orientation. Students of either gender who express a stronger commitment to making a “theoretical contribution to science” are more likely to pursue a computer science major, but over time this variable has become a significantly stronger predictor for women while remaining a steady predictor for men. In other words, it is increasingly the case that computer science attracts women who see themselves as committed to scientific inquiry. While at face value that seems like positive news for the field of computer science, the fact is that women are much less likely than men to report having a strong scientific orientation upon entering college; thus, many potential female computing majors may be deterred from the field if they simply don’t “see” themselves as the scientific type. Still, there is some positive news when it comes to attracting women to computing. The first relates to the role of mathematical self-concept. Specifically, even though women rate their math abilities lower than men do—and perceptions of one’s math ability is one of the strongest predictors of a major in computer science—the fact is that the importance of mathematical self-concept in determining who will pursue computer science has weakened over time. Thus, despite the fact that women tend to have lower math confidence than men do, this differential has become less consequential over time in determining who will major in computer science. Source: Expanding the Pipeline: Characteristics of Male and Female Prospective Computer Science Majors – Examining Four Decades of Changes – CRN"
