"Count","PublishDate","VisitDate","Url","Content"
"55","2022-03-10","2023-03-24","https://app.podscribe.ai/episode/82882382","If you were spending more time battling awkward tools than battling bugs, check out, seek you can install it anywhere and get instant visibility in how your absence services are behaving in production. Seek collects structured logs from Sierra log, Microsoft extensions, logging in other libraries and presents them in a real-time web interface. That's like a log file. But with superpowers, learn more about seek@datalust.co slash S E Q that's data lust.co/s E Q. Hi, I'm Scott Hanselman. This is another episode of Hanselminutes today. I'm talking with ENS Sombra she's the VP of engineering core systems at Fastly. How are You? I'm doing well. How are you, Scott? How is anyone right now? I think that that's the new way to answer. How are you? Yeah, I think it's just like, as long as you woke up, you're able to just like, have something to groom and you're just like, you had a Varage, a warm beverage in the morning. You're just like PGS is going to be, Yeah. Someone asked me how I was recently and I said, I'm vertical. And they thought that was an achievement. Good job being vertical today. So yes, I have to say it that a horizontal and then just like specially napping is also like my preferred state these days. So I think vertical would have been like, oh, I'm sorry. You're not napping. That is also a valid napping is definitely at a premium right now. So you are the VP of engineering core systems at Fastly. You've been at Fastly for over seven years now. And you have a master's degree in computer science. I'm curious. When did you start? You have two master's degrees. I too, because I, with education and I decided that I was going to do computer science and then I did information management, which is kind of like the MBA, but like given by the engineering school. So I actually, that was a funny story because when I was in the CS side of the house, I had to lie and not say that I was doing the other one, because you were not serious as a CS. If you care about how things work organizationally. And on the other side, you just basically were like, had to lie because I was like, yeah, no, I'm just taking this as the serious path. So yeah, so I had a double life and I got one of each. And then after that I decided that academia was it Interesting. So you're, you're out there at Washington university in St. Louis. You're getting your master's in computer science and then you're sneaking over to the business school and pretending to care about business, or you actually deeply care about both. I deeply care about both. And, and I recognize that that is unusual. Like the information management side was kind of like how you run a business, but from an engineering perspective. So I think that that felt a little bit more, more natural to me. I actually wish I would have gone for the MBA at that point. I was prejudice. And I was like, no, if it's not by the school of engineer and I'm not going to do it, but I used to work at the B school. So that's how I paid for grad school. So I would have a full-time job from like eight to five and then just go from like five till whenever. And that's how I spent my youth. And I really don't think I could do it anymore. Do you ever look back on that? Just say, how did I have the energy to do not just one, but who All the time and in a way I don't regret it. It was very highly informative. I, I, I was just like, I'm still like, surprised that it did it for so long. So what's interesting about this though, is that it shows early on a focus on how systems fit together, not just computer systems, but systems of people, organizational systems. Was that always a thing that you were interested in? I think it's the thing that I naturally gravitated with because I think probably I'm better at the system of people and the system systems. I would understand when a system system fails and then ultimately it would have a result or like a cost that was rooted in the organization, the people, the team, the management, the structure, the processes. So they became really coupled very, very quickly. So you don't do this. You can have the best, the best technology, the most perfect, like beautiful, pristine, like abstraction in the right programming language when nobody, and like, you know, hacker news will be able to like say a bad thing about it, but if you have the wrong leadership or if you have the wrong approach or if you have the wrong directions or the team doesn't support it, or the organization doesn't support it, it just fails. So, so for me, it was mostly like, how do I make sure that the time that we're spending has a maximum value for what is needed? And it, like, it became just a thing where I, it, I couldn't find an answer that was satisfactory to me unless you're like, you look broader than they just like the specific thing that you needed to do. So, yeah. So that's kinda like how I ended up in this, in this pot. One of the things that I've been really interested in in the last five or six years is helping early in career. People get, you know, farther and get, you know, move forward in tech. And I have noticed, and this is an opinion, my, my opinion that a lot of people seem to have blinders on. And by blinders, I mean, their eyes are just moving focus foot forward. They try to learn the syntax of the language. They try to learn their four loops and their algorithms and stuff, but they seem to miss out on larger systems thinking that it's not the code in front of you. It's the people it's organizational willpower it's that you don't have enough testing. It's it's any one of a thousand different things that have nothing to do with the code itself. Am I wrong to think that this is a new problem? I think it's when you're learning is overwhelming too. How are you going to be aware of nuance unless you go? I actually, like, if you're starting today, my advice would be start from this. And then just like, you've struck the way as you, as you get comfortable. So I don't necessarily think that it's a bad approach. I do think that it's an approach that is like Stine, like stifled growth, if you never transcend pass it. But at some point you need to learn one thing and then you build knowledge around it. And if you don't, this is kind of like trying to learn a language. If you don't have the nouns, then you can't put them together and then you don't do playful structure. So she even poetry after, like, unless, you know what those words mean. So I see more is like an evolutionary step. And I can tell like where a person is on their career, in the growth journey based on like, what level of connections and what level of like, what levels of problems they bring. That's a really nice way to put it. I mean, like it's speaking linguistically, right? When you have the tools, the building blocks, the nouns, the verbs, and then you are playful with it, the same thing and apply organizationally. When you understand a system, you can start saying, well, what if we change this, this management structure? What if we move that over there? Or if you're thinking about a cloud system, you know, I understand this building block in that building block, let's think about plugging them in differently together. Yeah. And at this point, like I have those conversations in variety levels. And I have, like, for example, in a given week, I would have a conversation with somebody that is extremely technical key, technically capable, but that's, I know how to hack the organization to get an outcome, or I have like somebody that sees all the problems, but doesn't know how to just like, make sure that they chart that good strategy and a solution to address them that is iterative. And then just also like appropriately evolutionary. So like, so I don't know. I think when you're getting started is hard enough for, so if you know, you're now instead of, you know, the colors or if, you know, just like even how things that are called, then you're doing great. But at some point the expectation is that you're able to abstract it away and then look at like, am I aligning myself correctly? Am I doing the thing that is like the most impactful that I can do? So, so that is, that is how I, how I tend to like, think about that journey. You've done a number of really great talks at conferences. You've been speaking for a very long time. And two of my favorite talks that you've done are the sign of the times. And we'll put links in the show notes to these talks and then the fallacy of fast. And in both of them, you juxtapose, you know, kind of the needs of the company, the needs of the technology, and then limitations you, everything is a balance. And there's this joke in software engineering that I'm sure you've heard that when you tell the customer, you can have it, you have three choices, you can have a good, fast or cheap pick two. And that it kind of kind of encapsulates that there's always a constraint in a system. You can't have everything, but it seems like we're supposed to strive to have all of those things. We're supposed to want all those things good. Fast and cheap. Yes. We're supposed to want, like we, one can is fine, right? It's like one did, it's like, what makes you get out of the morning and do something, but go to fast Vinci. It's like, you cannot get good without some thought. And if the problem is hard, then you just like you trade off. And then it's just like, they're levers that you move. So at some point it's just like in the continuum, depending on what you need to do, you have to actually figure out what those, what are the appropriate trade-offs in, in, in that moment. So if you're trying to do something really, really hard that the organization has never been able to do before then trying to Ram it in and then just going fast, like they won't give you the result that you want. You may be able to try it, but like, yeah, they're always in conscious and it's always just like a motion. And then just like a, like a thing that just, just like fighting it out and, and you have to pick based on my personality though, I have had to learn how to go for things that are slow. And I think that as my own evolution management has happened, like first I just wanted like dine on and I just like, I need to even hear it. And I'm the type of person that if you speak very slowly and take pause in your sentences, you're just going to join me crazy. And I want to start like pattern-matching and trying to finish them in my head. But organizationally speaking, it just doesn't work that way. So any plan that I will try to do that is just like where the organization is not ready. I've had to learn how to lay them out in like in a year seven or like months, a year of just like very quickly or very, very, just like I can quickly check pointed, but the plan is not going to get done tomorrow. And if I intend to do that, that way, then I failed. So, so it's, it's hard because I gravitate towards fast. I speak fast. I do everything there. And, and that moment or learning when something needs to be given a little bit of more time has, has been a learning, a learning journey for me as well. And I think in the pandemic, the thing that brought the most home was when I took up gardening, no matter how you, how fast you want a plant to grow, it's not going to do what you want and you got love it to death, but you're gonna kill it. So, so yes, That's funny. I think that you and I are similar in some ways. And my wife yesterday told me to stop interrupting and I was like, you're talking so slow though. Like I interrupted only because I knew where you were going and you're wasting all the time. So here we are, we can't, we don't have the patience to go all the way to the end of the sentence without interrupting, but then we have to make plans for six months a year as an organization. Yeah. I actually had a, my former boss used to call me, interrupt the Saurus. So, so I have to make sure that right now it's like, those are the moments that I deeply regret the most is when I didn't leave enough space for folks to, to just have an opinion. So I really, really, really, really have to pay a lot of attention to that. And I'm kind of shared at it to be honest. So if you report to me going to me, I'm so sorry. I'm still trying, it's an area of growth for me. So, so yes. Yeah. I was actually the advice I was given by my wife, cause she heard me on a conference call. We were in the car a couple of days ago and she said, you need to call that person back and apologize for interrupting. And I was like, you really think I do. She's like, you really? You really should. I was like, I don't think I interrupted that much. It's like, no, no, you need to call them back. I think, I think that's just how we talk. And she's like, no, nobody talks like that. That's not okay. So I think I'll do that after this, after this podcast. Oh yeah. Just maybe not call, just drop a message for like, I have had definitely situations where I'm like, this person was saying something good and I accidentally shorten the moment and then it was a teaching moment for the organization or for the team. So yeah, so fast. I tend to gravitate towards that and have a predilection for it. But I actually have had a lot of like a lot of experiences, but just getting it wrong of like, when is it appropriate to, to move slow and then how important it is for some things to take their time. This in fact is a really great segue to your talk that you did on the fallacy of fast, because you actually call out that often that mistakes that are made in the development process can, can, you know, mess up the stability of your system because in an effort to get something done quickly, you can unknowingly sacrifice overall quality. And that can be a large decision that was made quickly or even small decisions that you can make. And it'll destabilize, not just relationships, but large, large systems. Yeah. And that was what I lived in 2015. Now I believe that all the decisions are going to be wrong in one way or another. So is this like when you're trying to get something out, you're going to have to make compromises and then just like, you just don't know when, so like maybe the whole thing will be just try to minimize the blast radius and then just recognize when something is not working and not get too like, too precious about it and just change it and then do know that it's going to be wrong a little bit further down. It's just mostly like how much, how much runway can you get out of a wrong decision? The, the analogies that you're using are surprisingly they're, they're hitting me because you're saying stuff that I say. So I think we're somehow living parallel lives. The blast radius is an interesting one because I said that about an hour and a half ago, I've referred to that a lot because a decision is just a tiny grenade. That's thrown into a crowd and you just want to minimize the number of the code that's been obsoleted or the people's goals that have been now redirected. All of those things are super stressful, but you, you point out that if all decisions are a mistake, you just want to make the least bad decision that you can now to move the system forward. Is that what you're saying? Yes. And also understand that you cannot stress out about getting it, right. So like, so this is one of the things that even as you advice, like people that are developing is like, you're not your code. That should be a lesson that just like, that just sinks in. And at some point, like you're not your decisions either. You're like what happens or how you react whenever the information that you're getting, just like, like points you in the direction that what you're doing is not working. So, so I think just like getting stubborn, get in, get in, just like robs you from the opportunity to self-correct and then just like even calibrate, but like to give you an example, it's just like the, after you're in a place for a long time, then the problems and the things that you're dealing with are things that, at some point you have an involvement either because you let it fly. And you're like, not my house, not my rules is the thing that is like very near and dear to me this last two weeks where I'm like, they're things that I've known, they weren't mind, or I didn't have like Jews left in the tank to go and then just like raise their hand. And if you think tend to stay somewhere for a long time, those decisions ultimately will come and be things that you have to clean or you yourself created. And you didn't know that it was going to be problematic, but then like they come and there are things that you have to face. And I actually, like, I find that very like, very, very refreshing because earlier in my career I was like, every decision has to be the correct one and I need to know like, and now I may like, all right, I don't know yet how this is going to suck, but I know that that if it does, then I can go and clean it. And I would actually have an open mind enough to make sure that I can recognize it and then just like address it and, and call it for what it is. It was a bad thing, but it was good on time. But when it comes to like pipelines and software and things that have growth, it could have been the right decision at the moment with the right constraints and then the right balancing. But then the situation changes. And then all of a sudden it's just like, like it's a new environment in this new world. So I hope like, I hope that I'm just like being specific of what, of what you're, what you, Well, I think that only are you being specific, you're being real. One of the things that you talk about in your talk sign of the times is you say that hyperscale changes things, you know, moving to the cloud changes things. And what you're describing is that perspectives evolve and you need to get comfortable with these, this change. Like the only thing constant is change And in this industry is even more so like an entire area of development gets redesigned into the scope of a year. So sometimes just like, oh, should I even cover Nando's or not? I don't know. Maybe we spit it out and then just like, we see the next wave of like orchestration and then just it's it's a lot. So at that point, like for, for folks who can just be a little daunting, but it's like, it's not going away. So Well, it is daunting. You actually call it the most daunting thing. And the thing that I think I just figured out, like this year after 30 years of engineering is knowing that you'll never be done. Oh yeah. That doesn't feel good at all. I would like to be done and Finished. How would you do then? Well, yeah, I guess I would have nothing left to do, but I mean, do you ever feel like you're going to just, you'll be like, I have a meeting at Fastly and you'd be like, we're done, we finished it. It works great. Now we just keep hanging out. I don't know, like you're always improving. Right. You're always changing things because there's always some new operational need that comes up that didn't exist before Or like the, the magnitude and the volume is larger, so we're never done. So I don't really think that it's like, I even know what would I do because like, I will go for you find more things that need to be done. Or like when the pressure point moves to a different one than you just like the problem moves there. So, no, I think I actually would find a word very boring if it was done. Like, I'm glad that it's never done and I'm glad that it's always moving and I'm glad that there's always just like a new things and pop up and then we'll look good in one place. It's not, it's just like, I, I actually kind of enjoy that. I think it would be very boring for me if it was ever done done. JD, when did I visit you? What year was that in Wellington New Zealand. Oh, it must've been a few, few years back now. Probably about five, five years, six years. I think it may have been longer than that. I remember that I was having a low blood sugar and I went to a convenience store and I don't know if I was texting you or WhatsApping you, but you were like, I were right nearby come by. And I went into the convenience store and I I'm imagining this in my head. And then I went upstairs, up, up, up, up, up, and I found like four or five nerds in a building above a seven 11 with an idea. And that was really Reagan days. Absolutely. That was about the time we were. We were launching Reagan. I think, I don't know if you'd started using us yet in your own little You had, can you showed me? Cause I was like, I had this little iPhone app that I was doing with Greg shackles and we kept having crashes and on an iPhone, they just poof and you just app poofs and it goes away and there's like, you can go and sign up with apple and they'll send you stuff. I just wanted a line number. Right. I just wanted to know, tell me where it crashed and gave me the call stack. And you're like, hang on, let me, let me show you how this works. You send me a trial, a trial key. I think Greg set it up in like a weekend, maybe a couple hours. And then I started getting emails and I was like, that's cool. I'm getting emails. I'm getting a call stack. But then the cool part was when I got an email that said, this has happened 14 times in the last two hours. And I was like, well, hang on a second. And I started bucketing in it and got smarter and smarter and smarter. So it went from a simple idea to now I can tell you that, you know, people in India were having trouble on Tuesday afternoons with my app and that's because I had this code. It was so cool. It's like the black box flight recorder for your software. There's the way I like to think of it. Yeah. And you were four or five nerds in a building in a tiny, tiny little office, a little weird L-shaped office. And now you're, you're, we're in 150 countries and you've got thousands of software teams using Reagan. That's right. Yep. It's just growing, growing and growing all the way from Wellington New Zealand. That's so brilliant. And people can just go sign up@reagan.com and they can set it up basically on any language, on any environment in a couple of minutes. Absolutely. So pretty much every language and platform, mobile web backend crash reporting, we'll sorta sorted on all of them. That's brilliant. Okay. Well, Reagan has been a supporter of Hanselman. It's very early on. I appreciate you all. And I'm so happy to see your success. Folks can sign up for a free trial@edraygun.com. You talk about evolving an evolutionary features, feature sets, as opposed to kind of like revolution. You're always talking about rearchitectures. But when I think of rearchitectures, I tend to think of him being a, like a rewrite, but the way that you describe it in your talks is that they're more iterative and that the best approach for a rearchitect rearchitecture or something of a system that is now somehow not meeting the needs, it needs to grow in some way that you can go in and rearchitect that in a, in a smaller, more evolutionary way. That's my preference. Like I have yet to see like the vetoes that are just like all encompassing to come and just like land in one place. I actually like am very distrustful of that. So I know that they exist and I know that people are able to swing it. It's just not my, not my party election. I believe that a plan is much more likely to be fruitful when you can just like, see it, walk it a little bit forward. And then just like course-correct if it's not going well. So I am very, very hesitant. I don't know if I, I think maybe once we've rewritten a whole thing, but even if a little written whole pipelines, but they don't just like happen from one point to the other. And I also don't think it's appropriate. We make internet. Like we can make the internet. We can't say, Hey, internet stop for two years until I get this component finished. So like I never even just like, I do not attempt that. So my plans tend to be considering the fact that we have internet to make for the next two years. What are the steps that we can take today to make sure that whatever is like stopping us from making better internet that gets addressed. And then how do we move the needle? And I, what I like to do with the teams that I manage myself, it's like every six months, or even just like every week, at least for once a year, we sit down and be like, like, say that we doubled our traffic, where do we fall over? So, so that's a little bit kind of how I tend to approach them, but there are big rewrites that are necessary that have work. It's just like, I don't, I don't tend to, they're not my preferred path. And it's interesting because the industry that you're in is one where the, the, the car is on the road and it's never going to stop. And you might want to change the engine or change the tires, but you can't pull over. There's no pit stop to make. It has to continue. Well, other people can release some software and turn it off. Or maybe they haven't released a software. A lot of startups are creating things and they don't exist yet. So the, the, the luxury of not having your software have a 24, 7, 5 nines of time, and all those kinds of things is very different than the life that you're living, which is the you're you're powering the internet. So you better not mess it up. Yeah. And when we do mess it up, it has a large plus radius talking to going back to your grenade and their thing. Yeah. I think it was one of the times where my parents in, like my parents are still in Argentina were like, ah, that's what you do. I'm like, yeah. Did they figure it out? I'm still trying to explain to my dad what I do. Quiet. Look, my dad is still just like, doesn't super understand, but they knew that pint  will say, huh, I guess that's you're there. So, so no, it was interesting. So like that Gulf, between the, the generations of my father, he was like, trying to explain what do he's like something that I just don't have any advice, any advice on, has I renewed? What do you do with yours? I, my dad is a firefighter. So he like goes into buildings and hits them with axes and like pulls babies out of, you know, smoky rooms. And a couple of days ago, I did a talk at Microsoft. I drove, I drove from Portland to Seattle and I said, I'm going to be on the Microsoft website. You can go here and you can watch me. And then my mom snuck up and took a picture of him watching me give a talk. And he's sitting there like in his little man cave with his, his firefighter stuff and his bows and arrows and all that kind of like outdoorsy, like the absolute opposite of computer person stuff, you know, like retired old firefighter room. And he's kind of like looking, looking very deeply at the screen. Like, that's my son, you know what I mean? And he just says, I'm very proud of you. I have no idea what you're talking about, but you looked very competent. So I have achieved, I have achieved the illusion of competence to my, to my dad. So that's pretty cool. I man, like the parents are very good judge of self characters in some, okay. I suspect that your dad is like, I don't really like him. So my kid would love him if it was like, yeah, my kid is obsessed with foreign firefighters and then firetrucks and everything. So he'll be ahead in my household. So, so yeah, you do look competent. So I Appreciate that. Very competent yourself. Thank You. I try to like practice my very pensive post Competent face Have zero face control. So I actually like heard folks I'd would get Botox to be better managers. So you, your poker face could not be like, could not be red. I recently learned that I do not have a poker face in meetings and someone is trying to make there's some people on my team that are making gifts of me because someone will say something. And for those who are listening, this is a podcast, but this will be up on my YouTube. So if you want to see our faces, you can go and watch the YouTube version of this. But you know, someone will say something and I'll just be like, Yeah. And they're like, they're like, is there a problem? And it'll stop meetings. I'm like, I didn't, I didn't know that my face just did that. I'm sorry that it broadcast that that was a bad idea. Cause I'm trying to be a stoic, but I'm realizing that I just, the brain is attached directly to the face so I can't stop it. So you have power to, you never know that you do until like you stop a meeting with just a face expression. And it's very, very weird. I like you being here. It's a big deal. And I'm a Y I don't know why. Right? Yeah. One of the things that I wanted to ask you about a bit of a subject change here is logging and metrics and everything that I've seen you write and talk about. You feel really strongly about these two critical data pipelines, the logging pipeline and the metrics pipeline. Is that a Fastly specific thing, or do you think that all software needs to think about logging and metrics? No matter what the software does? Yes. All software needs to think about how you log on, how, what are the metrics that you get out of the cell phone? Like the reason that I talk so much about them is that their primary pipelines that I've been seeing through the years. So like there, those metrics are the metrics that have every sort of customer exposure for what they do and include any, say pipeline of the systems that get the business paid. And in the London, one is like anything that like customer generated that may want to inspect about their own infrastructure. So it's like really, really large systems with actually like fairly like small like teams that are just like super embedded into what we're going to do. And then they're just like the ones that I have the most experience I think the most experienced at first, I think that they've been the longest ones that I've seen. So, so when I started, it was just, everybody was like seven people in the systems organization. And then now they're just entire divisions and, and, and this to have evolved through the years and I used to do the databases side of it and then just like, then, then the pipeline themselves. And now we're just talking about orders and orders of magnitude. So in previous docs, I mentioned what it is to look like in 2014 and it was this big and, and now we can't even charge it to be that large. So, so yeah. So I think that they're very critical for anybody that is using like that is constructing software, but also sending interesting thing because they, they, they like be a real-time API that tells you how well your infrastructure is running is a thing that just like we have to make behind the scenes and make sure that it's responsible, like scalable and has appropriate level of granularity and information. So, so they're kind of near and dear to my heart. And that's why I talk about them so much. And one of the things that's kind of extraordinary about Fastly and the things that you work on is that you've said that there are no hard limits on what you can log. Like you might say, well, let's go and log that. And then suddenly that's another gigabyte, a second, or something like the amount of limit, the data that you're pushing is just insane And an insane amount of data. Eventually you will hit a limit. So like as a customer, you just can't do whatever you want. Eventually like, like the computer juice, eventually it runs out. So when there is a limit, you notice, but like at this point, computer juice, computer sparkle, dust, or whatever you want to call it. But the thing about it is extra customer. You can just go and log in, log things. And then we have to make sure that this pipeline like stays up. And then at some point, the limits that we've seen is, for example, when we just like saturate a pipe, go into one of the end points that you define, or like, that is less likely. But as a customer, you have a lot of ability to just go use are like, yeah, we don't, we don't, we don't say you can only log two lines right now that we don't have via. And also that would be hard to do because it's like all of the cash flows through the world funding into this like pool of aggregators and they just find it out. So what do you make that check? And then how do you just like, how do you wrangle information that is coming at you are really clip fast, like fast pace from all over the world. And, and when you're working in the cloud and you're trying to serve as a lot of different clients, these things are multi-tenant. So you have this challenge of like, do we isolate everything that'll cost a lot. Do we do multi-tenant? Well, not noisy. Neighbors are a problem now, how do you, how do you balance that? Well, it gets a little bit, even harder because not everything is in the cloud. So we need to keep the constraints of like, of systems that are hardware base, the constraints of pipelines that are cloud and the constraints that are things that are just kind of hybrids. And in the middle, like, for example, the login service right now is hardware based. So there are things that we plop in, in our own data centers. So they have a completely different set of constraints than the ones that we put in a cloud provider. So like the metrics one is like, it's an, a cloud provider, the login one is on hardware. And then we just have to make decisions that influence strategy across both planes. So, so no scenarios, yes. Are things in the cloud or like when you rest a Cisco away that I think is more familiar to, to probably listening to the podcast. The interesting thing is like, how do you translate those things into like, things that are like physical machines, where IPS are relevant. And that was like a huge shift for me when I came to Fastly in 2014 and I was like, what do you mean that you're a piece are, are things. And just like having to do P PMs of nets or anything. I just like network instilled to me, seems a little bit magical, but I know who to go. And then just like, say, what's what's that interconnect was like this, how do you appear all of those things become, become factors that we have to balance as we make any decision. But, but yeah, cloud environment, if there's a lot of the things I get obstructed away, though, all of that complexity is obstructed away. That is, that is, that is really helpful. And at the same time, the flip side of that, it could be detrimental to the point where you're like the complexity. You don't see it, therefore you may not believe that it's there, but eventually the wires or wires, computers, or computers, sharks in the ocean come on then like chop on, on, on, on pipes to connect. And then at that point you learn the nitty gritty of what keeps the internet machine going. So One of the things that I think is that I like about myself is that I'm old enough that I could visit. Like I was there before the cloud was there. So like when the boss said, make the system scale, and then he went home on Friday, we would stay up all weekend and go and rack servers. So, you know, in his mind he was moving the cloud slider bar to like, oh, make more servers. And then he goes to golf and then we go and buy more servers and then rack them and put them up yourselves. But w going back to the very beginning of the conversation, when we talked about early of career, people who have never been in a data center, how do we make something like, they've never seen the cloud, they just SSH into the thing. They have no concept of this. Like, did it feel different for you when you actually went in the data center? And you're like, look, this is, this is the giant Costco sized building with real refrigerator looking computers inside. For me, that was a very visceral moment. Like I could tell my dad, I have been where the cloud is. Yeah. I actually enjoy visiting the data centers. It was like, it was, I think, even though, like I had been in places where we used to rack them and we sit there, like, I mean, I used to work at a university, so I was like sitting right next to like the, so I, it was a very surreal experience even right now, even knowing everything that we know to go, like show up in the data center and then just like be weighted because they weigh you in as you go in, because like, they, you have to have a similar level of weights when you go in and out. And it felt like very Tom cruise in mission impossible. I, I don't know. I don't know how that IX, I think it was like a wonderful experience. And I, I feel me with glee, I took photos that I wasn't allowed to share because our Caitlin thing, but I was just like one of those things, even right now, like, I, I think one of the, the folks that joined my team, I think it was maybe in 2019, right. In the, before times, their thing was like, let's just go to the data center where it's closest to us and I'm like, yeah, let's go. And then it was awesome. I really, really enjoyed it. So I don't know, I'm torn because I think in a way, like, you don't need to see it in order to actually understand how it works. But I think it's just kind of like taking kids to a zoo, like, well, you can see animals in YouTube or just like in Netflix, go into the sewer and CNN they're in. Like, it just makes them real. And, and it was kind of, it's like, Yeah, it's like, it's like I was talking about to Stu and then just like, I go on with my kid and then Nikki's like giraffe. And I'm like, we've seen a giraffe and a show about giraffe, like a million times, but just like seeing it live, it's just like, it makes things concrete. And maybe this is who we are as like very smart monkeys like that. We just need to see it and then have it close to us. So it's like for it to become just like corporeal. So, so I, yeah, I, I, I really, really enjoy visiting data centers. I think so far, I've been to the one in San Jose and the one in London. And then, then yeah, the people that have taken me, like, just like, they're like, you're way too excited about this. And I'm like, no, this is awesome. And then just go on and just like this. And it's like, explain to me this and that. And, and, and yeah, I think that that is one of the advantages of working in a place that actually has hardware. So you go see it on, it's kind of cool, Very smart monkeys who took rocks and put lightening in them and made them think, yeah, Yeah, Yeah. So good. And we all agreed that they would about idea, Right? Oh yeah. It was a phenomenally bad idea. We'd never get it to anybody. It was really not a good idea. Yeah. But it was a good idea to talk to you. Thank you so much for hanging out with me today. Yeah. Anytime. So if you have like, from like firefighting Lego, just like smart monkeys with, or just like even plants I'm here and thank you so much for having me. All right. We've been chatting with know Sombra, she's the VP of engineering of course systems at Fastly. You can find her online and all the usual places. This has been another episode of Hanselminutes and we'll see you again next week. "
"38","2022-07-07","2023-03-24","https://app.podscribe.ai/episode/83473491","Hey friends, you know how I love great podcasts. And I want you to check out the code newbie podcasts, all about stories from folks on their coding journey. They talked to new developers, experienced developers and everyone in between about how they got started learning to code how they navigate their technical careers. And they also do deep dives into technical topics in a newbie friendly way. Check out their podcast at www dot code newbie that's any w B I e.org/podcast. That's code newbie.org/podcast. Hi, I'm Scott Hanselman. This is another episode of Hanselminutes today. I'm talking with Rihanna, Lin, founder, and CEO of journey foods and a serial entrepreneur. How are you? I'm great. I'm great. It's, it's great to connect. I feel like we follow each other on Twitter for quite some time. And so I'm happy to join the podcast and discuss a little bit more. Yeah, I appreciate this. When you say serial entrepreneur, like that's legit, like I look at your, your LinkedIn and it's like, you were an entrepreneur in residence at Google. That means that you're just what sitting around and thinking about awesome things to start up. Yeah, I mean, at that time I was just sort of transitioning from a company, but no, I've been an entrepreneur since, since 23, you know, actually officially became an entrepreneur and undergrad. And I talk about that. Sometimes I do some college talks now has turned into a journey labs, which I'll explain later on, but I've done quite a bit of lectures around the U S and other schools around the world. And I talk about like this dorm room entrepreneurship and, you know, very early on, I started school in oh four months after Facebook launch on Harvard campus. And I was really intrigued by a lot of platforms that were built similarly about, I was really diving into not computer science, but cause I was a biology and, and black studies, major biochem and black studies. And there were maybe 10 computer science majors at the time when I joined school. But I was chilling out in my dorm room with a bunch of engineers, just building websites, end up finding several businesses, minority businesses, women led businesses that I could build websites for and sort of started a early consulting and web shop in college. And that's really turned in, helped me build companies over the past. Now it sounds crazy 18 years. Wow. That idea of dorm room entrepreneurship. It's funny people. I think I've heard them look down on that, but it seems to me like that's an ideal place to start a business. You have low overhead, right? You're you get 4, 3, 4 people in a room with you. You've got walkable access to other thought leaders that are future thought leaders in the dorm. Why shouldn't all businesses start in the dorm. Yeah. And a lot of things are, are pretty cheap. I mean, I know college is going up quite a bit. Now it has started to go up. When I was in there, I was also a college athlete. I went, I attend to UNC chapel hill and I was actually on an academic scholarship, but I was there, chose it for the balance of sort of sports and the background and focus on in history of UNC and public health and in sciences. And so it was quite a great time for me to also build around my professors and other entrepreneurs on an athletes in the space that were pretty entrepreneurial. I look back now and it's great. I have some mentors that have started that were my chemistry professor that has started some unicorns now and one science company. I don't know if you know, carbon 3d, Probably a recapture No-no they're 3d manufacturing and software. They build everything from like shoes, for souls, for Adidas to, you know, medical office supplies and very grateful to see sort of the transition of science into entrepreneurship from, from early age as well. Wow. That's really cool. Yeah. So carbon 3d is a, is additive manufacturing like 3d printing? Yes. Wow. Being able to go and say that you were like you were there or you were working with this person that invented that thing. Like you're mentioning about professors. I recently talked with a person who is a CEO of a warehousing company that uses AR and VR to come up with better ways to do picking within a warehouse and moving things. And she collaborated with her professor like you're, you're, you're sitting there with a mentor, a business mentor that is also you're taking classes from what a perfect opportunity to start a business with a built-in board of mentors. Absolutely. I mean, early in my career, a lot of my mentors were professors were scientists and happened to have businesses on the side today. I mean, I haven't launched it, but I've always wanted to sort of start this media service called Neo scientists through you look at sort of scientists outside of the lab and what they're doing. And that was a lot of my inspiration early on. So this, this person who was, I was talked to on another show, our name was sh Shara Thomas is doing this work in the warehousing space. And as I was listening to her, explain to me how passionate she was about changing, how warehousing works. I realized that warehousing was something that I never thought about. And I sat there, like I knew stuff is in a box and then it shows in my house. And then when I started thinking about you and your work with journey foods, I started thinking about the supply chain and how food magically shows up on my front porch or at the, at the Kroger down the street. And, and I don't know about the supply chain. I don't think about that. How selfish is that of me to not think about my food? Yeah. So, so we've been far removed from that for several reasons. Everything from climate change to various runs of capitalism in our food system to population growth, to just really inefficient handling of the U S modern agriculture system, where the culture of agriculture is very different than a lot of other countries. And that sort of taken root across the world, unfortunately, because of diversification of the players and leaders in modern agriculture, haven't thought about practices that range everywhere from, you know, indigenous Americans to practices of black Americans in their safe practices, you know, in their former practices before they were slaves on the African continent. So a lot of diversity issues as well, and, and in modern agriculture. And then finally, if we think about what's happening now, it's pretty boring, right? Like warehousing. I mean, for some people it's like quite exciting to make these processes is efficacious as possible, but throwing things in a brown box, all we think about is like how much money we can extract from it. We haven't made supply chain fun for most people. We haven't thought about the long-term effects of being disconnected or, or keeping a slow food movement in place. And so most people take for granted everything from how much food we raced every day, you know, before it gets to the warehouse, 30% in the warehouse, 10, 15%. And then, you know, anywhere from 25 to 38% between the grocery store, all the way to our homes, right? And that's why today 70% of us consumers and this number is sort of taking hold across the world, eat processed, manufactured foods, shelf, stable foods, canned foods, two sauces, breads things that can last more than a few days. Now there's some great companies that are popping up that are helping with warehousing in terms of food waste and sort of stability like appeal sciences. We work closely with them, but this has had a lot of deleterious effects on one, how we connect to our food because of modern processing of food and to a warehousing has become, and supply chain is becoming ever evermore important. You can actually ship food package from the middle of Mexico or Columbia all the way to Wisconsin, right? Without worrying about it going bad, you know, 30% of what we consume is fresh items and restaurant food. And that tends to have like a more local supply chain. What can someone do like me who like I go to, I go, we have a weekly farmer's market and I, we buy our vegetables there, but that's only on Wednesdays, you know, and that's not gonna, those vegetables sometimes lasts. Sometimes they don't, but as a regular consumer, who's going to a regular grocery store and occasionally going on Wednesdays to my farmer's market, how should I get involved? Or do I just need to start reading labels more? I don't know what to, where to even start. You're absolutely doing the right thing and doing in purchasing weekly from your local farmer's market, you know, in, in some people don't have the opportunity, there's a tremendous sort of widespread. And so in decentralization of local communities, when it comes to, you know, farmer networks, these farmers have lost a lot of their land over the past decade and, you know, proceeding decades, the pricing for them has become quite competitive when it, when you compare it to sort of faster produced lower nutrient density, dense items like such as apples and kale and other things. And so some people have problems with even paying for the cost of like a, a community box or going to any community and commuting to a farmer's market. And then during COVID farmer's markets took an even bigger hit, as people were sort of scared to go outside and, and purchase. And, you know, Amazon food delivery Instacart started to see quite big growth in, and those are services that quite rarely approved like a local farmer network or farmer too, because of the consistency, because of the quality because of the, the actual mass and quantity, it's really hard to get on there. And so there are services that are starting to, to grow across the country that are providing not consistent, but just, you know, somewhat quality boxes, farmer's market boxes delivered to your door. So I, I definitely urge people to find more local delivery services that keep you away from maybe having to commute and find a farmer's market, but you can order these, you know, on a weekly, biweekly basis and really support that community. I think the biggest thing that we can do as consumers is make sure that we don't create these monopolies systems of especially fresh food items. You know, unfortunately it's already that case with packaged food items as the top 10 grossing companies, not 10%, but 10 largest food companies globally run more than 90% of the total quantity of revenue and items and our supply chain on the package food side. And we need to make sure that for both packaged items, such as like a new cereal that may hit the market or a new powder or a new chip brand or bean brand that we're supporting minority and small hold organic creators and packaged foods. And that's a little bit easier because you have shelf stability and more of those are available on, you know, an Amazon or directly through their websites for the local fresh items, supporting more marketplaces that do the really hard work of convening and aggregating fresh food items. There's a company that I love in North Carolina called seal the seasons, the founder. We went to two undergrad, the same undergrad, and I went to their warehouse and it's quite interesting process. They're collecting berries and fruits and vegetables from farmers in different states at the time they were just in North Carolina, but now they're sort of spread across the country and they may collect tens of thousands of peaches from eight different peach farmers, clean them, packaged them and put them into a frozen bag of peaches that you can use for, you know, pies or smoothies or what have you. And because they have this network of farmers that they're packing and sourcing, they're saving them from a lot of waste where they wouldn't have traditionally sold through the grocery store market because they don't have this licensees or the, that licensing. And they also are saving them from having to pay for these plants and warehouses and the cutting machines, and the many things that we don't know about and see these, these machines cost tens of thousands of dollars, a, you know, lots of electric fees. And the USDA also makes it quite hard to maintain a warehouse as well. That word that you said, I want to make sure that we expand any acronyms or definitions. You said small holding that small scale, typically farms, you know, less than five, five acres. It seems like there would be a lot of tension between a small family farm and, you know, industrial agriculture, someone would say, well, you can't be successful as a small farm because the giant 400 acres next door will, will crush you. Is there space for both? There's absolutely space for both. And I think, you know, where their space for both is in companies that aggregate and pay fair wages to these farmers pay fair prices to these farmers, you know, market rates that are similar to what they would get for their next or competitor. And also I think that we need to do a better job in directing our, our dollars, but then finally the government has to do a better job at supporting these farmers. Like a lot of lobbyists from, you know, big sugar to big corn have won over the past few decades and we kind of need to have our government pushed back and we need to continue to have these conversations where we make sure that we're supporting, you know, black farmers in the middle of the country. And, you know, the Southern parts of the country with grants, you know, the same amount of grants that have been going to a lot of in tax breaks, that haven't been going to a lot of these big industrial ag cultural institutions and other tools that can support everything from like refrigeration to crop machinery. And, you know, I think because we're so far removed from these processes where we're in and the voices tend to be much older, you know, like farmers now, you know, the average age of a farmer is I think 58 years old or something like that. And, you know, the workforce is shifting quite dramatically. Most young farmers are now going into startups that are raising, you know, a hundred, $200 million from tiger or something. And there that indoor vertical farming and they hired 200 people and that's about it. That's, that's where you see a lot of our younger farmers going into VC-backed indoor farming. And so we still will have a tremendous amount of land that is underutilized and a generation of people that are not trained in getting a food to our grocery stores and a diverse and quality way. Yeah, Yeah. That sense of under utilized, you know, I, I even look at my own backyard and years ago, we were just like, what are we doing? What is all this grass like? This isn't even supposed to be here. So we put up a bunch of boxes for running our own backyard garden, and holy crap, like first we're blessed to have a backyard, but if you just take, we took three, four by eight boxes and we're making enough vegetables for the whole street. That's beautiful. If we actually like use the whole backyard, that would be nuts. I've even seen some folks here. I'm in Portland, Oregon. I've seen people with community gardens like next door. We'll, they'll take a, an abandoned lot and turn it into a community garden. How important do you think those will will be? You know, in the future, You know, they're, they're tough, right? Because if the community's not taking care of it and you have to have that, buy-in, it can be quite a load inexpensive on the people that sort of lead that effort within the communities. I've seen a lot of them have really early excitement and then they sort of fall by the wayside because people are giving up their time to manage these things. And there's not a lot of funding going toward them. So one, we need to figure out better ways to fund community gardens into. I think it's quite interesting to see where this is taking place, set, things like high schools and elementary schools. I was really proud of my brother last summer, he was working in the high school garden and he was growing all these things that he, you know, never knew before. I mean, my dad has a few little boxes at home with, with, you know, some tomatoes and, you know, some carrots and that's about it. They're right outside of Chicago in Evanston. And I is, it's pretty limited. You can do like maybe some strawberries, some zucchini carrots and beats and you know, a few onions or something, but those are the same things that people see in the grocery stores. And so we need to definitely diversify what we're growing and all of these gardens, and also think about like what makes up the ideal meal at home at night, or, you know, in school, like how can we bring more excitement back to, you know, that live experience and the person. And I was actually last week with two of the people that I think are doing some of the most exciting work in this. And that's, that's Ashley Ryerson and Ron Finley. We were in LA recently at Ron Finley's garden. He's called the gangster gardener after, you know, sort of a viral Ted talk, how we get people to give a shit about their food and how we get kids to grow what they eat. And I mean, over the years to just see the diversification of what he's done in a south LA lot in pool, you know, everything from tangerines to mango trees to bananas, you don't really even see people growing bananas in California, right. And then the climate Sarah for it. And we've been talking about sugar cane and he's growing sugar cane. And, you know, some other things that, you know, take a little bit of work based on the climate, but we have to try it out and we have to make people excited about it. And I mean the sugar cane and tangerines, and some of these other berries that I try at his a lot, you know, in south LA just, you know, blocks from where LA used to be. You know, some of the most crime ridden in the country. I, these are some of the most beautiful fruits I've tried in a, in a really long time. And I, and I love that. And I know that that's possible across the country. Yeah. Yeah. Ron Finley is showing us, what's possible with spaces that we think of as being nothing spaces. Like you point out sidewalk, medians or empty lots and to just say, Right, right. Seeds are cheap. Let's make some, let's make some food. We just need a little bit of, of effort. And that is being talked about by people like him in south LA. But what about people more suburban? It seems like everyone has a backyard. Should everyone have a garden in their backyard? Oh yeah. I mean, like, we really need to talk about the bio verification of yards in the U S I mean, you know, sometimes grass is pretty and it's nice to play badminton or soccer, you know, have your dog run around the whole yard. But I mean, the beauty that we need to sort of shift our focus toward when we have, you know, yards full of just, you know, local grasses, local, local fruits, local plants that can withstand that load, that climate and grow in an organized way, then you can make sure they're organized and it's, it's, it's quite possible. But I think sometimes people walk by these yards and they're like, oh, that's an eyesore, right? Like I have flat grass, beautiful grass, but just know a plush laying area. And then all of a sudden you see someone that tried that tried to take a risk. And in what we need to continue to do is sort of make sure that folks like architectural digest and all of these at home and feature media companies find ways to shift in and create accountability and our growth and our supply chain and a diversity of plants and other things. And we, we can most definitely make sure that they find ways to highlight that beauty. Yeah. Yeah. I read a book by an author named Tara Nolan about gardening your front yard. And, you know, I have to admit when I look at those kinds of projects, because I'm conditioned to, to see a bright green front yard as being healthy, I'm like, oh wow. Like I realized that I can't tell what's a weed and what's a healthy, good looking front yard. And I'm conditioned to say, oh, look, there's something that's three feet high in the front yard. That must be a weed, but it's actually a healthy garden. That's a pollinator plant. That's a rain garden. This Is a space that is a, is it appropriate for a front yard? And so are you taking that step in Portland? I haven't gotten to the point of doing my front yard right now. That's the other problem. We have a thing called NHOA a homeowners association, which is the people who can tell you what to do with your own own space. So we can do whatever we want with our backyard. But the front yard has to look a certain way. So when you think about organizational change and kind of like willpower, getting hos to recognize that, you know, a, a native plant front yard or a front yard food garden is an appropriate quote, unquote professional, reasonable looking thing. And I don't want to be the house that stands out. So we all have to kind, you know, take that risk. Like you said, take that risk. Hey friends, this is Scott. I hope you're enjoying this chat, but we are going to take a brief break and we're going to have a chat with our sponsor. Our sponsor Reagan today makes shows like this possible. JD, when did I visit you? What year was that in Wellington New Zealand. Oh, it must've been a few, few years back now probably about five, five years, six years. I think it may have been longer than that. I remember that I was having a low blood sugar and I went to a convenience store and I, I don't know if I was texting you or WhatsApping you, but you were like, I were right nearby come by. And I went into the convenience store and I I'm imagining this in my head. And then I went upstairs, up, up, up, up, up, and I found like four or five nerds in a building above a seven 11 with an idea. And that was really Reagan days. Absolutely. That was about the time we were. We were launching Reagan. I think, I don't know if you'd had started using us yet in your own little app, You had, you showed me. Cause I was like, I had this little iPhone app that I was doing with Greg shackles and we kept having crashes and on an iPhone, they just poof and you just app poofs and it goes away and there's like, you can go and sign up with apple and they'll send you stuff. I just wanted a line number. Right. I just wanted to know, tell me where it crashed and gave me the call stack. And you're like, hang on, let me, let me show you how this works. You send me a trial, a trial key. I think Greg set it up in like a weekend, maybe a couple hours. And then I started getting emails and I was like, that's cool. I'm getting emails. I'm getting a call stack. But then the cool part was when I got an email that said, this has happened 14 times in the last two hours. And I was like, well, hang on a second. And I started bucketing it in and got smarter and smarter. So it went from a simple idea to now I can tell you that, you know, people in India were having trouble on Tuesday afternoons with my app and that's because I had this code. It was so cool. It's like the black box flight recorder for your software. There's the way I like to think of it. And you were four or five nerds in a building in a tiny, tiny little office, a little weird L-shaped office. And now you're, you're in 150 countries and you've got thousands of software teams using Raygun. That's right. Yep. It's just growing, growing and growing all the way from Wellington New Zealand. That's so brilliant. And people can just go sign up@reagan.com and they can set it up basically on any language, on any environment in a couple of minutes. Absolutely. So pretty much every language and platform, mobile web backend crash reporting, we'll sorta sorted on all of them. That's brilliant. Okay. Well, Reagan has been a supporter of Hanselman. It's very early on. I appreciate you all. And I'm so happy to see your success. Folks can sign up for a free trial@edraygun.com. So talk to me about journey foods. So you are passionate about food. You're passionate about the supply chain. You're passionate about how we get food on our tables, but during foods as a software company, what software are you creating that supports this space? Yeah, you know, I mean, I come from a family of like farmers and distributors and it's always been beauty beautiful to me, to like be a part of that world, even peripherally. I am a scientist, a data person. I love technology. And what's so beautiful for me is the ability to focus on three areas that I really care about and that's, and that are, you know, primary to making sure that we can create healthy systems around food and that's nutrition, sustainability and costs. And so those are our key pillars at journey foods, we provide key data and portfolio management services that offer nutrition, sustainability, and cost information that helps companies optimize and improve their current offerings or spin up new innovations at a much faster pace so that they don't necessarily have to compromise for, you know, a healthier products while, you know, maybe shooting up the price. We want to make sure that we can get more sustainable, more nutrient dense products to people with lower costs. And we didn't first start that way. Right. We sort of started by offering intelligence systems to develop a healthier food item, packaged food item. So we were just focused on nutrition. And then we had to think about, you know, what are some of the key factors at play for developing these products? And more customers are asking about it. You know, what about the water use of these products? What about the greenhouse caste missions? And so we started including more nutrition or sorry, sustainability data, and I'm working with more partners to provide that data directly. We have sort of a marketplace of apps that you can dive into so that you can use these products and dive into the sustainability information without just using our data. And that's, what's also valuable for what we've built. And then finally, over the past year and a half, we've been adding more and more costs and supply chain data. So that when you look at, let's say, you know, a frozen pizza or a bag of chips, like how can, how can we turn a Doritos into something that provides less dioxins, you know, like less than four to five or less unnatural food dyes, for example, and maybe give you a little bit more protein at the same cost. So those are, those are supply chain indicators that we look through with our, with our customers and our customers now range from, you know, pre-revenue to, you know, a hundred billion dollars in department sales. And so we're really happy that we can help teams be up these processes. So who, who is the customer and what is their size? Cause sometimes I think about smaller companies, smaller farms that are like the people who need this data the most, but may not necessarily even know that it exists or know where to start. Yeah. I mean, we don't really work with farms. They kind of provide data to us in ways, like, especially if they have ingredients that are packaged, you know, such as powders or fresh items, okay. Our customers are packaged foods companies. So, you know, I, I make ramen noodles. I have, I'm a chip company, I'm a juice company. I'm a frozen food company that big 70% that I mentioned at the beginning of this chat, basically middle of the aisle, you know, the grocery store has 70 skews, Amina, 40,000 fuse. And more than 30,000 of them are the ones that we work on at a grocery store. So these are all packaged food companies like the Pepsi's of the world. And we closely think about like the proprietary nature of this as well. And so our biggest companies were sort of building out custom experiences for them, white label experiences in our smallest companies, we are really focused on how they can get a competitive advantage and sort of structural advantage early on. Very cool. Well, thank you so much. Rianna Lynn for chatting with me today, I have to say that I did not understand how the supply chain works and I now have a better understanding and maybe the tools to go and explore more this, this space. I appreciate you talking to me today. Yeah, absolutely. There's always so much to talk about when it comes to supply chains and I'm really, really grateful for the time and the questions and we'll be in touch. Thank you so much. We've been chatting with Rihanna Lynn, she's the CEO of journey foods, a SAS company that supports product management and intelligence services for food businesses. This has been another episode of Hanselminutes and we'll see you again next week. "
"31","2015-03-09","2023-03-24","https://blog.acthompson.net/2015/03/interesting-links-9-march-2015.html","Last week was SIGCSE in Kansas City. From all reports it was a great conference. I wasn’t there but I followed as close as I could via Twitter. The twitter stream was active with lots of links, pictures and interesting comments. I’ll get to read the papers at some point but I wish I had been there. In any case I did collect some good links from SIGCSE to share this week. And a few from other places. Hope you find some useful. First a could of blog posts by Lisa Kaczmarczyk (twitter @lisakaczmarczyk ) on her Interdisciplinary Computing Blog: SIGCSE2015 Comings & Goings in New Directions Mind Stretching at ACM SIGCAS (Computers & Society) And then there are some summary blog posts at the Blog@CACM ""Pre-symposium events included....Computing for the Social Good"" SIGCSE Day 1 is in the Books SIGCSE Day 2 Highlights And That’s a Wrap - SIGCSE 2015 Ends Mark Weiss was one of the keynotes and I really wish I could have heard that one. One thing he proposes is that you can teach all these topics (image below) in Excel! For example did you know that VLOOKUP in Excel uses a binary search? I didn’t but I guess I should have. A new (to me anyway) thing I saw a lot of tweets about was Pencil Code (https://pencilcode.net/) which is a tool for converting between blocks and text based code. I need to look into that one some more. I did add it to my Programming With Blocks post. Recently I wrote a post for the CSTA blog about the CSTA Equity Committee which I currently chair. If you’ve wondered about CSTA Board committees this will be interesting. I updated my computer science education blog roll (http://blog.acthompson.net/2012/11/computer-science-education-blog-roll.html …) to include Leigh Ann Sudol-Delyser‘s new blog at http://csadvocate.org/blog/ I am so happy to see Leigh Ann blogging again. She recently completed her PhD from Carnegie Mellon which I hope gives her more time to blog again. Found an interesting post at Willa's World: The Six Most Common Species Of Code Mark Guzdial summarizes some of the AP CS 2014 Results as analyzed by Barbara Ericson: Big jumps in participation! Demographics still poor Speaking of Excel I found this interesting post Excel Fun—Build 3D graphics from a spreadsheet on the Microsoft Office Blog. Lastly don’t forget this summer’s Annual CSTA Conference."
"32","2015-03-10","2023-03-24","https://blog.acthompson.net/2015/03/youthspark-challenge-for-change.html","Microsoft runs all sorts of competitions. Recently I read about the YouthSpark Challenge for Change. Since it is no open to 13 to 17 year olds (aka high school students) I thought I would post information about it here. Calling all students and young adults! Are you active in your local community or concerned about national issues? Microsoft’s third annual YouthSpark Challenge for Change is inviting youth aged 13-25 around the world to share their ideas for sparking change in their communities, schools, college campuses, or the world. Microsoft YouthSpark is part of Microsoft’s commitment to create education, employment and entrepreneurship opportunities for young people around the world. What could I win? Microsoft is awarding exciting prizes to help you do more good. And, this year, the Challenge has been extended to 13 to 17 year olds! 15 finalists from each age group (13-17 and 18-25) will win a Surface Pro 3 with Office 365*. 5 grand prize winners from each age group will win: An amazing leadership-development trip to Nicaragua to learn about creating change $2,500 cash to help turn their ideas into a reality A Windows Phone* The opportunity to serve as a YouthSpark Advocate. I found this thanks to a blog post by Aimee Sprung on the Microsoft New England blog - Calling young people with ideas for change — win support to make them a reality More information is available following the links. I have no connection to the competition."
"33","2015-03-11","2023-03-24","https://blog.acthompson.net/2015/03/how-to-teach-computer-science-to-5-14yr.html","Join CSTA K-8 task force for #CSK8 chat on Mar 11 8pm EST. Pedagogy- ‘How to teach’ Computer Science to 5-14yr olds. Not the What or Why. Discuss pair programming, blended learning, structured vs unstructured approaches, online curriculum, differentiation and more. This is the latest in a series of twitter chats that take place every other Wednesday on Twitter. These usually have a lot of good conversation."
"34","2015-03-12","2023-03-24","https://blog.acthompson.net/2015/03/simplify-simplify-simplify.html","One of the things beginners do when learning how to program is to make things more complicated then they need to be. It’s a natural thing because they often don’t know the shortcuts. They may not know enough library routines or even enough language features. So they build complicated ways around what they don’t know using what they do know. It’s that old story of when you only have a hammer all your problems look like nails. Everyone once in a while my students are the ones with the shortcut and I’m the one who over complicates things. That happened to me with a recent project. I assigned my students the project I blogged about in Simulations Are More Fun recently. As is my practice I coded up a sample solution myself. I liked my solution. It was cool. My students took an easier path though. I over thought the problem. The problem includes the detail “If the biggest number rolled is five or six, player 2 wins” so my first thought was to determine the biggest number and then check it’s value. I got even more clever by creating a function that took two numbers and returned the value of the larger. It worked wonderfully but it added additional complexity without adding real additional value. My students just checked the two values with an OR expression. Sort of like this:    1: if (die1 >= 5 || die2 >= 5)    2:     player2++;    3: else    4:     player1++; Nice and simple with no extra method call overhead.It’s actually sort of elegant. My problem, if I can call it that, is that I tend to think of solutions that scale. I’ve spent a lot of time in my career dealing with big problems and big data. This colors how I look at some problems. This problem is simple with a very small data set and this simple if works great in this case. If I had to compare a value to the highest value in an array this simple solution could be limiting. It would get complicated very quickly. Having a method that found and returned the highest value in an array (something we talked about in class when introducing arrays) would make things easier. Or at least simpler in the if statement. This is something I will talk about in the future as I try and continue to work scalable solutions and how to design for scalability. But we’ll also have to keep an eye out for simple solutions as well."
"35","2015-03-13","2023-03-24","https://blog.acthompson.net/2015/03/is-bbcs-micro-bot-silver-bullet.html","It’s been all over social media and online news the last couple of days - BBC to give out one million 'Micro Bit' computers to get kids coding. I’m a little skeptical. I’ve heard things like this before. (and blogged about it - most recently at Still More Hardware for Learning Software–But Why?) This one seems a little different. For one thing there are a lot of different partners involved. This article at the BBC web site (BBC launches flagship Make it Digital initiative) goes into some more detail and explains some of the other things going on. It is more than just a “give every 11 year old in the UK a piece of hardware.” From a couple of personal sources I have learned that TouchDevelop, one of my favorite tools, is going to be an important part of the software for this initiative. I knew that there were already ties to Arduino in TouchDevelop (TouchDevelop Generates Arduino Code) so this does seem like a natural next step for them. And my female students seem to like TouchDevelop. I’m told that using the new ‘Micro Bot’ to make wearable technology will be easy and will interest girls. That would be nice if it works out that way. The device and related software are still being developed though so we’re going a lot on hope and theory. On one hand I want to be optimistic about this. When I first saw this I asked on Facebook how many of these devices would get used and how many would collect dust. Reactions from friends ranged from “1 in 10 but that may be optimistic” to “does it matter as long as some get used?” I think it does matter. Big highly publicized failures make it harder to get the next innovation into schools. So I’d like something like this to have some success. There is some teacher training attached though I’m not clear on what is for teachers and one is part of the larger program and may not be part of the schools. Teachers are going to need some training in this stuff. And not just how to use it in the abstract but how to use it in the context of their schools. Cross curricula efforts would be ideal. But there are other concerns. They are saying there will be a million of the devices and no more after that. My first question is why? But more concerning is that of ongoing support. And what about the next year’s Year Seven students? There is also the issue of what do these students do next? What will there be for them in Year Eight? I know that the UK is working hard of getting more CS in the curriculum but is that in place? Is there a natural flow from year to year? Or do they expect that after one miracle year thousands if not hundreds of thousands of kids will become computer science autodidacts? That seems unlikely. It also seems unlikely that these devices will keep kids going for years until they get to the next real CS course. So while I see things to love about this, in fact I’d like one myself to work with, there is a lot to be concerned about. We’ll have to see what happens I guess. What do you think?"
"36","2015-03-14","2023-03-24","https://blog.acthompson.net/2015/03/choose-to-code-with-touchdevelop.html","Looks like a good chance to earn some money for school projects and introduce students to programming. Open to US public schools only unfortunately. More information from the Choose to Code website. Teach your students to code in just one hour. Earn $500 in classroom funding from DonorsChoose.org! The first 200 teachers to complete Choose to Code will receive $500 in classroom funding from Donorschoose.org. Here's how the program works: Sign up for Choose to Code. Create your Choose to Code class and add your students. Work with your students to complete the eight Microsoft TouchDevelop coding courses.It only takes an hour to complete all eight courses at one time or you can do each course separately, it’s up to you. Submit proof of the completed courses & your signed Microsoft Gifting Letter* and receive a $500 gift code to use at DonorsChoose.org."
"37","2015-03-16","2023-03-24","https://blog.acthompson.net/2015/03/interesting-links-16-march-2015.html","Last week I was not at SXSWedu. There were not as many tweets about it in my stream as there were from SIGCSE. I still want to go some day though. With progress reports due last week I had more than enough to keep me busy though. I’m sure the same it true for most people. Just a few links this week and two of them to my own posts. I tend not to post on the weekend or late on Friday because those posts tend not to get read. But I was out of control. The first was about the new (not yet real) BBC Micro Bot. I just had to write about what I was thinking so I did at Is the BBC’s ‘Micro Bot’ the Silver Bullet. The second was about a fundraising teaching CS opportunity for US public schools at Choose to Code With TouchDevelop. Garth Flint wrote about The value of guest speakers in CS. He’s been having a couple of them come in and talk to his students. Seems like it is working well. I had no idea there were languages for programming music until I saw this List of Programming Languages For Music: Did you know about these? How long do you spend teaching variables? I just spent three weeks. This is an interesting post from Dawn DuPriest @DuPriestMath who is self described as a “Middle School computer science / math teacher and proud geek.” Will an 'Hour of Code' Change Schools? is a good commentary but Audrey Watters. @Audreywatters"
"38","2015-03-17","2023-03-24","https://blog.acthompson.net/2015/03/2015-csta-administrator-impact-award.html","Dear CSTA Community, Nominations are currently open for the 2015 CSTA Administrator Impact Award! This prestigious award is given by CSTA to recognize an administrator who has made an outstanding contribution to K-12 computer science education. The winner will be presented with the Administrator Impact Award during the CSTA 2015 Annual Conference, July 12-14 in Grapevine, Texas. The winner and the nominating teacher will receive registration, travel, and accommodations for the CSTA 2015 conference. The award winner will also be featured in an article in the CSTA Voice and recognized on the CSTA website and Advocate blog. Award applications open today, Monday, March 16 and will close on Sunday, April 5 at 11:59 pm Pacific Time. Teachers are asked to nominate an administrator they believe has demonstrated significant impact on computer science education in their school, district, or state. The award winner's work must be shown to have broad impact and influence, and to demonstrate leadership in a variety of ways, including innovative approaches, mentoring of teachers, and visionary thinking. Submit your nomination now! For questions regarding the Administrator Impact Award, please contact customerservice@csta-hq.org."
"39","2015-03-18","2023-03-24","https://blog.acthompson.net/2015/03/do-you-want-to-write-some-code.html","OK I feel better. I was overcome with an urge to write some code. Now I have a program I should write. I want to combine my seating chart program (with pictures) with the program I use to randomly pick on students. I mean randomly pick who to call on. Whoops. But I don't have the time to work on that right now. So I wanted a ""toy program."" I remembered that I had been playing with a simple Caesar cipher program (who else remembers ROT-13?) What I have long been meaning to do was to write a program that took a string and rotated it though all 25 possible rotations (26 puts it back the way it was) and build a list so that if you suspected a Caesar substitution you could test it to see how it was rotated. Fine. So I took the code for rotating in the encoding program and made it a simple little string function. Added a loop to pass a string to the function with different values to rotate and put the result in a listbox. By reusing code I was done in about 10 minutes. And I have a toy program I will probably use once every couple of years and could probably find a web app that does the same thing in about the same time it took to write the code. But oh so much more satisfying. Who knows - I might assign it as a programming assignment someday as well. BTW Mike Zamansky has a closely related (and probably more useful post) on his blog Rot13 - Gateway Drugs Techniques"
"40","2015-03-20","2023-03-24","https://blog.acthompson.net/2015/03/interview-questions-for-computer.html","As I looked into why several posts from a while back were getting so many page views lately I realized that search values similar to “interview questions for computer science teachers” were probably responsible. The two pages in question are two where I interviewed CS educators about themselves and their work. That is probably not what most of these searchers were looking for though. Since it has been a while since I interviewed for a computer science teacher position (as either hiring manager or job hunter) I went to social media looking for examples of good questions for job interviews. People were very helpful. I quickly received dozens of questions. I’ve got the whole list below but I wanted to focus a bit on a few I felt were key. Oh and if you feel a question is missing or have thoughts on any in the list I would to read about it in the comments. A couple relate to teaching in general. Do you like kids? You’d better if you want to do a good job teaching. Kids know if you don’t like them and they will not respect you if you don’t like them. Are you ready / willing to share your ""war stories"" with the class, to help humanize the subject? This is important to me. I think teachers should make teaching personal and that means sharing your own history. What strategies would you use to help struggling students? Everyone learns differently and the great teachers are not the ones who help the students who get it easily but the ones who help the struggling students. I walk into your class..describe to me what's going on and why. Are they going to fit in with your school? Are they ok with a noisy class? That’s my favorite. Or do they favor the sit and get method of teaching? What approaches will you bring to the classroom to make this subject matter worth learning? Relevance may be an overused work in some circles but it is still important. Some are more Computer Science related. Well at least somewhat. What strategies would you use to attract and retain women and minorities in your program? If they don’t know this is an issue and haven’t thought about strategies for it they may not be ready. Why are you passionate about CS? I think passion is huge. And it can’t easily be faked. Why teaching instead of industry? Do I need to say more? Explain the role of ethics within your CS program. With the massive changes that computing is making on society today having ethics being someone a teacher thinks about and addresses is important to me. Here is the full (mostly unedited) list I received from a number of helpful teachers. It’s in no particular order. What strategies would you use to attract and retain women and minorities in your program? Experience in CS what projects you have done in college why are you passionate about CS Teaching and tutoring experience at which levels. What's your vision for the CS program here, what part do you want to play what resources do you need, which classes should we teach. Why teaching instead of industry? How would you explain what a ZIP file is? What are the common misconceptions about nested for loops? What have you learned from a student? Pick a language and tell me why it's the best language for our students. Now tell me the challenges of using that specific language with these students, and how you would overcome them. Students at this school need some help with <concept/skill>. Tell me how you would use your CS class to help them. I walk into your class..describe to me what's going on and why. How have/would you balance individual, pair and group assignments?, How does this impact assessment of your students' progress? Explain the role of ethics within your CS program. What strategies would you use to help struggling students? How would you keep the students off Facebook and games during class? One area is attitude and skills Do they like kids? How would you connect your curriculum to real world problems and core curriculum ? In what ways can your program increase students overall problem solving and critical thinking skills? Can they relate to age group of the students Can they communicate? Do they like to learn? Are they excited about learning? Are they still actively learning? Are they disciplined? With themselves and in the classroom. Can they mange their time? Not only can they teach but do they like to teach? Do they have high expectations? Do they know the tools (Windows, MacOS , IOS, Android) Can they program? Do they know the software? Can they handle large classes Is there 1-on-1 coaching Can they make a lecture interesting? Are they flexible in classroom environment Are there self-paced classes and can they work with that? What approaches will you bring to the classroom to make this subject matter worth learning? Why is Grace Hopper worth knowing about? What do you do when you've got a kid who, despite repeated attempts, just doesn't get it? What was your favorite part in the movie ""The Imitation Game""? Are you ready / willing to share your ""war stories"" with the class, to help humanize the subject? In your opinion, how does CS apply to everyone's every day lives? What does ""rigorous computer science curriculum"" mean to you? How would you implement a rigorous computer science curriculum while ensuring that students who have no prior computing experience can have a class that is both rigorous and accessible? What are the most important topics to teach the beginning computer science student and why?"
"41","2015-03-23","2023-03-24","https://blog.acthompson.net/2015/03/interesting-links-23-march-2015.html","Some great links this week. Images to use in class, a video for a TV show (yes about girls computing), and lots more. One of my best collections in recent weeks if I do say so myself. Program Computers, Not Kids is a great post by Vicki Davis aka @coolcatteacher Key line? If you see technology controlling students, then you’ve got a classroom using 21st century technology for 20th century teaching. If you see students creating and programming the technology, then you’ve got a more modern classroom approach. XNA is no more but as the phoenix rises from the ashes MonoGame, may be the replacement. the next generation . Check it out for multi-platform game creation. And a way to continue to use any XNA curriculum you may have. iD Tech and http://Code.org are giving 100 Girls Scholarships to Attend Summer STEM Program See the web site for more information http://www.iDTech.com/girls Zoomable map of undersea cables connecting the world of the Internet. Great as a topic of discussion. Ask students why Bermuda has so many connections. I suspect it is because of money. Bermuda is a world-wide center of international reinsurance. Late last week I posted a large collection of questions to use while interviewing candidates for Computer Science teaching jobs. Are you using Scratch? You may find these printable graphics of Scratch commands useful. The TV show Road Trip Nation is looking for a couple of people between 18 and 30. Roadtrip Nation and Microsoft are teaming up to send 3 young people with backgrounds that are underrepresented in the technology industry and who are interested in computer science on a cross-country adventure to discover the exciting--and growing --possibilities in the industry. Selected individuals will travel in Roadtrip Nation’s Green RV, and will interview professionals all over the country who have turned their passion for computer science into fulfilling careers. The experience will be filmed and will appear on Roadtrip Nation's long-running documentary series, which follows young people all over the world as they seek to figure out their futures. More information at Roadtrip Nation: Code Trip Application Early wearable computer: Qing Dynasty abacus ring. You know it’s cool!"
"42","2015-03-24","2023-03-24","https://blog.acthompson.net/2015/03/madeup-programming-language-for-making.html","One of the things I have been wondering about is how to make a real connection between 3D printing and learning computer science. Sure most 3D printers are attached to computers and CAD software is used to create models for printing. That is not quite computer science to me. And it sure isn’t programming. Recently I learned about a project to create a language to program 3D models for printing. It looks interesting even though it is still under development. Chris Johnson at the University of Wisconsin, Eau Claire is working on it and it is called Madeup. Madeup is a Logo-like language that can be used to “walk paths through 3D space, and then generate models based on those paths. Previews of the models are rendered on every keystroke in a WebGL canvas.” Chris has a KickStarter (https://www.kickstarter.com/projects/1975355456/madeup-a-programming-language-for-3-d-models) to raise some funds to allow him more time to finish the project up so that it can be used in classrooms. I’ve contributed a small amount so that I can get an early copy for my own use. I think the 3D renderings alone will make things more interesting than 2D graphics but being able to create a physical representation is really exciting to me. Take a look at the video on the KickStarter and let me know what you think. Does this look useful to you?"
"43","2015-03-25","2023-03-24","https://blog.acthompson.net/2015/03/fizzbuzz-revisited.html","I first blogged about using FizzBuzz in the classroom four years ago when I didn’t have a classroom and students of my own to use it with. (FizzBuzz–A Programming Question) Well times have changed and today I did assign the project to a room full of students. Briefly stated the exercise is: Write a program that prints the numbers from 1 to 100. But for multiples of three print “Fizz” instead of the number and for the multiples of five print “Buzz”. For numbers which are multiples of both three and five print “FizzBuzz”. Most of my students finished it easily during the shortened period we had today. A few in a very short period of time which is great. I should say that these are not yet experienced programmers. We are not even half way though a one semester course. Though we have covered loops and decision structures. So they know the concepts but haven’t had a lot of practice by any means. So I’m pleased with the results. What pleases me the most is that the solutions are not identical. There are at least three different ways students set up the if statements to determine what to show when. Check for evenly divisible by both 3 and 5 first. Check for evenly divisible by 15 first Check for divisible by 3 but not 5 first and 5 but not 3 second. They all work of course. The last one, while more complicated, demonstrates a good grasp of compound comparisons. That is sort of a plus. In my project instructions I asked students to display the results in a listbox. We’re not doing command line programs and haven’t covered file usage yet. We have used listsboxes though. A number of students wrote code that always adds the number to the listbox but then removes it if it is not necessary. Again a bit more complicated and probably slower than other solutions but interesting since I did not teach them how to use the Remove method for listboxes. Clearly someone (or several people) is looking things up. That also makes me happy. I like students to go beyond what is covered in lectures. Plus this is an implementation that for some reason never occurred to me. Who know but that may turn out to be helpful to me some day. I learned something knew and I love learning new things from my students. Tomorrow we’ll talk about the various solutions and I will have the students explain why they choose the methods they did. Hopefully we can have some discussion about the performance aspects as well. Should be fun. EDIT: I went looking for an image to post with this article and found one that suggested a visualization of FizzBuzz. I may assign this one next time. Divisible by 3 is blue, divisible by 5 is red, and divisible by both 3 and 5 is green."
"44","2015-03-27","2023-03-24","https://blog.acthompson.net/2015/03/morse-code-project.html","Project ideas come from all sorts of places. Textbooks, other teachers I work with, blogs, random conversations, conferences (do you know about Nifty Assignments from SIGCSE?) and more. Some of the best come from students. Not always intentionally though. The other day I caught a student playing around on a website while I was lecturing. Apparently I wasn’t doing enough to hold his interest. The website converted letters to Morse Code and back again. There are probably many of these sites on the Internet. My first reaction was that this makes a good programming project. (Does that make me weird?) So we started talking about it as a class. Student’s first reaction was “that’s hard” and “I don’t know Morse Code.” But of course it’s not really that hard to implement if you know how to use arrays. The tedious part is building an array to use for conversion.             Morse[0] = "".-"";             Morse[1] = ""-..."";             Morse[2] = ""-.-."";             Morse[3] = ""-..""; I've decided to do that for my students. After all I want them to use the array not go crazy trying to build one. Converting from ASCII letters to Morse Code using a string array like this is a simple and fast operation. Big O(1) for access. We’ve already done some work like this writing a program to count the number of times various letters occur in a string. Going the other way, from code to ASCII is a little harder. In that case we have to do a search of some kind though the array. A simple sequential search is probably the easiest way to do things. I know there are other ways. We could create a hash which would probably be faster. Or a nice binary tree (see this method – Thanks to Rebecca Dovi for the link). These methods would be more complicated though and this is a first programming class. So we’ll talk about other ways to do it and maybe in the AP Class they’ll implement something faster and/or more complicated. We will have a good chance to talk about the various performance issues and the various ways that arrays can be searched. I’m looking forward to the discussion."
"45","2015-03-30","2023-03-24","https://blog.acthompson.net/2015/03/interesting-links-30-march-2015.html","March is almost over and the snow in my backyard is measured in inches not feet. So spring appears to be coming albeit a bit late. The school year is progressing and a lot of my friends in the south spent last week on spring break. We’ll have a break the end of April up here in the northeastern US. I can wait. But for now you are here for interesting links. We’ll start with a couple of posts by Dawn DuPriest. Dawn has written up some of the things she has been doing with her students. These are great for people looking for lessons and materials (I am totally adapting her worksheet on Booleans to use with my students). These are excatly the sort of blog posts I wish more people would do. There is so much we can learn from each other. Booleans and Conditionals Prisoner's Dilemma and Conditionals Did you know that World Backup Day is March 31st. Take the pledge! http://worldbackupday.com/pledge If nothing else talk to your students about backup and backup your own files! Who knows what will happen April First! Small Basic 1.1 is here! You’ll have to be running a Windows OS more current than Windows XP to use it. The big advantage is that the API to Flickr works again. Apparently Flickr changed things and Small Basic had to adapt. Also they moved to a newer version of .NET which should allow more good stuff going forward. This week I learned about and added Tickle on Twitter at @tickleapp to my list of block programming languages For use programming drones and @Sphero robots. Speaking of programming languages did you see the Kickstarter build a programming language for generating printable 3-D models: https://www.kickstarter.com/projects/1975355456/madeup-a-programming-language-for-3-d-models I also found out about BeetleBlocks by @ericrosenbizzle , a blocks based generative art environment for 3D printing. Maybe 3D printing is a coming thing? Top 10 Differences Between High School Sports and Robotics – I love this set of observations from a parent at a FIRST Robotics event. Why A New Jersey School District Decided Giving Laptops To Students Is A Terrible Idea – a very sad tale of lack of planning and professional development."
"46","2015-03-31","2023-03-24","https://blog.acthompson.net/2015/03/every-character-matters.html","My Explorations in Computer Science class is creating web pages this week. This is a fairly short unit and we don’t get very deep at all. Our hope is to give students an idea of what is behind the web pages students use every day and introduce the concept of a markup language. This is brand new to most students but they seem to be enjoying themselves. Except when something goes wrong. In HTML it doesn’t take much to make things go horribly wrong either. In fact every little character is a potential problem. One of my favorite questions in this unit is “How do you spell src?” Why? Because in the <img tag the qualifier src is how one specifies where the image file is located. It’s pretty easy to enter “scr” by mistake. And when you do it can be hard to spot it. This is especially the case because there is just too much that can be off by a character in the file specification that one tends to look there first. For example if “Unit 4” has a space between the “t” and the “4” and a student leaves it out the file will not be found. This is the sort of nit picking that students are not used to making. To them “Unit 4” and “Unit4” mean the same thing and they don’t automatically understand that the computer doesn’t see it that way. All of this causes some level of frustration for students. I’m tempted to suggest this teaches “grit” which seems to be a common topic of discussion in some education circles these days. And maybe it does but I worry that it teaches frustration and that “computers are hard” which is the opposite of what I want. So I work hard at showing students how to avoid these problems and how to solve them once they are found. Making it clear that these are common errors and not to be embarrassed by them is also important. Overall though they do need to learn to be explicit and careful when writing any sort of code. The computer, I remind them, is pretty stupid and has trouble understanding things that people handle easily. Every character really does matter to the computer. I think that learning this attention to detail is helpful to students in the long run. They’ll be dealing with computers their whole lives and it is good to set expectations early."
"47","2018-03-05","2023-03-24","https://blog.acthompson.net/2018/03/let-computer-grade-projects.html","It seems like a great idea – have the computer automatically grade student projects. Save all that boring work. Looking at all those projects is a pain. Why not have the computer grade them? It’s what happens in a lot of courses. Harvard’s CS50x online version does it so it must be great. In fact a lot of huge courses in major universities use automatic grading software. What could be wrong about all of that? I confess that its a very tempting idea at times. I’ve played a little with software looking at projects with some simple HTML projects. For rote stuff like making sure all tags are present and that open tags have matching closing tags is pretty straight forward. I still want to open the pages in a web browser to see what they look like. Programming projects? I’m not so sure about automated testing for students. Mike Zamansky blogged recently about a session at SIGCSE (Sigcse2018 - Malloc Lab) where a professor had to deal with students gaming the grading system. This is one of my biggest concerns with automatic grading software. It is easily “game able.” Getting to the destination is only part of the story. It’s pretty important to understand how students get the results they get. We, as educators, only learn so much by seeing the results of a program. We really need to understand how the programs process inputs and generate outputs. When we read student code we learn a lot about our students. We learn what they know and don’t know. We learn how they implement algorithms. We also see what they understand and don’t understand. In fact we also get to know our students better. We learn their coding the way English teachers learn student's writing Students benefit as well. We can give them a lot more feedback than automatic grading routines can give. We can also modify how and what we teach based on what we learn from reading their code. So for now I think I will put up with the extra work. The extra benefits are worth it."
"48","2018-03-06","2023-03-24","https://blog.acthompson.net/2018/03/learning-by-coding.html","Throughout my career I have increased my knowledge by working on projects. As a teacher who teaches mostly beginners I don’t see a lot of complicated code. No I take that back beginners write lots of overly complicated code. What I don’t often see, because I don’t often need, are new language features, library routines, or good new ways of doing things. Now sometimes I have students show me new things. Sometimes they stumble upon them. Sometimes they go on the internet looking for ways to do things. And sometimes they learn them from parents in industry. These are all good things but sometimes I still feel like I am stagnating. That I am not learning enough. Perhaps even falling behind. This last week was school vacation. That means time to think ahead and to look at things differently. I did a bunch of reading. Mostly I read papers from SIGCSE. Yes, I pay money for the privilege but its worth it to me. I also wrote some code. I’ve got to grade Explore Performance Tasks from my AP CS Principles students. Since feedback is important I decided to write a program to help me generate that feedback. What was involved isn’t really that important. In fact I suspect that writing the code isn’t going to save me as much time as it took to write the program. What is important, to me at least, was that I explored some new things. A new Windows Forms object (CheckedListBox for the curious) for one thing. I also got in some practice with ForEach. That’s not new to me of course but I did think about it in some new (to me) ways. It probably doesn’t seem like a big deal. It’s not going to get me a raise or a new job or even add something new to what I teach in my current classes. On the other hand it is the sort of thing that helps keep programming fresh, interesting, and fun for me. It may turn out that some student will come to me with a problem that needs just the sort of things I played with last week. That would be great. But even if not, continuous learning is a good thing."
"49","2018-03-15","2023-03-24","https://blog.acthompson.net/2018/03/acm-and-csta-announce-2017-2018-cutler.html","Some cool projects which you can read about here. For more information about ACM/CSTA Cutler-Bell Prize in High School Computing, visit http://www.csteachers.org/CutlerBell or http://awards.acm.org/cutler-bell/. ACM and the Computer Science Teachers Association (CSTA) have announced the winners of the 2017-2018 Cutler-Bell Prize in High School Computing. Five high school students were selected from among a pool of graduating high school seniors throughout the US who applied for the award by submitting a project or artifact that engages modern technology and computer science. A panel of judges selected the recipients based on the ingenuity, complexity, relevancy and originality of their projects. The Cutler-Bell Prize promotes the field of computer science and empowers students to pursue computing challenges beyond the traditional classroom environment. In 2015, David Cutler and Gordon Bell established the award. Cutler is a software engineer, designer, and developer of several operating systems at Digital Equipment Corporation. Bell, an electrical engineer, is researcher emeritus at Microsoft Research. The winners are Sreya Guha, Castilleja School, Palo Alto, California; Amir Helmy, Eastside High School, Gainesville, Florida; Amy Jin, The Harker School, San Jose, California; and Benjamin Spector and Michael Truell, Horace Mann School, Bronx, New York. The winning projects illustrate the diverse applications being developed by the next generation of computer scientists. More at https://www.acm.org/media-center/2018/march/cutler-bell-prize-2017"
"50","2018-03-16","2023-03-24","https://blog.acthompson.net/2018/03/impressive-high-school-computer-science.html","ACM and the Computer Science Teachers Association (CSTA) announced the winners of the 2017-2018 Cutler-Bell Prize in High School Computing recently. Five students from four schools were given this award this year. One of the students was from a public school. The rest from independent schools. The public school has magnet programs but I don't know if the winner is part of those programs. What does that mean? My best guess is that independent schools allow more flexibility for projects like this. Not just independent schools of course, schools like the Bergen County Academies and schools like Thomas Jefferson in Virginia clearly have a lot of flexibility, extra resources, and are open to encourage things like this. TJ had an awardee in both of the first two years of the award for example. But they are exceptional schools in more ways than one. They are not your typical public school. Looking back on the first three years of awards almost all of the awardees have been from either independent schools or public magnet schools. It’s not just computer science though. Take a look at the schools who have had the most awardees in the Westinghouse-Siemens research competition. You'll see some familiar school names there. Most of them magnet schools. My friend Mike Zamansky (blog Twitter) ways these awards say more about the students than the schools. I’m sure that is the case to some extent. But why so many of these students from magnet or independent schools? I think environment is important. If it were all about the student we would not see these clusters of schools that produce an outsized number of awardees. I don’t know if the motivated students choose these school or the schools themselves develop this motivation. What I do think is that these schools have the flexibility to enable and support these students. They also have a history of producing “winners” and a culture that sets high expectations but also provides help for students to meet those expectations. Sure students from “regular” comprehensive high schools can and do earn these awards. That is not the way to bet though. The question in my mind is how to we add the flexibility and support to more students at more schools?"
"51","2018-03-19","2023-03-24","https://blog.acthompson.net/2018/03/advanced-placement-computer-science-is.html","Two controversial assertions in that title. That APCS is necessary and that it is evil. I thought about leaving this post at that and seeing what sort of conversation started but that didn’t work on Facebook so I figured it would not work here either. To start things off I should say that I am not a fan of the AP CS program. It’s too limiting. It is too tied to an end of the year test for me. The AP CS Principles course has more freedom than the AP CS A course does but still depends on an end of year test (and two performance tasks). Those performance tasks take up a lot of class time. I really like project based learning and I would love to have more time for larger projects. APCS courses suck the air out of the environment for other, more interesting to me, long term (year long) courses. I think there are better ways to prepare students for later CS education and careers. That’s the evil part. On the other hand, the Advanced Placement brand carries a lot of weight with school administrators, school boards, parents, and other interested parties. It’s often an easy sale to these people as an argument for a new CS course. If we want to see “CS for All” APCS can be very helpful. But is is still necessary? We have some well accepted starter courses in high school CS. Exploring Computer Science for one. Code.Org’s CS Discoveries is gaining some fans as well. They’re both good starters. In some ways I think they may ultimately lead to more high school Computer Science than AP CS will. But we’ll always want an advanced course to be the capstone of sorts. Should AP CS be that course(s) or should we have something more open-ended and less constrained by an exam? What would you like to see at the top of the high school CS curriculum? Is AP CS the right answer? Is it a necessary course?"
"52","2019-12-27","2023-03-24","https://blog.acthompson.net/2019/12/looking-back-on-computer-science.html","Christmas break for me until 6 January 2020 and with Christmas over I have some time to think. 2019 was an intere3sting year in CS education. States continue to adopt more CS in K12. Teachers are still in short supply but so to are schools looking to hire them. Schools or perhaps school administrations and school boards, are slow to roll out more CS education. It looks like more schools are offering it which is great. But they are net requiring it so while they meet to checklist of offering CS it is still not for everyone. It’s going to take a while. AP CS Principles continues to grow in enrollment. I try to get excited about that but it’s hard. AP courses attract too small a subset of the over all population. While there is much to like about AP CS Principles I can’t help but believe we need some more interesting CS courses. Something with depth and an interesting and motivating outcome. The Create task is not that. Every year I think that the Internet of Things will take off in CS education. The mix of bytes and atoms seems like a natural to me. That didn’t happen in 2019. Perhaps because there is no one promoting it. I plan on retiring from the classroom in the spring. Maybe after that I will have to time to really dig into it. Who knows, maybe I’ll come up with some good project ideas. Cloud computing grew a bit in interest in 2019. Amazon Web Services has done some great work on this. Uptake has been slow but at some point it may take off. The problem with cloud computing, and perhaps IoT, is fitting it into the curriculum. It doesn’t fit easily in either AP CS course and too many teachers are working and teaching too many preps to adopt major new topics. Artificial Intelligence took a jump in interest that surprised me a bit. There was a huge birds of a feature on the topic at last summer’s CSTA conference. AI for K12 has its own website, mailing list, and lots of people interested. See AI4K12.org for more on that. What sort of Artificial Intelligence can you teach in K-12? Mostly how it is used, how to use existing AI tool and machine learning training systems. Developing real AI takes a lot of math that not many K-12 students have yet. Still, it is very important that students learn this much. The need to know what AI/ML is, how it is used, and discuss the ethnical considerations involved. As always,the new year is full of potential. K12 CS is on a growing path that seems to have some momentum behind it. I can’t wait to see what it brings."
"53","2022-12-04","2023-03-24","https://blog.acthompson.net/2022/12/when-computers-write-code.html","For most of my career I hive been hearing that some day computers will write all the code and human programmers will no longer be needed. Or at least, not as needed as today. Are we getting close to that time – finally? And if we are what does it mean for teaching computer science? Recently, the CS education world has been discussing GitHub Copilot. GitHub Copilot uses the OpenAI Codex to suggest code and entire functions in real-time, right from your editor. While some of the discussion has been about the suit against Copilot (GitHub Copilot litigation) much of the discussion has centered around what it means as a tool for cheating by students. More recently there has been some visibility to the use of ChatGPT to write answers to programming questions. For example, this year’s Advent of Code seems to have been “invaded” by ChatGPT climbing the leaderboard by answering the problems is seconds. (Adventures With ChatGPT: Advent of Code Edition | Tabs, Not Spaces) Of, perhaps, even more concern to teachers, ChatGPT seems to be somewhat satisfying as a solution to Advanced Placement Computer Science A questions. (ChatGPT passes the 2022 APCSA free response section) I’d be very surprised if students are not already using these tools. This brings up several questions. One is - how do teachers keep this from happening? We probably can’t. So how do we detect when it does happen? Do we use these tools ourselves to see what sort of code is generated for our assignments? Seems like yet more work for people who don’t have enough time as it is. Another question, which students are sure to ask, is what is the purpose of students writing code that artificial intelligence can write easier and faster? If you read the article above about putting the APCS A questions through ChatGPT you’ll see that the results are not prefect. So for the time being it looks like good programmers can still write better code than the AI. How long that will last is anyone’s guess. If history is any guide, it will not last long. I remember when optimizing compilers started generating more efficient than the world’s best assembly language programmers could write. It was painful for some and a real boon for others. It didn’t completely do away with the need for assembly language programmers but it did reduce the need. What do we tell students who ask “what’s the point of learning to code?” My thought is that we talk about the need for human oversight of AI generated code. We need to verify that it works as we want it to work and that means we need to understand code. We’re also going to need to fine tune generated code for some time to come. Understanding code will also help write good instructions for the AI that generates code. Again, understanding how code works is important for that. Of course, there is a lot more to computer science than just writing code. Programming languages are the language of that study. Learning assembly language still helps people understand how computers and computing works. So will learning higher level languages. The AIs will get better. Our conversations with students will get harder. Cheating is always going to be a challenge. We live in interesting times."
"54","2022-08-16","2023-03-24","https://blog.acthompson.net/2022/08/artificial-intelligence-and-cs-education.html","It;s seems like artificial intelligence has been “10 years away” for the last 40 years. Back in the mini computer days every computer was custom and configurations were designed by people. I worked for a company that believed that configuring computers was beyond the ability of computer software. From there I went to a different company that was developing rules based artificial intelligence. Using a special language called OPS5 they wrote software that configured computers faster and more accurately than people. Rules based AI was dependent on people to know the rules and properly prognathism. Limitations became apparent. Today we have machine learning which basically means the computer is developing the rules. Rules is probably not the best definition though. We’re starting to see AI grow into many more areas than ever before. Think self driving cars for example. It’s becoming clear that understanding the world today means understanding something about artificial intelligence. What does that mean for K-12 computer science education? The AI3K12 project is working on answering questions about teaching AI in K12. They have a lot of resources now and under development. For now, most of the education is about AI. What it is. How it worse conceptually. What is it being used for. And, perhaps most importantly, what does AI mean for society and the future. The math and science of creating AI platforms s a bit too much for most high school students let alone younger students. That can wait. Although there are tools that exist that students can use for their own projects which is pretty cool. I am very concerned about bias in artificial intelligence (Bias in Artificial Intelligence. Inequality, racism and discrimination is just one article you will find from an internet search for “Bias in artificial intelligence) Systems that do not recognize that people of color are actually people is only one example Bias against women or various other groups of people can be baked into AI systems if developers are not VERY careful. Also, how is AI being used? Facial recognition and privacy have become areas of concern in many areas and applications. These are more than just ethical issues, though ethics has got to be a core part of what we teach, as many other problems are unconscious bias or the result of innocent but false assumptions made by people who mean well but lack understanding of their own environment. Its a reason we need a lot more diversity is AI and CS as a whole. We have to teach students to think about these issues and to think beyond their own identities and beyond “the way we have always done it.” Companies in industry are taking new looks at AI as well. One useful resource is Microsoft's framework for building AI systems responsibly - Microsoft On the Issues. The blog post talks about some issues Microsoft has faced and how they are addressing them. Companies are asking the “should me” question as well as the “can we” question. We need students to think about those questions from the start. The document itself is at Microsoft-Responsible-AI-Standard-v2-General-Requirements-3.pdf and makes interesting reading. It could start some class discussions as well."
"55","2022-07-15","2023-03-24","https://blog.acthompson.net/2022/07/my-day-two-at-csta2022.html","Day two started off great as I connected with several people from my home CSTA Chapter –CSTA New Hampshire. The CS community in New Hampshire is growing and the CSTA Chapter has been a part of that. I’m planning on getting more involved in chapter stuff in the future. My first session of the day was about teaching ethics when teaching artificial intelligence. Jeremy Keeshin (a last minute replacement as I understand it) from CodeHS was the presenter. Seems like some good small group discussions took place. Maybe I was tired but I didn’t get into it very well. My fault. Wasted opportunity. I did get a copy of Jeremy’s book “Read Write Code” which I look forward to reading. Next up for me was a session on preparing the future developers of the metaverse. The presenters were from Carnegie Mellon. First I have heard of XR as a generic term to include Augmented Reality, Virtual Reality, and Modified Reality. We had some really interesting discussion of using virtual worlds in school. One school had a virtual birthday party in Minecraft. Minecraft has moved from pure play to an educational platform. Students are picking different virtual worlds to play in as they age.It occurs to me that younger kids are building things in games like Minecraft and Roblox but older students, especially boys, and moving to games like Call of Duty which are more destructive. Something to think about. My number one to look more into is Arena XR – An Augmented Reality Edge Network Architecture. I really enjoyed this session and had some good interactions and learning with my tablemates. Slides for this session are at CSTA2022 NoStudentLeftBehind.pdf - Google Drive Lunch break and more time in the exhibit hall. I got a close look at the Jacdac devices for use with a Micro:Bit. I may splurge and buy a starter kit. Note that I posted a brief look at Microsoft and other big companies exhibits at Amazon, Google, Meta, and Microsoft at #CSTA2022 First afternoon session was about writing for Hello World magazine. I was proctor and arrived before it started but after most people entered the room. Watching the clock is important as it is so easy to get distracted with so much going on. Anyway, the slides for this talk are available at CSTA_Writing Workshop Presentation.pptx - Google Slides A lot of good stuff here. I hope this gets more teachers to write for the magazine. Next up was a session on cryptography with an exercise in creating a Pringles can Enigma machine. We started the session with an brief introduction to Cyber.org and with an introduction to the Pigpen Cipher. (Note that this is one of the ciphers covered in my (PDF) free Tiny Book of Simple Cryptography) We had some fun creating our mini Enigma machines and working though how they work. We only used one rotor but I brought home some sheets to make a larger one with a larger can when I get home. Overall, a pretty good day. Some very good sessions, some good conversations at the exhibit hall, and many amazing face to face conversations with friends. I am exceedingly glad to be here this year."
"56","2022-07-15","2023-03-24","https://blog.acthompson.net/2022/07/amazon-google-meta-and-microsoft-at.html","I blog about what interests me or stirs my curiosity. One thing that fits that is what are the really big tech companies doing to support CS education. So I am going to write briefly about the presence of Amazon, Google, Meta, and Microsoft (alphabetical order). Anyone else notice that we never see Apple at CSTA? All of these companies have sessions at their booths and as regular conference sessions to talk about what they offer. If you are at CSTA you should at least stop by and see what they have to offer. It’s a lot. Amazon and the Amazon Future Engineer Program Amazon had one of the large end cap booths with a lot of people and materials. Their main emphasis was the Amazon Future Engineers program. This program offers curriculum for all levels of K-12 as well as resources and opportunities for teachers. Amazon Future Engineer is a comprehensive childhood-to-career program aimed at increasing access to computer science education for children and young adults from underserved and underrepresented communities. Google and programs' for CS Teachers Another big booth on an end cap. Lots of color and fun graphics. And swings! Also free messages. The big thing here is Google’s CS First program. This is a great collection of curriculum and supporting resources that can be used during the school day or as an afterschool program Meta and Meta Engineer for a week. You’re probably not surprised that the link for more information on this is at Facebook. Engineer for the Week | Facebook but also at Engineer for the Week (fb.com) The curriculum has a strong “coding for good” component. Started in 2018, Meta's Engineer for the Week is a free program that introduces engineering to learners (ages 11-18) historically underrepresented in STEM. Over the course of 15 - 20 hours, learners work alongside adult facilitators to build tech prototypes that address a social issue of their choice. Microsoft and MakeCode, MakeCode Arcade, and Minecraft Also a nice sized booth on an end cap. Not as fancy as Google’s it gives the impression it was designed by software people not marketing experts. The emphasis was on writing code, especially with micro:bits, using MakeCode, games with MakeCode Arcade, and teaching CS using Minecraft. Lots of things including Micro:bit powered arcade games to touch and explore."
"57","2022-07-14","2023-03-24","https://blog.acthompson.net/2022/07/day-one-csta2022.html","Well it was day one for me. I know that some people got in yesterday or earlier either because they were taking a workshop today or were part of the Chapter Leadership program. For me, today was about getting settled, meeting with old friend (and making some new ones), and the exhibit hall. Wow! has the exhibit hall grown. The conference as well. Apparently there are about 1700 attendees registered. I remember thinking 300 was big some years ago. Looks like about half the attendees are first timers as well. That is amazing and wonderful My trip was good. I checked in for my flight with an app. I paid for the El (Chicago’s mass transit trains) with an app, and checked into my hotel with an app. Travel seems to be all about the apps these days. The exhibit hall was open soon after I arrived at my hotel so I went right in after registration. Proof of vaccination is required to attend and wearing masks is required as well. I’m good with that. I hear a lot of people got COVID at ISTE and these measures make me feel safer. It seemed to work at SIGCSE! I met many old friends while in the exhibit hall and walking around the conference. Catching up was great. We also talked about CS issues of course. So great to have people who share ideas. I couple of people I have not met in person before but who I know from social media visited with me as well. It is so good to put faces with names and be able to get to know each other. If you are at CSTA and are a blog reader or Twitter follower I would love to chat with you. I walked through the exhibit hall several times to get a feel for what themes there are. I’ll be blogging for about that as the conference goes on but I’ll share a few first thoughts here now. Physical computing is big in the exhibit hall. Lots of robots but also many other programable gadgets. Cyber security was represented by several exhibitors as well. We really need to teach more of that in the US so I was glad to see thing. Several artificial intelligence programs were being highlighted in the exhibit hall. I want to dig into that more this conference. Lots of curriculum providers are exhibiting which is not surprise. They’ve all be exhibiting at CSTA for several years. The companies with hardware all have curriculum as well. It’s not like the old days when people dumped some hardware and said “here. Figure out something interesting to do with this.” Progress I think. Google, Microsoft, Meta, and Amazon have booths as well. There is a set of swings in the Google booth (Pictures tomorrow) I’ll write about their programs as well when its not 11PM my body time after getting up at 6AM and travelling all day. Today was everything I wanted my first day at in-person CSTA. Still more friends to meet and make and lots more to learn."
