"Index","PublishDate","VisitDate","Url","Content"
"1","2023-03-18","2023-03-24","https://blog.acthompson.net/2023/03/finding-words-with-all-letters.html","Does anyone else lay in bed in the morning thinking about coding projects or is it just me? I’ve been playing around with a Wordle solver helper for a while now. It helps me find words based on what I know after each guess. One of the things I like to do is see how many possibilities there are based on different hints. Yesterday I had most of the letters but not in the right place. So this morning I was wondering about words that had the same letters but in different orders. Seemed like something I needed to write some code about. A key method is to compare all the letters in one string with the letters in a second string. At least the way I was thinking of handling it. It struck me that that is a great assignment for students. I don’t have any students handy so I asked ChatGPT to write that function. This is the prompt I gave it: Write a C# function that accepts two strings and returns true if all of the letters in the first string are included, in any order, in the second string. Return false if any of the letters in the first string are not included in the second string. That is a lot like what I would assign a student. ChatGPT gave me some very nice code. It wasn’t exactly like what I was writing in my head. It used foreach and ToCharArray which is probably the best and easiest way to do this. I was coding before either of those became common so my mind goes to for and while loops and the string SubString method. This was a good reminder for me. I left the rest of the program, which wasn’t a lot of code, to myself. Once written I had some fun with it. For example, the letters in Alfred also makeups the word flared. The letters in face are also used in café. Some groups of letters do not make up any words of course, This seems like it could be a fun project to give students. It was fun enough for me."
"2","2022-12-19","2023-03-24","https://blog.acthompson.net/2022/12/thoughts-on-optimization-of-code.html","Donald E. Knuth famously said ""Premature optimization is the root of all evil."" The important word there is “premature.” Optimization is not a bad thing. It isn’t always required though. The joke is that a programmer will spend hours coding a solution to a problem that can be solved in minutes manually. Is that a bad thing? It really depends on the circumstances. If one is getting paid by the hour one could easily argue that it is wrong. On the other hand if time is not really the issue and writing the code is fun – why not? There have been times in my career when optimization has been very important. I helped spec a computer for high speed/bandwidth data collection. It was critical that the computer be able to take the data and place it in memory without losing data. We actually analyzed the speed of various machine language instructions for optimization purposes. That’s pretty exceptional of course. I also remember writing a program of my own that took what seemed like a long time to process some data. I thought about trying to optimize it but as often as the program was to run it would not have been a good use of my time. Before I ran it again I got a new computer which made a bigger difference in execution time than I would probably have been able to get though “fixing” the code. Old habits from the days of slower computers stick with me though and I tend to think a lot about code execution. Recently I had ChatGPT write some code for me (Coding with ChatGPT–Armstrong Numbers) I looked at the code very closely since I was trying to come to some conclusions about how good the code was. I noticed that the C# version it gave me was highly dependent on modulus and division which are somewhat time consuming compared to addition and multiplication. The program I write didn’t use any modulus or division but a lot of multiplication and addition. Both used the same number of raising to a power of 3 so it doesn’t play an important role in performance differences. Having some time on my hands, I added some timing code to see if there was a difference. My program turns on to be much faster. Yea me. Of course both execution times are very small fractions of a second. Does it make sense to optimize this code? Probably not in this case. In fact, I would argue that the most understandable code may be a better goal for this project. That is a very subjective goal. Different people might come to honest but different conclusions. Another goal might be scalability – the ease of adapting the program for other Narcissistic numbers. The ChatGPT probably wins there. SO much depends on what we want to optimize: Speed of execution Ease of understanding Ease of enhancement/modification Possible other considerations(?) Getting all three may not always be possible. It’s an interesting question though and one developers do need to ask."
"3","2022-12-17","2023-03-24","https://blog.acthompson.net/2022/12/coding-with-chatgptarmstrong-numbers.html","Trying out ChatGPT seems to be all the rage these days in certain geek circles. I may even be late to the game but I tried a few things over the last couple of days. I started with one of my favorite little projects. Armstrong numbers are a form of narcissistic number which is a number that is the sum of its own digits each raised to the power of the number of digits. I first wrote a program to calculated these as an undergraduate when I wrote programs for it in about a half dozen different languages. I fed in the following prompt using C#, Visual Basic, and Python as the programming language. Write a [programming language] program to calculate three digit numbers were the sum of the cube of each digit equals the original number. The results for C# and VB were the same algorithm written in the specific syntax. The Python code was slightly different. You’ll probably not be surprised that the code ChatGPT showed me is very similar, if not identical, to code examples you can find with Google or Bing. The C#/VB plan depends highly on integer division and the modulus operator to break down the number into its digits. for (int I = 100; I < 1000; I++) { int sum = 0; int temp = I; while (temp > 0) { int digit = temp % 10; sum += digit * digit * digit; temp /= 10; } if (sum == I) { Console.WriteLine(I); } } The Python sample changes the integer into a string and used that to address the individual digits. for num in range(100, 1000): # Convert the number to a string so we can access each digit num_str = str(num) # Initialize a sum to store the sum of the cubes of the digits sum_of_cubes = 0 # Iterate through each digit in the number for digit in num_str: # Convert the digit back to an integer and add the cube of it to the sum sum_of_cubes += int(digit) ** 3 # If the sum of the cubes is equal to the original number, print it if sum_of_cubes == num: print(num) Note that the Python example nicely includes comments. A dead giveaway that a student didn’t write it. All samples come with simple explanations of how the code works. The explanations tend not to be very deep so oral questioning of a student would probably still show if the student understood the code or not. It looks like, for some simple, student exercises can be solved by ChatGPT. It is not much different from doing any other online search for the most part. How worried should teachers be about ChatGPT especially? I’m not sure. Cheating goes on all the time and there is a lot of sample code already out there for many common assignments. It’s going to be a bigger problem for educators who have very large numbers of students who can’t be familiar with the code their students write. Or who can’t ask them questions to make sure they understand what they turn in. I think I would ask ChatGPT to solve some of my assignments before I assign them just so I know what sort of answers I might see. Side note: Neither of the ways ChatGPT suggested is the way I solve this program. There are more than one ways to skin this cat."
"4","2023-01-23","2023-03-24","https://blog.acthompson.net/2023/01/what-jobs-are-safe-from-automation.html","“It's tough to make predictions, especially about the future.” – Yogi Berra That doesn't mean people don't try. Recent advances in Artificial Intelligence have a lot of people predicting what jobs are an are not likely to be replaced by computers. Technology is challenging the ideas about what jobs can and cannot be replaced by technology. Doug Peterson, who shares a lot of interesting articles, recently share this one predicting that leaders will not be replace. It's an optimistic article. 5 Reasons Leaders Shouldn't Worry That Generative A.I. Will Take Their Jobs | Inc.com A lot of jobs we once thought were completely safe are being seen in a new way lately. AIs are creating what looks to many like art for example. This is forcing us to take a hard look at how we define art. Some recent visits to museums had me already asking “what is art?” Today we joke about AI attempts to write short stories, poetry, and other narratives. A lot of our stories in movies an even books are formulaic. How long before AIs can write Hallmark Christmas movies I wonder? What used to be a joke may be a prediction of the future. A lot of people are speculating on the future end of the programmer profession. People have been predicting that would decades but we are closer to that than ever before. Software developers today think they are safe though because they (we) know that end users are terrible about describing what they want a program to do. Will the future bring courses and training on how to talk to AIs? Possibly. I can sure see the need for it. People who are not teachers are suggesting that AIs will take over for human teachers. As someone who spent 15 years teaching I am not so sure about that. I think the human touch will remain important for the future. Teaching is a lot about reading people and establishing relationships. Wil AI be able to do that? I am not sure anyone knows. One area I think people have an advantage over AI is that we are bad with risk analysis. What may seem like a flaw leads people with some luck, some imagination, and some hard work to beat the odds. We see potential needs when a pure look at the data would not see anything. And we are often willing to defy the odds for things we believe in. I am not sure AI will get there. Thinking about the possibilities of AI and what it means for the future of work is a critical topic. It’s something we need everyone, but especially students, to be thinking about."
"5","2023-02-14","2023-03-24","https://blog.acthompson.net/2023/02/people-are-bad-at-giving-instructions.html","One of the things that make me sure that programming will be around for awhile even with better and better artificial intelligences is that people are bad at giving instructions. Well, that may be unfair. They are reasonably good at giving instruction to other people but that is not the same as being good at giving instruction to the literal minded. The most famous instruction, I first heard it from Grace Hopper almost 50 years ago is the instruction for using shampoo “Lather, Rince, Repeat.” There is a lot left out there. Most obviously, repeat how many times? It also doesn’t say if one should wet their hair first. In computer terms, an infinite loop without setting initial conditions. I recently bought a new cover for a light switch. The first instruction was to turn off the circuit breaker for the switch. Good advice. On the other hand, the instructions did not say to reset the circuit breaker when finished installing the cover. A literal minded installer would never have a working switch. Of course, people figure these things out. We are aware of the larger context and are good at filling in missing pieces. Computers are not that good at any of this. Part of what we teaching when teaching programming is how to give instructions. Not just how to translate those instructions into code but to fully understand and describe the steps needed to complete at task. I believe these are necessary skills. I think they will translate to other fields. Not that I have proof but it seems logical. In any case, we’re going to have to get good at giving instructions if we are going to tell AIs what code to write."
"6","2023-01-27","2023-03-24","https://blog.acthompson.net/2023/01/rhode-island-computer-museum.html","I spent some time looking at the Rhode Island Computer Museum web page today. A lot of interesting stuff. Some great information under the Education and Activities page. If you teach the history of computers this is a great resource with text and pictures. The Collections gallery has a huge collection of images and descriptions of items they have as well. Check it out at Home (ricomputermuseum.org)"
"7","2021-08-02","2023-03-24","https://blog.acthompson.net/2021/08/iot-python-and-raspberry-pioh-my.html","Trying learn too many things can be a risky proposition. But sometimes it feels like the way to go. Regular readers of this blog know that I have been trying to learn Python and that I have been experimenting with the Internet of Things with Phidget devices. Mixing the two is a pretty obvious step but since I really want to set up some autonomous systems without tying down my laptop, it seems like the Raspberry Pis I have accumulated would be the way to go. So mixing a new programming language (Python), with a new development domain (IoT) with a new operating system (the Raspberry Pi OS is built on Linux) seemed like something I should give a try. Fortunately for me, the Raspberry Pi OS installation comes with the Thonny, Python IDE for beginners and the Phidgets software has downloads and installation instructions for the Pi and Thonny. I had a little trouble getting the Phidgets library to install at first but the Thonny IDE had the ability to get the library and install it for me which was a big help. Thonny feels like a very nice IDE for beginners BTW. I am surprised I hadn’t already known about it. It installs in Windows, Mac OS, and Linux. And it is free which is also nice. Visual Studio Code also installs on Raspberry Pi so if you are using that on other platforms it could be an easy move on the Pi. My experiment involved using the Phidget Plant Kit because water and electronics go so well together. Seriously though I like the idea of having a computer controlled watering system for plants. That’s something I have wanted to do for a while. Plus it is something that lends itself to cross curricula work in schools. Initially I plugged in a monitor, mouse, and keyboard. Not a bad desktop if a little slower than I am used to but fine for what I am needing. Next step was connecting over the network with VNC (Virtual Network Computing). This is the step I need for setting the Pi up without tying up my monitor, keyboard, and mouse. Well, I have some more experimenting to do. More posts when I have some projects fully completed. I’d love to hear what other people are doing with Raspberry Pi and IoT as well as where you like to go for connectable hardware."
"8","2022-07-28","2023-03-24","https://blog.acthompson.net/2022/07/jacdac-and-microbit-20first-look.html","Learning about Jacdac devices was my incentive to buy a Micro:Bit 2.0 The Micro:Bit 2.0 has a number of upgrades and new features from the original. These include a microphone and a speaker among others. That is probably justification enough to get an upgrade but being curious about the Jacdac devices, which requires the newer model, was the deciding factor. I am really enjoying spending time with external devices and the Jacdac devices are really easy to use. I purchased the Micro:Bit from AdaFruit (micro:bit v2 Go Bundle - Batteries and USB Cable Included) Actually I bought two because, well, why not? I bought the Kittenbot Jacdac Kit for micro:bit V2 from KittenBot My hope is that more manufacturers and suppliers will be offering Jacdac over time. The kit comes with: Jacdac Adapter – connects with Micro:Bit Slider Rotary Button RGB Ring 2 Keycap buttons Magnetic Sensor Light Sensor Hub – for connecting even more devices 5 cables of different lengths Each part is labeled and has a QR code that will take you to documentation for that device. I took full advantage of that. One thing I learned the hard way but would have learned if I read the documentation is that the adapter has a switch that determines if the Micro:Bit powers the Jacdac devices or if the Jacdac (and some external power supply TBD) powers the Micro:Bit. Things worked much better with the switch in the right direction. Once I got everything out and read some documentation I had to try something out. I started with the RGB Ring and the Rotary Button. I started with individual example programs and then created my own. I had the rotor determine which LEDs were lit. Going backwards (negative numbers) had some issues of course. I might leave solving that to students if I were doing this in class. I recommend starting at MakeCode Integration before you get to far on your own. It will step you though adding the Jacdac extensions to MakeCode, connecting to your Micro:Bit, and other helpful information. BTW, from MakeCode you can program using blocks (very easy) as well as either JavaScript or Python. You can move back and forth between languages as well. A lot of potential for learners there. Next up I will be trying to think of some larger projects as well as experimenting with other sensors and gadgets. I may even cut some boxes with my laser engraver for some projects. Making boxes with 3D printers is also an obvious thing to do."
"9","2022-10-07","2023-03-24","https://blog.acthompson.net/2022/10/microbit-programming-for-grades-k-to-3.html","The Micro:Bit is a pretty cool piece of hardware being used in a lot of schools. It’s mostly used in middle school and above but that may be changing. New from Microsoft is Microcode beta. Programming is via a MicroCode web editor at aka.ms/m9. Microcode documentation is at Microsoft MicroCode for micro:bit (beta) Take a look at the intro video below.People who have used Kodu Game Lab will see some simularity in MicroCode. Although the graphics are very different, the programming modularity is similar. With both, programming is drag and drop using cute little kid friendly icons. Besides the Micro:Bit itself, Micro:Code supports Jacdac devices which opens a lot of new prossibilities. I wrote about JacDac back in July - Jacdac and Micro:Bit 2.0–First Look. I haven’t tried this with my 8 year old grandson yet but I hope to soon. I think he’ll like it."
"10","2022-11-12","2023-03-24","https://blog.acthompson.net/2022/11/csta-new-england-regional-conference.html","This year’s CSTA New England regional conference is at the University of Massachusetts (Amherst) school of Education. It’s a great venue. There are around 150 people here. I can remember when CSTA national conferences were smaller than that. It just shows the growth in CSTA and the growing strength of CSTA chapters over the last several years. I am running into a number of people I know and meeting some new people as well. That is what makes in-person conferences so extra special. The energy level is high here with teachers from all over New England and New York. The opening keynote was by Dr. Cheryl Swanier who talked about “Changing the Face of Technology for Social Good.” Tech has a woman problem – we don’t have enough of them. As part of her talk, Dr. Swanier showed this video Girls in Tech for Web Summit - Ruthe Farmer – YouTube We’ve been taking about this problem for a while but we really need to take our actions up a notch. The case is pretty clear. Dr. Swanier also talked about explicitly teach problem solving. Much as we’d like to think that teaching programming does that, the truth is that it has to be taught explicitly. My first regular session was “Teaching with Minecraft: Education Edition.” You’d think I would know all about this but honestly I have trouble grokking it. My grandson has seen it and thinks its cool so I figured I should learn more about it. Minecraft Education requires a license. That may limit what I can do initially. However, it looks like there are a lot of resources for teachers including lesson plans, the ability to share worlds, create NPCs (non player characters), and portfolios. There are Code Builder options for blocks, Python, or JavaScript with MakeCode.There is a demo that can be used with “An Hour of Code” and I will play with that. I was pretty impressed with what I saw today. There were 10 or 12 exhibits at the event. One that really interested me was the Kibo robot from Robot Kits For Kids | KIBO | Kinder Lab Robotics. These robots are programmed with blocks. Not virtual blocks! Physical blocks that cane be connected together. Once the program blocks are together the bar codes on the blocks are scanned into the robot which will execute the program This looks pretty interesting. After lunch, we had a panel of CS/STEM leaders from the New England departments of Education reporting on what progress the states have made in the last few years. The tl;dr of it is that there are been a lot of progress. But the efforts could really use more money. States have created certification programs, made progress in getting states to require schools to offer CS courses. We’ve still got a long way to go. We could use more money for teacher PD. We could require CS courses for graduation. Although in several states CS courses can count for graduation credits in various ways. Next up for me, Kathy Kleiman, Founder of the ENIAC Programmers Project, who told the story of the women behind the ENIAC. A story I have heard before but Dr. Kleinman tells it really well. I loved that she talked about the history of these women after the war. A lot of information at ENIAC PROGRAMMERS PROJECT Next up for me, Gencyber Teacher Academy @ the Univ of New Haven: Incorporating Cybersecurity Concepts into 9th-12th High School STEM Curriculum. This program includes a week long summer ""camp"" and follow up virtual sessions. Last year the program just included 25 teachers from Connecticut but applicants from other states are welcome to apply for next summer. Anyway, it comes with a stipend and some good free stuff. And a lot of good learning, Last regular session of the day for me, Bring Computation to Life with the micro:bit. I love the Micro:Bit and always like to learn about how teachers are using them in their classrooms. I linked to the presentation above and on slide 7 you can find the mini project that opened the session with links to the code used. It uses the ability of the Micro:Bit to send and receive messages. You will find a lot of useful links on that slide deck including in the speaker notes. The closing plenary involved a lot of recognition of CS teacher award winners. and door prizes! Next year the conference will be on October 20, 2023 at the University of Connecticut Storrs. Should be a good one."
"11","2022-12-31","2023-03-24","https://blog.acthompson.net/2022/12/looking-back-and-looking-forward-in-cs.html","Traditionally I write a year end look back on thee previous yest in CS education. (Last year at Looking Back on Computer Science Education in 2021) Honestly, that post would largely work for 2022 as well. I attended SIGCSE, CSTA, and the New England Regional CSTA conference. They were all great. There was good learning at all of them. But new stuff? Not a whole lot. A few new tools. Some new robots. Some new AI and cyber security curriculum. But really not a whole lot. I think we’re in for some disruption in 2023 though. Tools like ChatGPT and GitHub CoPilot are probably only the first of tools that are going to shake things up in teaching programming. Are we even going to still teach programming in computer science? If not, what will computer science courses look like? If we are still teaching programming how will we do it? What will it be all about? We’re still going to see a need for teaching about cybersecurity for sure. Artificial Intelligence is also going to be more important. We’re seriously going to have to think about how we teach about it. We have to include not just how it works but how it should be used. Ethics in computer science has never been more important. The discussion about ChatGPT and what it means for education in general and CS education in particular is going to be ongoing. We have to reink how and what we teach. It’s going to be an interesting year. Have you been thinking about it? What are your thoughts so far? Note: I highly recommend Mike Zamansky's blog post at Kicking off 2023"
"12","2021-12-31","2023-03-24","https://blog.acthompson.net/2021/12/looking-back-on-computer-science.html","I’ve never felt less prepared to write a look back on CS education than I do today. I’ve been retired from most of the year and the world has been changed a bit because of COVID. I have noticed some things have clearly happened. One is the increase in online development tools which I talked about a year ago. The other is an apparent growth in cyber security education. I’ve also noticed some increase in virtual reality programming courses as well. How that will go is anyone’s guess. There are two barriers. One is that VR hardware is still expensive. It’s not just devices like the Oculus but also computers capable enough to support VR and its development. A lack of training is also a barrier. Most teachers seem to be learning on their own with help from documentation and videos from companies. That and some support through social media from other teachers. The Unity Teach Community has well over 2,000 members and is very active. I highly recommend it if you are looking to get involved in teaching VR. Online teaching and programming tools have really taken off. The code.org courses support this sort of thing but they are far from the only option. CodeHS for example shows up a lot in social media discussions. As does Coding Rooms. And repl.it. I should probably collect a list of them for a future post. Perhaps you could add your favorites as comments and help me out? Cyber security has also seen a lot of growth. Cyber.org has a lot of materials and provide cyber security professional development. Social media support for teachers coming from teachers has also been growing. I recommend the Cybersecurity Educators Facebook group. Over 1,000 members and active and growing. This field is going to boom as security gets more attention all the time. Every year I expect the Internet of Things to take off but it never really does. The pandemic has made doing any sort of physical computing more difficult. But I keep hoping. Machine learning and artificial intelligence didn’t seem to pick up a great deal but it is growing. AI 4 K12 has a lot of useful resources from teachers and I recommend checking them out. Most of what I see in K-12 AI is units in existing courses and not specific full courses. That’s probably best at the K-12 level. The math and coding involved in creating AI from scratch is intense. Learning how to use existing tools is both useful and age appropriate. So progress has been made and that’s a good thing. 2022 should be interesting. Hopefully, in a good way."
"13","2023-03-14","2023-03-24","https://blog.acthompson.net/2023/03/book-recommendations-for-cs-people.html","tl;dr Book recommendations: Overnight Code: The Life of Raye Montague, the Woman Who Revolutionized Naval Engineering Code Girls: The Untold Story of the American Women Code Breakers of World War II Overnight Code was recommended to me after I recommended Code Girls on Facebook. Overnight Code is a truly inspiring story of a woman with two strikes against her (female and Black) whose hard work, determination, and talents helped her do some revolutionary work in naval engineering and integrating hardware/software systems. Debugging code is arguably a lot harder than writing new code. Raye Montague was amazing at debugging code and integrating disparate systems. But also a good person who helped mentor and advance others. She was given tasks that others had said were impossible to complete. Talent and hard work (Raye had a lot of both) allowed her to accomplish beyond expectations. There is a lot of good career and life advice woven into this story as well. Advice for everyone. I could have benefited from this book early in my career. ""Code Girls: The Untold Story of the American Women Code Breakers of World War II"" was recommended by several people in a Facebook group dealing with a Kindle Challenge that Amazon is running. The idea about code breaking sparked my interest right away. This book was more than just that though. There were plenty of insights into code breaking but the look into the lives of these amazing women was the highlight. It was a different time and women would not as respected as they should have been. Yet, these women put their considerable talents into working for the war effort and their country. Code breaking is a fascinating subject in itself of course. I enjoyed reading about the “bombe” machines, how they were created and used. I also found the difference that code breaking made in the conduct of the war (World War II) to be interesting. This is not the sort of thing many history courses cover. It’s easy to label these books as books for Women’s History Month or the Raye Montague book as being for Black History Month but that would be a mistake. These are books for all year long. I recommend them to anyone interested in the progression of computing in society. Code Girls is a great read for cybersecurity or cryptography students. Overnight Code is a powerful read for anyone not just computer science people. It is just that inspiring."
"14","2022-12-02","2023-03-24","https://blog.acthompson.net/2022/12/adventures-in-taking-code-from-internet.html","Facebook memories remined me that ten years ago I was thinking about writing a program that would ring bells (nautical time) on the hour and half hour. I didn't write it back then. Probably because I was busy with my day job. It got me thinking about writing one now just for the fun of it. Now I have written a fancy clock program before. It looks something like this. That was written in Visual Basic and I really wanted to use C#. Besides that, that program is a bit busy for something as simple as I wanted to write. The Timer and DateTime classes in the .NET Framework make writing a simple clock application very easy. I thought I would take a look on the internet to see what code samples I could find. There are plenty of them. I found several interesting looking samples that also drew analog clock faces. The first one I found (C# Analog Clock Program (thecrazyprogrammer.com)) looked simple enough so I created a project and copied the code into it. It was broken. Looking back at the comments on the original post I found a number of comments saying the codebase broken. None of them had answers. That seems to be pretty common. No doubt that things worked fine for the original coder but something was lost in the posting. I suspect that most people who come across this sort of thing are beginners which would explain the questions. Having a bit more experience I quickly fixed the errors I had and got the program to work. It didn’t look quite like I wanted but again, having enough knowledge to understand the code without a lot of comments, I made some adjustments and got it looking the way I waned. I suspect that many beginners would either life with it or try a whole lot of things until they stumbled on the right combination. Or maybe broke the program beyond fixing. That highlights one of the big issues with beginners taking code from the internet. Without some real knowledge even minor issues will keep success away from the student. I found a second project that was put on the internet some years after the first one I found. Interestingly enough, it appeared to be a refactoring and modest improvement over the first one I found. The code was nearly identical. No credit was given to a previous coder. In fact it was so close that I copied a snippet and pasted into the earlier project. With a tiny edit (a name change) it worked perfictly. This is what I wound up with. The Code Project web site has a variety of analog clock code samples. I took at look at one - Analog clock control in C# – CodeProject that was pretty good. and worked more or less right off the bat. Except that is was written in a much older version of Visual Studio than I was using. (2003 compared to 2022). An upgrade was required with Visual Studio handled pretty well. That is not always the case if coders used depreciated or removed features or changed names. Yet another issue with taking code from the internet. Well, now I have a couple of code samples to play with. Most of all I am more convinced that actually getting code from the internet to work can be more complicated than many would think it is. Now to think about ringing bells. Which reminds me of one last story, Back when I was in college during the mini-computer era we had a lab full of ASR-33s. They had actual bells that were hit with a little hammer. One student wrote a program that ran in the background of the computer and ""grabbed"" control of each terminal as it became available. Then it would start ringing all the bells at once. It so happens that when it ran the only one in the lab was the computer department secretary. The department chair held a meeting with all the TAs and it never happened again."
"15","2022-09-20","2023-03-24","https://blog.acthompson.net/2022/09/coding-it-yourself-can-be-fun.html","Every couple of weeks I bake a couple of loaves of bread. The bread mostly gets used for breakfast sandwiches. Now my bread does not look as perfect as what I could get in a bakery. And the bagels? Once in a while I try my hand at bagels, don’t look anything close to what I get at my favorite bagel place. But they all taste good and I find it very satisfying to make it myself. Coding can be a bit the same. Not everyone writes professional looking (or performing) code but sometimes there is some satisfaction in having a program that works just they way you want it to and does just what you need. Maybe it is not “release to the public” neat and tidy. It may be what we used to call a “programmers program.” In other words, a program that only the programmer who write it could (or would) use. My Wordle solver helper program is one such. It works great – for me. It doesn’t have the error checking a released program should have. And maybe it should start at one and not zero. But it works great for me. Programming is basically stating a process or method using computer code. My Wordle solver represents my thinking of how I think Wordle could be solved. It was fun to write and is fun to use. It’s not ready for prime time though. Does that make it a bad program? No more than my imperfect bread or bagels are bad. They both meet my needs and that, for me, for these, is all that matters. In some ways, that is the message we may want to pass on to students. Many, perhaps most, of our students will not become professional software developers. They may still write code for their own tasks or interests though. We need to help them enjoy that experience. One way to do this is to assign projects that are interesting to the student. Open ended projects are good for this but even better is letting students select their own projects. For semester ending projects, I used to allow students to select from a list of suggested projects and also to have the option to design their own projects (after discussion with the teacher) that solved a problem that they were interested in solving. Helping students find the fun and satisfaction in solving an assignment promotes their learning. And, I hope, helps them think of computer science as worth doing for themselves."
"16","2022-09-22","2023-03-24","https://blog.acthompson.net/2022/09/dealing-with-student-misconceptions.html","I was reading through The Big Book of Computing Pedagogy, as one does, the other night. Specifically, the section on student misconceptions. Misconceptions are one of my favorite topics in teaching computer science. The articles in this book are very helpful in understanding what student misbelieve and why they do so. I’ve seen students with all of the common misconceptions and, of course, I try my best to help them overcome them before they get students into trouble.I tried to remember if I experienced any of them myself but memory of 50 years ago is very selective. What I do remember is that I had some experiences of getting very close to the hardware early on. While my first course was learning FORTRAN the computer we used required some extra (compared to today) to run. Specifically, it requires that one toggle in some instruction in binary using toggle switches to get it to read in a couple of punch cards that did the next phase of the boot up. Not long after I learned the first two of what would be 7 or 8 assembly languages over my career. There is something about toggling a memory address so that one could read (in binary lights) or enter information in binary with those same switches to program a computer that give one a good understanding of what memory actually is.t Those days are long gone of course and while assembly language still gets one close to the computer and gives an understanding of how things like memory work it can also be a gate or barrier to students. It’s actually not the ideal way to understand concepts that one might think. It’s not the sort of visual experience that today’s students are used to learning from. What we really need is some better visualization tools for introducing concepts. My first thought was using debugging tools such as those built into tools like Visual Studio. One can single step though instructions and view the contents of memory (variable) locations. It works but it is slow and tedious. That may be fine for debugging but for learning it has a high cognitive load that gets in the way of what we’re trying to do in teaching. So I have been thinking about how to create visualizations that are simple to use and that might help clear up misconceptions. Two things my thinking is focusing on are how variables and memory work and how loops and loop control variables work. Eventually I have to narrow it down to one of them to start. I should probably look at what might already be available first. I thought I would start by asking you, my readers, for suggestions. So, any ideas? How do you help students visualize these concepts? Any suggestions on tools for creating visualizations?"
"17","2022-09-28","2023-03-24","https://blog.acthompson.net/2022/09/how-far-we-have-come-with-programming.html","Last night I had a dream during which someone suggested that COBOL would make a good first programming language. They tried to promote the data division and English language syntax as plusses. When I shared this on social media it got a lot of laughs. Few would take this as a serious idea and with good reason. We used to joke that the hardest part of programming in COBOL was learning how to spell environment. (You had to be there) But really that data division was a bear to get right. The cognitive load was a lot for beginners. Today they are some who think that static variable declarations are enough cognitive load to hold students back and COBOL was a lot of effort. COBOL is still around and I understand that it has changed somewhat. I thought that “Structured Programming in COBOL” (there was such a book) was a stretch but object oriented COBOL just boggles my mind. Most of the people in my age group in the industry have some experience with COBOL. For more than a few it was the first or second or, as in my case, third programming language. Learning multiple programming languages was a big thing early in my career. FORTRAN, COBOL, BASIC, and C (before C++) were all a part of many people’s tool box. I worked on one project that had code in all four of those languages plus PASCAL. Today we have a lot of new languages. C++. C#, Java, JavaScript, Rust, and I could go on and on. Today’s languages have more and more powerful decision structures, looping structures and libraries that do things for us that we used to have to program ourselves. We have improved error handling, the ability to use classes and objects, and many other cool features. That doesn’t even touch on powerful IDEs and the ability to compile and get results in seconds rather than hours and days. With power often comes complexity. Complexity means cognitive load and potential for confusion and errors. We walk a fine line determining what to teach and how to prevent students from getting overloaded. It’s an exciting time to be teaching for sure."
"18","2023-02-23","2023-03-24","https://blog.acthompson.net/2023/02/does-it-run-in-ide.html","I was reading a tweet from a person saying they lost points a program written with pen and paper because the teacher thought the code would not run. When the student asked the teacher to write the code on the computer it ran. The Twitter discussion was on the wrongness of code assignments on paper but I am not sure that paper coding assignments are necessarily wrong. I suspect that the problem in the Twitter user's case may have been a teacher who is experienced. I could be wrong of course. The real problem is a teacher putting too much faith in their own mental execution of the code on the paper. I have found it a good practice to enter code I was the least unsure of into an IDE and run it on the computer. I’d almost always check code I thought did not work. Students can be very clever and write code that doesn’t look like it will work but does work. Or code that does look like it works but doesn’t. This all points to problems with testing computer programming in general. Writing code for evaluations is problematic in a number of ways. Yes, I know the AP exams do it that way. I’ve only graded the AP A exam once but I can tell you it’s not that easy. Handwriting can be hard to read for starters. I’ve already mentioned how clever students can be. I loved the 10 line code answer for a guestion that was looking for a one line return statement. I could have saved myself a lot of time if I could have verified it by running it. Asking students to write code in an IDE offers logistical issues for starters. There is also the issue of students being able to look at each other’s screens and sharing files. Some object to students using autocorrect, error checking, and help files. All the sorts of things professional developers use. Some teaches do prefer code turned in electronically because it allows for auto graders. I’ve discussed them here several times. Basically, mixed feelings. Evaluating student knowledge is one of the more difficult tasks programming teachers. It’s a problem with no easy answers. For now, I think, the best policy is to use a variety of assessments."
"19","2015-02-12","2023-03-24","https://blog.acthompson.net/2015/02/creating-code-hunt-puzzles.html","As I mentioned the other day (see Learning From the Code Hunt Dashboard) I have been creating my own Code Hunt puzzles for use with my students. Earlier this week I spent some time at Microsoft Research in a workshop about Code Hunt. Among the things I learned was a few more things about creating puzzles. Specifically I learned more about how test cases are generated and how I can tune what test cases are created for my students to see. This can make puzzles harder or easier for students which is a good thing. Sometimes I want the test cases to point a little more clearly to a solution. I don’t want students too frustrated but at the same time I want some challenge to the puzzle. I learned a lot from the Code Hunt designer documentation which is available online here but I wanted to highlight a few things that others may find useful. Let’s start with something simple. I created a puzzle where the correct solution is to convert a number from Celsius to Fahrenheit. Initially I created something that looked like this:    1: #level Cold    2: #code C#    3: using System;    4: public class Program {    5:     public static double Puzzle(double x) {    6:         return 0.0;    7:     }    8: }    9:    10: #secret C#   11: using System;   12: using Microsoft.Pex.Framework;   13: public class Program {   14:     public static double Puzzle(double x) {   15:          return (9.0/5.0) * x + 32.0;   16:     }   17: } the problem for me is that the test data looks something like this: While the 0 to 32 is helpful I wanted a bit more of a hit. So I added a simple if with no action that forces 100 to 212 to run as test data. This makes the secret code more like this:    1: #secret C#    2: using System;    3: using Microsoft.Pex.Framework;    4: public class Program {    5:     public static double Puzzle(double x) {    6:         if (x == 100);    7:          return (9.0/5.0) * x + 32.0;    8:     } The other issues I have had are with string based puzzles. While for some puzzles I want students to deal with the null case for some the early puzzles I want to remove that complexity. And in fact I may want to have a minimum number of characters in the string. For that there are some PexAssume methods we can use. I particularly like IsNotNullOrEmpty for avoiding having the null or empty string case. Though I could also use PexAssume.IsNotNull(s); to leave in the empty string case while removing the null string case. I can also use PexAssume.IsTrue to require that strings be at least a specific length.    1: PexAssume.IsNotNullOrEmpty(s);    2: PexAssume.IsTrue(s.Length >= 3); To the computer a string is a string is a string and it doesn’t really care what characters is in it. So you can see strings like “/0/0/0” which can be a bit confusing and intimidating to beginners. IT turns out that you can do some work in your secret code before you feed a value to a PexAssume.IsTrue method. That means that code like the following will make sure that the test data includes only the characters “a” though “z” are included in the test data.    1: Boolean b = true;    2: for (int i = 0; i < s.Length;i++)    3:     if (char.Parse(s.Substring(i, 1)) < 'a' || char.Parse(s.Substring(i, 1)) > 'z') b = false;    4: PexAssume.IsTrue(b); I see a lot more potential in that sort of thing for the future. I’ve been using PexAssume.IsNotNullOrEmpty for arrays as test data as well. I’ve got a zone that I have been using this semester but I am gradually adding puzzles as I learn more about Code Hunt. I’m willing to share my puzzles with others. Anyone else creating custom puzzle for their students?"
"20","2015-02-16","2023-03-24","https://blog.acthompson.net/2015/02/interesting-links-16-february-2015.html","President’s Day today which means my school is closed. I can use the rest after cleaning up from the latest snow storm. I’ve lost count of the number of feet (yes FEET) of snow we have had in the last month. Probably over 6 feet (2 meters) and it looks like more to come. Great weather to stay inside and write code. And look though some interesting links. Rob Miles has put the materials for his C# Course and a Shiny New Kindle C# Yellow Book on line. I recommend his materials. He does good work. Garth Flint writes about taking his students on A CS Field Trip. Do you take students on field trips? Where to? Simon Johnson has created Flapping Birds v.2.0.1 in 68 lines of touchdevelop! I may use this as a starter for some additional projects. Speaking of TouchDevelop. TouchDevelop is now an open source project on GitHub. The current team will keep working on it, but can use some help. Have you been following the CSTA blog? Maybe it is time to catch up on the latest posts. Care about CS Education? You can work for http://Code.org ! They are hiring. Lots. http://code.org/about/jobs Some great people already working there."
"21","2015-02-17","2023-03-24","https://blog.acthompson.net/2015/02/one-thing-leads-to-another.html","One of the great things about teacher blogging is the sharing of ideas. Often these ideas can be easily adapted and adopted in new ways. Earlier today Doug Peterson had an interesting post about wind chill calculations. He had an interest, shared by lots of us “enjoying” a particularly cold winter, and did some research. This resulted in a Small Basic project. And all the information I needed to write my own project. Now Small Basic is a wonderful little language for projects like a wind chill calculator. I can easily understand why it was a go to language for Doug. On the other hand I have been doing a lot of work with TouchDevelop lately so writing the program in that came to my mind. My wind chill program (which you can run from any web browser) looks like the following. TouchDevelop has three levels of ability for coding these days BTW. That is the “beginner” format which I chose in part because I like the color coding. Any way, I can see some room for expansion. There are obvious UI improvements but as is often the case there is more to wind chill can meets the eye. For example these calculations are apparently only useful for temperatures below 50 degrees Fahrenheit. That’s an obvious check that should be made. It has the added advantage of being able to add if statements to a simple assignment statement project. We should probably also check for negative wind speed. As always one thing leads to another in programming. And now thanks to Doug for sharing what he did I have another project I can use with my students. One that conveniently works in any programming language I might use."
"22","2015-02-19","2023-03-24","https://blog.acthompson.net/2015/02/2015-csta-annual-conference.html","Registration is now open for the CSTA annual conference. CSTA 2015 is a professional development opportunity for computer science and information technology teachers who need practical, classroom-focused information to help them prepare their students for the future. Conference content is peer reviewed and peer or industry led, making it relevant to today's classroom needs. This year we are staying true to being ""bigger and better than ever"" so we have expanded our conference to span three days, with two days worth of workshops, more exhibitors, along with multiple networking opportunities. Highlights: Explore issues and trends relating directly to your classroom Learn, network and interact Choose from various workshops and breakout sessions Amazing value (complimentary conference Wi-Fi, breakfast, lunch and snacks - CHECK!) at approximately $100/day! Some of this year's session topics include: Advanced Placement Computer Science Computational Thinking Increasing Enrollment in Computer Science Programming Robotics Keynotes: Megan Smith, Chief Technology Officer of the United States - Invited Randy Pitchford, Aaron Thibault and Jimmy Sieben with Gearbox Pre-registration is required and will be accepted for the first 500 teachers. The registration deadline is June 26, 2015. Also, please note that you must complete the payment portion of the online form in order to be fully registered for the conference! As always, we thank our sponsors for their generous donations. Your registration fee will include networking opportunities, lunch and resource materials. The 2015 CSTA Annual Conference is made possible by the generous support of Google, Lockheed Martin, Oracle Academy and the University of Texas at Dallas. Costs: Conference registration (which includes a community session on Sunday (July 12) afternoon, Monday night's event with the University of Texas at Dallas, and all general and plenary sessions on Tuesday(July 14) is $100 if you register by April 15. From April 16-June 26 the price is $150, and after that the price increases to $225. Workshops are a separate price, and this year we have expanded our offerings to include options on Sunday, as well as Monday. The price for workshops is $100 for the first one, and $50 for each additional workshop (maximum number of three). Please note that all workshops are ""bring your own laptop"" and that workshop registration is limited to 30-40 participants; so be sure to register early to get your workshop choice. As an additional reminder, we DO NOT accept workshop registrations onsite, and there is NO switching of options. Register at: www.cstaconference.org For more information contact Tiffany Nash, CSTA Events and Communications Manager at t.nash@csta-hq.org P.S. A big thank you to the 2015 Conference Planning Committee: Doug Peterson, Program Chair J. Philip East, Workshop Chair Duncan Buell, Review Chair Mindy Hart, Volunteer Coordinator Stephanie Hoeppner Tammy Pirmann Dave Reed, CSTA Professional Development Committee Chair Hal Speed, Central Texas Chapter Conference Liaison Sheena Vaidyanathan Henry Vo, Dallas Fort Worth Chapter Conference Liaison Lizan Ward, Greater Houston Chapter Conference Liaison Lissa Clayborn, Acting Executive Director, CSTA We look forward to seeing you in Grapevine! The CSTA 2015 Annual Conference is generously sponsored by:"
"23","2015-02-20","2023-03-24","https://blog.acthompson.net/2015/02/todays-basic-is-not-your-fathers-basic.html","A post at Doug Peterson’s blog (A Different Time) sent me to a site that has a collection of old BASIC programs. And by old I mean the 1970s. I remember many of these programs as I was starting my programming career back then. One could take these programs and type them into their computer and run them. It was fun and we learned a lot. But I’ll tell you the language has changed a lot since then. For example back then a comment was a REM statement. Short for REMARK of course. Today most version of Basic use a single quote to flag a comment. Today variable names can be of any length while back then one was limited to a single letter followed by a number or numbers. Variables were declared using a Dim statement as they are today but the type was specific by a $ for string, a % for integers and floating point numbers had neither of those special symbols. One can’t use them in variable names today of course. Originally BASIC did not have subroutines as we know them today. We had the GOSUB statement which branched code to a line number (we don’t use line numbers at all any more) and a return statement brought the flow of execution back to the line after the GOSUB. There was no parameter passing and variables were basically global. There were functions of a sort. Those were defined in a single line like this: 180 DEF FNM(X)=X-8*INT((X-1)/8) The functions were all named FN followed by some letter. Return values were loosely typed. It sure was easy to use though. I’m looking though these old projects for ideas for updated versions to use with my current students. Some I will use with Visual Basic and some with C#. And just maybe some with TouchDevelep. Some things never get old. Today’s versions of BASIC are both much more powerful and much more complicated than those early versions were. Stronger types, more powerful functions and subroutines, lots more flexibility in identifier names and real error handling. Small Basic is an attempt, and a good one, at returning in part to those simpler days. It still has more power and complexity but many things are much easier. Visual Basic is a very powerful professional level language and development environment. It too makes some things much easier than they were “back in the day” but in other ways the complexity can be intimidating and even frustrating for beginner. It seems to work well with my high school freshmen though as long as I stick to the basics. I wonder how many people judge the idea of BASIC based on thirty (or forty) year old versions of the language? Today’s versions, especially Visual Basic are every bit as powerful and modern as Java or many other popular languages. And still easier to learn. I still like them."
"24","2015-02-23","2023-03-24","https://blog.acthompson.net/2015/02/interesting-links-23-february-2015.html","It's February break for my school. I’m trying to take it easy this week. And catching up with grading of course. I suspect a lot of teachers use so-called vacation time to catch up on school work like grading and planning. I also hope to play with some tools I haven't had time for. With any luck at all I’ll get my new 3-d printer working. And maybe a Kinect project I want to start. We’ll see! IF you’re looking for interesting things I have a few good links below. I love the suggestions that come fromCS Teaching Tips @CSTeachingTips For example “Give students a caesar cipher to teach how characters can be treated as numbers and to reinforce string manipulation. http://ow.ly/IiLhJ “ I love Caesar cipher projects! Also this one “Give students a large data file to sort when teaching sorting algorithms. http://ow.ly/IiJZ7 “ Sorting small data sets is boring, feels to easy and doesn’t give one a real chance to see performance differences. Computer Science Teacher: 2015 CSTA annual conference – Registration is Open. Will I see you there? Fun images to help visualize how computers have changed. Your students may find these interesting. Algorithms – Teaching coding structures to 6th grade. New collaboration features in TouchDevelop This opens some interesting possibilities. I’m wondering about how several students modifying the same program at the same time will work out in class."
"25","2015-02-24","2023-03-24","https://blog.acthompson.net/2015/02/simulations-are-more-fun.html","One of my favorite computer science teachers, Judy Hromcik from Texas, posted a link to a video called “The last banana: A thought experiment in probability.” The video outlines a particular statistical problem. “Imagine a game played with two players and two dice: if the biggest number rolled is one, two, three, or four, player 1 wins. If the biggest number rolled is five or six, player 2 wins. Who has the best probability of winning the game?” The video outlines several ways to determine who has the best chance of winning. There are several ways including logic diagrams which are interesting and perhaps even fun. For me, programming geek that I am, creating a Monte Carlo simulations seems like the most fun way. Judy is thinking about using this with her students and I’m thinking about using it with mine as well. I’m looking forward to discussions with students about the results. The first couple of times I ran the simulation I did so with small iterations (36 simulated rolls) and the results were not always what I expected. Player One won more than Player Two in several cases. This is well within the realm of possibility of course. Probability is not certainty. Larger numbers of iterations came a lot closer to the theoretical ratio of winners. This is also expected. I think the next improvement to the program is to show the percentages for each player as well as the raw numbers BTW. Theoretically Player Two should win 56% of the time. I think simulations are fun but I also wonder if they might help students picture the results better than looking at a strictly mathematical look at the probabilities. Back in college I took a number of courses in statistics (I was originally a sociology major) and I got tired of doing the arithmetic. The math was fun but doing the calculations was tedious. So I did the only logical thing – I wrote programs to do the arithmetic. Do this really helped me focus on the math, the algorithms, and save time doing the arithmetic. So some people the math is enough. Some of us like to see things in a different way. Anyone out there teach statistics? Do you have students run (or better yet program) simulations as part of the course? Does it work for your students?"
"26","2015-02-26","2023-03-24","https://blog.acthompson.net/2015/02/lessons-in-time.html","The other day I was microwaving some food to heat it up. Ten seconds seemed like forever. I was actually able to do several other things while I waited. The microwave has changed my perception of time in some ways. As I thought about that I remembered the first time I heard Grace Hopper speak. One of her favorite stories was about explaining to an admiral why there was a delay in satellite transmission. She used a wire “nanosecond” to demonstrate. Light travels about 11 3/4 inches in a nanosecond. She would show the wire and explain that there were a lot of nanoseconds between the ground and the satellite. Later in her career Admiral Hopper used to show off packets of picoseconds. She got the little packets in the cafeteria where they were already labeled with the letter P. I am I am sure many others use the nanosecond story to help explain to our students why smaller computers are faster computers. I’m thinking about adding the microwave story to my toolkit as well. Some times that we think are very fast in the abstract are actually very slow in reality. Once you realize that 10 seconds is not instantaneous and that you can actually accomplish other things during that time you realize that parallel operations can make better use of the time available. Ten seconds to you and I can be a long time. A nanosecond is a long time to a computer. Even, these days, a picosecond is a long time for a computer. We’ll see how that goes over."
"27","2015-03-02","2023-03-24","https://blog.acthompson.net/2015/03/interesting-links-2-march-2015.html","Back in school today. It was nice to have a break but I am looking forward to time with my students today. I got no school work done at all during the week off. I’m going to be paying for that this week though. Well that is life. I did pick up a mini display port to VGA connector from my Surface Pro 3. Now using a second monitor. Productivity will improve. Yeah! And now a few interesting links that I managed to capture over the last week. Some fun ones I think. Most vulnerable operating systems and applications in 2014 It will come as a surprise to some that Windows is NOT in the worst three. The worst two are from Apple. May spark some interesting conversations. Level up your programming skills with this FREE introduction to #Python! Get started: http://spr.ly/60170xwS I may try this one out. I need to learn some Python. Great article about why having the right people develop key libraries for computing. Proving that Android’s, Java’s and Python’s sorting algorithm is broken (and showing how to fix it) I found one link top interesting quotes about programming and remembered I had seen some other collections in the past. I thought I would list some of the best lists here. Quotations for Learning and Programming collected by Rich Pattis Perhaps the ultimate collection? Eugene Fink's collection of quotes: Computer-science quotes and jokes Are these the Top 50 Programming Quotes of All Time?"
"28","2015-03-03","2023-03-24","https://blog.acthompson.net/2015/03/its-software-stupid.html","Computers are magic. Well to a few people they are. To others they are annoying and useless pieces of hardware. At least until you add software. I was reading Audrey Watters’ post on “How Steve Jobs Brought the Apple II to the Classroom” recently. It is a prime example of someone finding the magic in the box and assuming that, if not everyone, a lot of others would also discover the magic. This idea never seems to go away and yet it seldom works out that way. For everyone who teaches themselves there are a great many others who need a teacher. For some people, I confess I am one of them, discovering that a computer can be programmed and used to do interesting things is enough to get one hooked. This doesn’t seem to be universally the case though. The great majority of people need more out of the software to find the computer useful let alone educational. This is not limited to computers either. A few years ago it seemed like everyone was buying Flipcams. Workshops and presentations abounded at ed tech conferences on the amazing things that teachers were doing with them. The reality turned out to be boxes and boxes full of unused Flipcams in schools all over the place. It turns out that just giving people the cameras did not make magic happen. Time after time some new technology is touted as being a sort of silver bullet. Apple computers, digital cameras, Flipcams, iPod and iPads, Chromebooks and tablets of all sorts. Without a doubt some teachers are able to do awesome things with these devices and their students. But they seem to be the exceptions. Some teachers are naturally creative and combine that with a fearlessness that let’s them try out of the box projects. Other of us need a bit more direction. Some education and sharing of ideas of what works for others is needed to get things started. Teachers also need administrative support even if that support is in the form of benign neglect. :-) Too often I get the question “we just bought [latest gee-whiz technology] can you tell me how to use it to teach [subject of the day.]” If you have hardware and need to ask about software you have, in my opinion, don’t things backwards. Find the software (be that computer software or curriculum materials) and then find the hardware to run it on. We shouldn’t start with a solution and go looking for problems to solve with it."
"29","2015-03-04","2023-03-24","https://blog.acthompson.net/2015/03/can-i-give-you-hint.html","Last month I attended a workshop on CodeHunt at Microsoft Research. A talk there by Daniel Perelman on Hint generation in Code Hunt (you can watch a video of his talk here) really sparked some thinking on my part about how I give hints to students. Since then I have seen some other research on automatic generation of hints including an interesting paper by some researchers at Stanford (PDF). Having automatic hint generation is an important problem for online education and MOOCs. It’s not an easy problem though. In fact at times I struggle with giving the right hints to students in live interactions. Some times there is a fine line between pointing a student in the right direction and telling them how to solve the problem. Sometimes a simple “are you sure you want to do that inside the loop?” is enough. Other times a student needs someone to go over the statement of the problem and help them break it down into pieces. If a student is close to a solution then there may be little room of a hint. At that point it can become a judgment call between asking the student to keep working on their own and giving them the information that puts them over the top. Different students need different hints. Or perhaps I should say that some students need more help than others. Working with students in person means that a teacher can figure out what concepts students are struggling with. A student that understands loops can be told “have you thought about a loop here? while a student who is struggling with how to set up a loop needs a refresher on the lecture they slept though didn’t quite understand the first time. That more involved help, which is more than just a hint, may be a harder problem for software tutorial systems to handle than simple hints. I’m pretty excited about the possibilities for software giving students hints. I think that this may allow teachers to spend more (and higher quality) time with students who need more than a hint."
"30","2015-03-06","2023-03-24","https://blog.acthompson.net/2015/03/still-more-hardware-for-learning.html","I get email. And I get twitter followers. Often these new followers or email senders are promoting some new gadget for teaching. This week it was RobotIX and Hackball. Hackball is looking to get funded via Kickstarter so it’s not available yet and most of the information about it is at the Kickstarter link. The RobotIX web site talks about some robots that are “coming” but doesn’t include pictures or really any data about them. That obviously makes it hard to review them. Why are there more and more of these sorts of things all the time? Well, I guess because they are cool and fun. Lots of people want to create the magic bullet to make teaching easier. There are already a lot of robots and what not out there (I list many at Robots For Teaching Programming) so it feels like people are “reinventing the wheel.” This is the case even though we don’t really know if any of this really works as advertised. We seem to do a lot of things based on intuition or because we want it to work. Mark Guzdial wrote about this recently at Computing Education Must Go Beyond Intuition: The Need for Evidence-Based Practice on the Blog at CACM. That lack of evidence for most new things is what worries me. Yes I love to try new things and there are others out there like me who will. But in the end how do we know it is working? Not all teachers are trained researchers with well defined environments that allow for serious evidence gathering. I suspect I am not alone in wishing that universities would step up and take on the task of researching what works and what doesn’t in computer science education. So far at most universities there is a lot of finger pointing and saying let the other guy do it. CS departments think Education departments should do it and Education departments think that CS departments should do it. Few schools are willing to fund real CS education research. And so we keep doing things by trial and error and hoping that the things we think are cool are also working."
"31","2015-03-09","2023-03-24","https://blog.acthompson.net/2015/03/interesting-links-9-march-2015.html","Last week was SIGCSE in Kansas City. From all reports it was a great conference. I wasn’t there but I followed as close as I could via Twitter. The twitter stream was active with lots of links, pictures and interesting comments. I’ll get to read the papers at some point but I wish I had been there. In any case I did collect some good links from SIGCSE to share this week. And a few from other places. Hope you find some useful. First a could of blog posts by Lisa Kaczmarczyk (twitter @lisakaczmarczyk ) on her Interdisciplinary Computing Blog: SIGCSE2015 Comings & Goings in New Directions Mind Stretching at ACM SIGCAS (Computers & Society) And then there are some summary blog posts at the Blog@CACM ""Pre-symposium events included....Computing for the Social Good"" SIGCSE Day 1 is in the Books SIGCSE Day 2 Highlights And That’s a Wrap - SIGCSE 2015 Ends Mark Weiss was one of the keynotes and I really wish I could have heard that one. One thing he proposes is that you can teach all these topics (image below) in Excel! For example did you know that VLOOKUP in Excel uses a binary search? I didn’t but I guess I should have. A new (to me anyway) thing I saw a lot of tweets about was Pencil Code (https://pencilcode.net/) which is a tool for converting between blocks and text based code. I need to look into that one some more. I did add it to my Programming With Blocks post. Recently I wrote a post for the CSTA blog about the CSTA Equity Committee which I currently chair. If you’ve wondered about CSTA Board committees this will be interesting. I updated my computer science education blog roll (http://blog.acthompson.net/2012/11/computer-science-education-blog-roll.html …) to include Leigh Ann Sudol-Delyser‘s new blog at http://csadvocate.org/blog/ I am so happy to see Leigh Ann blogging again. She recently completed her PhD from Carnegie Mellon which I hope gives her more time to blog again. Found an interesting post at Willa's World: The Six Most Common Species Of Code Mark Guzdial summarizes some of the AP CS 2014 Results as analyzed by Barbara Ericson: Big jumps in participation! Demographics still poor Speaking of Excel I found this interesting post Excel Fun—Build 3D graphics from a spreadsheet on the Microsoft Office Blog. Lastly don’t forget this summer’s Annual CSTA Conference."
"32","2015-03-10","2023-03-24","https://blog.acthompson.net/2015/03/youthspark-challenge-for-change.html","Microsoft runs all sorts of competitions. Recently I read about the YouthSpark Challenge for Change. Since it is no open to 13 to 17 year olds (aka high school students) I thought I would post information about it here. Calling all students and young adults! Are you active in your local community or concerned about national issues? Microsoft’s third annual YouthSpark Challenge for Change is inviting youth aged 13-25 around the world to share their ideas for sparking change in their communities, schools, college campuses, or the world. Microsoft YouthSpark is part of Microsoft’s commitment to create education, employment and entrepreneurship opportunities for young people around the world. What could I win? Microsoft is awarding exciting prizes to help you do more good. And, this year, the Challenge has been extended to 13 to 17 year olds! 15 finalists from each age group (13-17 and 18-25) will win a Surface Pro 3 with Office 365*. 5 grand prize winners from each age group will win: An amazing leadership-development trip to Nicaragua to learn about creating change $2,500 cash to help turn their ideas into a reality A Windows Phone* The opportunity to serve as a YouthSpark Advocate. I found this thanks to a blog post by Aimee Sprung on the Microsoft New England blog - Calling young people with ideas for change — win support to make them a reality More information is available following the links. I have no connection to the competition."
"33","2015-03-11","2023-03-24","https://blog.acthompson.net/2015/03/how-to-teach-computer-science-to-5-14yr.html","Join CSTA K-8 task force for #CSK8 chat on Mar 11 8pm EST. Pedagogy- ‘How to teach’ Computer Science to 5-14yr olds. Not the What or Why. Discuss pair programming, blended learning, structured vs unstructured approaches, online curriculum, differentiation and more. This is the latest in a series of twitter chats that take place every other Wednesday on Twitter. These usually have a lot of good conversation."
"34","2015-03-12","2023-03-24","https://blog.acthompson.net/2015/03/simplify-simplify-simplify.html","One of the things beginners do when learning how to program is to make things more complicated then they need to be. It’s a natural thing because they often don’t know the shortcuts. They may not know enough library routines or even enough language features. So they build complicated ways around what they don’t know using what they do know. It’s that old story of when you only have a hammer all your problems look like nails. Everyone once in a while my students are the ones with the shortcut and I’m the one who over complicates things. That happened to me with a recent project. I assigned my students the project I blogged about in Simulations Are More Fun recently. As is my practice I coded up a sample solution myself. I liked my solution. It was cool. My students took an easier path though. I over thought the problem. The problem includes the detail “If the biggest number rolled is five or six, player 2 wins” so my first thought was to determine the biggest number and then check it’s value. I got even more clever by creating a function that took two numbers and returned the value of the larger. It worked wonderfully but it added additional complexity without adding real additional value. My students just checked the two values with an OR expression. Sort of like this:    1: if (die1 >= 5 || die2 >= 5)    2:     player2++;    3: else    4:     player1++; Nice and simple with no extra method call overhead.It’s actually sort of elegant. My problem, if I can call it that, is that I tend to think of solutions that scale. I’ve spent a lot of time in my career dealing with big problems and big data. This colors how I look at some problems. This problem is simple with a very small data set and this simple if works great in this case. If I had to compare a value to the highest value in an array this simple solution could be limiting. It would get complicated very quickly. Having a method that found and returned the highest value in an array (something we talked about in class when introducing arrays) would make things easier. Or at least simpler in the if statement. This is something I will talk about in the future as I try and continue to work scalable solutions and how to design for scalability. But we’ll also have to keep an eye out for simple solutions as well."
"35","2015-03-13","2023-03-24","https://blog.acthompson.net/2015/03/is-bbcs-micro-bot-silver-bullet.html","It’s been all over social media and online news the last couple of days - BBC to give out one million 'Micro Bit' computers to get kids coding. I’m a little skeptical. I’ve heard things like this before. (and blogged about it - most recently at Still More Hardware for Learning Software–But Why?) This one seems a little different. For one thing there are a lot of different partners involved. This article at the BBC web site (BBC launches flagship Make it Digital initiative) goes into some more detail and explains some of the other things going on. It is more than just a “give every 11 year old in the UK a piece of hardware.” From a couple of personal sources I have learned that TouchDevelop, one of my favorite tools, is going to be an important part of the software for this initiative. I knew that there were already ties to Arduino in TouchDevelop (TouchDevelop Generates Arduino Code) so this does seem like a natural next step for them. And my female students seem to like TouchDevelop. I’m told that using the new ‘Micro Bot’ to make wearable technology will be easy and will interest girls. That would be nice if it works out that way. The device and related software are still being developed though so we’re going a lot on hope and theory. On one hand I want to be optimistic about this. When I first saw this I asked on Facebook how many of these devices would get used and how many would collect dust. Reactions from friends ranged from “1 in 10 but that may be optimistic” to “does it matter as long as some get used?” I think it does matter. Big highly publicized failures make it harder to get the next innovation into schools. So I’d like something like this to have some success. There is some teacher training attached though I’m not clear on what is for teachers and one is part of the larger program and may not be part of the schools. Teachers are going to need some training in this stuff. And not just how to use it in the abstract but how to use it in the context of their schools. Cross curricula efforts would be ideal. But there are other concerns. They are saying there will be a million of the devices and no more after that. My first question is why? But more concerning is that of ongoing support. And what about the next year’s Year Seven students? There is also the issue of what do these students do next? What will there be for them in Year Eight? I know that the UK is working hard of getting more CS in the curriculum but is that in place? Is there a natural flow from year to year? Or do they expect that after one miracle year thousands if not hundreds of thousands of kids will become computer science autodidacts? That seems unlikely. It also seems unlikely that these devices will keep kids going for years until they get to the next real CS course. So while I see things to love about this, in fact I’d like one myself to work with, there is a lot to be concerned about. We’ll have to see what happens I guess. What do you think?"
"36","2015-03-14","2023-03-24","https://blog.acthompson.net/2015/03/choose-to-code-with-touchdevelop.html","Looks like a good chance to earn some money for school projects and introduce students to programming. Open to US public schools only unfortunately. More information from the Choose to Code website. Teach your students to code in just one hour. Earn $500 in classroom funding from DonorsChoose.org! The first 200 teachers to complete Choose to Code will receive $500 in classroom funding from Donorschoose.org. Here's how the program works: Sign up for Choose to Code. Create your Choose to Code class and add your students. Work with your students to complete the eight Microsoft TouchDevelop coding courses.It only takes an hour to complete all eight courses at one time or you can do each course separately, it’s up to you. Submit proof of the completed courses & your signed Microsoft Gifting Letter* and receive a $500 gift code to use at DonorsChoose.org."
"37","2015-03-16","2023-03-24","https://blog.acthompson.net/2015/03/interesting-links-16-march-2015.html","Last week I was not at SXSWedu. There were not as many tweets about it in my stream as there were from SIGCSE. I still want to go some day though. With progress reports due last week I had more than enough to keep me busy though. I’m sure the same it true for most people. Just a few links this week and two of them to my own posts. I tend not to post on the weekend or late on Friday because those posts tend not to get read. But I was out of control. The first was about the new (not yet real) BBC Micro Bot. I just had to write about what I was thinking so I did at Is the BBC’s ‘Micro Bot’ the Silver Bullet. The second was about a fundraising teaching CS opportunity for US public schools at Choose to Code With TouchDevelop. Garth Flint wrote about The value of guest speakers in CS. He’s been having a couple of them come in and talk to his students. Seems like it is working well. I had no idea there were languages for programming music until I saw this List of Programming Languages For Music: Did you know about these? How long do you spend teaching variables? I just spent three weeks. This is an interesting post from Dawn DuPriest @DuPriestMath who is self described as a “Middle School computer science / math teacher and proud geek.” Will an 'Hour of Code' Change Schools? is a good commentary but Audrey Watters. @Audreywatters"
"38","2015-03-17","2023-03-24","https://blog.acthompson.net/2015/03/2015-csta-administrator-impact-award.html","Dear CSTA Community, Nominations are currently open for the 2015 CSTA Administrator Impact Award! This prestigious award is given by CSTA to recognize an administrator who has made an outstanding contribution to K-12 computer science education. The winner will be presented with the Administrator Impact Award during the CSTA 2015 Annual Conference, July 12-14 in Grapevine, Texas. The winner and the nominating teacher will receive registration, travel, and accommodations for the CSTA 2015 conference. The award winner will also be featured in an article in the CSTA Voice and recognized on the CSTA website and Advocate blog. Award applications open today, Monday, March 16 and will close on Sunday, April 5 at 11:59 pm Pacific Time. Teachers are asked to nominate an administrator they believe has demonstrated significant impact on computer science education in their school, district, or state. The award winner's work must be shown to have broad impact and influence, and to demonstrate leadership in a variety of ways, including innovative approaches, mentoring of teachers, and visionary thinking. Submit your nomination now! For questions regarding the Administrator Impact Award, please contact customerservice@csta-hq.org."
"39","2015-03-18","2023-03-24","https://blog.acthompson.net/2015/03/do-you-want-to-write-some-code.html","OK I feel better. I was overcome with an urge to write some code. Now I have a program I should write. I want to combine my seating chart program (with pictures) with the program I use to randomly pick on students. I mean randomly pick who to call on. Whoops. But I don't have the time to work on that right now. So I wanted a ""toy program."" I remembered that I had been playing with a simple Caesar cipher program (who else remembers ROT-13?) What I have long been meaning to do was to write a program that took a string and rotated it though all 25 possible rotations (26 puts it back the way it was) and build a list so that if you suspected a Caesar substitution you could test it to see how it was rotated. Fine. So I took the code for rotating in the encoding program and made it a simple little string function. Added a loop to pass a string to the function with different values to rotate and put the result in a listbox. By reusing code I was done in about 10 minutes. And I have a toy program I will probably use once every couple of years and could probably find a web app that does the same thing in about the same time it took to write the code. But oh so much more satisfying. Who knows - I might assign it as a programming assignment someday as well. BTW Mike Zamansky has a closely related (and probably more useful post) on his blog Rot13 - Gateway Drugs Techniques"
"40","2015-03-20","2023-03-24","https://blog.acthompson.net/2015/03/interview-questions-for-computer.html","As I looked into why several posts from a while back were getting so many page views lately I realized that search values similar to “interview questions for computer science teachers” were probably responsible. The two pages in question are two where I interviewed CS educators about themselves and their work. That is probably not what most of these searchers were looking for though. Since it has been a while since I interviewed for a computer science teacher position (as either hiring manager or job hunter) I went to social media looking for examples of good questions for job interviews. People were very helpful. I quickly received dozens of questions. I’ve got the whole list below but I wanted to focus a bit on a few I felt were key. Oh and if you feel a question is missing or have thoughts on any in the list I would to read about it in the comments. A couple relate to teaching in general. Do you like kids? You’d better if you want to do a good job teaching. Kids know if you don’t like them and they will not respect you if you don’t like them. Are you ready / willing to share your ""war stories"" with the class, to help humanize the subject? This is important to me. I think teachers should make teaching personal and that means sharing your own history. What strategies would you use to help struggling students? Everyone learns differently and the great teachers are not the ones who help the students who get it easily but the ones who help the struggling students. I walk into your class..describe to me what's going on and why. Are they going to fit in with your school? Are they ok with a noisy class? That’s my favorite. Or do they favor the sit and get method of teaching? What approaches will you bring to the classroom to make this subject matter worth learning? Relevance may be an overused work in some circles but it is still important. Some are more Computer Science related. Well at least somewhat. What strategies would you use to attract and retain women and minorities in your program? If they don’t know this is an issue and haven’t thought about strategies for it they may not be ready. Why are you passionate about CS? I think passion is huge. And it can’t easily be faked. Why teaching instead of industry? Do I need to say more? Explain the role of ethics within your CS program. With the massive changes that computing is making on society today having ethics being someone a teacher thinks about and addresses is important to me. Here is the full (mostly unedited) list I received from a number of helpful teachers. It’s in no particular order. What strategies would you use to attract and retain women and minorities in your program? Experience in CS what projects you have done in college why are you passionate about CS Teaching and tutoring experience at which levels. What's your vision for the CS program here, what part do you want to play what resources do you need, which classes should we teach. Why teaching instead of industry? How would you explain what a ZIP file is? What are the common misconceptions about nested for loops? What have you learned from a student? Pick a language and tell me why it's the best language for our students. Now tell me the challenges of using that specific language with these students, and how you would overcome them. Students at this school need some help with <concept/skill>. Tell me how you would use your CS class to help them. I walk into your class..describe to me what's going on and why. How have/would you balance individual, pair and group assignments?, How does this impact assessment of your students' progress? Explain the role of ethics within your CS program. What strategies would you use to help struggling students? How would you keep the students off Facebook and games during class? One area is attitude and skills Do they like kids? How would you connect your curriculum to real world problems and core curriculum ? In what ways can your program increase students overall problem solving and critical thinking skills? Can they relate to age group of the students Can they communicate? Do they like to learn? Are they excited about learning? Are they still actively learning? Are they disciplined? With themselves and in the classroom. Can they mange their time? Not only can they teach but do they like to teach? Do they have high expectations? Do they know the tools (Windows, MacOS , IOS, Android) Can they program? Do they know the software? Can they handle large classes Is there 1-on-1 coaching Can they make a lecture interesting? Are they flexible in classroom environment Are there self-paced classes and can they work with that? What approaches will you bring to the classroom to make this subject matter worth learning? Why is Grace Hopper worth knowing about? What do you do when you've got a kid who, despite repeated attempts, just doesn't get it? What was your favorite part in the movie ""The Imitation Game""? Are you ready / willing to share your ""war stories"" with the class, to help humanize the subject? In your opinion, how does CS apply to everyone's every day lives? What does ""rigorous computer science curriculum"" mean to you? How would you implement a rigorous computer science curriculum while ensuring that students who have no prior computing experience can have a class that is both rigorous and accessible? What are the most important topics to teach the beginning computer science student and why?"
"41","2015-03-23","2023-03-24","https://blog.acthompson.net/2015/03/interesting-links-23-march-2015.html","Some great links this week. Images to use in class, a video for a TV show (yes about girls computing), and lots more. One of my best collections in recent weeks if I do say so myself. Program Computers, Not Kids is a great post by Vicki Davis aka @coolcatteacher Key line? If you see technology controlling students, then you’ve got a classroom using 21st century technology for 20th century teaching. If you see students creating and programming the technology, then you’ve got a more modern classroom approach. XNA is no more but as the phoenix rises from the ashes MonoGame, may be the replacement. the next generation . Check it out for multi-platform game creation. And a way to continue to use any XNA curriculum you may have. iD Tech and http://Code.org are giving 100 Girls Scholarships to Attend Summer STEM Program See the web site for more information http://www.iDTech.com/girls Zoomable map of undersea cables connecting the world of the Internet. Great as a topic of discussion. Ask students why Bermuda has so many connections. I suspect it is because of money. Bermuda is a world-wide center of international reinsurance. Late last week I posted a large collection of questions to use while interviewing candidates for Computer Science teaching jobs. Are you using Scratch? You may find these printable graphics of Scratch commands useful. The TV show Road Trip Nation is looking for a couple of people between 18 and 30. Roadtrip Nation and Microsoft are teaming up to send 3 young people with backgrounds that are underrepresented in the technology industry and who are interested in computer science on a cross-country adventure to discover the exciting--and growing --possibilities in the industry. Selected individuals will travel in Roadtrip Nation’s Green RV, and will interview professionals all over the country who have turned their passion for computer science into fulfilling careers. The experience will be filmed and will appear on Roadtrip Nation's long-running documentary series, which follows young people all over the world as they seek to figure out their futures. More information at Roadtrip Nation: Code Trip Application Early wearable computer: Qing Dynasty abacus ring. You know it’s cool!"
"42","2015-03-24","2023-03-24","https://blog.acthompson.net/2015/03/madeup-programming-language-for-making.html","One of the things I have been wondering about is how to make a real connection between 3D printing and learning computer science. Sure most 3D printers are attached to computers and CAD software is used to create models for printing. That is not quite computer science to me. And it sure isn’t programming. Recently I learned about a project to create a language to program 3D models for printing. It looks interesting even though it is still under development. Chris Johnson at the University of Wisconsin, Eau Claire is working on it and it is called Madeup. Madeup is a Logo-like language that can be used to “walk paths through 3D space, and then generate models based on those paths. Previews of the models are rendered on every keystroke in a WebGL canvas.” Chris has a KickStarter (https://www.kickstarter.com/projects/1975355456/madeup-a-programming-language-for-3-d-models) to raise some funds to allow him more time to finish the project up so that it can be used in classrooms. I’ve contributed a small amount so that I can get an early copy for my own use. I think the 3D renderings alone will make things more interesting than 2D graphics but being able to create a physical representation is really exciting to me. Take a look at the video on the KickStarter and let me know what you think. Does this look useful to you?"
"43","2015-03-25","2023-03-24","https://blog.acthompson.net/2015/03/fizzbuzz-revisited.html","I first blogged about using FizzBuzz in the classroom four years ago when I didn’t have a classroom and students of my own to use it with. (FizzBuzz–A Programming Question) Well times have changed and today I did assign the project to a room full of students. Briefly stated the exercise is: Write a program that prints the numbers from 1 to 100. But for multiples of three print “Fizz” instead of the number and for the multiples of five print “Buzz”. For numbers which are multiples of both three and five print “FizzBuzz”. Most of my students finished it easily during the shortened period we had today. A few in a very short period of time which is great. I should say that these are not yet experienced programmers. We are not even half way though a one semester course. Though we have covered loops and decision structures. So they know the concepts but haven’t had a lot of practice by any means. So I’m pleased with the results. What pleases me the most is that the solutions are not identical. There are at least three different ways students set up the if statements to determine what to show when. Check for evenly divisible by both 3 and 5 first. Check for evenly divisible by 15 first Check for divisible by 3 but not 5 first and 5 but not 3 second. They all work of course. The last one, while more complicated, demonstrates a good grasp of compound comparisons. That is sort of a plus. In my project instructions I asked students to display the results in a listbox. We’re not doing command line programs and haven’t covered file usage yet. We have used listsboxes though. A number of students wrote code that always adds the number to the listbox but then removes it if it is not necessary. Again a bit more complicated and probably slower than other solutions but interesting since I did not teach them how to use the Remove method for listboxes. Clearly someone (or several people) is looking things up. That also makes me happy. I like students to go beyond what is covered in lectures. Plus this is an implementation that for some reason never occurred to me. Who know but that may turn out to be helpful to me some day. I learned something knew and I love learning new things from my students. Tomorrow we’ll talk about the various solutions and I will have the students explain why they choose the methods they did. Hopefully we can have some discussion about the performance aspects as well. Should be fun. EDIT: I went looking for an image to post with this article and found one that suggested a visualization of FizzBuzz. I may assign this one next time. Divisible by 3 is blue, divisible by 5 is red, and divisible by both 3 and 5 is green."
"44","2015-03-27","2023-03-24","https://blog.acthompson.net/2015/03/morse-code-project.html","Project ideas come from all sorts of places. Textbooks, other teachers I work with, blogs, random conversations, conferences (do you know about Nifty Assignments from SIGCSE?) and more. Some of the best come from students. Not always intentionally though. The other day I caught a student playing around on a website while I was lecturing. Apparently I wasn’t doing enough to hold his interest. The website converted letters to Morse Code and back again. There are probably many of these sites on the Internet. My first reaction was that this makes a good programming project. (Does that make me weird?) So we started talking about it as a class. Student’s first reaction was “that’s hard” and “I don’t know Morse Code.” But of course it’s not really that hard to implement if you know how to use arrays. The tedious part is building an array to use for conversion.             Morse[0] = "".-"";             Morse[1] = ""-..."";             Morse[2] = ""-.-."";             Morse[3] = ""-..""; I've decided to do that for my students. After all I want them to use the array not go crazy trying to build one. Converting from ASCII letters to Morse Code using a string array like this is a simple and fast operation. Big O(1) for access. We’ve already done some work like this writing a program to count the number of times various letters occur in a string. Going the other way, from code to ASCII is a little harder. In that case we have to do a search of some kind though the array. A simple sequential search is probably the easiest way to do things. I know there are other ways. We could create a hash which would probably be faster. Or a nice binary tree (see this method – Thanks to Rebecca Dovi for the link). These methods would be more complicated though and this is a first programming class. So we’ll talk about other ways to do it and maybe in the AP Class they’ll implement something faster and/or more complicated. We will have a good chance to talk about the various performance issues and the various ways that arrays can be searched. I’m looking forward to the discussion."
"45","2015-03-30","2023-03-24","https://blog.acthompson.net/2015/03/interesting-links-30-march-2015.html","March is almost over and the snow in my backyard is measured in inches not feet. So spring appears to be coming albeit a bit late. The school year is progressing and a lot of my friends in the south spent last week on spring break. We’ll have a break the end of April up here in the northeastern US. I can wait. But for now you are here for interesting links. We’ll start with a couple of posts by Dawn DuPriest. Dawn has written up some of the things she has been doing with her students. These are great for people looking for lessons and materials (I am totally adapting her worksheet on Booleans to use with my students). These are excatly the sort of blog posts I wish more people would do. There is so much we can learn from each other. Booleans and Conditionals Prisoner's Dilemma and Conditionals Did you know that World Backup Day is March 31st. Take the pledge! http://worldbackupday.com/pledge If nothing else talk to your students about backup and backup your own files! Who knows what will happen April First! Small Basic 1.1 is here! You’ll have to be running a Windows OS more current than Windows XP to use it. The big advantage is that the API to Flickr works again. Apparently Flickr changed things and Small Basic had to adapt. Also they moved to a newer version of .NET which should allow more good stuff going forward. This week I learned about and added Tickle on Twitter at @tickleapp to my list of block programming languages For use programming drones and @Sphero robots. Speaking of programming languages did you see the Kickstarter build a programming language for generating printable 3-D models: https://www.kickstarter.com/projects/1975355456/madeup-a-programming-language-for-3-d-models I also found out about BeetleBlocks by @ericrosenbizzle , a blocks based generative art environment for 3D printing. Maybe 3D printing is a coming thing? Top 10 Differences Between High School Sports and Robotics – I love this set of observations from a parent at a FIRST Robotics event. Why A New Jersey School District Decided Giving Laptops To Students Is A Terrible Idea – a very sad tale of lack of planning and professional development."
"46","2015-03-31","2023-03-24","https://blog.acthompson.net/2015/03/every-character-matters.html","My Explorations in Computer Science class is creating web pages this week. This is a fairly short unit and we don’t get very deep at all. Our hope is to give students an idea of what is behind the web pages students use every day and introduce the concept of a markup language. This is brand new to most students but they seem to be enjoying themselves. Except when something goes wrong. In HTML it doesn’t take much to make things go horribly wrong either. In fact every little character is a potential problem. One of my favorite questions in this unit is “How do you spell src?” Why? Because in the <img tag the qualifier src is how one specifies where the image file is located. It’s pretty easy to enter “scr” by mistake. And when you do it can be hard to spot it. This is especially the case because there is just too much that can be off by a character in the file specification that one tends to look there first. For example if “Unit 4” has a space between the “t” and the “4” and a student leaves it out the file will not be found. This is the sort of nit picking that students are not used to making. To them “Unit 4” and “Unit4” mean the same thing and they don’t automatically understand that the computer doesn’t see it that way. All of this causes some level of frustration for students. I’m tempted to suggest this teaches “grit” which seems to be a common topic of discussion in some education circles these days. And maybe it does but I worry that it teaches frustration and that “computers are hard” which is the opposite of what I want. So I work hard at showing students how to avoid these problems and how to solve them once they are found. Making it clear that these are common errors and not to be embarrassed by them is also important. Overall though they do need to learn to be explicit and careful when writing any sort of code. The computer, I remind them, is pretty stupid and has trouble understanding things that people handle easily. Every character really does matter to the computer. I think that learning this attention to detail is helpful to students in the long run. They’ll be dealing with computers their whole lives and it is good to set expectations early."
"47","2018-03-05","2023-03-24","https://blog.acthompson.net/2018/03/let-computer-grade-projects.html","It seems like a great idea – have the computer automatically grade student projects. Save all that boring work. Looking at all those projects is a pain. Why not have the computer grade them? It’s what happens in a lot of courses. Harvard’s CS50x online version does it so it must be great. In fact a lot of huge courses in major universities use automatic grading software. What could be wrong about all of that? I confess that its a very tempting idea at times. I’ve played a little with software looking at projects with some simple HTML projects. For rote stuff like making sure all tags are present and that open tags have matching closing tags is pretty straight forward. I still want to open the pages in a web browser to see what they look like. Programming projects? I’m not so sure about automated testing for students. Mike Zamansky blogged recently about a session at SIGCSE (Sigcse2018 - Malloc Lab) where a professor had to deal with students gaming the grading system. This is one of my biggest concerns with automatic grading software. It is easily “game able.” Getting to the destination is only part of the story. It’s pretty important to understand how students get the results they get. We, as educators, only learn so much by seeing the results of a program. We really need to understand how the programs process inputs and generate outputs. When we read student code we learn a lot about our students. We learn what they know and don’t know. We learn how they implement algorithms. We also see what they understand and don’t understand. In fact we also get to know our students better. We learn their coding the way English teachers learn student's writing Students benefit as well. We can give them a lot more feedback than automatic grading routines can give. We can also modify how and what we teach based on what we learn from reading their code. So for now I think I will put up with the extra work. The extra benefits are worth it."
"48","2018-03-06","2023-03-24","https://blog.acthompson.net/2018/03/learning-by-coding.html","Throughout my career I have increased my knowledge by working on projects. As a teacher who teaches mostly beginners I don’t see a lot of complicated code. No I take that back beginners write lots of overly complicated code. What I don’t often see, because I don’t often need, are new language features, library routines, or good new ways of doing things. Now sometimes I have students show me new things. Sometimes they stumble upon them. Sometimes they go on the internet looking for ways to do things. And sometimes they learn them from parents in industry. These are all good things but sometimes I still feel like I am stagnating. That I am not learning enough. Perhaps even falling behind. This last week was school vacation. That means time to think ahead and to look at things differently. I did a bunch of reading. Mostly I read papers from SIGCSE. Yes, I pay money for the privilege but its worth it to me. I also wrote some code. I’ve got to grade Explore Performance Tasks from my AP CS Principles students. Since feedback is important I decided to write a program to help me generate that feedback. What was involved isn’t really that important. In fact I suspect that writing the code isn’t going to save me as much time as it took to write the program. What is important, to me at least, was that I explored some new things. A new Windows Forms object (CheckedListBox for the curious) for one thing. I also got in some practice with ForEach. That’s not new to me of course but I did think about it in some new (to me) ways. It probably doesn’t seem like a big deal. It’s not going to get me a raise or a new job or even add something new to what I teach in my current classes. On the other hand it is the sort of thing that helps keep programming fresh, interesting, and fun for me. It may turn out that some student will come to me with a problem that needs just the sort of things I played with last week. That would be great. But even if not, continuous learning is a good thing."
"49","2018-03-15","2023-03-24","https://blog.acthompson.net/2018/03/acm-and-csta-announce-2017-2018-cutler.html","Some cool projects which you can read about here. For more information about ACM/CSTA Cutler-Bell Prize in High School Computing, visit http://www.csteachers.org/CutlerBell or http://awards.acm.org/cutler-bell/. ACM and the Computer Science Teachers Association (CSTA) have announced the winners of the 2017-2018 Cutler-Bell Prize in High School Computing. Five high school students were selected from among a pool of graduating high school seniors throughout the US who applied for the award by submitting a project or artifact that engages modern technology and computer science. A panel of judges selected the recipients based on the ingenuity, complexity, relevancy and originality of their projects. The Cutler-Bell Prize promotes the field of computer science and empowers students to pursue computing challenges beyond the traditional classroom environment. In 2015, David Cutler and Gordon Bell established the award. Cutler is a software engineer, designer, and developer of several operating systems at Digital Equipment Corporation. Bell, an electrical engineer, is researcher emeritus at Microsoft Research. The winners are Sreya Guha, Castilleja School, Palo Alto, California; Amir Helmy, Eastside High School, Gainesville, Florida; Amy Jin, The Harker School, San Jose, California; and Benjamin Spector and Michael Truell, Horace Mann School, Bronx, New York. The winning projects illustrate the diverse applications being developed by the next generation of computer scientists. More at https://www.acm.org/media-center/2018/march/cutler-bell-prize-2017"
"50","2018-03-16","2023-03-24","https://blog.acthompson.net/2018/03/impressive-high-school-computer-science.html","ACM and the Computer Science Teachers Association (CSTA) announced the winners of the 2017-2018 Cutler-Bell Prize in High School Computing recently. Five students from four schools were given this award this year. One of the students was from a public school. The rest from independent schools. The public school has magnet programs but I don't know if the winner is part of those programs. What does that mean? My best guess is that independent schools allow more flexibility for projects like this. Not just independent schools of course, schools like the Bergen County Academies and schools like Thomas Jefferson in Virginia clearly have a lot of flexibility, extra resources, and are open to encourage things like this. TJ had an awardee in both of the first two years of the award for example. But they are exceptional schools in more ways than one. They are not your typical public school. Looking back on the first three years of awards almost all of the awardees have been from either independent schools or public magnet schools. It’s not just computer science though. Take a look at the schools who have had the most awardees in the Westinghouse-Siemens research competition. You'll see some familiar school names there. Most of them magnet schools. My friend Mike Zamansky (blog Twitter) ways these awards say more about the students than the schools. I’m sure that is the case to some extent. But why so many of these students from magnet or independent schools? I think environment is important. If it were all about the student we would not see these clusters of schools that produce an outsized number of awardees. I don’t know if the motivated students choose these school or the schools themselves develop this motivation. What I do think is that these schools have the flexibility to enable and support these students. They also have a history of producing “winners” and a culture that sets high expectations but also provides help for students to meet those expectations. Sure students from “regular” comprehensive high schools can and do earn these awards. That is not the way to bet though. The question in my mind is how to we add the flexibility and support to more students at more schools?"
"51","2018-03-19","2023-03-24","https://blog.acthompson.net/2018/03/advanced-placement-computer-science-is.html","Two controversial assertions in that title. That APCS is necessary and that it is evil. I thought about leaving this post at that and seeing what sort of conversation started but that didn’t work on Facebook so I figured it would not work here either. To start things off I should say that I am not a fan of the AP CS program. It’s too limiting. It is too tied to an end of the year test for me. The AP CS Principles course has more freedom than the AP CS A course does but still depends on an end of year test (and two performance tasks). Those performance tasks take up a lot of class time. I really like project based learning and I would love to have more time for larger projects. APCS courses suck the air out of the environment for other, more interesting to me, long term (year long) courses. I think there are better ways to prepare students for later CS education and careers. That’s the evil part. On the other hand, the Advanced Placement brand carries a lot of weight with school administrators, school boards, parents, and other interested parties. It’s often an easy sale to these people as an argument for a new CS course. If we want to see “CS for All” APCS can be very helpful. But is is still necessary? We have some well accepted starter courses in high school CS. Exploring Computer Science for one. Code.Org’s CS Discoveries is gaining some fans as well. They’re both good starters. In some ways I think they may ultimately lead to more high school Computer Science than AP CS will. But we’ll always want an advanced course to be the capstone of sorts. Should AP CS be that course(s) or should we have something more open-ended and less constrained by an exam? What would you like to see at the top of the high school CS curriculum? Is AP CS the right answer? Is it a necessary course?"
"52","2019-12-27","2023-03-24","https://blog.acthompson.net/2019/12/looking-back-on-computer-science.html","Christmas break for me until 6 January 2020 and with Christmas over I have some time to think. 2019 was an intere3sting year in CS education. States continue to adopt more CS in K12. Teachers are still in short supply but so to are schools looking to hire them. Schools or perhaps school administrations and school boards, are slow to roll out more CS education. It looks like more schools are offering it which is great. But they are net requiring it so while they meet to checklist of offering CS it is still not for everyone. It’s going to take a while. AP CS Principles continues to grow in enrollment. I try to get excited about that but it’s hard. AP courses attract too small a subset of the over all population. While there is much to like about AP CS Principles I can’t help but believe we need some more interesting CS courses. Something with depth and an interesting and motivating outcome. The Create task is not that. Every year I think that the Internet of Things will take off in CS education. The mix of bytes and atoms seems like a natural to me. That didn’t happen in 2019. Perhaps because there is no one promoting it. I plan on retiring from the classroom in the spring. Maybe after that I will have to time to really dig into it. Who knows, maybe I’ll come up with some good project ideas. Cloud computing grew a bit in interest in 2019. Amazon Web Services has done some great work on this. Uptake has been slow but at some point it may take off. The problem with cloud computing, and perhaps IoT, is fitting it into the curriculum. It doesn’t fit easily in either AP CS course and too many teachers are working and teaching too many preps to adopt major new topics. Artificial Intelligence took a jump in interest that surprised me a bit. There was a huge birds of a feature on the topic at last summer’s CSTA conference. AI for K12 has its own website, mailing list, and lots of people interested. See AI4K12.org for more on that. What sort of Artificial Intelligence can you teach in K-12? Mostly how it is used, how to use existing AI tool and machine learning training systems. Developing real AI takes a lot of math that not many K-12 students have yet. Still, it is very important that students learn this much. The need to know what AI/ML is, how it is used, and discuss the ethnical considerations involved. As always,the new year is full of potential. K12 CS is on a growing path that seems to have some momentum behind it. I can’t wait to see what it brings."
"53","2022-12-04","2023-03-24","https://blog.acthompson.net/2022/12/when-computers-write-code.html","For most of my career I hive been hearing that some day computers will write all the code and human programmers will no longer be needed. Or at least, not as needed as today. Are we getting close to that time – finally? And if we are what does it mean for teaching computer science? Recently, the CS education world has been discussing GitHub Copilot. GitHub Copilot uses the OpenAI Codex to suggest code and entire functions in real-time, right from your editor. While some of the discussion has been about the suit against Copilot (GitHub Copilot litigation) much of the discussion has centered around what it means as a tool for cheating by students. More recently there has been some visibility to the use of ChatGPT to write answers to programming questions. For example, this year’s Advent of Code seems to have been “invaded” by ChatGPT climbing the leaderboard by answering the problems is seconds. (Adventures With ChatGPT: Advent of Code Edition | Tabs, Not Spaces) Of, perhaps, even more concern to teachers, ChatGPT seems to be somewhat satisfying as a solution to Advanced Placement Computer Science A questions. (ChatGPT passes the 2022 APCSA free response section) I’d be very surprised if students are not already using these tools. This brings up several questions. One is - how do teachers keep this from happening? We probably can’t. So how do we detect when it does happen? Do we use these tools ourselves to see what sort of code is generated for our assignments? Seems like yet more work for people who don’t have enough time as it is. Another question, which students are sure to ask, is what is the purpose of students writing code that artificial intelligence can write easier and faster? If you read the article above about putting the APCS A questions through ChatGPT you’ll see that the results are not prefect. So for the time being it looks like good programmers can still write better code than the AI. How long that will last is anyone’s guess. If history is any guide, it will not last long. I remember when optimizing compilers started generating more efficient than the world’s best assembly language programmers could write. It was painful for some and a real boon for others. It didn’t completely do away with the need for assembly language programmers but it did reduce the need. What do we tell students who ask “what’s the point of learning to code?” My thought is that we talk about the need for human oversight of AI generated code. We need to verify that it works as we want it to work and that means we need to understand code. We’re also going to need to fine tune generated code for some time to come. Understanding code will also help write good instructions for the AI that generates code. Again, understanding how code works is important for that. Of course, there is a lot more to computer science than just writing code. Programming languages are the language of that study. Learning assembly language still helps people understand how computers and computing works. So will learning higher level languages. The AIs will get better. Our conversations with students will get harder. Cheating is always going to be a challenge. We live in interesting times."
"54","2022-08-16","2023-03-24","https://blog.acthompson.net/2022/08/artificial-intelligence-and-cs-education.html","It;s seems like artificial intelligence has been “10 years away” for the last 40 years. Back in the mini computer days every computer was custom and configurations were designed by people. I worked for a company that believed that configuring computers was beyond the ability of computer software. From there I went to a different company that was developing rules based artificial intelligence. Using a special language called OPS5 they wrote software that configured computers faster and more accurately than people. Rules based AI was dependent on people to know the rules and properly prognathism. Limitations became apparent. Today we have machine learning which basically means the computer is developing the rules. Rules is probably not the best definition though. We’re starting to see AI grow into many more areas than ever before. Think self driving cars for example. It’s becoming clear that understanding the world today means understanding something about artificial intelligence. What does that mean for K-12 computer science education? The AI3K12 project is working on answering questions about teaching AI in K12. They have a lot of resources now and under development. For now, most of the education is about AI. What it is. How it worse conceptually. What is it being used for. And, perhaps most importantly, what does AI mean for society and the future. The math and science of creating AI platforms s a bit too much for most high school students let alone younger students. That can wait. Although there are tools that exist that students can use for their own projects which is pretty cool. I am very concerned about bias in artificial intelligence (Bias in Artificial Intelligence. Inequality, racism and discrimination is just one article you will find from an internet search for “Bias in artificial intelligence) Systems that do not recognize that people of color are actually people is only one example Bias against women or various other groups of people can be baked into AI systems if developers are not VERY careful. Also, how is AI being used? Facial recognition and privacy have become areas of concern in many areas and applications. These are more than just ethical issues, though ethics has got to be a core part of what we teach, as many other problems are unconscious bias or the result of innocent but false assumptions made by people who mean well but lack understanding of their own environment. Its a reason we need a lot more diversity is AI and CS as a whole. We have to teach students to think about these issues and to think beyond their own identities and beyond “the way we have always done it.” Companies in industry are taking new looks at AI as well. One useful resource is Microsoft's framework for building AI systems responsibly - Microsoft On the Issues. The blog post talks about some issues Microsoft has faced and how they are addressing them. Companies are asking the “should me” question as well as the “can we” question. We need students to think about those questions from the start. The document itself is at Microsoft-Responsible-AI-Standard-v2-General-Requirements-3.pdf and makes interesting reading. It could start some class discussions as well."
"55","2022-07-15","2023-03-24","https://blog.acthompson.net/2022/07/my-day-two-at-csta2022.html","Day two started off great as I connected with several people from my home CSTA Chapter –CSTA New Hampshire. The CS community in New Hampshire is growing and the CSTA Chapter has been a part of that. I’m planning on getting more involved in chapter stuff in the future. My first session of the day was about teaching ethics when teaching artificial intelligence. Jeremy Keeshin (a last minute replacement as I understand it) from CodeHS was the presenter. Seems like some good small group discussions took place. Maybe I was tired but I didn’t get into it very well. My fault. Wasted opportunity. I did get a copy of Jeremy’s book “Read Write Code” which I look forward to reading. Next up for me was a session on preparing the future developers of the metaverse. The presenters were from Carnegie Mellon. First I have heard of XR as a generic term to include Augmented Reality, Virtual Reality, and Modified Reality. We had some really interesting discussion of using virtual worlds in school. One school had a virtual birthday party in Minecraft. Minecraft has moved from pure play to an educational platform. Students are picking different virtual worlds to play in as they age.It occurs to me that younger kids are building things in games like Minecraft and Roblox but older students, especially boys, and moving to games like Call of Duty which are more destructive. Something to think about. My number one to look more into is Arena XR – An Augmented Reality Edge Network Architecture. I really enjoyed this session and had some good interactions and learning with my tablemates. Slides for this session are at CSTA2022 NoStudentLeftBehind.pdf - Google Drive Lunch break and more time in the exhibit hall. I got a close look at the Jacdac devices for use with a Micro:Bit. I may splurge and buy a starter kit. Note that I posted a brief look at Microsoft and other big companies exhibits at Amazon, Google, Meta, and Microsoft at #CSTA2022 First afternoon session was about writing for Hello World magazine. I was proctor and arrived before it started but after most people entered the room. Watching the clock is important as it is so easy to get distracted with so much going on. Anyway, the slides for this talk are available at CSTA_Writing Workshop Presentation.pptx - Google Slides A lot of good stuff here. I hope this gets more teachers to write for the magazine. Next up was a session on cryptography with an exercise in creating a Pringles can Enigma machine. We started the session with an brief introduction to Cyber.org and with an introduction to the Pigpen Cipher. (Note that this is one of the ciphers covered in my (PDF) free Tiny Book of Simple Cryptography) We had some fun creating our mini Enigma machines and working though how they work. We only used one rotor but I brought home some sheets to make a larger one with a larger can when I get home. Overall, a pretty good day. Some very good sessions, some good conversations at the exhibit hall, and many amazing face to face conversations with friends. I am exceedingly glad to be here this year."
"56","2022-07-15","2023-03-24","https://blog.acthompson.net/2022/07/amazon-google-meta-and-microsoft-at.html","I blog about what interests me or stirs my curiosity. One thing that fits that is what are the really big tech companies doing to support CS education. So I am going to write briefly about the presence of Amazon, Google, Meta, and Microsoft (alphabetical order). Anyone else notice that we never see Apple at CSTA? All of these companies have sessions at their booths and as regular conference sessions to talk about what they offer. If you are at CSTA you should at least stop by and see what they have to offer. It’s a lot. Amazon and the Amazon Future Engineer Program Amazon had one of the large end cap booths with a lot of people and materials. Their main emphasis was the Amazon Future Engineers program. This program offers curriculum for all levels of K-12 as well as resources and opportunities for teachers. Amazon Future Engineer is a comprehensive childhood-to-career program aimed at increasing access to computer science education for children and young adults from underserved and underrepresented communities. Google and programs' for CS Teachers Another big booth on an end cap. Lots of color and fun graphics. And swings! Also free messages. The big thing here is Google’s CS First program. This is a great collection of curriculum and supporting resources that can be used during the school day or as an afterschool program Meta and Meta Engineer for a week. You’re probably not surprised that the link for more information on this is at Facebook. Engineer for the Week | Facebook but also at Engineer for the Week (fb.com) The curriculum has a strong “coding for good” component. Started in 2018, Meta's Engineer for the Week is a free program that introduces engineering to learners (ages 11-18) historically underrepresented in STEM. Over the course of 15 - 20 hours, learners work alongside adult facilitators to build tech prototypes that address a social issue of their choice. Microsoft and MakeCode, MakeCode Arcade, and Minecraft Also a nice sized booth on an end cap. Not as fancy as Google’s it gives the impression it was designed by software people not marketing experts. The emphasis was on writing code, especially with micro:bits, using MakeCode, games with MakeCode Arcade, and teaching CS using Minecraft. Lots of things including Micro:bit powered arcade games to touch and explore."
"57","2022-07-14","2023-03-24","https://blog.acthompson.net/2022/07/day-one-csta2022.html","Well it was day one for me. I know that some people got in yesterday or earlier either because they were taking a workshop today or were part of the Chapter Leadership program. For me, today was about getting settled, meeting with old friend (and making some new ones), and the exhibit hall. Wow! has the exhibit hall grown. The conference as well. Apparently there are about 1700 attendees registered. I remember thinking 300 was big some years ago. Looks like about half the attendees are first timers as well. That is amazing and wonderful My trip was good. I checked in for my flight with an app. I paid for the El (Chicago’s mass transit trains) with an app, and checked into my hotel with an app. Travel seems to be all about the apps these days. The exhibit hall was open soon after I arrived at my hotel so I went right in after registration. Proof of vaccination is required to attend and wearing masks is required as well. I’m good with that. I hear a lot of people got COVID at ISTE and these measures make me feel safer. It seemed to work at SIGCSE! I met many old friends while in the exhibit hall and walking around the conference. Catching up was great. We also talked about CS issues of course. So great to have people who share ideas. I couple of people I have not met in person before but who I know from social media visited with me as well. It is so good to put faces with names and be able to get to know each other. If you are at CSTA and are a blog reader or Twitter follower I would love to chat with you. I walked through the exhibit hall several times to get a feel for what themes there are. I’ll be blogging for about that as the conference goes on but I’ll share a few first thoughts here now. Physical computing is big in the exhibit hall. Lots of robots but also many other programable gadgets. Cyber security was represented by several exhibitors as well. We really need to teach more of that in the US so I was glad to see thing. Several artificial intelligence programs were being highlighted in the exhibit hall. I want to dig into that more this conference. Lots of curriculum providers are exhibiting which is not surprise. They’ve all be exhibiting at CSTA for several years. The companies with hardware all have curriculum as well. It’s not like the old days when people dumped some hardware and said “here. Figure out something interesting to do with this.” Progress I think. Google, Microsoft, Meta, and Amazon have booths as well. There is a set of swings in the Google booth (Pictures tomorrow) I’ll write about their programs as well when its not 11PM my body time after getting up at 6AM and travelling all day. Today was everything I wanted my first day at in-person CSTA. Still more friends to meet and make and lots more to learn."
"58","2022-03-06","2023-03-24","https://blog.acthompson.net/2022/03/final-thoughts-on-sigcse-2022_0230979390.html","I had a great time at SIGCSE 2022. As an introvert I probably suffered less from not being with people than many but after two years I really needed to be with people. I was able to connect in-person with friends I had not seen in years. Some a decade or more. That was truly awesome. The community building of an in-person conference should not be understated. I had some great “hallway track” conversations. This is not nearly as easy in a remote conference and it contributed to what I was learning. Besides being with people I really did want to learn. So my hallway conversations were not all catching up with friends. I was able to ask a lot of questions about the work various people were doing. Things often outside the scope of a specific talk or panel that I attended. I visited with Ruthe Farmer of the Last Mile Fund. The Last Mile fund is “investing in a broader group of students already committed to technology and engineering fields, providing support for challenges they face beyond their control, and incubating them to be the next generation of innovators.” It’s an amazing program that helps students who are missed by a lot of programs giving them the help they need to complete their educations. They are particularly focused on women but have some money for men in community colleges. Check them out if you know someone who needs a little help making it through. It seemed like there were multiple interesting sessions in every time slot. Where I had to choose I picked panel or supporter sessions over paper sessions. Mainly that was because with paper sessions I could at least read the paper. Not the same thing but it was that or miss out on a panel completely. The elephant in the room may have been COVID and masks. COVID times was a topic of conversation but masks? Not that I heard. The conference organized stated that even though CDC guidelines had changed the attendees had signed up expecting everyone would be masked so they were going to stick with that. I think it was the right decision. While masks are not always comfortable and they make it a little harder to recognize people it added to comfort levels for many attendees. Including me. Sessions were split between the Rhode Island Convention center and the Omni hotel. The two are connected and traveling between them was pretty easy. I have a bias to all being in the same building but honestly I have walked further between sessions in some convention centers so there is that. The rooms themselves were large, accommodating people sitting apart if that made them more comfortable. I suspect that is what required using both facilities when one might have divided large rooms under normal circumstances. Hybrid sessions where some or all of the presenters were remote were interesting. It worked pretty well overall. I hear there were some that were played recordings with no interaction but I didn’t “attend” any of them. The real bonus of a paper session is being able to ask the author questions so that is important. Mike Zamansky has more on this on his post at SIGCSE 2022 - Conference format. I left Providence with a lot to think about and some great memories of visiting with people face to face – even with masks. Now to renew my passport so I can attend next year in Toronto!"
"59","2022-03-07","2023-03-24","https://blog.acthompson.net/2022/03/what-should-apcs-really-be-about.html","Perhaps my favorite panel of SIGCSE 2022 was debating the question of should the APCS A course switch its language from Java to Python? During the discussion it occurred to me that there was a bigger question that had to be answered first That is “what is the purpose of APCS A?” Now the normal and obvious answer is that it should be equivalent to university CS1 courses – the first course CS majors take in university. That's too easy and also not helpful. What should CS1 be all about? Traditionally, CS 1 was a course taken by CS majors and was preparation for the rest of the CS curriculum. Today it is not that simple. Increasingly, other departments in other disciplines are wanting their students to take CS1 or something much like it. Engineering, astronomy, physics, and business are just some of the areas where programming is growing as a tool. The CS department is the best department to teach this first course. What does that mean? Well, for one thing it opens the door to more programming languages. While Java and C++ are the big languages for a next course for CS majors the same is not true for other departments. Without getting into the language discussion (until my next post) we need to look at what concepts are needed and ask if they are similar enough for everyone. Owen Astrachan suggested at SIGCSE that the “A” in “APCSA” has traditionally stood for “Algorithm” but should now stand for “API.” Not that we ignore algorithms of course but that APIs were the way computing was increasingly being done. If we look at how non-CS programs are using programming we see that this is very much the case. This probably means that for CS to remain and improve as a teaching, learning, research tool it has to focus on APIs as well. That is probably only one example of things we should look at changing (in APCSA and CS1) I get the impression that many university departments are already changing and looking at changes as they see their CS1 course serving more than just CS majors. Circling back to APCSA in particular, are all of our APCSA students going to major (or minor) in CS? Probably not. Many? Perhaps. But a majority are probably going to move into other areas of study. To we ignore their needs to focus only on future CS majors? That seems a recipe for turning students off from computing completely. High school courses should never be weed out course. One can have a rigorous impactful course without scaring people away from the field. There is a lot of thinking about what CS1/APSCA should be about and I want to learn more about how university departments are adjusting to today’s needs for students. Keeping things the way they are today just because we have always done it that way seems a lot less than ideal. What is your thinking? What should CS1/APCSA be focusing on?"
"60","2022-03-08","2023-03-24","https://blog.acthompson.net/2022/03/apcs-ajava-or-python.html","There is a lot of discussion about moving the Advanced Placement CS A exam to Python from Java. The Collegeboard is reluctant to do so. They see APCSA as the equivalent to CS1 or the first course for CS majors in university. They cite research that indicates that APCSA students for very well in CS2 (usually data structures) and that CS2 is almost always taught in Java or C++. On the other hand, at many universities the purpose of CS 1 is growing and the audience is widening to include students from many different majors. I wrote about that yesterday (What Should APCS A Really Be About?) Mike Zamansky took it on on his blog as well (SIGCSE 2022 - What language APCS-A part 1 - the intent) It seems like we have to first agree on the intent or purpose of APCSA (and CS1) before we discuss language. Given that agreement is never going to happen – CS people can’t agree on anything. So I will start my discussion from the standpoint of APCS A should increase diversity in computer science and prepare students for using computing in CS as well as other disciplines. This is a concepts first decision not a language first decision. I feel that non-CS majors need the same concepts as CS majors. SO what are those concepts? Not a lot changes except that in computing widely APOs are bringing far more critical than they used to. They enable programmers to easily do things that used to be hard. They also more things we used to do early to later in a CS major. Sorting is one example. With so many libraries to do sorting why should we spend a lot of time in a first course having students write sorts? We know they sorts they will write are not going to be up to the standards and power of sorts they can call that exist already. Algorithms? Surely there are other algorithms we can focus on to help students learn to study problems and developing algorithms? So if we want to increase the number of students who study computer science beyond the limited scope of would be computer science majors preparing students for CS2 loses some power in the argument. And Python gains some because of all the APIs that are available and all the other disciplines that are already using it. At SIGCSE, the panel members arguing for Python talked about much of what I write above. They also talked about Python avoiding some of the “cruft” of Java. How much easier “Hello world” is in Python for example. The “other side” focused mostly on the costs of changing and not specific criticisms of Python. There are things about Python that people do raise. It’s dynamic typing rather than Java’s strict typing. I’m a strict typing person myself but I can be open minded. Also the use of white space. Now it is not clear to me that either white space or curly braces have advantages over the other so I see that as a wash as well. The post panel poll, FWIW, had 57% saying to switch to Python and 28% saying “keep Java” with the rest being answers all over the map. I have no dog in this fight since I no longer teach AP CS but I am leaning toward that it is time for a change. I like the idea of a high school course, even on modeled on a university course, preparing a wider range of students for a wider range of majors. The Collegboard is going to do what they want and the costs of changing may be as big a factor as anything. They are also driven by what universities do and as universities revisit the purpose of CS1 that will have more impact on anything anyone in high school has to say. Mike Zamansky has a different take on this at SIGCSE 2022 - APCS-A Language strengths and weaknesses"
"61","2023-02-12","2023-03-24","https://blog.acthompson.net/2023/02/cs-studentslearn-your-ide.html","Eugene Wallingford had a great post on WHAT WHAT DOES IT TAKE TO SUCCEED AS A CS STUDENT? It’s got a lot of good advice and I recommend it to students in high school or university. For now I want to focus on one or two pieces of his advice. Specifically, “Get to know your programming environment” For the most part, in class, teachers have time to do an introduction to the development environment but not much more. We run through “Hello World” or similar to walk students though creating a project entering code, and running their first program. That;s all we have (or perhaps all we make time) for. Typically there is a lot more to a development environment than what we show students. Even a simple IDE like IDLE for Python or Visual Studio Code has a lot or options and functions we don’t go over in class. Students who spend some of their own time exploring their development environment are going to have an easier time though out their course. Indeed, throughout their CS career. Related to learning your development, Prof Wallingford suggests keeping your IDE open while reading through textbooks or other resources. That lets one more easily try out code examples while studying. That goes a long way towards understanding what one is reading. When I review textbooks or other teaching resources I always run the code examples for myself. In part , to see if they are correct of course but also to see for myself what students will see and learn from the example. Writing code that is not specifically assigned for a course is always a help for learning. If a student takes the time to experiment with a project of their own interest they will do far better in the course they are taking."
"62","2022-09-03","2023-03-24","https://blog.acthompson.net/2022/09/names-have-power-names-and-programming.html","""A rose by any other name would smell as sweet"" William Shakespeare. There are cultures where people have a sort of public name and a secret or true name that is rarely shared because knowing ones true name gives people power over them. In fact, knowing a name is powerful in all cultures. Consider the difference between calling “hey you” versus calling a child by their actual name. Which way draws them up sharp? Naming is important in computer programming as well. It’s not always as easy or as simple as beginners assume it is. Mike Zamansky’s post Subtle Errors gives a good example. Having more than one item with the same name causes the sort of ambiguity that computers do not handle well. Some names (identifiers as we often call them in programming) have special meanings. Getting names slightly wrong can cause other problems. A name can provide a great deal of information to a programmer. To the compiler names are pointers to more information. A variable name identifies a location to the computer. Other information about the data stored in that location is specified in other ways. The computer doesn’t care what characters make up the name. That it is unique is important but not the characters involved. In many programming languages the case of the letters makes two names completely different. People tend to see them as identical. Beginners often think that “the computer” pays attention to everything in a program the same way people do. That’s not the case though. I’ve had students write comments in their code believing that the computer will read the comment and perform the action. They may also assume that naming conventions, starting all integer valuable names with “int” for example, will influence the computer. Again, not usually the case. [Note: back in the day, any variable starting with one of the letters “I” through “n” was automatically an integer.] Names/identifiers can communicate a lot of information to programmers. They are pretty important for sure.It is easy to gloss over them and minimize their importance. Getting them right though is something worth spending time on."
"63","2022-08-17","2023-03-24","https://blog.acthompson.net/2022/08/a-spoon-full-of-computer-science.html","I was thinking about data science lately. The problem is that I don’t know much about data science. I learned about data bases in school and worked with them some in industry but that was mostly about how they work internally. I used to give talks on how B* Trees worked and I could (back then) give serious talks on how databases do journaling. But I never did much of anything with real work data applications. Not professionally at lease. But I do like playing around with data and Excel is my friend. So my first thought was to look at Bootstrap’s data Science curriculum. I did find their definition: data science the science of collecting, organizing, and drawing general conclusions from data, with the help of computers. Sounds good to me. I guess I have been doing some data science after all. Looking though the curriculum had me thinking about Mark Guzdial's work with teaspoon languages. It feels like there are some things Bootstrap and Teaspoon languages have in common. The idea of teaspoon languages is to add some computer science to other subjects to broaden participation in CS. Bootstrap is using data sets from other subjects in their curriculum. So both are using CS and programming to help students learn about a lot more than just computer science or the subject they are taking. Note that Bootstrap also has Bootstrap Physics! and Bootstrap Algebra. While I was doing all this thinking Mike Zamansky posted this post - Teaching CS - How early and how often? Mike askes a lot of practical questions about fitting CS into grades k through 8. It’s easy for us zealots to say that CS should be in every grade and expect K8 teachers to make magic but that is not really fair to anyone. Maybe the answer is to have some teaspoons of CS in existing subjects. It doesn’t make a lot of sense unless adding this CS makes learning the subject it is imbedded into better though. We’ve seen for years in higher education that computer science and [some other area of study] can be a big win. Can we move some of that down to lower grades? Probably though it is going to take some time and some innovation. It’s worth doing, in my not so humble opinion. We use math in other subjects. We use reading and writing in every subject. Might not CS help teach/lean a lot more subjects than just programming? I think so."
"64","2022-07-12","2023-03-24","https://blog.acthompson.net/2022/07/dice-simulations-and-math.html","My friend Andrew Parsons send me this link to an interesting video The unexpected logic behind rolling multiple dice and picking the highest. Now I love simulating dice on the computer. Creating a Die class is one of my favorite projects for teaching objects and classes in programming classes. I’ve long kept example of dice with other than six sides around to help students think outside the six sided dice box. So this video grabbed my interest. Basically the presenter is looking at what happens if you roll two dice and pick the higher value of the two. What sort of advantage does it provide?. So this gets into some probability and some related math. One of the first things he does is to look at the problem through a simulation (His Python code is here) OK now I personally would be happy with the simulation but of course that gives one the “what happens” but doesn’t go into why it happens. The math does that. The math is presented in an interesting way if a bit fast for me. I can see it being useful in an algebra or statistics class though. Lots of good math stuff. (Can I say “math stuff?) For a computer teacher, the things this goes though are ripe for simulation problems though. What is the result for two dice? For three dice? And what about dice with more sides than six? What do you think? Have students watch the video at home and build their own simulations to compare with the mathematical results? BTW the dice at the top of the post were made with a laser engraver that I have been playing with. Figured dice in binary would be fun."
"65","2022-07-11","2023-03-24","https://blog.acthompson.net/2022/07/getting-ready-for-csta2022.html","The CSTA Annua Conference is only days away. I’m pretty excited about it. It’s my first plane ride since CSTA in Phoenix in 2019. That’s a long time for me. Or was. The online conferences have been excellent but there is nothing like seeing people in person. Attending SIGCSE this past winter really brought that home to me. I’ve taken a couple of quick looks at the schedule but I still have to finalize (as much as possible) what sessions I want to attend. I am not doing any workshops this year so I don’t get in until the 14th. But the rest of the conference should be full for me. If not regular sessions, I am hoping for some great conversations in the “Hallway Track.” Packing is something I will probably not do until the day before I leave but I’m making decisions about what to bring. I got a new phone for example. Battery life on my last on was horrible and my new one will go all day. I’ll bring a laptop as well. I like to take notes for my blog posts and also to Tweet live. Since I am not presenting one should be enough. I tend to bring a backup if I am presenting. I’m loading some books onto my Kindle for reading on the planes. I have charging cables ready for all three of course. And an extension cord with USB plugs as well as standard sockets. Don’t leave home without one! In previous years I packed extra cables for just about anything I could think of because you never know what someone will need. I’m going light this year. My backpack just got to heavy. Plus I want room for swag. I do plan to come with badge ribbons (Troublemaker and “I follow AlfredTwo”) if I can find them. Probably some business cards. I recommend these if you have them BTW. I’m looking forward to the exhibit hall as well. I already know some booths that are “must see” for me. I am told that Microsoft will be there with some of their new Jacdac kits and I want to check them out. I am hoping that there will be some booths on cybersecurity (CYBER.ORG is a sponsor so they will probably have a booth). I’m always up for robots and I expect to see some of those as well. If you’re there I hope you’ll find me and say “hello.” If not, follow the #CSTA2022 hash tag on Twitter and visit my blog for updates along the way. So are you ready? What are you excited about?"
"66","2019-09-05","2023-03-24","https://blog.acthompson.net/2019/09/ncwit-award-for-aspirations-in-computing.html","This is a great program for high school girls interested in technology. I have had several students get awards at the state level and they all say it has been a good thing for them. Hello Educators! Applications for the NCWIT Award for Aspirations in Computing are now open! The deadline is November 5th, 2019. As an educator, you play a pivotal role in supporting the next generation of technologists. When 2018 AiC Award recipients were surveyed about their motivation to apply for the award, 65% of respondents named outside encouragement to apply. When asked about who most influenced the award recipient to apply, 62% of respondents named Teachers/Educators. Encourage your students to apply and spread the word! When you endorse a student’s application, you are eligible and encouraged to apply for the NCWIT Educator Award. Applications are due December 2nd, 2019! https://www.aspirations.org/participate/high-school"
"67","2018-09-05","2023-03-24","https://blog.acthompson.net/2018/09/ncwit-award-for-aspirations-in.html","Recipients of the NCWIT Award for Aspirations in Computing receive engraved awards, scholarship and internship opportunities, entry to a peer-network of technical women in the NCWIT AiC Community, various prizes, and more. // Share this status with women in grades 9-12 who should apply! www.aspirations.org/AiCHSAward Several of the girls in my school have received this award in the past and it has been impactful for them. Highly recommended."
"68","2018-09-10","2023-03-24","https://blog.acthompson.net/2018/09/do-we-really-need-cs-focused-high.html","Last week Bill Gates visited the Academy for Software Engineering, a computer science focused high school in New York City. and wrote about his visit. At first reading I was thinking the visit was a good thing. I still think it is – for the most part. Mike Zamansky had an interesting take on the visit (That Time Bill Gates Visited AFSE) that got me thinking. Basically I like what AFSE is doing but after reading what Mike wrote, I wonder if we really need CS focused schools or could we just do all that stuff at “regular” high schools? The design class that Gates writes about is a lot like the one my wife teaches at a small, semi-rural high school in New Hampshire. It’s not a CS focused school at all. In fact, their CS offerings in general are pretty limited. But that doesn’t mean that CS concepts can’t be included in other courses or introduced in middle school exploratory courses. What is takes is administrative support and a trained and motivated teacher. And CS is growing there! Also last week, Porter-Gaud, a private school in South Carolina, released a video about their two high school CS teachers (Doug Bergman and David Renton – both friends of mine who I admire greatly) and some of that they are doing with their students. Among other things they have their seniors writing software for virtual reality headsets. (Do check out the video of The CS Dymanic Duo ) Porter-Gaud is a college preparatory school not a CS focused school. And yet they have an absolutely amazing computer science program. Again, what they have that many other schools do not have is an administration that is willing to support teachers who are creative, motivated, and willing to learn on their own or (even better) with their students. We know from several recent surveys that parents want more computer science education. It is tempting to think that specialized schools are the answer. A lot of people think that CS is not for everyone. Wrongly as evidence strongly suggests. We are also faced with a shortage of teachers with the background to teach more advanced CS and that makes sending them to specialized schools attractive. If we focus too much on special schools I worry that we perpetuate the idea that not everyone is cut out for CS or that not everyone needs to learn CS. A school like AFSE is trying a lot of things to merge CS into other subjects. That’s a great thing but it will be even greater and more influential if the things they learn about integrated curriculum is shared with comprehensive high schools. In the long run we as a society will benefit more from things learned in CS focused schools migrating to the wider population of schools than we ever will from the small number of students who pass through these schools."
"69","2018-09-16","2023-03-24","https://blog.acthompson.net/2018/09/preparing-students-to-ask-questions.html","I drove behind a Google Maps Street view car for a couple of miles today. Things I wondered about: Will my car show up on Street View? What is it like to be one of those drivers? What sort of meta data are they collecting? That last question is key. I thought of that because I know something about computer science. I also know that there has be controversy about this in the past. I think I would have wondered about the meta data anyway though. What is the meta data? What is it used for? Who has access to the data? Lots of questions of the sort we, society, need people to ask. Not just computer scientists but all sorts of people. How are they going to know to ask if they don’t understand what meta data is or how it can be used? Getting people a basis of knowledge so that they know to ask questions is every bit as important as the “answers” we make them show on exams and quizzes. This is why we need computer science for everyone."
"70","2018-09-17","2023-03-24","https://blog.acthompson.net/2018/09/the-multiple-natures-of-computer.html","There was a lot of good CS education activity on Twitter this past weekend. I know I missed a lot of it but some things did stand out for me. One of these was this Tweet from Hadi Partovi, co-founder and show runner at Code.Org: This is not really new of course. But it does highlight the fact that we can’t look at CS as all analytical and miss out of the creativity inherent in it. If everyone in the class turns in a project that looks identical do we really know if they understand the concepts or are they just good at following directions? Does everyone come up with the same solution? Or do you, the educator, see solutions that are different from what you would come up with? Letting students getting creative makes things more interesting and motivating. Likewise CS is not just for the college bound or for the career bound. Comprehensive high schools and vocational high schools do tend to look at CS education very differently. We have to be careful that we achieve some balance here. We can’t ignore the tools completely and keep it all theoretical. Nor can we get so deep into the tools that we ignore the concepts that drive the tools. We have to avoid being the blind men judging the elephant only one what is in reach. We have to share more of the elephant with our students so they become whole people and not limited by too much focus."
"71","2018-09-18","2023-03-24","https://blog.acthompson.net/2018/09/deciding-what-to-include-in-high-school.html","The more I talk to people about what should be included in high school computer science the more I thing of the Indian story of the blind men and the elephant. I attended an industry advisory meeting for a local career technical school last night. I attend several of these at several schools every year. I hope I provide some value to them from my time in industry and my education experience. I know for sure I get a lot out of these meetings. Industry attendees always have suggestions of what should be included in the curriculum. Usually their suggestions relate to their particular business needs. Hence the elephant story. Computer science is huge as a discipline but the parts we interact with regularly are the parts we think of as important. When it comes to high school computer science curriculum we do have some standards. The CSTA Standards are really good. In a way though I see them as the floor - the minimum. Even the AP CS courses are not far beyond these standards. They practically read as the AP CS Principles curriculum though one could meet them without the AP CSP course. But what if you want to do more? The standards are also about concepts and not implementation. That is also great. That is how it should be. It leaves us open to the question of how to implement the teaching of these concepts. This is where the things industry wants us to teach, which is often more about tools than concepts, can be influential. If we want it to be. We don't always want to take those suggestions too far as our students are not ready for everything industry would like us to teach. What I have been thinking about lately from conversations with industry people are four things: Cloud computing Virtual Reality/Augmented Reality Artificial intelligence Internet of Things Whoa! That's a lot. And they are all more and more intertwined. It is hard to implement IoT without cloud computing. AI is an important part of VR/AR and the cloud is where a lot of AI is executed. AI, Cloud Computing, and IoT combine for a lot of image recognition. I could go on but if you are a regular reader of this blog you probably know a lot of this. Which of these is the most important? I think we could get arguments for any of the four as well as various combinations. And while we might like to think we can include a little of each, let’s face it, any of these could be a year long course by itself with bits and pieces of the others to support the main emphasis. So what is a teacher to do? Personally I have totally decided. Actually, just about every day I totally decide on a different one of those four things. Not helpful. Sigh. Cloud computing looks pretty exciting. Amazon Web Services (AWS) and Microsoft’s Azure both have programs for educators. AWS Educate from Amazon and free Student Azure accounts from Microsoft. Which to choose? I need to spend some serious time looking into both of them I guess. Anyone using either of them in high school want to help me out? Virtual reality/augmented reality is quite “sexy” and I can see it attracting lots of student interest. David Renton is having his students program VR which is cool. But at $200 a head set funding a classroom set seems daunting. Still it is cool. And one can teach a lot of concepts to students who are highly motivated to create something awesome. Where do I start with artificial intelligence? Microsoft AI School looks like a good place to start learning and using some of their AI tools. OK I’m overwhelmed. I need a face to face course. Somethings are just too much for my old brain. Internet of Things may be the item that interests me the most. It is a mix of hardware and software and my gut tells me that is as much key to the future of computing as anything. Mix in a little cloud computing for hosting. Perhaps an existing AI took for analysis. Maybe even a little visualization. Not quite VR/AR but interesting non the less. That could be a great course. Now all I need is curriculum or a year of free time to learn it on my own enough to develop curriculum. Sigh (again) What I’d really like to do is have a class where the students figure all these things out themselves. Have them design and build a major project involving one or more of these technologies while doing the research, experimentation, and learning while I coach. Perhaps connect them with people and documents and videos and the like. Then they can teach me. Now wouldn’t that be great!"
"72","2021-09-20","2023-03-24","https://blog.acthompson.net/2021/09/book-reviewsystem-error-where-big-tech.html","System Error: Where Big Tech Went Wrong and How We Can Reboot is what you get when a top philosopher, a top political scientist, and a top computer scientist get together to think deeply about technology and society and write a book. It’s not a book for just one group. It’s not a dry textbook or academic paper but a clearly written explanation of the issues. It’s a book for everyone. The book talks a lot about both artificial intelligence and social computing which are more connected to each other than may be obvious at times. The social and political impacts of these topics and others are covered in a clear and understandable way without hyperbola, scaremongering, or blatant cheerleading. This is one more thing that makes it stand out from many other books on these topics. Yes, there are parts that are scary. Yes, there are parts that are optimistic. All in all though it is as fair and open minded a book as one can get. The book askes questions that have to be asked. There is enough data and sets of facts to give one a lot to think about. In fact, I found several times that I had to put the book down to think about what I had read. It’s that sort of book. Were I teaching Advanced Placement Computer Science today, especially Principles but also APCS A, I would assign reading from it and have class discussions. If I could not get a class set I would at least have some copies in the library put on reserve. But I’d really like my students to read it all. This is a book that should be on some required reading lists. Computer scientists really do need to think about the “should we do this” question as much as the “can we do this” question. This is the book to start thinking that way. But policymakers need this books as well. So do business people. So give it to the polysci and business majors you know. A lot of social scientists should read it as well – sociology, psychology, social work. Probably more. It will help one understand what people are dealing with in today’s world. Technology is impacting society, and our democracy, in many ways. Some are obvious and some are not. If we want to have a civil society we need to think deeply about the impact of technology on individuals and organizations This book is a great way to start."
"73","2021-09-24","2023-03-24","https://blog.acthompson.net/2021/09/an-ai-tutor-for-cs-education.html","Recently I came across a Microsoft Research project called AI for Programming Education. The project “goal is to build a personalized and autonomous intelligent teaching assistant (an AI Tutor) for programming education, enabling on-demand education.” It’s an intriguing and I think ambiguous idea. I tend to be skeptical of AI tutors as a general idea. A half dozen years or so ago I attended a workshop at Microsoft Research dealing with hinting systems. In other words, how can the computer give hints to beginners. I wrote about hinting systems and the workshop here. The tl;dr is that it is a hard problem. No surprise to teachers of course. Knowing when to hint and how much to hint is a tough problem for human teachers. For a computer AI it is going to be harder still. That’s just one part of what an AI tutor would have to be able to do. I don’t know any more about the project than what I read on the web page (link above) and that they are looking for a CS Education researcher to help with pedagogy. CS Education/Pedagogy Research Internship Opportunity at Microsoft (AI-driven Program Synthesis in the PROSE team) That is an encouraging move. With more and more of education moving to the cloud, more and more online curriculum being developed, and systems that are getting smarter about helping programmers to write code (IntelliCode Completion In Visual Studio (Preview) 2022), creating an AI tutor seems like a logical project to take on. I assume papers will be published. I look forward to reading more about this project over time."
"74","2021-08-26","2023-03-24","https://blog.acthompson.net/2021/08/intellicode-completion-in-visual-studio.html","There is a preview out for Visual Studio 2022 available and since I a) love to try new things and b) am not limited to by what is on the student computers I have been trying it out. Normally, I don’t see a lot in new versions of Visual Studio that impact me personally or me as a teacher. That is not the case with this new version of VS. The new feature is called IntelliCode Completion. (you can read more about it here) Basically what it does is try to help you write code faster and with less typing. IntelliCode now predicts the next chunk of code based on your current context, and presents it as an inline suggestion to the right of your cursor. If you like it, just hit tab-tab to accept it; otherwise simply keep on typing to adjust the completion further. Take the following code for example. I have a string array declared. In my btnGet_Click method I typed “foreach (“ and Visual Studio showed my the code in gray as a guess of what I wanted to write. In this case, it was right and by hitting the tab key the code was in place. Continuing to type would have replaces the suggestion. For me this has been awesome. It's helped me start all sorts of loops and even helped build Boolean expressions. What does it mean for the classroom and beginners? That is the big question for teachers. I know that teachers are divided on Intellisence which helps with understanding and suggestions with variables and methods. I suspect that if you don’t want your students using that sort of predictive information you’re going to really hate IntelliCode. Even if you like Intellisence, as I do, you may have concerns about IntelliCode. I admit to having some concern myself. My first impression was that it could prevent a lot of typos and badly formed code. It does have that potential. On the other hand, will students put too much faith in the AI and assume code it suggests is correct for their particular program? That could be a big problem. I have had students blame to tools for their own mistakes for years. Teachers can use this for a good discussion of artificial intelligence. What do you think of the information was used to train the AI? (Spoiler – lots of code in GitHub) How well does the AI really understand the context of a specific student project? Clearly, students need to be prepared for using this feature. Students need to know that it is not prefect and that they need to be careful what suggestions they accept. It does look like this feature can be turned off by specific area of help. Maybe there will be a way to turn it completely off easily on release. It’s on by default right now. So what do you think? A helpful feature for beginners or more potential for harm than help?"
"75","2021-09-04","2023-03-24","https://blog.acthompson.net/2021/09/are-you-assigning-projects-or-recipes.html","Chris Lehmann, the amazing principal of Science Leadership Academy in Philadelphia, says “If you assign a project and get back 30 of the same thing, that’s not a project, that is a recipe.” Now recipes have their place for sure. They often make a good start. I see programming as a creative thing (art/craft/skill/science/what ever) and I want to see creativity from my students. For me this starts with day one. In my introduction to my classes I tell students that I want to see creativity. I want them to make projects their own. This can be a difficult thing for some students. There are teachers out there who do want to see the same thing from every student. It makes things easy to grade I guess. Or something. Very often in early projects is is hard to be creative. There are only so many ways to calculate degrees Fahrenheit to Celsius. On the other hand you can ask students to find two measurements they like and convert one of them to the other. You’ll be amazed at the combinations students come up with. Sure you’ll get the simple conversion using degrees Kelvin but someone will do miles to furlongs. Even simple programs can get creative with tools that make graphics easy. C# and Visual Basic both have the Windows Forms libraries to use but Processing can make using Java or Python colorful and graphic as well. To say nothing of a lot of block programming systems. Of course, students getting bogged down in how a program looks can be an issue at times but that can be dealt with though conversation. An even better way is often letting students choose their own projects. I always finish up a semester with a larger project that students select themselves. Student get very creative with those projects. The Advanced Placement Computer Science Principles course requires a Create project which serves a similar purpose. For smaller projects it can take a bit more to encourage creativity. After all if there is known input and expected output that’s going to be the same. Here is where you want students to be creative in their code. Let students decide if they want to use a for loop, a while loop, or even a foreach loop. Decision structures can also be done in different ways. Having students turn in code that looks different is a great learning/teaching opportunity. I love showing students the different solutions that students turn in. This both encourages them to try to be different and lets them see different solutions. The idea is to open their minds to looking at problems in different ways. The most important thing is to encourage creativity. Celebrate it!"
"76","2021-09-07","2023-03-24","https://blog.acthompson.net/2021/09/some-simple-early-programming-projects.html","If you are not on Twitter you may be missing a lot of good things. For example, the other day Kelly Lougheed (@kellylougheed ) tweeted out a bunch of simple labs that only require user input and mathematical operations. I have copied them below because I want to be able to find them again later. I’ve used unit conversion for years but it gets old. Fahrenheit to Celsius, miles to kilometers, grams to tons, you get the idea. It gets boring. Kelly has some great ideas. There is an idea from Neil Plotnick (@NeilPlotnick) below Kelly’s ideas. Have any more? Add them to the comments for future readers! And be sure to follow @kellylougheed and @NeilPlotnick on Twitter. Kelly Lougheed (@kellylougheed ) Programming activities that involve ONLY user input and mathematical operations: Program to calculate the tip Program to calculate cost per person when dining out Program to convert units (made-up units like Harry Potter currency okay) What else? Also just wrote this silly lab where the user can input their age and be told their future in 10/20/30 years (""When you are X years old, you will retire to a desert island"", etc.) 0.3 Fortune Teller Lab Fortune Teller Lab Directions: Where do you see yourself in 10 years? Have the user type in their age, and tell them their future at various ages (which you calculate by adding years to their current… docs.google.com And for extensions, I love little math challenges that involve Ss printing out the result of mathematical expressions (getting practice with operators!). For example, there is the Four 4's Challenge, and also this 1996 Challenge: 0.3 1996 Lab 1996 Lab Directions: Use the numerals 1, 9, 9 and 6 exactly in that order to make a mathematical expression that prints the following numbers: 28, 32, 35, 38, 72, 73, 76, 77, 100 and 1000. You can… docs.google.com Neil Plotnick replying to @kellylougheed I have my students code algebra equations like the distance formula. Also stuff for geometry such as area and volume measurements. Ohms law for physics. Ideal gas laws in chemistry."
"77","2021-09-17","2023-03-24","https://blog.acthompson.net/2021/09/debuggingslow-is-smooth-and-smooth-is.html","Mike Zamansky had an interesting post called What They Used To Know that got me thinking about the old days. Now Mike is a youngster and didn’t really start in computers until the 1980s. I started in the 1970s with punch cards and batch processing. That meant that there was no instant gratification seeing your program run. With batch, one handed their cards to an operator and some time later, hours or maybe a day, one got their cards back with a listing that showed the results. Results usually meaning a list of errors that kept the program from running. Desk checking, studying the listing and trying to fix as many errors as possible before trying again was a bit of an art form. To this day I will often print out a program to look at the big picture in a way that still doesn’t feel effective on a screen. It’s tempting to see that as a way to go – limited opportunities to have the computer check ones code. There are downsides to this sort of thing though. Specifically, having limited runs or at least long waits between runs encourages writing large amounts of code at a time and discourages writing and testing small pieces of code regularly. Being able to hit “compile” every other minute though tends to encourage, or at least support, the beginner tendency to “throw some code in and see what happens.” This wastes time in the long run and often leads to ugly, hard to maintain, and inefficient code. The military has a saying that “slow is smooth and smooth is fast” that some what applies. Slowing down to really analyze code, think smoothly, generally leads to a faster result. Tossing code in on a wing and a prayer is not smooth but chaotic. Slowing down to really look at what is happening is smooth and looks slow to the casual viewer but leads to faster results. As I was thinking tonight and asking, “what if we limited people to some limited number of compiles a day?” It seemed like a good idea until I thought of the possible problems. That’s when I realized that external controls on speed are not the answer. Rather the answer is for developers to regulate themselves. To slow down and focus in ordered to make faster progress."
"78","2022-07-18","2023-03-24","https://blog.acthompson.net/2022/07/a-summary-look-back-at-csta2022.html","CSTA 2022 was energizing! After three years of not seeing people in person it was awesome to reconnect with people. And to meet new people. The energy level was high through the whole event. Masks and proof of vaccination were required which I thought was great. It seemed to work out well at SIGCSE. Quite frankly, after lots of stories' of people getting COVID at ISTE which did not have those requirements I really apricated the carefulness of CSTA. Masks did make it harder to recognize people. I’m glad I wore my trademark hat which one person told me was more famous than I am. Sessions were very good as one expects. The exhibit hall had about 75 exhibitors and everyone was staffed by engaged, knowable, and upbeat people. The hallway track was really fun. I learned a lot from friends old and new in discussions. As I understand it there were about 1,700 people in attendance for everyone to talk to. The venue, McCormick Place was huge. It needed to be to all all of the concurrent sessions. We only took up a small part of the place though. If you explored to far you could easily get lost. And I did. There was food available for purchase in the back of the exhibit hall. It wasn't bad. It was nice not to have to go far and wide to search for food. There were many good places to eat nearby however. I liked that I could get from the conference hotel to the conference without going outside. Especially the day it rained all day. A good number of people approached me to say that they read and value this blog and/or my Twitter feed. I can't tell you how much that means to me. Thank you to all of you. You made CSTA extra special. It looks like next year’s CSTA will be virtual. Sigh. I know that it will make it possible for a lot of people who can’t travel to an in-person conference to get valuable knowledge from sessions. A virtual exhibit hall doesn’t excite me though. And I will miss the hallway conversations. On the other hand, maybe we can have even more sessions and have them available to more people. My previous posts on CSTA 2022 Day One #CSTA2022 Amazon, Google, Meta, and Microsoft at #CSTA2022 My Day Two at #CSTA2022 My Day Three at #CSTA2022 My Day Four at #CSTA2022"
"79","2022-07-16","2023-03-24","https://blog.acthompson.net/2022/07/my-day-three-at-csta2022_16.html","I got an early (for me ) start this morning. I attended a briefing session for session proctors (after missing yesterday’s) so that was good. A hot up of tea and some review of the schedule and I was good to go. First session for me, Developing Cyber Sleuths (link to slides here) Cyber security is a rapidly growing area of need and of course creation. The latter not as fast as the former. One of the key early topics was related to the people side of security – policies and training for people. Hacking people is a key security flaw. New to me term, Purple Team. Combining Red Teams who try to break security and Blue Teams who try to stop hackers. Several interesting resources were shared. You can find them in the slides or course but I like Cybersecurity and Infrastructure Security Agency as a place to start. This sessions wasn’t quite what I was expecting but I feel like the links I got were worth my time. After a couple of great hallway track conversations it was time for Creating All Year with APCS Principles. There were a couple of interesting sessions in this time slot so distance was a tie breaker. Of course, the create task is a special part of the APCS P exam (30% of the grade). This session was packed! Jill Westerlund has her students create a video of their program running at the beginning of the school year.Videos must be in AP submission format and include what the create task requires. What a great idea for getting a jump on what they will need to the exam later! Snipping tools are introduced and required early as well. Require at least one mock task before they have to do the real thing. And grade it based on what they need for the exam. View it as formative assessment. Its about feedback to make sure they know how to do the real task. Be sure the mock task is not something they could turn in as a real CPT. Jill suggests requiring the official create task before your spring break. Bonus link: Jen Manly on Three Keys to a 40 Hour CS Teacher Work Week Jen is amazing. I love her short videos. I’ll bet this was a great session. I spent lunch break and most of the first session period in the exhibit hall talking to people and catching up with some friends. Following people in social media is nothing like catching up in person. Another post on the exhibit hall is in the works. I took pictures. My afternoon session was “Fun, Formative Feedback, and Assessments to Improve Learning” Slides are here. One of the first topics was Parsons Problems – one of my favorite tools. Apparently, there is a Free, open-source graphical Parsons problem creator tool: https://codio.github.io/parsons-puzzle-ui/dist/ Next they talked about rubrics as tools to help and advise students. Next up was peer programming Here is a link to a CSTA Presentation - Pair Programming. Next up was some Autograding tools (links in their presentation)I encourage you to look at their slides for more information and resource links."
"80","2022-07-17","2023-03-24","https://blog.acthompson.net/2022/07/my-day-four-at-csta2022.html","It’s a short day today but with plenty to learn. Last night was a great party at the Museum of Science and Technology. I left early (age?) but I know that a lot of people stayed late and partied hardy. There may be some tired faces in sessions this morning. It was a great community building event so well worth it. First session for me was “You CAN Teach Cyber Security with CYBER.ORG’s Cyber Learning Standards. CYBER.ORG is probably the premier Cybersecurity learning/teaching resources. CYBER.ORG is funded by the US Department of Homeland Security. We heard about a lot of their programs. It seems like they have something for almost everyone. I would start there for Cybersecurity resources for teaching.CYBER.ORG funded a large group of educators to write a set of Computer Science Learning Standards. I had several good options for the last time slot but Nifty Assignments is a must see for me. The version at SIGCSE is always standing room only but apparently it is not as well known at CSTA yet. Baker Franke does a great job of putting this session together. For reference, CSTA Nifty Assignments are archived at CSTA Nifty Assignments SIGCSE Nifty Assignments are archived at Nifty Assignments. I was paying to much attention to take much in the way of notes but the archive should be updated soon. One of them can be played at Mind Reader - App Lab - Code.org The archive is updated and I can’t wait to try some of these when I get home. That’s a wrap for me. I skipped the closing keynote to get to the airport early. I feel a little guilty but I’m also tired and my brain is kind of full. Some more general thoughts tomorrow."
"81","2022-05-16","2023-03-24","https://blog.acthompson.net/2022/05/bingo-inspired-projects.html","My son’s school, he’s principal of an elementary school, had a Bingo themed fundraiser yesterday. I can’t help but think about how things are done with any event like this. My first thought was about the Bingo cards themselves. Typical Bingo cards consists of a five by five grid. The letters B I N G O label the columns and each column has a random number. The center square of the grid is a “free” square and doesn’t have a number. Obviously, generating Bingo grids is a logical project. The numbers in each column must be without a specific range and duplicates are not permitted. The next obvious project is one to “call” the numbers. The numbers must be identified by number and column where the column is identified by the letter above the column. Drawing duplicate numbers is not permitted so keeping track of numbers drown is important. Keeping track of numbers drawn is also important for verifying Bingos. A program should have a way to do that . This becomes a user interface problem as well as a data storage problem. That may be the most interesting part of the project. At least it is for me. Now if you really wanted to get complicated, one could design a system where Bingo cards are numbered and their contents stored. One might then be able to use that data with the data of numbers drawn to verify if a Bingo was on the card using only the number of the card. I see this as a group project where individual students would write parts of the program and have them work together. A lot of planning would have to go into this of course. The Bingo at my son’s school used a traditional ball cag. That seems more fun somehow than drawing the numbers on a computer. That doesn’t mean that software would be a bad way to keep track of numbers drawn and used to verify a Bingo. Another project idea perhaps? On the other hand, the whole idea opens a discussion of “just because something and be computerized does that mean is should be?” The human factor is an important one. I’d love to have student discuss the pros and cons of computerized Bingo and old fashioned ball cages and physical tracking of drawn balls. Which is more authentic? What does authentic even mean? That discussion might be just as useful as discussion of what data structures should be used to track Bingo numbers."
"82","2022-07-03","2023-03-24","https://blog.acthompson.net/2022/07/welcome-new-computer-science-teachers.html","Spring is an interesting time on social media. I help moderate a couple of CS teacher groups on Facebook and let me tell you, membership is booming! Why? Well, several reasons. For one thing a lot of teachers have been voluntold that they are going to teach computer science in the fall.Some have never taught CS before. Others have some CS background but are being asked to teach a more advanced course. In general, a lot of teachers are looking for help getting ready. Hopefully, all CS teachers join the Computer Science Teachers Association (CSTA). There are both free and paid levels of membership. I am a paid member (AKA CSTA+) It’s worth it for the extra benefits. You’ll want to join and get active in a local CSTA chapter as well. A book I highly recommend for anyone teaching computer science is Computer Science in K-12: An A-to-Z Handbook on Teaching Programming I can’t tell you how much I learned from this book. Instructors are many Advanced Placement Summer Institutes are pointing teachers to Facebook groups. Two favorites for AP CS teachers are: AP Computer Science Principles Teachers AP Computer Science A Teachers They're both outstanding resources for teachers of those courses. Many people also join Computer Science Educators which is a wide ranging group for CS teachers. Cyber Security is getting huge in schools (which is a good thing) and there is a great Facebook group for that. Cybersecurity Educators If game development is your thing there is the Unity Teach Community group. If you’re teaching an advanced placement course, hopefully, someone has pointed you to AP Summer Institutes. Really valuable for first time AP teachers. There are also some curriculum providers that offer training and resources. A few of them are: code.org – they offer several levels of courses including pre-AP courses as well as AP courses. CMU CS Academy – curriculum, resources, and (I think) training CodeHS – Curriculum and resources CYBER.ORG – Cyber security resources, training, and curriculum Project Lead The Way – curriculum, training Bootstrap – CS with math, physics, or Data Science I’ll finish off with a couple of blog suggestions Mark Guzdial – He’s currently doing research on teaching other subjects using computer science and what he calls “Teaspoon Languages” but he has a lot to say about how to teach CS. Mike Zamansky – Mike is building a program to teach CS teachers at Hunter College in NYC. Mike shares a lot of good advice and ideas about teaching. Garth Flint – Garth teaches at a small private Catholic school where he wears a lot of hats. He has some interesting takes on things and shares a lot of good ideas. I’ve only scratched the surface here of course. But they’re a good start with places to ask for more help. Welcome to teaching computer science! [Edit] if you are interested in using some physical devices in your course check out Teaching Computer Science–Moving atoms not pixels"
"83","2022-07-05","2023-03-24","https://blog.acthompson.net/2022/07/teaching-computer-sciencemoving-atoms.html","On my first visit to the Lifelong Kindergarten Group and the MIT Media Lab, I notices a message on the windows. “Some people would rather move atoms than pixels.” That has stuck with my for years now. And it is quite true. Robots, game controllers, Internet of Things, and more are ways that computer science interacts with physical objects and not just pixels on a screen. These are ways that teachers can bring more students to more interesting (to the student) to get involved with computer science. But where to start? Recently I posted curriculum resources that are especially good for teaching traditional computing courses. Well, cyber security is a bit new but anyway. Read that post at Welcome New Computer Science Teachers Today I want to provide some resources to bringing physical computing into the classroom. Starting with a couple of devices that operate as “brains” for deeper involvement. Raspberry Pi and the Micro:Bit are two of the most popular. Arduino and the Lego ev3 have been around for longer and are in wide use as well. One could get lost exploring all that LEGO Education has to offer. The Arduino Online Shop has a lot of resources as well. Personally, I am a fan of both the Raspberry Pi and the Micro:Bit. Both the Micro:bit Educational Foundation and the Raspberry Pi Foundation have a lot of resources. Those are great places to start your exploration. Ok, let’s talk hardware. While the sites for the Pi, Micro:Bit, Arduino, and Lego EV3 have a lot of links to resources there are more places to go depending on your interests. Two of my favorites are AdaFruit Industries and Kitronik Ltd. They have devices that work with a lot of ""brains."" They have devices for all sorts of robotics or Internet of Things projects. I can spend hours looking through both getting idees for projects. Also for the Internet of Things, I have bought a bunch of devices from Phidgets Education. I have been using these sensors and controls with Raspberry Pi in Python but Scratch, MakeCode, and Java are among other language choices. Speaking of MakeCode, that is an awesome platform for programming Micro:Bits. I recently discovered Jacdac from Microsoft Research. Right now these devices only work with Micro:Bit but Raspberry Pi and a USB connection for laptops/desktops are projected for the future. I could, and probably should do a post just about robots and robotics. But here are a few places to get started. Beebots – cute little robots great with younger students Ozobot - I’ve seen these used from elementary school up through high school. Cute and relatively inexpensive. VEX Robotics – middle to high school. They also sponsor a competition. Wonder Workshop – Several types of cute looking robots that scale through a wide range of ages. My grandson has been controlling a Dash since kindergarten and I have had high school students learn with them as well. BirdBrain Technologies – Check out their Finch robot! Edison Programmable Robot - Ideal for school classroom education (meetedison.com) Educational Robotics – Parallax – not that Parallax sells lots of other types of hardware that you may find interesting I promise a more comprehensive post of robotics soon."
"84","2019-10-10","2023-03-24","https://blog.acthompson.net/2019/10/michael-backus-alaska-middle-school.html","Every so often I run into a computer science teacher’s work online and ask myself “how have I never heard of this person before?” This week I listened to a podcast by Vicki Davis with a middle school CS teacher from Alaska by the name of Michael Bachus. (How to Make Programming Easier) This guy is doing some cool stuff with middle school students. Robots, artificial intelligence, hardware and software, and helping a lot of teachers do the same. Michael Backus teaches computer literacy and computer science at Teeland Middle School in Wasilla, Alaska. As the creator of the http://www.akrobotnerd.com, he has shared many projects that he has developed over the years, the most famous being his Artificial Intelligence with Arduinos curriculum. Vicki Davis has a lot of great interviews as part of her daily 10 Minute Teacher podcast. She’s had me on a couple of times as well. In any case, listen to this podcase and check out Michael Backus’ resources. Curriculum, videos, projects, and it looks like a lot more. Someone needs to get him to CSTA to present some time."
"85","2019-10-11","2023-03-24","https://blog.acthompson.net/2019/10/what-time-is-30-minutes-from-now.html","Got the proctor guide for the PSAT that I have to proctor next week. There is a chart to help proctors determine stop times that are 25, 35, 50, and 60 minutes from a time after the start time hour. Wait! What? Someone needs a chart to tell them that if the start time is 5 minutes after the hour that 60 minutes later will be 5 minutes after the hour? Apparently someone does. Or someone thinks some one does. Some of my students, when being told to return to class in a half hour, ask me what time that will be. I blame the analog clock. That and laziness. So obviously I am wondering, should there be an app for that? Yep, I found a new coding project. Now I just have to decide which class to use it in."
"86","2019-10-22","2023-03-24","https://blog.acthompson.net/2019/10/how-many-words-in-that-text.html","One of the projects I have used for years is a letter counter program. The idea is to count the occurrences of each individual letter. It’s a nice project that includes arrays, loops, and some string manipulation. This is the sort of thing that does have some real world utility. Cryptography uses word counts to try to crack substitution cyphers. Linguists use it to study languages. And that is just two of what comes to mind. The next logical (to me anyway) step is to count words. I’ve been thinking about adding this in for a while. It is actually something I was assigned as a project many years ago when I was an undergraduate. It’s not as simple as counting letters. The most obvious method involved counting spaces. What happens if someone is old school and places two spaces after every period? Well, that is something to take into consideration. And what about other white space like tabs or line feeds? Or special characters? Doug Peterson related in a recent post (About words) that two different programs gave him two different word counts for the same piece of text. The counts were off by 3 on a text of about 486 words. Not a huge percentage but on a book length text that could make a difference. Some articles in magazines are paid by the word. That means getting the count right means money. Now people can count words with greater accuracy though I don’t want to do it myself. At some point someone is going to feed a lot of data into some artificial intelligence. Long sections of text that have accurate (human counted perhaps) word counts will be fed in and the AI will learn what words are and how to count them. It’s not going to happen until someone decides that developing this is worth the time and money. I wonder if it will be an academic or an industry researcher? For the time being I think this will make an interesting conversation in class. Maybe we’ll have a contest to see who can come up with the most accurate algorithm?"
"87","2019-10-25","2023-03-24","https://blog.acthompson.net/2019/10/a-loop-by-any-other-name.html","My first programming language was FORTRAN IV. As I recall we had Do loops. They worked pretty much the same as what we call For loops in most languages today. We didn’t have while loops but we did the same sorts of things with line numbers, if statements, and the powerful but “evil” Go To statement. As time went on I learned more ways of specifying looping constructs including recursion. Recursion took me some time to wrap my head around. Possibly because I used some languages that didn’t even support it back in the day. These days there are all sorts of iteration loops of various complexity and power. For a software developer that is wonderful. For a teacher? Well, it means you have to make decisions about what to teach. For a one semester, first programming course I like to keep things simple. A C-family For loop has all sorts of possibilities from the simple to some pretty complex structures. Eventually students will learn many of them but I could probably spend half a quarter just on For loops if I tried to get everything possible in and understood. The cognitive load on some possibilities feels like it would be too much for many students. Mostly I try to focus on the base concepts. A loop has a set up piece. Variables are set to a known starting state. A loop has some sort of comparison it see if it is finished. A counter it checked, a flag is checked, or maybe an interrupt happens. But something has to stop the loop sometime. usually but we can get into those times when an infinite look is useful later. And of course something has to happen that changes the values or states that the loop is checking. Understanding these concepts will, I sure hope, prepare students for what ever syntax or iteration style they run into over time. When we teach students for a career rather than just for a job the concepts are much more important than the programming language or the IDE. Concepts – what a concept!"
"88","2019-11-01","2023-03-24","https://blog.acthompson.net/2019/11/magic-8-ball-and-projects-from-real-life.html","There has been a 12 inch tall Pez dispenser on my desk for a couple of years now. It’s a great visual aid for talking about stacks. Today I got a Magic 8 Ball as well. It turns out that a lot of my students were unfamiliar with this staple toy of my youth. Since I really like using the Magic 8 ball program as a demonstration I decided I really had to get a physical ball. At this point in the semester we have covered loops and arrays and it is time to make programs more interesting by adding more data. I want to use something that makes sense and is not just a demo without meaning or purpose. Having code you can have some fun with is always a plus as well. I went to Wikipedia and found the classic 8 ball answers and placed them in a text file. My demo reads the file into an array when the program loads. Once the array is built clicking a button displays a random answer. It’s pretty simple to code and we code it together as a class. Students love asking it questions when we’re done. Usually I have students add their own answers to the text file and then modify the program to handle the new set of answers. We also talk about different ways this could be coded. What if we didn’t know how many answers/lines were in the file? Would be use a different loop and/or a different array type like an arrrylist? What options (methods or functions) should we use to provide the most flexibility? This also provides students with some sample code to look at when I assign larger projects and expect them to do much more on their own. Is this a good project? Magic 8 ball says “Yes definitely.”"
"89","2019-11-04","2023-03-24","https://blog.acthompson.net/2019/11/csta-at-15-cstaat15.html","The Computer Science Teachers Association is now 15 years old. I’ve been a member from the start and I have to say that in some ways it feels like it has always been there but in other ways it feels like it just started. There was a K-12 computer science education community before CSTA. But it was small and one could easily feel alone. CSTA brought a new sense of community and togetherness. Most of all, perhaps, it brought us organization and a stronger sense of belonging. There was the CS & IT Conference (now called the CSTA Annual Conference) before CSTA as well but it didn’t have the same feeling of permanence and sustainability that CSTA brought to it. CSTA brought growth and strength to the conference. It’s been the annual highlight of my professional development for years now. Presenting at several of these conferences has been a huge privilege and honor. And added to my learning as well. After I left industry some years ago I ran for and won a seat on the CSTA Board. What a wonderful experience those four years were. Hectic as we changed Executive Directors during that time. It was a real time of transition. That wasn’t as smooth as many of us would have liked and I think we experienced some growing pains during those years. We’re on our third ED now but things seem to be well on track. Kudos to the Board (after me) who lead the way through the last couple of years and another ED transition. We have an amazing board at CSTA who work very hard for the membership. The growth of chapters has been a big part of the CSTA story. Fairly early on, CSTA developed programs to train and prepare chapter leaders and that has paid off in spades. There are more and stronger chapters than ever before. CSTA is both national AND local and that is important. CSTA has helped train advocates among teachers and support them locally. CSTA members have advocated, lobbied, pushed, and otherwise promoted CS in their states, counties, school districts, and yes even nationally. Some of the companies and other groups get a lot of credit for the growth in computer science education in the US but the real heroes are individual teachers who alone or with other CSTA members did the ground work to make things happen. From conferences to board membership to involvement with committees and connections with life long friends CSTA has been an important part of my life. I can’t wait to see what the next fifteen years bring."
"90","2019-11-06","2023-03-24","https://blog.acthompson.net/2019/11/visual-studio-onlinepossibilities-for.html","Microsoft has been running their big MSIgnite event this week and making all sorts of announcements. One of them was a cloud-based development environment called Visual Studio Online. OK, that looks interesting and I will probably try it out soon. It may be an answer for people pushed to Chromebooks, others who are at one to one bring your own device schools, or just want students to wrote programs from home. I wonder how it works on otherwise underpowered older computers? There is some concern about costs and that is something I need to understand. Maybe I can find someone with an education focus at Microsoft to explain how it might work cost effectively for schools and students. Or maybe I can figure it out through all the marketing hype. We’ll see but it sure does look worth looking into in more detail. Question added later: I wonder if this will let me develop iPhone apps without buying a Mac? Anyone know?"
"91","2020-08-02","2023-03-24","https://blog.acthompson.net/2020/08/learning-python-part-1.html","Python has been on my radar for years but I haven’t really had the motivation to learn it myself. It’s time though for several reasons. Reason number one is that I need a learning goal to keep stretching my mind and knowledge. I don’t have a bunch of students finding new puzzles to solve so I have to make my own mistakes. First step was to pick a development tool. I have played with a bunch. IDLE, PyCharm, Processing, and some I forget. I didn’t like any of them. So I am using Visual Studio. I expect many to tell me that was/is a horrible choice but its the devil I know so there is that. Many of the tools feel like steps backwards to me. I’ve gotten spoiled by the Intellisence in Visual Studio among other features. IDLE felt like what I used to learn BASIC-Plus 40+ years ago. Anyway, I want to spend my time learning a language not an IDE. OF course there are two parts to learning a new programming language. Part one is the basic syntax. Part two is the idiom of the language. The first part is easy. The second not so much. I’ve started with easy stuff. Declaration of variables, simple math, declaration of functions, and control flow. IF statements and while loops were pretty straight forward. For loops are different and idiom rears its ugly head here first for me. For loops in Python seem to be what I think of a ForEach loops in other languages. Very powerful and useful. On the other hand, how do I do the equivalent of: for (i=0; i <= 100; i+=5) or for i =0 to 100 step 5 Or do I need to use a While loop to do this? Go ahead, show off in the comments and help me out. String manipulation, one of my favorite things to code, is probably next for me.I think that will be ok. Lists and dictionary come after that. I think I will have to read up on them as they look to be thought of differently than arrays in the languages I am used to using. They also look like fun and powerful to use. So there is that. Classes after that. Hopefully that moves quickly. Once I get some basics down I’ll start looking into various libraries and what not. Perhaps go back to try some graphics in Processing. Is there an equivalent to Windows Forms like I use with C# and Visual Basic? Or do I have to go backwards again to do that? At least I’m having fun. Now to go crack a book."
"92","2020-08-04","2023-03-24","https://blog.acthompson.net/2020/08/programming-projects-for-learning-or.html","The purpose of school work is to get good grades. Well, at least that seems to be a common view on the part of students. Most teachers will tell you that the motivation for students to cheat is that they are lazy and still want to get good grades. The recent posts by Mark Guzdial (linked to at Changing How We Teach Computer Science) have sparked a lot of comments on his blog and on Twitter which had sparked some thoughts on my part. I have long believed that projects are a great learning exercise for students. I haver become less enamored with them for grading. Cheating seems to show up all to often. Often it is hard to prove cheating because projects are to short, variable names are too likely to be the same logically, and there are limited ways to solve them. I have seen the most creativity and the least cheating (provable or otherwise) on larger projects where students were all doing something completely different. A common thread in the comments I have been seeing recently is that students cheat not because they are lazy but because they don’t know how to solve the project on their own. This idea resonates strongly with me. I see a lot of satisfaction on the faces of students who successfully complete projects. They tend to actually enjoy the process when they have success. Over the last several years I have increased the number of other means of assessments including multiple choice questions that include reading and understanding code. Comparing quiz results with project results has been interesting. Some students show close correlations between quiz grades and project results. Other students not so much. While I haven’t conducted a rigorous or scientific study by any means, my observations suggest to me that students are copying the projects of others because they haven’t gotten a strong enough grasp of the material. I’m pretty convinced that evaluative instruments that require the reading and understanding of code are better tools for understanding what students actually know than looking at projects. That is not to say that looking at projects is useless. To the contrary, students who work hard against the struggle show what they know and don’t know in their code. A project that doesn’t work correctly give a teacher a lot more information about student understanding than a project that works perfectly. In my ideal world, I would give each student a different project for every concept I want them to demonstrate knowledge of. That is clearly not possible and certainly doesn’t scale to large classes. I’d love to have a way to watch student progress on a project. What do they try and what do they do when things either work or don’t work. I don’t know of a good tool to that right now or even if it is practical. I guess for now teachers will just have to watch students closer.And use other tools for grading and for determining what students actually know."
"93","2020-08-05","2023-03-24","https://blog.acthompson.net/2020/08/learning-python-part-2-distracted-by.html","I cracked a book and found out that Python supports turtle graphics. I love drawing pictures with graphics. I have since I was in university. So today I played around with the Python turtle a bit. Mostly I played with a few of the usual turtle methods and wrapping drawing code inside loops. I had some fun but didn’t learn a lot. I’m not sure that was the most productive use of my time. It did suggest that using graphics with Python is potentially a way to make learning Python more interesting. I have Mark Guzdial’s book on Media Computation around here somewhere. I’m going to dig it out and see if it the libraries for it will work in my environment. I want to do more than draw lines."
"94","2020-08-13","2023-03-24","https://blog.acthompson.net/2020/08/are-you-ready-to-help-with-csta-2021.html","The call for participation in CSTA 2021 is now out. You can learn about the submission process and look at some possible topic areas on the conference information page here. There are several ways to help out with the conference (see below). You can present or you can become a reviewer. Both are very important roles. I encourage CS teachers to consider submitting a proposal to present. I have been honored to present at the CSTA conference a number of times over the years and have found it a very rewarding experience. The audience is kind and anxious to learn. This summer, the conference being online, added a new and extra facet which I found surprisingly energizing. I am hoping, as I think most of us are, that next summer we will be meeting in person. Either way, presenting at CSTA is a great way to be part of the community and to help expand knowledge Chances are that you tried something new this past spring. Or will be trying something new this fall semester. That means you probably have something worthwhile to share. Don’t be shy! Reviewers are also critical to having a good conference. Reviewers read and evaluate proposals and are essential in the process of picking the best presentations at the conference. Please think about helping out in this way. Apply to present: We're accepting submissions for a one-hour session, three-hour workshop, 20-minute mini-session, 45-minute Birds of a Feather discussion, or a poster session. Visit our website for more information on the process and to submit your application. All submissions are due by Nov. 8. Become a reviewer: We invite you to consider reviewing submissions for CSTA 2020! If you've attended or presented at a prior CSTA conference, have a connection to K–12 computer science, and are available between Nov. 23, and Dec. 17, consider volunteering your time!"
"95","2020-08-15","2023-03-24","https://blog.acthompson.net/2020/08/book-review-humble-pi.html","Recently, I asked my Facebook friends for recommendations for non-fiction books that would not get me depressed. Several people recommended Humble Pi: When Math Goes Wrong in the Real World so I bought a copy. I’m glad I did. The book presents some interesting case studies in math done wrong. From people confusing units of measure (pounds and kilograms for example) to engineers changing one variable in an equation and assuming the answer doesn’t change and many more. As you might expect there are a lot of examples where computers play a role. There are examples of problems caused by variable type mismatches, binary overflows, and people just misinterpreting the results. You’ll get any number of examples you can use with students. A valuable book to teachers of computer science, physics, and mathematics for sure. The book is written in an easy to read and often humorous fashion. It’s an enjoyable read even if you are “not a math person.” I bought the Kindle edition but I am wishing I hard bought a hardcopy edition to keep on my bookshelf. I’ll be back looking at this one."
"96","2020-08-26","2023-03-24","https://blog.acthompson.net/2020/08/the-end-of-school-computer-labs.html","There has been a lot of talk in recent years about doing away with computer labs in schools. BYOD and one to one computers have been talked about and have been growing movements for a while. I wonder if the current situation will be the final tipping point. My old school removed the computers from the computer labs. The work involved in constantly sterilizing and cleaning them was becoming too much. So students bring their own devices and now connect to virtual machines via the network. They have access to all the school’s licensed software no matter what device. This worked great when we moved to remote learning in the spring. Besides the cleaning/sterilizing issue this means a lot of new flexibility. Of course it makes it easier if school has to close and students have to learn from home. But in school it opens more rooms for teaching. And if you have small rooms classes can even be split across rooms with teachers in one room, or even at home, teaching to several rooms with safety distancing. I computer room can have a more flexible layout, perhaps with easily movable tables for group work, focusing on a lecture, or just plain spreading out. Will computer labs now totally disappear? We’ll see. A lot depends on a willingness and ability to provide computers for every student. That’s easier in wealthy areas than poor ones. But it just may be the way things have to be."
"97","2020-09-12","2023-03-24","https://blog.acthompson.net/2020/09/how-are-you-doing.html","We’ve now finished the first week after Labor Day and at least in North America almost everyone is back to school. That may not mean physically back in a bricks and mortar school building though. My grandson is starting kindergarten online this week. I didn’t see that coming a year ago. Teachers, students, and parents are adopting to all sorts of new ways of teaching and learning. I confess to being happy I am retired but I am also sympathetic so those still teaching. I do worry about you all. I hope you are finding ways to take care of yourself. My son is an elementary school principal and his summer was as busy, if not more so, than during the middle of the school year. Administrators have been having a tough time so have some sympathy for them. Somehow many people seem to think this is all easier for computer science teachers. This is not the case of course. Yes, we may be more comfortable with computers than some teachers but the tools for teaching online are new to us as well. And helping students with computer problems is as hands on as helping students in art, or math, or English. Maybe more so at times. I think we’ll see some tools appear and older tools will see new features develop Social media is full of teachers talking about online IDEs for example. I’m still not a fan but that’s me. I still like the idea of using virtual machines on a powerful server for teaching computer science.. No doubt a lot of people will be trying new things. If nothing else, we’re going to learn a lot this year about new tools for teaching CS. And that brings me to a final point, have you thought about sharing what you are learning with other computer science educators? The call for proposals for CSTA 2021 is out. Even if you are learning a lot of what doesn’t work you are learning some things that do work. We’re all better off if we all share what we are learning. Please consider a proposal for the conference. If you have questions about what is involved let me know. I love presenting at CSTA conferences. It’s the best audience you could have. Seriously!"
"98","2020-04-11","2023-03-24","https://blog.acthompson.net/2020/04/a-look-at-technology-for-remotely.html","While I do believe that people are the most important part of emergency remote teaching, technology does have a serious role to play. One key piece of technology that my school is using is virtual machines that students connect to from home over the Internet. This gives them full access to the resources they would have if they were in our physical computer labs. I had our wonderful Director of Technology describe what he set up. “Essentially what I've done is set up a Windows Server 2019 Remote Desktop Server. I then used VMWare Horizon and created a RDS Server Farm with VMWare and use VMWare security server for the connection broker. This can also be done with Windows Server creating a connection broker, but for me it was easier to use VMware. No VPN required which was the goal. I configured the server to behave like the students desktops on the computers in our labs. Basically students can log in from any basic device, Windows, Mac, Chromebook and get a Windows 10ish interface that they can work on.” The extra goodie that I learned to use the other day is the Microsoft Server Manager It looks to be a very powerful tool. I am pretty sure I don’t want to mess around with it too much. I don’t want t o break what is already working. The one feature I will be using with students starting on Monday is one that lets me look at and even control student sessions. This should make debugging student issues much easier. It is still not the same as being there but it’s as good as I’m going to get anytime soon."
"99","2020-04-10","2023-03-24","https://blog.acthompson.net/2020/04/emergency-remote-teaching-is-about.html","Attendance at my emergency remote teaching classes has been very close to 100%. Frankly, this didn’t surprise me at all. Apparently I should have been surprised. According to a poll reported by NPR, 4 In 10 U.S. Teens Say They Haven't Done Online Learning Since Schools Closed The difference between public and private shows a huge difference though. According to the article “47% of public school students saying they have not attended a class, compared with just 18% of private school students.” I don’t think that it is enough to say public or private though. I attended a public magnet high school as a student myself and even today that school bucks the trend. According to a New York Times article “At Brooklyn Technical High School, one of the city’s most competitive, Serge Avery, a social studies teacher, said 98 percent of his students have been participating in daily online activities,” There is a lot at play here of course Privilege is a major factor but there is more to that. Somewhere around 61% of Brooklyn Tech’s students qualify for free or reduced cost lunch. I was asked specifically about why my school has such a high participation rate. There is no one thing at play. I think the school culture has a lot to do with it. I think this is true of any school. Education is important to our students. They give up something to attend our school. There is a parallels here with Brooklyn Teck. Both school require leaving one’s local high school and travelling. Both schools make it hard to git in but provide a lot of support to students who do attend. My school started planning and preparing students and teachers for this weeks before we went online. It was no big surprise when it happened. Students were mentally ready to move online. Many of the tools we use online are tools they have been using for a long time. They were already used to receiving and turning in assignments online for example. Many of them have used video chat of one form or another for years. I think relationships between students and teachers (perhaps part of the culture) also plays a part. Part of our school’s whole belief system is that students are known, valued, and treasured. Students joke about it some but they know it is a core value and respond well to it. At its core this is a people issue not a technology issue. Students participate if they see the value in participating. We are still grading - progress reports come out today and we have been online for four weeks. Parents want their kids to learn. That is what they are paying for and they do so because they value education. Students do tend to value what their parents value. If school matters, students attend."
"100","2020-04-08","2023-03-24","https://blog.acthompson.net/2020/04/when-are-we-going-back-to-bricks-and.html","That’s the question my students asked the most yesterday. We’re in our fourth week of remote emergency teaching and I think it is starting to wear on most of us. It especially hard on the young people though. One thing I am more and more convinced of is that school is a great deal more than sitting in a classroom and doing school work. My students, consciously or not, are realizing the same thing. Those casual interactions between classes are important to our students. Students interact with their peers and their teachers in ways that are often overlooked but which make up the total school experience. Going to school online is not going to be a replacement for going to school in a physical place. Dr. Fauci has been saying that he expects that schools will reopen in the fall. I didn’t hear any indication in his most recent remarks that suggest they will open again this spring. Summer camps are still at risk according to Dr. Fauci. I wonder what summer break is going to be like. When we return in the fall, things are going to be different. I hope they will be better. Testing is getting better and the prospects for better medical treatment and even a vaccine are looking up. Most experts expect COVID-19 to be back in the fall again. We all hope not as bad but I think we’ll all be thinking about sick students differently than in the past. Any teacher will tell you that students come to school sick. Some because there is no one to take care of them at home. Some because they don’t want to miss any more school. At my school we see a lot of the latter. One think I hope we learn about and prepare for is letting students stay home and attend classes remotely. We’re all learning about the tools we have now and perhaps the tools will get even better. If more students can stay home when sick and not miss as much of their education schools will become healthier places. There are many other things that will happen in well-run schools to make them healthier places. Better cleaning and more attention to covering ones mouth when coughing just to name two.. We’re all becoming more sensitive to what spreads germs. We’re really seeing how much more there is to school than most people ever realized. Perhaps it will lead to less penny pinching of education in the future. I can only hope."
"101","2020-04-07","2023-03-24","https://blog.acthompson.net/2020/04/living-in-interesting-times-and-sharing.html","You may have noticed I didn’t post anything in this blog yesterday. Part of that is because I had to make an unexpected trip to my family’s vacation home. A neighbor reported an open window and we can’t have that. It was weird driving though what is normally a booming tourist and vacation area and not seeing much traffic and most all of the businesses closed. People are staying home. While I didn’t post here yesterday that doesn’t mean I kept my metaphoric mouth shut. Doug Peterson interviewed me over the weekend and posted the result on his blog.I think it is some of my best thinking. Doug knows how to ask questions that get me thinking. You can read that interview at 10 Questions for Alfred Thompson My good friend, Jane Prey also had questions for me. She wanted to know what I wished I had known before I started remote emergency teaching. My thoughts may be read as the CSTA web site at Software, Hardware, and People Last week I asked people to blog more about their experiences and how they are teaching. A number of people have been doing that. Mark Guzdial wrote two posts over the last couple of days. While he is teaching at the university level I think there is good advice for all educators in them. I recommend them to you. Contingency Plans for CS Students in Large Classes How I’m lecturing during emergency remote teaching Dan Anderson has his own COVID19 Update on his blog. In it he shares the questions he is asking to check in with his students. I think we all know that teaching is about more than just covering the subject matter. I hope to see more from Dan. IF you are looking for how the move looks at my school from the administration point of view this article is a good read Private School Profiles: How Bishop Guertin High School is Responding to COVID-19"
"102","2020-04-05","2023-03-24","https://blog.acthompson.net/2020/04/coding-for-fun-and-mental-exercise.html","Recently, I started reading a book about the mathematics of cryptography. (Mathematics of Secrets) Fascinating. A lot of the math is hard (to put it lightly) for me but the stories that go along with the development of it all are fascinating. So far I have learned a few things and made my Caesar Cipher program much more efficient. I really need to revisit my Vigenère cipher program and make it more efficient and more interesting. The other night I coded up a quick transposition cipher. It was fun and once I got the algorithm down in code it was easier to get to sleep. Writing the code does help me understand what I am reading and that is a real benefit. We’ll see how I am feeling when I get to the chapter on public key encryption. So far, I am sticking with the easy math and playing with ciphers that are far from modern cryptography. I'll leave that to the professionals. Caesar and Vigenere are common enough programming assignments but I may write up the transposition cipher as a project for future use. If not for my own classroom for a project book I have in mind. Miles Berry pointed out that teaching ciphers by having students write a little code and experiment with different variations is much more fun and engaging for students than exercises away from the computer. Doing this stuff by hand can be a bit tedious. For now though I am finding some pleasure is writing some not very complicated code as a way of exploring ideas that I am learning. I’ve had a chance to play with some libraries and methods that I haven’t really gotten to use before. That’s been fun. So much of my coding the last couple of years as been limited to the stuff I teach in a first programming course. I’m using this time to stretch myself a bit. Perhaps get my coding “muscles” back in shape. In any case, for me, coding == fun"
"103","2019-11-07","2023-03-24","https://blog.acthompson.net/2019/11/ai-assisted-programming.html","As I said in yesterday’s blog post,Microsoft has been running their big MSIgnite event this week and making all sorts of announcements. One interesting announcement what improvements to what they call Visual Studio IntelliCode. The idea is that they are using machine learning to help programmers with writing code. In the latest update are whole line completions and refactoring. Interesting. I haven’t seen IntelliCode in use before and it is probably because it is not turned on by default. I did some searching and found that it can be turned on as an Extension (I had to search a bit under the Manage Extentions option) and then you can customize aspects of it from Tools –> Options –> IntelliCode. Oh, and you need Visual Studio or VS Code 2019 for this. I am using Visual Studio 2019 Community Edition which is free. SO far I am not seeing obvious help from it but it may be that I have to do something more complicated in my code or write more code first. It does apparently take context into account for its suggestions and I may not have given it enough yet. But I’ll keep playing. And maybe I should look for some video demos online. There are other things to think about though regardless of if it has been useful already. What is the training like? The write up I have seen says that it learns from examples on GitHub. Initially that scared me as literally anyone can upload to GitHub. One reference I found said something about the 500 best repositories on GitHub. What ever that means. And what was the criteria for “500 best?” What sort of standards will this learning suggest? Some of the documentation talks about options for using other databases of code to train the system so that businesses can train the AI with their code and standards. As a teacher I wonder if there could be a training set for AP Computer Science A? I think Java is supported with IntelliCode in Visual Studio Code. No doubt some will complain that it is “too much help” for beginners but I’m not sure about that. You still have to know enough to take or reject suggestions for one thing. And having the computer tell a beginner something like “you should make a method to reduce this redundant code” might be better received than the same comment from a human teacher. Will this help students learn more or dumb down the process? I’m an optimist and think it will be a good thing. What are your thoughts and concerns?"
"104","2019-11-08","2023-03-24","https://blog.acthompson.net/2019/11/define-better.html","Someone posted an interesting question on Facebook. Is using ++i(pre-increment) better than i++(post-increment) ? My reply was to ask for a definition of “better.” The Facebook posts have a lot of answers from people who appear to not have written a compiler themselves and who making a lot of assumptions. But the point of this post is not to discuss which option is better for some nebulous definition of “better.” Rather is is to think about asking the question of what do we mean by “better?” There are a lot of what I call religious arguments in computing. Tabs or spaces, curly braces in columns or have the open on the end of a line, what is the best programming language, and on and on. Most of them stem from differing definitions of “better.” Sometimes things matter very much at one point in time but not at all later and yet the bias from early days remains. There was a time with memory was so tight that a single character variable name was much preferred to a longer more descriptive name because of the space used. Most of my readers probably don’t remember those days but I do. Fortunately I recognized when the change happened. Not everyone did so quickly. This is possibly at the heart of some of the tabs vs spaces argument for at least some old timers. Other issues have become moot or mostly moot because we have so much smarter compilers and interpreters these days. We have long been at the point where compilers write better low level code from high level code than even the best assembly language coders. I seriously doubt that there is a difference between the code generated for ++i or i++ as the incrementor in a for loop these days. Compilers are too smart for that. Compiler writers think long and hard about those sorts of things. How doubly dimensioned arrays are declared used to make a bigger difference than it does today. I can remember thinking long and hard about how to declare and iterate through two dimensioned arrays. You pretty much had to know how the compiler would allocate memory and what cache would look like to get optimal performance. I don’t think many people think about that today except for the most performance critical applications. Applications we don’t give to beginners anyway. Compilers do a lot of optimization on this sort of process so we don’t have to think much about it. Artificial Intelligence and machine learning (see also AI-assisted Programming) are probably going to make compilers even better than they are today. Today I think “better” in terms of programming should mean “easier for programmers.” Easier to write, easier to understand, easier to modify, and to allow programmers to think about the end result and not the assembly/machine language generated. Let the software do what software is good at and people do what people are good at."
"105","2019-11-13","2023-03-24","https://blog.acthompson.net/2019/11/not-too-easy-and-not-too-hard.html","We’re covering Classes and Objects in my Programming Honors course this week. Specifically we are learning how to program classes in C# and use them in programs. The struggle for me is to come up with classes that are interesting to students, practical for them to use, and not overly complicated. This is not Advanced Placement computer science A and we don’t have a whole year for the course. I start with a simple Dice class. Easy enough as an introduction . I also live coded a Coin class. The difference being that I added images to the coin class to show them that more interesting objects can be used in classes. So what next? Things I have used in the past include a playing card class. Interestingly enough this has had cultural implications. I have international students who are not always as familiar with American playing cards. But it works. There are a lot of pieces to playing cards and you can do them simply (face value and suit) or complicated (Face value, suit, nominal value – face cards are 10, front and back images, suit color, text names, etc) Methods and constructors can get interesting to say the least. So can creating programs to use the “cards.” I tried a Pez dispenser class once. I do have a 12 inch Pez dispenser on my desk after all. I’ve done it the simple way with just a capacity value and a current count value. What I would really like to do is use a stack in the Pez dispenser class and have candy objects to put in it. If I were teaching APCS A and had time to cover stacks I would do this for sure. But I don’t. I’ve thought about revisiting some of the class projects from prior AP courses. Anyone remember BigInt? I kind of liked that one. I did more with the Marine Biology Case Student but my students never really liked it. They called it the DAF – Dumb Ass Fish case study. Both may be a bit much for the time I have though. I had some fun with a quiz question class last year. Data included the question, an array of possible answers, and an index of the correct answer. I liked that for showing how flexible array parameters could be. A true/false question is just a question with two possible answers. The next design question is of course do you have a simple array of questions or do you design a quiz class? If a quiz class, what does that even look like? Might be fun the have students try that design. I’m still playing with more ideas. I’ll have to use something tomorrow but maybe the good idea fairy will hit before Monday. Suggestions anyone?"
"106","2019-11-21","2023-03-24","https://blog.acthompson.net/2019/11/teachers-helping-teachers-for-free.html","I understand the appeal of sites like Teachers Pay Teachers. Really I do. Some teachers are awesome at creating resources and the idea of getting paid to share them is attractive to underpaid and over worked teachers. Even Amazon, never one to miss a chance to make money, is getting in the business of supporting this idea (Amazon Starts Marketplace for Teachers to Sell Online Educational Resources) . For some reason the idea of asking poor under paid and under resourced teachers to pay for stuff that I have developed for my own use just doesn’t feel right. I have no problem with teachers who decide to ask other teachers to pay for resources. I have no problem with people who make creating and selling resources in order to make a living. It’s a free country. I hope they have no problem with me giving stuff away for free. I made a comment to this effect on Twitter and Mike Zamansky replied with “When I was starting out I only survived by the good graces of more senior teachers who mentored and just as importantly SHARED materials (free of charge). This shows the disconnect between capitalists and educators.” I think that has been the experience for many of us. We survived and continue to survive because others share resources with us. I’ve been pretty lucky myself. The first real resource I shared online was a pair of project books for Visual Basic and Visual C#. I got paid to write the first editions. By Microsoft not by other teachers. Teachers got them for free. I subsequently updated and expanded them several times as the software was updated but while the books were still free I no longer got paid to write them. I was and am ok with that. I got plenty of use from those projects myself. The feeling of helping other teachers is a reward in itself. In full disclosure, I have a couple of self-published books on Amazon now. Mostly because creating hard copy books to give away is more than I can spend. But I haven’t turned down teachers who request PDF versions. I have also benefited from resources shared by others. PowerPoint presentations, video demonstrations, project ideas, and a host of other resources that people have shared over the years have greatly benefited my teaching and learning. I am very grateful for those who have generously shared those resources. One day maybe teachers will not be under resourced and under paid. For now though far too many are. That’s why I think we should do as much as we can to support each other."
"107","2019-11-22","2023-03-24","https://blog.acthompson.net/2019/11/coding-for-fun.html","As with so many things, it started with Doug Peterson. Doug recently posted about something called 100 days of code. This got me started about the need I feel (some times) to do more coding for fun. Or at least coding projects for my own interest and not for “work” purposes. Next up was Mike Zamansky (yet another good idea fairy whose blog I follow) Mike posted about some text based projects he was introducing to teachers during some professional development he has been running. Links below. Now I love messing around with textual data. Love it. And I’d been thinking about that already and posted about one project recently. Mike’s most recent post reminded me of something I did “back in the day” when we used markup languages to feed into word processing systems (i.e. before WYSIWYG editors) I created my own concordance of the Bible. It was pretty cool to be able to do something like that. I may have to look for tools to do something similar. Maybe with HTML? We’ll see. I also have a number of “things” that can be programmed sitting around at home. The trouble is time. Well, honestly, not so much time as prioritization. There are other things to do. School stuff for example. Grading, lesson planning, and all that. And home stuff like the tables I want to build and the hydroponics system I have the materials for but haven’t built yet. And books to read. I need to be exercising more. And, well, you get the picture. I suppose I could be coding and not writing this blog post as well. Sigh. I wonder if I wrote a scheduling app to help me out? How about you? Do you code for fun or for learning (which is fun too) or is coding not part of your definition of fun? IF you do like to code how do you prioritize it? Does 100 days of code appeal to you? Related Blog posts: Working with texts part 1 - cleaning the data – by Mike Zamansky Working with texts part 2 - bag of words - by Mike Zamansky I Speak Jive – by Mike Zamansky How Many Words in That Text? - by Alfred Thompson Palindrome Project – by Alfred Thompson"
"108","2019-11-25","2023-03-24","https://blog.acthompson.net/2019/11/whats-in-name.html","Naming things seems to be a continual problem with programming students. I’ve written about this before (two years ago A Rose By Any Other Name Gives An Error ). I can’t seem to get a handle on it with students. I think part of the problem is that students are good with ambiguity and inference. If you call a student by the wrong name or a diminutive they don't’ use themselves you may get a correction (think warning in computer speak) but they know who you are talking to/about. Compilers are a lot more fussy. Case-sensitive languages differentiate between “question” and “question.” Forget about adding extra letters or misspelling a name. Somehow students have trouble looking that closely at words. I’m not sure if that is because they are too used to filling in the blanks of misspelled words or something else? I do notice that I see a lot of typos and spelling errors in other written work they do. Even though there are spell checking tools built into editors. Part of the problem may be error messages. Well, that students don’t always read the error messages is part one. But even when they do the messages are not always helpful enough. “Variable does not exist in current context” is pretty meaningful for an experienced programmer. We understand things like scope for one thing. We also know to look for spelling differences. Students sometimes have trouble parsing that all out though. It is something that comes with experience. Unclear error messages have long been a problem. I think that maybe it is because the people who write the messages have too much knowledge and so assume too much knowledge on the part of programmers. Then again most development tools are designed for experienced programmers and not beginners. I wonder if smart IDEs will one day help beginners. Perhaps artificial intelligence modules will look at code and ask “Did you mean ‘Question’ and not ""’question?” or “did you forget to declare this variable?” Or even “this variable is outside the scope of where it was declared.” This is the sort of hint that teachers give now. All in all I think the answer is to make the tools more relatable to the people who use them. Teaching computers, which can be very difficult, seems, some days, to be a lot easier than teaching high school students."
"109","2017-11-27","2023-03-24","https://blog.acthompson.net/2017/11/a-rose-by-any-other-name-gives-error.html","There is an old computer science joke that goes more or less like this: There are two hard things in Computer Science: cache invalidation, naming things, and off-by-one errors Now I don’t have to cover cache invalidation in my high school courses and I do see an awful lot of off-by-one errors from students but today I’m thinking a lot about names. Names and how students get them wrong. Today I had students write code along with me as I demonstrated in on the board. As usual with any GUI interface the first thing I did was draw objects on the form and name them. I’m pretty careful about giving each item a meaningful name. I spend some time talking about why we do that. OF course a larger group of students than I’d like skips that step. Next I write the code behind being very careful to use the correct names for the objects that I am requesting information from or sending information to. I talk about how having meaningful names here makes like easier. Students diligently copy the code. Anyone experienced with students knows what happens next. Students insist they did exactly what I did get build errors. Remember how I said some of them don’t name things the way I show them to name them? Yep, this is where they expect the computer to do what them mean even if that isn’t what they told it to do. Others have the right names but for the wrong objects. “Mr Thompson, why did that show up here and not their?” Answer: Because that is where you told it to display. Try as I might students take a while to understand how important getting the names right really is. Somehow getting this right is a struggle for some students. I want to believe it is all their fault – they were not paying attention. That has to be it right? But maybe not. Maybe it’s me. Clearly I need a better way of explaining things. Maybe visual aides? Boxes with names on them? Something. Figuring this out before the next class starts is a priority. Suggestions are welcome. What works for others?"
"110","2017-11-28","2023-03-24","https://blog.acthompson.net/2017/11/how-some-schools-sabotage-computer.html","There are many problems getting more computer science into schools. There is a shortage of teachers. There is a problem with room in the schedule. I could go on but there are also problems for schools who have computer science programs caused by people inside the schools. And I keep hearing about them. Problem number one seems to be the people who manage the school networks. Now you might think these people would be natural allies of computer science programs and you’d be right in some cases. In far to many though your would be wrong. A lot of school network managers have priorities that can run counter to those of teachers. Not just computer science teachers mind you but they can hit computer science teachers especially hard. There is always a trade off between keeping a network secure and keeping it easy to uses. Finding the right balance is key though. One of the biggest issues I keep hearing about is technology decisions that don’t involve the teachers who will be using the technology. For example lately I have been hearing a lot of teachers complain that their PCs are going away to be replaced by Chromebooks. Now one can do a lot with Chromebooks. One can even teach computer science with them. More or less. But telling a computer science teacher that they are losing the tools they have used for years and asking them to figure things out on their own is not fair. Far to many hardware decisions are made in schools based on cost and ease of system management without considering the impact of teaching. Sometimes decisions are made that actively prohibit teaching some things. IT people block useful websites. IT people refuse to allow some software to be installed. All this with the goal of locking down the systems and making them easy to manage. And then there are administrators who don’t seem to understand the needs of computer science courses. I recently heard from a teacher who was told they were losing their computer lab for two weeks so the school could do testing. What? Teach computers without computers? OK sure there are many CS concepts you can teach without computers. CS Unplugged is a wonderful resource for that. But to have that decision made for you one short notice – for and advanced placement course? Can you imagine? Picture the music department told they would have to teach music without instruments for two weeks? Or the art department being told to teach without art supplies? It’s hard to get too upset with the principal here though. They are in a hard spot and need the computers to do the standardized testing that people who know nothing about education insist that they administer. On the other hand since it is unlikely that these tests come as a surprise to the principal they should at least let the teacher know long enough in advance so that they can properly plan. But they don’t understand what it is like teaching computer science. How could they if they never even took computer science as a student? We really do need more educators to understand computer science better. BTW my school has an administration who absolutely do understand enough about CS to bring the department in on decisions that impact them. And our IT people put students and teachers first and do all they can to make teaching easier for us. Faculty has lots of input on new devices. We do it right. I just wish every CS teacher had the support we do."
"111","2017-11-30","2023-03-24","https://blog.acthompson.net/2017/11/cs-educator-interview-sheena.html","Sheena is a wonderful innovative teacher who I have know for several years. We also served on the CSTA Board together. She works across grad levels (K-8) at a school district in California. She’s doing some very cool things. I am so grateful that she agreed to do this interview. I think you’ll find it interesting. WHERE DO YOU TEACH? WHAT SORT OF SCHOOL IS IT? I teach in the Los Altos School District, in the San Francisco Bay Area, California. It is a K-8 public school district with approximately 4500 students. We have seven elementary schools that are K-6, and two Jr High schools (grades 7 and 8). HOW DID YOU GET STARTED TEACHING COMPUTER SCIENCE? My background is in computer science. After working for several years in Silicon Valley, I decided to take a break and go to college to learn art. During that time, I had an opportunity to volunteer in the local art docent program, and discovered I loved teaching. I became the art teacher for one of the schools in the district and along with watercolor, clay etc, I showed the kids how to create on the computer . When the art teacher position went away, my administrator suggested I teach those digital art lessons across the district. I used Scratch programming as a tool for the art program in the district in 2009, just a couple of years after Scratch was launched. Later this digital art class was converted into a CS program for sixth graders, and then expanded to all other grades. Today, every child in the district learns computer science. DESCRIBE THE COMPUTER SCIENCE CURRICULUM AT YOUR SCHOOL. WHAT COURSES DO YOU HAVE AND WHAT ARE THE FOCUSES OF EACH? Currently I am the computer science integration specialist for the district. This means that besides teaching I work on curriculum, PD and integration across the district. Every one of our seven elementary schools has a STEM teacher and this teacher integrates computer science in K-5 STEM lessons. I work with this STEM team, introducing new tools, and doing PD when needed. The sixth graders have the same required CS program that I started, and it includes units in Scratch, JavaScript/Processing, and Arduino. I currently teach this 6th grade program in one of the schools. I also teach a Python based CS elective in 7th and 8 grade at both Jr High schools. I also work with the 7th and 8th grade Science teachers to integrate CS into the Science classes. See more details on our CS programs at https://www.lasdschools.org/District/Portal/Computer-Science WHAT IS YOUR OVERALL TEACHING PHILOSOPHY? PROJECT BASED LEARNING? FLIPPED CLASSROOM? IN SHORT, WHAT MAKES YOUR CS PROGRAM “YOUR CS PROGRAM?” If I had to pick one overall philosophy, it would be ‘CREATIVITY’. My CS program was created from an art program, where the focus was on creating something that was personally relevant and where programming was just one more medium to express your creativity. I use mini projects to teach specific content, with challenges to differentiate instruction, and with as much flexibility as possible. The focus is to get students to work passionately on projects they care about. WHAT IS THE BIGGEST CHALLENGE IN TEACHING CS AT YOUR SCHOOL? Differentiation. After teaching CS for several years ,we now have students at widely different levels in our classes and we must differentiate in many ways to make sure we keep all students engaged. After taking the required CS classes at our schools, some students continue to work on coding projects at home, and even enroll in summer camps/clubs and more, while others have only done what is done in class (or have forgotten it!) . In our classes today, we work continuously on the challenge of creating a comfortable environment where each student can move at their pace. WHAT IS ADMINISTRATION’S SUPPORT (OR LACK OF SUPPORT) LIKE AT YOUR SCHOOL? Our administrators are very supportive of the programs. In 2009, when very few public schools were doing any CS (there was no code.org or much advocacy material 8 years back!), the Los Altos school administration showed that they were early adopters and innovative . They launched a district wide computer science program because they believed in the idea that this would encourage creativity and help students see computers in a different way. At every step during the last 8+ years, they have encouraged computer science in our district. We are constrained by the number of dedicated teachers available to teach CS, else we would have moved even faster than where we are today. HOW DO YOU MEASURE SUCCESS FOR YOUR PROGRAM? FOR YOUR STUDENTS? Success is measured by just one factor - ‘Do they want to do more?’. The answer is yes for all grades. The K-5 students love STEM time and welcome any open coding time. The sixth graders often tell us it is their favorite class and at their end of year showcase, we have a packed room of students showing their final projects. Our 7th/8th grade CS elective is over subscribed. Kids are using code in other classes on their own. A Chemistry or English teacher for example will sometime sends me a Scratch or Python project that was submitted to show learning in their class. Our students are not afraid of coding, and are always ready to learn more. WHAT IS THE ONE THING YOU LIKE TO TALK ABOUT REGARDING YOUR PROGRAM THAT I HAVEN’T ALREADY ASKED? Students are curious, creative and eager to learn. It is so much fun watching them discover the magic of coding. Hearing that shout of joy, when a student fixes a bug can keep you going for hours even when you are tired. Computer science education is moving at a fast pace, and I am always learning new ideas, experimenting with new tools and looking for ways to improve our CS programs. TELL ME ABOUT YOUR ONLINE PRESENCE (IF ANY) · School name and web site: Los Altos School district. www.lasdschools.org · Twitter: sheena1010 · Blog: computersforcreativity.com See also Computer Science Educator Interview Series Index (2017) for other CS educator interviews."
"112","2017-12-05","2023-03-24","https://blog.acthompson.net/2017/12/some-thoughts-on-drag-and-drop-block.html","I’ve toyed with drag and drop or block based programming for a bunch of years now. I even keep a list of block programming platforms. But this year I am really using them a lot with students. It’s been a real learning experience for me and my students. I’m using AppInventor with my mobile application programming students and code.org’s AppLab with my APCS Principles students. Now the AP class is using AppLab with JavaScript now but we started with the blocks and the interface is still very much drag and drop related. I’m thinking about this in two ways. One as for my own projects and one as a teaching tool. I’m old school – started programming with punch cards and FORTRAN – so I confess that I am still most comfortable doing my own programming in traditional languages (mostly in C# these days with some Visual basic depending on my mood0. For for students things are different. First the good. In many ways my mobile apps students are doing more advanced things than my Honors Programming students (C# there). For example connecting to Amazon’s API is a snap in AppInventor. Setting up things like nested code is also very easy. Syntax problems are pretty much not an issue. So we are covering a lot of concepts. That’s all great. I wonder how it will translate for learning text based languages. My AP students all have previous (to applab) experience with text based languages so they are not a control group for me. One the down side, debugging block based code is different for me. I’m used to traditional debuggers and I haven’t figured out how (or if) that can be done in AppInventor. So of course I go old school with taking code out or adding messages in different places. Error messages in AppInventor are an area where I am facing a learning curve. The idiom is different and I’m teaching myself so it can be slow at times. Next time I teach this it will be better though as my students are showing me a lot of bugs learning opportunities. Still I have had the AppInventor emulator crash with no usable error message and that is a problem. I want to see if I can get some cheap devices to use next year. I think that will make some things better. UI formatting is an other area I am struggling with. I think this is both a lack of experience and practice with the tool combined with different limitations on a mobile device screen. I am less than happy with my UI for my Windows Phone app which I wrote in C# and Visual Studio which suggests I need help with small screen UI design anyway. In any case the students in my mobile app class are learning a lot (I think) and enjoying the course (I think) which are good indicators of success. I’m pretty happy with that. I’ll use AppInventor for future sections of Mobile App Programming. I still feel like blocks are best for small apps and for beginners. Yes, I know people make some pretty sophisticated programs with them but I struggle to wrap my head about that being as easy as text based languages. Maybe 45 years of experience writing text based code is a learning disability for me. Or maybe I just need the right teacher? I’m taking blame here and trying not to blame the tools. Today block programming languages seem to be mostly designed as teaching tools and they are good at that. I think a lot more has to be done to really make them usable as general purpose languages for more complicated large projects. I do think they can get there even if the path isn’t obvious to me."
"113","2019-08-18","2023-03-24","https://blog.acthompson.net/2019/08/and-so-it-beginsschool-year-2019-2020.html","Tomorrow (Monday) I will meet the new freshmen in my study hall. And I’ll finish getting my room ready for the new school year. First day of real classes is Tuesday. And I am not as ready as I would like. I have a day by day plan for every day of the semester (even the year for my AP CS Principles class). Lesson plans last until they run into actual students so there will be adjustments. There always are. It’s my 5th or is it 6th year teaching honors programming so that is more settled than anything else. I still make changes as I go along because not every class in the same as any other. And who wants to do the same thing year after year anyway. It’s my third year teaching AP CS Principles and I am making big adjustments in the schedule over last year. I am hopeful that I’m going to get it better this year but who really knows. My third year for teaching Mobile Application Programming and I am switching from AppInventor to Thunkable. AppInventor has given me a lot of issues with the emulator and most of my students have iPhones and Apple is dragging their feet on allowing AppInventors iPhone software. Thunkable already works with iPhones, though without support for some features I would really like. Plus it seems to connect to phones more reliably. We’ll see how it goes. I’m adapting project ideas as I go along. That’s not completely new but it is not without risk. At least I only have three preps. Last fall I had four. I also have more free periods as I am teaching a reduced load (at my request) and that should help a lot. Are you ready? Have you begun already? Let’s do this thing!"
"114","2019-06-30","2023-03-24","https://blog.acthompson.net/2019/06/iste-2019-trip-report.html","There was a time when I would have written a blog post every night of ISTE. Apparently I’m getting older or something and that is not a priority for me any more. Be that as it may I got some good stuff at ISTE this year. ISTE is not all about computer science the way CSTA (next week) or SIGCSE are but there is more CS than their used to be. You have to hunt for it a bit though. Robots were big again this year. It seems like everyone is pushing robots as the silver bullet for teaching CS. I’m not so convinced and most of the robot stuff was aimed at younger students. K-6 or K-8 were big. Lots of people promoting their drag and drop Blockly-like programming tools. If you push you hear about Python and other text based languages. I didn’t spend much time with robots. I don’t want to build my course around them. If others do that is fine. It’s just not me. On the other hand I am interested in internet of things and integrating that into some of my courses. Plezmo has some interesting products in that space. I missed them in my walk through the exhibit hall but Alark Joshi, Associate Professor of Computer Science at the University of San Francisco, sent me an email suggesting I check them out. I’ve got a core kit ordered. I plan to use it for some experimentation on my own but also as a way to introduce IoT to my students in several courses. Should make for some good demos. Later I may add it to my curriculum. A lot depends on my experimentation. Doug Bergman gave a presentation on using Artificial Intelligence in projects using some tools from Amazon Web Services (AWS). Doug demonstrated using these services from Thunkable This may be the piece that really makes my mobile application development course take off. You can learn more about AWS Educate at this link. Unity also had a surprisingly big booth at ISTE. They have some free online courses which would be usable in the classroom. If I were to have a game development course I would go there first. As it is I plan to take some coursework myself and see how it might fit in to an existing course or perhaps into a new project course I want to propose at my school. This relates to something else I found interesting at ISTE. Steve Demo presented on Virtual Reality in education. The Oculus Quest (which I got to try out) is pretty awesome and it is programable using Unity and C#. This combination might be awesome in a course after my Programming Honors or our AP CS A course. First I’ll learn some Unity and then I will look at AR/VR/MR devices to see what is practical in the classroom. I did talk to someone from the Azure (Microsoft’s cloud offering) at the Microsoft booth. I will follow up to learn more about their options as well. GitHub is something I really want to bring into my Programming Honors course next year and Microsoft owns GitHub now. GitHub for education will be at CSTA and Mike Zamansky is presenting a session on using GitHub so I’ll be in better shape there after CSTA. So I enjoyed ISTE and I got some good value out of it. But because ISTE is so large a lot of the CS stuff (and people) get lost. CSTA will be a whole other story. Can’t wait to get there."
"115","2019-07-07","2023-03-24","https://blog.acthompson.net/2019/07/pre-conference-thoughtscsta-2019.html","I’m on my way to Phoenix AZ for the CSTA conference. For years I would get there early and leave late. This was especially true when I was on the CSTA Board and there were Board meetings to attend. Traveling on my own dime and my own schedule this trip. This afternoon I will be helping at the registration desk. I’ll also be helping there tomorrow. Volunteering at CSTA is a small thing in some ways but I think it is really important to make some contributions. Plus it means I get a jumpstart on the “Hallway Track” that is part of what makes CSTA so wonderful. Sunday and Monday are workshops and I didn’t sign up for any. That’s new for me but Monday afternoon the exhibit hall will be open and I really want to get to that. Almost 60 exhibitors this year. I think we had 6 the first year we had exhibitors. This shows how important CSTA is to so many companies, universities, and other groups supporting CS educators. Plus it is a great opportunity for educators to learn and have one on one personal conversations with exhibitors. I’m a big fan of exhibit halls at conferences though I know not everyone is. Unlike ISTE, where I was recently, the focus on CSTA is all computer science and the exhibit hall reflects that. One doesn’t have to search for relevant booths and it is still small enough that you are unlikely to miss something. Tuesday and Wednesday I have lots of sessions in my app. I’m looking forward t o Mike Zamansky’s session on using GitHub as a CMS. There is also a session from Amazon Web Services on introducing the Cloud to students. Another key technology there! And a Nifty Assignments session to cap of the day. I’m still deciding on Tuesday. There are several sessions I’m interested in that are at the same time. A common problem, but a good one to have at a conference. I have no idea what the “hallway track” will bring. I have so many friends at CSTA and they are doing so many interesting things. Learning from other teachers is really awesome. CSTA almost feels like a family reunion sometimes."
"116","2019-07-08","2023-03-24","https://blog.acthompson.net/2019/07/csta-2019-day-0.html","Sunday was the start of CSTA 2019 with workshops and the Chapter Leadership Summit. I wasn’t part of the summit and I didn’t get to any workshops but I still had a good day. I did crash the reception Google hosted for the chapter leadership summit though. Jake Baskin announced a million dollar grant to CSTA from Google and Google’s new “Code with Google” program. I expect to learn more about both as the conference goes on. The highlight of the day was spending time with friends. I’ve been to every previous conference (going back before there was a CSTA) and in the early days it was much smaller so I made a lot of friends back then. I’ve made still more friends by being involved – volunteering in different ways. I had dinner with 10-11 friends almost all of whom had been on the conference committee with me, the CSTA board with me, or both. Besides helping the CS community, volunteering with CSTA is a great way to make friends. I wonder how it is for people new to CSTA. It’s so much bigger today and while that is wonderful in many ways I can see it being overwhelming for some as well. My hope is that people expand their connections beyond people they may have come with or know from elsewhere. Diversity is really important. Part of what made last night’s dinner so interesting for me was people from a number of different states and two countries other than the US. Diversity came up in a number of contexts yesterday both in conversation and in he Google announcements of yesterday. Companies in the industry are starting to really appreciate the importance of it but I really believe that as educators we have an important role in fostering diversity from the start. Today, Monday, I will be working the registration desk for a while this morning, visiting the exhibit hall in the afternoon, and trying to connect with as many people as I can. Learn from the best I often say. If you’re around come find me. I am wearing my hat and I have “I Follow @AlfredTwo” ribbons if you’re interested."
"117","2019-07-08","2023-03-24","https://blog.acthompson.net/2019/07/csta-2019day-1.html","As planned I spent most of the morning helping at registration. And talking to a lot of people as they came in. After lunch the exhibit hall opened and I was in there early. A few highlights: A virtual reality version of Alice is coming in the fall. I had a demo wearing an Oculus headset riding through an Alice world. Very awesome. Virtual Reality and Alice – Wow! I signed up for GitHub for educators. GitHub classroom looks like a good way to send starter projects to students. I have a lot of exploring to do but there is online training for teachers so I’ll start there. I had a demo of CodeSpace from FiriaLabs for teaching Python. They have a robot that looks pretty cool as well. Still not sure robots are my think but their connection to Micro:bit looks pretty nice as well. Code Jumper is a program developed by Microsoft for blind and visually impaired students. It involves physical devices that are a coding language. Think block languages where the blocks are actual physical blocks The teacher who showed it to me tells me that she has used these devices (not available yet but she is in a pilot) with ADHD students They get very engaged. I can really see this useful in a lot of situations. Availability is some time in the fall. I have no idea of pricing. The welcome reception was top notch. I ate my fill and have no need to a later dinner. Better still was the opportunity to talk to even more people. BTW, in my last post I mentioned Google’s new Code With Google program. It’s a good collection of resources for teaching computer science. Check it out at https://edu.google.com/code-with-google/"
"118","2019-07-09","2023-03-24","https://blog.acthompson.net/2019/07/csta-2019-day-2.html","I’m always skeptical about celebrity keynotes at education conferences so my expectations for Natasha Singer from the New York Times.were not high. I was pleasantly surprised though. She gave me a lot to think about when teaching things like ethics, accountability, and privacy. Things like what the saved wi-fi networks our computers save and share to how companies track individuals and more. A good keynote should give attendees things to think about and things to act on and this one did that for me. So great start to the day. There were any number of sessions I would have liked to have attended and I think information about them (videos maybe and hopefully others blogging) will show up. For now I am writing something about the sessions I am attending. My first session of the day was “Soaring through the Cloud” by AWS Educate. If nothing else people are getting a good look at the vocabulary of the cloud. Vocabulary is something I see as key. I was impressed that AWS wants schools they partner with share their curriculum and programs with other schools. Diversity is important to them. The AWS Educate program includes free cloud accounts, online training, and badging for successes. There is a ton of content there. I could see a special course around this. Also AWS has been very responsive to teacher and school worries about student privacy and security. Very important! I didn’t have to move for my second session of the day – Using GitHub as a Content Management System. Another packed house. This was a good walk through of GitHub for me. As a total beginner it was pretty helpful..I still have a lot of playing around to do but it does seem really usable. Lunch had a set of trivial games that we surprisingly fun followed by a panel run by Microsoft. The panel was of high school students who were talking about the influence of taking computer science courses on their lives. The students were from schools supported by volunteer TEALS instructors. These students were from schools in low economic areas that would probably not have CS without the work of TEALS volunteers – industry professionals giving their time to teach students. It was an inspiring session. Oh and the food was pretty good too. Afternoon took me to a session on Machine Learning. Teachers talked about teaching machine learning both as a concept and at a technical level. There are a couple of neural network “playgrounds” including the tensor flow website from Google that I want to use to introduce the ideas to students. There is a link to resources (http://bit.ly/ML-HS-Resources ) that I plan to explore. Last session of the day for me was Nifty Assignments. We could have used a bigger room. This session was worth getting there early for.The new CSTA Nifty Assignments page has all of the references to the sessions. Five interesting projects with something for everyone. from K-5, to 6 – 8 to 9-12. I’m inspired to have my students do more graphics by the digital coloring book projects and have some great ideas about using letter frequency counts. Oh and last year’s nifty assignments (which I missed) are also linked there. This is only going to be a better and better resource as time goes on. For me the day finished with dinner with David Renton who taught college is Scotland for years and who now teaches high school in the US. Great conversation about teaching and differences and similarities in education in two different countries. You really can meet the best people at CSTA."
"119","2020-04-14","2023-03-24","https://blog.acthompson.net/2020/04/planning-for-school-in-fall-of-2020.html","This time of year I always start thinking about the next school year. Even though I don’t expect to be teaching (announced my retirement already) I can’t stop thinking about the fall. Will schools be in their buildings or will the start the year teaching remotely. Universities are thinking about a possible school year without students on campus. I don’t think anyone wants that. It’s a worst case situation. There are some learnings we can use which ever way we go though. As I have written earlier, my school is using virtual machines that students can connect to from home. I really hope this is in place in the fall. It opens the door for so many options, especially but not exclusively, for computer science programs. If I were at VMware or Microsoft I would be working on cookbook solutions for school IT people to work with over the summer. Other options like servers hosted on Microsoft Azure or Amazon Web Services (AWS) may also be good options. They would have to work on good pricing and easy to follow instructions for IT people, teachers, and students though to make it work. I know schools using GitHub very effectively as well. That has an advantage of teaching an important industry skill. It has the disadvantage in that students may not have the right software of powerful enough computers at home. Maybe a hybrid solution with GitHub and some virtual machines would help here. Again, none of this scales with training resources for teachers. Not every It person is as good as the one at my school. And even he is constantly learning new things. Learning Management Systems may have to adapt as well. Can your schools LMS distribute and collect assignments? many can but some cannot. Schools are likely to be looking closely at how well their LMS handles remote teaching. Our current computer conferencing solutions seem much better suited for industry than for education. Other issues are showing up just because so many more people are using these tools. Poor Zoom has been playing catchup with concerns for the last month. Google Meet has also be changing and improving because of feedback from educators. Microsoft Teams is used by a few (and they mostly like it) but not many seem to know about it. I do expect a lot more online training for Teams aimed at schools to come. There is already a lot. Perhaps all of these companies, if they get a chance to catch their breath, will start looking closely at the needs of educators. I have already seen surveys from companies asking teachers what problems they have and how they are trying to solve them. Teacher needs have never gotten so much attention from companies large and small. Maybe we’ll see a big jump in functionality for schools and teachers. A man can hope. Right now we don’t know what will happen in the fall. Will there be enough testing and treatment for families to feel comfortable sending there children into schools which are germ factories in the best of times. Or will we be starting the year teaching and learning remotely? No one really knows. So we plan for the first and hope for the best."
"120","2020-03-25","2023-03-24","https://blog.acthompson.net/2020/03/teaching-from-homeday-8online-teaching.html","We sure are learning a lot about online classes these days. Teachers at my school are using Google Meet and Zoom in about equal numbers. This means that students are seeing a lot of both tools. At some point there will be a lot of good data about what does and doesn’t work. What is clear is that tools designed for companies and their conference calls is not automatically a good fit for schools. There has been some chatter about privacy and data security for both but I am seeing more concern about Zoom so far. Privacy is a big deal for everyone of course but schools have some different concerns because the data we are talking about involved children. This needs to be addressed. Students I have talked to see some of what I do when comparing Zoom and Meet and that is power verses complexity. If we could limit the complexity side to the teacher/meeting creator role that would be a good thing. We need things to be intuitive and easy for students so that they can participate fully. I’m using both tools – Google Meet for two courses and Zoom for a third. I really like the simplicity of Google Meet but it lacks the controls I like from Zoom. Zoom also lets me see more faces than Meet. That’s a big deal for me. Another lesson I am learning is that one screen is not enough. It’s not enough for me and it is not really ideal for students. It is hard for students to switch between what I am asking them to do and to what they are actually doing. For me I’d like to see their faces, what they are seeing from me, and my work screen all at the same time. I also like a window open for things like attendance taking and showing my notes. This would probably work with one large screen but it would have to be a lot larger than what most teachers currently have. A lot of teachers are sharing pictures of their home teaching stations. Like me, many are showing two computers or a computer with a second monitor. I can’t see getting by with less.I have two laptops side by side but I am considering adding a second monitor to one of them. At least I have the option. Many teachers do not. It’s probably to early to understand everything we need to do this right. Hopefully, once things calm down and some sort of normal settles in we can all compare notes and make some solid recommendations. Smart companies will take note."
"121","2020-06-08","2023-03-24","https://blog.acthompson.net/2020/06/setting-up-to-teach-from-home.html","This past spring semester was my first time teaching remotely but not my first time working remotely. I worked from home while working in industry for jsut over 9 years. The latter probably helped me set up to teach remotely. Still, I learned a few things about being a remote teacher. I thought I should write it up and see what other ideas people might have to share. First, you need to work somewhere outside the main events of the household. An office is ideal of course but not many of us have that option. Still you want to find a place that is not busy when others are home, where they are a minimum of distractions, and where you don’t have to set up and break down your work equipment every day. If you are presenting with video you want to be aware of your background. To much light behind or from the side can be a problem for the video. You want to know what is behind you. Will it distract others? Will it show things that are to personal to share with the whole world? I know teachers who have hung sheets behind them. That is probably not necessary but you want to be deliberate about what other see in the video. Speaking of video, you want a good camera. I’ve seen some debate over webcam or built-in camera and I don’t have a firm opinion. If you have a good camera in your laptop or desktop you will probably be fine. In either case, make sure you are centered in the image it takes. I find that a headset works better than the microphone and speaker built into at computer. A headset keeps out extraneous noise from both your ears and the conversation. It helps avoid distracting noises in the house as well. I know that a few teachers I know have purchased “gamer headsets” and found they work very well. They’re not that expensive either. Speaking of gamer equipment, a comfortable chair is a must as you will be in it longer than you would be if teaching in person. Several teachers I know have been buying chairs made for computer gamers. What ever chair you get should be comfortable and sturdy. Screens? You really want, I almost say need, two or more windows. Professional developers argue over which is better – two (or three) monitors or one very large monitor with multiple windows. I suspect that for most teachers a second monitor is less expensive than a very large monitor. Cost aside, personal preference rules in the hardware decision. I used two laptops side by side this spring but I would use one with a second screen if I were doing it again. I might have a second laptop as well since I have several anyway but that would be more of a backup than a principle workstation. Being able to copy things from one window to another is invaluable. I used to keep one window showing that online meeting with student faces and the second with what ever I was demonstrating or presenting. I also liked to have my student information system, for attendance, in one window and the Zoom or Meet window in another to make taking attendance easier. That was much easier than switching windows on one screen. I did the same thing when grading. Work I was grading in one window and gradebook software in the other window. Since work was all being submitted online this was the easiest way to work for me. Your mileage may vary of course. I can’t forget the network. Wi-fi works when it works. Wired connections are almost always faster and more reliable (I sometimes lose WIFI when the microwave runs), It’s not always easy to set up but if you can use a wired connection I do recommend that you do.. Will teachers be teaching remotely in the fall? I don’t know that anyone knows for sure. It doesn’t hurt to prepare for multiple eventualities though."
"122","2020-06-17","2023-03-24","https://blog.acthompson.net/2020/06/thoughts-on-ide-for-teaching-cs.html","Amy Ko posted a slide deck about CS education in higher education from a presentation she made to a group at Microsoft. There is a ton of stuff in there. I need to read it a couple more times actually. I’ll probably blog some more based on other things she brings up. Issues of equity for example. That one I need to think over a bit more as I process the reality of the world today. But for this post I want to focus on some of the ideas she shared for teaching beginners. Under the heading “Classes move too fast” she writes “Many introductory programming courses now include a 1) professional-grade programming language, 2) a professional-grade IDE, 3) a professional-grade version control system, and 4) a professional-grade test framework.” This is too much for many students. In my end of year survey most of my students felt that Visual Studio (a professional-grade IDE using a professional-grade programming language) was fine for them. Not to hard. And a lot of teachers are using GitHub – a professional grade version control system. That is still a lot to learn just to get going though. My students may think they are doing just fine but honestly I spend a lot of time fixing projects because it is far to easy to mess them up. I’m finally beginning to face that truth. Later in the presentation Dr. Ko talks about making tools that make collaboration and working together easier. How do students work together? How do they do it when they are separated by time and space? That is something we have to think about even more these days. What is the answer? Well, I’d like to see an IDE and language that creates projects that are harder to screw up for one thing. Don’t ever let beginners use Save As in a Visual Studio project. Doing so is almost a guarantee that a beginner will mess up their project in serious ways. Save As as an option for experts? Yep. We don’t want that for beginners. That’s just the start. Students are always closing windows they think they don’t need but later realize that they need them after all. And collaboration? GitHub works for some. As I said I know a number of teachers use it with their students. I have had students who used it on their own as well. Awfully smart girls those two. But its got some rough edges. It’s really a powerful professional tool that offers more than most students or teachers really need. And there are so many options and steps! We need something more simple! It needs to be tied in to the IDE fairly transparently as well. Pair programming remotely? I’ve tried Visual Studio Live Share a bit.and it has some real potential. Not many seem to know about it yet. It does require that people have a reliable want to share links for sessions. I’m not sure how it would work if a teacher wanted to look at a lot of student sessions are once. And we are still dealing with Visual Studio or VS Code and their projects. This last semester I used Microsoft Server Manager to work with students online/remotely. Worked great as long as we were on the same virtual machine. It’s not something I want to give students access to though. I would like that functionality in a different tool. Especially if making the connection was as easy as this one was. It was easier than Live Share. So the tool I would want would probably involve some sort of “server” that was attached to a class that let students find their partners and connect with permission from the other student. Wouldn’t that be cool? So what I want is an IDE that doesn’t let students mess up their projects easily, does easy version control with minimal set up or steps to make happen, and easy sharing of coding sessions. All built in with an easy set up. A test framework? That’s a topic for another post."
"123","2020-06-19","2023-03-24","https://blog.acthompson.net/2020/06/how-do-we-know-who-is-struggling-in.html","One of the interesting points Amy Ko makes in her presentation to Microsoft (CS education in higher education) is that “Most faculty have little insight into who is struggling most into their class, because the ones that struggle are most silent.” She goes on to suggest that took could help make struggle visible at scale. In the high school classroom most teaches try to be aware of what students are doing and notice who is struggling but it’s hard. Students are very good at hiding the fact that they are struggling. Many just don’t want to admit, especially in front of their peers, that they are having trouble in a class. Teaching online makes noticing struggle even harder! So what sort of tools would be helpful? That’s what I have been thinking about for a bit. What are the indications of struggle? Idleness in the IDE? Maybe but sometimes students are very active but not making progress. They add stuff, try it, delete it, and try something else. The “lest throw stuff against the wall and see what sticks method.” So to much activity or to little activity? These are both things an educational IDE could track. What about syntax errors? This is a tough one because sometimes a single character off will generate a great many errors. I have managed to see error lists move from over 100 to 2 or three after changing one line of code. So maybe look at specific errors? We probably need some research on this. Number of builds? Some people write a lot of code before doing a build while others run a build after every little change. Seems like an unreliable metric. Total time spent in the IDE? Maybe although how does the automated system know if the amount of time is due to struggle or to an advanced student adding far more than what is required? As a teacher, one thing I would like to know is that errors are the most common in a class. That would help me adjust how I teach certain things. If only students would talk to us! All in all I love the idea of tools to help teachers see who is struggling and what they are struggling with. I just don’t feel like I have a good handle on what metrics would be really helpful. Commercial IDEs are never going to care about these things though. Might make a good PhD project for some CS education researcher though. Dr. Ko suggests that one way industry could help is by “should be supporting the hiring of CS education faculty and the creation of CS education classes to prepare effective CS teachers for K-12 and higher education classrooms.” We still have a lot more questions than answers in terms of teaching computer science."
"124","2020-07-01","2023-03-24","https://blog.acthompson.net/2020/07/book-review-computer-science-in-k-12.html","Full disclosure: I haven’t read all of “Computer Science for K-12” edited and compiled by Shuchi Grover yet but a couple of chapters was enough to convince me I should recommend it to other computer science teachers. The books has chapters written by a veritable who’s who of computer science educators. (See the table of contents listed below) I’ve heard many of them speak, read much of their published works, and met more than a few of them. I knew from the author list that it would be worth having. I have been jumping around a bit but for me the chapter on Naïve Conceptions of Novice Programmers alone was worth the price of the book. I have no doubt that I am going to learn a bunch reading the rest of it. The chapter or chapters you read that makes the book worth the price may vary but I suspect you’ll find several such. If you are looking to improve HOW you teach CS you should get this book. It is available with black and white illustrations and diagrams and color versions. I bought the black and white version but wish I had spent a few extra dollars for the color. It's available from Amazon and Barnes & Noble Computer Science for K-12 – Barnes and Noble Computer Science for K-12 - Color Edition Computer Science for K-12 - Black/White Edition The table of contents is below from the Amazon page. Foreword (Inventing Computing Education in Schools) by Mark Guzdial Algorithms (Shuchi Grover) Before You Program, Plan! (Phil Bagge, Shuchi Grover) Creative Coding (Miles Berry) Data Structures (Baker Franke, Richard Kick) Events (Jennifer Rosato, David Wolber) Feedback Through Formative Check-Ins (Shuchi Grover, Vicky Sedgwick, Kelly Powers) Guided Exploration Through Unplugged Activities (Paul Curzon, Shuchi Grover) Hard Fun With Hands-on Constructionist Project-Based Learning (Deborah Fields, Yasmin Kafai) Integrating Programming Into Other Subjects (Shuchi Grover, Aman Yadav) JavaScript, Python, Scratch, or Something Else? Navigating the Bustling World of Introductory Programming Languages (David Weintrop, Shuchi Grover) Knowledge, Skills, Attitudes, and Beliefs | Learning Goals for IntroductoryProgramming (Rebecca Vivian, Shuchi Grover, Katrina Falkner) Learner-Centered and Culturally Responsive Pedagogy (Tia C. Madkins, Jakita O. Thomas,Jessica Solyom, Joanna Goode, Frieda McAlear) Modularity With Methods and Functions (Mike Zamansky, Jens Monig, Jonalf Dyrland-Weaver) Naïve Conceptions of Novice Programmers (Juha Sorva) Operators and Expressions (Matthias Hauswirth, Shuchi Grover) Pair Collaboration and Pair Programming (Shannon Campe, Jill Denner) Questioning and Inquiry (Shuchi Grover, Steven Floyd) Repetition and Recursion (Dan Garcia, Joshua Paley) Selecting Pathways With Conditionals (Shuchi Grover) Testing and Debugging (Kathryn Rich, Carla Strickland) Universal Design for Learning: Reaching All Students (Maya Israel, Todd Lash) Variables (Shuchi Grover) Worked Examples and Other Scaffolding Strategies (Jane Waite, Shuchi Grover) X-ing boundaries With Physical Computing (Sue Sentance, Katharine Childs) Yay, My Program Works! Beyond Working Code ... Good Habits of Programming (Shuchi Grover) Zestful Learning (Bryan Twarek)"
"125","2020-07-13","2023-03-24","https://blog.acthompson.net/2020/07/csta-2020-conference-onlineday-one.html","Day one of the online CSTA 2020 conference has been today. I’m blogging this as the day goes on and posting it at the end of the day. We started with welcome remarks and some tutorial about using the Hopin conference platform. As a presenter, I’d had some time to try this out previously but I think this was probably very valuable for first time users. I hope not many missed it. After welcomed remarks we had some networking time. This is actually fun as you are randomly placed in a window with someone for 5 minutes of casual chatting. I found this a nice way to warm up to the day. And to chat with CS teachers from other parts of the country. During the first break out I attended a session called - Integrating Cybersecurity into the AP CSP Course.I really think we need to teach more of cybersecurity so I jumped into this one. The people have Whatcon Communiyt College have some very interesting and useful looking resources for teaching Cybersecurity. They have 13 units at their website which I link to below along with their sites description. C5 Cybersecurity Concept Lessons NCYTE Center supports the work of a related grant project also based at Whatcom Community College, Catalyzing Computing and Cybersecurity in Community Colleges (C5). One of the goals of the C5 project is to develop and disseminate instructional materials to enhance computer science and cybersecurity courses. The following Cybersecurity Concept Lessons (CCL) illustrate how Cybersecurity can be integrated into the AP CSP course. Each lesson contains activities, a presentation and an overview document that can be downloaded and used in the classroom. The first keynote started after a sort of ad from Apple. A lot of side chatter was about the usability of Swift without having a Mac to compile on. I may have to look into that. I will start here I guess https://www.makeuseof.com/tag/program-swift-in-windows/ The keynote was by Linda Liukas who writes children’s books about computing. I really need to look into her “Hello Ruby” books. Lots of us use the exercise of having students write instructions for making a peanut butter sandwich or a paper airplane (my favorite) but Linda suggested brushing ones teeth. That sounds fun. The talk had a lot of computer free examples and exercises. Most of these would work for a wide range of ages. The keynote was high energy and inspiring for me. Videos will be available later for CSTA+ members I believe. I plan to watch it again. Lunch break and time to visit the booths and poster sessions. I visited a couple of booths. It’s interesting as the booths I visited had 50-60 people listening to the person “working the booth.” I spend some time in the Microsoft booth while they were talking about the Hacking STEM program and projects. I keep telling myself I need to get into this stuff but year after year I find myself pulled into other things. Maybe I’ll get to it now that I am retired. Then maybe I can do quest visits to my old school. We’ll see. I really do want to get involved in hands one matter hacking. After lunch, Mini-Session 3: Tools to Teach 9th-12th Grade There are over 150 people attending this session! Can you picture having rooms that large for as many sessions (12 by my count) as are going on now? This session started with Truffle Hunt: Teaching an AI Agent to Play a Minesweeper-Based Game (that link is to the PowerPoint which itself has resource/reference links) I like the idea of teaching rules based AI. Jeffrey L. Popyack from Drexel University presented that one. Next up was Teaching AI to High Schoolers Inclusively with Sarah Judd, AI4ALL. Her slides are at https://bit.ly/AI4ALL-CSTA2020 Sarah talked about an Open Learning curriculum for teaching Artificial Intelligence. You can Access the curriculum at http://olp.ai-4-all.org The last mini session was by Leon LaSpina on MATLAB. His slides on MATLAB are here. Leon is a great guy and I can see some reasons for people to teach MATLAB. But I left early and just dropped in on a couple of other sessions for a few minutes at a time. It is less disruptive to enter and leave sessions online. Next up, Formative Assessment and Feedback for CS Learning with over 270 attendees! I guess a lot of us are interested in doing better assessment and giving feedback. Slides are available at Formative Assessment This is another session I want to watch a second time. I attended Incorporating Culturally Authentic Practices in a Problem Based Computer Science Classroom. I’ve always been a proponent of project based learning but I haven’t thought a whole lot about cultural reliance before. It seemed more about PBL in general than specifically how to make them culturally relevant. It may be just me though. So I jumped into Teaching Girls to Code and Change the World which was about Girls Who Code. Girls Who Code is an outstanding program. I love the concepts of their program. It’s so much more than coding as it includes community building, long term connections and networking, and showing of role models. The afternoon keynote was by Hadi Partovi of code.org and titled K-12 CS: How Far We've Come and Where We're Headed Hadi started with a review of where we were 7 years ago and how far we have come. Hadi listed a bunch of individuals and organizations who have helped make the progress we have seen in that time. It was awesome to hear him call out so many. It’s been a global village. Hadi ta;led about how important it is to teach students ethical thinking and taking into account the impact of computing and technology. This is so important. I’ve heard Hadi speak several times and this was far and away his best talk. The last session I attended was AP CSP 2020: Updated Course and Exam because there is a chance I may teach AP CS P online in the fall. Maybe. In any case, this was VERY useful if you are teaching AP CS Principles. I have to say that I like the changes. They have really made the create task more clear and added some specific requirements that I think make the task more rigorous. . I’m happy about dropping the explore task as a digital portfolio part of the exam. The link on the session name at the start of the paragraph is to their presentation deck. I saved a copy for potential mixing and definitely for my own review. That’s the session wrap up from me. I’ll have more thoughts specifically about how the online conference experience was for me in a day or so. And of course I will be blogging about tomorrow’s sessions tomorrow."
"126","2022-04-13","2023-03-24","https://blog.acthompson.net/2022/04/last-mile-education-fundmaking-big.html","We often underestimate the difference that small things can make. When I was in high school all I could afford was a cheap plastic slide rule (no calculators back then) and it really slowed me down with math. I sometimes wonder what a more expensive and accurate slide rule would have done for me. I had other privileges and did well in the long run. But that is not the case for everyone. Privilege often gets conflated with potential when in fact a lot of potential gets short circuited because of obstacles that are more common for non-privileged students. Things that are non-issues for many become showstoppers for far to many others. Picture a student with great potential in computer science who can’t afford a good laptop? Or cannot afford her textbooks or lab fees? Low income students often take longer to graduate because they don’t have adequate preparation and need some extra courses and time to catch up. That often means they run short of funds even with the finish line in sight. Even good scholarships often leave gaps in funding that limit students from underprivileged backgrounds. That’s where the Last Mile Education Fund is making a difference today. From the mission statement of the Last Mile Education Fund: “The Last Mile Education Fund takes an abundance approach, investing in a broader group of students already committed to technology and engineering fields, providing support for challenges they face beyond their control, and incubating them to be the next generation of innovators. “ Last Mile Education Fund invests in striving, low-income students pursuing degrees in the high-demand fields of technology and engineering to support them in their last mile to graduation and into a career. A number of grant programs are available. Some of them specifically for female and non-binary students but a number of them are available to all genders. The Microsoft Cybersecurity scholarship is for community college students of any gender for example. Full information about these opportunities is available at the Current Funding Opportunities page. I have links attached to some that have pages with more details.They include: EMERGENCY MINI-GRANTS Bridge Grants LAST MILE GRANTS MICROSOFT CYBERSECURITY SCHOLARSHIP PROGRAM NORTH TEXAS BIOTECH WORKFORCE FUND REU PARTICIPATION FELLOWSHIP If you know of students who could take advantage of these grants please spread the word. And let teams/people at universities and colleges who support low-income students know about these programs as well. They can help a lot of high potential students with some hurtles that could but shouldn’t hold them back."
"127","2022-05-13","2023-03-24","https://blog.acthompson.net/2022/05/teach-cs-in-k-12-please-help-gather-data.html","The Computer Science Teachers Association (CSTA) and the Kapor Center are conducting a survey of K-12 computer science teachers in the United States. The CS education landscape continues to evolve, and we want to hear directly from teachers about your experiences, challenges, and what resources would be most useful to you at this time. Having detailed and current information allows policymakers, curriculum & PD providers, State Departments of Education, membership associations, and other organizations to better understand and meet the needs of teachers. Results will be used to make specific recommendations to improve support for CS teachers. If you teach K-12 computer science, we need your voice! We invite you to participate in this national survey, which will take approximately 20 minutes of your time. Responses are confidential and optional. As thanks for your time, the first 3,000 teachers who complete the survey will receive their choice of a $10 Tremendous gift card. All participants will be entered in a raffle for one of five $200 gift cards. Please encourage other CS teachers to also complete the survey, and if you have any questions, please contact membership@csteachers.org or research@kaporcenter.org. Many thanks again for contributing vital insights to improving K-12 computer science education! With appreciation, CSTA and Kapor Center Build Learn more about the Computer Science Teacher Association here. Learn more about the Kapor Center here."
"128","2022-02-16","2023-03-24","https://blog.acthompson.net/2022/02/troubles-with-error-messages.html","Error messages, in theory, are there to help programmers. Of course there are problems with then in practice. With students, the biggest problem is that they don’t read the messages. I’ve long ago lost count of the times a student told me they had an error but can’t tell me what it is (or was) because they closed it without reading it. Getting students to read the message and to try to work out the problem themselves can be a struggle but one we have to attempt. Even if they do read the message, messages are not always clear. Have you seen this poem? Roses are red Violets are blue Missing { at Line 32 Seems simple enough but that can be deceiving. Often the message doesn’t actually give the right line. The reasons for this can be complicated for a beginner, or even an experienced programmer, to understand. It is a constant source of frustration. At least one knows that a missing curly brace is (probably) the problem even if we are not really sure where it is missing from. Other messages are less helpful because the programmer lacks knowledge to understand the words being used. Or the message just does a poor job of explaining the problem. Why are error messages less than helpful? Many reasons. One is that error messages are not fun and interesting to write. There are also strict limitations on the number of characters allowed. Still another is that the person writing the message is often so familiar with the software and the error that they write something that, while meaningful to them, is somewhat opaque to people newer to the software. Reading error messages is not just a problem for students of course. When I was doing technical support for professional developers I would regularly get calls asking to explain an error message. A little secret here – a good explanation could often be found in the documentation! More than once I just looked up a message and read from the documentation. Even the explanation in the documentation needs a little help sometimes but it is a great place to start. When teaching beginners we don’t often spend a lot of time on error handling which means we don’t spend much time talking about writing good error messages. We do ask students to write messages in programs about games over and winning and losing. Occasionally we have to suggest rather strongly that an error message that calls the user “an idiot” is perhaps not appropriate. Perhaps we should spend a bit more time on error handling and as part of that talk about good error messages. Maybe if we had beginners talking about the error messages they see from their systems and how they could do better we;d get better error messages later when (if) they turn professional? Regardless, I think error messages should be a bigger part of the conversation. Reading them, researching what they mean, and thinking about how they could be done better."
"129","2022-02-24","2023-03-24","https://blog.acthompson.net/2022/02/fun-with-rounding-errors.html","I love xkcd cartoons. I came across this one thing morning that shows the benefits(?) or rounding up. My immediate idea was “what a great programming project!” One of the first “hello world” type of exercises I often assign is simple conversations. Fahrenheit to centigrade, miles to kilometers, etc. This is a step beyond that but with a difference. The difference is rounding up and its effect on accuracy. This is a good program to use to introduce rounding in general but to also talk about how rounding errors can have a large impact when they occur over and over again. This example uses velocity but I can imaging there are interesting results with weights, simple distances, and almost anything else that normally requires better than integer accuracy. Currency anyone? I’m thinking about trying that one because it involves money. It might be interesting and educational to try the difference between rounding normally, always rounding up, and always rounding down. What do you think? Anyone doing something like this? Would it be useful?"
"130","2020-10-04","2023-03-24","https://blog.acthompson.net/2020/10/artificial-intelligence-humor-and.html","Last night I started re-reading Heinlein’s The Moon Is A Harsh Mistress. It’s an old book, written in the mid 1960s, so there are some old ideas about computers and computing in it for sure. There is some hand waving about how AI is done and how the computer, Mike or Mycroft Holmes, becomes self aware. It is fiction after all. The computer is trying to understand humor and a human friend is trying to help. One way he is helping is to get lists of jokes and report back on which jokes are funny, which are funny once, and which ones are always funny. That sounds a bit like machine learning we see today I think. In any case, even is the computer does understand humor at some level and is able to create jokes that people find funny does that mean it has a real sense of humor? Will it be able to laugh at jokes that are not in its system? I wonder. This makes me wonder about other things. We know that AI has been able to write music that people enjoy and create art that looks like it was done by master artists. Is creating art or music the same as enjoying art and music? Maybe not. Now human artists “hear” music in their heads before they write it down or play it. Beethoven write music while he was deaf and so could not hear it being played. I’ve been to a number of wine tastings. I don’t like wine. No matter how many times I taste it I just don’t enjoy the taste. Listening to wine experts talk about wine and tasting it myself I think (could be wrong) I could learn to identify the wines that wine lovers like. I don’t see me enjoying the process very much though. Understanding is not the same as enjoying. Is it the same for computers and AI? I think so.Recognizing beauty or humor or music is not the same as enjoying it. The difference between humans and AI is that humans enjoy their creations. And they enjoy the creations of others. If we think about creating beauty as enough to being human-like I think we have a narrow view of humans. What do you think?"
"131","2020-10-12","2023-03-24","https://blog.acthompson.net/2020/10/thinking-about-algorithms-in-our-lives.html","My wife and I use these fitness trackers, ours are made by Garmin, to keep track of our activity during the day. Each day the devices give us a goal for how many steps we should take that day. The goal goes up or down depending on how many steps we did on the previous day. I think. Maybe. Being the computer guy that I am I keep thinking about how the algorithm actually works. Is it a simple algorithm based on some sort of average or does it have some amount of smarts? Does it take several days activity into account or just the previous days? Like so many things in our lives the algorithm is completely opaque to users. Google Page Rank, the algorithms that run on the computers controlling our cars, and the software John Deere uses to control the equipment they make. (see article linked below for way this opacity is a problem for some) are all secret. Why? Well, various companies have various reasons for keeping their algorithms secret. Competitive advantage is the reason for some. For many it is to keep people from “gaming the system.” Google, and other search engines, don’t want people to find ways to get unfairly high placement in searches. I suspect some of that is involved in my Garmin’s secrecy. For others, it is about keeping control of the how the systems them make are run – often for the sake of safety. That’s why many companies don’t want their software “messed with.” How good or bad this is for the consumer is quite up for debate. There are solid arguments on both side. Arguably, the right thing depends on the situation in many (perhaps most) cases. These are issues we need to think about going forward. People who write software and create algorithms have a responsibility to make the right decisions about secrecy or openness. The decisions have to be about more than just money as well. Do you discuss these issues with students? I think we need to do so. Farmers Fight John Deere Over Who Gets to Fix an $800,000 Tractor"
"132","2020-10-14","2023-03-24","https://blog.acthompson.net/2020/10/what-if-we-asked-students-to-write.html","A professor friend on Facebook posted that a student emailed him to say that they textbook the were using was “crap.” I suggested in jest that he asked the student to write a better one. That’s pretty tough since how do you write a textbook about something you are learning as you go? (Can be done. Is painful. Don’t ask how I know this.) The exchange got me thinking though. Supposed we asked students to write a chapter for a mock textbook? Or perhaps asked them to write step by step instructions for completing an exercise assignment. After it was covered in class but perhaps in lieu of a test. I think it would be interesting to see how students explain concepts. Have they write to explain things to people their own age. How would they explain things? What words would they use? What examples would they give? They say that to really understand something you have to be able to explain it to others. Somehow I don’t think most students would like this exercise though. Of course we already ask students to do things they don’t like – taking tests being one of them. I do think that it would give us insights into what they do understand and how they understand it. Or misunderstand it as the case maybe. Anyone want to try it?"
"133","2020-10-29","2023-03-24","https://blog.acthompson.net/2020/10/tilecodecreating-games-on-and-for.html","People are Microsoft always seem to be working on interesting and unexpected (to me anyway) things. My most recent discovery is TileCode. From the website: Microsoft TileCode is an app for designing, coding, and playing video games directly on low-cost MakeCode Arcade gaming handhelds, as well as in the web browser. With TileCode, we are using the medium of video games to explore the combination of Natural language for informally specifying games goals, rules, and mechanics; Physical computational models that foreground concepts such as data parallelism, pattern matching, and conflict resolution; Testing and debugging of programs to establish confidence in their behavior and to refine specifications; Machine learning to help bridge the gap between natural language and programs, as well as to generate non-player character behavior in games. Our ultimate goal is to provide a sandbox in which students can express and refine their game ideas, while learning about computation, programming, and machine learning, supported by software engineering practices. It's a pretty interesting idea. I wonder how it might work in classrooms. There is a webinar about their research later in November that I hope to sit in on. TileCode builds on a lot of previous work and not just from Microsoft. It builds on Kodu and MakeCode but they reference a lot of other block based tools in their paper - TileCode: Creation of Video Games on Gaming Handhelds I'm really fascinated by the work I am seeing in domain specific tools lately. While games are a popular topic I'm been following Mark Guzdial's work with domain specific languages for Social Studies with interest. I tend to think that rather than see artificial intelligence take over the job of programming that we’ll see more and more domain specific languages (should we call them tools?) that people will use. I’m not convinced that AI and machine learning will know when rules are really guidelines."
"134","2020-11-16","2023-03-24","https://blog.acthompson.net/2020/11/tiny-book-of-simple-cryptography.html","I've been playing with simple cryptography. Mostly stuff that was solid before computers. Just for fun mostly but some of it may make for interesting projects for students. I've written a little bit about the things I have been playing with. This is not a big book and it is intended more to spark interest and not to be a real reference book. There are footnotes linking to Wikipedia articles that would be a good next step for learning more. I have a couple of substitution ciphers and a couple of transposition ciphers. Added some Steganography. http://www.acthompson.net/TinyCrypto.pdf Comments and gentle criticism welcome. I have coded solutions in C# that are ok. Some of them even have comments. Updated 5 March 2021 to include a brief chapter on the PigPen Cipher. Also some minor edits in other sections."
"135","2020-11-22","2023-03-24","https://blog.acthompson.net/2020/11/the-making-of-computer-science-teacher.html","There is quite the conversation going on in the private Computer Science Educators group on Facebook about teacher preparation for CS educators. This is a very interesting group for CS educators BTW. Join if you are on Facebook. I link to some specific articles at the end. It’s a lot more complicated question than it might appear. There is the argument about what CS educators need to know to teach CS effectively. Is something better than nothing or is not enough going to mean poorly prepared students? Given all the complaints I have heard from university people about high school students being taught CS wrong (what ever that means) I tend to believe that CS educators should have a lot more depth of knowledge than the courses they are teaching. Definitely more depth than their students will get from the course. We expect this from teachers of other subjects (for the most part – see highly qualified teacher). As to preparation, and its close cousin – certification – we are dealing wtih three main types of people who need preparation to teach CS. Teachers of other subjects CS experienced people moving into teaching Career beginners who are not previously teachers or CS people They all need something different. I have heard people say that a good teacher can teach any subject after learning some content knowledge. I would argue that teaching CS is different from teaching most other subjects. A teacher needs to know how to teach computer science. We've been fortunate over the last decade or two that some serious research in how to teach CS has been done. CS teachers need to know what has been learned about HOW to teach. Teachers of other subjects also need some solid content knowledge. Topping out at the content involved in AP CS Principles and AP CS A (the top high school cs courses) is not enough. Well, not for high school CS teachers. Students are going to ask deeper questions than what is required and you can only get by with “well, let’s look that up” so often before people start to wonder if you know what you are doing. How much do you need? And this goes for people new to teaching as well as just new to teaching CS. That’s a struggle. I don’t think you can get it in two one semester courses let alone a couple of weeks worth of summer workshops. Two semesters of programming is probably the minimum for that aspect. In the first one a person learns a programming language and a start of how to solve problems. It takes a second course to really become a programmer. Of course there is a lot more to computer science than programming. Vocabulary, networking, algorithms, security, CS ethics, and well, if your have taught AP CS Principles you get the rest. So three or four semesters of real CS. Everyone who teaches CS including those new to teaching and those career changes needs a course or two (or three) if pedagogy. A focus on teaching CS for sure but also some work on test development and evaluation and classroom management. Do they teach classroom management in regular education programs? CS has some interesting complications involving students playing on the internet and messing with lab computers. I also think that CS teachers, especially now when there are seldom multiple CS teachers in a building, need to learn about external resources. Social media, CSTA, summer workshops and conferences, StackOverflow, and generally how to build a network to support your growth as a CS teacher. To prepare to be a great CS teacher is going to take a lot of work. Yes, people do figure it out on their own I know people, I am one, who came to industry without training in teaching and did a pretty good job. Enthusiasm and great students will get you pretty far. That’s not the ideal I look back and wonder how much better my students would have been if I had known what I know about teaching CS back then. I don’t think I messed anyone up too much but could I have taken them further? I like to think so. If CS is going to take its place with other core subjects we have to learn to teach it well. We have to have more than just enthusiasm for the subject.. We have to set high standards for teachers as well as students. Facebook Conversations https://www.facebook.com/groups/cptrscied/permalink/886841201720689/ https://www.facebook.com/groups/cptrscied/permalink/886035605134582/ Mike Zamansky’s post of the subject https://cestlaz.github.io/post/teachers-can-learn-cs/"
"136","2020-11-29","2023-03-24","https://blog.acthompson.net/2020/11/does-it-matter-how-fast-code-is.html","I’ve been having a lot of fun playing with code lately. One of the things I have been experimenting with is cryptography (See Tiny Book of Simple Cryptography) For one project I wanted to create a string of ones and zeros to represent the binary value of letters. I quickly came up with three ways of doing this. I know that are probably many more ways than that. But for now I have some that work and one of them I really like. Which one is best? Well, that depends. Which one is the fastest? That depends as well. I think I know which one is fastest. It uses the bitwise & operation which generally is pretty quick. One used the Math.Pow function which I suspect slows things down quite a bit. The third uses nothing fancy at all and could easily be coded by someone with only a little programming knowledge. I suspect it is the middle in speed/ Does the speed matter though? In this application , probably not. The bottleneck in performance is going to be in the I/O not the calculations. The performance of this function is lost in the noise. What probably matters more, if one is looking to define “best”, is which algorithm is easier to understand.. I learned this lesson one day back when I was writing code for a living. We were doing a formal code review of my code and I had written what I thought was a very clever piece of code that was pretty efficient. The review made me rewrite it using code that was no where near as clever or interesting. It was, however, a lot easier for someone new to the code to understand. And that was more important. Now there are applications where performance is critical. I remember working with a company building a system to collect weather data. They collected a huge amount of data is a very short period of time. They were actually comparing the instruction execution times of various machine language instructions to pick the computer they were going to buy. That’s pretty exceptional though. To complicate matters even more, today’s optimizing compilers are very smart. It is rare that a person coded Assembly language program can outperform code generated by an optimizing compiler. I was involved in actual benchmarks of this in the 1980s and things are improved since then. Take these two pieces of code: if (foo % 2 == 1) label1.Text = ""Odd""; if ((foo & 1)==1) label2.Text = ""Odd""; Which one is faster? You may think the second one is faster. You might be right. On the other hand, a really smart compiler by generate the same low-level code from both of them. Unless you were on the compiler writing team you probably don’t know. Even if you have the source code for the compiler do you really want to spend the time to see how it is optimized? You couple probably also look at the generated code but is that worth it either? Not generally. The first example is clearer. A number of my friends who write code for a living tell me that is what they would use. Because it is clearer and understandable by more people it is not worth worrying about an optimization that may already be taken care of for them by the compiler. Once upon a time it mattered a great deal if one iterated though a two dimensional array by column first or by row first. One had to know which was faster and do it right. Today, compilers take most of the worry about this away from us. We can do it in the way that seems more logical for us and for the application. One of my friends who has worked on compiler development teams tells me that conversations about this sort of optimization are frequent there. People working on compilers have the time and the experience to make compilers smart. I’m pretty sure more of them (the people and the compilers) are smarter about code optimization than I am. That doesn’t mean we can ignore performance. I’ve seen some beginner code that is horrible in performance. But still there are trade offs. I once wrote a very slow program that I ran once a month. I thought about a way to optimize it that would cut a minute or two off of the run time. It would have taken me an hour to code and that was a lot more time than it would have saved me. Turns out a faster computer a few months later ran the inefficient code a lot faster anyway. Honestly, though discussion optimization and performance can be fun for a certain class of geek. Geeks like me."
"137","2020-12-01","2023-03-24","https://blog.acthompson.net/2020/12/why-do-i-care-about-this-program-i-am.html","Why do we program? Well, for some of us it is because we get paid to write code. For some it is part of our learning experiences. For a few it is the fun of it. There are a lot of motivations and they are different for different people. A couple of posts have been thinking about this lately. Mike Zamansky has bee posting about the Advent of Code event. (Mike’s initial post here Advent of Code 2020) Today I replied to his post about the first puzzle with the following. I struggle with these problems a bit. Not because of the technical issues but because of motivation. Or perhaps relevance. Why would I need to do this? What interesting or important problem does it solve? I guess the issue for me is that solving a problem for the sake of solving a problem, proving that I can did it basically, is not motivating to me. Maybe I have been programming too long to feel like I need to prove anything to myself. OR anyone else for that matter. I get that for some the challenge is enough motivation and that they get satisfaction from the effort. The journey being more important than the destination I guess. And that is fine and if people enjoy doing it that is wonderful. I'm happy for them. It just doesn't motivate me. As I thought about it, this also related to a post by Mark Guzdial recently. Purpose-first programming: A programming learning approach for learners who care most about what code achieves: Katie Cunningham’s Defense I hope to be able to hear Katie’s defense tomorrow. And look up her papers. When we as educators assign projects or do demos, what is the purpose of of the code? And does anyone care about it? Students work harder and longer, it seems to me, on projects that they care about. Not just for the grade though that motivates some. Do they want to see the program work for themselves? I always found that the hardest working most motivating projects were the ones students selected or decided upon on their own. Projects that solve problems that are meaningful for them are much more effective than projects that are more about “just do this to learn how this concept works. I’ve been playing with code myself lately. Each project has taught me something but I was motivated more to solve a problems that was interesting to me than to learn the new concept/algorithm/language feature or what ever I learned. This is what we as educators need to bring to our students in my opinion. They have to care about the problem and not just the grade."
"138","2020-12-03","2023-03-24","https://blog.acthompson.net/2020/12/new-resources-for-teaching-and-learning.html","Earlier this week I was a guest speaker in a computer science class (via Zoom of course). It was fun to be back into a class and interacting with students. The students were asked to prepare questions for me and many of the questions were about artificial intelligence. That’s not surprising as AI has really jumped into the public in ways it hasn’t before. That’s why it is timely that code.org has created a new resource for teaching and learning about AI. The main resource page for this is at https://code.org/ai There you will find a bunch of short videos of 3 to 5 minutes that cover various aspects of AI. Several of the videos explicitly focus on getting people to think about the ethics involved. Satya Nadal, Microsoft CEO, in his introduction makes one of my favorite points right off the bat. It is not enough to think about what computers can do but we also need to think about what computers SHOULD do. Ethics are woven into all the videos and not just the once focusing on ethics. The videos are typical code.org videos. That means high production values and a diversity of impressive speakers. Presenters represent a variety of ages, races, and colors. They are all impressive and are practitioners in the fields of AI. There are academics and there are people from industry. They really highlight a broad cross section of people involved in AI today. Besides the code.org videos there are links to videos from other organizations, lesson plans, and activities powered by artificial intelligence and machine learning. And more. It’s a great place to start building the set of curriculum that will work for your course and the age group you teach."
"139","2020-12-14","2023-03-24","https://blog.acthompson.net/2020/12/dreidel-gamea-chanukah-programming.html","If you’re anything like me, you like to assign projects that have some relationship to what is going on in the world. Holidays are one such thing. December brings the Jewish holiday of Chanukah – usually right before Christmas. The Dreidel game is a game traditionally played during the Chanukah celebration. It is played with a top that has four flat sides. Each side has a letter of the Hebrew alphabet. ש Shin ה Hey ג Gimmel נ Nun The game has multiple players each of whom is given the same number of tokens. Players all place one token in to a “pot” and spin the dreidel to see who goes first. The player who spins the highest value starts. Note: nun is highest, then gimmel, hey, and shin. If there is a tie, the players who tied spin again. Each player takes turn spinning the dreidel and taking an action depending on what letter they spin. * Shin: put one more token in the pot * Nun: do nothing * Gimmel: take all tokens from the pot * Hay: take half of all tokens lying in the pot.In case of an odd number of tokens, round up. The game ends when one player has all the tokens or after some set period of time or mutual agreement. There are lots of ways to program this of course. Normally, at this point in the semester I have been teaching students how to create simple classes. So when I wrote my solution I created a dreidel class. There are some reasons that this makes for a nice class to create. There is the usual protected data – the face value of the dreidel. And there is the obvious spin and get value methods. I also over loaded the ToString and CompareTo methods. The ToString method allows for displaying the name of the face value of the dreidel. CompareTo is particularly useful for selecting the high spin at the beginning of the game. I also added some public const values for the face values so that I could use them in calling programs without the programmer needing to know what the actual values are. if (player.Value== Dreidel.Shin) Here we have a fairly simple game to program with a class that lets the programmer do some interesting overloads and activities without too much complexity. Inspired by a project idea posted on the AP CS Teachers Facebook group group (https://www.facebook.com/groups/APComputerSciencePrinciples/permalink/1873272652824371/) Thanks to Lee Whiteley for sharing with the community.."
"140","2020-12-17","2023-03-24","https://blog.acthompson.net/2020/12/musings-on-goals-of-high-school.html","Recent conversations on Twitter and Facebook have had me thinking about the goals of teaching computer science in high school. There is no single goal and it probably varies some by teacher, school, and student population. My goals were basically: Give students a basic understanding of computing and computer science to better understand the world around them Create an interest in computer science so students are willing to learn more. Create in students the idea that they can “do computer science.” I would rather not prioritize them. I think I did a pretty good job with the first goal. That’s probably the easy one though. But it is pretty important. Helping students better understand the world around them is at the heart of a lot of education. We don’t expect every student to be a novelist, a biologist, a chemist or a professional mathematician. So we are not (usually) expecting HS CS students to become professional programmers. The second listed goal is pretty hard to measure objectively. I hope I made my classes interesting and the subject itself interesting. A number of students did go one to major or minor in CS so there is that. I hope I didn’t turn too many off. The last listed goal is also hard to judge objectively but it’s really important. People don’t continue to invest time if they don’t thing they can succeed. Any one can learn computer science. Anyone can learn to program. Some may have to work harder at it than others and some will find it more interesting than others. Student have to know that they can do it if they choose to try. If students choose to study more CS I want them to have a solid base to build on. I think that is a given. Right? Unless I succeed at the three listed goals above there is not much point in anything else though. So I made the course rigorous and I try to teach the concepts and ideas and good habits that I learned over the decades. I do it with a goal of building success, interest, and understanding of computers in the world today. I’m not just trying to teach the computer science nerds, no matter how much I love then, but all of the students in my class."
"141","2020-12-18","2023-03-24","https://blog.acthompson.net/2020/12/pythagorean-theorem-day-programming.html","I’ve been doing little programming projects for my own amusement. I thought about doing Advent of Code like the cool kids are (Looking at you Mike Zamansky who among others is blogging about those challenges) but I just can’t get into them. I need to scratch my own itch as it were. The other day a friend posted on Facebook that the date was a Pythagorean Theorem Day – 12-16-20 because a right triangle with a height of 12, a width of 16 has a hypotenuse of exactly 20. It’s a cute idea if we ignore that the year is really 2020 not just 20. I commented that calculating the next Pythagorean Theorem Day would be a fun little programming project. Today I thought I would try it myself. The set up is pretty easy. Nested loops for month and day and using the usual math. There are two issues. One is that not all months have the same number of days. The other is that we want an exact whole number for the hypotenuse. The first was solved by creating an integer array with the number of days in each month and using those values in my equation. The second took some thought. There are probably some really cool mathematical ways to do this. I thought about this and decided to cheat a bit. I converted my floating point result into a string, cast it into an integer, converted the integer value to a string, and then did a string compare. The result of the compare determined if I displayed the result or not. There are 12 such dates in case you are interested. Only two of them are after 20 though. I leave figuring the rest out as an exercise to the interested (or assigned) programmer. A few things make this a nice student project in my opinion. Nested loops of course, using an array to simplify the programming, and what ever you use to determine if the hypotenuse result is an integer or not. And it is short so you can use it as a demo or an in-class project. What do you think? How else would you determine if the result was an integer or not?"
"142","2020-12-30","2023-03-24","https://blog.acthompson.net/2020/12/looking-back-on-computer-science.html","What a year it has been. I was reading my start of the year post from January. The closing was “2019 has some serious potential.” I had no idea what was to come in 2020. By the middle of March I was teaching online to students who were doing their best to learn from home. It really changes a lot for teachers and students. So what changed? Well, there was some serious growth in online development tools. Teachers moved to or increased their usage of tools like GitHub, Repl.it, and other online IDEs. I still like the solution my school used (and continues to use now that they are mostly in-person) of a cloud based virtual machine. That the big cloud companies (I’m looking at you Microsoft and AWS) haven’t jumped on this means they have missed a huge opportunity in my opinion. Plans for a lot of physical computing went by the wayside as schools either didn’t have equipment to send home with students or didn’t want students sharing devices that could not be easily sterilized. I suspect emulators got a lot of use. Along with school, conferences went virtual in 2020. It looks like that will continue into 2021 as SIGCSE will be virtual. It’s still uncertain if CSTA 2021 will be virtual or in-person. CSTA 2020 went pretty well online. I enjoyed presenting virtually. Though to be honest it wasn’t quite as much fun as presenting in-person. I couldn’t hear people laugh at my jokes for one thing. For myself, the biggest change of the year was retiring from the classroom at the end of June. So I have missed most of the crazy on the fall of 2020 school year. I have been watching what my friends have been going through though. I guess I picked a good time to retire. I do miss the kids though."
"143","2019-01-01","2023-03-24","https://blog.acthompson.net/2019/01/happy-new-year-2019.html","I’ve been thinking about this post for the last several days. My usual practice has been to start the year with a list of things I want to watch in CS education during the coming year. As I look at last year’s list (see Looking Back on CS Education in 2018) I don’t see a good list for this year. The things I’ve been watching have largely matured. The next big growth area is not clear to me. Sure we’re making progress in getting computer science education for more and more people. Of course there is more to do and room for growth but it feels like momentum is going to carry us through. So this year I am thinking about what I can do to give my students an edge. What can I shoehorn into my curriculum that will go beyond the average. There are people who way ahead of me of course. Doug Bergman and David Renton at Porter-Gaud School are doing amazing things. A number of the career/technical schools I know of have room in their curriculum for a lot of things I haven’t been able to fit into mine. Likewise, there are a number of magnet schools covering some really advanced topics. Most of these have more room in their curriculum for CS than my school. That means I need to do things differently. I suspect that most teachers at comprehensive or college prep schools have some similar time limitations. We have room for only so many courses. In may case I have what seems like a lot of options. We teach some programming in our freshmen course (it’s only one semester long and we cram a lot in already). I have a one semester honors programming and a one semester mobile application programming course. In both of those we get students to the point that they can do interesting things and then the semester is over. We offer both Advanced Placement Computer Science courses. They're both a full year long but it feels like they are pretty constrained. I only teach the Principles version so playing with APCS A is a moot point for me. The AP courses are a problem of sorts. As they say, a blessing and a curse. Parents and administrators love them. They help make schools look good to parents. They make students look good to college admissions officers. There is lots of well-developed curriculum and professional development for teachers. What’s not to like? But you wind up teaching to the test. It’s almost unavoidable. Your curriculum plan has to be approved by the CollegeBoard for starters. While you can get clever about things like projects, tools, and for APCSP even languages there is always that constraint about what is on the test that you have to focus on. If APCS is the only course one teaches you probably have the type and energy to get really creative. If you teach four different courses (as I do) it can be a bit overwhelming to make big changes to the AP CS course. The path of least resistance (for me teaching APCSP) is to use the developed curriculum and teach using that. The code.org APCSP curriculum, which I am using, is pretty amazing for teaching that course. Since I have two other courses I teach alone based on self-developed curriculum there is some strong motivation to spend time on those. What I want to squeeze in somewhere are cloud computing, Artificial Intelligence, and Virtual Reality development. I don’t really know enough about any of these to know how hard it will be to fit any of them in or where they would fit logically. If I had a year long course after my honors programming class that wasn’t constrained by the AP curriculum I would recruit a group of smart curious students (plenty of them around) and we’d all learn together. Alas, that is not currently an option for me. My current thinking is to try and learn more about one or two of these on my own and by the summer have an idea where I can fit some of it. Amazon Web Services has AWS Educate which I have signed up for. It has a bunch of free resources and training. Seems like a good place to start learning the cloud. It looks pretty well set up for teachers as well. SO that is the cloud piece. Next is either VR or AI. VR requires some hardware to do right as far as I can tell so I have to factor that in. Both AWS and Microsoft have some AI that can be used. Since I already know about the AWS resources I may start there with AI. VR is pretty exciting as well and there are some great resources for using Unity with C# for that. I already teach C# using Visual Studio so going the VR route may be a good option. I hope to get my current semester long courses in good enough shape during the school year that I can really deep dive into the cloud, AI, and VR over the summer. Not that I will wait until then to start but that will be when I can get deepest. And of course the search for resources for my own learning, for teaching, and for making this stuff fit goes on all the time. Let me know if you have links to share. So basically my message is, 2019 has some serious potential."
"144","2019-01-09","2023-03-24","https://blog.acthompson.net/2019/01/everything-old-is-new-again.html","I try not to throw code away. I have punch cards in my attic that are over 40 years old. I also have a bunch of code from my university days on a magnetic tape (a DECtape) that I will probably never be able to recover. But a lot of code since the PC era I still have in accessible form. Today, Facebook memories reminded me of a blog post I wrote 10 years ago today. Next step was to look though my archives for the code it referenced. I haven’t thought about the project, parsing a string to evaluate its strength as a safe password, in some time and thought I might want to use it in one of my courses. Honestly, I didn’t remember my algorithms and while I could think of several ways to do it I thought a memory boost would be fun. It turns out I have a second example that someone else, another teacher who shared his projects with me, had written. Comparing the two programs was interesting. There are, as usual, more than one way to solve a problem like this one. With two very different solutions and some other options that have popped into my mind while thinking about the project I am rethinking how to use this project. Typically I would just assign the project and see what solutions students come up with on their own. On the other hand, I could provide a structured set of recommendations. Various ways of implementing scaffolding would leave more or less flexibility for the student. Still musing over that. Another option is to provide students with several code examples and ask them to evaluate them. I see a couple of benefits to this plan. Students would get some valuable practice in reading other people’s code. We don’t do enough of that in my opinion. It would also show different techniques (tools if you will) that they may want to incorporate in their own future projects. And it would allow us to have some conversation about efficiency. I’m still noodling on these ideas but I thought I would toss my thinking out for comment. What do you think of these various ideas? What would you do?"
"145","2019-01-10","2023-03-24","https://blog.acthompson.net/2019/01/lecture-as-performance-art.html","Mark Guzdial posted a link to an article about him (The social justice case for computing: transforming tools for some into a language for all – you should read it) that had a picture of him teaching. His comment on Twitter was that “Pictures of me teaching look like I'm either a preacher or a Jazzercise instructor.” Shuchi Grover suggested “Bollywood’s greatest actor.” Now Mark is a great speaker, very dynamic. And really dynamism is a hallmark of good presenters. A number of professors have large YouTube audiences because of the way they present material. Now I know there is often pushback from teachers saying that their job is to teach and not to entertain. Let’s face it though, all the “teaching” in the world is of little use if no one is paying attention. Not everyone is a great entertainer. Lots of them are in the “lecture is dead” school of thought too! There is a lot of pressure to be the “guide on the side and not the sage on the stage.” Personally I think most material needs a mix of the two though. Students need somewhere to start and often that means a lecture of some sort. BTW showing a video is a form of lecture not matter how cool the sound and graphics are. If we’re going to stand in front of an audience we owe them our best efforts. I’m a firm believer that part of what makes a teacher, and a lecture, a good one is the presenter's enthusiasm for the topic. If you are really enthused it will show and it will be contagious. I’m always amazed at how little formal training most educators get in presentation skills. One would think that would be a regular occurrence. When I worked in industry I was given a mandatory presentation skills training about every second or third year. Eventually I hope to get good at it. I’ve noticed at events with both educators and industry people presenting the industry people are often the most polished and, yes, entertaining, presenters. Industry speakers often get salary reviews based on the reviews they get from giving presentations. Educators are evaluated differently of course. And that’s not bad. With as many distractions as students have today we really have to up our presentation game though. No, we are probably not entertainers by a strict definition perhaps but at least we have to be interesting. And give students some reasons to stay awake."
"146","2019-01-24","2023-03-24","https://blog.acthompson.net/2019/01/computer-science-standards-and.html","I’ve been thinking a lot about computer science standards and frameworks the last couple of days. It’s all Mark Guzdial’s fault because he posted Frameworks and Standards can be limiting and long-lasting: Alan Kay was right Following Mark’s post are (as I write this) 38 comments. Some of the longest and most thought provoking have been from Alan Kay. Yes, that Alan Kay. This was hard to read for me because I was involved in writing the Framework and invested a lot of time in it. I thought I was doing a good thing. But I can see some of the flaws with the benefit of time and an outside view from many smart people. I was also on the CS 2013 task force so I have seen two different processes for two very different documents. I do, and always did, wish the Framework process could have been more like the CS 2013 process. I feel like the reviews between drafts of the CS 2013 were done better with solid input from many and varied outside reviewers. There were both too many and two few people involved in the K12 CS Framework. Too many doing the actual writing and perhaps too few doing reviewing. For an other thing, I felt like the Framework writing became a lot more about how things were said (worded) than what was said. Not that what was said wasn’t important but that politics drove the working. Perhaps that is because I joined the writing team late in the process but I still wonder if the emphasis was right. I’m still thinking about some of the comments from Alan Kay on Mark’s post as well. Especially the section below from his comment on my comment. I’ve always been a big enthusiast about Jerome Bruner’s idea that *for every learner you can (and need to) find an intellectually honest version of a subject they can learn if you heed their level of development”. In order to do this, I think you really need to have a good picture and as good as possible a definition of the subject before trying to find “intellectually honest versions of it” for different kinds of learners. This was not done for the CS Framework. If the subject were physical sciences, one would first start with top scientists to put together a workable picture of the sciences as the best people in the field see them at that time. So how to I look at the existing framework and standards (either CSTA or as adopted by my state)? Should I write my own “standard” or more accurately named “Alfred’s list of what I think high school students should know about computer science at graduation?” It might be an interesting intellectual exercise but would it be valuable? As a classroom teacher I don’t spend a lot of time looking at how my curriculum matches a standard or a framework. Maybe I should. My wife can tell you all the standards she is working to follow in her curriculum. Teaching at a private high school I have more flexibility and self determination than I suspect teachers at public schools have. I have also spent a long time in the computing field as both an educator and an industry professional so I have a sort of confidence (ego perhaps) that I can decide what students need to know. Students seem to be well prepared for university, or so they tell me, so I can live with that for now. The problem is what to specify for newer, less experienced (more modest?) teachers. The Framework was one attempt and it was well-meaning I am sure. What we need to do is not so much focus on its flaws but discuss where to go from here. And who should lead the way!"
"147","2019-02-01","2023-03-24","https://blog.acthompson.net/2019/02/what-is-variable-and-why-is-it-so-hard.html","Variables in computer science are complicated. No, really they are. I didn’t consciously realize how complicated until I read “What is a variable?” on the blog at CACM. Reading that article, which was not an easy read for me, did give me some insight as to why philosophy majors so often make good software developers. I’m not sure I want to have my beginning students read it though. It may leave them with more questions than answers. Maybe in an advanced placement course? When teaching beginners we need to keep things simple and we have to remember that they don’t have the same base set of knowledge that more experienced people have. So what then is a variable? A variable name is first of all an identifier. We have lots of identifiers in computer programming. Method names, object names, class names, and variables which are identifiers for something. What is that something? I like to talk about variables as locations in memory. I used to say boxes but I’m not sure that really works. Students know, or should, that everything is stored in memory as ones and zeros so suggesting a location in memory feels more logical to me. The obvious next question is how big is that location. The answer depends on what is stored in it. I talk about parking spaces in a parking lot. There are different sizes of spaces: Motorcycles, compact cars, regular cars, and trucks and busses. Spaces are all different sizes and the most efficient use of them is to hold the vehicles they were designed to hold. A motorcycle in a spot for a semi-trailer truck is wasting space. A large truck will overflow as space for a compact car. Size of the memory location depends on what is stored in it. Space can be wasted if a larger space than is needed is allocated. Size and type are then related attributes or properties of the memory location named by the variable name. So is the variable the location or the name? Does it really matter? Probably if you want to get into the philosophy behind it all but not something beginners are really ready to get into. Maybe it is enough that they know how to declare and use a variable in the first course. In many ways the first programming course is the hardest to teach and perhaps the hardest for many students to take. Finding that line between deep understanding and too much information to handle at one time is not easy."
"148","2019-02-04","2023-03-24","https://blog.acthompson.net/2019/02/supply-and-demand-in-computer-science.html","We have a supply and demand problem in computer science education. Demand has never been higher and it is growing. The need is real. Take a look at We need as many Computer Science minors as we need Computer Science majors. by Doug Bergman (@dougbergmanUSA) I remember having conversations about increasing CS in middle school and what it meant for high schools. What if high schools had a lot of students wanting to do more CS when they got to HS? We've started building up HS CS but we never really asked what was in university for our HS students who got very interested in CS. Now we have to wonder. Mark Guzdial @Guzdial) in The growing tension between undergraduate and K-12: Is CS for All, or just those who get past the caps? explains the capacity problem at the undergraduate level. Now not all schools are overflowing and the problem is worse at the “big name” schools. Other schools are likely to stat feeling the pinch as HS CS output increases though. My understanding is that recruiting more CS faculty in undergraduate schools is even harder than recruiting for HS CS teachers. Maybe because we don't require PhDs to teach in HS? All levels are faced with the problem of industry ""eating the seed corn"" by hiring for good pay people who might also like to teach computer science. The TEALS program lets industry professionals teach in high schools and volunteers but I don't see that model fitting in universities. Universities tend to undervalue industry professionals as instructors and evidence by the second (or third) rate status of adjunct professors and the corresponding low pay. Fixing the shortage of undergraduate faculty is going to cost money at a time when administrators seem all about cutting expenses. Some universities are getting some faculty from industry but since for many people coming from industry it is a life style decision not a monetary decision its unclear how often that will work. And while some industry people make great teachers it can be a hard move for some as well. My biggest worry is that we’ll get students all excited in CS in high school and they will have no place as undergraduates. Not everyone will or should be a CS major, as Doug points out in his post linked above, but a lot of people will want to take CS as a minor or at least take a couple of courses. How will universities handle this? It’s going to be interesting."
"149","2019-02-07","2023-03-24","https://blog.acthompson.net/2019/02/programming-projects-and-good-idea-fairy.html","I think Garth Flint (blog at Garth's CS Education Blog) first introduced me to the idea of the good idea fairy. The good idea fairy strikes you with a great idea that works out well (most of the time) but takes you more time to deal with than you first expect. That is probably why you take the idea in the first place. Well, last semester the good idea fairy visited the idea of a Pez dispenser object when I was teaching creating of classes and objects in my honors programming class. The implementation was horrible but it did seem to help as one more example. Follow up to a few days ago and the new call for proposals for the annual CSTA conference. What do I have that is a nifty project? I’m still trying to decide what might qualify but the good idea fairy smacked me with the Pez project. Even before I looked at the old project and realized how bad it was the good idea fairy suggested that a Pez dispenser project really should use a stack object. Well, duh! I and others have been using a Pez dispenser as an example of a stack for years. So that is what I have been working on lately. I need a Pez candy class first. I think that will be easy for students to design. The data is simple and the methods are few. Then we can design the dispenser class. I think it will be interesting to see how different students design these classes from how I have been thinking about them. I’ll be disappointed if I don’t learn something from them or at least get some ideas for other methods and properties. I’m constantly trying to think of new projects and improve existing projects. Finding projects that students can relate to, that they can have fun with, and that can really teach to concepts is a never ending task. It’s a task I love though. Wouldn’t it be horrible to teach the same projects year after year? Thank goodness for visits from the good idea fairy."
"150","2019-02-11","2023-03-24","https://blog.acthompson.net/2019/02/programming-has-sure-changed.html","Last week, I was reading some old code. I wrote it in 1975. It was in FORTRAN IV and it was on punch cards. Really bad code. One character, meaningless variable names. Lots of goto statements. FORTRAN IV didn't have while loops but you could get the same thing with goto if done right. Someone is probably going to argue that if there are goto statements its not right but it was the only way back in the day. The famous “GOTO considered harmful” paper had been written but not universally accepted yet. FORTRAN IV had not adopted language features to make it easy yet. While I was in university the big new thing was called structured programming. It required some new ways of design and eventually some new programming language features. It took the tools in the languages changed before we could get by without that nasty goto statement. FWIW I’ve written new version of this program in other languages since and it is much easier, cleaner, self-documenting, and just better across the board with new languages, libraries, and programming paradigms. The basic algorithm is the same though. The big surprise in my old program was that is was extremely well commented. The first time I tried to replicate that program in a new language revisiting those comments saved me a lot of time In fact, one could easily rewrite it in a new language from the comments alone. I could at least feel good about that. Latter in my career, object oriented programming was the thing. That also required new design considerations and programming language features. FORTRAN IV could not have supported OOP. Today there are versions of FORTRAN (and COBOL too) that have language support for object oriented programming. I’m not sure I want to see them though. Just saying. I’ve been thinking about what this means for how I teach students today. The rate of change in computing and programming is growing not slowing down. As much as things have changed in the last 45 years they are likely to change even more in the next 45 years. Some concepts are likely to be around forever. Decisions are likely to rely on Boolean expressions. Repetition is likely to stick around and require proper set up, values to change, and code to check for completion. We’re going to be thinking about memory and data types even if we don’t think about them in exactly the same way. John Ruskin said, ""For all books are divisible into two classes, the books of the hour, and the books of all time."" I first saw that on the library wall when I was in university. The same is likely true if we substitute some software design concepts. Just as monolithic programs gave way to structured programming and structured programming gave way to object oriented programming, programming paradigms change based on changes to language, hardware, and the needs of the day. I don’t really know what changes we will see with quantum programming for example. What ever programming language we teach with though we need to think about the concepts, especially foundational concepts, that are likely to be around for the long term. I haven’t programmed in FORTRAN IV in decades but understanding how those horrible goto statements mixed with line numbers and if statements worked sure made understanding a modern while loop easy."
"151","2019-02-14","2023-03-24","https://blog.acthompson.net/2019/02/us-department-of-education-needs-cs.html","I recieved this from Pat Yongpradit of Code.org and thought I should share it. The US Department of Education has announced the EIR grant competition for FY 2019. This year EIR incorporates an exclusive priority for computer science with a focus on increasing diversity and equity in access, as compared to last year where the highlight was that CS was merged with STEM as a combined priority. See more detail in our blog. There are many moving parts to the federal grant review and award process, including a merit-based review process. In order to adequately score grants featuring computer science, the US Department of Education must have enough reviewers with K-12 computer science education experience. There is more information on the merit-review process and the Department’s mechanism for selecting reviewers in this blog. Code.org has been asked to put interested folks in touch with leaders of the EIR grant program. If interested, please send your CV to EIRpeerreview@ed.gov. Having CS knowledgeable reviewers participating in the federal grant review process is crucial to maximizing the opportunity these grants present the field and our collective goal of expanding access to K-12 computer science."
"152","2019-02-15","2023-03-24","https://blog.acthompson.net/2019/02/minecraft-curriculum-for-teaching.html","I'm not a Minecraft person. I've had the demos. I know that some kids really get into it but … Well, some teachers love it as much as the students. For them it’s probably a great thing if there was some curriculum to use with it. So, if you do like it and you think it would be motivating to teach computer science using Minecraft for Education there is new Computer Science Curriculum From Minecraft"
"153","2019-02-22","2023-03-24","https://blog.acthompson.net/2019/02/dont-trust-algorithms-you-cant-read.html","I admit that I am a sucker for “the best [what ever] in each state” lists. I want to see how many I have visited and what is “the best” in my state. Most of these are based on someone’s personal opinion but others are based on some sort of data and an algorithm. I think most people are aware of bias in the subjective lists and take them with a grain of salt. It is tempting to look at lists based on data and computer algorithms and more accurate though. I mean, look, it is supported by data! The most recent example of this was a list of the most boring towns in every state. I was sure the town I live in had a short at that one. There is nothing to do. One country store is the only retail operation I know of in town. There are no attractions, unless you count the beehive hut or maybe our historic meeting house. We didn’t make the cut though. The town that did make the cut for New Hampshire was Bartlett. Now Bartlett has an outstanding ski resort, Attitash, an amusement park, Storyland, and a lot of good places to eat. There is a lot to do in Bartlett. It is anything but a boring place. The problem, of course, is the data selected for the algorithm. They based their decision in large part on average age and population density. My observation is that a lot of resort areas, which are almost by definition not boring, have low full-time population densities and older permanent residents. Now they also look at “things to do” but it is far from clear where they get that data. Choosing the right data is part and parcel to getting a good result for any sort of algorithm. This is why transparency of data and algorithms is important in evaluating any conclusion. This is an important concept for our students to understand. To me it is as much a computing topic as it is a societal topic. As we get more and more data and more and more people try to make sense of the data we have to understand that just because there is data in to an algorithm and a result coming out that is not enough. I haven’t heard it said much recently but we used to say it a lot. Garbage in, garbage out!"
"154","2019-02-26","2023-03-24","https://blog.acthompson.net/2019/02/csta-board-elections-2019.html","Wow! Computer Science Teachers Association members should all have gotten an email about this year’s election for the CSTA Board. It is a remarkable slate of candidates. It seems to get stronger year after year. We, members, have to make decisions though. Not that anyone really cares but I am sharing my thoughts. The K-12 seat is between Doug Bergman and Art Lopez. I’m sure Art would do a great job but I’m voting for Doug Bergman. I’ve know Doug for years and pushed him to run for the Board for several years before I got him to throw his hat in the ring. I’ve been impressed with his performance over his first term on the Board. He is a tireless worker, a leading edge teacher, and a strong promoter of computer science education. Doug gets things done. Doug Bergman has earned a second term on the Board. K-8 has another good pair of candidates - Vicky Sedgwick and Alana Robinson. Coming from a big city system and a special education background is a strong plus for Alana. On the other hand, Vicky has been a remarkable advocate for K-8 teachers inside and outside CSTA. Her work with the #CSK8 Twitter chat has been a phenomenal community builder and educational experience for K-8 teachers everywhere. I would like to see Vicky Sedgwick have another term on the CSTA Board. School District representative is also a tough choice. Dan Blier and Byran Twarek. I met Bryan while working on the K-12 CS Framework and was very impressed with his work ethic and commitment to computer science education. His experience and performance on the board suggest that Byran Twarek should have a second term. At-Large is the toughest decision. There is no incumbent nominated for one thing. And both candidates are seriously strong. Lien Diaz has done a lot of work growing computer science education both at her time with the College Board and since moving to Georgia Tech. She’s smart and understands the sort of politics that are involved in growing CS education. Michelle Friend was very important to the creating and early years of CSTA. Her institutional knowledge of CSTA is very valuable. I’m still thinking about this one and hate not to vote for Michelle but am leaning towards Lien Diaz. [Full disclosure: I suggested myself as a nominee for the At-Large opening. I don’t doubt that either of the nominated candidates will do as well or better than I would.] OK people. My two cents are out there. The CSTA Board candidate bios are available. Read them critically and make your own decision. Agree or disagree feel free to add you two cents in the comments."
"155","2019-02-27","2023-03-24","https://blog.acthompson.net/2019/02/what-are-you-reading.html","We all get asked this question – What are you reading? Often this is the context of an interview and the person asking is really asking “how are you keeping current in your field?” For computer science educators there are few things better to read than SIGCSE papers. Right now the Proceedings of the 50th ACM Technical Symposium on Computer Science Education are open for download. I think they’re only open (FREE) to non-members for a few more days. The conference closes this Saturday. I’ve been downloading anything and everything that looks interesting or useful to me as a high school CS teacher and as someone interested in learning more about the field. I have about 35 papers downloaded. It’s going to take me a while to read them all. I am a member of ACM and SIGCSE so I will be getting these papers in hard copy so you might wonder why I am downloading PDFs. The short answer is that I lose paper documents but I have a lot of room to store soft copy. And I confess that I want to start reading now. I can’t make it to SIGCSE (it started today BTW) but I will be following Tweets and other social media updates. Having the papers available will help me understand what is going on better. So are you taking advantage of paywall free access to SIGCSE proceedings? What other places do you go to learn what others are doing?"
"156","2019-03-04","2023-03-24","https://blog.acthompson.net/2019/03/remember-ladiesand-act.html","In March of 1776, Abigail Adams wrote to her husband who would be the second US president “I long to hear that you have declared an independency. And, by the way, in the new code of laws which I suppose it will be necessary for you to make, I desire you would remember the ladies and be more generous and favorable to them than your ancestors. Do not put such unlimited power into the hands of the husbands. Remember, all men would be tyrants if they could. If particular care and attention is not paid to the ladies, we are determined to foment a rebellion, and will not hold ourselves bound by any laws in which we have no voice or representation.” [ emphasis mine] After all this time, we, mostly us men, seem to forget the ladies. Most of us are aware that there is a shortage or at least an imbalance of women in the computing field. It’s men’s fault mostly. We make it worse when we ignore the efforts and accomplishments on the many wonderful women in our field. We talk about Ada Lovelace and Grace Hopper but use them as tokens too much of the time. Today there are a number of wonderful groups whose focus is directly on bringing more women and underserved minorities into the computing field. Unfortunately, they don’t get the attention they deserve. Reshma Saujani, founder and CEO or Girls Who Code gives an important response to this problem with her post Erasing Women in Tech: How 60 Minutes Ignored Women’s Voices, Stories, and Expertise Now I can hear someone saying, well, yeah, but code.org is doing great work and they are helping girls and young women. Plus the 60 Minutes piece was a good promotion of computing for all. There is some truth to that but it misses a point. These other great efforts, those that Ms. Saujani names and more need their own recognition. How else are they going to attract the participants, the supporters, the money, and build sustainability if no one knows they are out there? Outstanding programs like these need the sun shown on them so they can grow and thrive. The truth is that we need some special programs for girls and minorities because the male dominated organizations are still not making them as comfortable as they should. Oh sure some of us are trying. I like to think my classrooms are safe spaces for everyone. I’m sure most of my regular readers feel the same way about their classrooms and computer labs. We may even be right. But we’re not everywhere. As a community, we in computing have to be more generous and favorable to women than we have in our more recent history. Our future depends on it."
"157","2019-03-08","2023-03-24","https://blog.acthompson.net/2019/03/making-projects-more-interesting-with.html","My students are working on the palindrome project. You probably know it – enter a string and report if it is a palindrome or not. In my case, I have them create a method to “clean” the string by stripping out all of the characters that are not letters and a second method to reverse the string. My goal is practice in creating methods as well as string handling and loops. It’s always more interesting if the test data is more interesting. There are lots of common palindromes that students are familiar with such as “Madam I’m Adam” and “Race Car” and the ever popular “Mom”, “Dad”, and “Bob.” My favorite is “A man, a Plan, a Canal – Panama” because you can read it dramatically. This week I stumbled on a web site dedicated to palindromes - http://www.palindromelist.net/ There are probably other palindrome related web sites as well. I’m thinking about supplying a file with lines that are and are not palindromes and having students modify this first program to read the file and report. More data is better data. Another idea I have percolating is asking students to write code that creates palindromes. I’m not sure how hard this would be as I’m still thinking about how I would do it. Again, data is important. You want to use real words and ideally the phrase should make sense. Does it have to though? Hum. I have a dictionary file – a text file with almost 114,000 words in it. I figure that should be useful for something. I keep thinking it would be useful for a lot of interesting projects – things like word games (Boggle, Scrabble, etc.) or maybe spell checkers. There are sources of large text files on the internet as well. I have files with the full text of some books (in the public domain of course) and Shakespeare's sonnets. Check out Project Gutenberg which has some 58,000 public domain books I’m thinking some interesting word and letter count projects are a natural. A lot of the projects that have been presented at the SIGCSE Nifty Assignments session (collected here at http://nifty.stanford.edu/) involve working with data sets of words or text. You all know about the Nifty Projects resource right? You can also make interesting data. For a long time I have assigned a project that creates driver’s licenses based on name and birthday. New Hampshire recently moved away from this scheme for privacy reasons but it was/is a fun project. I grabbed first and last name data from the Census Bureau (there are other lists) and wrote a program to create a data file of random names and birthdays. I’m toying with assigning something like that as an assignment some day. Making sure the dates exist (no February 30th for example) makes it fun. OK, harder, but harder is fun right? What sorts/sources of data do you use to make projects more interesting?"
"158","2019-03-11","2023-03-24","https://blog.acthompson.net/2019/03/dont-cross-data-types.html","Remember in the first Ghostbusters movie where the ghostbusters are told not to cross the stream of their ghost busting guns? And then at the end they do cross the streams? Mixing data types is like that some times. You really have to know what you are doing when you mix data types. The Facebook group for AP CS A teachers recently had this Java example: Can anyone explain why a + b is NaN but a+=b is zero? int a = 0; int x = 0, y = 0; double b = (double)x/y; System.out.println(""a: ""+ a); System.out.println(""b: ""+ b); System.out.println(""a + b: ""+(a+b)); a += b; System.out.println(""a(2): "" + a); //output a: 0 b: NaN a + b: NaN a(2): 0 NaN is not a number and is the result of the divide by zero. You probably shouldn’t do that anyway but it happens. What is interesting here is the different way that (a + b) is handled compared to a += b a += b does a conversion of b to integer before it does the addition while (a + b) does a conversion of a to double. That explains the different results. Of course if you were to do a = (a + b) you would probably get a compiler complaint. I think. I know you would in C# but I haven’t tried Java yet. FWIW C# also complains about a += b and demands an explicit cast. Different languages and compilers handle these things differently. So what is the message here? I think the message is that programmers should usually make explicit casts when they mix variable types. Maybe you know what will be cast to what for different variable types and different operations but a) how much do you want to bet you’re right and b) how much to you want to bet that the next person to look at your code will understand what is going on behind the scenes? Mixing types causes a lot of confusion for beginners. SO does how numbers are stored (some kids never seem to understand that 0.1 is an infinitely repeating fraction in binary and what that means) of course. Encouraging students to cast or at least to be very careful about the types they use and the types they mix is an important lesson."
"159","2019-03-12","2023-03-24","https://blog.acthompson.net/2019/03/cs-education-where-do-we-start-and.html","There are a number of sets of standards with most based on the CSTA standards (https://www.csteachers.org/general/custom.asp?page=standards) and the K-12 CS Framework (https://k12cs.org/). A lot of really smart people (and me in the case of the framework) worked on them but I've been thinking about creating my own set to use. Why? Difficult to explain but in large part to get things clear in my own head. What do I see as the concepts and ideas I should be teaching in my high school? How do I want to express my thoughts – the same as the existing standard or will putting them in my own words help me understand them better? An open question. Now one might think this is easy with the standards already written. But it is more complicated than that. High school is very much in the middle for computer science. We’re not yet college/university but we want students to be prepared for that level of education. At the same time, there is no standard of knowledge that universities are expecting all incoming students to have. That makes their lives difficult but they have been living with that as long as there have been CS courses. It’s leaves us in high school a little more free to determine our own output goals though. On the other end, there is no standard set of CS knowledge that high schools can expect all students to have. That is especially true for a school like mine that takes in students from over a score of different middle schools and two different states. Like the universities, our curriculum has to start assuming no background at all. Oh sure students are somewhat tech savvy compared to many of their parents but I still spend time teaching how to move files from one folder to another. Being great with Instagram doesn’t translate to computer science knowledge. We see some students who come in more advanced as well. They may have done a lot of programming in middle school. Many in an enrichment course, a summer program, or FIRST Lego League or some other opportunity. They may even be programming in higher level languages. Can they skip the first course? Sure, as long as we have something more advanced to help them continue to grow and learn. It would be a shame if they were effectively done before high school and spent 4 years forgetting things before university. As I think about high school computer science curriculum holistically I think about the Computer Science Curricula 2013 (CS2013) document. One key take away for me there was the three levels for university curriculum. Basically it was things all CS departments should offer, a level that all departments should offer “all or almost all” and electives. For high school I don’t know that I want three levels. Maybe two would be enough. Things that all high school curriculum should offer and electives. Earlier version of the CS Curricula had only two levels. I am not sure there is room in the schedule for three levels in high school. Electives should be offered in schools where there is more room. I hesitate to specify standard or required or even recommended electives for high schools. Gradually CS, and other subjects, move down from universities but there is no clear vision for what will move down from universities to high schools in the near future. An other idea I like from the CS 2013 document in the Knowledge Area breakdown of concepts. This sort of breakdown is also included in the CSTA Standards of course. Do I want to come up with my own breakdown or use the CSTA version? I’m undecided. Seems like a big task and it is. But I really feel like I need an expression of my personal (well researched and thought out) ideas of what should be taught. Anyone else feel like this? [Note: I was on the CS 2013 ACM/IEEE Task Force and the K12 CS Framework writing team. And I still think I need to think about this stuff.]"
"160","2019-03-14","2023-03-24","https://blog.acthompson.net/2019/03/awards-i-wish-we-didnt-need.html","Last week my school was told we had earned the College Board’s Female Diversity award for both Advanced Placement Computer Science A and Advanced Placement Computer Science Principles based on how many female students we had in those courses last school year. Yeah! We’re one of two schools in the state to get this recognition. That’s a bit disappointing. The more I thought about it the more I thought how sad that getting to adequate female representation was so rare that schools were getting special recognition for it. Are there similar awards for other AP courses? Are their awards for schools for getting to Male Diversity numbers in courses were male students are underrepresented? Is that even a thing? Don’t get me wrong. I am thrilled that we have good representation of female students in our AP CS courses. And I’m not shy about sharing news of the College Board's recognition. It’s hard to get solid APCS enrolment period. I teach at a private Catholic school that requires four full years of religion. That has a serious impact on electives. We have even better female representation in our lower level CS courses because we require a full year of CS for graduation. AP CS is going to be an elective so we have to have a good environment to get students to want to fit it in. With cultural norms the way there are, a lot of female students are encouraged to follow other academic paths. World languages, for example, fit the stereotype and it often feels like that is a more common, if not natural, path for female students. And the boys seem to be less excited about languages. Our goal at my school is to ensure that all students are comfortable and feel like they belong in computer science courses. We are careful about room decorations. You’ll see women in computing highlighted in posters and bulletin board items for example. I think the most effective effort it that teachers encourage all students, reassure them that they mistakes they make don’t mean they are stupid or incapable, and include projects that are not gender biased. You know, be a good teacher. For now we all need to make efforts to include a more diverse set of students. And it is nice to be recognized for the success of those efforts. But I’ll tell you, having a diverse group of students is all the reward I really need."
"161","2019-03-19","2023-03-24","https://blog.acthompson.net/2019/03/interesting-links-for-computer-science.html","I haven’t done one of these for a while. I still Tweet or retweet a lot at @AlfredTwo but I needed a break. I’m not sure I will do this every week but I think I will shoot to do it from time to time. Microsoft Education posted a bunch of resources on Ways to encourage girls to keep pursuing STEM this Women’s History Month There are some posters I think will show up in my computer lab soon there as well as other helpful links. David Renton is doing some amazing things with his students who are programming virtual reality applications. Currently he is having Students Build International VR Prototypes for Children This is more than about computing. It is a multi-national effort with some support from Microsoft in the UK and deployment at a hospital in Sweden. Mike Zamansky has a great post about Adapting A Nifty Assignment You may or may not be familiar with the SIGCSE Nifty Assignments sessions, check them out if not, but they are pretty nifty but many of them really do benefit from adaptation to a particular environment. I found this on the Blog at CACM I don’t know about you but calculating with Roman numerals (what no zero?) was something I wondered about. This article explains it all. I wonder if this might make a nifty project? Calculating With Roman Numerals is Not So Difficult Speaking of SIGCSE, Bryan Twarek provides a nice list of K-12 Teacher Takeaways from SIGCSE 2019 on the CSTA Blog. Not as good as being there but Brian includes a bunch of related links. Under my list of things to keep an eye on, Microsoft had a post called Achieve more with Microsoft Game Stack It looks mostly like a repackaging or rebranding of a number of new and existing resources for game developers. Will it have application for schools? Maybe in game development courses but even there it seems like Game Stack is more for professionals than beginners. But we’ll see if anyone in education takes it on and provides information."
"162","2019-03-22","2023-03-24","https://blog.acthompson.net/2019/03/debugging-student-code-for-fun-and.html","Students are really good at creating strange hard to solve bugs in their code. I am convinced that the code of a raw beginner can easily be harder to debug than that of a professional coder. I had a couple of good ones today. One was actually pretty easy once I realized the cause. I have some international students. Great kids, very smart, hard workers. English is not their first language though. In fact, English letters are not their first character set. In one class I have boys from Cambodia and Viet Nam. The character sets they grew up with are very different from English characters. This means that sometimes English characters confuse them. l, I and 1 can all look alike to them especially in some fonts. Like this one. So I had some non obvious ""spelling errors."" They and I have a better idea of what to look for next time. The other one was harder. We’re using C# and Windows Forms. Now normally this makes things easy. But you can also cause some very puzzling errors. In this case, the code seemed to be doing everything it was supposed to do EXCEPT showing the results in a list box. I tried a lot of my bag of tricks. Single stepping through code, displaying intermediate results (that didn’t work because nothing was displaying in the list box). I copied the code into a new project. I created new objects. I tried a lot of things. Finally, I did a side by side comparison with a project that worked and that showed me the problem. For the curious, Windows Forms projects run a subroutine to initialize and instantiate the objects on the form. Some how, probably a copy paste error, this student was calling it twice. Without going into detail, this resulted in two sets of objects with one of them covering the set that was actually being acted upon for the display. I try to look on the bright side of things. In this case, I have new things to look for that I didn’t have before, I have gained insight into issues that my international students have (and may change some variable names I use), and I got to demonstrate debugging techniques to some students. That’s a win right?"
"163","2019-04-08","2023-03-24","https://blog.acthompson.net/2019/04/teach-programming-or-teach-programming.html","For me, teaching is all about the concepts. Programming languages change. My first programming language was FORTRAN. This was the big language with I was in university. Today? Not so much. But loops and decision structures still exist. Over my career, I have learned a bunch of programming languages. I’m not sure I want to know how many but its a lot. This morning I was reading Mark Guzdial’s blog as one does (Why we should explore more than one programming language across the curriculum) which comes as I am looking hard at my school’s computer science curriculum. We teach several programming languages. Visual Basic in our freshmen course, App Inventor for our mobile app development course, C# in honors programming, JavaScript in AP CS Principles, and Java in AP CS A. SO potentially students can learn a bunch of languages during their time here. Is this good or bad? Are there too many languages? Are these even the right languages? I believe that much is dependent on ones goals. Is our goal (in HS CS) to teach a programming language or to teach how to program (programming concepts). As I started off this post, I believe that in the real world people who develop software, professionally or other wise, will need to learn new languages as time goes on. Mark has been writing a lot about task-specific languages (Task-specific programming languages: People aren’t dumb. Programming is hard.) and it is pretty clear to me that is a coming thing. Teaching all programming classes using one programming language is probably a great way to teach that language but to quote Mark’s blog “We have no evidence currently that language-specific programming knowledge will transfer” So how do we prepare students who will have to learn new languages for new tasks? Someone once said that the second programming language is the hardest one to learn. I can see how that could be the case. On the other hand learning programming languages does seem to get easier after that second one. I believe it is because learning a second language forces one to think beyond the syntax. In one class, some years ago, I started showing my AP students who to do the same loop in a number of languages, including assembly language, and one student claimed later that was the most valuable lesson of the course. I still try to show multiple languages at times but since most of our students have already been exposed to several by the time they get to Advanced Placement that seems less necessary today. Still I toy with the idea of writing a parallel programming book using several languages. This is an idea borrowed from parallel translation Bibles where several translations of the Bible appear side by side on the page. A great study tool for religion that might work in programming as well. Coming back to goals, I can see teaching a lot about one and only programming language as a somewhat reasonable way to prepare for a job but not for a career. I still remember getting my first programming job because I knew one language pretty well. Six months later I was handed a project specification and a language reference manual for a language I had never heard of and told “go to it.” I truly believe that having a background in multiple languages was the difference between success and failure for me."
"164","2019-04-18","2023-03-24","https://blog.acthompson.net/2019/04/what-is-in-name.html","It’s been said that the three hardest things in programming are naming things and off by one errors. For some reason, this semester, my students are having the most trouble with naming things. Specifically, they seem to have trouble making the connection between names and objects. For example, they will use the name of what looks like a text box but without actually instantiating the text box firs Or they will use a different name for the textbox than the name the textbox actually has. And they’ll be surprised at getting an error message that says “the name ‘x’ does not exist in the current context.” The same is true with undeclared variables. Often this is caused by not paying attention. I will set the name of an object while live coding and then use that name later in the code. If they were not paying attention any of the three times I point out the name declaration they may not use the same name in their own code but expect it to work later. After all, it worked when Mr. Thompson did it. Now of course I have explained all of this numerous times. I think many times students are just expecting the system to fill in the blanks for them. It would be nice if the system would. Maybe one day we’ll have artificial intelligence built into development environments that will help with this sort of thing. But we are not there yet. Our IDEs do a lot for us (developers) that they didn’t do for us back in the day. No autocorrect in punch cards. I know that some educators believe that using a fancy IDE with automatic features is a bad idea. Students should learn without them. They may have something of a point but I resist the idea because I don’t want to make programming to hard. I don’t run a weed out course. Plus these modern tools open the door for students to experiment. Intellisence in Visual Studio lets students see a lot more options then I have time to cover in class. I keep coming back to naming things though. Selecting meaningful names is important. Making the connection between declaring and defining objects/variables and the names themselves is important. Spring break started tonight. Figuring out how to address this is something to think on in a couple of days when I’m relaxed."
"165","2019-04-21","2023-03-24","https://blog.acthompson.net/2019/04/more-than-one-way-to-code-solution-to.html","Garth Flint has an interesting post about grading programming projects (It is never easy) in which he talks about the interesting solutions students come up with. It struck a cord with me on a couple of levels. Yes, it makes grading more difficult but it also means that students are thinking for themselves. Or so I chose to believe. Sure some of them look up solutions on the internet but they have to understand them well enough to explain them and make them their own. I figure that on average a class full of students will come up with three different ways of doing things. Sometimes only two but sometimes more than three. Sometimes I will take samples of the various solutions (with no names) and discuss them with the class. It gives me a chance to show that there is more than one way to do things AND to discuss optimization a little bit. Occasionally students have come up with solutions that I had never thought of and were even better than how I had done it. I love it when that happens. I love new solutions. To it also emphasizes the value of a diverse group of people looking at a problem. As Garth mentioned in his post, student ideas move quickly through a computer lab. I struggle with that a bit. How much help is too much help? Where is the line between “he helped me with it” and “I copied it from her?” And how do you tell where the students are around that line? I could get pretty fanatical about it. I’m not sure how productive that is though. It probably adds as much stress on me as it does for students. I toss in quizzes as well and students who understand what they are doing do a lot better on then than students of get too much “help” with their projects. Using multiple forms of evaluation is a good practice anyway I’ve been told. Generally I see projects as more effective as a learning experience than as an evaluative tool. Sure they help evaluate learning but a practice, an exploration of ideas, and a way to learn things is their highest value. If students come up with implementations differently for what I would come up with I see that as a learning win."
"166","2019-04-29","2023-03-24","https://blog.acthompson.net/2019/04/game-of-thrones-and-computer-science.html","I confess that I have not watched a single episode of Game of Thrones. That doesn’t mean I am oblivious to the social impact of the show. My online social media is full of it. So when Rita Tillson Vasak linked to this Slate article explaining why a recent episode was so hard to view I jumped to read it. The article talks about data compression and how a lot of compression made it hard for a lot of people to really view the scenes. It talks about data compression in a way that assumes the reader has a clue as to what they are talking about. It uses the term “lossy video compression” and talks about the layers of compression involved in getting the digital image to your screen. I wonder how many people read that article without comprehending it very well. Hopefully my Advanced Placement Computer Science Principles students would get it all. We talk about compression in AP CS P. I’ve also played with lossy compression with my Programming Honors students (Lossy Text Compression Project ). I talk about compression in terms of text, images, video, and music. I think students mostly get it. Rita suggested this article as part of review for the APCSP exam (coming in less than two weeks!) and I think that is a great suggestion. I may use it next year when we talk about compression as well. I think it is a good visual and discussion as to what can go wrong in our attempts to get the most data through the smallest “pipe” in the least amount of time. Showing specific examples of the effects, positive and negative, of computer science technology when it also ties into a social event can make a great impression."
"167","2018-10-16","2023-03-24","https://blog.acthompson.net/2018/10/lossy-text-compression-project.html","My motto has long been ""steal from the best"" at least when it comes to teaching resources. Today I found a good project from Code.org. I'm using their Advanced Placement Computer Science Principles curriculum and we are currently learning about data compression. Code has created a Lossy Text Compression app (See image or visit link). that students can try out. The code is also available which is very nice. The algorithm is to keep the first letter of every word and then remove all the vowels to create a new, compressed message. Now the app is really nice and because the code is available several students modified it to try different things out. One of them just changed the message to report 100% compression. No surprise there of course. I am thinking that I may have some of my coding students (in my classes that are not AP CS P) write their own versions. It is a fairly easy string manipulation exercise which makes it good for beginners. Parsing of text is a good thing to learn anyway. It also lets me bring data compression into the class discussion and I see that as a big plus. Besides, I just really like string manipulation projects."
"168","2018-10-17","2023-03-24","https://blog.acthompson.net/2018/10/join-csk8-twitter-char-17-october-2018.html","These are great chats with a lot of wonderful people sharing ideas about computer science in grades K through 8. Join us for #csk8 chat on Wed, 10/17, at 5pm PT/6pm MT/7pm CT/8pm ET for the 3rd in our series of chats about the cross curricular integration of CS for 5-14 year olds. We will be talking about The Integration of Computer Science & Math in K-8. #CSforAll"
"169","2018-10-17","2023-03-24","https://blog.acthompson.net/2018/10/acm-to-host-twitter-chat-on-ethics-in.html","On Thursday, October 18, ACM will host a Twitter chat on ethics in computing beginning at 11:00 a.m. EDT (15:00 UTC). During the chat, ACM will post discussion questions from the Twitter handle, @TheOfficialACM. We are inviting the computing community on Twitter to join the discussion using the hashtag #ACMCodeOfEthics. Catherine Flick, Michael Kirpatrick, and Marty Wolf (members of the ACM Committee on Professional Ethics, which spearheaded the ACM Code of Ethics and Professional Conduct update) will take part in the discussion."
"170","2018-10-18","2023-03-24","https://blog.acthompson.net/2018/10/professional-development-is.html","I first started to appreciate the cost of professional development when I was working with and for Microsoft. Microsoft at the time was working hard to promote the use of Visual Studio as a programming teaching tool. Part of that effort was through professional development for teachers. I took part in some of these as a student and some of them as presenter. I could go into details but I think is is safe to say that when code.org says they spend thousands of dollars per teacher for professional development events (Moving towards sustainability of computer science in schools) I don’t doubt it for a second. Still over the last bunch of years a lot of CS education professional development has been paid for by a combination of universities and industry (lots of that industry money was direct from Google to universities and a lot by a number of companies though code.org) This is not really a sustainable/scalable model. Well, it’s not sustainable if we are going to have enough CS teachers for every school to offer (and present) CS education to all students. As Mark Guzdial points out in his recent post at CACM (Changing who pays for CS professional development in the US and who controls it: It has to be local ) it is not how other subjects do it either. I have been hearing teachers say for years that industry should pay more to support CS education. And I have tended to agree. On the other side of the issue, many complain about an undue influence industry have on CS curriculum. Too many strings attached to the money. How much you worry about that often depends on how you feel about the company donating the money of course. Either way, is it fair to demand that the tech industry fund CS PD? Do other industries fund PD in their areas of interest? Actually, yes they do. There is a reason that most math classes are taught with Texas Instruments calculators! But, mostly you find industry funding for career/tech programs in career/tech schools which tends not to get the public attention it deserves. Is CS education a career training course or a core academic course? The answer is, of course, yes. If we want to really prepare students for either an academic or an industry future we have to focus on concepts and not on specific tools or platforms. This can be harder at times with industry funded training. In the long run we really need two things. One is more pre-service training for teachers who will teach computer science. That has to be folded into existing teacher training programs. While that seems to be happening some it is slow progress. The other thing we need is professional development for in service teachers. That training has to be paid for and prioritized locally. These days the PD for CS teachers I hear about most strongly supported in Advanced Placement Summer Institutes. That’s great and a lot of teachers benefit from it. My school paid my way to one a couple of years ago and I got a lot out of it. Training for teachers in K-8 and for courses that come prior to AP courses do not appear to have the same number of local options for teachers. That is changing especially with the work that code.org is doing with their local affiliates. Many of those programs will, I hope, grow and expand to reach more teachers. That will only happen as schools and school districts start encouraging (by funding) teachers to attend these courses. There is a less tangible, measurable reason we need local funding of CS PD. Organizations, and individuals, send a strong message by what they are willing to spend money on. Spending money of CS ED PD shows that CS education is important, that it is valued, and that the people teaching it are valued. Making it clear that CS education is important enough to spend money on training for teachers is an important message. I tend to believe spending money of PD will help retaining teachers and that is going to be really important."
"171","2018-10-22","2023-03-24","https://blog.acthompson.net/2018/10/the-imperative-to-teach-ethics.html","Ethics has been on my mind a lot lately. Last week, the ACM had a Twitter chat around the ACM Code of Ethics using the hashtag #ACMCodeOfEthics.It took place during the school day but I was able to take part for a while during lunch. It was a good discussion. Coincidently, Kara Swisher had an OpEd post in the New York Times titled Who Will Teach Silicon Valley to Be Ethical? There was a time when my biggest concern about the software industry was the poor quality of software (still a concern) These days I worry about the ethical quality of the companies producing that software. This is not a new concern. Years ago I heard the (now former) CEO of a large company talk about his “values coach.” That he needed some one to coach him on the companies published values was unsettling. Kara Swisher talks about “chief ethics officers” to help companies stick to ethical practices. That concerns me as well. Companies adopt the ethos of their leadership. If they leadership needs someone to tell them that they are pursuing unethical activities there is a problem. And that problem is going to become endemic throughout the company regardless of a chief ethics officer. We need to teach ethics long before students grow up to become CEOs. I took a look back at the Computer Science Curricula 2013 (CS2013) Final Report today. Yep, all the talk about ethics I remembered from task force meetings was still there. Ethics and professional practices are listed a Core Tier 1 topic. That is the highest of the three levels of importance for undergraduate computer science topics. That means all undergraduate computer science programs should teach ethics! The discussion in the document talks about the fact that having it as a stand alone course may miss students in some programs but that it can and should be integrated in many, if not most, other courses. In some ways I think integrating it into other courses should be a standard practice with or without a standalone ethics/professional practices course. Context matters. During the discussion on Twitter last week it was pointed out that many don’t see the ACM Code as having answers to specific questions. That’s probably true but I don’t think it is possible to write a code that answers every specific question. Rather I see the code as a place to start asking questions. How does what is being discussed fit in with ethical practices? What are the trade offs? There are always trade offs. How do we balance those trade offs to the side of the betterment of society? Where does that leave us who teach prior to the college/university level? Can we leave the teaching of ethics to the professors? Given the number of people I hear from who say they are unaware of specific ethical practices courses or mandates to discuss ethics in other courses I don’t think we dare. And let us not forget about all those people who bypass university completely! No, we’ve got to teach it. We’re not going to get many stand alone computer science ethics courses in high schools. OK I teach at a Catholic school and Ethics and Justice is a required course for our juniors. Ethics shows up in the course description of several of our courses and that is great. But as I said earlier, context matters. I am not going to assume that these other courses are sinking in. High school courses seem like silos to many students. “Why are we learning Binary in computer science that is a math topic?” is a question I hear regularly. Ethics have to be part of the discussion in computer science courses. It fits nicely into Advanced Placement Computer Science Principles. I think that was/is intentional. We have some great conversations about ethical issues in that course. What I want, what I think society needs, is for people to regularly think about the ethical impact of computing. Computing is changing every aspect of our lives. Without thinking about the ethical consequences of these changes we risk everything."
"172","2018-10-24","2023-03-24","https://blog.acthompson.net/2018/10/nominate-someone-as-2018-champion-of.html","Know someone or some organization or some school responsible for doing great things in computer science education? Maybe they should be nominated for this award. In celebration of the 2018 Computer Science Education Week (CSEdWeek), the Computer Science Teachers Association (CSTA) and Code.org are pleased to present the 2nd annual Champions of Computer Science Awards. Know of someone who’s achieved something outstanding in computer science education this past year? Tell us about it! Nominate a student, teacher, school, district, after-school club, organization, etc., to be recognized as a 2018 Champion of Computer Science. Those selected will be awarded a trip to Seattle, WA to be recognized on stage at the kickoff of CSEdWeek. This opportunity is only available for US submissions. Please complete this form by November 2nd to nominate your Champion of Computer Science. Email awards@csteachers.org if you have questions."
"173","2018-10-27","2023-03-24","https://blog.acthompson.net/2018/10/csta-new-england-regional-conference.html","This is the second of these conferences. How I missed the first year I don’t remember but I’m glad I made it to this one. The conference was held at Rhode Island College. I got some good things from it. We started with some welcoming remarks from the president of the college, the Rhode Island Commissioner of Education and a few others. It is clear that there is some strong support for improving CS education in Rhode Island from the state and from the universities. Rhode Island has made some great strides with hundreds of teachers trained in the last 2 and a half years. The have also expanded APCS into 78% of the state's high school. We than heard from a panel of representatives from the state Departments of Education from all of the New England states. IT was interesting to hear how the different states are progressing towards expanding CS education. Several people said that their state was ""working to catch up."" Given how little CS education had a few years ago and how much a lot of states are working I don't see these states as behind other states that much. Behind where they want to be is a whole different question. It is probably good that the various states don't want to fall behind other states. Next came concurrent sessions. Lots of concurrent sessions. Some were an hour long and some sessions were a set of three flash talks. I went to flash talks. Now the flash talks were good and I got value from them but I wish some of them had been longer. The committee might want to think about making some tough decisions and have fewer presenters but for longer sessions. Anyway. Elizabeth Patterson @EPPHS presented two flash sessions. One was on teaching binary, an interest of mine from way back, and shared the resources she uses at: https://goo.gl/9qNt3i Her second session (after lunch) was on sorting (another fun topic) and she again shared resources at https://goo.gl/uAz2t5 I’ll be spending some time looking through them for my own practice. This is exactly the sort of sharing we as CS educators should be doing more of. I also attended two sessions by representatives from the Lesley University STEAM Learning Lab. One was on visualizing computation with 3D modeling and printing. Very interesting and I got a few ideas but this one would really have benefited from being a lot longer that n15 minutes. Now that I know about them and their programs I’ll be spending some time at their web site looking for resources that I can use. Their other session was on physical computing. .I didn’t hear much new here but again I think the time limit was more responsible than the presenters. They clearly had a lot more to share than they could in 15 minutes. Fred Martin, UMass Lowell and the CSTA Board, talked about rethinking computational thinking. There is a lot of talk about that lately and I liked Fred’s take on it. Fred’s slides are at cstane2018-fredm He concludes with “CT is the “connecting tissue” between the world of computer science / programming expertise and the world of disciplinary knowledge” I think I like that as much as any definition of CT I have read lately. Karen Lang, MIT Appinventor, gave a talk on new and coming features for AppInventor. Tutorials seem interesting as does the new CloudDB which seems like a big improvement for data storage. There is a new emulator available for MacOS and a new one for Windows is coming. That’s good news. Also the companion app for iPhones has been submitted to Apple for the Apple store. At some point Apple will (we all hope) approve it and students will be able to put AppInventor apps on iPhones. Chad Williams, Central Connecticut State University, shared some of his ideas about teaching cryptography. I hope to get his slides because he has some good stuff that I hope to write more about at some point. Since this subject is coming up soon in my AP CS Principles course I can put some of this to work. Overall, this was a great little conference. I did some networking between sessions. Connecting with old friends, meeting some new people, and getting ideas from informal conversation as well and sessions. The food was good. We had a real breakfast – eggs, potatoes, sausage plus healthy stuff. Box lunches with good sandwiches and vegetarian options. Let’s pretend I didn’t eat the brownies that were available for snacks. Hopefully there will be a third conference next year."
"174","2018-10-29","2023-03-24","https://blog.acthompson.net/2018/10/getting-computer-science-teachers-to.html","A number of related (well in my eyes anyway) have got me thinking about how we need to develop computer science teachers. Phil Bagge’s post Developing Teacher Agency in Computing Part 1 pushed me over the edge. His Bagge scale of teaching agency makes a lot of sense to me. Computing Science? Dipped my toe with hour of code I am teaching using an open-ended programming environment I am adapting x resources I am creating my own resources I might put something between items 2 and 3 but I am not sure how I would express it. Maybe, “teaching from a script.” Regardless, there is a progression here. It takes a lot to move from one scale item to another. Some people are not, let’s face it, going to move very far along the scale. For some it will be time, for some interest, for some lack of support, and well lots of other reasons that will make sense for individuals. We’re going to need more people to move along the list if only so they can develop tools for those at the earlier levels. I got some push back from this meme - Asking teachers to teach from a script is like asking an artist to paint by numbers. I know that there are fans of tightly controlling what teachers teach and how they teach it. I’m not one of those people. I think we want and need teachers who know when to go “off script. Yes, that takes someone who is at more advanced levels of subject knowledge and pedagogic experience but it should still be a goal. Mike Zamansky wrote about From Scripts To Freestyle on his blog last week. He says that “Having a direction but not a script makes it easier to ""call and audible."" “ An audible in this context means taking a lesson in a new or different path to reach the end destination. Experienced teachers know that not all groups of students are the same. Even different sections of the same course in the same school year act and react differently. A lot of scripts don’t leave enough room to vary to meet the audience where they are. Our problem (where “our” means people who want to see computer science in every school for every student) is that we have a lot of wonderful teachers (not enough) who are still at the earlier levels of Bagge’s scale. They need the script. They need a lot of scaffolding. They don’t yet have the content knowledge to “wing it” or jump off script. Some teachers are never going to get beyond the middle of the Bagge scale. They aren’t that motivated. They see themselves as [some other subject] teachers who have to fill out their workload with computer science. It’s a reality and it will take a long time before we have enough teachers who see themselves as CS teachers who maybe have to teach something else from time to time. So we have to make sure those teachers have the best resources possible even if that means some scripting. It’s a big responsibility for curriculum developers. I would argue that there is a responsibility for teachers who are developing their own resources to share as much of those resources as they can. I am told there are some teachers who keep their resources to themselves on purpose. I don’t know any of those teachers and I hope they are a myth. But I do know that there are teachers willing to share who don’t feel like they have a sharing platform. Some are to shy or lacking in confidence to propose presentations for conferences. Blogs make a great platform and they are free to set up. There are lots of options like blogger.com and wordpress.com and more. Jump in, the water is fine. Many teachers underestimate their own abilities as presenters. It may be surprising that someone who makes multiple presentations a day the the really difficult audience of middle or high school school students can be nervous about presenting to teachers it happens. Teachers can be a tough audience and there is an intimidation factor of presenting to people who also present a lot and who know the content. My experience suggests that teachers at CS conferences are very supportive and very excited to learn new things. No, really, you’ll be fine. Share what works for you. So to help others develop I will paraphrase this plea form “Little Shop of Horrors” Teach Me!"
"175","2018-11-02","2023-03-24","https://blog.acthompson.net/2018/11/propose-presentation-for-csta-annual.html","CSTA just announced the Call for Proposals. for the CSTA Annual Conference just days after I blogged (Getting Computer Science Teachers To The Next Level ) that people who help others develop as CS teachers. Coincidence? Actually, yes, but who cares. Now Doug Bergman has a very nice blog post about why you should submit a proposal on the CSTA Blog. It’s all good stuff and all true. You know I have to add my two cents though right? Presenting at a conference like CSTA is a great way to make a contribution to the greater computer science education community. Making a difference is why we teach isn’t it? A conference like CSTA is an opportunity to expand our reach and make a difference beyond the walls of our own school or the boundaries of our own districts. We all have idea and we all try different things. Some of them work. Some of them don’t work. We learn and go forward regardless. There is a saying that anyone can learn from their own mistakes but the really smart people learn from other people’s mistakes. Conferences are a chance for people to learn from the mistakes of others. I have known a lot of amazing teachers who say “but I’m not good enough” or “my ideas are nothing special.” Yes, the imposter syndrome is strong in many of us. If something works in your classroom than you have a success story to share. If A project, a role play, a lesson plan, a tool you have made, adapted, or explored has made a difference in your teaching practice you have something to share. Few of us use nothing but canned scripts. The audience at the CSTA conference is very warm, friendly, and supportive. People are their to learn and share ideas not to be critical of others. Sure you’ll get questions and you will probably get suggestions as well. A good speaker presents to learn as well as to teach. Presenting at CSTA will make you a better teacher. You’ll get as much (if not more) than you give."
"176","2018-11-05","2023-03-24","https://blog.acthompson.net/2018/11/programming-projects-should-be-personal.html","I’m always looking for new projects. I find them in the strangest places. Facebook for one. And some not so strange places. The AP CS Principles curriculum from code.org has lead me to several. Most recently, the unit on data and privacy took my class and me to the Data Privacy Lab at Harvard The site has two sections, one looks at your browser history and the other looks at some of your demographic data to see how identifiable you are. One enters their zip code, birthday, and gender. The system looks at census data. and shows you how identifiable you are from that limited data set. Well that is interest but where is the project you hint at in the title of the post. Ah, good question. Since this is a tool based at Harvard you can also see how unique you would be at Harvard. This suggested to me that looking at data from the school were I teach might be more interesting to my students. I asked my Director of IT (have I bragged about how awesome tech support is at my school lately) and a short time later I had a nice comma separated list of gender, birthday, and zip code for all of the students. No more personally identifiable information than that. A little bit of coding and I had my own data tool. That’s when I decided that I had a possible assignment for my students. I think that students are more interested in projects that are personal to them. Looking at data from Harvard, as fascinating as that could be, is probably not as appealing to a student as data from their own school. They should be able to find themselves in the data. I hope they’ll want to see what they have in common with others in the school. Now I could assign all of my students the same project. That is what I usually do. I’ve been wanting more variety though. I don’t want one student to solve the project and just share it with their neighbors. A little help, a few pointers, that’s ok but not the whole thing. For this exercise I decided to try something new (to me at least) and offer a lot of options. They’re all the same basic logic and require the same basic “tools” but there are enough different to confuse a student who copies without understanding. At least I hope that is the case. So I gave options: How many males is a particular zip code How many females in a particular zip code How many males born is a specific month How many females born in a specific month How many males born is a specific year How many females born in a specific month How many people from a specific zip code were born in a specific month How many people from a specific zip code were born is a specific year How many people were born on a specific day (same exact day, month, and year) What percentage of students are male and female Which zip code has the most people (this is a tougher one for people who like a challenge) None of this is hard (although one of my students insists I am not allowed to say anything is easy) but I just want them to have a little practice problem solving with arrays before we move on to a new topic. I am not allowing students who sit together to do the same exercise. Eventually I want to assign everyone their own unique variation. IF this works out I will start trying to think of similar little exercises that can be just different enough for each student that they have to think on their own. Anyone else do this sort of thing? Does it work for you? Does it just sound crazy? Yeah, grading will be interesting. Any other concerns?"
"177","2018-11-06","2023-03-24","https://blog.acthompson.net/2018/11/teaching-computer-science-teachers-to.html","My teaching style, especially in the first years, was greatly influenced by the man who taught me computer science. A wonderful man who really instilled a love for CS and a lot of knowledge. We didn’t know a lot about teaching CS or programming45 years ago. In fact I think we were really just starting to figure programming out. How to teach it was almost a black art. Most teachers tend to teach the way they learned. It worked for them after all. Today though we know more about how to teach CS. Not enough but at least there is progress. Thus brings us to how to teach the people who will teach computer science in K-12. There are two things future CS teachers need. Content knowledge and knowledge of how to teach CS. Many universities are asking CS faculty to teach the content. My big concern here is that I want teachers to be taught by people who model best teaching practices. Almost every teacher I know has been in a professional development session about how to teach run by a presenter who didn’t model what they were teaching. It’s not going to be enough to have classes that teach how to teach if content providers don’t model that techniques. A lot of universities are going to struggle to find such a person. Oh sure their research professors have great content knowledge but teaching to an auditorium of 300 university students is not the same as a class of 15 to 30 high school students. And grades k-3? Not sure many university faculty are ready to teach CS to little kids or to future kindergarten teachers for that matter. (Note that I love and respect kindergarten teachers. My daughter in law and my cousin both teach kindergarten.) One would like to think that teaching professors, either special role at large institutions, or regular faculty at liberal arts and smaller institutions would be better models. Are they? Surely many are. But many educators don’t adopt research based teaching methods for teaching CS. (Mark Guzdial has written about this several times. For example here) How many university CS faculty know about things like subgoal labeling, and Parsons problems? What we need are CS educators to teach pre-service teachers using the methods that we know can improve teaching. That’s going to be tough for a while. One suggestion that has been made (credit Mike Zamansky) is having current high school teachers teach pre-service teachers. The idea being that they know well how to teach younger students. Not a totally bad idea especially if those teachers have taken advantage of changes in what we know about teaching CS either from their own experience or from additional study or both. Politics at universities may make that troublesome. And if you think school teachers are underpaid look into how adjunct faculty are compensated sometime. Ouch! What is going to happen is that some schools of education will do it right. For some definition of right. Those schools will take preparing CS teachers seriously and make it a priority to get good faculty, using current methods, and probably doing CS ED research themselves. The teachers they graduate will be in high demand and attract more students. Those universities will (one hopes) be emulated by others as the demand for well-prepared CS teachers grows. I can’t wait to see which universities make this a priority and set the standard for the rest. No, really, I can’t wait."
"178","2018-11-09","2023-03-24","https://blog.acthompson.net/2018/11/how-do-we-define-successful-high-school.html","Mark Guzdial has an interesting post asking When do we know that a programming course is not working for non-CS majors? The focus of the post is undergraduate level computer science courses. Can universities create CS courses that work for CS majors and non-CS Majors at the same time. It’s an important question for universities who are faced with more and more CS students and having trouble hiring enough faculty. We face some similar questions in secondary school computer science. In secondary schools we don’t really have majors and we don’t have a way to identify CS majors. So all of our courses have students who may or may not major in computer science when they get to university. We not only have to ask if our courses are working for future CS majors and for students moving into other majors. Do we even know what “working” means in the secondary school environment? Is a first course working if enrollment is up in more advanced courses? If enrollment does not go up does that mean the first course is not working or are their systemic reasons like guidance pushing students to more world language or other sciences? Or perhaps scheduling problems with too many interesting electives and to few open slots in the schedule? Are our courses working or failing based on the number of students who do go on to major in CS? Or is that not a good measure because a lot of people in other majors are likely to need CS. More and more math and science courses make use of programming for example. Generally it is very hard to collect data about our students once they graduate. I need to think on this some more but I am hoping some of you, my readers, have some thoughts on the matter. We probably need some answers as we work to convince more schools to offer CS. Administrators will likely want to know how we know we are teaching the right things the right way."
"179","2018-11-12","2023-03-24","https://blog.acthompson.net/2018/11/guest-hosting-tweetmeet-on-cs-and-hour.html","Computer Science Education week is fast approaching. It's a big week and one of the big activities for a lot of teachers, students, and schools is the Hour of Code. Microsoft Education is running a Twitter chat or Tweet Meet on the topic and I was asked to be one of the guest hosts. It should be very interesting with a lot of international flavor. Quite an interesting line up of international teachers co-hosting across time zones, national borders, and languages. I hope you’ll join us. More information at https://educationblog.microsoft.com/2018/11/tweetmeet-computer-science-msfteduchat/"
"180","2018-11-13","2023-03-24","https://blog.acthompson.net/2018/11/toys-or-tools.html","Are we using toys or tools to teach computers science? The cute little robots for example. Or Micro:bit? or any number of other fun little gadgets that we use to make learning more fun and interesting? Toys or tools? Calling them toys makes them seem frivolous and unimportant. See Merriam-Webster definition of toy which includes “something (such as a preoccupation) that is paltry or trifling” “Tools” implies work or perhaps even not fun. Too serious for some though. The definition of “toy” also includes “something for a child to play with” Ok, “play” seems a little better than “trifling” but still not so serious. Isn’t school serious business? Yet educators know that play is the way children, especially little children learn. And we’ve know this for a long time. “The most effective kind of education is that a child should play amongst lovely things.” ~ Plato I had a related conversation with my programming students the other day. I asked who needed more time to finish a project. A student replied “Everyone but the students who actually write programs for fun.” I do have a couple of those. I tend to see one or two and sometimes three in a course. The students who find the fun in the course are the ones who do the best. They learn the most. They learn the fastest. And they create the most interesting projects. There may not be a coding gene (as Mark Guzdial insists and backs up with research) but some students sure do seem to find coding more fun than others. As a teacher I do try to make it fun for as many as possible. My experience tells me (not research so doesn’t count for much perhaps) that students who enjoy their projects learn more and do better at coding. Calling the tools we use to make things more interesting “toys” or “tools” doesn’t change that they make things more fun and interesting. Words may bias people so we should be careful how we use them. Perhaps we tell the funding people they are tools. And maybe we say the same to parents. Calling them “toys” will lower stress for some students and cause others to take things less seriously. It can be a tough call. Among ourselves (educators) we can call them toys because we understand that toys and play are the tools of learning. For the most part I think we should avoid categorizing them as either tools or toys. There is too much emotional baggage about both of those words. Let’s try to avoid broad characterizations completely and just call them what they are: computers, robots, sensors, or what ever. Remember fun is good even when it looks like work to someone else. FWIW I found that Plato quote at Child’s Play Magazines Quotes about play Lots of great ones to choose from. Some of the web most things on the Internet are blogs. This post is inspired by a post from Doug Peterson (as many are) that quotes and links to another blog. Specifically Doug’s Toys or Tools post that links to Tim King’s ECOO BIT18: Reductionism and Ignorance in Educational Technology post. Both posts are worth a read."
"181","2018-11-14","2023-03-24","https://blog.acthompson.net/2018/11/post-secondary-cybersecurity-curricular.html","There is more computer science than we could ever cover in grades K-12. So much of it is important and exciting. Every parent open house I get suggestions for what we should teach in high school. There is no way we can teach it all. There is no way we can do everything in universities either. One other thing is clear, cyber security is growing in importance. While I try to cover a little of it in my courses (easily fits a few classes in several courses) I can’t cover as much as I’d like. My hope is that universities cover a lot more. I think most do. The ACM and IEEE have just reported out a document to help post-secondary schools design their cybersecurity programs. I haven’t read the whole document yet but I know some of the people involved in writing it and in the process that goes into creating documents like this. so I am confident in recommending it. Do you cover cybersecurity in your curriculum? How much do you have time for? First-Ever Global Curriculum Guidelines Reflect Worldwide Demand for Qualified Professionals and Urgent Industry Needs After an extensive two-year process, a joint task force led by the Association for Computing Machinery (ACM) and the IEEE Computer Society (IEEE-CS) has released a first-ever set of global curricular recommendations in cybersecurity education. This new set of guidelines, Cybersecurity Education Curriculum (CSEC2017), is designed to be the leading resource for comprehensive cybersecurity curricular content at the post-secondary level. More than 320 advisors drawn from 35 different countries contributed to CSEC2017."
"182","2018-11-15","2023-03-24","https://blog.acthompson.net/2018/11/16000-bbc-sound-effects.html","I don’t know about you but I regularly go on the lookout for sound effects for projects. Today, I have to share this new source for sound files that may be used for educational purposes. 16,000 BBC Sound Effects I found this database to be fairly easily searchable. Clips are various lengths and sizes so be aware of that. I imagine you could convert the WAV files to other formats if you really needed to. I’m still experimenting with them. These 16,000 BBC Sound Effects are made available by the BBC in WAV format to download for use under the terms of the RemArc Licence. The Sound Effects are BBC copyright, but they may be used for personal, educational or research purposes, as detailed in the license."
"183","2018-11-16","2023-03-24","https://blog.acthompson.net/2018/11/testing-computer-science-knowledge-is.html","How to evaluate computer science students is always a tough question. It’s everywhere that computer science is taught. There is something of an issue with a course offered in the United Kingdom f or example. Exams ‘useless’ for computer science, say experts Among the experts they quote are two educators. Miles Berry is someone I know and he definitely qualifies as an expert. The software developer the article quotes develops educational software, which is interesting. It seems like articles on software education always seem to include a quote from a software developer. Why? In any case, evaluating CS knowledge is a tricky thing. I prefer projects to tests and quizzes but they have limitations as well. Mostly that it is easy to cheat. Students have time to figure things out, which is great, but that means one has trouble knowing what they know against how good they are at looking things up. Calling this cheating might not be the right word because real programmers share and copy code all the time. And being able to look things up is an important skill. Paper tests are harder to cheat on but limit creativity. And they're no fun. I use the occasional quiz in my classes. It sort of keeps kids honest to a point and lets me get a better handle on where students are struggling with concepts. Having one on one conversations might help some. But that doesn’t scale well. Some students have trouble communicating what they know and some teachers have trouble asking the right questions. So much depends on the teacher student relationship. I wish we didn't have to grade at all. That would require students who learn because they want to know things and not just want to get good grades. As teachers we would still have to understand where students were having a hard time because that would help us to teach better and students to learn better. Most evaluative instruments feel like blunt objects to me."
"184","2018-11-19","2023-03-24","https://blog.acthompson.net/2018/11/the-learner-gets-vote.html","One of the cool things about Twitter is that some interesting discussions take place among really smart people and the rest of us get to watch and, if we’re smart, learn. One such conversation took place over the past weekend with a number of really smart, very well informed (with, you know, actual research behind them) educators talking about CS pedagogy. The discussion was between a number of high powered university professors. As a lowly high school teacher I was hesitant to inject my thoughts. But I seem to be genetically incapable on keeping my thoughts to myself so .. My comment was “A lot of times we forget the student and the environment they live in. The best thought out pedagogy in the world doesn't work if students reject it.” It may be surprising but many students have strong ideas about what they should be learning. Their ideas of what is relevant are often different from that of their teachers. It’s easy for us as educators to say “we know what’s best” but students do get a vote. If students think the tool is too hard, too easy, or just wrong it will be a struggle for them. Sure we as teachers can do a lot to make things go smoother. We can explain why it is good to use that particular tool for example. And we can make sure that projects and exercises are interesting to students and not just to us. What we can’t do is just assume that because we know the pedagogy is right that students will take that for granted and wholly embrace our methods. In fact, we have an obligation to do so. “Because I said so” almost never works as a motivation."
"185","2018-11-22","2023-03-24","https://blog.acthompson.net/2018/11/the-problem-with-cs-education-research.html","There is some research in who t teach computer science (OK, mostly its about teaching programming but that’s important too) but not a lot of teachers or professors are adopting it. One has to wonder why? Eugene Wallingford takes a look at this question on his blog Why Don't More CS Professors Use the Results of CS Education Research? He has so reasonable answer having to do with peer pressure and pressure from students and parents to do things “the way we’ve always done it.” The path of least resistance is tempting of course. And change is hard. But I think there is more to it than that. I mentioned Parsons Problems to a professor at a university and he knew nothing about it. And why would he? For many professors at R1 schools research is a higher priority than teachings. And teaching high level courses has a higher priority than lower level courses. But higher education is not my area so I look closer to home – secondary school teachers. I should start with myself though be fore I look at others. Problem number one for me is lack of understanding. I’ve read some papers on worked examples and Parsons Problems. I think I understand them. Sort of. But the language of research papers is not one I am totally comfortable with. No, that’s not quite right. I read it comfortably but figuring out how to put the conclusions into practice is often still a little opaque to me. These papers are written for other researchers and not for people to implement in their own classrooms. So that is problem one. Then there are the tools that are used in the research. I have played around with a couple of Parsons Problems tools. Eh. Clearly they were developed by people who were developing for a specific audience that is possibly more forgiving or willing to work harder than the average high school student. Lots of them look like the old school (i.e.. before windows) applications adopted for the web. Hardly the thing to grab the attention of a modern HS student. To be honest I tend to worry about using tools developed for research projects. One never knows when the researcher will move on to a new interest. I want to use Parsons Problems but I struggle to find the right tool to use. I want to use worked examples but I need to spend sometime with someone (or some paper) that knows how to help a HS teacher learn best practices. I’m sure there are other things I can and should learn from CS Ed researchers but I don’t know what they are. That brings up the next problem. I spend money out of pocket to be a member of ACM and SIGCSE. That gets me a lot of great papers to read. Money well spent IMHO. But it’s been a while since I have been to the SIGCDE conference (maybe this winter) and that would let me get more out of these papers. I could ask more questions and hear the questions of others. I think a lot of HS CS teachers don’t really even know much about SIGCSE or attend the conference. Yes, there are a bunch of HS CS teachers at SIGCSE. They’re a small subset of the total community though. There are more HS CS teachers at the CSTA Conference but that’s not a venue high on the radar of university CS Ed researchers. There are other conferences more likely to help a professor get tenure or impress possible funding agencies. That is not to suggest that CS Ed researchers don't care about HS CS. They absolutely do. Several have been very generous in their support of CSTA and of spending time helping HS CS teachers. I owe them a debt. Many HS CS educators don’t have the time, energy, or motivation to go digging for new ways to teach. It’s hard to blame them. Their students do well on examples, pass the AP tests, do well in university, and generally seem happy with the statues quo. How are they ever going to learn how to do things better or even decide if there are better ways? In short, yes, some are unwilling to try new things but more would if a) they had a better understanding of the techniques and b) they had tools more suited to younger learners. The biggest factor though is they just don’t know about the research and what it suggests. Someone needs to take that on. Calling NSF, Code.ORG, CSforAll, SIGCSE, and CSTA!"
"186","2018-11-28","2023-03-24","https://blog.acthompson.net/2018/11/ready-fire-aimwhy-is-design-first-so.html","“Hours of coding can save you minutes of planning” We’re talking about top-down design in my APCS Principles class this week. I gave the students a worksheet (part of the code.org curriculum which is really well done) that asks students to pair up and design the functions they would write for a given problem. The first question from a student? “Do we have to do the design before we write the code?” Now you may be asking yourself – what sort of question is that? Of course you design first. That is not how students think some times. They want to jump right in and write code. It’s not that they know how to do it or that they have a design in their minds though. They want to try things and see what works. They are more into trial and error. They have high tolerance for error as long as they are moving forward and the development environment is not giving them error messages. Now not all students are resistant to planning. Over time most students come around to the idea of design first. It can be a tough sale though. Design doesn’t have the same instant gratification that writing and trying a line of code does. Back in the day (yeah, old guy reminiscing) we had long turn around between writing code and seeing results. We handed in our deck of punch cards and waited (hours or even days) to find out what worked and what didn’t. We really could not afford to skip the planning phase. We thought deeply about how things should work. We closely desk checked code before submitting it and after getting early results. Now I am not saying I want to go back to those days. (even though in weak moments I might think it would be good for students.) I do wish it were easier to keep students from writing code first though. I’ve tired having one student write a design and than having another student write code from it. The second student tends to mostly ignore the written design and do it their own way which may or may not look like the design at the end. Often it is easier to blame poor design than a failure toe follow the design. Students do want their programs to work and they don’t want to make peers look bad. What I am trying to do more and more is to model design thinking myself. We create programs as a class and I work though the design before showing code. For example, we are working on a program to give and score quizzes. We worked though a discussion of what a question class would look like. What data would it store, what functions would it need to support, and how would it be used? I can force students to write out designs. And they’ll try. Over the years though what seems to influence students most is what they see me do. If I get lazy they’ll get lazy. If I take shortcuts they’ll take short cuts. If I use good practices though so will they. If I model design, planning for expansion, and show that I am thinking beyond the near term so will they. I keep reminding myself of this. Leading by example is the best tool of all."
"187","2018-12-03","2023-03-24","https://blog.acthompson.net/2018/12/happy-computer-science-education-week.html","It’s CS ED week again. Yeah! This is the week that thousands of teachers around the work introduce millions of students to computer science. Many of them for the first time. Some through the Hour of Code, some though special speakers, some though creative ideas of their own, and on and on. Teachers are by nature creative people which it comes to sharing ideas. It’s an awesome week. Earlier today I joked that there were no Hallmark cards for CS education week. The obvious suggestion, print your own, came very quickly. It’s not a bad idea. It got me thinking though. Wouldn’t it be nice is one aspect of cs ed week was an appreciation of those teachers who work to bring computer science education to students on a regular basis? Last year, CSTA and code.org started the Champions for CS awards. You can read about the 2018 Champions for Computer Science Awards. Those awardees will be presented with their awards at a special 2018 CSEdWeek kickoff event today. That is great. I hope we can safely assume that part of their role is to serve as a sort of proxy to honor other hard working CS educators as well as highlighting exceptional teachers, students, and programs. At least that is how I choose to see it. Personally, I’d like to thank the many CS teachers who have shared ideas with me, taught me, and supported me over the years. There are so many of them and I can never list them all. There have been blog posts, comments on blog posts (mine and others), teacher presenters at conferences and PD days, hallway conversations, and formal training events. So much to learn and so many teachers who are willing to share what they know. We in CS education have a wonderful, caring, and helpful community. Thank you all who are part of it. You’ve made my career and my life richer."
"188","2018-12-05","2023-03-24","https://blog.acthompson.net/2018/12/where-does-computer-science-fitrevisited.html","David Renton is teaching his students at Porter-Gaud how to program virtual reality projects. He posted a video of some of these projects a few days ago. These are pretty cool, Virtual Reality apps created by [David’s] Porter-Gaud High School senior CS students using Unity for SteamVR. They tested them using HP & Lenovo Windows Mixed Reality Headsets. They each created at least 2 3D models themselves using Maya and imported the other models from the Unity Store and/or remix3d.com. They also created at least one sound effect themselves using Audacity. They coded the interactions using C# in Visual Studio. https://youtu.be/xddytj0hVZU One project was highlighted on the Microsoft Education blog with a post by the young lady who created it. How a VR trip through the solar system honed my down-to-earth skills – go read it. I’ll wait. That is a project that involved math, physics, and art into a computer science project. I suspect that the math teacher she approached for help was pretty pleased to get involved. I’ve sent students to math teachers myself over the years. We don’t ask where reading fits in the curriculum after some magic line in elementary schools. We teach students to read in large part so they can use it as a tool to learn more about more subjects than just reading. I’ve long believed that computer science can, and should, become a tool that students learn to help them learn other subjects. Yes, we need students to have a base of CS knowledge first. David’s students have had several years of CS, starting in elementary school, before they get to him. Using that base they can learn more about CS for sure but they can also create projects that interest them and motivate them to learn more, not just about computer science, about a wide range of other subjects. Like reading, we need to teach enough CS that it can be used across the curriculum. It can’t stay a silo subject if we’re really going to see students use it to their potential. Edit: See also the Luminous Science curriculum being developed by Ben Shapiro’s student. Brings together science, art and #computing. Also awesome! https://www.playfulcomputation.group/luminous-science.html Ben is on twitter @bennytheshap"
"189","2018-12-07","2023-03-24","https://blog.acthompson.net/2018/12/teaching-phone-programming-should-be.html","Garth Flint and I have been independently looking at resources for teaching mobile phone application development. (Garth’s posts are linked below) I’m currently teaching a course using AppInventor which is going ok but not as well as I’d like. Most of my students own iPhones which AppInventor doesn’t currently support. Their iOS support is currently under review by Apple but my course is almost over. Even with Android phones I still have some trouble with connectivity. And the emulator is a mess. Some days I can’t get it working at all. So I’m thinking about what to use to teach next year. There are other options. I have been testing Thunkable with some of my students. The good is that it supports both Android and iOS. The bad is that this support doesn’t support many sensors and really that is a huge part of what I want students to do. Without sensors its just another desktop app with a tiny screen. I still need to take a closer look at LiveCode which seems to come up in this discussion so I don’t know much about it yet. Input welcome! I haven’t tried the platform specific (ie professional) tools yet and I am reluctant to do so. The ones designed for iOS or Android only work on those platforms and I’d like to use both. Since most of my students have iOS devices than going Apple might be a way to go except that that requires developing on Macs. We have a Mac lab but its already used a lot. And they are all Macs which comes with its own complications. I am not a fan. That’s a last resort. Microsoft Xamarin with Visual Studio is a cross-platform professional option. I’ve looked very briefly at it in the past. Setting it up is non trivial and I do have to have some connection to Macs for the iOS loading. Networking to a Mac or three might be an easy option. Well, easier than taking over a whole lab. I need more time to work on that option though. I don’t know many teachers using it which is a concern. I really wish Windows Phones had not died out. I have a Windows Phone and writing apps for it with Visual Studio (2015 or earlier only) is a piece of cake. Android App Course thoughts Android App Course with thoughts on Project Based learning and ramblings Android App Course: The continuing saga Android App Course: the saga ends"
"190","2018-12-14","2023-03-24","https://blog.acthompson.net/2018/12/sub-goal-labeling-in-computer-science.html","One of the interesting ideas in teaching computer science I have been looking at is sub-goal labeling. I’m experimenting with it but to be honest I don’t feel near ready to share what I am doing. As a wrote recently (The Problem With CS Education Research ) it can be hard for teachers to take research and adopt it because, well, research papers can be hard to read for some of us. And the world of the university classroom is a little different from that in the high school. Fortunately for me, and for you, Clark Scholten has been trying things out and blogging about it. I highly recommend his posts. CS CS Teaching Strategies - Subgoal Labeled Worked Examples Subgoal Labeling - Revisited Subgoal Labeling (Part 3) and CS Ed Week Web Design Reflections and Subgoal Labeling (Arrays) Anyone have more suggestions of resources for learning how to use sub goal labeling?"
"191","2018-12-31","2023-03-24","https://blog.acthompson.net/2018/12/looking-back-on-cs-education-in-2018.html","The last few years I have written start of the year posts about things I want to track in Computer Science education in the new year. Last year’s post is at Computer Science Education Things I'm Watching in 2018 At the end of the year, like today, I write about how those things tracked over the year. The first thing I wrote about last January was Advanced Placement Computer Science Principles. I was half way through the year teaching it for the first time at that point. Now I’ve been through a whole year and am half way through the second. APCSP grew a lot and continues to grow. Curriculum from Code.org, Beauty and Joy of Computing (BJC) from UC Berkeley, and Mobile Computer Science Principles (Mobile CSP) from MIT continue to be top curriculum in use. It’s a heady time for AP CS. At this point APCS P is pretty settled into many schools and looks to grow even more. The existing “canned” curriculum and related training are key factors. The next big item I was following was K-8 Computer Science Education. This is still an up and coming area. The #CSK8 twitter chat has been my best window into this area and it continues to grow. The first chat of 2019 will be 2 January 2019 at 5pm PT and 8PM eastern US time. I didn’t attend ISTE in 2018 and that is usually my other deep dive into K-8 CS. But K-8 CS continues to grow as the CSTA Annual Conference and local professional development events like the 2018 CSTA New England Regional Conference. State Standards continued to grow as more and more states adopted them. In the last year or so my home state, New Hampshire, adopted new CS teacher certification guidelines, state standards, and passed a law including computer science as part of the definition of an adequate education. Other states moved forward as well. I confess I spent a lot more time looking at NH than other states. It was a good year for computer science education in general. Here’s hoping we continue to see progress in 2019."
"192","2022-08-13","2023-03-24","https://blog.acthompson.net/2022/08/cyber-security-and-cs-education.html","Way back in time, cybersecurity was all about controlling access to the computer in the locked room with the raised floor. Well, you had to trust the people you did let in of course. I will not say much about the students I went t university with who competed to create the best, most realistic login emulator to steal passwords because, you know, that was all in fun. Later in life I actually had supporting the real login software as part of my job responsibility. We were more aware of security by then. It was the real world. We spent a lot of design time on our various OS subsystems to make sure that access was verified and that people could only access what they were authorized to access. Dial in lines and then networks made things a bit more risky. I remember one system that required a second password of 16 random characters that changed every 5 or ten minutes (I forget which). Someone broke in anyway. Social engineering not technical engineering. People were and are still the weak link in computer security. In the early days few people had access to a computer. Fewer still had technical knowledge enough to crack into systems And most of them were (it seems) fairly trust worthy. As more people got access to both computers and knowledge breaking into systems became more common. Today there is a lot of talk about cybersecurity and the need for more people to be trained in the field. What does that mean for high schools? For one thing, it means a lot of people are saying that high schools should teach it. What teaching cybersecurity means is a question with still developing answers. Should schools offer a whole course in it or can they cover enough in an existing course? If a full course, a semester? A year? Some part of a year? You’ll get a lot of answers but little in the way of a consensus. A lot of discussion about this on Facebook group for Cybersecurity Educators. Resources at CYBER.ORG are helpful as well. For now, individual schools are making their own decisions. These decisions are based on things like teacher knowledge to teach such information, room in the schedule, and resources available. Some school IT departments are not willing to let students experiment on networks in a school. Or even, in some cases, to have students learn about network vulnerabilities! I suspect that career technical schools are going to be the main source of high school courses in cybersecurity. There is less focus on AP exams and more focus on preparing students for the work force sooner rather than later. Oh yeah, colleges and universities but they are not my focus. Comprehensive high schools are more likely to add some cyber security information into existing courses. AP CS Principles for example. A few will have longer courses but I suspect most of those will be independent high schools and charters as they have fewer restrictions and their politics is different. (Different does not always mean better or worse to be clear.) Maybe when (if?) we get to a place where the learning of coding is done well enough and deep enough in middle school we can move away from HS courses that “just” teaching programming and start using that programming to learn about other things in computer science. Like cybersecurity. Like data science (although we are seeing some of that in middle school already (Bootstrap:Data Science ) which is pretty exciting. And like more artificial intelligence. Programming is cool (to me) and important (to everyone!) but there is more to computer science than programming. Security is an important part of that and high school CS educators have to have it on their radar and give serious thought to bringing it into their curriculum."
"193","2022-10-25","2023-03-24","https://blog.acthompson.net/2022/10/the-computer-science-professional.html","Mike Zamansky is stirring up trouble again. OK not really his intent I’m sure but people can get defensive. I have to say that I agree in principle with most of his post at Why PD doesn't work for CS Mike lists four different types of PDs. Teachers sharing practices conferences and meetings that teachers choose to attend PD run by content providers, that is, people selling something PD required by schools and districts It’s as good a break down as any though the fourth kind can really include any of the first three. So I will zero in on those for now. Full disclosure: I have given all three of those types of PD in my time. This includes working for a content provider, Microsoft in this case, that was more or less selling something even though the stuff I was presenting to teachers was free. I think that these types of PD can be great things for improving a teacher’s knowledge and skills. None of them are really good for starting from scratch. Teachers sharing practices is a wonderful thing. At least if the audience has a solid base to start. We see a lot of it in social media. Not as much on blogs as I would like but still some valuable stuff is shared on Facebook and even Twitter. I have learned a lot from teachers sharing practices. I hope I have helped some teachers as well. Short bursts of knowledge is not a foundation to start a CS teaching career on though. Conferences are wonderful. The sessions are short, typically 45 minutes to an hour and a half. They are great for sharing and for helping teachers to build on existing knowledge or to lead them in new directions for further exploration. But one should not expect a new to CS teacher to attend a conference (or two) and expect them to be a trained teacher. PD run by content providers are typically longer form. Usually a week, sometimes two. These can be awesome especially if they are given to educators who have prior experience For example, a teacher who has taught simple web page building attending a session of a more advanced toolset for a more advanced course. Or a teacher who is learning a new programming language who can relate it to previous knowledge. These sorts of PD can be a mixed bad of course. Some focus totally on the tool and not much of pedagogy. Others are concept focused as much a tool focused. Regardless, these can be very valuable especially when the content provider is a non-profit with goals beyond selling product. We’re getting to an interesting point in the development of CS for All. We’re rapidly outgrowing the availability of strong technical CS educators. Qualified CS teachers are hard to find. We’re not doing students any favor by putting untrained or antiquatedly trained teachers in the classroom. Colleges and universities have been complaining about having to reteach students who were poorly taught in high school for years. Do we really want to see more of that? I think not. We really need more long term training for CS teachers. We’re starting to see some programs and more universities are developing CS education research programs and working with schools of education. That really needs to ramp up. States have to start requiring more training for CS teachers AND put some money into making it happen."
"194","2018-08-05","2023-03-24","https://blog.acthompson.net/2018/08/computer-science-and-farming.html","One of the things I tell students is that computer science is relevant to a lot of careers that they may not think of at first. An announcement I read last week and a visit to a farm reminded me of that this past week. The article was about a joint effort between Microsoft and the Futures Farmers of America. (Future Farmers of America, Microsoft to develop tech-based agricultural curriculum) The FFA is an amazing group that does a lot to help prepared young people for careers in farming. Modern farming is a lot more than sticking seeds in the ground and waiting for plants to be harvested. Actually it has always been a lot more than that but technology has long had an expanding role in making farming for efficient and productive. As I said, I also visited a farm last week. The owners are friends of mine and they are working other jobs as they build up the farm. Technology is a big part of how they manage things at the farm while not living there full time. Obviously there is we-fi available throughout the a farm. There are remotely accessed cameras and a very nice weather reporting system for starters. As I toured the farm we talked about future efforts. One thing under consideration is RFID tags on each of the trees in their apple orchards. This would allow notes to be easily taken and recorded on the condition of individual trees. Other thoughts include computer (and remotely) controlled irrigation. Being able to pay more and better attention to individual plants or parts of a farm - precision agriculture – is something that computerization makes practical. I’ve been reading about using computers to plan grazing patterns that make for more productive pastures, robots that scan and treat individual plants at high speed, and artificial intelligence analysis of aerial photographs of crops. I think we’re on the verge of a big jump in technology use in farming with a jump in productivity and efficacy in farming. Pretty darn cool!"
"195","2018-08-08","2023-03-24","https://blog.acthompson.net/2018/08/computer-science-education-progress-in.html","Things have been moving right along in New Hampshire. First we developed CS teacher certification (a joint effort with the department of education and a team of computer science educators). Now we have CS included in the legal definition of an adequate education as of earlier this summer. A set of CS standards, based on the CSTA Standards and K12 CS Framework have been adopted officially this week. Implementation plans are in the works. The latest announcement I received follows: On June 18, 2018, NH House Bill 1674 was signed into law. https://legiscan.com/NH/text/HB1674/id/1656822 This bill renames our ""ICT Literacy"" program to ""Digital Literacy,"" and adds Computer Science (CS) as a core K-12 subject area. The NH Department of Education is currently working on the program rules (ED306) that will implement this law, as well as a timeline for developing CS programs. We are looking at a two-year implementation timeline, with a target date in 2020 for districts to have programs in place. There will be additional opportunities for educators and the broader public to provide feedback, with information posted on this group and on the Department website. Additionally, the NH State Board of education today (August 8, 2018), voted unanimously to adopt the NH Computer Science academic standards. Part 1 of these standards, ""Context and Guidance,"" provides additional clarification about the relationship between digital literacy and computer science, how CS relates to STEM and other disciplines, and recommendations for developing or strengthening programs. Part 2 is the grade-band standards. The standards, and additional resources, are available here: https://www.education.nh.gov/instruction/computer-science/ The policy tour slides provide a concise overview of our computer science policy efforts. The Department of Education will continue to support implementation of these policies through federal and state grant programs, partnerships, and guidance and support."
"196","2018-08-18","2023-03-24","https://blog.acthompson.net/2018/08/programming-fundamentals-books.html","Most programming textbooks just are not what I am looking for. They are too long. They are too dull. And they are written for teachers to use not for students to reference. Last winter I decided to write some thing for my students to use. Actually, two books for my students to use. II took some short suggesting papers I had written, used my PowerPoint lecture presentations for some details, and basically wrote what I teach. I teach some Visual Basic programming to freshmen and C# with my Honors Programming classes. That’s why two books. Visual Basic.NET FUNdamentals Visual C# FUNdamentals These are not typical textbooks. They are short, to the point, and, I hope, will not put students to sleep. There are few exercises and no end of chapter questions to assign. They are intended more for students to use as a reference. Students tend not to take good notes so these may fill that need for some. They also want to learn things that are not generally looked on as serious computer science but which make for more interesting programming projects. So there is a section on how to do fun things with timers, images, and other language/library features that I get asked about regularly. They’re probably not for everyone but the drafts worked well with my students last year. Take a look and if you like what you see buy one (or a classroom set). They’re priced low at $9.95. If they suck, send me an email. I’ll try to do better in a second edition. Thus ends my commercial"
"197","2018-08-29","2023-03-24","https://blog.acthompson.net/2018/08/teaching-programming-with-blocks-vs.html","Blocks or text? Which should I use with beginners? On one hand, I read research backed articles like Mark Guzdial’s High school students learning programming do better with block-based languages, and the impact is greatest for female and minority students which strongly suggest I should be using Block based programming languages. Well, at least in the first course. On the other hand, I had programming in block-based programming languages. Sure it should be an easy choice – go with the research. Sometimes I hate data. What happened to when we could all just go with our guts? Seriously, it is hard to argue with peer reviewed data and I am rethinking a lot of things. I currently teach four different courses and each one uses a different programming language. Advanced Placement uses a combination of block-based programming that migrates to text-based JavaScript. That’s ok I think. Most of these students have had previous programming in either or both blocks or text languages. My mobile application programming course does use a block based programming language (currently AppInventor) and it works well there. Most of these students have had very little if any previous programming experience. The pace is slower than my honors or AP courses and students seem to like it. I need better assessment tools to really understand how solid of a foundation they have for future computer science and programming. That is something I am working on. My Honors Programming course uses C#. These are students who, for the most part, are highly motivated, have a good base to build on, and want to be challenged. I think C# is a good language for them. Opinion I admit. Where I am really having to think hard is with our freshmen class. We currently introduce programming with Visual Basic. Should we be using a block language? Maybe. Unlike the other courses I teach I am not the only teacher. I teach two sections out of a total of 11 or 12 sections. Three other teachers also teach sections and the department chair teaches more of them anyone else. So it is not just my call. At least not for everyone. What I am currently thinking about is doing a pilot with my sections. What I need to do first is come up with some sort of way for use to assess the difference (if any) in results. Since I teach the second course for many of these students I could look at who takes more programming and how they do with the next course but that takes a lot of time. And how do I know if the language used influences (and in what direction) if students do or do not take more programming? I guess I have research to do. On the other hand, if there are some of you who have made this sort of change and would like to share what they have learned I’d love to know about it."
"198","2018-09-04","2023-03-24","https://blog.acthompson.net/2018/09/why-teach-binary-in-computer-science.html","Sometime when I was around age 11 or 12 I learned about different number systems. I was fascinated with the concepts involved. I literally spent hours experimenting with them. This stood me well when I started studying computer science. We were using Binary, Octal, and Hexadecimal. Octal and Hex are useful for grouping Binary into groups of three (octal) of 4 (hexadecimal). I worked on computers back when one could, and did, toggle code in Binary using switches on the front of the computer. It was awesome. I’m still fascinated with these systems. I have a Binary clock on my desk and six sided Binary dice in my desk drawer. And of course I try to teach Binary in particular and number systems in general. I’m still surprised that students don’t enter high school knowing this stuff but I guess priorities in education change. In any case, if you do an internet search for “teaching Binary” you will find a lot of resources and discussions about the how to teach. (My own list is at Resources For Teaching Binary Numbers FWIW) What I don’t find a lot, at least not easily, is justification for why we should teach Binary numbers. It’s obvious to us old-timers. It’s in the curriculum and standards for new teachers. That’s good enough for most of us. For students? Well, students want to know why it is important to learn something. I asked teachers on Twitter what they said to justify teaching binary. I got some good answers. There are more reasons as well. Binary explains the limits around the values different data types can hold. That is a key one to me. Now I want to organize my thoughts and figure out how to present things to my students when I next cover Binary and number systems. Letting students know the importance and having context is bound to help students see the value to what I am teaching. So, how do you explain the importance of learning Binary in computer science?"
"199","2020-09-15","2023-03-24","https://blog.acthompson.net/2020/09/why-computer-science-teachers-should.html","Since I retired I have been reading more computer science related books. You may have read my book reviews on Humble Pi, Weapons of Math Destruction, or Computer Science in K-12. More and more I realize that I missed out on a lot of good ideas and information. Each of those books has given me ideas that I wish I had thought of a long time ago. Currently, I am reading Nine Algorithms That Changed the Future: The Ingenious Ideas That Drive Today's Computers. I haven’t gotten very far yet but the book has covered indexing of web pages, PageRank, and public key encryption so far. I’ve started the chapter on error detection. Pattern recognition, data compression, data bases, and more are yet to come. I’m really looking forward to data compression. Teaching AP CS Principles has built up an interest that I didn’t have before. The indexing chapter is one I had read long ago. Many years ago I experimented with indexing. I wrote some code that indexed the Bible for me. The program was more general purpose than that but the Bible seemed like a good challenge. The program used a list of words and a text file of a book as input. It output a markup language file that worked with a product called VAX Document. VAX Document read the markup language, called SDML, and formatted a document including an index. I wish I still had the code so I could adapt it for some other backend processors. Sigh. In any case, the idea of creating and assigning indexing projects has some appeal for me. I can see this being interesting for students especially in the context of understanding search engines and more involved search queries. Other chapters include a lot of information that would be helpful in understanding and explaining various important concepts. And maybe inspire still more programming projects! So I do recommend this book to AP CS Principles teachers. PS: More of my book reviews at http://blog.acthompson.net/search/label/book%20reviews"
"200","2020-07-18","2023-03-24","https://blog.acthompson.net/2020/07/book-review-weapons-of-math-destruction.html","Weapons of Math Destruction has been out for a couple of years now and it is one of those books that a lot of people reference. I finally got around to reading my copy this week. For those of you who are not familiar with it, the book talks about algorithms involving huge amounts of data and how they are used and misused.These WMD are involved in increasing parts of our lives from teacher evaluations, to credit scores, to policing, to getting hired for a job. Companies make assumptions that the algorithms are fair, impartial, and that they get the results they are advertised to provide. Often all of those assumptions are wrong. In some ways I think the point could have been made with one or two chapters but providing a multitude of examples is definitely informative and convincing. The book is more than a little scary but I think that is the point. We should be concerned. Those of us involved in computing, perhaps especially those of us teaching computing, need an eye opening book like this. It can help us do better and perhaps avoid some of the unintended consequences that this book so clearly outlines. I’d love to assign this book as required reading to students. I could probably get away with that at the university level but high school students are both reading adverse and already loaded with a lot of reading. I think what I would do at the high school level would be to place a couple of copies on course reserve and assign specific chapters to individual students to read. I’d have them submit both an oral and a written report of their chapter. Some group discussions would also be a plus. This is a natural for an AP CS Principles course but I think it would fit in elsewhere as well. We need people in computing who can look at technology and think about unintended consequences and, perhaps more importantly, ask what are the impacts on society of what we are thinking about doing? Is it all just about money and the bottom line or are we actually making people’s lives better?"
