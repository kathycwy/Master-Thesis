"Count","PublishDate","VisitDate","Url","Content"
"1","2023-03-18","2023-03-24","https://blog.acthompson.net/2023/03/finding-words-with-all-letters.html","Does anyone else lay in bed in the morning thinking about coding projects or is it just me? I’ve been playing around with a Wordle solver helper for a while now. It helps me find words based on what I know after each guess. One of the things I like to do is see how many possibilities there are based on different hints. Yesterday I had most of the letters but not in the right place. So this morning I was wondering about words that had the same letters but in different orders. Seemed like something I needed to write some code about. A key method is to compare all the letters in one string with the letters in a second string. At least the way I was thinking of handling it. It struck me that that is a great assignment for students. I don’t have any students handy so I asked ChatGPT to write that function. This is the prompt I gave it: Write a C# function that accepts two strings and returns true if all of the letters in the first string are included, in any order, in the second string. Return false if any of the letters in the first string are not included in the second string. That is a lot like what I would assign a student. ChatGPT gave me some very nice code. It wasn’t exactly like what I was writing in my head. It used foreach and ToCharArray which is probably the best and easiest way to do this. I was coding before either of those became common so my mind goes to for and while loops and the string SubString method. This was a good reminder for me. I left the rest of the program, which wasn’t a lot of code, to myself. Once written I had some fun with it. For example, the letters in Alfred also makeups the word flared. The letters in face are also used in café. Some groups of letters do not make up any words of course, This seems like it could be a fun project to give students. It was fun enough for me."
"2","2022-12-19","2023-03-24","https://blog.acthompson.net/2022/12/thoughts-on-optimization-of-code.html","Donald E. Knuth famously said ""Premature optimization is the root of all evil."" The important word there is “premature.” Optimization is not a bad thing. It isn’t always required though. The joke is that a programmer will spend hours coding a solution to a problem that can be solved in minutes manually. Is that a bad thing? It really depends on the circumstances. If one is getting paid by the hour one could easily argue that it is wrong. On the other hand if time is not really the issue and writing the code is fun – why not? There have been times in my career when optimization has been very important. I helped spec a computer for high speed/bandwidth data collection. It was critical that the computer be able to take the data and place it in memory without losing data. We actually analyzed the speed of various machine language instructions for optimization purposes. That’s pretty exceptional of course. I also remember writing a program of my own that took what seemed like a long time to process some data. I thought about trying to optimize it but as often as the program was to run it would not have been a good use of my time. Before I ran it again I got a new computer which made a bigger difference in execution time than I would probably have been able to get though “fixing” the code. Old habits from the days of slower computers stick with me though and I tend to think a lot about code execution. Recently I had ChatGPT write some code for me (Coding with ChatGPT–Armstrong Numbers) I looked at the code very closely since I was trying to come to some conclusions about how good the code was. I noticed that the C# version it gave me was highly dependent on modulus and division which are somewhat time consuming compared to addition and multiplication. The program I write didn’t use any modulus or division but a lot of multiplication and addition. Both used the same number of raising to a power of 3 so it doesn’t play an important role in performance differences. Having some time on my hands, I added some timing code to see if there was a difference. My program turns on to be much faster. Yea me. Of course both execution times are very small fractions of a second. Does it make sense to optimize this code? Probably not in this case. In fact, I would argue that the most understandable code may be a better goal for this project. That is a very subjective goal. Different people might come to honest but different conclusions. Another goal might be scalability – the ease of adapting the program for other Narcissistic numbers. The ChatGPT probably wins there. SO much depends on what we want to optimize: Speed of execution Ease of understanding Ease of enhancement/modification Possible other considerations(?) Getting all three may not always be possible. It’s an interesting question though and one developers do need to ask."
"3","2022-12-17","2023-03-24","https://blog.acthompson.net/2022/12/coding-with-chatgptarmstrong-numbers.html","Trying out ChatGPT seems to be all the rage these days in certain geek circles. I may even be late to the game but I tried a few things over the last couple of days. I started with one of my favorite little projects. Armstrong numbers are a form of narcissistic number which is a number that is the sum of its own digits each raised to the power of the number of digits. I first wrote a program to calculated these as an undergraduate when I wrote programs for it in about a half dozen different languages. I fed in the following prompt using C#, Visual Basic, and Python as the programming language. Write a [programming language] program to calculate three digit numbers were the sum of the cube of each digit equals the original number. The results for C# and VB were the same algorithm written in the specific syntax. The Python code was slightly different. You’ll probably not be surprised that the code ChatGPT showed me is very similar, if not identical, to code examples you can find with Google or Bing. The C#/VB plan depends highly on integer division and the modulus operator to break down the number into its digits. for (int I = 100; I < 1000; I++) { int sum = 0; int temp = I; while (temp > 0) { int digit = temp % 10; sum += digit * digit * digit; temp /= 10; } if (sum == I) { Console.WriteLine(I); } } The Python sample changes the integer into a string and used that to address the individual digits. for num in range(100, 1000): # Convert the number to a string so we can access each digit num_str = str(num) # Initialize a sum to store the sum of the cubes of the digits sum_of_cubes = 0 # Iterate through each digit in the number for digit in num_str: # Convert the digit back to an integer and add the cube of it to the sum sum_of_cubes += int(digit) ** 3 # If the sum of the cubes is equal to the original number, print it if sum_of_cubes == num: print(num) Note that the Python example nicely includes comments. A dead giveaway that a student didn’t write it. All samples come with simple explanations of how the code works. The explanations tend not to be very deep so oral questioning of a student would probably still show if the student understood the code or not. It looks like, for some simple, student exercises can be solved by ChatGPT. It is not much different from doing any other online search for the most part. How worried should teachers be about ChatGPT especially? I’m not sure. Cheating goes on all the time and there is a lot of sample code already out there for many common assignments. It’s going to be a bigger problem for educators who have very large numbers of students who can’t be familiar with the code their students write. Or who can’t ask them questions to make sure they understand what they turn in. I think I would ask ChatGPT to solve some of my assignments before I assign them just so I know what sort of answers I might see. Side note: Neither of the ways ChatGPT suggested is the way I solve this program. There are more than one ways to skin this cat."
"4","2023-01-23","2023-03-24","https://blog.acthompson.net/2023/01/what-jobs-are-safe-from-automation.html","“It's tough to make predictions, especially about the future.” – Yogi Berra That doesn't mean people don't try. Recent advances in Artificial Intelligence have a lot of people predicting what jobs are an are not likely to be replaced by computers. Technology is challenging the ideas about what jobs can and cannot be replaced by technology. Doug Peterson, who shares a lot of interesting articles, recently share this one predicting that leaders will not be replace. It's an optimistic article. 5 Reasons Leaders Shouldn't Worry That Generative A.I. Will Take Their Jobs | Inc.com A lot of jobs we once thought were completely safe are being seen in a new way lately. AIs are creating what looks to many like art for example. This is forcing us to take a hard look at how we define art. Some recent visits to museums had me already asking “what is art?” Today we joke about AI attempts to write short stories, poetry, and other narratives. A lot of our stories in movies an even books are formulaic. How long before AIs can write Hallmark Christmas movies I wonder? What used to be a joke may be a prediction of the future. A lot of people are speculating on the future end of the programmer profession. People have been predicting that would decades but we are closer to that than ever before. Software developers today think they are safe though because they (we) know that end users are terrible about describing what they want a program to do. Will the future bring courses and training on how to talk to AIs? Possibly. I can sure see the need for it. People who are not teachers are suggesting that AIs will take over for human teachers. As someone who spent 15 years teaching I am not so sure about that. I think the human touch will remain important for the future. Teaching is a lot about reading people and establishing relationships. Wil AI be able to do that? I am not sure anyone knows. One area I think people have an advantage over AI is that we are bad with risk analysis. What may seem like a flaw leads people with some luck, some imagination, and some hard work to beat the odds. We see potential needs when a pure look at the data would not see anything. And we are often willing to defy the odds for things we believe in. I am not sure AI will get there. Thinking about the possibilities of AI and what it means for the future of work is a critical topic. It’s something we need everyone, but especially students, to be thinking about."
"5","2023-02-14","2023-03-24","https://blog.acthompson.net/2023/02/people-are-bad-at-giving-instructions.html","One of the things that make me sure that programming will be around for awhile even with better and better artificial intelligences is that people are bad at giving instructions. Well, that may be unfair. They are reasonably good at giving instruction to other people but that is not the same as being good at giving instruction to the literal minded. The most famous instruction, I first heard it from Grace Hopper almost 50 years ago is the instruction for using shampoo “Lather, Rince, Repeat.” There is a lot left out there. Most obviously, repeat how many times? It also doesn’t say if one should wet their hair first. In computer terms, an infinite loop without setting initial conditions. I recently bought a new cover for a light switch. The first instruction was to turn off the circuit breaker for the switch. Good advice. On the other hand, the instructions did not say to reset the circuit breaker when finished installing the cover. A literal minded installer would never have a working switch. Of course, people figure these things out. We are aware of the larger context and are good at filling in missing pieces. Computers are not that good at any of this. Part of what we teaching when teaching programming is how to give instructions. Not just how to translate those instructions into code but to fully understand and describe the steps needed to complete at task. I believe these are necessary skills. I think they will translate to other fields. Not that I have proof but it seems logical. In any case, we’re going to have to get good at giving instructions if we are going to tell AIs what code to write."
"6","2023-01-27","2023-03-24","https://blog.acthompson.net/2023/01/rhode-island-computer-museum.html","I spent some time looking at the Rhode Island Computer Museum web page today. A lot of interesting stuff. Some great information under the Education and Activities page. If you teach the history of computers this is a great resource with text and pictures. The Collections gallery has a huge collection of images and descriptions of items they have as well. Check it out at Home (ricomputermuseum.org)"
"7","2021-08-02","2023-03-24","https://blog.acthompson.net/2021/08/iot-python-and-raspberry-pioh-my.html","Trying learn too many things can be a risky proposition. But sometimes it feels like the way to go. Regular readers of this blog know that I have been trying to learn Python and that I have been experimenting with the Internet of Things with Phidget devices. Mixing the two is a pretty obvious step but since I really want to set up some autonomous systems without tying down my laptop, it seems like the Raspberry Pis I have accumulated would be the way to go. So mixing a new programming language (Python), with a new development domain (IoT) with a new operating system (the Raspberry Pi OS is built on Linux) seemed like something I should give a try. Fortunately for me, the Raspberry Pi OS installation comes with the Thonny, Python IDE for beginners and the Phidgets software has downloads and installation instructions for the Pi and Thonny. I had a little trouble getting the Phidgets library to install at first but the Thonny IDE had the ability to get the library and install it for me which was a big help. Thonny feels like a very nice IDE for beginners BTW. I am surprised I hadn’t already known about it. It installs in Windows, Mac OS, and Linux. And it is free which is also nice. Visual Studio Code also installs on Raspberry Pi so if you are using that on other platforms it could be an easy move on the Pi. My experiment involved using the Phidget Plant Kit because water and electronics go so well together. Seriously though I like the idea of having a computer controlled watering system for plants. That’s something I have wanted to do for a while. Plus it is something that lends itself to cross curricula work in schools. Initially I plugged in a monitor, mouse, and keyboard. Not a bad desktop if a little slower than I am used to but fine for what I am needing. Next step was connecting over the network with VNC (Virtual Network Computing). This is the step I need for setting the Pi up without tying up my monitor, keyboard, and mouse. Well, I have some more experimenting to do. More posts when I have some projects fully completed. I’d love to hear what other people are doing with Raspberry Pi and IoT as well as where you like to go for connectable hardware."
"8","2022-07-28","2023-03-24","https://blog.acthompson.net/2022/07/jacdac-and-microbit-20first-look.html","Learning about Jacdac devices was my incentive to buy a Micro:Bit 2.0 The Micro:Bit 2.0 has a number of upgrades and new features from the original. These include a microphone and a speaker among others. That is probably justification enough to get an upgrade but being curious about the Jacdac devices, which requires the newer model, was the deciding factor. I am really enjoying spending time with external devices and the Jacdac devices are really easy to use. I purchased the Micro:Bit from AdaFruit (micro:bit v2 Go Bundle - Batteries and USB Cable Included) Actually I bought two because, well, why not? I bought the Kittenbot Jacdac Kit for micro:bit V2 from KittenBot My hope is that more manufacturers and suppliers will be offering Jacdac over time. The kit comes with: Jacdac Adapter – connects with Micro:Bit Slider Rotary Button RGB Ring 2 Keycap buttons Magnetic Sensor Light Sensor Hub – for connecting even more devices 5 cables of different lengths Each part is labeled and has a QR code that will take you to documentation for that device. I took full advantage of that. One thing I learned the hard way but would have learned if I read the documentation is that the adapter has a switch that determines if the Micro:Bit powers the Jacdac devices or if the Jacdac (and some external power supply TBD) powers the Micro:Bit. Things worked much better with the switch in the right direction. Once I got everything out and read some documentation I had to try something out. I started with the RGB Ring and the Rotary Button. I started with individual example programs and then created my own. I had the rotor determine which LEDs were lit. Going backwards (negative numbers) had some issues of course. I might leave solving that to students if I were doing this in class. I recommend starting at MakeCode Integration before you get to far on your own. It will step you though adding the Jacdac extensions to MakeCode, connecting to your Micro:Bit, and other helpful information. BTW, from MakeCode you can program using blocks (very easy) as well as either JavaScript or Python. You can move back and forth between languages as well. A lot of potential for learners there. Next up I will be trying to think of some larger projects as well as experimenting with other sensors and gadgets. I may even cut some boxes with my laser engraver for some projects. Making boxes with 3D printers is also an obvious thing to do."
"9","2022-10-07","2023-03-24","https://blog.acthompson.net/2022/10/microbit-programming-for-grades-k-to-3.html","The Micro:Bit is a pretty cool piece of hardware being used in a lot of schools. It’s mostly used in middle school and above but that may be changing. New from Microsoft is Microcode beta. Programming is via a MicroCode web editor at aka.ms/m9. Microcode documentation is at Microsoft MicroCode for micro:bit (beta) Take a look at the intro video below.People who have used Kodu Game Lab will see some simularity in MicroCode. Although the graphics are very different, the programming modularity is similar. With both, programming is drag and drop using cute little kid friendly icons. Besides the Micro:Bit itself, Micro:Code supports Jacdac devices which opens a lot of new prossibilities. I wrote about JacDac back in July - Jacdac and Micro:Bit 2.0–First Look. I haven’t tried this with my 8 year old grandson yet but I hope to soon. I think he’ll like it."
"10","2022-11-12","2023-03-24","https://blog.acthompson.net/2022/11/csta-new-england-regional-conference.html","This year’s CSTA New England regional conference is at the University of Massachusetts (Amherst) school of Education. It’s a great venue. There are around 150 people here. I can remember when CSTA national conferences were smaller than that. It just shows the growth in CSTA and the growing strength of CSTA chapters over the last several years. I am running into a number of people I know and meeting some new people as well. That is what makes in-person conferences so extra special. The energy level is high here with teachers from all over New England and New York. The opening keynote was by Dr. Cheryl Swanier who talked about “Changing the Face of Technology for Social Good.” Tech has a woman problem – we don’t have enough of them. As part of her talk, Dr. Swanier showed this video Girls in Tech for Web Summit - Ruthe Farmer – YouTube We’ve been taking about this problem for a while but we really need to take our actions up a notch. The case is pretty clear. Dr. Swanier also talked about explicitly teach problem solving. Much as we’d like to think that teaching programming does that, the truth is that it has to be taught explicitly. My first regular session was “Teaching with Minecraft: Education Edition.” You’d think I would know all about this but honestly I have trouble grokking it. My grandson has seen it and thinks its cool so I figured I should learn more about it. Minecraft Education requires a license. That may limit what I can do initially. However, it looks like there are a lot of resources for teachers including lesson plans, the ability to share worlds, create NPCs (non player characters), and portfolios. There are Code Builder options for blocks, Python, or JavaScript with MakeCode.There is a demo that can be used with “An Hour of Code” and I will play with that. I was pretty impressed with what I saw today. There were 10 or 12 exhibits at the event. One that really interested me was the Kibo robot from Robot Kits For Kids | KIBO | Kinder Lab Robotics. These robots are programmed with blocks. Not virtual blocks! Physical blocks that cane be connected together. Once the program blocks are together the bar codes on the blocks are scanned into the robot which will execute the program This looks pretty interesting. After lunch, we had a panel of CS/STEM leaders from the New England departments of Education reporting on what progress the states have made in the last few years. The tl;dr of it is that there are been a lot of progress. But the efforts could really use more money. States have created certification programs, made progress in getting states to require schools to offer CS courses. We’ve still got a long way to go. We could use more money for teacher PD. We could require CS courses for graduation. Although in several states CS courses can count for graduation credits in various ways. Next up for me, Kathy Kleiman, Founder of the ENIAC Programmers Project, who told the story of the women behind the ENIAC. A story I have heard before but Dr. Kleinman tells it really well. I loved that she talked about the history of these women after the war. A lot of information at ENIAC PROGRAMMERS PROJECT Next up for me, Gencyber Teacher Academy @ the Univ of New Haven: Incorporating Cybersecurity Concepts into 9th-12th High School STEM Curriculum. This program includes a week long summer ""camp"" and follow up virtual sessions. Last year the program just included 25 teachers from Connecticut but applicants from other states are welcome to apply for next summer. Anyway, it comes with a stipend and some good free stuff. And a lot of good learning, Last regular session of the day for me, Bring Computation to Life with the micro:bit. I love the Micro:Bit and always like to learn about how teachers are using them in their classrooms. I linked to the presentation above and on slide 7 you can find the mini project that opened the session with links to the code used. It uses the ability of the Micro:Bit to send and receive messages. You will find a lot of useful links on that slide deck including in the speaker notes. The closing plenary involved a lot of recognition of CS teacher award winners. and door prizes! Next year the conference will be on October 20, 2023 at the University of Connecticut Storrs. Should be a good one."
"11","2022-12-31","2023-03-24","https://blog.acthompson.net/2022/12/looking-back-and-looking-forward-in-cs.html","Traditionally I write a year end look back on thee previous yest in CS education. (Last year at Looking Back on Computer Science Education in 2021) Honestly, that post would largely work for 2022 as well. I attended SIGCSE, CSTA, and the New England Regional CSTA conference. They were all great. There was good learning at all of them. But new stuff? Not a whole lot. A few new tools. Some new robots. Some new AI and cyber security curriculum. But really not a whole lot. I think we’re in for some disruption in 2023 though. Tools like ChatGPT and GitHub CoPilot are probably only the first of tools that are going to shake things up in teaching programming. Are we even going to still teach programming in computer science? If not, what will computer science courses look like? If we are still teaching programming how will we do it? What will it be all about? We’re still going to see a need for teaching about cybersecurity for sure. Artificial Intelligence is also going to be more important. We’re seriously going to have to think about how we teach about it. We have to include not just how it works but how it should be used. Ethics in computer science has never been more important. The discussion about ChatGPT and what it means for education in general and CS education in particular is going to be ongoing. We have to reink how and what we teach. It’s going to be an interesting year. Have you been thinking about it? What are your thoughts so far? Note: I highly recommend Mike Zamansky's blog post at Kicking off 2023"
"12","2021-12-31","2023-03-24","https://blog.acthompson.net/2021/12/looking-back-on-computer-science.html","I’ve never felt less prepared to write a look back on CS education than I do today. I’ve been retired from most of the year and the world has been changed a bit because of COVID. I have noticed some things have clearly happened. One is the increase in online development tools which I talked about a year ago. The other is an apparent growth in cyber security education. I’ve also noticed some increase in virtual reality programming courses as well. How that will go is anyone’s guess. There are two barriers. One is that VR hardware is still expensive. It’s not just devices like the Oculus but also computers capable enough to support VR and its development. A lack of training is also a barrier. Most teachers seem to be learning on their own with help from documentation and videos from companies. That and some support through social media from other teachers. The Unity Teach Community has well over 2,000 members and is very active. I highly recommend it if you are looking to get involved in teaching VR. Online teaching and programming tools have really taken off. The code.org courses support this sort of thing but they are far from the only option. CodeHS for example shows up a lot in social media discussions. As does Coding Rooms. And repl.it. I should probably collect a list of them for a future post. Perhaps you could add your favorites as comments and help me out? Cyber security has also seen a lot of growth. Cyber.org has a lot of materials and provide cyber security professional development. Social media support for teachers coming from teachers has also been growing. I recommend the Cybersecurity Educators Facebook group. Over 1,000 members and active and growing. This field is going to boom as security gets more attention all the time. Every year I expect the Internet of Things to take off but it never really does. The pandemic has made doing any sort of physical computing more difficult. But I keep hoping. Machine learning and artificial intelligence didn’t seem to pick up a great deal but it is growing. AI 4 K12 has a lot of useful resources from teachers and I recommend checking them out. Most of what I see in K-12 AI is units in existing courses and not specific full courses. That’s probably best at the K-12 level. The math and coding involved in creating AI from scratch is intense. Learning how to use existing tools is both useful and age appropriate. So progress has been made and that’s a good thing. 2022 should be interesting. Hopefully, in a good way."
"13","2023-03-14","2023-03-24","https://blog.acthompson.net/2023/03/book-recommendations-for-cs-people.html","tl;dr Book recommendations: Overnight Code: The Life of Raye Montague, the Woman Who Revolutionized Naval Engineering Code Girls: The Untold Story of the American Women Code Breakers of World War II Overnight Code was recommended to me after I recommended Code Girls on Facebook. Overnight Code is a truly inspiring story of a woman with two strikes against her (female and Black) whose hard work, determination, and talents helped her do some revolutionary work in naval engineering and integrating hardware/software systems. Debugging code is arguably a lot harder than writing new code. Raye Montague was amazing at debugging code and integrating disparate systems. But also a good person who helped mentor and advance others. She was given tasks that others had said were impossible to complete. Talent and hard work (Raye had a lot of both) allowed her to accomplish beyond expectations. There is a lot of good career and life advice woven into this story as well. Advice for everyone. I could have benefited from this book early in my career. ""Code Girls: The Untold Story of the American Women Code Breakers of World War II"" was recommended by several people in a Facebook group dealing with a Kindle Challenge that Amazon is running. The idea about code breaking sparked my interest right away. This book was more than just that though. There were plenty of insights into code breaking but the look into the lives of these amazing women was the highlight. It was a different time and women would not as respected as they should have been. Yet, these women put their considerable talents into working for the war effort and their country. Code breaking is a fascinating subject in itself of course. I enjoyed reading about the “bombe” machines, how they were created and used. I also found the difference that code breaking made in the conduct of the war (World War II) to be interesting. This is not the sort of thing many history courses cover. It’s easy to label these books as books for Women’s History Month or the Raye Montague book as being for Black History Month but that would be a mistake. These are books for all year long. I recommend them to anyone interested in the progression of computing in society. Code Girls is a great read for cybersecurity or cryptography students. Overnight Code is a powerful read for anyone not just computer science people. It is just that inspiring."
"14","2022-12-02","2023-03-24","https://blog.acthompson.net/2022/12/adventures-in-taking-code-from-internet.html","Facebook memories remined me that ten years ago I was thinking about writing a program that would ring bells (nautical time) on the hour and half hour. I didn't write it back then. Probably because I was busy with my day job. It got me thinking about writing one now just for the fun of it. Now I have written a fancy clock program before. It looks something like this. That was written in Visual Basic and I really wanted to use C#. Besides that, that program is a bit busy for something as simple as I wanted to write. The Timer and DateTime classes in the .NET Framework make writing a simple clock application very easy. I thought I would take a look on the internet to see what code samples I could find. There are plenty of them. I found several interesting looking samples that also drew analog clock faces. The first one I found (C# Analog Clock Program (thecrazyprogrammer.com)) looked simple enough so I created a project and copied the code into it. It was broken. Looking back at the comments on the original post I found a number of comments saying the codebase broken. None of them had answers. That seems to be pretty common. No doubt that things worked fine for the original coder but something was lost in the posting. I suspect that most people who come across this sort of thing are beginners which would explain the questions. Having a bit more experience I quickly fixed the errors I had and got the program to work. It didn’t look quite like I wanted but again, having enough knowledge to understand the code without a lot of comments, I made some adjustments and got it looking the way I waned. I suspect that many beginners would either life with it or try a whole lot of things until they stumbled on the right combination. Or maybe broke the program beyond fixing. That highlights one of the big issues with beginners taking code from the internet. Without some real knowledge even minor issues will keep success away from the student. I found a second project that was put on the internet some years after the first one I found. Interestingly enough, it appeared to be a refactoring and modest improvement over the first one I found. The code was nearly identical. No credit was given to a previous coder. In fact it was so close that I copied a snippet and pasted into the earlier project. With a tiny edit (a name change) it worked perfictly. This is what I wound up with. The Code Project web site has a variety of analog clock code samples. I took at look at one - Analog clock control in C# – CodeProject that was pretty good. and worked more or less right off the bat. Except that is was written in a much older version of Visual Studio than I was using. (2003 compared to 2022). An upgrade was required with Visual Studio handled pretty well. That is not always the case if coders used depreciated or removed features or changed names. Yet another issue with taking code from the internet. Well, now I have a couple of code samples to play with. Most of all I am more convinced that actually getting code from the internet to work can be more complicated than many would think it is. Now to think about ringing bells. Which reminds me of one last story, Back when I was in college during the mini-computer era we had a lab full of ASR-33s. They had actual bells that were hit with a little hammer. One student wrote a program that ran in the background of the computer and ""grabbed"" control of each terminal as it became available. Then it would start ringing all the bells at once. It so happens that when it ran the only one in the lab was the computer department secretary. The department chair held a meeting with all the TAs and it never happened again."
"15","2022-09-20","2023-03-24","https://blog.acthompson.net/2022/09/coding-it-yourself-can-be-fun.html","Every couple of weeks I bake a couple of loaves of bread. The bread mostly gets used for breakfast sandwiches. Now my bread does not look as perfect as what I could get in a bakery. And the bagels? Once in a while I try my hand at bagels, don’t look anything close to what I get at my favorite bagel place. But they all taste good and I find it very satisfying to make it myself. Coding can be a bit the same. Not everyone writes professional looking (or performing) code but sometimes there is some satisfaction in having a program that works just they way you want it to and does just what you need. Maybe it is not “release to the public” neat and tidy. It may be what we used to call a “programmers program.” In other words, a program that only the programmer who write it could (or would) use. My Wordle solver helper program is one such. It works great – for me. It doesn’t have the error checking a released program should have. And maybe it should start at one and not zero. But it works great for me. Programming is basically stating a process or method using computer code. My Wordle solver represents my thinking of how I think Wordle could be solved. It was fun to write and is fun to use. It’s not ready for prime time though. Does that make it a bad program? No more than my imperfect bread or bagels are bad. They both meet my needs and that, for me, for these, is all that matters. In some ways, that is the message we may want to pass on to students. Many, perhaps most, of our students will not become professional software developers. They may still write code for their own tasks or interests though. We need to help them enjoy that experience. One way to do this is to assign projects that are interesting to the student. Open ended projects are good for this but even better is letting students select their own projects. For semester ending projects, I used to allow students to select from a list of suggested projects and also to have the option to design their own projects (after discussion with the teacher) that solved a problem that they were interested in solving. Helping students find the fun and satisfaction in solving an assignment promotes their learning. And, I hope, helps them think of computer science as worth doing for themselves."
"16","2022-09-22","2023-03-24","https://blog.acthompson.net/2022/09/dealing-with-student-misconceptions.html","I was reading through The Big Book of Computing Pedagogy, as one does, the other night. Specifically, the section on student misconceptions. Misconceptions are one of my favorite topics in teaching computer science. The articles in this book are very helpful in understanding what student misbelieve and why they do so. I’ve seen students with all of the common misconceptions and, of course, I try my best to help them overcome them before they get students into trouble.I tried to remember if I experienced any of them myself but memory of 50 years ago is very selective. What I do remember is that I had some experiences of getting very close to the hardware early on. While my first course was learning FORTRAN the computer we used required some extra (compared to today) to run. Specifically, it requires that one toggle in some instruction in binary using toggle switches to get it to read in a couple of punch cards that did the next phase of the boot up. Not long after I learned the first two of what would be 7 or 8 assembly languages over my career. There is something about toggling a memory address so that one could read (in binary lights) or enter information in binary with those same switches to program a computer that give one a good understanding of what memory actually is.t Those days are long gone of course and while assembly language still gets one close to the computer and gives an understanding of how things like memory work it can also be a gate or barrier to students. It’s actually not the ideal way to understand concepts that one might think. It’s not the sort of visual experience that today’s students are used to learning from. What we really need is some better visualization tools for introducing concepts. My first thought was using debugging tools such as those built into tools like Visual Studio. One can single step though instructions and view the contents of memory (variable) locations. It works but it is slow and tedious. That may be fine for debugging but for learning it has a high cognitive load that gets in the way of what we’re trying to do in teaching. So I have been thinking about how to create visualizations that are simple to use and that might help clear up misconceptions. Two things my thinking is focusing on are how variables and memory work and how loops and loop control variables work. Eventually I have to narrow it down to one of them to start. I should probably look at what might already be available first. I thought I would start by asking you, my readers, for suggestions. So, any ideas? How do you help students visualize these concepts? Any suggestions on tools for creating visualizations?"
"17","2022-09-28","2023-03-24","https://blog.acthompson.net/2022/09/how-far-we-have-come-with-programming.html","Last night I had a dream during which someone suggested that COBOL would make a good first programming language. They tried to promote the data division and English language syntax as plusses. When I shared this on social media it got a lot of laughs. Few would take this as a serious idea and with good reason. We used to joke that the hardest part of programming in COBOL was learning how to spell environment. (You had to be there) But really that data division was a bear to get right. The cognitive load was a lot for beginners. Today they are some who think that static variable declarations are enough cognitive load to hold students back and COBOL was a lot of effort. COBOL is still around and I understand that it has changed somewhat. I thought that “Structured Programming in COBOL” (there was such a book) was a stretch but object oriented COBOL just boggles my mind. Most of the people in my age group in the industry have some experience with COBOL. For more than a few it was the first or second or, as in my case, third programming language. Learning multiple programming languages was a big thing early in my career. FORTRAN, COBOL, BASIC, and C (before C++) were all a part of many people’s tool box. I worked on one project that had code in all four of those languages plus PASCAL. Today we have a lot of new languages. C++. C#, Java, JavaScript, Rust, and I could go on and on. Today’s languages have more and more powerful decision structures, looping structures and libraries that do things for us that we used to have to program ourselves. We have improved error handling, the ability to use classes and objects, and many other cool features. That doesn’t even touch on powerful IDEs and the ability to compile and get results in seconds rather than hours and days. With power often comes complexity. Complexity means cognitive load and potential for confusion and errors. We walk a fine line determining what to teach and how to prevent students from getting overloaded. It’s an exciting time to be teaching for sure."
"18","2023-02-23","2023-03-24","https://blog.acthompson.net/2023/02/does-it-run-in-ide.html","I was reading a tweet from a person saying they lost points a program written with pen and paper because the teacher thought the code would not run. When the student asked the teacher to write the code on the computer it ran. The Twitter discussion was on the wrongness of code assignments on paper but I am not sure that paper coding assignments are necessarily wrong. I suspect that the problem in the Twitter user's case may have been a teacher who is experienced. I could be wrong of course. The real problem is a teacher putting too much faith in their own mental execution of the code on the paper. I have found it a good practice to enter code I was the least unsure of into an IDE and run it on the computer. I’d almost always check code I thought did not work. Students can be very clever and write code that doesn’t look like it will work but does work. Or code that does look like it works but doesn’t. This all points to problems with testing computer programming in general. Writing code for evaluations is problematic in a number of ways. Yes, I know the AP exams do it that way. I’ve only graded the AP A exam once but I can tell you it’s not that easy. Handwriting can be hard to read for starters. I’ve already mentioned how clever students can be. I loved the 10 line code answer for a guestion that was looking for a one line return statement. I could have saved myself a lot of time if I could have verified it by running it. Asking students to write code in an IDE offers logistical issues for starters. There is also the issue of students being able to look at each other’s screens and sharing files. Some object to students using autocorrect, error checking, and help files. All the sorts of things professional developers use. Some teaches do prefer code turned in electronically because it allows for auto graders. I’ve discussed them here several times. Basically, mixed feelings. Evaluating student knowledge is one of the more difficult tasks programming teachers. It’s a problem with no easy answers. For now, I think, the best policy is to use a variety of assessments."
"19","2015-02-12","2023-03-24","https://blog.acthompson.net/2015/02/creating-code-hunt-puzzles.html","As I mentioned the other day (see Learning From the Code Hunt Dashboard) I have been creating my own Code Hunt puzzles for use with my students. Earlier this week I spent some time at Microsoft Research in a workshop about Code Hunt. Among the things I learned was a few more things about creating puzzles. Specifically I learned more about how test cases are generated and how I can tune what test cases are created for my students to see. This can make puzzles harder or easier for students which is a good thing. Sometimes I want the test cases to point a little more clearly to a solution. I don’t want students too frustrated but at the same time I want some challenge to the puzzle. I learned a lot from the Code Hunt designer documentation which is available online here but I wanted to highlight a few things that others may find useful. Let’s start with something simple. I created a puzzle where the correct solution is to convert a number from Celsius to Fahrenheit. Initially I created something that looked like this:    1: #level Cold    2: #code C#    3: using System;    4: public class Program {    5:     public static double Puzzle(double x) {    6:         return 0.0;    7:     }    8: }    9:    10: #secret C#   11: using System;   12: using Microsoft.Pex.Framework;   13: public class Program {   14:     public static double Puzzle(double x) {   15:          return (9.0/5.0) * x + 32.0;   16:     }   17: } the problem for me is that the test data looks something like this: While the 0 to 32 is helpful I wanted a bit more of a hit. So I added a simple if with no action that forces 100 to 212 to run as test data. This makes the secret code more like this:    1: #secret C#    2: using System;    3: using Microsoft.Pex.Framework;    4: public class Program {    5:     public static double Puzzle(double x) {    6:         if (x == 100);    7:          return (9.0/5.0) * x + 32.0;    8:     } The other issues I have had are with string based puzzles. While for some puzzles I want students to deal with the null case for some the early puzzles I want to remove that complexity. And in fact I may want to have a minimum number of characters in the string. For that there are some PexAssume methods we can use. I particularly like IsNotNullOrEmpty for avoiding having the null or empty string case. Though I could also use PexAssume.IsNotNull(s); to leave in the empty string case while removing the null string case. I can also use PexAssume.IsTrue to require that strings be at least a specific length.    1: PexAssume.IsNotNullOrEmpty(s);    2: PexAssume.IsTrue(s.Length >= 3); To the computer a string is a string is a string and it doesn’t really care what characters is in it. So you can see strings like “/0/0/0” which can be a bit confusing and intimidating to beginners. IT turns out that you can do some work in your secret code before you feed a value to a PexAssume.IsTrue method. That means that code like the following will make sure that the test data includes only the characters “a” though “z” are included in the test data.    1: Boolean b = true;    2: for (int i = 0; i < s.Length;i++)    3:     if (char.Parse(s.Substring(i, 1)) < 'a' || char.Parse(s.Substring(i, 1)) > 'z') b = false;    4: PexAssume.IsTrue(b); I see a lot more potential in that sort of thing for the future. I’ve been using PexAssume.IsNotNullOrEmpty for arrays as test data as well. I’ve got a zone that I have been using this semester but I am gradually adding puzzles as I learn more about Code Hunt. I’m willing to share my puzzles with others. Anyone else creating custom puzzle for their students?"
"20","2015-02-16","2023-03-24","https://blog.acthompson.net/2015/02/interesting-links-16-february-2015.html","President’s Day today which means my school is closed. I can use the rest after cleaning up from the latest snow storm. I’ve lost count of the number of feet (yes FEET) of snow we have had in the last month. Probably over 6 feet (2 meters) and it looks like more to come. Great weather to stay inside and write code. And look though some interesting links. Rob Miles has put the materials for his C# Course and a Shiny New Kindle C# Yellow Book on line. I recommend his materials. He does good work. Garth Flint writes about taking his students on A CS Field Trip. Do you take students on field trips? Where to? Simon Johnson has created Flapping Birds v.2.0.1 in 68 lines of touchdevelop! I may use this as a starter for some additional projects. Speaking of TouchDevelop. TouchDevelop is now an open source project on GitHub. The current team will keep working on it, but can use some help. Have you been following the CSTA blog? Maybe it is time to catch up on the latest posts. Care about CS Education? You can work for http://Code.org ! They are hiring. Lots. http://code.org/about/jobs Some great people already working there."
"21","2015-02-17","2023-03-24","https://blog.acthompson.net/2015/02/one-thing-leads-to-another.html","One of the great things about teacher blogging is the sharing of ideas. Often these ideas can be easily adapted and adopted in new ways. Earlier today Doug Peterson had an interesting post about wind chill calculations. He had an interest, shared by lots of us “enjoying” a particularly cold winter, and did some research. This resulted in a Small Basic project. And all the information I needed to write my own project. Now Small Basic is a wonderful little language for projects like a wind chill calculator. I can easily understand why it was a go to language for Doug. On the other hand I have been doing a lot of work with TouchDevelop lately so writing the program in that came to my mind. My wind chill program (which you can run from any web browser) looks like the following. TouchDevelop has three levels of ability for coding these days BTW. That is the “beginner” format which I chose in part because I like the color coding. Any way, I can see some room for expansion. There are obvious UI improvements but as is often the case there is more to wind chill can meets the eye. For example these calculations are apparently only useful for temperatures below 50 degrees Fahrenheit. That’s an obvious check that should be made. It has the added advantage of being able to add if statements to a simple assignment statement project. We should probably also check for negative wind speed. As always one thing leads to another in programming. And now thanks to Doug for sharing what he did I have another project I can use with my students. One that conveniently works in any programming language I might use."
"22","2015-02-19","2023-03-24","https://blog.acthompson.net/2015/02/2015-csta-annual-conference.html","Registration is now open for the CSTA annual conference. CSTA 2015 is a professional development opportunity for computer science and information technology teachers who need practical, classroom-focused information to help them prepare their students for the future. Conference content is peer reviewed and peer or industry led, making it relevant to today's classroom needs. This year we are staying true to being ""bigger and better than ever"" so we have expanded our conference to span three days, with two days worth of workshops, more exhibitors, along with multiple networking opportunities. Highlights: Explore issues and trends relating directly to your classroom Learn, network and interact Choose from various workshops and breakout sessions Amazing value (complimentary conference Wi-Fi, breakfast, lunch and snacks - CHECK!) at approximately $100/day! Some of this year's session topics include: Advanced Placement Computer Science Computational Thinking Increasing Enrollment in Computer Science Programming Robotics Keynotes: Megan Smith, Chief Technology Officer of the United States - Invited Randy Pitchford, Aaron Thibault and Jimmy Sieben with Gearbox Pre-registration is required and will be accepted for the first 500 teachers. The registration deadline is June 26, 2015. Also, please note that you must complete the payment portion of the online form in order to be fully registered for the conference! As always, we thank our sponsors for their generous donations. Your registration fee will include networking opportunities, lunch and resource materials. The 2015 CSTA Annual Conference is made possible by the generous support of Google, Lockheed Martin, Oracle Academy and the University of Texas at Dallas. Costs: Conference registration (which includes a community session on Sunday (July 12) afternoon, Monday night's event with the University of Texas at Dallas, and all general and plenary sessions on Tuesday(July 14) is $100 if you register by April 15. From April 16-June 26 the price is $150, and after that the price increases to $225. Workshops are a separate price, and this year we have expanded our offerings to include options on Sunday, as well as Monday. The price for workshops is $100 for the first one, and $50 for each additional workshop (maximum number of three). Please note that all workshops are ""bring your own laptop"" and that workshop registration is limited to 30-40 participants; so be sure to register early to get your workshop choice. As an additional reminder, we DO NOT accept workshop registrations onsite, and there is NO switching of options. Register at: www.cstaconference.org For more information contact Tiffany Nash, CSTA Events and Communications Manager at t.nash@csta-hq.org P.S. A big thank you to the 2015 Conference Planning Committee: Doug Peterson, Program Chair J. Philip East, Workshop Chair Duncan Buell, Review Chair Mindy Hart, Volunteer Coordinator Stephanie Hoeppner Tammy Pirmann Dave Reed, CSTA Professional Development Committee Chair Hal Speed, Central Texas Chapter Conference Liaison Sheena Vaidyanathan Henry Vo, Dallas Fort Worth Chapter Conference Liaison Lizan Ward, Greater Houston Chapter Conference Liaison Lissa Clayborn, Acting Executive Director, CSTA We look forward to seeing you in Grapevine! The CSTA 2015 Annual Conference is generously sponsored by:"
"23","2015-02-20","2023-03-24","https://blog.acthompson.net/2015/02/todays-basic-is-not-your-fathers-basic.html","A post at Doug Peterson’s blog (A Different Time) sent me to a site that has a collection of old BASIC programs. And by old I mean the 1970s. I remember many of these programs as I was starting my programming career back then. One could take these programs and type them into their computer and run them. It was fun and we learned a lot. But I’ll tell you the language has changed a lot since then. For example back then a comment was a REM statement. Short for REMARK of course. Today most version of Basic use a single quote to flag a comment. Today variable names can be of any length while back then one was limited to a single letter followed by a number or numbers. Variables were declared using a Dim statement as they are today but the type was specific by a $ for string, a % for integers and floating point numbers had neither of those special symbols. One can’t use them in variable names today of course. Originally BASIC did not have subroutines as we know them today. We had the GOSUB statement which branched code to a line number (we don’t use line numbers at all any more) and a return statement brought the flow of execution back to the line after the GOSUB. There was no parameter passing and variables were basically global. There were functions of a sort. Those were defined in a single line like this: 180 DEF FNM(X)=X-8*INT((X-1)/8) The functions were all named FN followed by some letter. Return values were loosely typed. It sure was easy to use though. I’m looking though these old projects for ideas for updated versions to use with my current students. Some I will use with Visual Basic and some with C#. And just maybe some with TouchDevelep. Some things never get old. Today’s versions of BASIC are both much more powerful and much more complicated than those early versions were. Stronger types, more powerful functions and subroutines, lots more flexibility in identifier names and real error handling. Small Basic is an attempt, and a good one, at returning in part to those simpler days. It still has more power and complexity but many things are much easier. Visual Basic is a very powerful professional level language and development environment. It too makes some things much easier than they were “back in the day” but in other ways the complexity can be intimidating and even frustrating for beginner. It seems to work well with my high school freshmen though as long as I stick to the basics. I wonder how many people judge the idea of BASIC based on thirty (or forty) year old versions of the language? Today’s versions, especially Visual Basic are every bit as powerful and modern as Java or many other popular languages. And still easier to learn. I still like them."
"24","2015-02-23","2023-03-24","https://blog.acthompson.net/2015/02/interesting-links-23-february-2015.html","It's February break for my school. I’m trying to take it easy this week. And catching up with grading of course. I suspect a lot of teachers use so-called vacation time to catch up on school work like grading and planning. I also hope to play with some tools I haven't had time for. With any luck at all I’ll get my new 3-d printer working. And maybe a Kinect project I want to start. We’ll see! IF you’re looking for interesting things I have a few good links below. I love the suggestions that come fromCS Teaching Tips @CSTeachingTips For example “Give students a caesar cipher to teach how characters can be treated as numbers and to reinforce string manipulation. http://ow.ly/IiLhJ “ I love Caesar cipher projects! Also this one “Give students a large data file to sort when teaching sorting algorithms. http://ow.ly/IiJZ7 “ Sorting small data sets is boring, feels to easy and doesn’t give one a real chance to see performance differences. Computer Science Teacher: 2015 CSTA annual conference – Registration is Open. Will I see you there? Fun images to help visualize how computers have changed. Your students may find these interesting. Algorithms – Teaching coding structures to 6th grade. New collaboration features in TouchDevelop This opens some interesting possibilities. I’m wondering about how several students modifying the same program at the same time will work out in class."
"25","2015-02-24","2023-03-24","https://blog.acthompson.net/2015/02/simulations-are-more-fun.html","One of my favorite computer science teachers, Judy Hromcik from Texas, posted a link to a video called “The last banana: A thought experiment in probability.” The video outlines a particular statistical problem. “Imagine a game played with two players and two dice: if the biggest number rolled is one, two, three, or four, player 1 wins. If the biggest number rolled is five or six, player 2 wins. Who has the best probability of winning the game?” The video outlines several ways to determine who has the best chance of winning. There are several ways including logic diagrams which are interesting and perhaps even fun. For me, programming geek that I am, creating a Monte Carlo simulations seems like the most fun way. Judy is thinking about using this with her students and I’m thinking about using it with mine as well. I’m looking forward to discussions with students about the results. The first couple of times I ran the simulation I did so with small iterations (36 simulated rolls) and the results were not always what I expected. Player One won more than Player Two in several cases. This is well within the realm of possibility of course. Probability is not certainty. Larger numbers of iterations came a lot closer to the theoretical ratio of winners. This is also expected. I think the next improvement to the program is to show the percentages for each player as well as the raw numbers BTW. Theoretically Player Two should win 56% of the time. I think simulations are fun but I also wonder if they might help students picture the results better than looking at a strictly mathematical look at the probabilities. Back in college I took a number of courses in statistics (I was originally a sociology major) and I got tired of doing the arithmetic. The math was fun but doing the calculations was tedious. So I did the only logical thing – I wrote programs to do the arithmetic. Do this really helped me focus on the math, the algorithms, and save time doing the arithmetic. So some people the math is enough. Some of us like to see things in a different way. Anyone out there teach statistics? Do you have students run (or better yet program) simulations as part of the course? Does it work for your students?"
"26","2015-02-26","2023-03-24","https://blog.acthompson.net/2015/02/lessons-in-time.html","The other day I was microwaving some food to heat it up. Ten seconds seemed like forever. I was actually able to do several other things while I waited. The microwave has changed my perception of time in some ways. As I thought about that I remembered the first time I heard Grace Hopper speak. One of her favorite stories was about explaining to an admiral why there was a delay in satellite transmission. She used a wire “nanosecond” to demonstrate. Light travels about 11 3/4 inches in a nanosecond. She would show the wire and explain that there were a lot of nanoseconds between the ground and the satellite. Later in her career Admiral Hopper used to show off packets of picoseconds. She got the little packets in the cafeteria where they were already labeled with the letter P. I am I am sure many others use the nanosecond story to help explain to our students why smaller computers are faster computers. I’m thinking about adding the microwave story to my toolkit as well. Some times that we think are very fast in the abstract are actually very slow in reality. Once you realize that 10 seconds is not instantaneous and that you can actually accomplish other things during that time you realize that parallel operations can make better use of the time available. Ten seconds to you and I can be a long time. A nanosecond is a long time to a computer. Even, these days, a picosecond is a long time for a computer. We’ll see how that goes over."
"27","2015-03-02","2023-03-24","https://blog.acthompson.net/2015/03/interesting-links-2-march-2015.html","Back in school today. It was nice to have a break but I am looking forward to time with my students today. I got no school work done at all during the week off. I’m going to be paying for that this week though. Well that is life. I did pick up a mini display port to VGA connector from my Surface Pro 3. Now using a second monitor. Productivity will improve. Yeah! And now a few interesting links that I managed to capture over the last week. Some fun ones I think. Most vulnerable operating systems and applications in 2014 It will come as a surprise to some that Windows is NOT in the worst three. The worst two are from Apple. May spark some interesting conversations. Level up your programming skills with this FREE introduction to #Python! Get started: http://spr.ly/60170xwS I may try this one out. I need to learn some Python. Great article about why having the right people develop key libraries for computing. Proving that Android’s, Java’s and Python’s sorting algorithm is broken (and showing how to fix it) I found one link top interesting quotes about programming and remembered I had seen some other collections in the past. I thought I would list some of the best lists here. Quotations for Learning and Programming collected by Rich Pattis Perhaps the ultimate collection? Eugene Fink's collection of quotes: Computer-science quotes and jokes Are these the Top 50 Programming Quotes of All Time?"
"28","2015-03-03","2023-03-24","https://blog.acthompson.net/2015/03/its-software-stupid.html","Computers are magic. Well to a few people they are. To others they are annoying and useless pieces of hardware. At least until you add software. I was reading Audrey Watters’ post on “How Steve Jobs Brought the Apple II to the Classroom” recently. It is a prime example of someone finding the magic in the box and assuming that, if not everyone, a lot of others would also discover the magic. This idea never seems to go away and yet it seldom works out that way. For everyone who teaches themselves there are a great many others who need a teacher. For some people, I confess I am one of them, discovering that a computer can be programmed and used to do interesting things is enough to get one hooked. This doesn’t seem to be universally the case though. The great majority of people need more out of the software to find the computer useful let alone educational. This is not limited to computers either. A few years ago it seemed like everyone was buying Flipcams. Workshops and presentations abounded at ed tech conferences on the amazing things that teachers were doing with them. The reality turned out to be boxes and boxes full of unused Flipcams in schools all over the place. It turns out that just giving people the cameras did not make magic happen. Time after time some new technology is touted as being a sort of silver bullet. Apple computers, digital cameras, Flipcams, iPod and iPads, Chromebooks and tablets of all sorts. Without a doubt some teachers are able to do awesome things with these devices and their students. But they seem to be the exceptions. Some teachers are naturally creative and combine that with a fearlessness that let’s them try out of the box projects. Other of us need a bit more direction. Some education and sharing of ideas of what works for others is needed to get things started. Teachers also need administrative support even if that support is in the form of benign neglect. :-) Too often I get the question “we just bought [latest gee-whiz technology] can you tell me how to use it to teach [subject of the day.]” If you have hardware and need to ask about software you have, in my opinion, don’t things backwards. Find the software (be that computer software or curriculum materials) and then find the hardware to run it on. We shouldn’t start with a solution and go looking for problems to solve with it."
"29","2015-03-04","2023-03-24","https://blog.acthompson.net/2015/03/can-i-give-you-hint.html","Last month I attended a workshop on CodeHunt at Microsoft Research. A talk there by Daniel Perelman on Hint generation in Code Hunt (you can watch a video of his talk here) really sparked some thinking on my part about how I give hints to students. Since then I have seen some other research on automatic generation of hints including an interesting paper by some researchers at Stanford (PDF). Having automatic hint generation is an important problem for online education and MOOCs. It’s not an easy problem though. In fact at times I struggle with giving the right hints to students in live interactions. Some times there is a fine line between pointing a student in the right direction and telling them how to solve the problem. Sometimes a simple “are you sure you want to do that inside the loop?” is enough. Other times a student needs someone to go over the statement of the problem and help them break it down into pieces. If a student is close to a solution then there may be little room of a hint. At that point it can become a judgment call between asking the student to keep working on their own and giving them the information that puts them over the top. Different students need different hints. Or perhaps I should say that some students need more help than others. Working with students in person means that a teacher can figure out what concepts students are struggling with. A student that understands loops can be told “have you thought about a loop here? while a student who is struggling with how to set up a loop needs a refresher on the lecture they slept though didn’t quite understand the first time. That more involved help, which is more than just a hint, may be a harder problem for software tutorial systems to handle than simple hints. I’m pretty excited about the possibilities for software giving students hints. I think that this may allow teachers to spend more (and higher quality) time with students who need more than a hint."
"30","2015-03-06","2023-03-24","https://blog.acthompson.net/2015/03/still-more-hardware-for-learning.html","I get email. And I get twitter followers. Often these new followers or email senders are promoting some new gadget for teaching. This week it was RobotIX and Hackball. Hackball is looking to get funded via Kickstarter so it’s not available yet and most of the information about it is at the Kickstarter link. The RobotIX web site talks about some robots that are “coming” but doesn’t include pictures or really any data about them. That obviously makes it hard to review them. Why are there more and more of these sorts of things all the time? Well, I guess because they are cool and fun. Lots of people want to create the magic bullet to make teaching easier. There are already a lot of robots and what not out there (I list many at Robots For Teaching Programming) so it feels like people are “reinventing the wheel.” This is the case even though we don’t really know if any of this really works as advertised. We seem to do a lot of things based on intuition or because we want it to work. Mark Guzdial wrote about this recently at Computing Education Must Go Beyond Intuition: The Need for Evidence-Based Practice on the Blog at CACM. That lack of evidence for most new things is what worries me. Yes I love to try new things and there are others out there like me who will. But in the end how do we know it is working? Not all teachers are trained researchers with well defined environments that allow for serious evidence gathering. I suspect I am not alone in wishing that universities would step up and take on the task of researching what works and what doesn’t in computer science education. So far at most universities there is a lot of finger pointing and saying let the other guy do it. CS departments think Education departments should do it and Education departments think that CS departments should do it. Few schools are willing to fund real CS education research. And so we keep doing things by trial and error and hoping that the things we think are cool are also working."
"31","2015-03-09","2023-03-24","https://blog.acthompson.net/2015/03/interesting-links-9-march-2015.html","Last week was SIGCSE in Kansas City. From all reports it was a great conference. I wasn’t there but I followed as close as I could via Twitter. The twitter stream was active with lots of links, pictures and interesting comments. I’ll get to read the papers at some point but I wish I had been there. In any case I did collect some good links from SIGCSE to share this week. And a few from other places. Hope you find some useful. First a could of blog posts by Lisa Kaczmarczyk (twitter @lisakaczmarczyk ) on her Interdisciplinary Computing Blog: SIGCSE2015 Comings & Goings in New Directions Mind Stretching at ACM SIGCAS (Computers & Society) And then there are some summary blog posts at the Blog@CACM ""Pre-symposium events included....Computing for the Social Good"" SIGCSE Day 1 is in the Books SIGCSE Day 2 Highlights And That’s a Wrap - SIGCSE 2015 Ends Mark Weiss was one of the keynotes and I really wish I could have heard that one. One thing he proposes is that you can teach all these topics (image below) in Excel! For example did you know that VLOOKUP in Excel uses a binary search? I didn’t but I guess I should have. A new (to me anyway) thing I saw a lot of tweets about was Pencil Code (https://pencilcode.net/) which is a tool for converting between blocks and text based code. I need to look into that one some more. I did add it to my Programming With Blocks post. Recently I wrote a post for the CSTA blog about the CSTA Equity Committee which I currently chair. If you’ve wondered about CSTA Board committees this will be interesting. I updated my computer science education blog roll (http://blog.acthompson.net/2012/11/computer-science-education-blog-roll.html …) to include Leigh Ann Sudol-Delyser‘s new blog at http://csadvocate.org/blog/ I am so happy to see Leigh Ann blogging again. She recently completed her PhD from Carnegie Mellon which I hope gives her more time to blog again. Found an interesting post at Willa's World: The Six Most Common Species Of Code Mark Guzdial summarizes some of the AP CS 2014 Results as analyzed by Barbara Ericson: Big jumps in participation! Demographics still poor Speaking of Excel I found this interesting post Excel Fun—Build 3D graphics from a spreadsheet on the Microsoft Office Blog. Lastly don’t forget this summer’s Annual CSTA Conference."
"32","2015-03-10","2023-03-24","https://blog.acthompson.net/2015/03/youthspark-challenge-for-change.html","Microsoft runs all sorts of competitions. Recently I read about the YouthSpark Challenge for Change. Since it is no open to 13 to 17 year olds (aka high school students) I thought I would post information about it here. Calling all students and young adults! Are you active in your local community or concerned about national issues? Microsoft’s third annual YouthSpark Challenge for Change is inviting youth aged 13-25 around the world to share their ideas for sparking change in their communities, schools, college campuses, or the world. Microsoft YouthSpark is part of Microsoft’s commitment to create education, employment and entrepreneurship opportunities for young people around the world. What could I win? Microsoft is awarding exciting prizes to help you do more good. And, this year, the Challenge has been extended to 13 to 17 year olds! 15 finalists from each age group (13-17 and 18-25) will win a Surface Pro 3 with Office 365*. 5 grand prize winners from each age group will win: An amazing leadership-development trip to Nicaragua to learn about creating change $2,500 cash to help turn their ideas into a reality A Windows Phone* The opportunity to serve as a YouthSpark Advocate. I found this thanks to a blog post by Aimee Sprung on the Microsoft New England blog - Calling young people with ideas for change — win support to make them a reality More information is available following the links. I have no connection to the competition."
"33","2015-03-11","2023-03-24","https://blog.acthompson.net/2015/03/how-to-teach-computer-science-to-5-14yr.html","Join CSTA K-8 task force for #CSK8 chat on Mar 11 8pm EST. Pedagogy- ‘How to teach’ Computer Science to 5-14yr olds. Not the What or Why. Discuss pair programming, blended learning, structured vs unstructured approaches, online curriculum, differentiation and more. This is the latest in a series of twitter chats that take place every other Wednesday on Twitter. These usually have a lot of good conversation."
"34","2015-03-12","2023-03-24","https://blog.acthompson.net/2015/03/simplify-simplify-simplify.html","One of the things beginners do when learning how to program is to make things more complicated then they need to be. It’s a natural thing because they often don’t know the shortcuts. They may not know enough library routines or even enough language features. So they build complicated ways around what they don’t know using what they do know. It’s that old story of when you only have a hammer all your problems look like nails. Everyone once in a while my students are the ones with the shortcut and I’m the one who over complicates things. That happened to me with a recent project. I assigned my students the project I blogged about in Simulations Are More Fun recently. As is my practice I coded up a sample solution myself. I liked my solution. It was cool. My students took an easier path though. I over thought the problem. The problem includes the detail “If the biggest number rolled is five or six, player 2 wins” so my first thought was to determine the biggest number and then check it’s value. I got even more clever by creating a function that took two numbers and returned the value of the larger. It worked wonderfully but it added additional complexity without adding real additional value. My students just checked the two values with an OR expression. Sort of like this:    1: if (die1 >= 5 || die2 >= 5)    2:     player2++;    3: else    4:     player1++; Nice and simple with no extra method call overhead.It’s actually sort of elegant. My problem, if I can call it that, is that I tend to think of solutions that scale. I’ve spent a lot of time in my career dealing with big problems and big data. This colors how I look at some problems. This problem is simple with a very small data set and this simple if works great in this case. If I had to compare a value to the highest value in an array this simple solution could be limiting. It would get complicated very quickly. Having a method that found and returned the highest value in an array (something we talked about in class when introducing arrays) would make things easier. Or at least simpler in the if statement. This is something I will talk about in the future as I try and continue to work scalable solutions and how to design for scalability. But we’ll also have to keep an eye out for simple solutions as well."
"35","2015-03-13","2023-03-24","https://blog.acthompson.net/2015/03/is-bbcs-micro-bot-silver-bullet.html","It’s been all over social media and online news the last couple of days - BBC to give out one million 'Micro Bit' computers to get kids coding. I’m a little skeptical. I’ve heard things like this before. (and blogged about it - most recently at Still More Hardware for Learning Software–But Why?) This one seems a little different. For one thing there are a lot of different partners involved. This article at the BBC web site (BBC launches flagship Make it Digital initiative) goes into some more detail and explains some of the other things going on. It is more than just a “give every 11 year old in the UK a piece of hardware.” From a couple of personal sources I have learned that TouchDevelop, one of my favorite tools, is going to be an important part of the software for this initiative. I knew that there were already ties to Arduino in TouchDevelop (TouchDevelop Generates Arduino Code) so this does seem like a natural next step for them. And my female students seem to like TouchDevelop. I’m told that using the new ‘Micro Bot’ to make wearable technology will be easy and will interest girls. That would be nice if it works out that way. The device and related software are still being developed though so we’re going a lot on hope and theory. On one hand I want to be optimistic about this. When I first saw this I asked on Facebook how many of these devices would get used and how many would collect dust. Reactions from friends ranged from “1 in 10 but that may be optimistic” to “does it matter as long as some get used?” I think it does matter. Big highly publicized failures make it harder to get the next innovation into schools. So I’d like something like this to have some success. There is some teacher training attached though I’m not clear on what is for teachers and one is part of the larger program and may not be part of the schools. Teachers are going to need some training in this stuff. And not just how to use it in the abstract but how to use it in the context of their schools. Cross curricula efforts would be ideal. But there are other concerns. They are saying there will be a million of the devices and no more after that. My first question is why? But more concerning is that of ongoing support. And what about the next year’s Year Seven students? There is also the issue of what do these students do next? What will there be for them in Year Eight? I know that the UK is working hard of getting more CS in the curriculum but is that in place? Is there a natural flow from year to year? Or do they expect that after one miracle year thousands if not hundreds of thousands of kids will become computer science autodidacts? That seems unlikely. It also seems unlikely that these devices will keep kids going for years until they get to the next real CS course. So while I see things to love about this, in fact I’d like one myself to work with, there is a lot to be concerned about. We’ll have to see what happens I guess. What do you think?"
"36","2015-03-14","2023-03-24","https://blog.acthompson.net/2015/03/choose-to-code-with-touchdevelop.html","Looks like a good chance to earn some money for school projects and introduce students to programming. Open to US public schools only unfortunately. More information from the Choose to Code website. Teach your students to code in just one hour. Earn $500 in classroom funding from DonorsChoose.org! The first 200 teachers to complete Choose to Code will receive $500 in classroom funding from Donorschoose.org. Here's how the program works: Sign up for Choose to Code. Create your Choose to Code class and add your students. Work with your students to complete the eight Microsoft TouchDevelop coding courses.It only takes an hour to complete all eight courses at one time or you can do each course separately, it’s up to you. Submit proof of the completed courses & your signed Microsoft Gifting Letter* and receive a $500 gift code to use at DonorsChoose.org."
"37","2015-03-16","2023-03-24","https://blog.acthompson.net/2015/03/interesting-links-16-march-2015.html","Last week I was not at SXSWedu. There were not as many tweets about it in my stream as there were from SIGCSE. I still want to go some day though. With progress reports due last week I had more than enough to keep me busy though. I’m sure the same it true for most people. Just a few links this week and two of them to my own posts. I tend not to post on the weekend or late on Friday because those posts tend not to get read. But I was out of control. The first was about the new (not yet real) BBC Micro Bot. I just had to write about what I was thinking so I did at Is the BBC’s ‘Micro Bot’ the Silver Bullet. The second was about a fundraising teaching CS opportunity for US public schools at Choose to Code With TouchDevelop. Garth Flint wrote about The value of guest speakers in CS. He’s been having a couple of them come in and talk to his students. Seems like it is working well. I had no idea there were languages for programming music until I saw this List of Programming Languages For Music: Did you know about these? How long do you spend teaching variables? I just spent three weeks. This is an interesting post from Dawn DuPriest @DuPriestMath who is self described as a “Middle School computer science / math teacher and proud geek.” Will an 'Hour of Code' Change Schools? is a good commentary but Audrey Watters. @Audreywatters"
"38","2015-03-17","2023-03-24","https://blog.acthompson.net/2015/03/2015-csta-administrator-impact-award.html","Dear CSTA Community, Nominations are currently open for the 2015 CSTA Administrator Impact Award! This prestigious award is given by CSTA to recognize an administrator who has made an outstanding contribution to K-12 computer science education. The winner will be presented with the Administrator Impact Award during the CSTA 2015 Annual Conference, July 12-14 in Grapevine, Texas. The winner and the nominating teacher will receive registration, travel, and accommodations for the CSTA 2015 conference. The award winner will also be featured in an article in the CSTA Voice and recognized on the CSTA website and Advocate blog. Award applications open today, Monday, March 16 and will close on Sunday, April 5 at 11:59 pm Pacific Time. Teachers are asked to nominate an administrator they believe has demonstrated significant impact on computer science education in their school, district, or state. The award winner's work must be shown to have broad impact and influence, and to demonstrate leadership in a variety of ways, including innovative approaches, mentoring of teachers, and visionary thinking. Submit your nomination now! For questions regarding the Administrator Impact Award, please contact customerservice@csta-hq.org."
"39","2015-03-18","2023-03-24","https://blog.acthompson.net/2015/03/do-you-want-to-write-some-code.html","OK I feel better. I was overcome with an urge to write some code. Now I have a program I should write. I want to combine my seating chart program (with pictures) with the program I use to randomly pick on students. I mean randomly pick who to call on. Whoops. But I don't have the time to work on that right now. So I wanted a ""toy program."" I remembered that I had been playing with a simple Caesar cipher program (who else remembers ROT-13?) What I have long been meaning to do was to write a program that took a string and rotated it though all 25 possible rotations (26 puts it back the way it was) and build a list so that if you suspected a Caesar substitution you could test it to see how it was rotated. Fine. So I took the code for rotating in the encoding program and made it a simple little string function. Added a loop to pass a string to the function with different values to rotate and put the result in a listbox. By reusing code I was done in about 10 minutes. And I have a toy program I will probably use once every couple of years and could probably find a web app that does the same thing in about the same time it took to write the code. But oh so much more satisfying. Who knows - I might assign it as a programming assignment someday as well. BTW Mike Zamansky has a closely related (and probably more useful post) on his blog Rot13 - Gateway Drugs Techniques"
"40","2015-03-20","2023-03-24","https://blog.acthompson.net/2015/03/interview-questions-for-computer.html","As I looked into why several posts from a while back were getting so many page views lately I realized that search values similar to “interview questions for computer science teachers” were probably responsible. The two pages in question are two where I interviewed CS educators about themselves and their work. That is probably not what most of these searchers were looking for though. Since it has been a while since I interviewed for a computer science teacher position (as either hiring manager or job hunter) I went to social media looking for examples of good questions for job interviews. People were very helpful. I quickly received dozens of questions. I’ve got the whole list below but I wanted to focus a bit on a few I felt were key. Oh and if you feel a question is missing or have thoughts on any in the list I would to read about it in the comments. A couple relate to teaching in general. Do you like kids? You’d better if you want to do a good job teaching. Kids know if you don’t like them and they will not respect you if you don’t like them. Are you ready / willing to share your ""war stories"" with the class, to help humanize the subject? This is important to me. I think teachers should make teaching personal and that means sharing your own history. What strategies would you use to help struggling students? Everyone learns differently and the great teachers are not the ones who help the students who get it easily but the ones who help the struggling students. I walk into your class..describe to me what's going on and why. Are they going to fit in with your school? Are they ok with a noisy class? That’s my favorite. Or do they favor the sit and get method of teaching? What approaches will you bring to the classroom to make this subject matter worth learning? Relevance may be an overused work in some circles but it is still important. Some are more Computer Science related. Well at least somewhat. What strategies would you use to attract and retain women and minorities in your program? If they don’t know this is an issue and haven’t thought about strategies for it they may not be ready. Why are you passionate about CS? I think passion is huge. And it can’t easily be faked. Why teaching instead of industry? Do I need to say more? Explain the role of ethics within your CS program. With the massive changes that computing is making on society today having ethics being someone a teacher thinks about and addresses is important to me. Here is the full (mostly unedited) list I received from a number of helpful teachers. It’s in no particular order. What strategies would you use to attract and retain women and minorities in your program? Experience in CS what projects you have done in college why are you passionate about CS Teaching and tutoring experience at which levels. What's your vision for the CS program here, what part do you want to play what resources do you need, which classes should we teach. Why teaching instead of industry? How would you explain what a ZIP file is? What are the common misconceptions about nested for loops? What have you learned from a student? Pick a language and tell me why it's the best language for our students. Now tell me the challenges of using that specific language with these students, and how you would overcome them. Students at this school need some help with <concept/skill>. Tell me how you would use your CS class to help them. I walk into your class..describe to me what's going on and why. How have/would you balance individual, pair and group assignments?, How does this impact assessment of your students' progress? Explain the role of ethics within your CS program. What strategies would you use to help struggling students? How would you keep the students off Facebook and games during class? One area is attitude and skills Do they like kids? How would you connect your curriculum to real world problems and core curriculum ? In what ways can your program increase students overall problem solving and critical thinking skills? Can they relate to age group of the students Can they communicate? Do they like to learn? Are they excited about learning? Are they still actively learning? Are they disciplined? With themselves and in the classroom. Can they mange their time? Not only can they teach but do they like to teach? Do they have high expectations? Do they know the tools (Windows, MacOS , IOS, Android) Can they program? Do they know the software? Can they handle large classes Is there 1-on-1 coaching Can they make a lecture interesting? Are they flexible in classroom environment Are there self-paced classes and can they work with that? What approaches will you bring to the classroom to make this subject matter worth learning? Why is Grace Hopper worth knowing about? What do you do when you've got a kid who, despite repeated attempts, just doesn't get it? What was your favorite part in the movie ""The Imitation Game""? Are you ready / willing to share your ""war stories"" with the class, to help humanize the subject? In your opinion, how does CS apply to everyone's every day lives? What does ""rigorous computer science curriculum"" mean to you? How would you implement a rigorous computer science curriculum while ensuring that students who have no prior computing experience can have a class that is both rigorous and accessible? What are the most important topics to teach the beginning computer science student and why?"
"41","2015-03-23","2023-03-24","https://blog.acthompson.net/2015/03/interesting-links-23-march-2015.html","Some great links this week. Images to use in class, a video for a TV show (yes about girls computing), and lots more. One of my best collections in recent weeks if I do say so myself. Program Computers, Not Kids is a great post by Vicki Davis aka @coolcatteacher Key line? If you see technology controlling students, then you’ve got a classroom using 21st century technology for 20th century teaching. If you see students creating and programming the technology, then you’ve got a more modern classroom approach. XNA is no more but as the phoenix rises from the ashes MonoGame, may be the replacement. the next generation . Check it out for multi-platform game creation. And a way to continue to use any XNA curriculum you may have. iD Tech and http://Code.org are giving 100 Girls Scholarships to Attend Summer STEM Program See the web site for more information http://www.iDTech.com/girls Zoomable map of undersea cables connecting the world of the Internet. Great as a topic of discussion. Ask students why Bermuda has so many connections. I suspect it is because of money. Bermuda is a world-wide center of international reinsurance. Late last week I posted a large collection of questions to use while interviewing candidates for Computer Science teaching jobs. Are you using Scratch? You may find these printable graphics of Scratch commands useful. The TV show Road Trip Nation is looking for a couple of people between 18 and 30. Roadtrip Nation and Microsoft are teaming up to send 3 young people with backgrounds that are underrepresented in the technology industry and who are interested in computer science on a cross-country adventure to discover the exciting--and growing --possibilities in the industry. Selected individuals will travel in Roadtrip Nation’s Green RV, and will interview professionals all over the country who have turned their passion for computer science into fulfilling careers. The experience will be filmed and will appear on Roadtrip Nation's long-running documentary series, which follows young people all over the world as they seek to figure out their futures. More information at Roadtrip Nation: Code Trip Application Early wearable computer: Qing Dynasty abacus ring. You know it’s cool!"
"42","2015-03-24","2023-03-24","https://blog.acthompson.net/2015/03/madeup-programming-language-for-making.html","One of the things I have been wondering about is how to make a real connection between 3D printing and learning computer science. Sure most 3D printers are attached to computers and CAD software is used to create models for printing. That is not quite computer science to me. And it sure isn’t programming. Recently I learned about a project to create a language to program 3D models for printing. It looks interesting even though it is still under development. Chris Johnson at the University of Wisconsin, Eau Claire is working on it and it is called Madeup. Madeup is a Logo-like language that can be used to “walk paths through 3D space, and then generate models based on those paths. Previews of the models are rendered on every keystroke in a WebGL canvas.” Chris has a KickStarter (https://www.kickstarter.com/projects/1975355456/madeup-a-programming-language-for-3-d-models) to raise some funds to allow him more time to finish the project up so that it can be used in classrooms. I’ve contributed a small amount so that I can get an early copy for my own use. I think the 3D renderings alone will make things more interesting than 2D graphics but being able to create a physical representation is really exciting to me. Take a look at the video on the KickStarter and let me know what you think. Does this look useful to you?"
"43","2015-03-25","2023-03-24","https://blog.acthompson.net/2015/03/fizzbuzz-revisited.html","I first blogged about using FizzBuzz in the classroom four years ago when I didn’t have a classroom and students of my own to use it with. (FizzBuzz–A Programming Question) Well times have changed and today I did assign the project to a room full of students. Briefly stated the exercise is: Write a program that prints the numbers from 1 to 100. But for multiples of three print “Fizz” instead of the number and for the multiples of five print “Buzz”. For numbers which are multiples of both three and five print “FizzBuzz”. Most of my students finished it easily during the shortened period we had today. A few in a very short period of time which is great. I should say that these are not yet experienced programmers. We are not even half way though a one semester course. Though we have covered loops and decision structures. So they know the concepts but haven’t had a lot of practice by any means. So I’m pleased with the results. What pleases me the most is that the solutions are not identical. There are at least three different ways students set up the if statements to determine what to show when. Check for evenly divisible by both 3 and 5 first. Check for evenly divisible by 15 first Check for divisible by 3 but not 5 first and 5 but not 3 second. They all work of course. The last one, while more complicated, demonstrates a good grasp of compound comparisons. That is sort of a plus. In my project instructions I asked students to display the results in a listbox. We’re not doing command line programs and haven’t covered file usage yet. We have used listsboxes though. A number of students wrote code that always adds the number to the listbox but then removes it if it is not necessary. Again a bit more complicated and probably slower than other solutions but interesting since I did not teach them how to use the Remove method for listboxes. Clearly someone (or several people) is looking things up. That also makes me happy. I like students to go beyond what is covered in lectures. Plus this is an implementation that for some reason never occurred to me. Who know but that may turn out to be helpful to me some day. I learned something knew and I love learning new things from my students. Tomorrow we’ll talk about the various solutions and I will have the students explain why they choose the methods they did. Hopefully we can have some discussion about the performance aspects as well. Should be fun. EDIT: I went looking for an image to post with this article and found one that suggested a visualization of FizzBuzz. I may assign this one next time. Divisible by 3 is blue, divisible by 5 is red, and divisible by both 3 and 5 is green."
"44","2015-03-27","2023-03-24","https://blog.acthompson.net/2015/03/morse-code-project.html","Project ideas come from all sorts of places. Textbooks, other teachers I work with, blogs, random conversations, conferences (do you know about Nifty Assignments from SIGCSE?) and more. Some of the best come from students. Not always intentionally though. The other day I caught a student playing around on a website while I was lecturing. Apparently I wasn’t doing enough to hold his interest. The website converted letters to Morse Code and back again. There are probably many of these sites on the Internet. My first reaction was that this makes a good programming project. (Does that make me weird?) So we started talking about it as a class. Student’s first reaction was “that’s hard” and “I don’t know Morse Code.” But of course it’s not really that hard to implement if you know how to use arrays. The tedious part is building an array to use for conversion.             Morse[0] = "".-"";             Morse[1] = ""-..."";             Morse[2] = ""-.-."";             Morse[3] = ""-..""; I've decided to do that for my students. After all I want them to use the array not go crazy trying to build one. Converting from ASCII letters to Morse Code using a string array like this is a simple and fast operation. Big O(1) for access. We’ve already done some work like this writing a program to count the number of times various letters occur in a string. Going the other way, from code to ASCII is a little harder. In that case we have to do a search of some kind though the array. A simple sequential search is probably the easiest way to do things. I know there are other ways. We could create a hash which would probably be faster. Or a nice binary tree (see this method – Thanks to Rebecca Dovi for the link). These methods would be more complicated though and this is a first programming class. So we’ll talk about other ways to do it and maybe in the AP Class they’ll implement something faster and/or more complicated. We will have a good chance to talk about the various performance issues and the various ways that arrays can be searched. I’m looking forward to the discussion."
"45","2015-03-30","2023-03-24","https://blog.acthompson.net/2015/03/interesting-links-30-march-2015.html","March is almost over and the snow in my backyard is measured in inches not feet. So spring appears to be coming albeit a bit late. The school year is progressing and a lot of my friends in the south spent last week on spring break. We’ll have a break the end of April up here in the northeastern US. I can wait. But for now you are here for interesting links. We’ll start with a couple of posts by Dawn DuPriest. Dawn has written up some of the things she has been doing with her students. These are great for people looking for lessons and materials (I am totally adapting her worksheet on Booleans to use with my students). These are excatly the sort of blog posts I wish more people would do. There is so much we can learn from each other. Booleans and Conditionals Prisoner's Dilemma and Conditionals Did you know that World Backup Day is March 31st. Take the pledge! http://worldbackupday.com/pledge If nothing else talk to your students about backup and backup your own files! Who knows what will happen April First! Small Basic 1.1 is here! You’ll have to be running a Windows OS more current than Windows XP to use it. The big advantage is that the API to Flickr works again. Apparently Flickr changed things and Small Basic had to adapt. Also they moved to a newer version of .NET which should allow more good stuff going forward. This week I learned about and added Tickle on Twitter at @tickleapp to my list of block programming languages For use programming drones and @Sphero robots. Speaking of programming languages did you see the Kickstarter build a programming language for generating printable 3-D models: https://www.kickstarter.com/projects/1975355456/madeup-a-programming-language-for-3-d-models I also found out about BeetleBlocks by @ericrosenbizzle , a blocks based generative art environment for 3D printing. Maybe 3D printing is a coming thing? Top 10 Differences Between High School Sports and Robotics – I love this set of observations from a parent at a FIRST Robotics event. Why A New Jersey School District Decided Giving Laptops To Students Is A Terrible Idea – a very sad tale of lack of planning and professional development."
"46","2015-03-31","2023-03-24","https://blog.acthompson.net/2015/03/every-character-matters.html","My Explorations in Computer Science class is creating web pages this week. This is a fairly short unit and we don’t get very deep at all. Our hope is to give students an idea of what is behind the web pages students use every day and introduce the concept of a markup language. This is brand new to most students but they seem to be enjoying themselves. Except when something goes wrong. In HTML it doesn’t take much to make things go horribly wrong either. In fact every little character is a potential problem. One of my favorite questions in this unit is “How do you spell src?” Why? Because in the <img tag the qualifier src is how one specifies where the image file is located. It’s pretty easy to enter “scr” by mistake. And when you do it can be hard to spot it. This is especially the case because there is just too much that can be off by a character in the file specification that one tends to look there first. For example if “Unit 4” has a space between the “t” and the “4” and a student leaves it out the file will not be found. This is the sort of nit picking that students are not used to making. To them “Unit 4” and “Unit4” mean the same thing and they don’t automatically understand that the computer doesn’t see it that way. All of this causes some level of frustration for students. I’m tempted to suggest this teaches “grit” which seems to be a common topic of discussion in some education circles these days. And maybe it does but I worry that it teaches frustration and that “computers are hard” which is the opposite of what I want. So I work hard at showing students how to avoid these problems and how to solve them once they are found. Making it clear that these are common errors and not to be embarrassed by them is also important. Overall though they do need to learn to be explicit and careful when writing any sort of code. The computer, I remind them, is pretty stupid and has trouble understanding things that people handle easily. Every character really does matter to the computer. I think that learning this attention to detail is helpful to students in the long run. They’ll be dealing with computers their whole lives and it is good to set expectations early."
"47","2018-03-05","2023-03-24","https://blog.acthompson.net/2018/03/let-computer-grade-projects.html","It seems like a great idea – have the computer automatically grade student projects. Save all that boring work. Looking at all those projects is a pain. Why not have the computer grade them? It’s what happens in a lot of courses. Harvard’s CS50x online version does it so it must be great. In fact a lot of huge courses in major universities use automatic grading software. What could be wrong about all of that? I confess that its a very tempting idea at times. I’ve played a little with software looking at projects with some simple HTML projects. For rote stuff like making sure all tags are present and that open tags have matching closing tags is pretty straight forward. I still want to open the pages in a web browser to see what they look like. Programming projects? I’m not so sure about automated testing for students. Mike Zamansky blogged recently about a session at SIGCSE (Sigcse2018 - Malloc Lab) where a professor had to deal with students gaming the grading system. This is one of my biggest concerns with automatic grading software. It is easily “game able.” Getting to the destination is only part of the story. It’s pretty important to understand how students get the results they get. We, as educators, only learn so much by seeing the results of a program. We really need to understand how the programs process inputs and generate outputs. When we read student code we learn a lot about our students. We learn what they know and don’t know. We learn how they implement algorithms. We also see what they understand and don’t understand. In fact we also get to know our students better. We learn their coding the way English teachers learn student's writing Students benefit as well. We can give them a lot more feedback than automatic grading routines can give. We can also modify how and what we teach based on what we learn from reading their code. So for now I think I will put up with the extra work. The extra benefits are worth it."
"48","2018-03-06","2023-03-24","https://blog.acthompson.net/2018/03/learning-by-coding.html","Throughout my career I have increased my knowledge by working on projects. As a teacher who teaches mostly beginners I don’t see a lot of complicated code. No I take that back beginners write lots of overly complicated code. What I don’t often see, because I don’t often need, are new language features, library routines, or good new ways of doing things. Now sometimes I have students show me new things. Sometimes they stumble upon them. Sometimes they go on the internet looking for ways to do things. And sometimes they learn them from parents in industry. These are all good things but sometimes I still feel like I am stagnating. That I am not learning enough. Perhaps even falling behind. This last week was school vacation. That means time to think ahead and to look at things differently. I did a bunch of reading. Mostly I read papers from SIGCSE. Yes, I pay money for the privilege but its worth it to me. I also wrote some code. I’ve got to grade Explore Performance Tasks from my AP CS Principles students. Since feedback is important I decided to write a program to help me generate that feedback. What was involved isn’t really that important. In fact I suspect that writing the code isn’t going to save me as much time as it took to write the program. What is important, to me at least, was that I explored some new things. A new Windows Forms object (CheckedListBox for the curious) for one thing. I also got in some practice with ForEach. That’s not new to me of course but I did think about it in some new (to me) ways. It probably doesn’t seem like a big deal. It’s not going to get me a raise or a new job or even add something new to what I teach in my current classes. On the other hand it is the sort of thing that helps keep programming fresh, interesting, and fun for me. It may turn out that some student will come to me with a problem that needs just the sort of things I played with last week. That would be great. But even if not, continuous learning is a good thing."
"49","2018-03-15","2023-03-24","https://blog.acthompson.net/2018/03/acm-and-csta-announce-2017-2018-cutler.html","Some cool projects which you can read about here. For more information about ACM/CSTA Cutler-Bell Prize in High School Computing, visit http://www.csteachers.org/CutlerBell or http://awards.acm.org/cutler-bell/. ACM and the Computer Science Teachers Association (CSTA) have announced the winners of the 2017-2018 Cutler-Bell Prize in High School Computing. Five high school students were selected from among a pool of graduating high school seniors throughout the US who applied for the award by submitting a project or artifact that engages modern technology and computer science. A panel of judges selected the recipients based on the ingenuity, complexity, relevancy and originality of their projects. The Cutler-Bell Prize promotes the field of computer science and empowers students to pursue computing challenges beyond the traditional classroom environment. In 2015, David Cutler and Gordon Bell established the award. Cutler is a software engineer, designer, and developer of several operating systems at Digital Equipment Corporation. Bell, an electrical engineer, is researcher emeritus at Microsoft Research. The winners are Sreya Guha, Castilleja School, Palo Alto, California; Amir Helmy, Eastside High School, Gainesville, Florida; Amy Jin, The Harker School, San Jose, California; and Benjamin Spector and Michael Truell, Horace Mann School, Bronx, New York. The winning projects illustrate the diverse applications being developed by the next generation of computer scientists. More at https://www.acm.org/media-center/2018/march/cutler-bell-prize-2017"
"50","2018-03-16","2023-03-24","https://blog.acthompson.net/2018/03/impressive-high-school-computer-science.html","ACM and the Computer Science Teachers Association (CSTA) announced the winners of the 2017-2018 Cutler-Bell Prize in High School Computing recently. Five students from four schools were given this award this year. One of the students was from a public school. The rest from independent schools. The public school has magnet programs but I don't know if the winner is part of those programs. What does that mean? My best guess is that independent schools allow more flexibility for projects like this. Not just independent schools of course, schools like the Bergen County Academies and schools like Thomas Jefferson in Virginia clearly have a lot of flexibility, extra resources, and are open to encourage things like this. TJ had an awardee in both of the first two years of the award for example. But they are exceptional schools in more ways than one. They are not your typical public school. Looking back on the first three years of awards almost all of the awardees have been from either independent schools or public magnet schools. It’s not just computer science though. Take a look at the schools who have had the most awardees in the Westinghouse-Siemens research competition. You'll see some familiar school names there. Most of them magnet schools. My friend Mike Zamansky (blog Twitter) ways these awards say more about the students than the schools. I’m sure that is the case to some extent. But why so many of these students from magnet or independent schools? I think environment is important. If it were all about the student we would not see these clusters of schools that produce an outsized number of awardees. I don’t know if the motivated students choose these school or the schools themselves develop this motivation. What I do think is that these schools have the flexibility to enable and support these students. They also have a history of producing “winners” and a culture that sets high expectations but also provides help for students to meet those expectations. Sure students from “regular” comprehensive high schools can and do earn these awards. That is not the way to bet though. The question in my mind is how to we add the flexibility and support to more students at more schools?"
"51","2018-03-19","2023-03-24","https://blog.acthompson.net/2018/03/advanced-placement-computer-science-is.html","Two controversial assertions in that title. That APCS is necessary and that it is evil. I thought about leaving this post at that and seeing what sort of conversation started but that didn’t work on Facebook so I figured it would not work here either. To start things off I should say that I am not a fan of the AP CS program. It’s too limiting. It is too tied to an end of the year test for me. The AP CS Principles course has more freedom than the AP CS A course does but still depends on an end of year test (and two performance tasks). Those performance tasks take up a lot of class time. I really like project based learning and I would love to have more time for larger projects. APCS courses suck the air out of the environment for other, more interesting to me, long term (year long) courses. I think there are better ways to prepare students for later CS education and careers. That’s the evil part. On the other hand, the Advanced Placement brand carries a lot of weight with school administrators, school boards, parents, and other interested parties. It’s often an easy sale to these people as an argument for a new CS course. If we want to see “CS for All” APCS can be very helpful. But is is still necessary? We have some well accepted starter courses in high school CS. Exploring Computer Science for one. Code.Org’s CS Discoveries is gaining some fans as well. They’re both good starters. In some ways I think they may ultimately lead to more high school Computer Science than AP CS will. But we’ll always want an advanced course to be the capstone of sorts. Should AP CS be that course(s) or should we have something more open-ended and less constrained by an exam? What would you like to see at the top of the high school CS curriculum? Is AP CS the right answer? Is it a necessary course?"
"52","2019-12-27","2023-03-24","https://blog.acthompson.net/2019/12/looking-back-on-computer-science.html","Christmas break for me until 6 January 2020 and with Christmas over I have some time to think. 2019 was an intere3sting year in CS education. States continue to adopt more CS in K12. Teachers are still in short supply but so to are schools looking to hire them. Schools or perhaps school administrations and school boards, are slow to roll out more CS education. It looks like more schools are offering it which is great. But they are net requiring it so while they meet to checklist of offering CS it is still not for everyone. It’s going to take a while. AP CS Principles continues to grow in enrollment. I try to get excited about that but it’s hard. AP courses attract too small a subset of the over all population. While there is much to like about AP CS Principles I can’t help but believe we need some more interesting CS courses. Something with depth and an interesting and motivating outcome. The Create task is not that. Every year I think that the Internet of Things will take off in CS education. The mix of bytes and atoms seems like a natural to me. That didn’t happen in 2019. Perhaps because there is no one promoting it. I plan on retiring from the classroom in the spring. Maybe after that I will have to time to really dig into it. Who knows, maybe I’ll come up with some good project ideas. Cloud computing grew a bit in interest in 2019. Amazon Web Services has done some great work on this. Uptake has been slow but at some point it may take off. The problem with cloud computing, and perhaps IoT, is fitting it into the curriculum. It doesn’t fit easily in either AP CS course and too many teachers are working and teaching too many preps to adopt major new topics. Artificial Intelligence took a jump in interest that surprised me a bit. There was a huge birds of a feature on the topic at last summer’s CSTA conference. AI for K12 has its own website, mailing list, and lots of people interested. See AI4K12.org for more on that. What sort of Artificial Intelligence can you teach in K-12? Mostly how it is used, how to use existing AI tool and machine learning training systems. Developing real AI takes a lot of math that not many K-12 students have yet. Still, it is very important that students learn this much. The need to know what AI/ML is, how it is used, and discuss the ethnical considerations involved. As always,the new year is full of potential. K12 CS is on a growing path that seems to have some momentum behind it. I can’t wait to see what it brings."
"53","2022-12-04","2023-03-24","https://blog.acthompson.net/2022/12/when-computers-write-code.html","For most of my career I hive been hearing that some day computers will write all the code and human programmers will no longer be needed. Or at least, not as needed as today. Are we getting close to that time – finally? And if we are what does it mean for teaching computer science? Recently, the CS education world has been discussing GitHub Copilot. GitHub Copilot uses the OpenAI Codex to suggest code and entire functions in real-time, right from your editor. While some of the discussion has been about the suit against Copilot (GitHub Copilot litigation) much of the discussion has centered around what it means as a tool for cheating by students. More recently there has been some visibility to the use of ChatGPT to write answers to programming questions. For example, this year’s Advent of Code seems to have been “invaded” by ChatGPT climbing the leaderboard by answering the problems is seconds. (Adventures With ChatGPT: Advent of Code Edition | Tabs, Not Spaces) Of, perhaps, even more concern to teachers, ChatGPT seems to be somewhat satisfying as a solution to Advanced Placement Computer Science A questions. (ChatGPT passes the 2022 APCSA free response section) I’d be very surprised if students are not already using these tools. This brings up several questions. One is - how do teachers keep this from happening? We probably can’t. So how do we detect when it does happen? Do we use these tools ourselves to see what sort of code is generated for our assignments? Seems like yet more work for people who don’t have enough time as it is. Another question, which students are sure to ask, is what is the purpose of students writing code that artificial intelligence can write easier and faster? If you read the article above about putting the APCS A questions through ChatGPT you’ll see that the results are not prefect. So for the time being it looks like good programmers can still write better code than the AI. How long that will last is anyone’s guess. If history is any guide, it will not last long. I remember when optimizing compilers started generating more efficient than the world’s best assembly language programmers could write. It was painful for some and a real boon for others. It didn’t completely do away with the need for assembly language programmers but it did reduce the need. What do we tell students who ask “what’s the point of learning to code?” My thought is that we talk about the need for human oversight of AI generated code. We need to verify that it works as we want it to work and that means we need to understand code. We’re also going to need to fine tune generated code for some time to come. Understanding code will also help write good instructions for the AI that generates code. Again, understanding how code works is important for that. Of course, there is a lot more to computer science than just writing code. Programming languages are the language of that study. Learning assembly language still helps people understand how computers and computing works. So will learning higher level languages. The AIs will get better. Our conversations with students will get harder. Cheating is always going to be a challenge. We live in interesting times."
"54","2022-08-16","2023-03-24","https://blog.acthompson.net/2022/08/artificial-intelligence-and-cs-education.html","It;s seems like artificial intelligence has been “10 years away” for the last 40 years. Back in the mini computer days every computer was custom and configurations were designed by people. I worked for a company that believed that configuring computers was beyond the ability of computer software. From there I went to a different company that was developing rules based artificial intelligence. Using a special language called OPS5 they wrote software that configured computers faster and more accurately than people. Rules based AI was dependent on people to know the rules and properly prognathism. Limitations became apparent. Today we have machine learning which basically means the computer is developing the rules. Rules is probably not the best definition though. We’re starting to see AI grow into many more areas than ever before. Think self driving cars for example. It’s becoming clear that understanding the world today means understanding something about artificial intelligence. What does that mean for K-12 computer science education? The AI3K12 project is working on answering questions about teaching AI in K12. They have a lot of resources now and under development. For now, most of the education is about AI. What it is. How it worse conceptually. What is it being used for. And, perhaps most importantly, what does AI mean for society and the future. The math and science of creating AI platforms s a bit too much for most high school students let alone younger students. That can wait. Although there are tools that exist that students can use for their own projects which is pretty cool. I am very concerned about bias in artificial intelligence (Bias in Artificial Intelligence. Inequality, racism and discrimination is just one article you will find from an internet search for “Bias in artificial intelligence) Systems that do not recognize that people of color are actually people is only one example Bias against women or various other groups of people can be baked into AI systems if developers are not VERY careful. Also, how is AI being used? Facial recognition and privacy have become areas of concern in many areas and applications. These are more than just ethical issues, though ethics has got to be a core part of what we teach, as many other problems are unconscious bias or the result of innocent but false assumptions made by people who mean well but lack understanding of their own environment. Its a reason we need a lot more diversity is AI and CS as a whole. We have to teach students to think about these issues and to think beyond their own identities and beyond “the way we have always done it.” Companies in industry are taking new looks at AI as well. One useful resource is Microsoft's framework for building AI systems responsibly - Microsoft On the Issues. The blog post talks about some issues Microsoft has faced and how they are addressing them. Companies are asking the “should me” question as well as the “can we” question. We need students to think about those questions from the start. The document itself is at Microsoft-Responsible-AI-Standard-v2-General-Requirements-3.pdf and makes interesting reading. It could start some class discussions as well."
"55","2022-07-15","2023-03-24","https://blog.acthompson.net/2022/07/my-day-two-at-csta2022.html","Day two started off great as I connected with several people from my home CSTA Chapter –CSTA New Hampshire. The CS community in New Hampshire is growing and the CSTA Chapter has been a part of that. I’m planning on getting more involved in chapter stuff in the future. My first session of the day was about teaching ethics when teaching artificial intelligence. Jeremy Keeshin (a last minute replacement as I understand it) from CodeHS was the presenter. Seems like some good small group discussions took place. Maybe I was tired but I didn’t get into it very well. My fault. Wasted opportunity. I did get a copy of Jeremy’s book “Read Write Code” which I look forward to reading. Next up for me was a session on preparing the future developers of the metaverse. The presenters were from Carnegie Mellon. First I have heard of XR as a generic term to include Augmented Reality, Virtual Reality, and Modified Reality. We had some really interesting discussion of using virtual worlds in school. One school had a virtual birthday party in Minecraft. Minecraft has moved from pure play to an educational platform. Students are picking different virtual worlds to play in as they age.It occurs to me that younger kids are building things in games like Minecraft and Roblox but older students, especially boys, and moving to games like Call of Duty which are more destructive. Something to think about. My number one to look more into is Arena XR – An Augmented Reality Edge Network Architecture. I really enjoyed this session and had some good interactions and learning with my tablemates. Slides for this session are at CSTA2022 NoStudentLeftBehind.pdf - Google Drive Lunch break and more time in the exhibit hall. I got a close look at the Jacdac devices for use with a Micro:Bit. I may splurge and buy a starter kit. Note that I posted a brief look at Microsoft and other big companies exhibits at Amazon, Google, Meta, and Microsoft at #CSTA2022 First afternoon session was about writing for Hello World magazine. I was proctor and arrived before it started but after most people entered the room. Watching the clock is important as it is so easy to get distracted with so much going on. Anyway, the slides for this talk are available at CSTA_Writing Workshop Presentation.pptx - Google Slides A lot of good stuff here. I hope this gets more teachers to write for the magazine. Next up was a session on cryptography with an exercise in creating a Pringles can Enigma machine. We started the session with an brief introduction to Cyber.org and with an introduction to the Pigpen Cipher. (Note that this is one of the ciphers covered in my (PDF) free Tiny Book of Simple Cryptography) We had some fun creating our mini Enigma machines and working though how they work. We only used one rotor but I brought home some sheets to make a larger one with a larger can when I get home. Overall, a pretty good day. Some very good sessions, some good conversations at the exhibit hall, and many amazing face to face conversations with friends. I am exceedingly glad to be here this year."
"56","2022-07-15","2023-03-24","https://blog.acthompson.net/2022/07/amazon-google-meta-and-microsoft-at.html","I blog about what interests me or stirs my curiosity. One thing that fits that is what are the really big tech companies doing to support CS education. So I am going to write briefly about the presence of Amazon, Google, Meta, and Microsoft (alphabetical order). Anyone else notice that we never see Apple at CSTA? All of these companies have sessions at their booths and as regular conference sessions to talk about what they offer. If you are at CSTA you should at least stop by and see what they have to offer. It’s a lot. Amazon and the Amazon Future Engineer Program Amazon had one of the large end cap booths with a lot of people and materials. Their main emphasis was the Amazon Future Engineers program. This program offers curriculum for all levels of K-12 as well as resources and opportunities for teachers. Amazon Future Engineer is a comprehensive childhood-to-career program aimed at increasing access to computer science education for children and young adults from underserved and underrepresented communities. Google and programs' for CS Teachers Another big booth on an end cap. Lots of color and fun graphics. And swings! Also free messages. The big thing here is Google’s CS First program. This is a great collection of curriculum and supporting resources that can be used during the school day or as an afterschool program Meta and Meta Engineer for a week. You’re probably not surprised that the link for more information on this is at Facebook. Engineer for the Week | Facebook but also at Engineer for the Week (fb.com) The curriculum has a strong “coding for good” component. Started in 2018, Meta's Engineer for the Week is a free program that introduces engineering to learners (ages 11-18) historically underrepresented in STEM. Over the course of 15 - 20 hours, learners work alongside adult facilitators to build tech prototypes that address a social issue of their choice. Microsoft and MakeCode, MakeCode Arcade, and Minecraft Also a nice sized booth on an end cap. Not as fancy as Google’s it gives the impression it was designed by software people not marketing experts. The emphasis was on writing code, especially with micro:bits, using MakeCode, games with MakeCode Arcade, and teaching CS using Minecraft. Lots of things including Micro:bit powered arcade games to touch and explore."
"57","2022-07-14","2023-03-24","https://blog.acthompson.net/2022/07/day-one-csta2022.html","Well it was day one for me. I know that some people got in yesterday or earlier either because they were taking a workshop today or were part of the Chapter Leadership program. For me, today was about getting settled, meeting with old friend (and making some new ones), and the exhibit hall. Wow! has the exhibit hall grown. The conference as well. Apparently there are about 1700 attendees registered. I remember thinking 300 was big some years ago. Looks like about half the attendees are first timers as well. That is amazing and wonderful My trip was good. I checked in for my flight with an app. I paid for the El (Chicago’s mass transit trains) with an app, and checked into my hotel with an app. Travel seems to be all about the apps these days. The exhibit hall was open soon after I arrived at my hotel so I went right in after registration. Proof of vaccination is required to attend and wearing masks is required as well. I’m good with that. I hear a lot of people got COVID at ISTE and these measures make me feel safer. It seemed to work at SIGCSE! I met many old friends while in the exhibit hall and walking around the conference. Catching up was great. We also talked about CS issues of course. So great to have people who share ideas. I couple of people I have not met in person before but who I know from social media visited with me as well. It is so good to put faces with names and be able to get to know each other. If you are at CSTA and are a blog reader or Twitter follower I would love to chat with you. I walked through the exhibit hall several times to get a feel for what themes there are. I’ll be blogging for about that as the conference goes on but I’ll share a few first thoughts here now. Physical computing is big in the exhibit hall. Lots of robots but also many other programable gadgets. Cyber security was represented by several exhibitors as well. We really need to teach more of that in the US so I was glad to see thing. Several artificial intelligence programs were being highlighted in the exhibit hall. I want to dig into that more this conference. Lots of curriculum providers are exhibiting which is not surprise. They’ve all be exhibiting at CSTA for several years. The companies with hardware all have curriculum as well. It’s not like the old days when people dumped some hardware and said “here. Figure out something interesting to do with this.” Progress I think. Google, Microsoft, Meta, and Amazon have booths as well. There is a set of swings in the Google booth (Pictures tomorrow) I’ll write about their programs as well when its not 11PM my body time after getting up at 6AM and travelling all day. Today was everything I wanted my first day at in-person CSTA. Still more friends to meet and make and lots more to learn."
"58","2022-03-06","2023-03-24","https://blog.acthompson.net/2022/03/final-thoughts-on-sigcse-2022_0230979390.html","I had a great time at SIGCSE 2022. As an introvert I probably suffered less from not being with people than many but after two years I really needed to be with people. I was able to connect in-person with friends I had not seen in years. Some a decade or more. That was truly awesome. The community building of an in-person conference should not be understated. I had some great “hallway track” conversations. This is not nearly as easy in a remote conference and it contributed to what I was learning. Besides being with people I really did want to learn. So my hallway conversations were not all catching up with friends. I was able to ask a lot of questions about the work various people were doing. Things often outside the scope of a specific talk or panel that I attended. I visited with Ruthe Farmer of the Last Mile Fund. The Last Mile fund is “investing in a broader group of students already committed to technology and engineering fields, providing support for challenges they face beyond their control, and incubating them to be the next generation of innovators.” It’s an amazing program that helps students who are missed by a lot of programs giving them the help they need to complete their educations. They are particularly focused on women but have some money for men in community colleges. Check them out if you know someone who needs a little help making it through. It seemed like there were multiple interesting sessions in every time slot. Where I had to choose I picked panel or supporter sessions over paper sessions. Mainly that was because with paper sessions I could at least read the paper. Not the same thing but it was that or miss out on a panel completely. The elephant in the room may have been COVID and masks. COVID times was a topic of conversation but masks? Not that I heard. The conference organized stated that even though CDC guidelines had changed the attendees had signed up expecting everyone would be masked so they were going to stick with that. I think it was the right decision. While masks are not always comfortable and they make it a little harder to recognize people it added to comfort levels for many attendees. Including me. Sessions were split between the Rhode Island Convention center and the Omni hotel. The two are connected and traveling between them was pretty easy. I have a bias to all being in the same building but honestly I have walked further between sessions in some convention centers so there is that. The rooms themselves were large, accommodating people sitting apart if that made them more comfortable. I suspect that is what required using both facilities when one might have divided large rooms under normal circumstances. Hybrid sessions where some or all of the presenters were remote were interesting. It worked pretty well overall. I hear there were some that were played recordings with no interaction but I didn’t “attend” any of them. The real bonus of a paper session is being able to ask the author questions so that is important. Mike Zamansky has more on this on his post at SIGCSE 2022 - Conference format. I left Providence with a lot to think about and some great memories of visiting with people face to face – even with masks. Now to renew my passport so I can attend next year in Toronto!"
"59","2022-03-07","2023-03-24","https://blog.acthompson.net/2022/03/what-should-apcs-really-be-about.html","Perhaps my favorite panel of SIGCSE 2022 was debating the question of should the APCS A course switch its language from Java to Python? During the discussion it occurred to me that there was a bigger question that had to be answered first That is “what is the purpose of APCS A?” Now the normal and obvious answer is that it should be equivalent to university CS1 courses – the first course CS majors take in university. That's too easy and also not helpful. What should CS1 be all about? Traditionally, CS 1 was a course taken by CS majors and was preparation for the rest of the CS curriculum. Today it is not that simple. Increasingly, other departments in other disciplines are wanting their students to take CS1 or something much like it. Engineering, astronomy, physics, and business are just some of the areas where programming is growing as a tool. The CS department is the best department to teach this first course. What does that mean? Well, for one thing it opens the door to more programming languages. While Java and C++ are the big languages for a next course for CS majors the same is not true for other departments. Without getting into the language discussion (until my next post) we need to look at what concepts are needed and ask if they are similar enough for everyone. Owen Astrachan suggested at SIGCSE that the “A” in “APCSA” has traditionally stood for “Algorithm” but should now stand for “API.” Not that we ignore algorithms of course but that APIs were the way computing was increasingly being done. If we look at how non-CS programs are using programming we see that this is very much the case. This probably means that for CS to remain and improve as a teaching, learning, research tool it has to focus on APIs as well. That is probably only one example of things we should look at changing (in APCSA and CS1) I get the impression that many university departments are already changing and looking at changes as they see their CS1 course serving more than just CS majors. Circling back to APCSA in particular, are all of our APCSA students going to major (or minor) in CS? Probably not. Many? Perhaps. But a majority are probably going to move into other areas of study. To we ignore their needs to focus only on future CS majors? That seems a recipe for turning students off from computing completely. High school courses should never be weed out course. One can have a rigorous impactful course without scaring people away from the field. There is a lot of thinking about what CS1/APSCA should be about and I want to learn more about how university departments are adjusting to today’s needs for students. Keeping things the way they are today just because we have always done it that way seems a lot less than ideal. What is your thinking? What should CS1/APCSA be focusing on?"
"60","2022-03-08","2023-03-24","https://blog.acthompson.net/2022/03/apcs-ajava-or-python.html","There is a lot of discussion about moving the Advanced Placement CS A exam to Python from Java. The Collegeboard is reluctant to do so. They see APCSA as the equivalent to CS1 or the first course for CS majors in university. They cite research that indicates that APCSA students for very well in CS2 (usually data structures) and that CS2 is almost always taught in Java or C++. On the other hand, at many universities the purpose of CS 1 is growing and the audience is widening to include students from many different majors. I wrote about that yesterday (What Should APCS A Really Be About?) Mike Zamansky took it on on his blog as well (SIGCSE 2022 - What language APCS-A part 1 - the intent) It seems like we have to first agree on the intent or purpose of APCSA (and CS1) before we discuss language. Given that agreement is never going to happen – CS people can’t agree on anything. So I will start my discussion from the standpoint of APCS A should increase diversity in computer science and prepare students for using computing in CS as well as other disciplines. This is a concepts first decision not a language first decision. I feel that non-CS majors need the same concepts as CS majors. SO what are those concepts? Not a lot changes except that in computing widely APOs are bringing far more critical than they used to. They enable programmers to easily do things that used to be hard. They also more things we used to do early to later in a CS major. Sorting is one example. With so many libraries to do sorting why should we spend a lot of time in a first course having students write sorts? We know they sorts they will write are not going to be up to the standards and power of sorts they can call that exist already. Algorithms? Surely there are other algorithms we can focus on to help students learn to study problems and developing algorithms? So if we want to increase the number of students who study computer science beyond the limited scope of would be computer science majors preparing students for CS2 loses some power in the argument. And Python gains some because of all the APIs that are available and all the other disciplines that are already using it. At SIGCSE, the panel members arguing for Python talked about much of what I write above. They also talked about Python avoiding some of the “cruft” of Java. How much easier “Hello world” is in Python for example. The “other side” focused mostly on the costs of changing and not specific criticisms of Python. There are things about Python that people do raise. It’s dynamic typing rather than Java’s strict typing. I’m a strict typing person myself but I can be open minded. Also the use of white space. Now it is not clear to me that either white space or curly braces have advantages over the other so I see that as a wash as well. The post panel poll, FWIW, had 57% saying to switch to Python and 28% saying “keep Java” with the rest being answers all over the map. I have no dog in this fight since I no longer teach AP CS but I am leaning toward that it is time for a change. I like the idea of a high school course, even on modeled on a university course, preparing a wider range of students for a wider range of majors. The Collegboard is going to do what they want and the costs of changing may be as big a factor as anything. They are also driven by what universities do and as universities revisit the purpose of CS1 that will have more impact on anything anyone in high school has to say. Mike Zamansky has a different take on this at SIGCSE 2022 - APCS-A Language strengths and weaknesses"
"61","2023-02-12","2023-03-24","https://blog.acthompson.net/2023/02/cs-studentslearn-your-ide.html","Eugene Wallingford had a great post on WHAT WHAT DOES IT TAKE TO SUCCEED AS A CS STUDENT? It’s got a lot of good advice and I recommend it to students in high school or university. For now I want to focus on one or two pieces of his advice. Specifically, “Get to know your programming environment” For the most part, in class, teachers have time to do an introduction to the development environment but not much more. We run through “Hello World” or similar to walk students though creating a project entering code, and running their first program. That;s all we have (or perhaps all we make time) for. Typically there is a lot more to a development environment than what we show students. Even a simple IDE like IDLE for Python or Visual Studio Code has a lot or options and functions we don’t go over in class. Students who spend some of their own time exploring their development environment are going to have an easier time though out their course. Indeed, throughout their CS career. Related to learning your development, Prof Wallingford suggests keeping your IDE open while reading through textbooks or other resources. That lets one more easily try out code examples while studying. That goes a long way towards understanding what one is reading. When I review textbooks or other teaching resources I always run the code examples for myself. In part , to see if they are correct of course but also to see for myself what students will see and learn from the example. Writing code that is not specifically assigned for a course is always a help for learning. If a student takes the time to experiment with a project of their own interest they will do far better in the course they are taking."
"62","2022-09-03","2023-03-24","https://blog.acthompson.net/2022/09/names-have-power-names-and-programming.html","""A rose by any other name would smell as sweet"" William Shakespeare. There are cultures where people have a sort of public name and a secret or true name that is rarely shared because knowing ones true name gives people power over them. In fact, knowing a name is powerful in all cultures. Consider the difference between calling “hey you” versus calling a child by their actual name. Which way draws them up sharp? Naming is important in computer programming as well. It’s not always as easy or as simple as beginners assume it is. Mike Zamansky’s post Subtle Errors gives a good example. Having more than one item with the same name causes the sort of ambiguity that computers do not handle well. Some names (identifiers as we often call them in programming) have special meanings. Getting names slightly wrong can cause other problems. A name can provide a great deal of information to a programmer. To the compiler names are pointers to more information. A variable name identifies a location to the computer. Other information about the data stored in that location is specified in other ways. The computer doesn’t care what characters make up the name. That it is unique is important but not the characters involved. In many programming languages the case of the letters makes two names completely different. People tend to see them as identical. Beginners often think that “the computer” pays attention to everything in a program the same way people do. That’s not the case though. I’ve had students write comments in their code believing that the computer will read the comment and perform the action. They may also assume that naming conventions, starting all integer valuable names with “int” for example, will influence the computer. Again, not usually the case. [Note: back in the day, any variable starting with one of the letters “I” through “n” was automatically an integer.] Names/identifiers can communicate a lot of information to programmers. They are pretty important for sure.It is easy to gloss over them and minimize their importance. Getting them right though is something worth spending time on."
"63","2022-08-17","2023-03-24","https://blog.acthompson.net/2022/08/a-spoon-full-of-computer-science.html","I was thinking about data science lately. The problem is that I don’t know much about data science. I learned about data bases in school and worked with them some in industry but that was mostly about how they work internally. I used to give talks on how B* Trees worked and I could (back then) give serious talks on how databases do journaling. But I never did much of anything with real work data applications. Not professionally at lease. But I do like playing around with data and Excel is my friend. So my first thought was to look at Bootstrap’s data Science curriculum. I did find their definition: data science the science of collecting, organizing, and drawing general conclusions from data, with the help of computers. Sounds good to me. I guess I have been doing some data science after all. Looking though the curriculum had me thinking about Mark Guzdial's work with teaspoon languages. It feels like there are some things Bootstrap and Teaspoon languages have in common. The idea of teaspoon languages is to add some computer science to other subjects to broaden participation in CS. Bootstrap is using data sets from other subjects in their curriculum. So both are using CS and programming to help students learn about a lot more than just computer science or the subject they are taking. Note that Bootstrap also has Bootstrap Physics! and Bootstrap Algebra. While I was doing all this thinking Mike Zamansky posted this post - Teaching CS - How early and how often? Mike askes a lot of practical questions about fitting CS into grades k through 8. It’s easy for us zealots to say that CS should be in every grade and expect K8 teachers to make magic but that is not really fair to anyone. Maybe the answer is to have some teaspoons of CS in existing subjects. It doesn’t make a lot of sense unless adding this CS makes learning the subject it is imbedded into better though. We’ve seen for years in higher education that computer science and [some other area of study] can be a big win. Can we move some of that down to lower grades? Probably though it is going to take some time and some innovation. It’s worth doing, in my not so humble opinion. We use math in other subjects. We use reading and writing in every subject. Might not CS help teach/lean a lot more subjects than just programming? I think so."
"64","2022-07-12","2023-03-24","https://blog.acthompson.net/2022/07/dice-simulations-and-math.html","My friend Andrew Parsons send me this link to an interesting video The unexpected logic behind rolling multiple dice and picking the highest. Now I love simulating dice on the computer. Creating a Die class is one of my favorite projects for teaching objects and classes in programming classes. I’ve long kept example of dice with other than six sides around to help students think outside the six sided dice box. So this video grabbed my interest. Basically the presenter is looking at what happens if you roll two dice and pick the higher value of the two. What sort of advantage does it provide?. So this gets into some probability and some related math. One of the first things he does is to look at the problem through a simulation (His Python code is here) OK now I personally would be happy with the simulation but of course that gives one the “what happens” but doesn’t go into why it happens. The math does that. The math is presented in an interesting way if a bit fast for me. I can see it being useful in an algebra or statistics class though. Lots of good math stuff. (Can I say “math stuff?) For a computer teacher, the things this goes though are ripe for simulation problems though. What is the result for two dice? For three dice? And what about dice with more sides than six? What do you think? Have students watch the video at home and build their own simulations to compare with the mathematical results? BTW the dice at the top of the post were made with a laser engraver that I have been playing with. Figured dice in binary would be fun."
"65","2022-07-11","2023-03-24","https://blog.acthompson.net/2022/07/getting-ready-for-csta2022.html","The CSTA Annua Conference is only days away. I’m pretty excited about it. It’s my first plane ride since CSTA in Phoenix in 2019. That’s a long time for me. Or was. The online conferences have been excellent but there is nothing like seeing people in person. Attending SIGCSE this past winter really brought that home to me. I’ve taken a couple of quick looks at the schedule but I still have to finalize (as much as possible) what sessions I want to attend. I am not doing any workshops this year so I don’t get in until the 14th. But the rest of the conference should be full for me. If not regular sessions, I am hoping for some great conversations in the “Hallway Track.” Packing is something I will probably not do until the day before I leave but I’m making decisions about what to bring. I got a new phone for example. Battery life on my last on was horrible and my new one will go all day. I’ll bring a laptop as well. I like to take notes for my blog posts and also to Tweet live. Since I am not presenting one should be enough. I tend to bring a backup if I am presenting. I’m loading some books onto my Kindle for reading on the planes. I have charging cables ready for all three of course. And an extension cord with USB plugs as well as standard sockets. Don’t leave home without one! In previous years I packed extra cables for just about anything I could think of because you never know what someone will need. I’m going light this year. My backpack just got to heavy. Plus I want room for swag. I do plan to come with badge ribbons (Troublemaker and “I follow AlfredTwo”) if I can find them. Probably some business cards. I recommend these if you have them BTW. I’m looking forward to the exhibit hall as well. I already know some booths that are “must see” for me. I am told that Microsoft will be there with some of their new Jacdac kits and I want to check them out. I am hoping that there will be some booths on cybersecurity (CYBER.ORG is a sponsor so they will probably have a booth). I’m always up for robots and I expect to see some of those as well. If you’re there I hope you’ll find me and say “hello.” If not, follow the #CSTA2022 hash tag on Twitter and visit my blog for updates along the way. So are you ready? What are you excited about?"
"66","2019-09-05","2023-03-24","https://blog.acthompson.net/2019/09/ncwit-award-for-aspirations-in-computing.html","This is a great program for high school girls interested in technology. I have had several students get awards at the state level and they all say it has been a good thing for them. Hello Educators! Applications for the NCWIT Award for Aspirations in Computing are now open! The deadline is November 5th, 2019. As an educator, you play a pivotal role in supporting the next generation of technologists. When 2018 AiC Award recipients were surveyed about their motivation to apply for the award, 65% of respondents named outside encouragement to apply. When asked about who most influenced the award recipient to apply, 62% of respondents named Teachers/Educators. Encourage your students to apply and spread the word! When you endorse a student’s application, you are eligible and encouraged to apply for the NCWIT Educator Award. Applications are due December 2nd, 2019! https://www.aspirations.org/participate/high-school"
"67","2018-09-05","2023-03-24","https://blog.acthompson.net/2018/09/ncwit-award-for-aspirations-in.html","Recipients of the NCWIT Award for Aspirations in Computing receive engraved awards, scholarship and internship opportunities, entry to a peer-network of technical women in the NCWIT AiC Community, various prizes, and more. // Share this status with women in grades 9-12 who should apply! www.aspirations.org/AiCHSAward Several of the girls in my school have received this award in the past and it has been impactful for them. Highly recommended."
"68","2018-09-10","2023-03-24","https://blog.acthompson.net/2018/09/do-we-really-need-cs-focused-high.html","Last week Bill Gates visited the Academy for Software Engineering, a computer science focused high school in New York City. and wrote about his visit. At first reading I was thinking the visit was a good thing. I still think it is – for the most part. Mike Zamansky had an interesting take on the visit (That Time Bill Gates Visited AFSE) that got me thinking. Basically I like what AFSE is doing but after reading what Mike wrote, I wonder if we really need CS focused schools or could we just do all that stuff at “regular” high schools? The design class that Gates writes about is a lot like the one my wife teaches at a small, semi-rural high school in New Hampshire. It’s not a CS focused school at all. In fact, their CS offerings in general are pretty limited. But that doesn’t mean that CS concepts can’t be included in other courses or introduced in middle school exploratory courses. What is takes is administrative support and a trained and motivated teacher. And CS is growing there! Also last week, Porter-Gaud, a private school in South Carolina, released a video about their two high school CS teachers (Doug Bergman and David Renton – both friends of mine who I admire greatly) and some of that they are doing with their students. Among other things they have their seniors writing software for virtual reality headsets. (Do check out the video of The CS Dymanic Duo ) Porter-Gaud is a college preparatory school not a CS focused school. And yet they have an absolutely amazing computer science program. Again, what they have that many other schools do not have is an administration that is willing to support teachers who are creative, motivated, and willing to learn on their own or (even better) with their students. We know from several recent surveys that parents want more computer science education. It is tempting to think that specialized schools are the answer. A lot of people think that CS is not for everyone. Wrongly as evidence strongly suggests. We are also faced with a shortage of teachers with the background to teach more advanced CS and that makes sending them to specialized schools attractive. If we focus too much on special schools I worry that we perpetuate the idea that not everyone is cut out for CS or that not everyone needs to learn CS. A school like AFSE is trying a lot of things to merge CS into other subjects. That’s a great thing but it will be even greater and more influential if the things they learn about integrated curriculum is shared with comprehensive high schools. In the long run we as a society will benefit more from things learned in CS focused schools migrating to the wider population of schools than we ever will from the small number of students who pass through these schools."
"69","2018-09-16","2023-03-24","https://blog.acthompson.net/2018/09/preparing-students-to-ask-questions.html","I drove behind a Google Maps Street view car for a couple of miles today. Things I wondered about: Will my car show up on Street View? What is it like to be one of those drivers? What sort of meta data are they collecting? That last question is key. I thought of that because I know something about computer science. I also know that there has be controversy about this in the past. I think I would have wondered about the meta data anyway though. What is the meta data? What is it used for? Who has access to the data? Lots of questions of the sort we, society, need people to ask. Not just computer scientists but all sorts of people. How are they going to know to ask if they don’t understand what meta data is or how it can be used? Getting people a basis of knowledge so that they know to ask questions is every bit as important as the “answers” we make them show on exams and quizzes. This is why we need computer science for everyone."
"70","2018-09-17","2023-03-24","https://blog.acthompson.net/2018/09/the-multiple-natures-of-computer.html","There was a lot of good CS education activity on Twitter this past weekend. I know I missed a lot of it but some things did stand out for me. One of these was this Tweet from Hadi Partovi, co-founder and show runner at Code.Org: This is not really new of course. But it does highlight the fact that we can’t look at CS as all analytical and miss out of the creativity inherent in it. If everyone in the class turns in a project that looks identical do we really know if they understand the concepts or are they just good at following directions? Does everyone come up with the same solution? Or do you, the educator, see solutions that are different from what you would come up with? Letting students getting creative makes things more interesting and motivating. Likewise CS is not just for the college bound or for the career bound. Comprehensive high schools and vocational high schools do tend to look at CS education very differently. We have to be careful that we achieve some balance here. We can’t ignore the tools completely and keep it all theoretical. Nor can we get so deep into the tools that we ignore the concepts that drive the tools. We have to avoid being the blind men judging the elephant only one what is in reach. We have to share more of the elephant with our students so they become whole people and not limited by too much focus."
"71","2018-09-18","2023-03-24","https://blog.acthompson.net/2018/09/deciding-what-to-include-in-high-school.html","The more I talk to people about what should be included in high school computer science the more I thing of the Indian story of the blind men and the elephant. I attended an industry advisory meeting for a local career technical school last night. I attend several of these at several schools every year. I hope I provide some value to them from my time in industry and my education experience. I know for sure I get a lot out of these meetings. Industry attendees always have suggestions of what should be included in the curriculum. Usually their suggestions relate to their particular business needs. Hence the elephant story. Computer science is huge as a discipline but the parts we interact with regularly are the parts we think of as important. When it comes to high school computer science curriculum we do have some standards. The CSTA Standards are really good. In a way though I see them as the floor - the minimum. Even the AP CS courses are not far beyond these standards. They practically read as the AP CS Principles curriculum though one could meet them without the AP CSP course. But what if you want to do more? The standards are also about concepts and not implementation. That is also great. That is how it should be. It leaves us open to the question of how to implement the teaching of these concepts. This is where the things industry wants us to teach, which is often more about tools than concepts, can be influential. If we want it to be. We don't always want to take those suggestions too far as our students are not ready for everything industry would like us to teach. What I have been thinking about lately from conversations with industry people are four things: Cloud computing Virtual Reality/Augmented Reality Artificial intelligence Internet of Things Whoa! That's a lot. And they are all more and more intertwined. It is hard to implement IoT without cloud computing. AI is an important part of VR/AR and the cloud is where a lot of AI is executed. AI, Cloud Computing, and IoT combine for a lot of image recognition. I could go on but if you are a regular reader of this blog you probably know a lot of this. Which of these is the most important? I think we could get arguments for any of the four as well as various combinations. And while we might like to think we can include a little of each, let’s face it, any of these could be a year long course by itself with bits and pieces of the others to support the main emphasis. So what is a teacher to do? Personally I have totally decided. Actually, just about every day I totally decide on a different one of those four things. Not helpful. Sigh. Cloud computing looks pretty exciting. Amazon Web Services (AWS) and Microsoft’s Azure both have programs for educators. AWS Educate from Amazon and free Student Azure accounts from Microsoft. Which to choose? I need to spend some serious time looking into both of them I guess. Anyone using either of them in high school want to help me out? Virtual reality/augmented reality is quite “sexy” and I can see it attracting lots of student interest. David Renton is having his students program VR which is cool. But at $200 a head set funding a classroom set seems daunting. Still it is cool. And one can teach a lot of concepts to students who are highly motivated to create something awesome. Where do I start with artificial intelligence? Microsoft AI School looks like a good place to start learning and using some of their AI tools. OK I’m overwhelmed. I need a face to face course. Somethings are just too much for my old brain. Internet of Things may be the item that interests me the most. It is a mix of hardware and software and my gut tells me that is as much key to the future of computing as anything. Mix in a little cloud computing for hosting. Perhaps an existing AI took for analysis. Maybe even a little visualization. Not quite VR/AR but interesting non the less. That could be a great course. Now all I need is curriculum or a year of free time to learn it on my own enough to develop curriculum. Sigh (again) What I’d really like to do is have a class where the students figure all these things out themselves. Have them design and build a major project involving one or more of these technologies while doing the research, experimentation, and learning while I coach. Perhaps connect them with people and documents and videos and the like. Then they can teach me. Now wouldn’t that be great!"
"72","2021-09-20","2023-03-24","https://blog.acthompson.net/2021/09/book-reviewsystem-error-where-big-tech.html","System Error: Where Big Tech Went Wrong and How We Can Reboot is what you get when a top philosopher, a top political scientist, and a top computer scientist get together to think deeply about technology and society and write a book. It’s not a book for just one group. It’s not a dry textbook or academic paper but a clearly written explanation of the issues. It’s a book for everyone. The book talks a lot about both artificial intelligence and social computing which are more connected to each other than may be obvious at times. The social and political impacts of these topics and others are covered in a clear and understandable way without hyperbola, scaremongering, or blatant cheerleading. This is one more thing that makes it stand out from many other books on these topics. Yes, there are parts that are scary. Yes, there are parts that are optimistic. All in all though it is as fair and open minded a book as one can get. The book askes questions that have to be asked. There is enough data and sets of facts to give one a lot to think about. In fact, I found several times that I had to put the book down to think about what I had read. It’s that sort of book. Were I teaching Advanced Placement Computer Science today, especially Principles but also APCS A, I would assign reading from it and have class discussions. If I could not get a class set I would at least have some copies in the library put on reserve. But I’d really like my students to read it all. This is a book that should be on some required reading lists. Computer scientists really do need to think about the “should we do this” question as much as the “can we do this” question. This is the book to start thinking that way. But policymakers need this books as well. So do business people. So give it to the polysci and business majors you know. A lot of social scientists should read it as well – sociology, psychology, social work. Probably more. It will help one understand what people are dealing with in today’s world. Technology is impacting society, and our democracy, in many ways. Some are obvious and some are not. If we want to have a civil society we need to think deeply about the impact of technology on individuals and organizations This book is a great way to start."
"73","2021-09-24","2023-03-24","https://blog.acthompson.net/2021/09/an-ai-tutor-for-cs-education.html","Recently I came across a Microsoft Research project called AI for Programming Education. The project “goal is to build a personalized and autonomous intelligent teaching assistant (an AI Tutor) for programming education, enabling on-demand education.” It’s an intriguing and I think ambiguous idea. I tend to be skeptical of AI tutors as a general idea. A half dozen years or so ago I attended a workshop at Microsoft Research dealing with hinting systems. In other words, how can the computer give hints to beginners. I wrote about hinting systems and the workshop here. The tl;dr is that it is a hard problem. No surprise to teachers of course. Knowing when to hint and how much to hint is a tough problem for human teachers. For a computer AI it is going to be harder still. That’s just one part of what an AI tutor would have to be able to do. I don’t know any more about the project than what I read on the web page (link above) and that they are looking for a CS Education researcher to help with pedagogy. CS Education/Pedagogy Research Internship Opportunity at Microsoft (AI-driven Program Synthesis in the PROSE team) That is an encouraging move. With more and more of education moving to the cloud, more and more online curriculum being developed, and systems that are getting smarter about helping programmers to write code (IntelliCode Completion In Visual Studio (Preview) 2022), creating an AI tutor seems like a logical project to take on. I assume papers will be published. I look forward to reading more about this project over time."
"74","2021-08-26","2023-03-24","https://blog.acthompson.net/2021/08/intellicode-completion-in-visual-studio.html","There is a preview out for Visual Studio 2022 available and since I a) love to try new things and b) am not limited to by what is on the student computers I have been trying it out. Normally, I don’t see a lot in new versions of Visual Studio that impact me personally or me as a teacher. That is not the case with this new version of VS. The new feature is called IntelliCode Completion. (you can read more about it here) Basically what it does is try to help you write code faster and with less typing. IntelliCode now predicts the next chunk of code based on your current context, and presents it as an inline suggestion to the right of your cursor. If you like it, just hit tab-tab to accept it; otherwise simply keep on typing to adjust the completion further. Take the following code for example. I have a string array declared. In my btnGet_Click method I typed “foreach (“ and Visual Studio showed my the code in gray as a guess of what I wanted to write. In this case, it was right and by hitting the tab key the code was in place. Continuing to type would have replaces the suggestion. For me this has been awesome. It's helped me start all sorts of loops and even helped build Boolean expressions. What does it mean for the classroom and beginners? That is the big question for teachers. I know that teachers are divided on Intellisence which helps with understanding and suggestions with variables and methods. I suspect that if you don’t want your students using that sort of predictive information you’re going to really hate IntelliCode. Even if you like Intellisence, as I do, you may have concerns about IntelliCode. I admit to having some concern myself. My first impression was that it could prevent a lot of typos and badly formed code. It does have that potential. On the other hand, will students put too much faith in the AI and assume code it suggests is correct for their particular program? That could be a big problem. I have had students blame to tools for their own mistakes for years. Teachers can use this for a good discussion of artificial intelligence. What do you think of the information was used to train the AI? (Spoiler – lots of code in GitHub) How well does the AI really understand the context of a specific student project? Clearly, students need to be prepared for using this feature. Students need to know that it is not prefect and that they need to be careful what suggestions they accept. It does look like this feature can be turned off by specific area of help. Maybe there will be a way to turn it completely off easily on release. It’s on by default right now. So what do you think? A helpful feature for beginners or more potential for harm than help?"
"75","2021-09-04","2023-03-24","https://blog.acthompson.net/2021/09/are-you-assigning-projects-or-recipes.html","Chris Lehmann, the amazing principal of Science Leadership Academy in Philadelphia, says “If you assign a project and get back 30 of the same thing, that’s not a project, that is a recipe.” Now recipes have their place for sure. They often make a good start. I see programming as a creative thing (art/craft/skill/science/what ever) and I want to see creativity from my students. For me this starts with day one. In my introduction to my classes I tell students that I want to see creativity. I want them to make projects their own. This can be a difficult thing for some students. There are teachers out there who do want to see the same thing from every student. It makes things easy to grade I guess. Or something. Very often in early projects is is hard to be creative. There are only so many ways to calculate degrees Fahrenheit to Celsius. On the other hand you can ask students to find two measurements they like and convert one of them to the other. You’ll be amazed at the combinations students come up with. Sure you’ll get the simple conversion using degrees Kelvin but someone will do miles to furlongs. Even simple programs can get creative with tools that make graphics easy. C# and Visual Basic both have the Windows Forms libraries to use but Processing can make using Java or Python colorful and graphic as well. To say nothing of a lot of block programming systems. Of course, students getting bogged down in how a program looks can be an issue at times but that can be dealt with though conversation. An even better way is often letting students choose their own projects. I always finish up a semester with a larger project that students select themselves. Student get very creative with those projects. The Advanced Placement Computer Science Principles course requires a Create project which serves a similar purpose. For smaller projects it can take a bit more to encourage creativity. After all if there is known input and expected output that’s going to be the same. Here is where you want students to be creative in their code. Let students decide if they want to use a for loop, a while loop, or even a foreach loop. Decision structures can also be done in different ways. Having students turn in code that looks different is a great learning/teaching opportunity. I love showing students the different solutions that students turn in. This both encourages them to try to be different and lets them see different solutions. The idea is to open their minds to looking at problems in different ways. The most important thing is to encourage creativity. Celebrate it!"
"76","2021-09-07","2023-03-24","https://blog.acthompson.net/2021/09/some-simple-early-programming-projects.html","If you are not on Twitter you may be missing a lot of good things. For example, the other day Kelly Lougheed (@kellylougheed ) tweeted out a bunch of simple labs that only require user input and mathematical operations. I have copied them below because I want to be able to find them again later. I’ve used unit conversion for years but it gets old. Fahrenheit to Celsius, miles to kilometers, grams to tons, you get the idea. It gets boring. Kelly has some great ideas. There is an idea from Neil Plotnick (@NeilPlotnick) below Kelly’s ideas. Have any more? Add them to the comments for future readers! And be sure to follow @kellylougheed and @NeilPlotnick on Twitter. Kelly Lougheed (@kellylougheed ) Programming activities that involve ONLY user input and mathematical operations: Program to calculate the tip Program to calculate cost per person when dining out Program to convert units (made-up units like Harry Potter currency okay) What else? Also just wrote this silly lab where the user can input their age and be told their future in 10/20/30 years (""When you are X years old, you will retire to a desert island"", etc.) 0.3 Fortune Teller Lab Fortune Teller Lab Directions: Where do you see yourself in 10 years? Have the user type in their age, and tell them their future at various ages (which you calculate by adding years to their current… docs.google.com And for extensions, I love little math challenges that involve Ss printing out the result of mathematical expressions (getting practice with operators!). For example, there is the Four 4's Challenge, and also this 1996 Challenge: 0.3 1996 Lab 1996 Lab Directions: Use the numerals 1, 9, 9 and 6 exactly in that order to make a mathematical expression that prints the following numbers: 28, 32, 35, 38, 72, 73, 76, 77, 100 and 1000. You can… docs.google.com Neil Plotnick replying to @kellylougheed I have my students code algebra equations like the distance formula. Also stuff for geometry such as area and volume measurements. Ohms law for physics. Ideal gas laws in chemistry."
"77","2021-09-17","2023-03-24","https://blog.acthompson.net/2021/09/debuggingslow-is-smooth-and-smooth-is.html","Mike Zamansky had an interesting post called What They Used To Know that got me thinking about the old days. Now Mike is a youngster and didn’t really start in computers until the 1980s. I started in the 1970s with punch cards and batch processing. That meant that there was no instant gratification seeing your program run. With batch, one handed their cards to an operator and some time later, hours or maybe a day, one got their cards back with a listing that showed the results. Results usually meaning a list of errors that kept the program from running. Desk checking, studying the listing and trying to fix as many errors as possible before trying again was a bit of an art form. To this day I will often print out a program to look at the big picture in a way that still doesn’t feel effective on a screen. It’s tempting to see that as a way to go – limited opportunities to have the computer check ones code. There are downsides to this sort of thing though. Specifically, having limited runs or at least long waits between runs encourages writing large amounts of code at a time and discourages writing and testing small pieces of code regularly. Being able to hit “compile” every other minute though tends to encourage, or at least support, the beginner tendency to “throw some code in and see what happens.” This wastes time in the long run and often leads to ugly, hard to maintain, and inefficient code. The military has a saying that “slow is smooth and smooth is fast” that some what applies. Slowing down to really analyze code, think smoothly, generally leads to a faster result. Tossing code in on a wing and a prayer is not smooth but chaotic. Slowing down to really look at what is happening is smooth and looks slow to the casual viewer but leads to faster results. As I was thinking tonight and asking, “what if we limited people to some limited number of compiles a day?” It seemed like a good idea until I thought of the possible problems. That’s when I realized that external controls on speed are not the answer. Rather the answer is for developers to regulate themselves. To slow down and focus in ordered to make faster progress."
"78","2022-07-18","2023-03-24","https://blog.acthompson.net/2022/07/a-summary-look-back-at-csta2022.html","CSTA 2022 was energizing! After three years of not seeing people in person it was awesome to reconnect with people. And to meet new people. The energy level was high through the whole event. Masks and proof of vaccination were required which I thought was great. It seemed to work out well at SIGCSE. Quite frankly, after lots of stories' of people getting COVID at ISTE which did not have those requirements I really apricated the carefulness of CSTA. Masks did make it harder to recognize people. I’m glad I wore my trademark hat which one person told me was more famous than I am. Sessions were very good as one expects. The exhibit hall had about 75 exhibitors and everyone was staffed by engaged, knowable, and upbeat people. The hallway track was really fun. I learned a lot from friends old and new in discussions. As I understand it there were about 1,700 people in attendance for everyone to talk to. The venue, McCormick Place was huge. It needed to be to all all of the concurrent sessions. We only took up a small part of the place though. If you explored to far you could easily get lost. And I did. There was food available for purchase in the back of the exhibit hall. It wasn't bad. It was nice not to have to go far and wide to search for food. There were many good places to eat nearby however. I liked that I could get from the conference hotel to the conference without going outside. Especially the day it rained all day. A good number of people approached me to say that they read and value this blog and/or my Twitter feed. I can't tell you how much that means to me. Thank you to all of you. You made CSTA extra special. It looks like next year’s CSTA will be virtual. Sigh. I know that it will make it possible for a lot of people who can’t travel to an in-person conference to get valuable knowledge from sessions. A virtual exhibit hall doesn’t excite me though. And I will miss the hallway conversations. On the other hand, maybe we can have even more sessions and have them available to more people. My previous posts on CSTA 2022 Day One #CSTA2022 Amazon, Google, Meta, and Microsoft at #CSTA2022 My Day Two at #CSTA2022 My Day Three at #CSTA2022 My Day Four at #CSTA2022"
"79","2022-07-16","2023-03-24","https://blog.acthompson.net/2022/07/my-day-three-at-csta2022_16.html","I got an early (for me ) start this morning. I attended a briefing session for session proctors (after missing yesterday’s) so that was good. A hot up of tea and some review of the schedule and I was good to go. First session for me, Developing Cyber Sleuths (link to slides here) Cyber security is a rapidly growing area of need and of course creation. The latter not as fast as the former. One of the key early topics was related to the people side of security – policies and training for people. Hacking people is a key security flaw. New to me term, Purple Team. Combining Red Teams who try to break security and Blue Teams who try to stop hackers. Several interesting resources were shared. You can find them in the slides or course but I like Cybersecurity and Infrastructure Security Agency as a place to start. This sessions wasn’t quite what I was expecting but I feel like the links I got were worth my time. After a couple of great hallway track conversations it was time for Creating All Year with APCS Principles. There were a couple of interesting sessions in this time slot so distance was a tie breaker. Of course, the create task is a special part of the APCS P exam (30% of the grade). This session was packed! Jill Westerlund has her students create a video of their program running at the beginning of the school year.Videos must be in AP submission format and include what the create task requires. What a great idea for getting a jump on what they will need to the exam later! Snipping tools are introduced and required early as well. Require at least one mock task before they have to do the real thing. And grade it based on what they need for the exam. View it as formative assessment. Its about feedback to make sure they know how to do the real task. Be sure the mock task is not something they could turn in as a real CPT. Jill suggests requiring the official create task before your spring break. Bonus link: Jen Manly on Three Keys to a 40 Hour CS Teacher Work Week Jen is amazing. I love her short videos. I’ll bet this was a great session. I spent lunch break and most of the first session period in the exhibit hall talking to people and catching up with some friends. Following people in social media is nothing like catching up in person. Another post on the exhibit hall is in the works. I took pictures. My afternoon session was “Fun, Formative Feedback, and Assessments to Improve Learning” Slides are here. One of the first topics was Parsons Problems – one of my favorite tools. Apparently, there is a Free, open-source graphical Parsons problem creator tool: https://codio.github.io/parsons-puzzle-ui/dist/ Next they talked about rubrics as tools to help and advise students. Next up was peer programming Here is a link to a CSTA Presentation - Pair Programming. Next up was some Autograding tools (links in their presentation)I encourage you to look at their slides for more information and resource links."
"80","2022-07-17","2023-03-24","https://blog.acthompson.net/2022/07/my-day-four-at-csta2022.html","It’s a short day today but with plenty to learn. Last night was a great party at the Museum of Science and Technology. I left early (age?) but I know that a lot of people stayed late and partied hardy. There may be some tired faces in sessions this morning. It was a great community building event so well worth it. First session for me was “You CAN Teach Cyber Security with CYBER.ORG’s Cyber Learning Standards. CYBER.ORG is probably the premier Cybersecurity learning/teaching resources. CYBER.ORG is funded by the US Department of Homeland Security. We heard about a lot of their programs. It seems like they have something for almost everyone. I would start there for Cybersecurity resources for teaching.CYBER.ORG funded a large group of educators to write a set of Computer Science Learning Standards. I had several good options for the last time slot but Nifty Assignments is a must see for me. The version at SIGCSE is always standing room only but apparently it is not as well known at CSTA yet. Baker Franke does a great job of putting this session together. For reference, CSTA Nifty Assignments are archived at CSTA Nifty Assignments SIGCSE Nifty Assignments are archived at Nifty Assignments. I was paying to much attention to take much in the way of notes but the archive should be updated soon. One of them can be played at Mind Reader - App Lab - Code.org The archive is updated and I can’t wait to try some of these when I get home. That’s a wrap for me. I skipped the closing keynote to get to the airport early. I feel a little guilty but I’m also tired and my brain is kind of full. Some more general thoughts tomorrow."
"81","2022-05-16","2023-03-24","https://blog.acthompson.net/2022/05/bingo-inspired-projects.html","My son’s school, he’s principal of an elementary school, had a Bingo themed fundraiser yesterday. I can’t help but think about how things are done with any event like this. My first thought was about the Bingo cards themselves. Typical Bingo cards consists of a five by five grid. The letters B I N G O label the columns and each column has a random number. The center square of the grid is a “free” square and doesn’t have a number. Obviously, generating Bingo grids is a logical project. The numbers in each column must be without a specific range and duplicates are not permitted. The next obvious project is one to “call” the numbers. The numbers must be identified by number and column where the column is identified by the letter above the column. Drawing duplicate numbers is not permitted so keeping track of numbers drown is important. Keeping track of numbers drawn is also important for verifying Bingos. A program should have a way to do that . This becomes a user interface problem as well as a data storage problem. That may be the most interesting part of the project. At least it is for me. Now if you really wanted to get complicated, one could design a system where Bingo cards are numbered and their contents stored. One might then be able to use that data with the data of numbers drawn to verify if a Bingo was on the card using only the number of the card. I see this as a group project where individual students would write parts of the program and have them work together. A lot of planning would have to go into this of course. The Bingo at my son’s school used a traditional ball cag. That seems more fun somehow than drawing the numbers on a computer. That doesn’t mean that software would be a bad way to keep track of numbers drawn and used to verify a Bingo. Another project idea perhaps? On the other hand, the whole idea opens a discussion of “just because something and be computerized does that mean is should be?” The human factor is an important one. I’d love to have student discuss the pros and cons of computerized Bingo and old fashioned ball cages and physical tracking of drawn balls. Which is more authentic? What does authentic even mean? That discussion might be just as useful as discussion of what data structures should be used to track Bingo numbers."
"82","2022-07-03","2023-03-24","https://blog.acthompson.net/2022/07/welcome-new-computer-science-teachers.html","Spring is an interesting time on social media. I help moderate a couple of CS teacher groups on Facebook and let me tell you, membership is booming! Why? Well, several reasons. For one thing a lot of teachers have been voluntold that they are going to teach computer science in the fall.Some have never taught CS before. Others have some CS background but are being asked to teach a more advanced course. In general, a lot of teachers are looking for help getting ready. Hopefully, all CS teachers join the Computer Science Teachers Association (CSTA). There are both free and paid levels of membership. I am a paid member (AKA CSTA+) It’s worth it for the extra benefits. You’ll want to join and get active in a local CSTA chapter as well. A book I highly recommend for anyone teaching computer science is Computer Science in K-12: An A-to-Z Handbook on Teaching Programming I can’t tell you how much I learned from this book. Instructors are many Advanced Placement Summer Institutes are pointing teachers to Facebook groups. Two favorites for AP CS teachers are: AP Computer Science Principles Teachers AP Computer Science A Teachers They're both outstanding resources for teachers of those courses. Many people also join Computer Science Educators which is a wide ranging group for CS teachers. Cyber Security is getting huge in schools (which is a good thing) and there is a great Facebook group for that. Cybersecurity Educators If game development is your thing there is the Unity Teach Community group. If you’re teaching an advanced placement course, hopefully, someone has pointed you to AP Summer Institutes. Really valuable for first time AP teachers. There are also some curriculum providers that offer training and resources. A few of them are: code.org – they offer several levels of courses including pre-AP courses as well as AP courses. CMU CS Academy – curriculum, resources, and (I think) training CodeHS – Curriculum and resources CYBER.ORG – Cyber security resources, training, and curriculum Project Lead The Way – curriculum, training Bootstrap – CS with math, physics, or Data Science I’ll finish off with a couple of blog suggestions Mark Guzdial – He’s currently doing research on teaching other subjects using computer science and what he calls “Teaspoon Languages” but he has a lot to say about how to teach CS. Mike Zamansky – Mike is building a program to teach CS teachers at Hunter College in NYC. Mike shares a lot of good advice and ideas about teaching. Garth Flint – Garth teaches at a small private Catholic school where he wears a lot of hats. He has some interesting takes on things and shares a lot of good ideas. I’ve only scratched the surface here of course. But they’re a good start with places to ask for more help. Welcome to teaching computer science! [Edit] if you are interested in using some physical devices in your course check out Teaching Computer Science–Moving atoms not pixels"
"83","2022-07-05","2023-03-24","https://blog.acthompson.net/2022/07/teaching-computer-sciencemoving-atoms.html","On my first visit to the Lifelong Kindergarten Group and the MIT Media Lab, I notices a message on the windows. “Some people would rather move atoms than pixels.” That has stuck with my for years now. And it is quite true. Robots, game controllers, Internet of Things, and more are ways that computer science interacts with physical objects and not just pixels on a screen. These are ways that teachers can bring more students to more interesting (to the student) to get involved with computer science. But where to start? Recently I posted curriculum resources that are especially good for teaching traditional computing courses. Well, cyber security is a bit new but anyway. Read that post at Welcome New Computer Science Teachers Today I want to provide some resources to bringing physical computing into the classroom. Starting with a couple of devices that operate as “brains” for deeper involvement. Raspberry Pi and the Micro:Bit are two of the most popular. Arduino and the Lego ev3 have been around for longer and are in wide use as well. One could get lost exploring all that LEGO Education has to offer. The Arduino Online Shop has a lot of resources as well. Personally, I am a fan of both the Raspberry Pi and the Micro:Bit. Both the Micro:bit Educational Foundation and the Raspberry Pi Foundation have a lot of resources. Those are great places to start your exploration. Ok, let’s talk hardware. While the sites for the Pi, Micro:Bit, Arduino, and Lego EV3 have a lot of links to resources there are more places to go depending on your interests. Two of my favorites are AdaFruit Industries and Kitronik Ltd. They have devices that work with a lot of ""brains."" They have devices for all sorts of robotics or Internet of Things projects. I can spend hours looking through both getting idees for projects. Also for the Internet of Things, I have bought a bunch of devices from Phidgets Education. I have been using these sensors and controls with Raspberry Pi in Python but Scratch, MakeCode, and Java are among other language choices. Speaking of MakeCode, that is an awesome platform for programming Micro:Bits. I recently discovered Jacdac from Microsoft Research. Right now these devices only work with Micro:Bit but Raspberry Pi and a USB connection for laptops/desktops are projected for the future. I could, and probably should do a post just about robots and robotics. But here are a few places to get started. Beebots – cute little robots great with younger students Ozobot - I’ve seen these used from elementary school up through high school. Cute and relatively inexpensive. VEX Robotics – middle to high school. They also sponsor a competition. Wonder Workshop – Several types of cute looking robots that scale through a wide range of ages. My grandson has been controlling a Dash since kindergarten and I have had high school students learn with them as well. BirdBrain Technologies – Check out their Finch robot! Edison Programmable Robot - Ideal for school classroom education (meetedison.com) Educational Robotics – Parallax – not that Parallax sells lots of other types of hardware that you may find interesting I promise a more comprehensive post of robotics soon."
"84","2019-10-10","2023-03-24","https://blog.acthompson.net/2019/10/michael-backus-alaska-middle-school.html","Every so often I run into a computer science teacher’s work online and ask myself “how have I never heard of this person before?” This week I listened to a podcast by Vicki Davis with a middle school CS teacher from Alaska by the name of Michael Bachus. (How to Make Programming Easier) This guy is doing some cool stuff with middle school students. Robots, artificial intelligence, hardware and software, and helping a lot of teachers do the same. Michael Backus teaches computer literacy and computer science at Teeland Middle School in Wasilla, Alaska. As the creator of the http://www.akrobotnerd.com, he has shared many projects that he has developed over the years, the most famous being his Artificial Intelligence with Arduinos curriculum. Vicki Davis has a lot of great interviews as part of her daily 10 Minute Teacher podcast. She’s had me on a couple of times as well. In any case, listen to this podcase and check out Michael Backus’ resources. Curriculum, videos, projects, and it looks like a lot more. Someone needs to get him to CSTA to present some time."
"85","2019-10-11","2023-03-24","https://blog.acthompson.net/2019/10/what-time-is-30-minutes-from-now.html","Got the proctor guide for the PSAT that I have to proctor next week. There is a chart to help proctors determine stop times that are 25, 35, 50, and 60 minutes from a time after the start time hour. Wait! What? Someone needs a chart to tell them that if the start time is 5 minutes after the hour that 60 minutes later will be 5 minutes after the hour? Apparently someone does. Or someone thinks some one does. Some of my students, when being told to return to class in a half hour, ask me what time that will be. I blame the analog clock. That and laziness. So obviously I am wondering, should there be an app for that? Yep, I found a new coding project. Now I just have to decide which class to use it in."
"86","2019-10-22","2023-03-24","https://blog.acthompson.net/2019/10/how-many-words-in-that-text.html","One of the projects I have used for years is a letter counter program. The idea is to count the occurrences of each individual letter. It’s a nice project that includes arrays, loops, and some string manipulation. This is the sort of thing that does have some real world utility. Cryptography uses word counts to try to crack substitution cyphers. Linguists use it to study languages. And that is just two of what comes to mind. The next logical (to me anyway) step is to count words. I’ve been thinking about adding this in for a while. It is actually something I was assigned as a project many years ago when I was an undergraduate. It’s not as simple as counting letters. The most obvious method involved counting spaces. What happens if someone is old school and places two spaces after every period? Well, that is something to take into consideration. And what about other white space like tabs or line feeds? Or special characters? Doug Peterson related in a recent post (About words) that two different programs gave him two different word counts for the same piece of text. The counts were off by 3 on a text of about 486 words. Not a huge percentage but on a book length text that could make a difference. Some articles in magazines are paid by the word. That means getting the count right means money. Now people can count words with greater accuracy though I don’t want to do it myself. At some point someone is going to feed a lot of data into some artificial intelligence. Long sections of text that have accurate (human counted perhaps) word counts will be fed in and the AI will learn what words are and how to count them. It’s not going to happen until someone decides that developing this is worth the time and money. I wonder if it will be an academic or an industry researcher? For the time being I think this will make an interesting conversation in class. Maybe we’ll have a contest to see who can come up with the most accurate algorithm?"
"87","2019-10-25","2023-03-24","https://blog.acthompson.net/2019/10/a-loop-by-any-other-name.html","My first programming language was FORTRAN IV. As I recall we had Do loops. They worked pretty much the same as what we call For loops in most languages today. We didn’t have while loops but we did the same sorts of things with line numbers, if statements, and the powerful but “evil” Go To statement. As time went on I learned more ways of specifying looping constructs including recursion. Recursion took me some time to wrap my head around. Possibly because I used some languages that didn’t even support it back in the day. These days there are all sorts of iteration loops of various complexity and power. For a software developer that is wonderful. For a teacher? Well, it means you have to make decisions about what to teach. For a one semester, first programming course I like to keep things simple. A C-family For loop has all sorts of possibilities from the simple to some pretty complex structures. Eventually students will learn many of them but I could probably spend half a quarter just on For loops if I tried to get everything possible in and understood. The cognitive load on some possibilities feels like it would be too much for many students. Mostly I try to focus on the base concepts. A loop has a set up piece. Variables are set to a known starting state. A loop has some sort of comparison it see if it is finished. A counter it checked, a flag is checked, or maybe an interrupt happens. But something has to stop the loop sometime. usually but we can get into those times when an infinite look is useful later. And of course something has to happen that changes the values or states that the loop is checking. Understanding these concepts will, I sure hope, prepare students for what ever syntax or iteration style they run into over time. When we teach students for a career rather than just for a job the concepts are much more important than the programming language or the IDE. Concepts – what a concept!"
"88","2019-11-01","2023-03-24","https://blog.acthompson.net/2019/11/magic-8-ball-and-projects-from-real-life.html","There has been a 12 inch tall Pez dispenser on my desk for a couple of years now. It’s a great visual aid for talking about stacks. Today I got a Magic 8 Ball as well. It turns out that a lot of my students were unfamiliar with this staple toy of my youth. Since I really like using the Magic 8 ball program as a demonstration I decided I really had to get a physical ball. At this point in the semester we have covered loops and arrays and it is time to make programs more interesting by adding more data. I want to use something that makes sense and is not just a demo without meaning or purpose. Having code you can have some fun with is always a plus as well. I went to Wikipedia and found the classic 8 ball answers and placed them in a text file. My demo reads the file into an array when the program loads. Once the array is built clicking a button displays a random answer. It’s pretty simple to code and we code it together as a class. Students love asking it questions when we’re done. Usually I have students add their own answers to the text file and then modify the program to handle the new set of answers. We also talk about different ways this could be coded. What if we didn’t know how many answers/lines were in the file? Would be use a different loop and/or a different array type like an arrrylist? What options (methods or functions) should we use to provide the most flexibility? This also provides students with some sample code to look at when I assign larger projects and expect them to do much more on their own. Is this a good project? Magic 8 ball says “Yes definitely.”"
"89","2019-11-04","2023-03-24","https://blog.acthompson.net/2019/11/csta-at-15-cstaat15.html","The Computer Science Teachers Association is now 15 years old. I’ve been a member from the start and I have to say that in some ways it feels like it has always been there but in other ways it feels like it just started. There was a K-12 computer science education community before CSTA. But it was small and one could easily feel alone. CSTA brought a new sense of community and togetherness. Most of all, perhaps, it brought us organization and a stronger sense of belonging. There was the CS & IT Conference (now called the CSTA Annual Conference) before CSTA as well but it didn’t have the same feeling of permanence and sustainability that CSTA brought to it. CSTA brought growth and strength to the conference. It’s been the annual highlight of my professional development for years now. Presenting at several of these conferences has been a huge privilege and honor. And added to my learning as well. After I left industry some years ago I ran for and won a seat on the CSTA Board. What a wonderful experience those four years were. Hectic as we changed Executive Directors during that time. It was a real time of transition. That wasn’t as smooth as many of us would have liked and I think we experienced some growing pains during those years. We’re on our third ED now but things seem to be well on track. Kudos to the Board (after me) who lead the way through the last couple of years and another ED transition. We have an amazing board at CSTA who work very hard for the membership. The growth of chapters has been a big part of the CSTA story. Fairly early on, CSTA developed programs to train and prepare chapter leaders and that has paid off in spades. There are more and stronger chapters than ever before. CSTA is both national AND local and that is important. CSTA has helped train advocates among teachers and support them locally. CSTA members have advocated, lobbied, pushed, and otherwise promoted CS in their states, counties, school districts, and yes even nationally. Some of the companies and other groups get a lot of credit for the growth in computer science education in the US but the real heroes are individual teachers who alone or with other CSTA members did the ground work to make things happen. From conferences to board membership to involvement with committees and connections with life long friends CSTA has been an important part of my life. I can’t wait to see what the next fifteen years bring."
"90","2019-11-06","2023-03-24","https://blog.acthompson.net/2019/11/visual-studio-onlinepossibilities-for.html","Microsoft has been running their big MSIgnite event this week and making all sorts of announcements. One of them was a cloud-based development environment called Visual Studio Online. OK, that looks interesting and I will probably try it out soon. It may be an answer for people pushed to Chromebooks, others who are at one to one bring your own device schools, or just want students to wrote programs from home. I wonder how it works on otherwise underpowered older computers? There is some concern about costs and that is something I need to understand. Maybe I can find someone with an education focus at Microsoft to explain how it might work cost effectively for schools and students. Or maybe I can figure it out through all the marketing hype. We’ll see but it sure does look worth looking into in more detail. Question added later: I wonder if this will let me develop iPhone apps without buying a Mac? Anyone know?"
"91","2020-08-02","2023-03-24","https://blog.acthompson.net/2020/08/learning-python-part-1.html","Python has been on my radar for years but I haven’t really had the motivation to learn it myself. It’s time though for several reasons. Reason number one is that I need a learning goal to keep stretching my mind and knowledge. I don’t have a bunch of students finding new puzzles to solve so I have to make my own mistakes. First step was to pick a development tool. I have played with a bunch. IDLE, PyCharm, Processing, and some I forget. I didn’t like any of them. So I am using Visual Studio. I expect many to tell me that was/is a horrible choice but its the devil I know so there is that. Many of the tools feel like steps backwards to me. I’ve gotten spoiled by the Intellisence in Visual Studio among other features. IDLE felt like what I used to learn BASIC-Plus 40+ years ago. Anyway, I want to spend my time learning a language not an IDE. OF course there are two parts to learning a new programming language. Part one is the basic syntax. Part two is the idiom of the language. The first part is easy. The second not so much. I’ve started with easy stuff. Declaration of variables, simple math, declaration of functions, and control flow. IF statements and while loops were pretty straight forward. For loops are different and idiom rears its ugly head here first for me. For loops in Python seem to be what I think of a ForEach loops in other languages. Very powerful and useful. On the other hand, how do I do the equivalent of: for (i=0; i <= 100; i+=5) or for i =0 to 100 step 5 Or do I need to use a While loop to do this? Go ahead, show off in the comments and help me out. String manipulation, one of my favorite things to code, is probably next for me.I think that will be ok. Lists and dictionary come after that. I think I will have to read up on them as they look to be thought of differently than arrays in the languages I am used to using. They also look like fun and powerful to use. So there is that. Classes after that. Hopefully that moves quickly. Once I get some basics down I’ll start looking into various libraries and what not. Perhaps go back to try some graphics in Processing. Is there an equivalent to Windows Forms like I use with C# and Visual Basic? Or do I have to go backwards again to do that? At least I’m having fun. Now to go crack a book."
"92","2020-08-04","2023-03-24","https://blog.acthompson.net/2020/08/programming-projects-for-learning-or.html","The purpose of school work is to get good grades. Well, at least that seems to be a common view on the part of students. Most teachers will tell you that the motivation for students to cheat is that they are lazy and still want to get good grades. The recent posts by Mark Guzdial (linked to at Changing How We Teach Computer Science) have sparked a lot of comments on his blog and on Twitter which had sparked some thoughts on my part. I have long believed that projects are a great learning exercise for students. I haver become less enamored with them for grading. Cheating seems to show up all to often. Often it is hard to prove cheating because projects are to short, variable names are too likely to be the same logically, and there are limited ways to solve them. I have seen the most creativity and the least cheating (provable or otherwise) on larger projects where students were all doing something completely different. A common thread in the comments I have been seeing recently is that students cheat not because they are lazy but because they don’t know how to solve the project on their own. This idea resonates strongly with me. I see a lot of satisfaction on the faces of students who successfully complete projects. They tend to actually enjoy the process when they have success. Over the last several years I have increased the number of other means of assessments including multiple choice questions that include reading and understanding code. Comparing quiz results with project results has been interesting. Some students show close correlations between quiz grades and project results. Other students not so much. While I haven’t conducted a rigorous or scientific study by any means, my observations suggest to me that students are copying the projects of others because they haven’t gotten a strong enough grasp of the material. I’m pretty convinced that evaluative instruments that require the reading and understanding of code are better tools for understanding what students actually know than looking at projects. That is not to say that looking at projects is useless. To the contrary, students who work hard against the struggle show what they know and don’t know in their code. A project that doesn’t work correctly give a teacher a lot more information about student understanding than a project that works perfectly. In my ideal world, I would give each student a different project for every concept I want them to demonstrate knowledge of. That is clearly not possible and certainly doesn’t scale to large classes. I’d love to have a way to watch student progress on a project. What do they try and what do they do when things either work or don’t work. I don’t know of a good tool to that right now or even if it is practical. I guess for now teachers will just have to watch students closer.And use other tools for grading and for determining what students actually know."
"93","2020-08-05","2023-03-24","https://blog.acthompson.net/2020/08/learning-python-part-2-distracted-by.html","I cracked a book and found out that Python supports turtle graphics. I love drawing pictures with graphics. I have since I was in university. So today I played around with the Python turtle a bit. Mostly I played with a few of the usual turtle methods and wrapping drawing code inside loops. I had some fun but didn’t learn a lot. I’m not sure that was the most productive use of my time. It did suggest that using graphics with Python is potentially a way to make learning Python more interesting. I have Mark Guzdial’s book on Media Computation around here somewhere. I’m going to dig it out and see if it the libraries for it will work in my environment. I want to do more than draw lines."
"94","2020-08-13","2023-03-24","https://blog.acthompson.net/2020/08/are-you-ready-to-help-with-csta-2021.html","The call for participation in CSTA 2021 is now out. You can learn about the submission process and look at some possible topic areas on the conference information page here. There are several ways to help out with the conference (see below). You can present or you can become a reviewer. Both are very important roles. I encourage CS teachers to consider submitting a proposal to present. I have been honored to present at the CSTA conference a number of times over the years and have found it a very rewarding experience. The audience is kind and anxious to learn. This summer, the conference being online, added a new and extra facet which I found surprisingly energizing. I am hoping, as I think most of us are, that next summer we will be meeting in person. Either way, presenting at CSTA is a great way to be part of the community and to help expand knowledge Chances are that you tried something new this past spring. Or will be trying something new this fall semester. That means you probably have something worthwhile to share. Don’t be shy! Reviewers are also critical to having a good conference. Reviewers read and evaluate proposals and are essential in the process of picking the best presentations at the conference. Please think about helping out in this way. Apply to present: We're accepting submissions for a one-hour session, three-hour workshop, 20-minute mini-session, 45-minute Birds of a Feather discussion, or a poster session. Visit our website for more information on the process and to submit your application. All submissions are due by Nov. 8. Become a reviewer: We invite you to consider reviewing submissions for CSTA 2020! If you've attended or presented at a prior CSTA conference, have a connection to K–12 computer science, and are available between Nov. 23, and Dec. 17, consider volunteering your time!"
"95","2020-08-15","2023-03-24","https://blog.acthompson.net/2020/08/book-review-humble-pi.html","Recently, I asked my Facebook friends for recommendations for non-fiction books that would not get me depressed. Several people recommended Humble Pi: When Math Goes Wrong in the Real World so I bought a copy. I’m glad I did. The book presents some interesting case studies in math done wrong. From people confusing units of measure (pounds and kilograms for example) to engineers changing one variable in an equation and assuming the answer doesn’t change and many more. As you might expect there are a lot of examples where computers play a role. There are examples of problems caused by variable type mismatches, binary overflows, and people just misinterpreting the results. You’ll get any number of examples you can use with students. A valuable book to teachers of computer science, physics, and mathematics for sure. The book is written in an easy to read and often humorous fashion. It’s an enjoyable read even if you are “not a math person.” I bought the Kindle edition but I am wishing I hard bought a hardcopy edition to keep on my bookshelf. I’ll be back looking at this one."
"96","2020-08-26","2023-03-24","https://blog.acthompson.net/2020/08/the-end-of-school-computer-labs.html","There has been a lot of talk in recent years about doing away with computer labs in schools. BYOD and one to one computers have been talked about and have been growing movements for a while. I wonder if the current situation will be the final tipping point. My old school removed the computers from the computer labs. The work involved in constantly sterilizing and cleaning them was becoming too much. So students bring their own devices and now connect to virtual machines via the network. They have access to all the school’s licensed software no matter what device. This worked great when we moved to remote learning in the spring. Besides the cleaning/sterilizing issue this means a lot of new flexibility. Of course it makes it easier if school has to close and students have to learn from home. But in school it opens more rooms for teaching. And if you have small rooms classes can even be split across rooms with teachers in one room, or even at home, teaching to several rooms with safety distancing. I computer room can have a more flexible layout, perhaps with easily movable tables for group work, focusing on a lecture, or just plain spreading out. Will computer labs now totally disappear? We’ll see. A lot depends on a willingness and ability to provide computers for every student. That’s easier in wealthy areas than poor ones. But it just may be the way things have to be."
"97","2020-09-12","2023-03-24","https://blog.acthompson.net/2020/09/how-are-you-doing.html","We’ve now finished the first week after Labor Day and at least in North America almost everyone is back to school. That may not mean physically back in a bricks and mortar school building though. My grandson is starting kindergarten online this week. I didn’t see that coming a year ago. Teachers, students, and parents are adopting to all sorts of new ways of teaching and learning. I confess to being happy I am retired but I am also sympathetic so those still teaching. I do worry about you all. I hope you are finding ways to take care of yourself. My son is an elementary school principal and his summer was as busy, if not more so, than during the middle of the school year. Administrators have been having a tough time so have some sympathy for them. Somehow many people seem to think this is all easier for computer science teachers. This is not the case of course. Yes, we may be more comfortable with computers than some teachers but the tools for teaching online are new to us as well. And helping students with computer problems is as hands on as helping students in art, or math, or English. Maybe more so at times. I think we’ll see some tools appear and older tools will see new features develop Social media is full of teachers talking about online IDEs for example. I’m still not a fan but that’s me. I still like the idea of using virtual machines on a powerful server for teaching computer science.. No doubt a lot of people will be trying new things. If nothing else, we’re going to learn a lot this year about new tools for teaching CS. And that brings me to a final point, have you thought about sharing what you are learning with other computer science educators? The call for proposals for CSTA 2021 is out. Even if you are learning a lot of what doesn’t work you are learning some things that do work. We’re all better off if we all share what we are learning. Please consider a proposal for the conference. If you have questions about what is involved let me know. I love presenting at CSTA conferences. It’s the best audience you could have. Seriously!"
"98","2020-04-11","2023-03-24","https://blog.acthompson.net/2020/04/a-look-at-technology-for-remotely.html","While I do believe that people are the most important part of emergency remote teaching, technology does have a serious role to play. One key piece of technology that my school is using is virtual machines that students connect to from home over the Internet. This gives them full access to the resources they would have if they were in our physical computer labs. I had our wonderful Director of Technology describe what he set up. “Essentially what I've done is set up a Windows Server 2019 Remote Desktop Server. I then used VMWare Horizon and created a RDS Server Farm with VMWare and use VMWare security server for the connection broker. This can also be done with Windows Server creating a connection broker, but for me it was easier to use VMware. No VPN required which was the goal. I configured the server to behave like the students desktops on the computers in our labs. Basically students can log in from any basic device, Windows, Mac, Chromebook and get a Windows 10ish interface that they can work on.” The extra goodie that I learned to use the other day is the Microsoft Server Manager It looks to be a very powerful tool. I am pretty sure I don’t want to mess around with it too much. I don’t want t o break what is already working. The one feature I will be using with students starting on Monday is one that lets me look at and even control student sessions. This should make debugging student issues much easier. It is still not the same as being there but it’s as good as I’m going to get anytime soon."
"99","2020-04-10","2023-03-24","https://blog.acthompson.net/2020/04/emergency-remote-teaching-is-about.html","Attendance at my emergency remote teaching classes has been very close to 100%. Frankly, this didn’t surprise me at all. Apparently I should have been surprised. According to a poll reported by NPR, 4 In 10 U.S. Teens Say They Haven't Done Online Learning Since Schools Closed The difference between public and private shows a huge difference though. According to the article “47% of public school students saying they have not attended a class, compared with just 18% of private school students.” I don’t think that it is enough to say public or private though. I attended a public magnet high school as a student myself and even today that school bucks the trend. According to a New York Times article “At Brooklyn Technical High School, one of the city’s most competitive, Serge Avery, a social studies teacher, said 98 percent of his students have been participating in daily online activities,” There is a lot at play here of course Privilege is a major factor but there is more to that. Somewhere around 61% of Brooklyn Tech’s students qualify for free or reduced cost lunch. I was asked specifically about why my school has such a high participation rate. There is no one thing at play. I think the school culture has a lot to do with it. I think this is true of any school. Education is important to our students. They give up something to attend our school. There is a parallels here with Brooklyn Teck. Both school require leaving one’s local high school and travelling. Both schools make it hard to git in but provide a lot of support to students who do attend. My school started planning and preparing students and teachers for this weeks before we went online. It was no big surprise when it happened. Students were mentally ready to move online. Many of the tools we use online are tools they have been using for a long time. They were already used to receiving and turning in assignments online for example. Many of them have used video chat of one form or another for years. I think relationships between students and teachers (perhaps part of the culture) also plays a part. Part of our school’s whole belief system is that students are known, valued, and treasured. Students joke about it some but they know it is a core value and respond well to it. At its core this is a people issue not a technology issue. Students participate if they see the value in participating. We are still grading - progress reports come out today and we have been online for four weeks. Parents want their kids to learn. That is what they are paying for and they do so because they value education. Students do tend to value what their parents value. If school matters, students attend."
"100","2020-04-08","2023-03-24","https://blog.acthompson.net/2020/04/when-are-we-going-back-to-bricks-and.html","That’s the question my students asked the most yesterday. We’re in our fourth week of remote emergency teaching and I think it is starting to wear on most of us. It especially hard on the young people though. One thing I am more and more convinced of is that school is a great deal more than sitting in a classroom and doing school work. My students, consciously or not, are realizing the same thing. Those casual interactions between classes are important to our students. Students interact with their peers and their teachers in ways that are often overlooked but which make up the total school experience. Going to school online is not going to be a replacement for going to school in a physical place. Dr. Fauci has been saying that he expects that schools will reopen in the fall. I didn’t hear any indication in his most recent remarks that suggest they will open again this spring. Summer camps are still at risk according to Dr. Fauci. I wonder what summer break is going to be like. When we return in the fall, things are going to be different. I hope they will be better. Testing is getting better and the prospects for better medical treatment and even a vaccine are looking up. Most experts expect COVID-19 to be back in the fall again. We all hope not as bad but I think we’ll all be thinking about sick students differently than in the past. Any teacher will tell you that students come to school sick. Some because there is no one to take care of them at home. Some because they don’t want to miss any more school. At my school we see a lot of the latter. One think I hope we learn about and prepare for is letting students stay home and attend classes remotely. We’re all learning about the tools we have now and perhaps the tools will get even better. If more students can stay home when sick and not miss as much of their education schools will become healthier places. There are many other things that will happen in well-run schools to make them healthier places. Better cleaning and more attention to covering ones mouth when coughing just to name two.. We’re all becoming more sensitive to what spreads germs. We’re really seeing how much more there is to school than most people ever realized. Perhaps it will lead to less penny pinching of education in the future. I can only hope."
"101","2020-04-07","2023-03-24","https://blog.acthompson.net/2020/04/living-in-interesting-times-and-sharing.html","You may have noticed I didn’t post anything in this blog yesterday. Part of that is because I had to make an unexpected trip to my family’s vacation home. A neighbor reported an open window and we can’t have that. It was weird driving though what is normally a booming tourist and vacation area and not seeing much traffic and most all of the businesses closed. People are staying home. While I didn’t post here yesterday that doesn’t mean I kept my metaphoric mouth shut. Doug Peterson interviewed me over the weekend and posted the result on his blog.I think it is some of my best thinking. Doug knows how to ask questions that get me thinking. You can read that interview at 10 Questions for Alfred Thompson My good friend, Jane Prey also had questions for me. She wanted to know what I wished I had known before I started remote emergency teaching. My thoughts may be read as the CSTA web site at Software, Hardware, and People Last week I asked people to blog more about their experiences and how they are teaching. A number of people have been doing that. Mark Guzdial wrote two posts over the last couple of days. While he is teaching at the university level I think there is good advice for all educators in them. I recommend them to you. Contingency Plans for CS Students in Large Classes How I’m lecturing during emergency remote teaching Dan Anderson has his own COVID19 Update on his blog. In it he shares the questions he is asking to check in with his students. I think we all know that teaching is about more than just covering the subject matter. I hope to see more from Dan. IF you are looking for how the move looks at my school from the administration point of view this article is a good read Private School Profiles: How Bishop Guertin High School is Responding to COVID-19"
"102","2020-04-05","2023-03-24","https://blog.acthompson.net/2020/04/coding-for-fun-and-mental-exercise.html","Recently, I started reading a book about the mathematics of cryptography. (Mathematics of Secrets) Fascinating. A lot of the math is hard (to put it lightly) for me but the stories that go along with the development of it all are fascinating. So far I have learned a few things and made my Caesar Cipher program much more efficient. I really need to revisit my Vigenère cipher program and make it more efficient and more interesting. The other night I coded up a quick transposition cipher. It was fun and once I got the algorithm down in code it was easier to get to sleep. Writing the code does help me understand what I am reading and that is a real benefit. We’ll see how I am feeling when I get to the chapter on public key encryption. So far, I am sticking with the easy math and playing with ciphers that are far from modern cryptography. I'll leave that to the professionals. Caesar and Vigenere are common enough programming assignments but I may write up the transposition cipher as a project for future use. If not for my own classroom for a project book I have in mind. Miles Berry pointed out that teaching ciphers by having students write a little code and experiment with different variations is much more fun and engaging for students than exercises away from the computer. Doing this stuff by hand can be a bit tedious. For now though I am finding some pleasure is writing some not very complicated code as a way of exploring ideas that I am learning. I’ve had a chance to play with some libraries and methods that I haven’t really gotten to use before. That’s been fun. So much of my coding the last couple of years as been limited to the stuff I teach in a first programming course. I’m using this time to stretch myself a bit. Perhaps get my coding “muscles” back in shape. In any case, for me, coding == fun"
"103","2019-11-07","2023-03-24","https://blog.acthompson.net/2019/11/ai-assisted-programming.html","As I said in yesterday’s blog post,Microsoft has been running their big MSIgnite event this week and making all sorts of announcements. One interesting announcement what improvements to what they call Visual Studio IntelliCode. The idea is that they are using machine learning to help programmers with writing code. In the latest update are whole line completions and refactoring. Interesting. I haven’t seen IntelliCode in use before and it is probably because it is not turned on by default. I did some searching and found that it can be turned on as an Extension (I had to search a bit under the Manage Extentions option) and then you can customize aspects of it from Tools –> Options –> IntelliCode. Oh, and you need Visual Studio or VS Code 2019 for this. I am using Visual Studio 2019 Community Edition which is free. SO far I am not seeing obvious help from it but it may be that I have to do something more complicated in my code or write more code first. It does apparently take context into account for its suggestions and I may not have given it enough yet. But I’ll keep playing. And maybe I should look for some video demos online. There are other things to think about though regardless of if it has been useful already. What is the training like? The write up I have seen says that it learns from examples on GitHub. Initially that scared me as literally anyone can upload to GitHub. One reference I found said something about the 500 best repositories on GitHub. What ever that means. And what was the criteria for “500 best?” What sort of standards will this learning suggest? Some of the documentation talks about options for using other databases of code to train the system so that businesses can train the AI with their code and standards. As a teacher I wonder if there could be a training set for AP Computer Science A? I think Java is supported with IntelliCode in Visual Studio Code. No doubt some will complain that it is “too much help” for beginners but I’m not sure about that. You still have to know enough to take or reject suggestions for one thing. And having the computer tell a beginner something like “you should make a method to reduce this redundant code” might be better received than the same comment from a human teacher. Will this help students learn more or dumb down the process? I’m an optimist and think it will be a good thing. What are your thoughts and concerns?"
"104","2019-11-08","2023-03-24","https://blog.acthompson.net/2019/11/define-better.html","Someone posted an interesting question on Facebook. Is using ++i(pre-increment) better than i++(post-increment) ? My reply was to ask for a definition of “better.” The Facebook posts have a lot of answers from people who appear to not have written a compiler themselves and who making a lot of assumptions. But the point of this post is not to discuss which option is better for some nebulous definition of “better.” Rather is is to think about asking the question of what do we mean by “better?” There are a lot of what I call religious arguments in computing. Tabs or spaces, curly braces in columns or have the open on the end of a line, what is the best programming language, and on and on. Most of them stem from differing definitions of “better.” Sometimes things matter very much at one point in time but not at all later and yet the bias from early days remains. There was a time with memory was so tight that a single character variable name was much preferred to a longer more descriptive name because of the space used. Most of my readers probably don’t remember those days but I do. Fortunately I recognized when the change happened. Not everyone did so quickly. This is possibly at the heart of some of the tabs vs spaces argument for at least some old timers. Other issues have become moot or mostly moot because we have so much smarter compilers and interpreters these days. We have long been at the point where compilers write better low level code from high level code than even the best assembly language coders. I seriously doubt that there is a difference between the code generated for ++i or i++ as the incrementor in a for loop these days. Compilers are too smart for that. Compiler writers think long and hard about those sorts of things. How doubly dimensioned arrays are declared used to make a bigger difference than it does today. I can remember thinking long and hard about how to declare and iterate through two dimensioned arrays. You pretty much had to know how the compiler would allocate memory and what cache would look like to get optimal performance. I don’t think many people think about that today except for the most performance critical applications. Applications we don’t give to beginners anyway. Compilers do a lot of optimization on this sort of process so we don’t have to think much about it. Artificial Intelligence and machine learning (see also AI-assisted Programming) are probably going to make compilers even better than they are today. Today I think “better” in terms of programming should mean “easier for programmers.” Easier to write, easier to understand, easier to modify, and to allow programmers to think about the end result and not the assembly/machine language generated. Let the software do what software is good at and people do what people are good at."
"105","2019-11-13","2023-03-24","https://blog.acthompson.net/2019/11/not-too-easy-and-not-too-hard.html","We’re covering Classes and Objects in my Programming Honors course this week. Specifically we are learning how to program classes in C# and use them in programs. The struggle for me is to come up with classes that are interesting to students, practical for them to use, and not overly complicated. This is not Advanced Placement computer science A and we don’t have a whole year for the course. I start with a simple Dice class. Easy enough as an introduction . I also live coded a Coin class. The difference being that I added images to the coin class to show them that more interesting objects can be used in classes. So what next? Things I have used in the past include a playing card class. Interestingly enough this has had cultural implications. I have international students who are not always as familiar with American playing cards. But it works. There are a lot of pieces to playing cards and you can do them simply (face value and suit) or complicated (Face value, suit, nominal value – face cards are 10, front and back images, suit color, text names, etc) Methods and constructors can get interesting to say the least. So can creating programs to use the “cards.” I tried a Pez dispenser class once. I do have a 12 inch Pez dispenser on my desk after all. I’ve done it the simple way with just a capacity value and a current count value. What I would really like to do is use a stack in the Pez dispenser class and have candy objects to put in it. If I were teaching APCS A and had time to cover stacks I would do this for sure. But I don’t. I’ve thought about revisiting some of the class projects from prior AP courses. Anyone remember BigInt? I kind of liked that one. I did more with the Marine Biology Case Student but my students never really liked it. They called it the DAF – Dumb Ass Fish case study. Both may be a bit much for the time I have though. I had some fun with a quiz question class last year. Data included the question, an array of possible answers, and an index of the correct answer. I liked that for showing how flexible array parameters could be. A true/false question is just a question with two possible answers. The next design question is of course do you have a simple array of questions or do you design a quiz class? If a quiz class, what does that even look like? Might be fun the have students try that design. I’m still playing with more ideas. I’ll have to use something tomorrow but maybe the good idea fairy will hit before Monday. Suggestions anyone?"
"106","2019-11-21","2023-03-24","https://blog.acthompson.net/2019/11/teachers-helping-teachers-for-free.html","I understand the appeal of sites like Teachers Pay Teachers. Really I do. Some teachers are awesome at creating resources and the idea of getting paid to share them is attractive to underpaid and over worked teachers. Even Amazon, never one to miss a chance to make money, is getting in the business of supporting this idea (Amazon Starts Marketplace for Teachers to Sell Online Educational Resources) . For some reason the idea of asking poor under paid and under resourced teachers to pay for stuff that I have developed for my own use just doesn’t feel right. I have no problem with teachers who decide to ask other teachers to pay for resources. I have no problem with people who make creating and selling resources in order to make a living. It’s a free country. I hope they have no problem with me giving stuff away for free. I made a comment to this effect on Twitter and Mike Zamansky replied with “When I was starting out I only survived by the good graces of more senior teachers who mentored and just as importantly SHARED materials (free of charge). This shows the disconnect between capitalists and educators.” I think that has been the experience for many of us. We survived and continue to survive because others share resources with us. I’ve been pretty lucky myself. The first real resource I shared online was a pair of project books for Visual Basic and Visual C#. I got paid to write the first editions. By Microsoft not by other teachers. Teachers got them for free. I subsequently updated and expanded them several times as the software was updated but while the books were still free I no longer got paid to write them. I was and am ok with that. I got plenty of use from those projects myself. The feeling of helping other teachers is a reward in itself. In full disclosure, I have a couple of self-published books on Amazon now. Mostly because creating hard copy books to give away is more than I can spend. But I haven’t turned down teachers who request PDF versions. I have also benefited from resources shared by others. PowerPoint presentations, video demonstrations, project ideas, and a host of other resources that people have shared over the years have greatly benefited my teaching and learning. I am very grateful for those who have generously shared those resources. One day maybe teachers will not be under resourced and under paid. For now though far too many are. That’s why I think we should do as much as we can to support each other."
"107","2019-11-22","2023-03-24","https://blog.acthompson.net/2019/11/coding-for-fun.html","As with so many things, it started with Doug Peterson. Doug recently posted about something called 100 days of code. This got me started about the need I feel (some times) to do more coding for fun. Or at least coding projects for my own interest and not for “work” purposes. Next up was Mike Zamansky (yet another good idea fairy whose blog I follow) Mike posted about some text based projects he was introducing to teachers during some professional development he has been running. Links below. Now I love messing around with textual data. Love it. And I’d been thinking about that already and posted about one project recently. Mike’s most recent post reminded me of something I did “back in the day” when we used markup languages to feed into word processing systems (i.e. before WYSIWYG editors) I created my own concordance of the Bible. It was pretty cool to be able to do something like that. I may have to look for tools to do something similar. Maybe with HTML? We’ll see. I also have a number of “things” that can be programmed sitting around at home. The trouble is time. Well, honestly, not so much time as prioritization. There are other things to do. School stuff for example. Grading, lesson planning, and all that. And home stuff like the tables I want to build and the hydroponics system I have the materials for but haven’t built yet. And books to read. I need to be exercising more. And, well, you get the picture. I suppose I could be coding and not writing this blog post as well. Sigh. I wonder if I wrote a scheduling app to help me out? How about you? Do you code for fun or for learning (which is fun too) or is coding not part of your definition of fun? IF you do like to code how do you prioritize it? Does 100 days of code appeal to you? Related Blog posts: Working with texts part 1 - cleaning the data – by Mike Zamansky Working with texts part 2 - bag of words - by Mike Zamansky I Speak Jive – by Mike Zamansky How Many Words in That Text? - by Alfred Thompson Palindrome Project – by Alfred Thompson"
"108","2019-11-25","2023-03-24","https://blog.acthompson.net/2019/11/whats-in-name.html","Naming things seems to be a continual problem with programming students. I’ve written about this before (two years ago A Rose By Any Other Name Gives An Error ). I can’t seem to get a handle on it with students. I think part of the problem is that students are good with ambiguity and inference. If you call a student by the wrong name or a diminutive they don't’ use themselves you may get a correction (think warning in computer speak) but they know who you are talking to/about. Compilers are a lot more fussy. Case-sensitive languages differentiate between “question” and “question.” Forget about adding extra letters or misspelling a name. Somehow students have trouble looking that closely at words. I’m not sure if that is because they are too used to filling in the blanks of misspelled words or something else? I do notice that I see a lot of typos and spelling errors in other written work they do. Even though there are spell checking tools built into editors. Part of the problem may be error messages. Well, that students don’t always read the error messages is part one. But even when they do the messages are not always helpful enough. “Variable does not exist in current context” is pretty meaningful for an experienced programmer. We understand things like scope for one thing. We also know to look for spelling differences. Students sometimes have trouble parsing that all out though. It is something that comes with experience. Unclear error messages have long been a problem. I think that maybe it is because the people who write the messages have too much knowledge and so assume too much knowledge on the part of programmers. Then again most development tools are designed for experienced programmers and not beginners. I wonder if smart IDEs will one day help beginners. Perhaps artificial intelligence modules will look at code and ask “Did you mean ‘Question’ and not ""’question?” or “did you forget to declare this variable?” Or even “this variable is outside the scope of where it was declared.” This is the sort of hint that teachers give now. All in all I think the answer is to make the tools more relatable to the people who use them. Teaching computers, which can be very difficult, seems, some days, to be a lot easier than teaching high school students."
"109","2017-11-27","2023-03-24","https://blog.acthompson.net/2017/11/a-rose-by-any-other-name-gives-error.html","There is an old computer science joke that goes more or less like this: There are two hard things in Computer Science: cache invalidation, naming things, and off-by-one errors Now I don’t have to cover cache invalidation in my high school courses and I do see an awful lot of off-by-one errors from students but today I’m thinking a lot about names. Names and how students get them wrong. Today I had students write code along with me as I demonstrated in on the board. As usual with any GUI interface the first thing I did was draw objects on the form and name them. I’m pretty careful about giving each item a meaningful name. I spend some time talking about why we do that. OF course a larger group of students than I’d like skips that step. Next I write the code behind being very careful to use the correct names for the objects that I am requesting information from or sending information to. I talk about how having meaningful names here makes like easier. Students diligently copy the code. Anyone experienced with students knows what happens next. Students insist they did exactly what I did get build errors. Remember how I said some of them don’t name things the way I show them to name them? Yep, this is where they expect the computer to do what them mean even if that isn’t what they told it to do. Others have the right names but for the wrong objects. “Mr Thompson, why did that show up here and not their?” Answer: Because that is where you told it to display. Try as I might students take a while to understand how important getting the names right really is. Somehow getting this right is a struggle for some students. I want to believe it is all their fault – they were not paying attention. That has to be it right? But maybe not. Maybe it’s me. Clearly I need a better way of explaining things. Maybe visual aides? Boxes with names on them? Something. Figuring this out before the next class starts is a priority. Suggestions are welcome. What works for others?"
"110","2017-11-28","2023-03-24","https://blog.acthompson.net/2017/11/how-some-schools-sabotage-computer.html","There are many problems getting more computer science into schools. There is a shortage of teachers. There is a problem with room in the schedule. I could go on but there are also problems for schools who have computer science programs caused by people inside the schools. And I keep hearing about them. Problem number one seems to be the people who manage the school networks. Now you might think these people would be natural allies of computer science programs and you’d be right in some cases. In far to many though your would be wrong. A lot of school network managers have priorities that can run counter to those of teachers. Not just computer science teachers mind you but they can hit computer science teachers especially hard. There is always a trade off between keeping a network secure and keeping it easy to uses. Finding the right balance is key though. One of the biggest issues I keep hearing about is technology decisions that don’t involve the teachers who will be using the technology. For example lately I have been hearing a lot of teachers complain that their PCs are going away to be replaced by Chromebooks. Now one can do a lot with Chromebooks. One can even teach computer science with them. More or less. But telling a computer science teacher that they are losing the tools they have used for years and asking them to figure things out on their own is not fair. Far to many hardware decisions are made in schools based on cost and ease of system management without considering the impact of teaching. Sometimes decisions are made that actively prohibit teaching some things. IT people block useful websites. IT people refuse to allow some software to be installed. All this with the goal of locking down the systems and making them easy to manage. And then there are administrators who don’t seem to understand the needs of computer science courses. I recently heard from a teacher who was told they were losing their computer lab for two weeks so the school could do testing. What? Teach computers without computers? OK sure there are many CS concepts you can teach without computers. CS Unplugged is a wonderful resource for that. But to have that decision made for you one short notice – for and advanced placement course? Can you imagine? Picture the music department told they would have to teach music without instruments for two weeks? Or the art department being told to teach without art supplies? It’s hard to get too upset with the principal here though. They are in a hard spot and need the computers to do the standardized testing that people who know nothing about education insist that they administer. On the other hand since it is unlikely that these tests come as a surprise to the principal they should at least let the teacher know long enough in advance so that they can properly plan. But they don’t understand what it is like teaching computer science. How could they if they never even took computer science as a student? We really do need more educators to understand computer science better. BTW my school has an administration who absolutely do understand enough about CS to bring the department in on decisions that impact them. And our IT people put students and teachers first and do all they can to make teaching easier for us. Faculty has lots of input on new devices. We do it right. I just wish every CS teacher had the support we do."
"111","2017-11-30","2023-03-24","https://blog.acthompson.net/2017/11/cs-educator-interview-sheena.html","Sheena is a wonderful innovative teacher who I have know for several years. We also served on the CSTA Board together. She works across grad levels (K-8) at a school district in California. She’s doing some very cool things. I am so grateful that she agreed to do this interview. I think you’ll find it interesting. WHERE DO YOU TEACH? WHAT SORT OF SCHOOL IS IT? I teach in the Los Altos School District, in the San Francisco Bay Area, California. It is a K-8 public school district with approximately 4500 students. We have seven elementary schools that are K-6, and two Jr High schools (grades 7 and 8). HOW DID YOU GET STARTED TEACHING COMPUTER SCIENCE? My background is in computer science. After working for several years in Silicon Valley, I decided to take a break and go to college to learn art. During that time, I had an opportunity to volunteer in the local art docent program, and discovered I loved teaching. I became the art teacher for one of the schools in the district and along with watercolor, clay etc, I showed the kids how to create on the computer . When the art teacher position went away, my administrator suggested I teach those digital art lessons across the district. I used Scratch programming as a tool for the art program in the district in 2009, just a couple of years after Scratch was launched. Later this digital art class was converted into a CS program for sixth graders, and then expanded to all other grades. Today, every child in the district learns computer science. DESCRIBE THE COMPUTER SCIENCE CURRICULUM AT YOUR SCHOOL. WHAT COURSES DO YOU HAVE AND WHAT ARE THE FOCUSES OF EACH? Currently I am the computer science integration specialist for the district. This means that besides teaching I work on curriculum, PD and integration across the district. Every one of our seven elementary schools has a STEM teacher and this teacher integrates computer science in K-5 STEM lessons. I work with this STEM team, introducing new tools, and doing PD when needed. The sixth graders have the same required CS program that I started, and it includes units in Scratch, JavaScript/Processing, and Arduino. I currently teach this 6th grade program in one of the schools. I also teach a Python based CS elective in 7th and 8 grade at both Jr High schools. I also work with the 7th and 8th grade Science teachers to integrate CS into the Science classes. See more details on our CS programs at https://www.lasdschools.org/District/Portal/Computer-Science WHAT IS YOUR OVERALL TEACHING PHILOSOPHY? PROJECT BASED LEARNING? FLIPPED CLASSROOM? IN SHORT, WHAT MAKES YOUR CS PROGRAM “YOUR CS PROGRAM?” If I had to pick one overall philosophy, it would be ‘CREATIVITY’. My CS program was created from an art program, where the focus was on creating something that was personally relevant and where programming was just one more medium to express your creativity. I use mini projects to teach specific content, with challenges to differentiate instruction, and with as much flexibility as possible. The focus is to get students to work passionately on projects they care about. WHAT IS THE BIGGEST CHALLENGE IN TEACHING CS AT YOUR SCHOOL? Differentiation. After teaching CS for several years ,we now have students at widely different levels in our classes and we must differentiate in many ways to make sure we keep all students engaged. After taking the required CS classes at our schools, some students continue to work on coding projects at home, and even enroll in summer camps/clubs and more, while others have only done what is done in class (or have forgotten it!) . In our classes today, we work continuously on the challenge of creating a comfortable environment where each student can move at their pace. WHAT IS ADMINISTRATION’S SUPPORT (OR LACK OF SUPPORT) LIKE AT YOUR SCHOOL? Our administrators are very supportive of the programs. In 2009, when very few public schools were doing any CS (there was no code.org or much advocacy material 8 years back!), the Los Altos school administration showed that they were early adopters and innovative . They launched a district wide computer science program because they believed in the idea that this would encourage creativity and help students see computers in a different way. At every step during the last 8+ years, they have encouraged computer science in our district. We are constrained by the number of dedicated teachers available to teach CS, else we would have moved even faster than where we are today. HOW DO YOU MEASURE SUCCESS FOR YOUR PROGRAM? FOR YOUR STUDENTS? Success is measured by just one factor - ‘Do they want to do more?’. The answer is yes for all grades. The K-5 students love STEM time and welcome any open coding time. The sixth graders often tell us it is their favorite class and at their end of year showcase, we have a packed room of students showing their final projects. Our 7th/8th grade CS elective is over subscribed. Kids are using code in other classes on their own. A Chemistry or English teacher for example will sometime sends me a Scratch or Python project that was submitted to show learning in their class. Our students are not afraid of coding, and are always ready to learn more. WHAT IS THE ONE THING YOU LIKE TO TALK ABOUT REGARDING YOUR PROGRAM THAT I HAVEN’T ALREADY ASKED? Students are curious, creative and eager to learn. It is so much fun watching them discover the magic of coding. Hearing that shout of joy, when a student fixes a bug can keep you going for hours even when you are tired. Computer science education is moving at a fast pace, and I am always learning new ideas, experimenting with new tools and looking for ways to improve our CS programs. TELL ME ABOUT YOUR ONLINE PRESENCE (IF ANY) · School name and web site: Los Altos School district. www.lasdschools.org · Twitter: sheena1010 · Blog: computersforcreativity.com See also Computer Science Educator Interview Series Index (2017) for other CS educator interviews."
"112","2017-12-05","2023-03-24","https://blog.acthompson.net/2017/12/some-thoughts-on-drag-and-drop-block.html","I’ve toyed with drag and drop or block based programming for a bunch of years now. I even keep a list of block programming platforms. But this year I am really using them a lot with students. It’s been a real learning experience for me and my students. I’m using AppInventor with my mobile application programming students and code.org’s AppLab with my APCS Principles students. Now the AP class is using AppLab with JavaScript now but we started with the blocks and the interface is still very much drag and drop related. I’m thinking about this in two ways. One as for my own projects and one as a teaching tool. I’m old school – started programming with punch cards and FORTRAN – so I confess that I am still most comfortable doing my own programming in traditional languages (mostly in C# these days with some Visual basic depending on my mood0. For for students things are different. First the good. In many ways my mobile apps students are doing more advanced things than my Honors Programming students (C# there). For example connecting to Amazon’s API is a snap in AppInventor. Setting up things like nested code is also very easy. Syntax problems are pretty much not an issue. So we are covering a lot of concepts. That’s all great. I wonder how it will translate for learning text based languages. My AP students all have previous (to applab) experience with text based languages so they are not a control group for me. One the down side, debugging block based code is different for me. I’m used to traditional debuggers and I haven’t figured out how (or if) that can be done in AppInventor. So of course I go old school with taking code out or adding messages in different places. Error messages in AppInventor are an area where I am facing a learning curve. The idiom is different and I’m teaching myself so it can be slow at times. Next time I teach this it will be better though as my students are showing me a lot of bugs learning opportunities. Still I have had the AppInventor emulator crash with no usable error message and that is a problem. I want to see if I can get some cheap devices to use next year. I think that will make some things better. UI formatting is an other area I am struggling with. I think this is both a lack of experience and practice with the tool combined with different limitations on a mobile device screen. I am less than happy with my UI for my Windows Phone app which I wrote in C# and Visual Studio which suggests I need help with small screen UI design anyway. In any case the students in my mobile app class are learning a lot (I think) and enjoying the course (I think) which are good indicators of success. I’m pretty happy with that. I’ll use AppInventor for future sections of Mobile App Programming. I still feel like blocks are best for small apps and for beginners. Yes, I know people make some pretty sophisticated programs with them but I struggle to wrap my head about that being as easy as text based languages. Maybe 45 years of experience writing text based code is a learning disability for me. Or maybe I just need the right teacher? I’m taking blame here and trying not to blame the tools. Today block programming languages seem to be mostly designed as teaching tools and they are good at that. I think a lot more has to be done to really make them usable as general purpose languages for more complicated large projects. I do think they can get there even if the path isn’t obvious to me."
"113","2019-08-18","2023-03-24","https://blog.acthompson.net/2019/08/and-so-it-beginsschool-year-2019-2020.html","Tomorrow (Monday) I will meet the new freshmen in my study hall. And I’ll finish getting my room ready for the new school year. First day of real classes is Tuesday. And I am not as ready as I would like. I have a day by day plan for every day of the semester (even the year for my AP CS Principles class). Lesson plans last until they run into actual students so there will be adjustments. There always are. It’s my 5th or is it 6th year teaching honors programming so that is more settled than anything else. I still make changes as I go along because not every class in the same as any other. And who wants to do the same thing year after year anyway. It’s my third year teaching AP CS Principles and I am making big adjustments in the schedule over last year. I am hopeful that I’m going to get it better this year but who really knows. My third year for teaching Mobile Application Programming and I am switching from AppInventor to Thunkable. AppInventor has given me a lot of issues with the emulator and most of my students have iPhones and Apple is dragging their feet on allowing AppInventors iPhone software. Thunkable already works with iPhones, though without support for some features I would really like. Plus it seems to connect to phones more reliably. We’ll see how it goes. I’m adapting project ideas as I go along. That’s not completely new but it is not without risk. At least I only have three preps. Last fall I had four. I also have more free periods as I am teaching a reduced load (at my request) and that should help a lot. Are you ready? Have you begun already? Let’s do this thing!"
"114","2019-06-30","2023-03-24","https://blog.acthompson.net/2019/06/iste-2019-trip-report.html","There was a time when I would have written a blog post every night of ISTE. Apparently I’m getting older or something and that is not a priority for me any more. Be that as it may I got some good stuff at ISTE this year. ISTE is not all about computer science the way CSTA (next week) or SIGCSE are but there is more CS than their used to be. You have to hunt for it a bit though. Robots were big again this year. It seems like everyone is pushing robots as the silver bullet for teaching CS. I’m not so convinced and most of the robot stuff was aimed at younger students. K-6 or K-8 were big. Lots of people promoting their drag and drop Blockly-like programming tools. If you push you hear about Python and other text based languages. I didn’t spend much time with robots. I don’t want to build my course around them. If others do that is fine. It’s just not me. On the other hand I am interested in internet of things and integrating that into some of my courses. Plezmo has some interesting products in that space. I missed them in my walk through the exhibit hall but Alark Joshi, Associate Professor of Computer Science at the University of San Francisco, sent me an email suggesting I check them out. I’ve got a core kit ordered. I plan to use it for some experimentation on my own but also as a way to introduce IoT to my students in several courses. Should make for some good demos. Later I may add it to my curriculum. A lot depends on my experimentation. Doug Bergman gave a presentation on using Artificial Intelligence in projects using some tools from Amazon Web Services (AWS). Doug demonstrated using these services from Thunkable This may be the piece that really makes my mobile application development course take off. You can learn more about AWS Educate at this link. Unity also had a surprisingly big booth at ISTE. They have some free online courses which would be usable in the classroom. If I were to have a game development course I would go there first. As it is I plan to take some coursework myself and see how it might fit in to an existing course or perhaps into a new project course I want to propose at my school. This relates to something else I found interesting at ISTE. Steve Demo presented on Virtual Reality in education. The Oculus Quest (which I got to try out) is pretty awesome and it is programable using Unity and C#. This combination might be awesome in a course after my Programming Honors or our AP CS A course. First I’ll learn some Unity and then I will look at AR/VR/MR devices to see what is practical in the classroom. I did talk to someone from the Azure (Microsoft’s cloud offering) at the Microsoft booth. I will follow up to learn more about their options as well. GitHub is something I really want to bring into my Programming Honors course next year and Microsoft owns GitHub now. GitHub for education will be at CSTA and Mike Zamansky is presenting a session on using GitHub so I’ll be in better shape there after CSTA. So I enjoyed ISTE and I got some good value out of it. But because ISTE is so large a lot of the CS stuff (and people) get lost. CSTA will be a whole other story. Can’t wait to get there."
"115","2019-07-07","2023-03-24","https://blog.acthompson.net/2019/07/pre-conference-thoughtscsta-2019.html","I’m on my way to Phoenix AZ for the CSTA conference. For years I would get there early and leave late. This was especially true when I was on the CSTA Board and there were Board meetings to attend. Traveling on my own dime and my own schedule this trip. This afternoon I will be helping at the registration desk. I’ll also be helping there tomorrow. Volunteering at CSTA is a small thing in some ways but I think it is really important to make some contributions. Plus it means I get a jumpstart on the “Hallway Track” that is part of what makes CSTA so wonderful. Sunday and Monday are workshops and I didn’t sign up for any. That’s new for me but Monday afternoon the exhibit hall will be open and I really want to get to that. Almost 60 exhibitors this year. I think we had 6 the first year we had exhibitors. This shows how important CSTA is to so many companies, universities, and other groups supporting CS educators. Plus it is a great opportunity for educators to learn and have one on one personal conversations with exhibitors. I’m a big fan of exhibit halls at conferences though I know not everyone is. Unlike ISTE, where I was recently, the focus on CSTA is all computer science and the exhibit hall reflects that. One doesn’t have to search for relevant booths and it is still small enough that you are unlikely to miss something. Tuesday and Wednesday I have lots of sessions in my app. I’m looking forward t o Mike Zamansky’s session on using GitHub as a CMS. There is also a session from Amazon Web Services on introducing the Cloud to students. Another key technology there! And a Nifty Assignments session to cap of the day. I’m still deciding on Tuesday. There are several sessions I’m interested in that are at the same time. A common problem, but a good one to have at a conference. I have no idea what the “hallway track” will bring. I have so many friends at CSTA and they are doing so many interesting things. Learning from other teachers is really awesome. CSTA almost feels like a family reunion sometimes."
"116","2019-07-08","2023-03-24","https://blog.acthompson.net/2019/07/csta-2019-day-0.html","Sunday was the start of CSTA 2019 with workshops and the Chapter Leadership Summit. I wasn’t part of the summit and I didn’t get to any workshops but I still had a good day. I did crash the reception Google hosted for the chapter leadership summit though. Jake Baskin announced a million dollar grant to CSTA from Google and Google’s new “Code with Google” program. I expect to learn more about both as the conference goes on. The highlight of the day was spending time with friends. I’ve been to every previous conference (going back before there was a CSTA) and in the early days it was much smaller so I made a lot of friends back then. I’ve made still more friends by being involved – volunteering in different ways. I had dinner with 10-11 friends almost all of whom had been on the conference committee with me, the CSTA board with me, or both. Besides helping the CS community, volunteering with CSTA is a great way to make friends. I wonder how it is for people new to CSTA. It’s so much bigger today and while that is wonderful in many ways I can see it being overwhelming for some as well. My hope is that people expand their connections beyond people they may have come with or know from elsewhere. Diversity is really important. Part of what made last night’s dinner so interesting for me was people from a number of different states and two countries other than the US. Diversity came up in a number of contexts yesterday both in conversation and in he Google announcements of yesterday. Companies in the industry are starting to really appreciate the importance of it but I really believe that as educators we have an important role in fostering diversity from the start. Today, Monday, I will be working the registration desk for a while this morning, visiting the exhibit hall in the afternoon, and trying to connect with as many people as I can. Learn from the best I often say. If you’re around come find me. I am wearing my hat and I have “I Follow @AlfredTwo” ribbons if you’re interested."
"117","2019-07-08","2023-03-24","https://blog.acthompson.net/2019/07/csta-2019day-1.html","As planned I spent most of the morning helping at registration. And talking to a lot of people as they came in. After lunch the exhibit hall opened and I was in there early. A few highlights: A virtual reality version of Alice is coming in the fall. I had a demo wearing an Oculus headset riding through an Alice world. Very awesome. Virtual Reality and Alice – Wow! I signed up for GitHub for educators. GitHub classroom looks like a good way to send starter projects to students. I have a lot of exploring to do but there is online training for teachers so I’ll start there. I had a demo of CodeSpace from FiriaLabs for teaching Python. They have a robot that looks pretty cool as well. Still not sure robots are my think but their connection to Micro:bit looks pretty nice as well. Code Jumper is a program developed by Microsoft for blind and visually impaired students. It involves physical devices that are a coding language. Think block languages where the blocks are actual physical blocks The teacher who showed it to me tells me that she has used these devices (not available yet but she is in a pilot) with ADHD students They get very engaged. I can really see this useful in a lot of situations. Availability is some time in the fall. I have no idea of pricing. The welcome reception was top notch. I ate my fill and have no need to a later dinner. Better still was the opportunity to talk to even more people. BTW, in my last post I mentioned Google’s new Code With Google program. It’s a good collection of resources for teaching computer science. Check it out at https://edu.google.com/code-with-google/"
"118","2019-07-09","2023-03-24","https://blog.acthompson.net/2019/07/csta-2019-day-2.html","I’m always skeptical about celebrity keynotes at education conferences so my expectations for Natasha Singer from the New York Times.were not high. I was pleasantly surprised though. She gave me a lot to think about when teaching things like ethics, accountability, and privacy. Things like what the saved wi-fi networks our computers save and share to how companies track individuals and more. A good keynote should give attendees things to think about and things to act on and this one did that for me. So great start to the day. There were any number of sessions I would have liked to have attended and I think information about them (videos maybe and hopefully others blogging) will show up. For now I am writing something about the sessions I am attending. My first session of the day was “Soaring through the Cloud” by AWS Educate. If nothing else people are getting a good look at the vocabulary of the cloud. Vocabulary is something I see as key. I was impressed that AWS wants schools they partner with share their curriculum and programs with other schools. Diversity is important to them. The AWS Educate program includes free cloud accounts, online training, and badging for successes. There is a ton of content there. I could see a special course around this. Also AWS has been very responsive to teacher and school worries about student privacy and security. Very important! I didn’t have to move for my second session of the day – Using GitHub as a Content Management System. Another packed house. This was a good walk through of GitHub for me. As a total beginner it was pretty helpful..I still have a lot of playing around to do but it does seem really usable. Lunch had a set of trivial games that we surprisingly fun followed by a panel run by Microsoft. The panel was of high school students who were talking about the influence of taking computer science courses on their lives. The students were from schools supported by volunteer TEALS instructors. These students were from schools in low economic areas that would probably not have CS without the work of TEALS volunteers – industry professionals giving their time to teach students. It was an inspiring session. Oh and the food was pretty good too. Afternoon took me to a session on Machine Learning. Teachers talked about teaching machine learning both as a concept and at a technical level. There are a couple of neural network “playgrounds” including the tensor flow website from Google that I want to use to introduce the ideas to students. There is a link to resources (http://bit.ly/ML-HS-Resources ) that I plan to explore. Last session of the day for me was Nifty Assignments. We could have used a bigger room. This session was worth getting there early for.The new CSTA Nifty Assignments page has all of the references to the sessions. Five interesting projects with something for everyone. from K-5, to 6 – 8 to 9-12. I’m inspired to have my students do more graphics by the digital coloring book projects and have some great ideas about using letter frequency counts. Oh and last year’s nifty assignments (which I missed) are also linked there. This is only going to be a better and better resource as time goes on. For me the day finished with dinner with David Renton who taught college is Scotland for years and who now teaches high school in the US. Great conversation about teaching and differences and similarities in education in two different countries. You really can meet the best people at CSTA."
"119","2020-04-14","2023-03-24","https://blog.acthompson.net/2020/04/planning-for-school-in-fall-of-2020.html","This time of year I always start thinking about the next school year. Even though I don’t expect to be teaching (announced my retirement already) I can’t stop thinking about the fall. Will schools be in their buildings or will the start the year teaching remotely. Universities are thinking about a possible school year without students on campus. I don’t think anyone wants that. It’s a worst case situation. There are some learnings we can use which ever way we go though. As I have written earlier, my school is using virtual machines that students can connect to from home. I really hope this is in place in the fall. It opens the door for so many options, especially but not exclusively, for computer science programs. If I were at VMware or Microsoft I would be working on cookbook solutions for school IT people to work with over the summer. Other options like servers hosted on Microsoft Azure or Amazon Web Services (AWS) may also be good options. They would have to work on good pricing and easy to follow instructions for IT people, teachers, and students though to make it work. I know schools using GitHub very effectively as well. That has an advantage of teaching an important industry skill. It has the disadvantage in that students may not have the right software of powerful enough computers at home. Maybe a hybrid solution with GitHub and some virtual machines would help here. Again, none of this scales with training resources for teachers. Not every It person is as good as the one at my school. And even he is constantly learning new things. Learning Management Systems may have to adapt as well. Can your schools LMS distribute and collect assignments? many can but some cannot. Schools are likely to be looking closely at how well their LMS handles remote teaching. Our current computer conferencing solutions seem much better suited for industry than for education. Other issues are showing up just because so many more people are using these tools. Poor Zoom has been playing catchup with concerns for the last month. Google Meet has also be changing and improving because of feedback from educators. Microsoft Teams is used by a few (and they mostly like it) but not many seem to know about it. I do expect a lot more online training for Teams aimed at schools to come. There is already a lot. Perhaps all of these companies, if they get a chance to catch their breath, will start looking closely at the needs of educators. I have already seen surveys from companies asking teachers what problems they have and how they are trying to solve them. Teacher needs have never gotten so much attention from companies large and small. Maybe we’ll see a big jump in functionality for schools and teachers. A man can hope. Right now we don’t know what will happen in the fall. Will there be enough testing and treatment for families to feel comfortable sending there children into schools which are germ factories in the best of times. Or will we be starting the year teaching and learning remotely? No one really knows. So we plan for the first and hope for the best."
"120","2020-03-25","2023-03-24","https://blog.acthompson.net/2020/03/teaching-from-homeday-8online-teaching.html","We sure are learning a lot about online classes these days. Teachers at my school are using Google Meet and Zoom in about equal numbers. This means that students are seeing a lot of both tools. At some point there will be a lot of good data about what does and doesn’t work. What is clear is that tools designed for companies and their conference calls is not automatically a good fit for schools. There has been some chatter about privacy and data security for both but I am seeing more concern about Zoom so far. Privacy is a big deal for everyone of course but schools have some different concerns because the data we are talking about involved children. This needs to be addressed. Students I have talked to see some of what I do when comparing Zoom and Meet and that is power verses complexity. If we could limit the complexity side to the teacher/meeting creator role that would be a good thing. We need things to be intuitive and easy for students so that they can participate fully. I’m using both tools – Google Meet for two courses and Zoom for a third. I really like the simplicity of Google Meet but it lacks the controls I like from Zoom. Zoom also lets me see more faces than Meet. That’s a big deal for me. Another lesson I am learning is that one screen is not enough. It’s not enough for me and it is not really ideal for students. It is hard for students to switch between what I am asking them to do and to what they are actually doing. For me I’d like to see their faces, what they are seeing from me, and my work screen all at the same time. I also like a window open for things like attendance taking and showing my notes. This would probably work with one large screen but it would have to be a lot larger than what most teachers currently have. A lot of teachers are sharing pictures of their home teaching stations. Like me, many are showing two computers or a computer with a second monitor. I can’t see getting by with less.I have two laptops side by side but I am considering adding a second monitor to one of them. At least I have the option. Many teachers do not. It’s probably to early to understand everything we need to do this right. Hopefully, once things calm down and some sort of normal settles in we can all compare notes and make some solid recommendations. Smart companies will take note."
"121","2020-06-08","2023-03-24","https://blog.acthompson.net/2020/06/setting-up-to-teach-from-home.html","This past spring semester was my first time teaching remotely but not my first time working remotely. I worked from home while working in industry for jsut over 9 years. The latter probably helped me set up to teach remotely. Still, I learned a few things about being a remote teacher. I thought I should write it up and see what other ideas people might have to share. First, you need to work somewhere outside the main events of the household. An office is ideal of course but not many of us have that option. Still you want to find a place that is not busy when others are home, where they are a minimum of distractions, and where you don’t have to set up and break down your work equipment every day. If you are presenting with video you want to be aware of your background. To much light behind or from the side can be a problem for the video. You want to know what is behind you. Will it distract others? Will it show things that are to personal to share with the whole world? I know teachers who have hung sheets behind them. That is probably not necessary but you want to be deliberate about what other see in the video. Speaking of video, you want a good camera. I’ve seen some debate over webcam or built-in camera and I don’t have a firm opinion. If you have a good camera in your laptop or desktop you will probably be fine. In either case, make sure you are centered in the image it takes. I find that a headset works better than the microphone and speaker built into at computer. A headset keeps out extraneous noise from both your ears and the conversation. It helps avoid distracting noises in the house as well. I know that a few teachers I know have purchased “gamer headsets” and found they work very well. They’re not that expensive either. Speaking of gamer equipment, a comfortable chair is a must as you will be in it longer than you would be if teaching in person. Several teachers I know have been buying chairs made for computer gamers. What ever chair you get should be comfortable and sturdy. Screens? You really want, I almost say need, two or more windows. Professional developers argue over which is better – two (or three) monitors or one very large monitor with multiple windows. I suspect that for most teachers a second monitor is less expensive than a very large monitor. Cost aside, personal preference rules in the hardware decision. I used two laptops side by side this spring but I would use one with a second screen if I were doing it again. I might have a second laptop as well since I have several anyway but that would be more of a backup than a principle workstation. Being able to copy things from one window to another is invaluable. I used to keep one window showing that online meeting with student faces and the second with what ever I was demonstrating or presenting. I also liked to have my student information system, for attendance, in one window and the Zoom or Meet window in another to make taking attendance easier. That was much easier than switching windows on one screen. I did the same thing when grading. Work I was grading in one window and gradebook software in the other window. Since work was all being submitted online this was the easiest way to work for me. Your mileage may vary of course. I can’t forget the network. Wi-fi works when it works. Wired connections are almost always faster and more reliable (I sometimes lose WIFI when the microwave runs), It’s not always easy to set up but if you can use a wired connection I do recommend that you do.. Will teachers be teaching remotely in the fall? I don’t know that anyone knows for sure. It doesn’t hurt to prepare for multiple eventualities though."
"122","2020-06-17","2023-03-24","https://blog.acthompson.net/2020/06/thoughts-on-ide-for-teaching-cs.html","Amy Ko posted a slide deck about CS education in higher education from a presentation she made to a group at Microsoft. There is a ton of stuff in there. I need to read it a couple more times actually. I’ll probably blog some more based on other things she brings up. Issues of equity for example. That one I need to think over a bit more as I process the reality of the world today. But for this post I want to focus on some of the ideas she shared for teaching beginners. Under the heading “Classes move too fast” she writes “Many introductory programming courses now include a 1) professional-grade programming language, 2) a professional-grade IDE, 3) a professional-grade version control system, and 4) a professional-grade test framework.” This is too much for many students. In my end of year survey most of my students felt that Visual Studio (a professional-grade IDE using a professional-grade programming language) was fine for them. Not to hard. And a lot of teachers are using GitHub – a professional grade version control system. That is still a lot to learn just to get going though. My students may think they are doing just fine but honestly I spend a lot of time fixing projects because it is far to easy to mess them up. I’m finally beginning to face that truth. Later in the presentation Dr. Ko talks about making tools that make collaboration and working together easier. How do students work together? How do they do it when they are separated by time and space? That is something we have to think about even more these days. What is the answer? Well, I’d like to see an IDE and language that creates projects that are harder to screw up for one thing. Don’t ever let beginners use Save As in a Visual Studio project. Doing so is almost a guarantee that a beginner will mess up their project in serious ways. Save As as an option for experts? Yep. We don’t want that for beginners. That’s just the start. Students are always closing windows they think they don’t need but later realize that they need them after all. And collaboration? GitHub works for some. As I said I know a number of teachers use it with their students. I have had students who used it on their own as well. Awfully smart girls those two. But its got some rough edges. It’s really a powerful professional tool that offers more than most students or teachers really need. And there are so many options and steps! We need something more simple! It needs to be tied in to the IDE fairly transparently as well. Pair programming remotely? I’ve tried Visual Studio Live Share a bit.and it has some real potential. Not many seem to know about it yet. It does require that people have a reliable want to share links for sessions. I’m not sure how it would work if a teacher wanted to look at a lot of student sessions are once. And we are still dealing with Visual Studio or VS Code and their projects. This last semester I used Microsoft Server Manager to work with students online/remotely. Worked great as long as we were on the same virtual machine. It’s not something I want to give students access to though. I would like that functionality in a different tool. Especially if making the connection was as easy as this one was. It was easier than Live Share. So the tool I would want would probably involve some sort of “server” that was attached to a class that let students find their partners and connect with permission from the other student. Wouldn’t that be cool? So what I want is an IDE that doesn’t let students mess up their projects easily, does easy version control with minimal set up or steps to make happen, and easy sharing of coding sessions. All built in with an easy set up. A test framework? That’s a topic for another post."
"123","2020-06-19","2023-03-24","https://blog.acthompson.net/2020/06/how-do-we-know-who-is-struggling-in.html","One of the interesting points Amy Ko makes in her presentation to Microsoft (CS education in higher education) is that “Most faculty have little insight into who is struggling most into their class, because the ones that struggle are most silent.” She goes on to suggest that took could help make struggle visible at scale. In the high school classroom most teaches try to be aware of what students are doing and notice who is struggling but it’s hard. Students are very good at hiding the fact that they are struggling. Many just don’t want to admit, especially in front of their peers, that they are having trouble in a class. Teaching online makes noticing struggle even harder! So what sort of tools would be helpful? That’s what I have been thinking about for a bit. What are the indications of struggle? Idleness in the IDE? Maybe but sometimes students are very active but not making progress. They add stuff, try it, delete it, and try something else. The “lest throw stuff against the wall and see what sticks method.” So to much activity or to little activity? These are both things an educational IDE could track. What about syntax errors? This is a tough one because sometimes a single character off will generate a great many errors. I have managed to see error lists move from over 100 to 2 or three after changing one line of code. So maybe look at specific errors? We probably need some research on this. Number of builds? Some people write a lot of code before doing a build while others run a build after every little change. Seems like an unreliable metric. Total time spent in the IDE? Maybe although how does the automated system know if the amount of time is due to struggle or to an advanced student adding far more than what is required? As a teacher, one thing I would like to know is that errors are the most common in a class. That would help me adjust how I teach certain things. If only students would talk to us! All in all I love the idea of tools to help teachers see who is struggling and what they are struggling with. I just don’t feel like I have a good handle on what metrics would be really helpful. Commercial IDEs are never going to care about these things though. Might make a good PhD project for some CS education researcher though. Dr. Ko suggests that one way industry could help is by “should be supporting the hiring of CS education faculty and the creation of CS education classes to prepare effective CS teachers for K-12 and higher education classrooms.” We still have a lot more questions than answers in terms of teaching computer science."
"124","2020-07-01","2023-03-24","https://blog.acthompson.net/2020/07/book-review-computer-science-in-k-12.html","Full disclosure: I haven’t read all of “Computer Science for K-12” edited and compiled by Shuchi Grover yet but a couple of chapters was enough to convince me I should recommend it to other computer science teachers. The books has chapters written by a veritable who’s who of computer science educators. (See the table of contents listed below) I’ve heard many of them speak, read much of their published works, and met more than a few of them. I knew from the author list that it would be worth having. I have been jumping around a bit but for me the chapter on Naïve Conceptions of Novice Programmers alone was worth the price of the book. I have no doubt that I am going to learn a bunch reading the rest of it. The chapter or chapters you read that makes the book worth the price may vary but I suspect you’ll find several such. If you are looking to improve HOW you teach CS you should get this book. It is available with black and white illustrations and diagrams and color versions. I bought the black and white version but wish I had spent a few extra dollars for the color. It's available from Amazon and Barnes & Noble Computer Science for K-12 – Barnes and Noble Computer Science for K-12 - Color Edition Computer Science for K-12 - Black/White Edition The table of contents is below from the Amazon page. Foreword (Inventing Computing Education in Schools) by Mark Guzdial Algorithms (Shuchi Grover) Before You Program, Plan! (Phil Bagge, Shuchi Grover) Creative Coding (Miles Berry) Data Structures (Baker Franke, Richard Kick) Events (Jennifer Rosato, David Wolber) Feedback Through Formative Check-Ins (Shuchi Grover, Vicky Sedgwick, Kelly Powers) Guided Exploration Through Unplugged Activities (Paul Curzon, Shuchi Grover) Hard Fun With Hands-on Constructionist Project-Based Learning (Deborah Fields, Yasmin Kafai) Integrating Programming Into Other Subjects (Shuchi Grover, Aman Yadav) JavaScript, Python, Scratch, or Something Else? Navigating the Bustling World of Introductory Programming Languages (David Weintrop, Shuchi Grover) Knowledge, Skills, Attitudes, and Beliefs | Learning Goals for IntroductoryProgramming (Rebecca Vivian, Shuchi Grover, Katrina Falkner) Learner-Centered and Culturally Responsive Pedagogy (Tia C. Madkins, Jakita O. Thomas,Jessica Solyom, Joanna Goode, Frieda McAlear) Modularity With Methods and Functions (Mike Zamansky, Jens Monig, Jonalf Dyrland-Weaver) Naïve Conceptions of Novice Programmers (Juha Sorva) Operators and Expressions (Matthias Hauswirth, Shuchi Grover) Pair Collaboration and Pair Programming (Shannon Campe, Jill Denner) Questioning and Inquiry (Shuchi Grover, Steven Floyd) Repetition and Recursion (Dan Garcia, Joshua Paley) Selecting Pathways With Conditionals (Shuchi Grover) Testing and Debugging (Kathryn Rich, Carla Strickland) Universal Design for Learning: Reaching All Students (Maya Israel, Todd Lash) Variables (Shuchi Grover) Worked Examples and Other Scaffolding Strategies (Jane Waite, Shuchi Grover) X-ing boundaries With Physical Computing (Sue Sentance, Katharine Childs) Yay, My Program Works! Beyond Working Code ... Good Habits of Programming (Shuchi Grover) Zestful Learning (Bryan Twarek)"
"125","2020-07-13","2023-03-24","https://blog.acthompson.net/2020/07/csta-2020-conference-onlineday-one.html","Day one of the online CSTA 2020 conference has been today. I’m blogging this as the day goes on and posting it at the end of the day. We started with welcome remarks and some tutorial about using the Hopin conference platform. As a presenter, I’d had some time to try this out previously but I think this was probably very valuable for first time users. I hope not many missed it. After welcomed remarks we had some networking time. This is actually fun as you are randomly placed in a window with someone for 5 minutes of casual chatting. I found this a nice way to warm up to the day. And to chat with CS teachers from other parts of the country. During the first break out I attended a session called - Integrating Cybersecurity into the AP CSP Course.I really think we need to teach more of cybersecurity so I jumped into this one. The people have Whatcon Communiyt College have some very interesting and useful looking resources for teaching Cybersecurity. They have 13 units at their website which I link to below along with their sites description. C5 Cybersecurity Concept Lessons NCYTE Center supports the work of a related grant project also based at Whatcom Community College, Catalyzing Computing and Cybersecurity in Community Colleges (C5). One of the goals of the C5 project is to develop and disseminate instructional materials to enhance computer science and cybersecurity courses. The following Cybersecurity Concept Lessons (CCL) illustrate how Cybersecurity can be integrated into the AP CSP course. Each lesson contains activities, a presentation and an overview document that can be downloaded and used in the classroom. The first keynote started after a sort of ad from Apple. A lot of side chatter was about the usability of Swift without having a Mac to compile on. I may have to look into that. I will start here I guess https://www.makeuseof.com/tag/program-swift-in-windows/ The keynote was by Linda Liukas who writes children’s books about computing. I really need to look into her “Hello Ruby” books. Lots of us use the exercise of having students write instructions for making a peanut butter sandwich or a paper airplane (my favorite) but Linda suggested brushing ones teeth. That sounds fun. The talk had a lot of computer free examples and exercises. Most of these would work for a wide range of ages. The keynote was high energy and inspiring for me. Videos will be available later for CSTA+ members I believe. I plan to watch it again. Lunch break and time to visit the booths and poster sessions. I visited a couple of booths. It’s interesting as the booths I visited had 50-60 people listening to the person “working the booth.” I spend some time in the Microsoft booth while they were talking about the Hacking STEM program and projects. I keep telling myself I need to get into this stuff but year after year I find myself pulled into other things. Maybe I’ll get to it now that I am retired. Then maybe I can do quest visits to my old school. We’ll see. I really do want to get involved in hands one matter hacking. After lunch, Mini-Session 3: Tools to Teach 9th-12th Grade There are over 150 people attending this session! Can you picture having rooms that large for as many sessions (12 by my count) as are going on now? This session started with Truffle Hunt: Teaching an AI Agent to Play a Minesweeper-Based Game (that link is to the PowerPoint which itself has resource/reference links) I like the idea of teaching rules based AI. Jeffrey L. Popyack from Drexel University presented that one. Next up was Teaching AI to High Schoolers Inclusively with Sarah Judd, AI4ALL. Her slides are at https://bit.ly/AI4ALL-CSTA2020 Sarah talked about an Open Learning curriculum for teaching Artificial Intelligence. You can Access the curriculum at http://olp.ai-4-all.org The last mini session was by Leon LaSpina on MATLAB. His slides on MATLAB are here. Leon is a great guy and I can see some reasons for people to teach MATLAB. But I left early and just dropped in on a couple of other sessions for a few minutes at a time. It is less disruptive to enter and leave sessions online. Next up, Formative Assessment and Feedback for CS Learning with over 270 attendees! I guess a lot of us are interested in doing better assessment and giving feedback. Slides are available at Formative Assessment This is another session I want to watch a second time. I attended Incorporating Culturally Authentic Practices in a Problem Based Computer Science Classroom. I’ve always been a proponent of project based learning but I haven’t thought a whole lot about cultural reliance before. It seemed more about PBL in general than specifically how to make them culturally relevant. It may be just me though. So I jumped into Teaching Girls to Code and Change the World which was about Girls Who Code. Girls Who Code is an outstanding program. I love the concepts of their program. It’s so much more than coding as it includes community building, long term connections and networking, and showing of role models. The afternoon keynote was by Hadi Partovi of code.org and titled K-12 CS: How Far We've Come and Where We're Headed Hadi started with a review of where we were 7 years ago and how far we have come. Hadi listed a bunch of individuals and organizations who have helped make the progress we have seen in that time. It was awesome to hear him call out so many. It’s been a global village. Hadi ta;led about how important it is to teach students ethical thinking and taking into account the impact of computing and technology. This is so important. I’ve heard Hadi speak several times and this was far and away his best talk. The last session I attended was AP CSP 2020: Updated Course and Exam because there is a chance I may teach AP CS P online in the fall. Maybe. In any case, this was VERY useful if you are teaching AP CS Principles. I have to say that I like the changes. They have really made the create task more clear and added some specific requirements that I think make the task more rigorous. . I’m happy about dropping the explore task as a digital portfolio part of the exam. The link on the session name at the start of the paragraph is to their presentation deck. I saved a copy for potential mixing and definitely for my own review. That’s the session wrap up from me. I’ll have more thoughts specifically about how the online conference experience was for me in a day or so. And of course I will be blogging about tomorrow’s sessions tomorrow."
"126","2022-04-13","2023-03-24","https://blog.acthompson.net/2022/04/last-mile-education-fundmaking-big.html","We often underestimate the difference that small things can make. When I was in high school all I could afford was a cheap plastic slide rule (no calculators back then) and it really slowed me down with math. I sometimes wonder what a more expensive and accurate slide rule would have done for me. I had other privileges and did well in the long run. But that is not the case for everyone. Privilege often gets conflated with potential when in fact a lot of potential gets short circuited because of obstacles that are more common for non-privileged students. Things that are non-issues for many become showstoppers for far to many others. Picture a student with great potential in computer science who can’t afford a good laptop? Or cannot afford her textbooks or lab fees? Low income students often take longer to graduate because they don’t have adequate preparation and need some extra courses and time to catch up. That often means they run short of funds even with the finish line in sight. Even good scholarships often leave gaps in funding that limit students from underprivileged backgrounds. That’s where the Last Mile Education Fund is making a difference today. From the mission statement of the Last Mile Education Fund: “The Last Mile Education Fund takes an abundance approach, investing in a broader group of students already committed to technology and engineering fields, providing support for challenges they face beyond their control, and incubating them to be the next generation of innovators. “ Last Mile Education Fund invests in striving, low-income students pursuing degrees in the high-demand fields of technology and engineering to support them in their last mile to graduation and into a career. A number of grant programs are available. Some of them specifically for female and non-binary students but a number of them are available to all genders. The Microsoft Cybersecurity scholarship is for community college students of any gender for example. Full information about these opportunities is available at the Current Funding Opportunities page. I have links attached to some that have pages with more details.They include: EMERGENCY MINI-GRANTS Bridge Grants LAST MILE GRANTS MICROSOFT CYBERSECURITY SCHOLARSHIP PROGRAM NORTH TEXAS BIOTECH WORKFORCE FUND REU PARTICIPATION FELLOWSHIP If you know of students who could take advantage of these grants please spread the word. And let teams/people at universities and colleges who support low-income students know about these programs as well. They can help a lot of high potential students with some hurtles that could but shouldn’t hold them back."
"127","2022-05-13","2023-03-24","https://blog.acthompson.net/2022/05/teach-cs-in-k-12-please-help-gather-data.html","The Computer Science Teachers Association (CSTA) and the Kapor Center are conducting a survey of K-12 computer science teachers in the United States. The CS education landscape continues to evolve, and we want to hear directly from teachers about your experiences, challenges, and what resources would be most useful to you at this time. Having detailed and current information allows policymakers, curriculum & PD providers, State Departments of Education, membership associations, and other organizations to better understand and meet the needs of teachers. Results will be used to make specific recommendations to improve support for CS teachers. If you teach K-12 computer science, we need your voice! We invite you to participate in this national survey, which will take approximately 20 minutes of your time. Responses are confidential and optional. As thanks for your time, the first 3,000 teachers who complete the survey will receive their choice of a $10 Tremendous gift card. All participants will be entered in a raffle for one of five $200 gift cards. Please encourage other CS teachers to also complete the survey, and if you have any questions, please contact membership@csteachers.org or research@kaporcenter.org. Many thanks again for contributing vital insights to improving K-12 computer science education! With appreciation, CSTA and Kapor Center Build Learn more about the Computer Science Teacher Association here. Learn more about the Kapor Center here."
"128","2022-02-16","2023-03-24","https://blog.acthompson.net/2022/02/troubles-with-error-messages.html","Error messages, in theory, are there to help programmers. Of course there are problems with then in practice. With students, the biggest problem is that they don’t read the messages. I’ve long ago lost count of the times a student told me they had an error but can’t tell me what it is (or was) because they closed it without reading it. Getting students to read the message and to try to work out the problem themselves can be a struggle but one we have to attempt. Even if they do read the message, messages are not always clear. Have you seen this poem? Roses are red Violets are blue Missing { at Line 32 Seems simple enough but that can be deceiving. Often the message doesn’t actually give the right line. The reasons for this can be complicated for a beginner, or even an experienced programmer, to understand. It is a constant source of frustration. At least one knows that a missing curly brace is (probably) the problem even if we are not really sure where it is missing from. Other messages are less helpful because the programmer lacks knowledge to understand the words being used. Or the message just does a poor job of explaining the problem. Why are error messages less than helpful? Many reasons. One is that error messages are not fun and interesting to write. There are also strict limitations on the number of characters allowed. Still another is that the person writing the message is often so familiar with the software and the error that they write something that, while meaningful to them, is somewhat opaque to people newer to the software. Reading error messages is not just a problem for students of course. When I was doing technical support for professional developers I would regularly get calls asking to explain an error message. A little secret here – a good explanation could often be found in the documentation! More than once I just looked up a message and read from the documentation. Even the explanation in the documentation needs a little help sometimes but it is a great place to start. When teaching beginners we don’t often spend a lot of time on error handling which means we don’t spend much time talking about writing good error messages. We do ask students to write messages in programs about games over and winning and losing. Occasionally we have to suggest rather strongly that an error message that calls the user “an idiot” is perhaps not appropriate. Perhaps we should spend a bit more time on error handling and as part of that talk about good error messages. Maybe if we had beginners talking about the error messages they see from their systems and how they could do better we;d get better error messages later when (if) they turn professional? Regardless, I think error messages should be a bigger part of the conversation. Reading them, researching what they mean, and thinking about how they could be done better."
"129","2022-02-24","2023-03-24","https://blog.acthompson.net/2022/02/fun-with-rounding-errors.html","I love xkcd cartoons. I came across this one thing morning that shows the benefits(?) or rounding up. My immediate idea was “what a great programming project!” One of the first “hello world” type of exercises I often assign is simple conversations. Fahrenheit to centigrade, miles to kilometers, etc. This is a step beyond that but with a difference. The difference is rounding up and its effect on accuracy. This is a good program to use to introduce rounding in general but to also talk about how rounding errors can have a large impact when they occur over and over again. This example uses velocity but I can imaging there are interesting results with weights, simple distances, and almost anything else that normally requires better than integer accuracy. Currency anyone? I’m thinking about trying that one because it involves money. It might be interesting and educational to try the difference between rounding normally, always rounding up, and always rounding down. What do you think? Anyone doing something like this? Would it be useful?"
"130","2020-10-04","2023-03-24","https://blog.acthompson.net/2020/10/artificial-intelligence-humor-and.html","Last night I started re-reading Heinlein’s The Moon Is A Harsh Mistress. It’s an old book, written in the mid 1960s, so there are some old ideas about computers and computing in it for sure. There is some hand waving about how AI is done and how the computer, Mike or Mycroft Holmes, becomes self aware. It is fiction after all. The computer is trying to understand humor and a human friend is trying to help. One way he is helping is to get lists of jokes and report back on which jokes are funny, which are funny once, and which ones are always funny. That sounds a bit like machine learning we see today I think. In any case, even is the computer does understand humor at some level and is able to create jokes that people find funny does that mean it has a real sense of humor? Will it be able to laugh at jokes that are not in its system? I wonder. This makes me wonder about other things. We know that AI has been able to write music that people enjoy and create art that looks like it was done by master artists. Is creating art or music the same as enjoying art and music? Maybe not. Now human artists “hear” music in their heads before they write it down or play it. Beethoven write music while he was deaf and so could not hear it being played. I’ve been to a number of wine tastings. I don’t like wine. No matter how many times I taste it I just don’t enjoy the taste. Listening to wine experts talk about wine and tasting it myself I think (could be wrong) I could learn to identify the wines that wine lovers like. I don’t see me enjoying the process very much though. Understanding is not the same as enjoying. Is it the same for computers and AI? I think so.Recognizing beauty or humor or music is not the same as enjoying it. The difference between humans and AI is that humans enjoy their creations. And they enjoy the creations of others. If we think about creating beauty as enough to being human-like I think we have a narrow view of humans. What do you think?"
"131","2020-10-12","2023-03-24","https://blog.acthompson.net/2020/10/thinking-about-algorithms-in-our-lives.html","My wife and I use these fitness trackers, ours are made by Garmin, to keep track of our activity during the day. Each day the devices give us a goal for how many steps we should take that day. The goal goes up or down depending on how many steps we did on the previous day. I think. Maybe. Being the computer guy that I am I keep thinking about how the algorithm actually works. Is it a simple algorithm based on some sort of average or does it have some amount of smarts? Does it take several days activity into account or just the previous days? Like so many things in our lives the algorithm is completely opaque to users. Google Page Rank, the algorithms that run on the computers controlling our cars, and the software John Deere uses to control the equipment they make. (see article linked below for way this opacity is a problem for some) are all secret. Why? Well, various companies have various reasons for keeping their algorithms secret. Competitive advantage is the reason for some. For many it is to keep people from “gaming the system.” Google, and other search engines, don’t want people to find ways to get unfairly high placement in searches. I suspect some of that is involved in my Garmin’s secrecy. For others, it is about keeping control of the how the systems them make are run – often for the sake of safety. That’s why many companies don’t want their software “messed with.” How good or bad this is for the consumer is quite up for debate. There are solid arguments on both side. Arguably, the right thing depends on the situation in many (perhaps most) cases. These are issues we need to think about going forward. People who write software and create algorithms have a responsibility to make the right decisions about secrecy or openness. The decisions have to be about more than just money as well. Do you discuss these issues with students? I think we need to do so. Farmers Fight John Deere Over Who Gets to Fix an $800,000 Tractor"
"132","2020-10-14","2023-03-24","https://blog.acthompson.net/2020/10/what-if-we-asked-students-to-write.html","A professor friend on Facebook posted that a student emailed him to say that they textbook the were using was “crap.” I suggested in jest that he asked the student to write a better one. That’s pretty tough since how do you write a textbook about something you are learning as you go? (Can be done. Is painful. Don’t ask how I know this.) The exchange got me thinking though. Supposed we asked students to write a chapter for a mock textbook? Or perhaps asked them to write step by step instructions for completing an exercise assignment. After it was covered in class but perhaps in lieu of a test. I think it would be interesting to see how students explain concepts. Have they write to explain things to people their own age. How would they explain things? What words would they use? What examples would they give? They say that to really understand something you have to be able to explain it to others. Somehow I don’t think most students would like this exercise though. Of course we already ask students to do things they don’t like – taking tests being one of them. I do think that it would give us insights into what they do understand and how they understand it. Or misunderstand it as the case maybe. Anyone want to try it?"
"133","2020-10-29","2023-03-24","https://blog.acthompson.net/2020/10/tilecodecreating-games-on-and-for.html","People are Microsoft always seem to be working on interesting and unexpected (to me anyway) things. My most recent discovery is TileCode. From the website: Microsoft TileCode is an app for designing, coding, and playing video games directly on low-cost MakeCode Arcade gaming handhelds, as well as in the web browser. With TileCode, we are using the medium of video games to explore the combination of Natural language for informally specifying games goals, rules, and mechanics; Physical computational models that foreground concepts such as data parallelism, pattern matching, and conflict resolution; Testing and debugging of programs to establish confidence in their behavior and to refine specifications; Machine learning to help bridge the gap between natural language and programs, as well as to generate non-player character behavior in games. Our ultimate goal is to provide a sandbox in which students can express and refine their game ideas, while learning about computation, programming, and machine learning, supported by software engineering practices. It's a pretty interesting idea. I wonder how it might work in classrooms. There is a webinar about their research later in November that I hope to sit in on. TileCode builds on a lot of previous work and not just from Microsoft. It builds on Kodu and MakeCode but they reference a lot of other block based tools in their paper - TileCode: Creation of Video Games on Gaming Handhelds I'm really fascinated by the work I am seeing in domain specific tools lately. While games are a popular topic I'm been following Mark Guzdial's work with domain specific languages for Social Studies with interest. I tend to think that rather than see artificial intelligence take over the job of programming that we’ll see more and more domain specific languages (should we call them tools?) that people will use. I’m not convinced that AI and machine learning will know when rules are really guidelines."
"134","2020-11-16","2023-03-24","https://blog.acthompson.net/2020/11/tiny-book-of-simple-cryptography.html","I've been playing with simple cryptography. Mostly stuff that was solid before computers. Just for fun mostly but some of it may make for interesting projects for students. I've written a little bit about the things I have been playing with. This is not a big book and it is intended more to spark interest and not to be a real reference book. There are footnotes linking to Wikipedia articles that would be a good next step for learning more. I have a couple of substitution ciphers and a couple of transposition ciphers. Added some Steganography. http://www.acthompson.net/TinyCrypto.pdf Comments and gentle criticism welcome. I have coded solutions in C# that are ok. Some of them even have comments. Updated 5 March 2021 to include a brief chapter on the PigPen Cipher. Also some minor edits in other sections."
"135","2020-11-22","2023-03-24","https://blog.acthompson.net/2020/11/the-making-of-computer-science-teacher.html","There is quite the conversation going on in the private Computer Science Educators group on Facebook about teacher preparation for CS educators. This is a very interesting group for CS educators BTW. Join if you are on Facebook. I link to some specific articles at the end. It’s a lot more complicated question than it might appear. There is the argument about what CS educators need to know to teach CS effectively. Is something better than nothing or is not enough going to mean poorly prepared students? Given all the complaints I have heard from university people about high school students being taught CS wrong (what ever that means) I tend to believe that CS educators should have a lot more depth of knowledge than the courses they are teaching. Definitely more depth than their students will get from the course. We expect this from teachers of other subjects (for the most part – see highly qualified teacher). As to preparation, and its close cousin – certification – we are dealing wtih three main types of people who need preparation to teach CS. Teachers of other subjects CS experienced people moving into teaching Career beginners who are not previously teachers or CS people They all need something different. I have heard people say that a good teacher can teach any subject after learning some content knowledge. I would argue that teaching CS is different from teaching most other subjects. A teacher needs to know how to teach computer science. We've been fortunate over the last decade or two that some serious research in how to teach CS has been done. CS teachers need to know what has been learned about HOW to teach. Teachers of other subjects also need some solid content knowledge. Topping out at the content involved in AP CS Principles and AP CS A (the top high school cs courses) is not enough. Well, not for high school CS teachers. Students are going to ask deeper questions than what is required and you can only get by with “well, let’s look that up” so often before people start to wonder if you know what you are doing. How much do you need? And this goes for people new to teaching as well as just new to teaching CS. That’s a struggle. I don’t think you can get it in two one semester courses let alone a couple of weeks worth of summer workshops. Two semesters of programming is probably the minimum for that aspect. In the first one a person learns a programming language and a start of how to solve problems. It takes a second course to really become a programmer. Of course there is a lot more to computer science than programming. Vocabulary, networking, algorithms, security, CS ethics, and well, if your have taught AP CS Principles you get the rest. So three or four semesters of real CS. Everyone who teaches CS including those new to teaching and those career changes needs a course or two (or three) if pedagogy. A focus on teaching CS for sure but also some work on test development and evaluation and classroom management. Do they teach classroom management in regular education programs? CS has some interesting complications involving students playing on the internet and messing with lab computers. I also think that CS teachers, especially now when there are seldom multiple CS teachers in a building, need to learn about external resources. Social media, CSTA, summer workshops and conferences, StackOverflow, and generally how to build a network to support your growth as a CS teacher. To prepare to be a great CS teacher is going to take a lot of work. Yes, people do figure it out on their own I know people, I am one, who came to industry without training in teaching and did a pretty good job. Enthusiasm and great students will get you pretty far. That’s not the ideal I look back and wonder how much better my students would have been if I had known what I know about teaching CS back then. I don’t think I messed anyone up too much but could I have taken them further? I like to think so. If CS is going to take its place with other core subjects we have to learn to teach it well. We have to have more than just enthusiasm for the subject.. We have to set high standards for teachers as well as students. Facebook Conversations https://www.facebook.com/groups/cptrscied/permalink/886841201720689/ https://www.facebook.com/groups/cptrscied/permalink/886035605134582/ Mike Zamansky’s post of the subject https://cestlaz.github.io/post/teachers-can-learn-cs/"
"136","2020-11-29","2023-03-24","https://blog.acthompson.net/2020/11/does-it-matter-how-fast-code-is.html","I’ve been having a lot of fun playing with code lately. One of the things I have been experimenting with is cryptography (See Tiny Book of Simple Cryptography) For one project I wanted to create a string of ones and zeros to represent the binary value of letters. I quickly came up with three ways of doing this. I know that are probably many more ways than that. But for now I have some that work and one of them I really like. Which one is best? Well, that depends. Which one is the fastest? That depends as well. I think I know which one is fastest. It uses the bitwise & operation which generally is pretty quick. One used the Math.Pow function which I suspect slows things down quite a bit. The third uses nothing fancy at all and could easily be coded by someone with only a little programming knowledge. I suspect it is the middle in speed/ Does the speed matter though? In this application , probably not. The bottleneck in performance is going to be in the I/O not the calculations. The performance of this function is lost in the noise. What probably matters more, if one is looking to define “best”, is which algorithm is easier to understand.. I learned this lesson one day back when I was writing code for a living. We were doing a formal code review of my code and I had written what I thought was a very clever piece of code that was pretty efficient. The review made me rewrite it using code that was no where near as clever or interesting. It was, however, a lot easier for someone new to the code to understand. And that was more important. Now there are applications where performance is critical. I remember working with a company building a system to collect weather data. They collected a huge amount of data is a very short period of time. They were actually comparing the instruction execution times of various machine language instructions to pick the computer they were going to buy. That’s pretty exceptional though. To complicate matters even more, today’s optimizing compilers are very smart. It is rare that a person coded Assembly language program can outperform code generated by an optimizing compiler. I was involved in actual benchmarks of this in the 1980s and things are improved since then. Take these two pieces of code: if (foo % 2 == 1) label1.Text = ""Odd""; if ((foo & 1)==1) label2.Text = ""Odd""; Which one is faster? You may think the second one is faster. You might be right. On the other hand, a really smart compiler by generate the same low-level code from both of them. Unless you were on the compiler writing team you probably don’t know. Even if you have the source code for the compiler do you really want to spend the time to see how it is optimized? You couple probably also look at the generated code but is that worth it either? Not generally. The first example is clearer. A number of my friends who write code for a living tell me that is what they would use. Because it is clearer and understandable by more people it is not worth worrying about an optimization that may already be taken care of for them by the compiler. Once upon a time it mattered a great deal if one iterated though a two dimensional array by column first or by row first. One had to know which was faster and do it right. Today, compilers take most of the worry about this away from us. We can do it in the way that seems more logical for us and for the application. One of my friends who has worked on compiler development teams tells me that conversations about this sort of optimization are frequent there. People working on compilers have the time and the experience to make compilers smart. I’m pretty sure more of them (the people and the compilers) are smarter about code optimization than I am. That doesn’t mean we can ignore performance. I’ve seen some beginner code that is horrible in performance. But still there are trade offs. I once wrote a very slow program that I ran once a month. I thought about a way to optimize it that would cut a minute or two off of the run time. It would have taken me an hour to code and that was a lot more time than it would have saved me. Turns out a faster computer a few months later ran the inefficient code a lot faster anyway. Honestly, though discussion optimization and performance can be fun for a certain class of geek. Geeks like me."
"137","2020-12-01","2023-03-24","https://blog.acthompson.net/2020/12/why-do-i-care-about-this-program-i-am.html","Why do we program? Well, for some of us it is because we get paid to write code. For some it is part of our learning experiences. For a few it is the fun of it. There are a lot of motivations and they are different for different people. A couple of posts have been thinking about this lately. Mike Zamansky has bee posting about the Advent of Code event. (Mike’s initial post here Advent of Code 2020) Today I replied to his post about the first puzzle with the following. I struggle with these problems a bit. Not because of the technical issues but because of motivation. Or perhaps relevance. Why would I need to do this? What interesting or important problem does it solve? I guess the issue for me is that solving a problem for the sake of solving a problem, proving that I can did it basically, is not motivating to me. Maybe I have been programming too long to feel like I need to prove anything to myself. OR anyone else for that matter. I get that for some the challenge is enough motivation and that they get satisfaction from the effort. The journey being more important than the destination I guess. And that is fine and if people enjoy doing it that is wonderful. I'm happy for them. It just doesn't motivate me. As I thought about it, this also related to a post by Mark Guzdial recently. Purpose-first programming: A programming learning approach for learners who care most about what code achieves: Katie Cunningham’s Defense I hope to be able to hear Katie’s defense tomorrow. And look up her papers. When we as educators assign projects or do demos, what is the purpose of of the code? And does anyone care about it? Students work harder and longer, it seems to me, on projects that they care about. Not just for the grade though that motivates some. Do they want to see the program work for themselves? I always found that the hardest working most motivating projects were the ones students selected or decided upon on their own. Projects that solve problems that are meaningful for them are much more effective than projects that are more about “just do this to learn how this concept works. I’ve been playing with code myself lately. Each project has taught me something but I was motivated more to solve a problems that was interesting to me than to learn the new concept/algorithm/language feature or what ever I learned. This is what we as educators need to bring to our students in my opinion. They have to care about the problem and not just the grade."
"138","2020-12-03","2023-03-24","https://blog.acthompson.net/2020/12/new-resources-for-teaching-and-learning.html","Earlier this week I was a guest speaker in a computer science class (via Zoom of course). It was fun to be back into a class and interacting with students. The students were asked to prepare questions for me and many of the questions were about artificial intelligence. That’s not surprising as AI has really jumped into the public in ways it hasn’t before. That’s why it is timely that code.org has created a new resource for teaching and learning about AI. The main resource page for this is at https://code.org/ai There you will find a bunch of short videos of 3 to 5 minutes that cover various aspects of AI. Several of the videos explicitly focus on getting people to think about the ethics involved. Satya Nadal, Microsoft CEO, in his introduction makes one of my favorite points right off the bat. It is not enough to think about what computers can do but we also need to think about what computers SHOULD do. Ethics are woven into all the videos and not just the once focusing on ethics. The videos are typical code.org videos. That means high production values and a diversity of impressive speakers. Presenters represent a variety of ages, races, and colors. They are all impressive and are practitioners in the fields of AI. There are academics and there are people from industry. They really highlight a broad cross section of people involved in AI today. Besides the code.org videos there are links to videos from other organizations, lesson plans, and activities powered by artificial intelligence and machine learning. And more. It’s a great place to start building the set of curriculum that will work for your course and the age group you teach."
"139","2020-12-14","2023-03-24","https://blog.acthompson.net/2020/12/dreidel-gamea-chanukah-programming.html","If you’re anything like me, you like to assign projects that have some relationship to what is going on in the world. Holidays are one such thing. December brings the Jewish holiday of Chanukah – usually right before Christmas. The Dreidel game is a game traditionally played during the Chanukah celebration. It is played with a top that has four flat sides. Each side has a letter of the Hebrew alphabet. ש Shin ה Hey ג Gimmel נ Nun The game has multiple players each of whom is given the same number of tokens. Players all place one token in to a “pot” and spin the dreidel to see who goes first. The player who spins the highest value starts. Note: nun is highest, then gimmel, hey, and shin. If there is a tie, the players who tied spin again. Each player takes turn spinning the dreidel and taking an action depending on what letter they spin. * Shin: put one more token in the pot * Nun: do nothing * Gimmel: take all tokens from the pot * Hay: take half of all tokens lying in the pot.In case of an odd number of tokens, round up. The game ends when one player has all the tokens or after some set period of time or mutual agreement. There are lots of ways to program this of course. Normally, at this point in the semester I have been teaching students how to create simple classes. So when I wrote my solution I created a dreidel class. There are some reasons that this makes for a nice class to create. There is the usual protected data – the face value of the dreidel. And there is the obvious spin and get value methods. I also over loaded the ToString and CompareTo methods. The ToString method allows for displaying the name of the face value of the dreidel. CompareTo is particularly useful for selecting the high spin at the beginning of the game. I also added some public const values for the face values so that I could use them in calling programs without the programmer needing to know what the actual values are. if (player.Value== Dreidel.Shin) Here we have a fairly simple game to program with a class that lets the programmer do some interesting overloads and activities without too much complexity. Inspired by a project idea posted on the AP CS Teachers Facebook group group (https://www.facebook.com/groups/APComputerSciencePrinciples/permalink/1873272652824371/) Thanks to Lee Whiteley for sharing with the community.."
"140","2020-12-17","2023-03-24","https://blog.acthompson.net/2020/12/musings-on-goals-of-high-school.html","Recent conversations on Twitter and Facebook have had me thinking about the goals of teaching computer science in high school. There is no single goal and it probably varies some by teacher, school, and student population. My goals were basically: Give students a basic understanding of computing and computer science to better understand the world around them Create an interest in computer science so students are willing to learn more. Create in students the idea that they can “do computer science.” I would rather not prioritize them. I think I did a pretty good job with the first goal. That’s probably the easy one though. But it is pretty important. Helping students better understand the world around them is at the heart of a lot of education. We don’t expect every student to be a novelist, a biologist, a chemist or a professional mathematician. So we are not (usually) expecting HS CS students to become professional programmers. The second listed goal is pretty hard to measure objectively. I hope I made my classes interesting and the subject itself interesting. A number of students did go one to major or minor in CS so there is that. I hope I didn’t turn too many off. The last listed goal is also hard to judge objectively but it’s really important. People don’t continue to invest time if they don’t thing they can succeed. Any one can learn computer science. Anyone can learn to program. Some may have to work harder at it than others and some will find it more interesting than others. Student have to know that they can do it if they choose to try. If students choose to study more CS I want them to have a solid base to build on. I think that is a given. Right? Unless I succeed at the three listed goals above there is not much point in anything else though. So I made the course rigorous and I try to teach the concepts and ideas and good habits that I learned over the decades. I do it with a goal of building success, interest, and understanding of computers in the world today. I’m not just trying to teach the computer science nerds, no matter how much I love then, but all of the students in my class."
"141","2020-12-18","2023-03-24","https://blog.acthompson.net/2020/12/pythagorean-theorem-day-programming.html","I’ve been doing little programming projects for my own amusement. I thought about doing Advent of Code like the cool kids are (Looking at you Mike Zamansky who among others is blogging about those challenges) but I just can’t get into them. I need to scratch my own itch as it were. The other day a friend posted on Facebook that the date was a Pythagorean Theorem Day – 12-16-20 because a right triangle with a height of 12, a width of 16 has a hypotenuse of exactly 20. It’s a cute idea if we ignore that the year is really 2020 not just 20. I commented that calculating the next Pythagorean Theorem Day would be a fun little programming project. Today I thought I would try it myself. The set up is pretty easy. Nested loops for month and day and using the usual math. There are two issues. One is that not all months have the same number of days. The other is that we want an exact whole number for the hypotenuse. The first was solved by creating an integer array with the number of days in each month and using those values in my equation. The second took some thought. There are probably some really cool mathematical ways to do this. I thought about this and decided to cheat a bit. I converted my floating point result into a string, cast it into an integer, converted the integer value to a string, and then did a string compare. The result of the compare determined if I displayed the result or not. There are 12 such dates in case you are interested. Only two of them are after 20 though. I leave figuring the rest out as an exercise to the interested (or assigned) programmer. A few things make this a nice student project in my opinion. Nested loops of course, using an array to simplify the programming, and what ever you use to determine if the hypotenuse result is an integer or not. And it is short so you can use it as a demo or an in-class project. What do you think? How else would you determine if the result was an integer or not?"
"142","2020-12-30","2023-03-24","https://blog.acthompson.net/2020/12/looking-back-on-computer-science.html","What a year it has been. I was reading my start of the year post from January. The closing was “2019 has some serious potential.” I had no idea what was to come in 2020. By the middle of March I was teaching online to students who were doing their best to learn from home. It really changes a lot for teachers and students. So what changed? Well, there was some serious growth in online development tools. Teachers moved to or increased their usage of tools like GitHub, Repl.it, and other online IDEs. I still like the solution my school used (and continues to use now that they are mostly in-person) of a cloud based virtual machine. That the big cloud companies (I’m looking at you Microsoft and AWS) haven’t jumped on this means they have missed a huge opportunity in my opinion. Plans for a lot of physical computing went by the wayside as schools either didn’t have equipment to send home with students or didn’t want students sharing devices that could not be easily sterilized. I suspect emulators got a lot of use. Along with school, conferences went virtual in 2020. It looks like that will continue into 2021 as SIGCSE will be virtual. It’s still uncertain if CSTA 2021 will be virtual or in-person. CSTA 2020 went pretty well online. I enjoyed presenting virtually. Though to be honest it wasn’t quite as much fun as presenting in-person. I couldn’t hear people laugh at my jokes for one thing. For myself, the biggest change of the year was retiring from the classroom at the end of June. So I have missed most of the crazy on the fall of 2020 school year. I have been watching what my friends have been going through though. I guess I picked a good time to retire. I do miss the kids though."
"143","2019-01-01","2023-03-24","https://blog.acthompson.net/2019/01/happy-new-year-2019.html","I’ve been thinking about this post for the last several days. My usual practice has been to start the year with a list of things I want to watch in CS education during the coming year. As I look at last year’s list (see Looking Back on CS Education in 2018) I don’t see a good list for this year. The things I’ve been watching have largely matured. The next big growth area is not clear to me. Sure we’re making progress in getting computer science education for more and more people. Of course there is more to do and room for growth but it feels like momentum is going to carry us through. So this year I am thinking about what I can do to give my students an edge. What can I shoehorn into my curriculum that will go beyond the average. There are people who way ahead of me of course. Doug Bergman and David Renton at Porter-Gaud School are doing amazing things. A number of the career/technical schools I know of have room in their curriculum for a lot of things I haven’t been able to fit into mine. Likewise, there are a number of magnet schools covering some really advanced topics. Most of these have more room in their curriculum for CS than my school. That means I need to do things differently. I suspect that most teachers at comprehensive or college prep schools have some similar time limitations. We have room for only so many courses. In may case I have what seems like a lot of options. We teach some programming in our freshmen course (it’s only one semester long and we cram a lot in already). I have a one semester honors programming and a one semester mobile application programming course. In both of those we get students to the point that they can do interesting things and then the semester is over. We offer both Advanced Placement Computer Science courses. They're both a full year long but it feels like they are pretty constrained. I only teach the Principles version so playing with APCS A is a moot point for me. The AP courses are a problem of sorts. As they say, a blessing and a curse. Parents and administrators love them. They help make schools look good to parents. They make students look good to college admissions officers. There is lots of well-developed curriculum and professional development for teachers. What’s not to like? But you wind up teaching to the test. It’s almost unavoidable. Your curriculum plan has to be approved by the CollegeBoard for starters. While you can get clever about things like projects, tools, and for APCSP even languages there is always that constraint about what is on the test that you have to focus on. If APCS is the only course one teaches you probably have the type and energy to get really creative. If you teach four different courses (as I do) it can be a bit overwhelming to make big changes to the AP CS course. The path of least resistance (for me teaching APCSP) is to use the developed curriculum and teach using that. The code.org APCSP curriculum, which I am using, is pretty amazing for teaching that course. Since I have two other courses I teach alone based on self-developed curriculum there is some strong motivation to spend time on those. What I want to squeeze in somewhere are cloud computing, Artificial Intelligence, and Virtual Reality development. I don’t really know enough about any of these to know how hard it will be to fit any of them in or where they would fit logically. If I had a year long course after my honors programming class that wasn’t constrained by the AP curriculum I would recruit a group of smart curious students (plenty of them around) and we’d all learn together. Alas, that is not currently an option for me. My current thinking is to try and learn more about one or two of these on my own and by the summer have an idea where I can fit some of it. Amazon Web Services has AWS Educate which I have signed up for. It has a bunch of free resources and training. Seems like a good place to start learning the cloud. It looks pretty well set up for teachers as well. SO that is the cloud piece. Next is either VR or AI. VR requires some hardware to do right as far as I can tell so I have to factor that in. Both AWS and Microsoft have some AI that can be used. Since I already know about the AWS resources I may start there with AI. VR is pretty exciting as well and there are some great resources for using Unity with C# for that. I already teach C# using Visual Studio so going the VR route may be a good option. I hope to get my current semester long courses in good enough shape during the school year that I can really deep dive into the cloud, AI, and VR over the summer. Not that I will wait until then to start but that will be when I can get deepest. And of course the search for resources for my own learning, for teaching, and for making this stuff fit goes on all the time. Let me know if you have links to share. So basically my message is, 2019 has some serious potential."
"144","2019-01-09","2023-03-24","https://blog.acthompson.net/2019/01/everything-old-is-new-again.html","I try not to throw code away. I have punch cards in my attic that are over 40 years old. I also have a bunch of code from my university days on a magnetic tape (a DECtape) that I will probably never be able to recover. But a lot of code since the PC era I still have in accessible form. Today, Facebook memories reminded me of a blog post I wrote 10 years ago today. Next step was to look though my archives for the code it referenced. I haven’t thought about the project, parsing a string to evaluate its strength as a safe password, in some time and thought I might want to use it in one of my courses. Honestly, I didn’t remember my algorithms and while I could think of several ways to do it I thought a memory boost would be fun. It turns out I have a second example that someone else, another teacher who shared his projects with me, had written. Comparing the two programs was interesting. There are, as usual, more than one way to solve a problem like this one. With two very different solutions and some other options that have popped into my mind while thinking about the project I am rethinking how to use this project. Typically I would just assign the project and see what solutions students come up with on their own. On the other hand, I could provide a structured set of recommendations. Various ways of implementing scaffolding would leave more or less flexibility for the student. Still musing over that. Another option is to provide students with several code examples and ask them to evaluate them. I see a couple of benefits to this plan. Students would get some valuable practice in reading other people’s code. We don’t do enough of that in my opinion. It would also show different techniques (tools if you will) that they may want to incorporate in their own future projects. And it would allow us to have some conversation about efficiency. I’m still noodling on these ideas but I thought I would toss my thinking out for comment. What do you think of these various ideas? What would you do?"
"145","2019-01-10","2023-03-24","https://blog.acthompson.net/2019/01/lecture-as-performance-art.html","Mark Guzdial posted a link to an article about him (The social justice case for computing: transforming tools for some into a language for all – you should read it) that had a picture of him teaching. His comment on Twitter was that “Pictures of me teaching look like I'm either a preacher or a Jazzercise instructor.” Shuchi Grover suggested “Bollywood’s greatest actor.” Now Mark is a great speaker, very dynamic. And really dynamism is a hallmark of good presenters. A number of professors have large YouTube audiences because of the way they present material. Now I know there is often pushback from teachers saying that their job is to teach and not to entertain. Let’s face it though, all the “teaching” in the world is of little use if no one is paying attention. Not everyone is a great entertainer. Lots of them are in the “lecture is dead” school of thought too! There is a lot of pressure to be the “guide on the side and not the sage on the stage.” Personally I think most material needs a mix of the two though. Students need somewhere to start and often that means a lecture of some sort. BTW showing a video is a form of lecture not matter how cool the sound and graphics are. If we’re going to stand in front of an audience we owe them our best efforts. I’m a firm believer that part of what makes a teacher, and a lecture, a good one is the presenter's enthusiasm for the topic. If you are really enthused it will show and it will be contagious. I’m always amazed at how little formal training most educators get in presentation skills. One would think that would be a regular occurrence. When I worked in industry I was given a mandatory presentation skills training about every second or third year. Eventually I hope to get good at it. I’ve noticed at events with both educators and industry people presenting the industry people are often the most polished and, yes, entertaining, presenters. Industry speakers often get salary reviews based on the reviews they get from giving presentations. Educators are evaluated differently of course. And that’s not bad. With as many distractions as students have today we really have to up our presentation game though. No, we are probably not entertainers by a strict definition perhaps but at least we have to be interesting. And give students some reasons to stay awake."
"146","2019-01-24","2023-03-24","https://blog.acthompson.net/2019/01/computer-science-standards-and.html","I’ve been thinking a lot about computer science standards and frameworks the last couple of days. It’s all Mark Guzdial’s fault because he posted Frameworks and Standards can be limiting and long-lasting: Alan Kay was right Following Mark’s post are (as I write this) 38 comments. Some of the longest and most thought provoking have been from Alan Kay. Yes, that Alan Kay. This was hard to read for me because I was involved in writing the Framework and invested a lot of time in it. I thought I was doing a good thing. But I can see some of the flaws with the benefit of time and an outside view from many smart people. I was also on the CS 2013 task force so I have seen two different processes for two very different documents. I do, and always did, wish the Framework process could have been more like the CS 2013 process. I feel like the reviews between drafts of the CS 2013 were done better with solid input from many and varied outside reviewers. There were both too many and two few people involved in the K12 CS Framework. Too many doing the actual writing and perhaps too few doing reviewing. For an other thing, I felt like the Framework writing became a lot more about how things were said (worded) than what was said. Not that what was said wasn’t important but that politics drove the working. Perhaps that is because I joined the writing team late in the process but I still wonder if the emphasis was right. I’m still thinking about some of the comments from Alan Kay on Mark’s post as well. Especially the section below from his comment on my comment. I’ve always been a big enthusiast about Jerome Bruner’s idea that *for every learner you can (and need to) find an intellectually honest version of a subject they can learn if you heed their level of development”. In order to do this, I think you really need to have a good picture and as good as possible a definition of the subject before trying to find “intellectually honest versions of it” for different kinds of learners. This was not done for the CS Framework. If the subject were physical sciences, one would first start with top scientists to put together a workable picture of the sciences as the best people in the field see them at that time. So how to I look at the existing framework and standards (either CSTA or as adopted by my state)? Should I write my own “standard” or more accurately named “Alfred’s list of what I think high school students should know about computer science at graduation?” It might be an interesting intellectual exercise but would it be valuable? As a classroom teacher I don’t spend a lot of time looking at how my curriculum matches a standard or a framework. Maybe I should. My wife can tell you all the standards she is working to follow in her curriculum. Teaching at a private high school I have more flexibility and self determination than I suspect teachers at public schools have. I have also spent a long time in the computing field as both an educator and an industry professional so I have a sort of confidence (ego perhaps) that I can decide what students need to know. Students seem to be well prepared for university, or so they tell me, so I can live with that for now. The problem is what to specify for newer, less experienced (more modest?) teachers. The Framework was one attempt and it was well-meaning I am sure. What we need to do is not so much focus on its flaws but discuss where to go from here. And who should lead the way!"
"147","2019-02-01","2023-03-24","https://blog.acthompson.net/2019/02/what-is-variable-and-why-is-it-so-hard.html","Variables in computer science are complicated. No, really they are. I didn’t consciously realize how complicated until I read “What is a variable?” on the blog at CACM. Reading that article, which was not an easy read for me, did give me some insight as to why philosophy majors so often make good software developers. I’m not sure I want to have my beginning students read it though. It may leave them with more questions than answers. Maybe in an advanced placement course? When teaching beginners we need to keep things simple and we have to remember that they don’t have the same base set of knowledge that more experienced people have. So what then is a variable? A variable name is first of all an identifier. We have lots of identifiers in computer programming. Method names, object names, class names, and variables which are identifiers for something. What is that something? I like to talk about variables as locations in memory. I used to say boxes but I’m not sure that really works. Students know, or should, that everything is stored in memory as ones and zeros so suggesting a location in memory feels more logical to me. The obvious next question is how big is that location. The answer depends on what is stored in it. I talk about parking spaces in a parking lot. There are different sizes of spaces: Motorcycles, compact cars, regular cars, and trucks and busses. Spaces are all different sizes and the most efficient use of them is to hold the vehicles they were designed to hold. A motorcycle in a spot for a semi-trailer truck is wasting space. A large truck will overflow as space for a compact car. Size of the memory location depends on what is stored in it. Space can be wasted if a larger space than is needed is allocated. Size and type are then related attributes or properties of the memory location named by the variable name. So is the variable the location or the name? Does it really matter? Probably if you want to get into the philosophy behind it all but not something beginners are really ready to get into. Maybe it is enough that they know how to declare and use a variable in the first course. In many ways the first programming course is the hardest to teach and perhaps the hardest for many students to take. Finding that line between deep understanding and too much information to handle at one time is not easy."
"148","2019-02-04","2023-03-24","https://blog.acthompson.net/2019/02/supply-and-demand-in-computer-science.html","We have a supply and demand problem in computer science education. Demand has never been higher and it is growing. The need is real. Take a look at We need as many Computer Science minors as we need Computer Science majors. by Doug Bergman (@dougbergmanUSA) I remember having conversations about increasing CS in middle school and what it meant for high schools. What if high schools had a lot of students wanting to do more CS when they got to HS? We've started building up HS CS but we never really asked what was in university for our HS students who got very interested in CS. Now we have to wonder. Mark Guzdial @Guzdial) in The growing tension between undergraduate and K-12: Is CS for All, or just those who get past the caps? explains the capacity problem at the undergraduate level. Now not all schools are overflowing and the problem is worse at the “big name” schools. Other schools are likely to stat feeling the pinch as HS CS output increases though. My understanding is that recruiting more CS faculty in undergraduate schools is even harder than recruiting for HS CS teachers. Maybe because we don't require PhDs to teach in HS? All levels are faced with the problem of industry ""eating the seed corn"" by hiring for good pay people who might also like to teach computer science. The TEALS program lets industry professionals teach in high schools and volunteers but I don't see that model fitting in universities. Universities tend to undervalue industry professionals as instructors and evidence by the second (or third) rate status of adjunct professors and the corresponding low pay. Fixing the shortage of undergraduate faculty is going to cost money at a time when administrators seem all about cutting expenses. Some universities are getting some faculty from industry but since for many people coming from industry it is a life style decision not a monetary decision its unclear how often that will work. And while some industry people make great teachers it can be a hard move for some as well. My biggest worry is that we’ll get students all excited in CS in high school and they will have no place as undergraduates. Not everyone will or should be a CS major, as Doug points out in his post linked above, but a lot of people will want to take CS as a minor or at least take a couple of courses. How will universities handle this? It’s going to be interesting."
"149","2019-02-07","2023-03-24","https://blog.acthompson.net/2019/02/programming-projects-and-good-idea-fairy.html","I think Garth Flint (blog at Garth's CS Education Blog) first introduced me to the idea of the good idea fairy. The good idea fairy strikes you with a great idea that works out well (most of the time) but takes you more time to deal with than you first expect. That is probably why you take the idea in the first place. Well, last semester the good idea fairy visited the idea of a Pez dispenser object when I was teaching creating of classes and objects in my honors programming class. The implementation was horrible but it did seem to help as one more example. Follow up to a few days ago and the new call for proposals for the annual CSTA conference. What do I have that is a nifty project? I’m still trying to decide what might qualify but the good idea fairy smacked me with the Pez project. Even before I looked at the old project and realized how bad it was the good idea fairy suggested that a Pez dispenser project really should use a stack object. Well, duh! I and others have been using a Pez dispenser as an example of a stack for years. So that is what I have been working on lately. I need a Pez candy class first. I think that will be easy for students to design. The data is simple and the methods are few. Then we can design the dispenser class. I think it will be interesting to see how different students design these classes from how I have been thinking about them. I’ll be disappointed if I don’t learn something from them or at least get some ideas for other methods and properties. I’m constantly trying to think of new projects and improve existing projects. Finding projects that students can relate to, that they can have fun with, and that can really teach to concepts is a never ending task. It’s a task I love though. Wouldn’t it be horrible to teach the same projects year after year? Thank goodness for visits from the good idea fairy."
"150","2019-02-11","2023-03-24","https://blog.acthompson.net/2019/02/programming-has-sure-changed.html","Last week, I was reading some old code. I wrote it in 1975. It was in FORTRAN IV and it was on punch cards. Really bad code. One character, meaningless variable names. Lots of goto statements. FORTRAN IV didn't have while loops but you could get the same thing with goto if done right. Someone is probably going to argue that if there are goto statements its not right but it was the only way back in the day. The famous “GOTO considered harmful” paper had been written but not universally accepted yet. FORTRAN IV had not adopted language features to make it easy yet. While I was in university the big new thing was called structured programming. It required some new ways of design and eventually some new programming language features. It took the tools in the languages changed before we could get by without that nasty goto statement. FWIW I’ve written new version of this program in other languages since and it is much easier, cleaner, self-documenting, and just better across the board with new languages, libraries, and programming paradigms. The basic algorithm is the same though. The big surprise in my old program was that is was extremely well commented. The first time I tried to replicate that program in a new language revisiting those comments saved me a lot of time In fact, one could easily rewrite it in a new language from the comments alone. I could at least feel good about that. Latter in my career, object oriented programming was the thing. That also required new design considerations and programming language features. FORTRAN IV could not have supported OOP. Today there are versions of FORTRAN (and COBOL too) that have language support for object oriented programming. I’m not sure I want to see them though. Just saying. I’ve been thinking about what this means for how I teach students today. The rate of change in computing and programming is growing not slowing down. As much as things have changed in the last 45 years they are likely to change even more in the next 45 years. Some concepts are likely to be around forever. Decisions are likely to rely on Boolean expressions. Repetition is likely to stick around and require proper set up, values to change, and code to check for completion. We’re going to be thinking about memory and data types even if we don’t think about them in exactly the same way. John Ruskin said, ""For all books are divisible into two classes, the books of the hour, and the books of all time."" I first saw that on the library wall when I was in university. The same is likely true if we substitute some software design concepts. Just as monolithic programs gave way to structured programming and structured programming gave way to object oriented programming, programming paradigms change based on changes to language, hardware, and the needs of the day. I don’t really know what changes we will see with quantum programming for example. What ever programming language we teach with though we need to think about the concepts, especially foundational concepts, that are likely to be around for the long term. I haven’t programmed in FORTRAN IV in decades but understanding how those horrible goto statements mixed with line numbers and if statements worked sure made understanding a modern while loop easy."
"151","2019-02-14","2023-03-24","https://blog.acthompson.net/2019/02/us-department-of-education-needs-cs.html","I recieved this from Pat Yongpradit of Code.org and thought I should share it. The US Department of Education has announced the EIR grant competition for FY 2019. This year EIR incorporates an exclusive priority for computer science with a focus on increasing diversity and equity in access, as compared to last year where the highlight was that CS was merged with STEM as a combined priority. See more detail in our blog. There are many moving parts to the federal grant review and award process, including a merit-based review process. In order to adequately score grants featuring computer science, the US Department of Education must have enough reviewers with K-12 computer science education experience. There is more information on the merit-review process and the Department’s mechanism for selecting reviewers in this blog. Code.org has been asked to put interested folks in touch with leaders of the EIR grant program. If interested, please send your CV to EIRpeerreview@ed.gov. Having CS knowledgeable reviewers participating in the federal grant review process is crucial to maximizing the opportunity these grants present the field and our collective goal of expanding access to K-12 computer science."
"152","2019-02-15","2023-03-24","https://blog.acthompson.net/2019/02/minecraft-curriculum-for-teaching.html","I'm not a Minecraft person. I've had the demos. I know that some kids really get into it but … Well, some teachers love it as much as the students. For them it’s probably a great thing if there was some curriculum to use with it. So, if you do like it and you think it would be motivating to teach computer science using Minecraft for Education there is new Computer Science Curriculum From Minecraft"
"153","2019-02-22","2023-03-24","https://blog.acthompson.net/2019/02/dont-trust-algorithms-you-cant-read.html","I admit that I am a sucker for “the best [what ever] in each state” lists. I want to see how many I have visited and what is “the best” in my state. Most of these are based on someone’s personal opinion but others are based on some sort of data and an algorithm. I think most people are aware of bias in the subjective lists and take them with a grain of salt. It is tempting to look at lists based on data and computer algorithms and more accurate though. I mean, look, it is supported by data! The most recent example of this was a list of the most boring towns in every state. I was sure the town I live in had a short at that one. There is nothing to do. One country store is the only retail operation I know of in town. There are no attractions, unless you count the beehive hut or maybe our historic meeting house. We didn’t make the cut though. The town that did make the cut for New Hampshire was Bartlett. Now Bartlett has an outstanding ski resort, Attitash, an amusement park, Storyland, and a lot of good places to eat. There is a lot to do in Bartlett. It is anything but a boring place. The problem, of course, is the data selected for the algorithm. They based their decision in large part on average age and population density. My observation is that a lot of resort areas, which are almost by definition not boring, have low full-time population densities and older permanent residents. Now they also look at “things to do” but it is far from clear where they get that data. Choosing the right data is part and parcel to getting a good result for any sort of algorithm. This is why transparency of data and algorithms is important in evaluating any conclusion. This is an important concept for our students to understand. To me it is as much a computing topic as it is a societal topic. As we get more and more data and more and more people try to make sense of the data we have to understand that just because there is data in to an algorithm and a result coming out that is not enough. I haven’t heard it said much recently but we used to say it a lot. Garbage in, garbage out!"
"154","2019-02-26","2023-03-24","https://blog.acthompson.net/2019/02/csta-board-elections-2019.html","Wow! Computer Science Teachers Association members should all have gotten an email about this year’s election for the CSTA Board. It is a remarkable slate of candidates. It seems to get stronger year after year. We, members, have to make decisions though. Not that anyone really cares but I am sharing my thoughts. The K-12 seat is between Doug Bergman and Art Lopez. I’m sure Art would do a great job but I’m voting for Doug Bergman. I’ve know Doug for years and pushed him to run for the Board for several years before I got him to throw his hat in the ring. I’ve been impressed with his performance over his first term on the Board. He is a tireless worker, a leading edge teacher, and a strong promoter of computer science education. Doug gets things done. Doug Bergman has earned a second term on the Board. K-8 has another good pair of candidates - Vicky Sedgwick and Alana Robinson. Coming from a big city system and a special education background is a strong plus for Alana. On the other hand, Vicky has been a remarkable advocate for K-8 teachers inside and outside CSTA. Her work with the #CSK8 Twitter chat has been a phenomenal community builder and educational experience for K-8 teachers everywhere. I would like to see Vicky Sedgwick have another term on the CSTA Board. School District representative is also a tough choice. Dan Blier and Byran Twarek. I met Bryan while working on the K-12 CS Framework and was very impressed with his work ethic and commitment to computer science education. His experience and performance on the board suggest that Byran Twarek should have a second term. At-Large is the toughest decision. There is no incumbent nominated for one thing. And both candidates are seriously strong. Lien Diaz has done a lot of work growing computer science education both at her time with the College Board and since moving to Georgia Tech. She’s smart and understands the sort of politics that are involved in growing CS education. Michelle Friend was very important to the creating and early years of CSTA. Her institutional knowledge of CSTA is very valuable. I’m still thinking about this one and hate not to vote for Michelle but am leaning towards Lien Diaz. [Full disclosure: I suggested myself as a nominee for the At-Large opening. I don’t doubt that either of the nominated candidates will do as well or better than I would.] OK people. My two cents are out there. The CSTA Board candidate bios are available. Read them critically and make your own decision. Agree or disagree feel free to add you two cents in the comments."
"155","2019-02-27","2023-03-24","https://blog.acthompson.net/2019/02/what-are-you-reading.html","We all get asked this question – What are you reading? Often this is the context of an interview and the person asking is really asking “how are you keeping current in your field?” For computer science educators there are few things better to read than SIGCSE papers. Right now the Proceedings of the 50th ACM Technical Symposium on Computer Science Education are open for download. I think they’re only open (FREE) to non-members for a few more days. The conference closes this Saturday. I’ve been downloading anything and everything that looks interesting or useful to me as a high school CS teacher and as someone interested in learning more about the field. I have about 35 papers downloaded. It’s going to take me a while to read them all. I am a member of ACM and SIGCSE so I will be getting these papers in hard copy so you might wonder why I am downloading PDFs. The short answer is that I lose paper documents but I have a lot of room to store soft copy. And I confess that I want to start reading now. I can’t make it to SIGCSE (it started today BTW) but I will be following Tweets and other social media updates. Having the papers available will help me understand what is going on better. So are you taking advantage of paywall free access to SIGCSE proceedings? What other places do you go to learn what others are doing?"
"156","2019-03-04","2023-03-24","https://blog.acthompson.net/2019/03/remember-ladiesand-act.html","In March of 1776, Abigail Adams wrote to her husband who would be the second US president “I long to hear that you have declared an independency. And, by the way, in the new code of laws which I suppose it will be necessary for you to make, I desire you would remember the ladies and be more generous and favorable to them than your ancestors. Do not put such unlimited power into the hands of the husbands. Remember, all men would be tyrants if they could. If particular care and attention is not paid to the ladies, we are determined to foment a rebellion, and will not hold ourselves bound by any laws in which we have no voice or representation.” [ emphasis mine] After all this time, we, mostly us men, seem to forget the ladies. Most of us are aware that there is a shortage or at least an imbalance of women in the computing field. It’s men’s fault mostly. We make it worse when we ignore the efforts and accomplishments on the many wonderful women in our field. We talk about Ada Lovelace and Grace Hopper but use them as tokens too much of the time. Today there are a number of wonderful groups whose focus is directly on bringing more women and underserved minorities into the computing field. Unfortunately, they don’t get the attention they deserve. Reshma Saujani, founder and CEO or Girls Who Code gives an important response to this problem with her post Erasing Women in Tech: How 60 Minutes Ignored Women’s Voices, Stories, and Expertise Now I can hear someone saying, well, yeah, but code.org is doing great work and they are helping girls and young women. Plus the 60 Minutes piece was a good promotion of computing for all. There is some truth to that but it misses a point. These other great efforts, those that Ms. Saujani names and more need their own recognition. How else are they going to attract the participants, the supporters, the money, and build sustainability if no one knows they are out there? Outstanding programs like these need the sun shown on them so they can grow and thrive. The truth is that we need some special programs for girls and minorities because the male dominated organizations are still not making them as comfortable as they should. Oh sure some of us are trying. I like to think my classrooms are safe spaces for everyone. I’m sure most of my regular readers feel the same way about their classrooms and computer labs. We may even be right. But we’re not everywhere. As a community, we in computing have to be more generous and favorable to women than we have in our more recent history. Our future depends on it."
"157","2019-03-08","2023-03-24","https://blog.acthompson.net/2019/03/making-projects-more-interesting-with.html","My students are working on the palindrome project. You probably know it – enter a string and report if it is a palindrome or not. In my case, I have them create a method to “clean” the string by stripping out all of the characters that are not letters and a second method to reverse the string. My goal is practice in creating methods as well as string handling and loops. It’s always more interesting if the test data is more interesting. There are lots of common palindromes that students are familiar with such as “Madam I’m Adam” and “Race Car” and the ever popular “Mom”, “Dad”, and “Bob.” My favorite is “A man, a Plan, a Canal – Panama” because you can read it dramatically. This week I stumbled on a web site dedicated to palindromes - http://www.palindromelist.net/ There are probably other palindrome related web sites as well. I’m thinking about supplying a file with lines that are and are not palindromes and having students modify this first program to read the file and report. More data is better data. Another idea I have percolating is asking students to write code that creates palindromes. I’m not sure how hard this would be as I’m still thinking about how I would do it. Again, data is important. You want to use real words and ideally the phrase should make sense. Does it have to though? Hum. I have a dictionary file – a text file with almost 114,000 words in it. I figure that should be useful for something. I keep thinking it would be useful for a lot of interesting projects – things like word games (Boggle, Scrabble, etc.) or maybe spell checkers. There are sources of large text files on the internet as well. I have files with the full text of some books (in the public domain of course) and Shakespeare's sonnets. Check out Project Gutenberg which has some 58,000 public domain books I’m thinking some interesting word and letter count projects are a natural. A lot of the projects that have been presented at the SIGCSE Nifty Assignments session (collected here at http://nifty.stanford.edu/) involve working with data sets of words or text. You all know about the Nifty Projects resource right? You can also make interesting data. For a long time I have assigned a project that creates driver’s licenses based on name and birthday. New Hampshire recently moved away from this scheme for privacy reasons but it was/is a fun project. I grabbed first and last name data from the Census Bureau (there are other lists) and wrote a program to create a data file of random names and birthdays. I’m toying with assigning something like that as an assignment some day. Making sure the dates exist (no February 30th for example) makes it fun. OK, harder, but harder is fun right? What sorts/sources of data do you use to make projects more interesting?"
"158","2019-03-11","2023-03-24","https://blog.acthompson.net/2019/03/dont-cross-data-types.html","Remember in the first Ghostbusters movie where the ghostbusters are told not to cross the stream of their ghost busting guns? And then at the end they do cross the streams? Mixing data types is like that some times. You really have to know what you are doing when you mix data types. The Facebook group for AP CS A teachers recently had this Java example: Can anyone explain why a + b is NaN but a+=b is zero? int a = 0; int x = 0, y = 0; double b = (double)x/y; System.out.println(""a: ""+ a); System.out.println(""b: ""+ b); System.out.println(""a + b: ""+(a+b)); a += b; System.out.println(""a(2): "" + a); //output a: 0 b: NaN a + b: NaN a(2): 0 NaN is not a number and is the result of the divide by zero. You probably shouldn’t do that anyway but it happens. What is interesting here is the different way that (a + b) is handled compared to a += b a += b does a conversion of b to integer before it does the addition while (a + b) does a conversion of a to double. That explains the different results. Of course if you were to do a = (a + b) you would probably get a compiler complaint. I think. I know you would in C# but I haven’t tried Java yet. FWIW C# also complains about a += b and demands an explicit cast. Different languages and compilers handle these things differently. So what is the message here? I think the message is that programmers should usually make explicit casts when they mix variable types. Maybe you know what will be cast to what for different variable types and different operations but a) how much do you want to bet you’re right and b) how much to you want to bet that the next person to look at your code will understand what is going on behind the scenes? Mixing types causes a lot of confusion for beginners. SO does how numbers are stored (some kids never seem to understand that 0.1 is an infinitely repeating fraction in binary and what that means) of course. Encouraging students to cast or at least to be very careful about the types they use and the types they mix is an important lesson."
"159","2019-03-12","2023-03-24","https://blog.acthompson.net/2019/03/cs-education-where-do-we-start-and.html","There are a number of sets of standards with most based on the CSTA standards (https://www.csteachers.org/general/custom.asp?page=standards) and the K-12 CS Framework (https://k12cs.org/). A lot of really smart people (and me in the case of the framework) worked on them but I've been thinking about creating my own set to use. Why? Difficult to explain but in large part to get things clear in my own head. What do I see as the concepts and ideas I should be teaching in my high school? How do I want to express my thoughts – the same as the existing standard or will putting them in my own words help me understand them better? An open question. Now one might think this is easy with the standards already written. But it is more complicated than that. High school is very much in the middle for computer science. We’re not yet college/university but we want students to be prepared for that level of education. At the same time, there is no standard of knowledge that universities are expecting all incoming students to have. That makes their lives difficult but they have been living with that as long as there have been CS courses. It’s leaves us in high school a little more free to determine our own output goals though. On the other end, there is no standard set of CS knowledge that high schools can expect all students to have. That is especially true for a school like mine that takes in students from over a score of different middle schools and two different states. Like the universities, our curriculum has to start assuming no background at all. Oh sure students are somewhat tech savvy compared to many of their parents but I still spend time teaching how to move files from one folder to another. Being great with Instagram doesn’t translate to computer science knowledge. We see some students who come in more advanced as well. They may have done a lot of programming in middle school. Many in an enrichment course, a summer program, or FIRST Lego League or some other opportunity. They may even be programming in higher level languages. Can they skip the first course? Sure, as long as we have something more advanced to help them continue to grow and learn. It would be a shame if they were effectively done before high school and spent 4 years forgetting things before university. As I think about high school computer science curriculum holistically I think about the Computer Science Curricula 2013 (CS2013) document. One key take away for me there was the three levels for university curriculum. Basically it was things all CS departments should offer, a level that all departments should offer “all or almost all” and electives. For high school I don’t know that I want three levels. Maybe two would be enough. Things that all high school curriculum should offer and electives. Earlier version of the CS Curricula had only two levels. I am not sure there is room in the schedule for three levels in high school. Electives should be offered in schools where there is more room. I hesitate to specify standard or required or even recommended electives for high schools. Gradually CS, and other subjects, move down from universities but there is no clear vision for what will move down from universities to high schools in the near future. An other idea I like from the CS 2013 document in the Knowledge Area breakdown of concepts. This sort of breakdown is also included in the CSTA Standards of course. Do I want to come up with my own breakdown or use the CSTA version? I’m undecided. Seems like a big task and it is. But I really feel like I need an expression of my personal (well researched and thought out) ideas of what should be taught. Anyone else feel like this? [Note: I was on the CS 2013 ACM/IEEE Task Force and the K12 CS Framework writing team. And I still think I need to think about this stuff.]"
"160","2019-03-14","2023-03-24","https://blog.acthompson.net/2019/03/awards-i-wish-we-didnt-need.html","Last week my school was told we had earned the College Board’s Female Diversity award for both Advanced Placement Computer Science A and Advanced Placement Computer Science Principles based on how many female students we had in those courses last school year. Yeah! We’re one of two schools in the state to get this recognition. That’s a bit disappointing. The more I thought about it the more I thought how sad that getting to adequate female representation was so rare that schools were getting special recognition for it. Are there similar awards for other AP courses? Are their awards for schools for getting to Male Diversity numbers in courses were male students are underrepresented? Is that even a thing? Don’t get me wrong. I am thrilled that we have good representation of female students in our AP CS courses. And I’m not shy about sharing news of the College Board's recognition. It’s hard to get solid APCS enrolment period. I teach at a private Catholic school that requires four full years of religion. That has a serious impact on electives. We have even better female representation in our lower level CS courses because we require a full year of CS for graduation. AP CS is going to be an elective so we have to have a good environment to get students to want to fit it in. With cultural norms the way there are, a lot of female students are encouraged to follow other academic paths. World languages, for example, fit the stereotype and it often feels like that is a more common, if not natural, path for female students. And the boys seem to be less excited about languages. Our goal at my school is to ensure that all students are comfortable and feel like they belong in computer science courses. We are careful about room decorations. You’ll see women in computing highlighted in posters and bulletin board items for example. I think the most effective effort it that teachers encourage all students, reassure them that they mistakes they make don’t mean they are stupid or incapable, and include projects that are not gender biased. You know, be a good teacher. For now we all need to make efforts to include a more diverse set of students. And it is nice to be recognized for the success of those efforts. But I’ll tell you, having a diverse group of students is all the reward I really need."
"161","2019-03-19","2023-03-24","https://blog.acthompson.net/2019/03/interesting-links-for-computer-science.html","I haven’t done one of these for a while. I still Tweet or retweet a lot at @AlfredTwo but I needed a break. I’m not sure I will do this every week but I think I will shoot to do it from time to time. Microsoft Education posted a bunch of resources on Ways to encourage girls to keep pursuing STEM this Women’s History Month There are some posters I think will show up in my computer lab soon there as well as other helpful links. David Renton is doing some amazing things with his students who are programming virtual reality applications. Currently he is having Students Build International VR Prototypes for Children This is more than about computing. It is a multi-national effort with some support from Microsoft in the UK and deployment at a hospital in Sweden. Mike Zamansky has a great post about Adapting A Nifty Assignment You may or may not be familiar with the SIGCSE Nifty Assignments sessions, check them out if not, but they are pretty nifty but many of them really do benefit from adaptation to a particular environment. I found this on the Blog at CACM I don’t know about you but calculating with Roman numerals (what no zero?) was something I wondered about. This article explains it all. I wonder if this might make a nifty project? Calculating With Roman Numerals is Not So Difficult Speaking of SIGCSE, Bryan Twarek provides a nice list of K-12 Teacher Takeaways from SIGCSE 2019 on the CSTA Blog. Not as good as being there but Brian includes a bunch of related links. Under my list of things to keep an eye on, Microsoft had a post called Achieve more with Microsoft Game Stack It looks mostly like a repackaging or rebranding of a number of new and existing resources for game developers. Will it have application for schools? Maybe in game development courses but even there it seems like Game Stack is more for professionals than beginners. But we’ll see if anyone in education takes it on and provides information."
"162","2019-03-22","2023-03-24","https://blog.acthompson.net/2019/03/debugging-student-code-for-fun-and.html","Students are really good at creating strange hard to solve bugs in their code. I am convinced that the code of a raw beginner can easily be harder to debug than that of a professional coder. I had a couple of good ones today. One was actually pretty easy once I realized the cause. I have some international students. Great kids, very smart, hard workers. English is not their first language though. In fact, English letters are not their first character set. In one class I have boys from Cambodia and Viet Nam. The character sets they grew up with are very different from English characters. This means that sometimes English characters confuse them. l, I and 1 can all look alike to them especially in some fonts. Like this one. So I had some non obvious ""spelling errors."" They and I have a better idea of what to look for next time. The other one was harder. We’re using C# and Windows Forms. Now normally this makes things easy. But you can also cause some very puzzling errors. In this case, the code seemed to be doing everything it was supposed to do EXCEPT showing the results in a list box. I tried a lot of my bag of tricks. Single stepping through code, displaying intermediate results (that didn’t work because nothing was displaying in the list box). I copied the code into a new project. I created new objects. I tried a lot of things. Finally, I did a side by side comparison with a project that worked and that showed me the problem. For the curious, Windows Forms projects run a subroutine to initialize and instantiate the objects on the form. Some how, probably a copy paste error, this student was calling it twice. Without going into detail, this resulted in two sets of objects with one of them covering the set that was actually being acted upon for the display. I try to look on the bright side of things. In this case, I have new things to look for that I didn’t have before, I have gained insight into issues that my international students have (and may change some variable names I use), and I got to demonstrate debugging techniques to some students. That’s a win right?"
"163","2019-04-08","2023-03-24","https://blog.acthompson.net/2019/04/teach-programming-or-teach-programming.html","For me, teaching is all about the concepts. Programming languages change. My first programming language was FORTRAN. This was the big language with I was in university. Today? Not so much. But loops and decision structures still exist. Over my career, I have learned a bunch of programming languages. I’m not sure I want to know how many but its a lot. This morning I was reading Mark Guzdial’s blog as one does (Why we should explore more than one programming language across the curriculum) which comes as I am looking hard at my school’s computer science curriculum. We teach several programming languages. Visual Basic in our freshmen course, App Inventor for our mobile app development course, C# in honors programming, JavaScript in AP CS Principles, and Java in AP CS A. SO potentially students can learn a bunch of languages during their time here. Is this good or bad? Are there too many languages? Are these even the right languages? I believe that much is dependent on ones goals. Is our goal (in HS CS) to teach a programming language or to teach how to program (programming concepts). As I started off this post, I believe that in the real world people who develop software, professionally or other wise, will need to learn new languages as time goes on. Mark has been writing a lot about task-specific languages (Task-specific programming languages: People aren’t dumb. Programming is hard.) and it is pretty clear to me that is a coming thing. Teaching all programming classes using one programming language is probably a great way to teach that language but to quote Mark’s blog “We have no evidence currently that language-specific programming knowledge will transfer” So how do we prepare students who will have to learn new languages for new tasks? Someone once said that the second programming language is the hardest one to learn. I can see how that could be the case. On the other hand learning programming languages does seem to get easier after that second one. I believe it is because learning a second language forces one to think beyond the syntax. In one class, some years ago, I started showing my AP students who to do the same loop in a number of languages, including assembly language, and one student claimed later that was the most valuable lesson of the course. I still try to show multiple languages at times but since most of our students have already been exposed to several by the time they get to Advanced Placement that seems less necessary today. Still I toy with the idea of writing a parallel programming book using several languages. This is an idea borrowed from parallel translation Bibles where several translations of the Bible appear side by side on the page. A great study tool for religion that might work in programming as well. Coming back to goals, I can see teaching a lot about one and only programming language as a somewhat reasonable way to prepare for a job but not for a career. I still remember getting my first programming job because I knew one language pretty well. Six months later I was handed a project specification and a language reference manual for a language I had never heard of and told “go to it.” I truly believe that having a background in multiple languages was the difference between success and failure for me."
"164","2019-04-18","2023-03-24","https://blog.acthompson.net/2019/04/what-is-in-name.html","It’s been said that the three hardest things in programming are naming things and off by one errors. For some reason, this semester, my students are having the most trouble with naming things. Specifically, they seem to have trouble making the connection between names and objects. For example, they will use the name of what looks like a text box but without actually instantiating the text box firs Or they will use a different name for the textbox than the name the textbox actually has. And they’ll be surprised at getting an error message that says “the name ‘x’ does not exist in the current context.” The same is true with undeclared variables. Often this is caused by not paying attention. I will set the name of an object while live coding and then use that name later in the code. If they were not paying attention any of the three times I point out the name declaration they may not use the same name in their own code but expect it to work later. After all, it worked when Mr. Thompson did it. Now of course I have explained all of this numerous times. I think many times students are just expecting the system to fill in the blanks for them. It would be nice if the system would. Maybe one day we’ll have artificial intelligence built into development environments that will help with this sort of thing. But we are not there yet. Our IDEs do a lot for us (developers) that they didn’t do for us back in the day. No autocorrect in punch cards. I know that some educators believe that using a fancy IDE with automatic features is a bad idea. Students should learn without them. They may have something of a point but I resist the idea because I don’t want to make programming to hard. I don’t run a weed out course. Plus these modern tools open the door for students to experiment. Intellisence in Visual Studio lets students see a lot more options then I have time to cover in class. I keep coming back to naming things though. Selecting meaningful names is important. Making the connection between declaring and defining objects/variables and the names themselves is important. Spring break started tonight. Figuring out how to address this is something to think on in a couple of days when I’m relaxed."
"165","2019-04-21","2023-03-24","https://blog.acthompson.net/2019/04/more-than-one-way-to-code-solution-to.html","Garth Flint has an interesting post about grading programming projects (It is never easy) in which he talks about the interesting solutions students come up with. It struck a cord with me on a couple of levels. Yes, it makes grading more difficult but it also means that students are thinking for themselves. Or so I chose to believe. Sure some of them look up solutions on the internet but they have to understand them well enough to explain them and make them their own. I figure that on average a class full of students will come up with three different ways of doing things. Sometimes only two but sometimes more than three. Sometimes I will take samples of the various solutions (with no names) and discuss them with the class. It gives me a chance to show that there is more than one way to do things AND to discuss optimization a little bit. Occasionally students have come up with solutions that I had never thought of and were even better than how I had done it. I love it when that happens. I love new solutions. To it also emphasizes the value of a diverse group of people looking at a problem. As Garth mentioned in his post, student ideas move quickly through a computer lab. I struggle with that a bit. How much help is too much help? Where is the line between “he helped me with it” and “I copied it from her?” And how do you tell where the students are around that line? I could get pretty fanatical about it. I’m not sure how productive that is though. It probably adds as much stress on me as it does for students. I toss in quizzes as well and students who understand what they are doing do a lot better on then than students of get too much “help” with their projects. Using multiple forms of evaluation is a good practice anyway I’ve been told. Generally I see projects as more effective as a learning experience than as an evaluative tool. Sure they help evaluate learning but a practice, an exploration of ideas, and a way to learn things is their highest value. If students come up with implementations differently for what I would come up with I see that as a learning win."
"166","2019-04-29","2023-03-24","https://blog.acthompson.net/2019/04/game-of-thrones-and-computer-science.html","I confess that I have not watched a single episode of Game of Thrones. That doesn’t mean I am oblivious to the social impact of the show. My online social media is full of it. So when Rita Tillson Vasak linked to this Slate article explaining why a recent episode was so hard to view I jumped to read it. The article talks about data compression and how a lot of compression made it hard for a lot of people to really view the scenes. It talks about data compression in a way that assumes the reader has a clue as to what they are talking about. It uses the term “lossy video compression” and talks about the layers of compression involved in getting the digital image to your screen. I wonder how many people read that article without comprehending it very well. Hopefully my Advanced Placement Computer Science Principles students would get it all. We talk about compression in AP CS P. I’ve also played with lossy compression with my Programming Honors students (Lossy Text Compression Project ). I talk about compression in terms of text, images, video, and music. I think students mostly get it. Rita suggested this article as part of review for the APCSP exam (coming in less than two weeks!) and I think that is a great suggestion. I may use it next year when we talk about compression as well. I think it is a good visual and discussion as to what can go wrong in our attempts to get the most data through the smallest “pipe” in the least amount of time. Showing specific examples of the effects, positive and negative, of computer science technology when it also ties into a social event can make a great impression."
"167","2018-10-16","2023-03-24","https://blog.acthompson.net/2018/10/lossy-text-compression-project.html","My motto has long been ""steal from the best"" at least when it comes to teaching resources. Today I found a good project from Code.org. I'm using their Advanced Placement Computer Science Principles curriculum and we are currently learning about data compression. Code has created a Lossy Text Compression app (See image or visit link). that students can try out. The code is also available which is very nice. The algorithm is to keep the first letter of every word and then remove all the vowels to create a new, compressed message. Now the app is really nice and because the code is available several students modified it to try different things out. One of them just changed the message to report 100% compression. No surprise there of course. I am thinking that I may have some of my coding students (in my classes that are not AP CS P) write their own versions. It is a fairly easy string manipulation exercise which makes it good for beginners. Parsing of text is a good thing to learn anyway. It also lets me bring data compression into the class discussion and I see that as a big plus. Besides, I just really like string manipulation projects."
"168","2018-10-17","2023-03-24","https://blog.acthompson.net/2018/10/join-csk8-twitter-char-17-october-2018.html","These are great chats with a lot of wonderful people sharing ideas about computer science in grades K through 8. Join us for #csk8 chat on Wed, 10/17, at 5pm PT/6pm MT/7pm CT/8pm ET for the 3rd in our series of chats about the cross curricular integration of CS for 5-14 year olds. We will be talking about The Integration of Computer Science & Math in K-8. #CSforAll"
"169","2018-10-17","2023-03-24","https://blog.acthompson.net/2018/10/acm-to-host-twitter-chat-on-ethics-in.html","On Thursday, October 18, ACM will host a Twitter chat on ethics in computing beginning at 11:00 a.m. EDT (15:00 UTC). During the chat, ACM will post discussion questions from the Twitter handle, @TheOfficialACM. We are inviting the computing community on Twitter to join the discussion using the hashtag #ACMCodeOfEthics. Catherine Flick, Michael Kirpatrick, and Marty Wolf (members of the ACM Committee on Professional Ethics, which spearheaded the ACM Code of Ethics and Professional Conduct update) will take part in the discussion."
"170","2018-10-18","2023-03-24","https://blog.acthompson.net/2018/10/professional-development-is.html","I first started to appreciate the cost of professional development when I was working with and for Microsoft. Microsoft at the time was working hard to promote the use of Visual Studio as a programming teaching tool. Part of that effort was through professional development for teachers. I took part in some of these as a student and some of them as presenter. I could go into details but I think is is safe to say that when code.org says they spend thousands of dollars per teacher for professional development events (Moving towards sustainability of computer science in schools) I don’t doubt it for a second. Still over the last bunch of years a lot of CS education professional development has been paid for by a combination of universities and industry (lots of that industry money was direct from Google to universities and a lot by a number of companies though code.org) This is not really a sustainable/scalable model. Well, it’s not sustainable if we are going to have enough CS teachers for every school to offer (and present) CS education to all students. As Mark Guzdial points out in his recent post at CACM (Changing who pays for CS professional development in the US and who controls it: It has to be local ) it is not how other subjects do it either. I have been hearing teachers say for years that industry should pay more to support CS education. And I have tended to agree. On the other side of the issue, many complain about an undue influence industry have on CS curriculum. Too many strings attached to the money. How much you worry about that often depends on how you feel about the company donating the money of course. Either way, is it fair to demand that the tech industry fund CS PD? Do other industries fund PD in their areas of interest? Actually, yes they do. There is a reason that most math classes are taught with Texas Instruments calculators! But, mostly you find industry funding for career/tech programs in career/tech schools which tends not to get the public attention it deserves. Is CS education a career training course or a core academic course? The answer is, of course, yes. If we want to really prepare students for either an academic or an industry future we have to focus on concepts and not on specific tools or platforms. This can be harder at times with industry funded training. In the long run we really need two things. One is more pre-service training for teachers who will teach computer science. That has to be folded into existing teacher training programs. While that seems to be happening some it is slow progress. The other thing we need is professional development for in service teachers. That training has to be paid for and prioritized locally. These days the PD for CS teachers I hear about most strongly supported in Advanced Placement Summer Institutes. That’s great and a lot of teachers benefit from it. My school paid my way to one a couple of years ago and I got a lot out of it. Training for teachers in K-8 and for courses that come prior to AP courses do not appear to have the same number of local options for teachers. That is changing especially with the work that code.org is doing with their local affiliates. Many of those programs will, I hope, grow and expand to reach more teachers. That will only happen as schools and school districts start encouraging (by funding) teachers to attend these courses. There is a less tangible, measurable reason we need local funding of CS PD. Organizations, and individuals, send a strong message by what they are willing to spend money on. Spending money of CS ED PD shows that CS education is important, that it is valued, and that the people teaching it are valued. Making it clear that CS education is important enough to spend money on training for teachers is an important message. I tend to believe spending money of PD will help retaining teachers and that is going to be really important."
"171","2018-10-22","2023-03-24","https://blog.acthompson.net/2018/10/the-imperative-to-teach-ethics.html","Ethics has been on my mind a lot lately. Last week, the ACM had a Twitter chat around the ACM Code of Ethics using the hashtag #ACMCodeOfEthics.It took place during the school day but I was able to take part for a while during lunch. It was a good discussion. Coincidently, Kara Swisher had an OpEd post in the New York Times titled Who Will Teach Silicon Valley to Be Ethical? There was a time when my biggest concern about the software industry was the poor quality of software (still a concern) These days I worry about the ethical quality of the companies producing that software. This is not a new concern. Years ago I heard the (now former) CEO of a large company talk about his “values coach.” That he needed some one to coach him on the companies published values was unsettling. Kara Swisher talks about “chief ethics officers” to help companies stick to ethical practices. That concerns me as well. Companies adopt the ethos of their leadership. If they leadership needs someone to tell them that they are pursuing unethical activities there is a problem. And that problem is going to become endemic throughout the company regardless of a chief ethics officer. We need to teach ethics long before students grow up to become CEOs. I took a look back at the Computer Science Curricula 2013 (CS2013) Final Report today. Yep, all the talk about ethics I remembered from task force meetings was still there. Ethics and professional practices are listed a Core Tier 1 topic. That is the highest of the three levels of importance for undergraduate computer science topics. That means all undergraduate computer science programs should teach ethics! The discussion in the document talks about the fact that having it as a stand alone course may miss students in some programs but that it can and should be integrated in many, if not most, other courses. In some ways I think integrating it into other courses should be a standard practice with or without a standalone ethics/professional practices course. Context matters. During the discussion on Twitter last week it was pointed out that many don’t see the ACM Code as having answers to specific questions. That’s probably true but I don’t think it is possible to write a code that answers every specific question. Rather I see the code as a place to start asking questions. How does what is being discussed fit in with ethical practices? What are the trade offs? There are always trade offs. How do we balance those trade offs to the side of the betterment of society? Where does that leave us who teach prior to the college/university level? Can we leave the teaching of ethics to the professors? Given the number of people I hear from who say they are unaware of specific ethical practices courses or mandates to discuss ethics in other courses I don’t think we dare. And let us not forget about all those people who bypass university completely! No, we’ve got to teach it. We’re not going to get many stand alone computer science ethics courses in high schools. OK I teach at a Catholic school and Ethics and Justice is a required course for our juniors. Ethics shows up in the course description of several of our courses and that is great. But as I said earlier, context matters. I am not going to assume that these other courses are sinking in. High school courses seem like silos to many students. “Why are we learning Binary in computer science that is a math topic?” is a question I hear regularly. Ethics have to be part of the discussion in computer science courses. It fits nicely into Advanced Placement Computer Science Principles. I think that was/is intentional. We have some great conversations about ethical issues in that course. What I want, what I think society needs, is for people to regularly think about the ethical impact of computing. Computing is changing every aspect of our lives. Without thinking about the ethical consequences of these changes we risk everything."
"172","2018-10-24","2023-03-24","https://blog.acthompson.net/2018/10/nominate-someone-as-2018-champion-of.html","Know someone or some organization or some school responsible for doing great things in computer science education? Maybe they should be nominated for this award. In celebration of the 2018 Computer Science Education Week (CSEdWeek), the Computer Science Teachers Association (CSTA) and Code.org are pleased to present the 2nd annual Champions of Computer Science Awards. Know of someone who’s achieved something outstanding in computer science education this past year? Tell us about it! Nominate a student, teacher, school, district, after-school club, organization, etc., to be recognized as a 2018 Champion of Computer Science. Those selected will be awarded a trip to Seattle, WA to be recognized on stage at the kickoff of CSEdWeek. This opportunity is only available for US submissions. Please complete this form by November 2nd to nominate your Champion of Computer Science. Email awards@csteachers.org if you have questions."
"173","2018-10-27","2023-03-24","https://blog.acthompson.net/2018/10/csta-new-england-regional-conference.html","This is the second of these conferences. How I missed the first year I don’t remember but I’m glad I made it to this one. The conference was held at Rhode Island College. I got some good things from it. We started with some welcoming remarks from the president of the college, the Rhode Island Commissioner of Education and a few others. It is clear that there is some strong support for improving CS education in Rhode Island from the state and from the universities. Rhode Island has made some great strides with hundreds of teachers trained in the last 2 and a half years. The have also expanded APCS into 78% of the state's high school. We than heard from a panel of representatives from the state Departments of Education from all of the New England states. IT was interesting to hear how the different states are progressing towards expanding CS education. Several people said that their state was ""working to catch up."" Given how little CS education had a few years ago and how much a lot of states are working I don't see these states as behind other states that much. Behind where they want to be is a whole different question. It is probably good that the various states don't want to fall behind other states. Next came concurrent sessions. Lots of concurrent sessions. Some were an hour long and some sessions were a set of three flash talks. I went to flash talks. Now the flash talks were good and I got value from them but I wish some of them had been longer. The committee might want to think about making some tough decisions and have fewer presenters but for longer sessions. Anyway. Elizabeth Patterson @EPPHS presented two flash sessions. One was on teaching binary, an interest of mine from way back, and shared the resources she uses at: https://goo.gl/9qNt3i Her second session (after lunch) was on sorting (another fun topic) and she again shared resources at https://goo.gl/uAz2t5 I’ll be spending some time looking through them for my own practice. This is exactly the sort of sharing we as CS educators should be doing more of. I also attended two sessions by representatives from the Lesley University STEAM Learning Lab. One was on visualizing computation with 3D modeling and printing. Very interesting and I got a few ideas but this one would really have benefited from being a lot longer that n15 minutes. Now that I know about them and their programs I’ll be spending some time at their web site looking for resources that I can use. Their other session was on physical computing. .I didn’t hear much new here but again I think the time limit was more responsible than the presenters. They clearly had a lot more to share than they could in 15 minutes. Fred Martin, UMass Lowell and the CSTA Board, talked about rethinking computational thinking. There is a lot of talk about that lately and I liked Fred’s take on it. Fred’s slides are at cstane2018-fredm He concludes with “CT is the “connecting tissue” between the world of computer science / programming expertise and the world of disciplinary knowledge” I think I like that as much as any definition of CT I have read lately. Karen Lang, MIT Appinventor, gave a talk on new and coming features for AppInventor. Tutorials seem interesting as does the new CloudDB which seems like a big improvement for data storage. There is a new emulator available for MacOS and a new one for Windows is coming. That’s good news. Also the companion app for iPhones has been submitted to Apple for the Apple store. At some point Apple will (we all hope) approve it and students will be able to put AppInventor apps on iPhones. Chad Williams, Central Connecticut State University, shared some of his ideas about teaching cryptography. I hope to get his slides because he has some good stuff that I hope to write more about at some point. Since this subject is coming up soon in my AP CS Principles course I can put some of this to work. Overall, this was a great little conference. I did some networking between sessions. Connecting with old friends, meeting some new people, and getting ideas from informal conversation as well and sessions. The food was good. We had a real breakfast – eggs, potatoes, sausage plus healthy stuff. Box lunches with good sandwiches and vegetarian options. Let’s pretend I didn’t eat the brownies that were available for snacks. Hopefully there will be a third conference next year."
"174","2018-10-29","2023-03-24","https://blog.acthompson.net/2018/10/getting-computer-science-teachers-to.html","A number of related (well in my eyes anyway) have got me thinking about how we need to develop computer science teachers. Phil Bagge’s post Developing Teacher Agency in Computing Part 1 pushed me over the edge. His Bagge scale of teaching agency makes a lot of sense to me. Computing Science? Dipped my toe with hour of code I am teaching using an open-ended programming environment I am adapting x resources I am creating my own resources I might put something between items 2 and 3 but I am not sure how I would express it. Maybe, “teaching from a script.” Regardless, there is a progression here. It takes a lot to move from one scale item to another. Some people are not, let’s face it, going to move very far along the scale. For some it will be time, for some interest, for some lack of support, and well lots of other reasons that will make sense for individuals. We’re going to need more people to move along the list if only so they can develop tools for those at the earlier levels. I got some push back from this meme - Asking teachers to teach from a script is like asking an artist to paint by numbers. I know that there are fans of tightly controlling what teachers teach and how they teach it. I’m not one of those people. I think we want and need teachers who know when to go “off script. Yes, that takes someone who is at more advanced levels of subject knowledge and pedagogic experience but it should still be a goal. Mike Zamansky wrote about From Scripts To Freestyle on his blog last week. He says that “Having a direction but not a script makes it easier to ""call and audible."" “ An audible in this context means taking a lesson in a new or different path to reach the end destination. Experienced teachers know that not all groups of students are the same. Even different sections of the same course in the same school year act and react differently. A lot of scripts don’t leave enough room to vary to meet the audience where they are. Our problem (where “our” means people who want to see computer science in every school for every student) is that we have a lot of wonderful teachers (not enough) who are still at the earlier levels of Bagge’s scale. They need the script. They need a lot of scaffolding. They don’t yet have the content knowledge to “wing it” or jump off script. Some teachers are never going to get beyond the middle of the Bagge scale. They aren’t that motivated. They see themselves as [some other subject] teachers who have to fill out their workload with computer science. It’s a reality and it will take a long time before we have enough teachers who see themselves as CS teachers who maybe have to teach something else from time to time. So we have to make sure those teachers have the best resources possible even if that means some scripting. It’s a big responsibility for curriculum developers. I would argue that there is a responsibility for teachers who are developing their own resources to share as much of those resources as they can. I am told there are some teachers who keep their resources to themselves on purpose. I don’t know any of those teachers and I hope they are a myth. But I do know that there are teachers willing to share who don’t feel like they have a sharing platform. Some are to shy or lacking in confidence to propose presentations for conferences. Blogs make a great platform and they are free to set up. There are lots of options like blogger.com and wordpress.com and more. Jump in, the water is fine. Many teachers underestimate their own abilities as presenters. It may be surprising that someone who makes multiple presentations a day the the really difficult audience of middle or high school school students can be nervous about presenting to teachers it happens. Teachers can be a tough audience and there is an intimidation factor of presenting to people who also present a lot and who know the content. My experience suggests that teachers at CS conferences are very supportive and very excited to learn new things. No, really, you’ll be fine. Share what works for you. So to help others develop I will paraphrase this plea form “Little Shop of Horrors” Teach Me!"
"175","2018-11-02","2023-03-24","https://blog.acthompson.net/2018/11/propose-presentation-for-csta-annual.html","CSTA just announced the Call for Proposals. for the CSTA Annual Conference just days after I blogged (Getting Computer Science Teachers To The Next Level ) that people who help others develop as CS teachers. Coincidence? Actually, yes, but who cares. Now Doug Bergman has a very nice blog post about why you should submit a proposal on the CSTA Blog. It’s all good stuff and all true. You know I have to add my two cents though right? Presenting at a conference like CSTA is a great way to make a contribution to the greater computer science education community. Making a difference is why we teach isn’t it? A conference like CSTA is an opportunity to expand our reach and make a difference beyond the walls of our own school or the boundaries of our own districts. We all have idea and we all try different things. Some of them work. Some of them don’t work. We learn and go forward regardless. There is a saying that anyone can learn from their own mistakes but the really smart people learn from other people’s mistakes. Conferences are a chance for people to learn from the mistakes of others. I have known a lot of amazing teachers who say “but I’m not good enough” or “my ideas are nothing special.” Yes, the imposter syndrome is strong in many of us. If something works in your classroom than you have a success story to share. If A project, a role play, a lesson plan, a tool you have made, adapted, or explored has made a difference in your teaching practice you have something to share. Few of us use nothing but canned scripts. The audience at the CSTA conference is very warm, friendly, and supportive. People are their to learn and share ideas not to be critical of others. Sure you’ll get questions and you will probably get suggestions as well. A good speaker presents to learn as well as to teach. Presenting at CSTA will make you a better teacher. You’ll get as much (if not more) than you give."
"176","2018-11-05","2023-03-24","https://blog.acthompson.net/2018/11/programming-projects-should-be-personal.html","I’m always looking for new projects. I find them in the strangest places. Facebook for one. And some not so strange places. The AP CS Principles curriculum from code.org has lead me to several. Most recently, the unit on data and privacy took my class and me to the Data Privacy Lab at Harvard The site has two sections, one looks at your browser history and the other looks at some of your demographic data to see how identifiable you are. One enters their zip code, birthday, and gender. The system looks at census data. and shows you how identifiable you are from that limited data set. Well that is interest but where is the project you hint at in the title of the post. Ah, good question. Since this is a tool based at Harvard you can also see how unique you would be at Harvard. This suggested to me that looking at data from the school were I teach might be more interesting to my students. I asked my Director of IT (have I bragged about how awesome tech support is at my school lately) and a short time later I had a nice comma separated list of gender, birthday, and zip code for all of the students. No more personally identifiable information than that. A little bit of coding and I had my own data tool. That’s when I decided that I had a possible assignment for my students. I think that students are more interested in projects that are personal to them. Looking at data from Harvard, as fascinating as that could be, is probably not as appealing to a student as data from their own school. They should be able to find themselves in the data. I hope they’ll want to see what they have in common with others in the school. Now I could assign all of my students the same project. That is what I usually do. I’ve been wanting more variety though. I don’t want one student to solve the project and just share it with their neighbors. A little help, a few pointers, that’s ok but not the whole thing. For this exercise I decided to try something new (to me at least) and offer a lot of options. They’re all the same basic logic and require the same basic “tools” but there are enough different to confuse a student who copies without understanding. At least I hope that is the case. So I gave options: How many males is a particular zip code How many females in a particular zip code How many males born is a specific month How many females born in a specific month How many males born is a specific year How many females born in a specific month How many people from a specific zip code were born in a specific month How many people from a specific zip code were born is a specific year How many people were born on a specific day (same exact day, month, and year) What percentage of students are male and female Which zip code has the most people (this is a tougher one for people who like a challenge) None of this is hard (although one of my students insists I am not allowed to say anything is easy) but I just want them to have a little practice problem solving with arrays before we move on to a new topic. I am not allowing students who sit together to do the same exercise. Eventually I want to assign everyone their own unique variation. IF this works out I will start trying to think of similar little exercises that can be just different enough for each student that they have to think on their own. Anyone else do this sort of thing? Does it work for you? Does it just sound crazy? Yeah, grading will be interesting. Any other concerns?"
"177","2018-11-06","2023-03-24","https://blog.acthompson.net/2018/11/teaching-computer-science-teachers-to.html","My teaching style, especially in the first years, was greatly influenced by the man who taught me computer science. A wonderful man who really instilled a love for CS and a lot of knowledge. We didn’t know a lot about teaching CS or programming45 years ago. In fact I think we were really just starting to figure programming out. How to teach it was almost a black art. Most teachers tend to teach the way they learned. It worked for them after all. Today though we know more about how to teach CS. Not enough but at least there is progress. Thus brings us to how to teach the people who will teach computer science in K-12. There are two things future CS teachers need. Content knowledge and knowledge of how to teach CS. Many universities are asking CS faculty to teach the content. My big concern here is that I want teachers to be taught by people who model best teaching practices. Almost every teacher I know has been in a professional development session about how to teach run by a presenter who didn’t model what they were teaching. It’s not going to be enough to have classes that teach how to teach if content providers don’t model that techniques. A lot of universities are going to struggle to find such a person. Oh sure their research professors have great content knowledge but teaching to an auditorium of 300 university students is not the same as a class of 15 to 30 high school students. And grades k-3? Not sure many university faculty are ready to teach CS to little kids or to future kindergarten teachers for that matter. (Note that I love and respect kindergarten teachers. My daughter in law and my cousin both teach kindergarten.) One would like to think that teaching professors, either special role at large institutions, or regular faculty at liberal arts and smaller institutions would be better models. Are they? Surely many are. But many educators don’t adopt research based teaching methods for teaching CS. (Mark Guzdial has written about this several times. For example here) How many university CS faculty know about things like subgoal labeling, and Parsons problems? What we need are CS educators to teach pre-service teachers using the methods that we know can improve teaching. That’s going to be tough for a while. One suggestion that has been made (credit Mike Zamansky) is having current high school teachers teach pre-service teachers. The idea being that they know well how to teach younger students. Not a totally bad idea especially if those teachers have taken advantage of changes in what we know about teaching CS either from their own experience or from additional study or both. Politics at universities may make that troublesome. And if you think school teachers are underpaid look into how adjunct faculty are compensated sometime. Ouch! What is going to happen is that some schools of education will do it right. For some definition of right. Those schools will take preparing CS teachers seriously and make it a priority to get good faculty, using current methods, and probably doing CS ED research themselves. The teachers they graduate will be in high demand and attract more students. Those universities will (one hopes) be emulated by others as the demand for well-prepared CS teachers grows. I can’t wait to see which universities make this a priority and set the standard for the rest. No, really, I can’t wait."
"178","2018-11-09","2023-03-24","https://blog.acthompson.net/2018/11/how-do-we-define-successful-high-school.html","Mark Guzdial has an interesting post asking When do we know that a programming course is not working for non-CS majors? The focus of the post is undergraduate level computer science courses. Can universities create CS courses that work for CS majors and non-CS Majors at the same time. It’s an important question for universities who are faced with more and more CS students and having trouble hiring enough faculty. We face some similar questions in secondary school computer science. In secondary schools we don’t really have majors and we don’t have a way to identify CS majors. So all of our courses have students who may or may not major in computer science when they get to university. We not only have to ask if our courses are working for future CS majors and for students moving into other majors. Do we even know what “working” means in the secondary school environment? Is a first course working if enrollment is up in more advanced courses? If enrollment does not go up does that mean the first course is not working or are their systemic reasons like guidance pushing students to more world language or other sciences? Or perhaps scheduling problems with too many interesting electives and to few open slots in the schedule? Are our courses working or failing based on the number of students who do go on to major in CS? Or is that not a good measure because a lot of people in other majors are likely to need CS. More and more math and science courses make use of programming for example. Generally it is very hard to collect data about our students once they graduate. I need to think on this some more but I am hoping some of you, my readers, have some thoughts on the matter. We probably need some answers as we work to convince more schools to offer CS. Administrators will likely want to know how we know we are teaching the right things the right way."
"179","2018-11-12","2023-03-24","https://blog.acthompson.net/2018/11/guest-hosting-tweetmeet-on-cs-and-hour.html","Computer Science Education week is fast approaching. It's a big week and one of the big activities for a lot of teachers, students, and schools is the Hour of Code. Microsoft Education is running a Twitter chat or Tweet Meet on the topic and I was asked to be one of the guest hosts. It should be very interesting with a lot of international flavor. Quite an interesting line up of international teachers co-hosting across time zones, national borders, and languages. I hope you’ll join us. More information at https://educationblog.microsoft.com/2018/11/tweetmeet-computer-science-msfteduchat/"
"180","2018-11-13","2023-03-24","https://blog.acthompson.net/2018/11/toys-or-tools.html","Are we using toys or tools to teach computers science? The cute little robots for example. Or Micro:bit? or any number of other fun little gadgets that we use to make learning more fun and interesting? Toys or tools? Calling them toys makes them seem frivolous and unimportant. See Merriam-Webster definition of toy which includes “something (such as a preoccupation) that is paltry or trifling” “Tools” implies work or perhaps even not fun. Too serious for some though. The definition of “toy” also includes “something for a child to play with” Ok, “play” seems a little better than “trifling” but still not so serious. Isn’t school serious business? Yet educators know that play is the way children, especially little children learn. And we’ve know this for a long time. “The most effective kind of education is that a child should play amongst lovely things.” ~ Plato I had a related conversation with my programming students the other day. I asked who needed more time to finish a project. A student replied “Everyone but the students who actually write programs for fun.” I do have a couple of those. I tend to see one or two and sometimes three in a course. The students who find the fun in the course are the ones who do the best. They learn the most. They learn the fastest. And they create the most interesting projects. There may not be a coding gene (as Mark Guzdial insists and backs up with research) but some students sure do seem to find coding more fun than others. As a teacher I do try to make it fun for as many as possible. My experience tells me (not research so doesn’t count for much perhaps) that students who enjoy their projects learn more and do better at coding. Calling the tools we use to make things more interesting “toys” or “tools” doesn’t change that they make things more fun and interesting. Words may bias people so we should be careful how we use them. Perhaps we tell the funding people they are tools. And maybe we say the same to parents. Calling them “toys” will lower stress for some students and cause others to take things less seriously. It can be a tough call. Among ourselves (educators) we can call them toys because we understand that toys and play are the tools of learning. For the most part I think we should avoid categorizing them as either tools or toys. There is too much emotional baggage about both of those words. Let’s try to avoid broad characterizations completely and just call them what they are: computers, robots, sensors, or what ever. Remember fun is good even when it looks like work to someone else. FWIW I found that Plato quote at Child’s Play Magazines Quotes about play Lots of great ones to choose from. Some of the web most things on the Internet are blogs. This post is inspired by a post from Doug Peterson (as many are) that quotes and links to another blog. Specifically Doug’s Toys or Tools post that links to Tim King’s ECOO BIT18: Reductionism and Ignorance in Educational Technology post. Both posts are worth a read."
"181","2018-11-14","2023-03-24","https://blog.acthompson.net/2018/11/post-secondary-cybersecurity-curricular.html","There is more computer science than we could ever cover in grades K-12. So much of it is important and exciting. Every parent open house I get suggestions for what we should teach in high school. There is no way we can teach it all. There is no way we can do everything in universities either. One other thing is clear, cyber security is growing in importance. While I try to cover a little of it in my courses (easily fits a few classes in several courses) I can’t cover as much as I’d like. My hope is that universities cover a lot more. I think most do. The ACM and IEEE have just reported out a document to help post-secondary schools design their cybersecurity programs. I haven’t read the whole document yet but I know some of the people involved in writing it and in the process that goes into creating documents like this. so I am confident in recommending it. Do you cover cybersecurity in your curriculum? How much do you have time for? First-Ever Global Curriculum Guidelines Reflect Worldwide Demand for Qualified Professionals and Urgent Industry Needs After an extensive two-year process, a joint task force led by the Association for Computing Machinery (ACM) and the IEEE Computer Society (IEEE-CS) has released a first-ever set of global curricular recommendations in cybersecurity education. This new set of guidelines, Cybersecurity Education Curriculum (CSEC2017), is designed to be the leading resource for comprehensive cybersecurity curricular content at the post-secondary level. More than 320 advisors drawn from 35 different countries contributed to CSEC2017."
"182","2018-11-15","2023-03-24","https://blog.acthompson.net/2018/11/16000-bbc-sound-effects.html","I don’t know about you but I regularly go on the lookout for sound effects for projects. Today, I have to share this new source for sound files that may be used for educational purposes. 16,000 BBC Sound Effects I found this database to be fairly easily searchable. Clips are various lengths and sizes so be aware of that. I imagine you could convert the WAV files to other formats if you really needed to. I’m still experimenting with them. These 16,000 BBC Sound Effects are made available by the BBC in WAV format to download for use under the terms of the RemArc Licence. The Sound Effects are BBC copyright, but they may be used for personal, educational or research purposes, as detailed in the license."
"183","2018-11-16","2023-03-24","https://blog.acthompson.net/2018/11/testing-computer-science-knowledge-is.html","How to evaluate computer science students is always a tough question. It’s everywhere that computer science is taught. There is something of an issue with a course offered in the United Kingdom f or example. Exams ‘useless’ for computer science, say experts Among the experts they quote are two educators. Miles Berry is someone I know and he definitely qualifies as an expert. The software developer the article quotes develops educational software, which is interesting. It seems like articles on software education always seem to include a quote from a software developer. Why? In any case, evaluating CS knowledge is a tricky thing. I prefer projects to tests and quizzes but they have limitations as well. Mostly that it is easy to cheat. Students have time to figure things out, which is great, but that means one has trouble knowing what they know against how good they are at looking things up. Calling this cheating might not be the right word because real programmers share and copy code all the time. And being able to look things up is an important skill. Paper tests are harder to cheat on but limit creativity. And they're no fun. I use the occasional quiz in my classes. It sort of keeps kids honest to a point and lets me get a better handle on where students are struggling with concepts. Having one on one conversations might help some. But that doesn’t scale well. Some students have trouble communicating what they know and some teachers have trouble asking the right questions. So much depends on the teacher student relationship. I wish we didn't have to grade at all. That would require students who learn because they want to know things and not just want to get good grades. As teachers we would still have to understand where students were having a hard time because that would help us to teach better and students to learn better. Most evaluative instruments feel like blunt objects to me."
"184","2018-11-19","2023-03-24","https://blog.acthompson.net/2018/11/the-learner-gets-vote.html","One of the cool things about Twitter is that some interesting discussions take place among really smart people and the rest of us get to watch and, if we’re smart, learn. One such conversation took place over the past weekend with a number of really smart, very well informed (with, you know, actual research behind them) educators talking about CS pedagogy. The discussion was between a number of high powered university professors. As a lowly high school teacher I was hesitant to inject my thoughts. But I seem to be genetically incapable on keeping my thoughts to myself so .. My comment was “A lot of times we forget the student and the environment they live in. The best thought out pedagogy in the world doesn't work if students reject it.” It may be surprising but many students have strong ideas about what they should be learning. Their ideas of what is relevant are often different from that of their teachers. It’s easy for us as educators to say “we know what’s best” but students do get a vote. If students think the tool is too hard, too easy, or just wrong it will be a struggle for them. Sure we as teachers can do a lot to make things go smoother. We can explain why it is good to use that particular tool for example. And we can make sure that projects and exercises are interesting to students and not just to us. What we can’t do is just assume that because we know the pedagogy is right that students will take that for granted and wholly embrace our methods. In fact, we have an obligation to do so. “Because I said so” almost never works as a motivation."
"185","2018-11-22","2023-03-24","https://blog.acthompson.net/2018/11/the-problem-with-cs-education-research.html","There is some research in who t teach computer science (OK, mostly its about teaching programming but that’s important too) but not a lot of teachers or professors are adopting it. One has to wonder why? Eugene Wallingford takes a look at this question on his blog Why Don't More CS Professors Use the Results of CS Education Research? He has so reasonable answer having to do with peer pressure and pressure from students and parents to do things “the way we’ve always done it.” The path of least resistance is tempting of course. And change is hard. But I think there is more to it than that. I mentioned Parsons Problems to a professor at a university and he knew nothing about it. And why would he? For many professors at R1 schools research is a higher priority than teachings. And teaching high level courses has a higher priority than lower level courses. But higher education is not my area so I look closer to home – secondary school teachers. I should start with myself though be fore I look at others. Problem number one for me is lack of understanding. I’ve read some papers on worked examples and Parsons Problems. I think I understand them. Sort of. But the language of research papers is not one I am totally comfortable with. No, that’s not quite right. I read it comfortably but figuring out how to put the conclusions into practice is often still a little opaque to me. These papers are written for other researchers and not for people to implement in their own classrooms. So that is problem one. Then there are the tools that are used in the research. I have played around with a couple of Parsons Problems tools. Eh. Clearly they were developed by people who were developing for a specific audience that is possibly more forgiving or willing to work harder than the average high school student. Lots of them look like the old school (i.e.. before windows) applications adopted for the web. Hardly the thing to grab the attention of a modern HS student. To be honest I tend to worry about using tools developed for research projects. One never knows when the researcher will move on to a new interest. I want to use Parsons Problems but I struggle to find the right tool to use. I want to use worked examples but I need to spend sometime with someone (or some paper) that knows how to help a HS teacher learn best practices. I’m sure there are other things I can and should learn from CS Ed researchers but I don’t know what they are. That brings up the next problem. I spend money out of pocket to be a member of ACM and SIGCSE. That gets me a lot of great papers to read. Money well spent IMHO. But it’s been a while since I have been to the SIGCDE conference (maybe this winter) and that would let me get more out of these papers. I could ask more questions and hear the questions of others. I think a lot of HS CS teachers don’t really even know much about SIGCSE or attend the conference. Yes, there are a bunch of HS CS teachers at SIGCSE. They’re a small subset of the total community though. There are more HS CS teachers at the CSTA Conference but that’s not a venue high on the radar of university CS Ed researchers. There are other conferences more likely to help a professor get tenure or impress possible funding agencies. That is not to suggest that CS Ed researchers don't care about HS CS. They absolutely do. Several have been very generous in their support of CSTA and of spending time helping HS CS teachers. I owe them a debt. Many HS CS educators don’t have the time, energy, or motivation to go digging for new ways to teach. It’s hard to blame them. Their students do well on examples, pass the AP tests, do well in university, and generally seem happy with the statues quo. How are they ever going to learn how to do things better or even decide if there are better ways? In short, yes, some are unwilling to try new things but more would if a) they had a better understanding of the techniques and b) they had tools more suited to younger learners. The biggest factor though is they just don’t know about the research and what it suggests. Someone needs to take that on. Calling NSF, Code.ORG, CSforAll, SIGCSE, and CSTA!"
"186","2018-11-28","2023-03-24","https://blog.acthompson.net/2018/11/ready-fire-aimwhy-is-design-first-so.html","“Hours of coding can save you minutes of planning” We’re talking about top-down design in my APCS Principles class this week. I gave the students a worksheet (part of the code.org curriculum which is really well done) that asks students to pair up and design the functions they would write for a given problem. The first question from a student? “Do we have to do the design before we write the code?” Now you may be asking yourself – what sort of question is that? Of course you design first. That is not how students think some times. They want to jump right in and write code. It’s not that they know how to do it or that they have a design in their minds though. They want to try things and see what works. They are more into trial and error. They have high tolerance for error as long as they are moving forward and the development environment is not giving them error messages. Now not all students are resistant to planning. Over time most students come around to the idea of design first. It can be a tough sale though. Design doesn’t have the same instant gratification that writing and trying a line of code does. Back in the day (yeah, old guy reminiscing) we had long turn around between writing code and seeing results. We handed in our deck of punch cards and waited (hours or even days) to find out what worked and what didn’t. We really could not afford to skip the planning phase. We thought deeply about how things should work. We closely desk checked code before submitting it and after getting early results. Now I am not saying I want to go back to those days. (even though in weak moments I might think it would be good for students.) I do wish it were easier to keep students from writing code first though. I’ve tired having one student write a design and than having another student write code from it. The second student tends to mostly ignore the written design and do it their own way which may or may not look like the design at the end. Often it is easier to blame poor design than a failure toe follow the design. Students do want their programs to work and they don’t want to make peers look bad. What I am trying to do more and more is to model design thinking myself. We create programs as a class and I work though the design before showing code. For example, we are working on a program to give and score quizzes. We worked though a discussion of what a question class would look like. What data would it store, what functions would it need to support, and how would it be used? I can force students to write out designs. And they’ll try. Over the years though what seems to influence students most is what they see me do. If I get lazy they’ll get lazy. If I take shortcuts they’ll take short cuts. If I use good practices though so will they. If I model design, planning for expansion, and show that I am thinking beyond the near term so will they. I keep reminding myself of this. Leading by example is the best tool of all."
"187","2018-12-03","2023-03-24","https://blog.acthompson.net/2018/12/happy-computer-science-education-week.html","It’s CS ED week again. Yeah! This is the week that thousands of teachers around the work introduce millions of students to computer science. Many of them for the first time. Some through the Hour of Code, some though special speakers, some though creative ideas of their own, and on and on. Teachers are by nature creative people which it comes to sharing ideas. It’s an awesome week. Earlier today I joked that there were no Hallmark cards for CS education week. The obvious suggestion, print your own, came very quickly. It’s not a bad idea. It got me thinking though. Wouldn’t it be nice is one aspect of cs ed week was an appreciation of those teachers who work to bring computer science education to students on a regular basis? Last year, CSTA and code.org started the Champions for CS awards. You can read about the 2018 Champions for Computer Science Awards. Those awardees will be presented with their awards at a special 2018 CSEdWeek kickoff event today. That is great. I hope we can safely assume that part of their role is to serve as a sort of proxy to honor other hard working CS educators as well as highlighting exceptional teachers, students, and programs. At least that is how I choose to see it. Personally, I’d like to thank the many CS teachers who have shared ideas with me, taught me, and supported me over the years. There are so many of them and I can never list them all. There have been blog posts, comments on blog posts (mine and others), teacher presenters at conferences and PD days, hallway conversations, and formal training events. So much to learn and so many teachers who are willing to share what they know. We in CS education have a wonderful, caring, and helpful community. Thank you all who are part of it. You’ve made my career and my life richer."
"188","2018-12-05","2023-03-24","https://blog.acthompson.net/2018/12/where-does-computer-science-fitrevisited.html","David Renton is teaching his students at Porter-Gaud how to program virtual reality projects. He posted a video of some of these projects a few days ago. These are pretty cool, Virtual Reality apps created by [David’s] Porter-Gaud High School senior CS students using Unity for SteamVR. They tested them using HP & Lenovo Windows Mixed Reality Headsets. They each created at least 2 3D models themselves using Maya and imported the other models from the Unity Store and/or remix3d.com. They also created at least one sound effect themselves using Audacity. They coded the interactions using C# in Visual Studio. https://youtu.be/xddytj0hVZU One project was highlighted on the Microsoft Education blog with a post by the young lady who created it. How a VR trip through the solar system honed my down-to-earth skills – go read it. I’ll wait. That is a project that involved math, physics, and art into a computer science project. I suspect that the math teacher she approached for help was pretty pleased to get involved. I’ve sent students to math teachers myself over the years. We don’t ask where reading fits in the curriculum after some magic line in elementary schools. We teach students to read in large part so they can use it as a tool to learn more about more subjects than just reading. I’ve long believed that computer science can, and should, become a tool that students learn to help them learn other subjects. Yes, we need students to have a base of CS knowledge first. David’s students have had several years of CS, starting in elementary school, before they get to him. Using that base they can learn more about CS for sure but they can also create projects that interest them and motivate them to learn more, not just about computer science, about a wide range of other subjects. Like reading, we need to teach enough CS that it can be used across the curriculum. It can’t stay a silo subject if we’re really going to see students use it to their potential. Edit: See also the Luminous Science curriculum being developed by Ben Shapiro’s student. Brings together science, art and #computing. Also awesome! https://www.playfulcomputation.group/luminous-science.html Ben is on twitter @bennytheshap"
"189","2018-12-07","2023-03-24","https://blog.acthompson.net/2018/12/teaching-phone-programming-should-be.html","Garth Flint and I have been independently looking at resources for teaching mobile phone application development. (Garth’s posts are linked below) I’m currently teaching a course using AppInventor which is going ok but not as well as I’d like. Most of my students own iPhones which AppInventor doesn’t currently support. Their iOS support is currently under review by Apple but my course is almost over. Even with Android phones I still have some trouble with connectivity. And the emulator is a mess. Some days I can’t get it working at all. So I’m thinking about what to use to teach next year. There are other options. I have been testing Thunkable with some of my students. The good is that it supports both Android and iOS. The bad is that this support doesn’t support many sensors and really that is a huge part of what I want students to do. Without sensors its just another desktop app with a tiny screen. I still need to take a closer look at LiveCode which seems to come up in this discussion so I don’t know much about it yet. Input welcome! I haven’t tried the platform specific (ie professional) tools yet and I am reluctant to do so. The ones designed for iOS or Android only work on those platforms and I’d like to use both. Since most of my students have iOS devices than going Apple might be a way to go except that that requires developing on Macs. We have a Mac lab but its already used a lot. And they are all Macs which comes with its own complications. I am not a fan. That’s a last resort. Microsoft Xamarin with Visual Studio is a cross-platform professional option. I’ve looked very briefly at it in the past. Setting it up is non trivial and I do have to have some connection to Macs for the iOS loading. Networking to a Mac or three might be an easy option. Well, easier than taking over a whole lab. I need more time to work on that option though. I don’t know many teachers using it which is a concern. I really wish Windows Phones had not died out. I have a Windows Phone and writing apps for it with Visual Studio (2015 or earlier only) is a piece of cake. Android App Course thoughts Android App Course with thoughts on Project Based learning and ramblings Android App Course: The continuing saga Android App Course: the saga ends"
"190","2018-12-14","2023-03-24","https://blog.acthompson.net/2018/12/sub-goal-labeling-in-computer-science.html","One of the interesting ideas in teaching computer science I have been looking at is sub-goal labeling. I’m experimenting with it but to be honest I don’t feel near ready to share what I am doing. As a wrote recently (The Problem With CS Education Research ) it can be hard for teachers to take research and adopt it because, well, research papers can be hard to read for some of us. And the world of the university classroom is a little different from that in the high school. Fortunately for me, and for you, Clark Scholten has been trying things out and blogging about it. I highly recommend his posts. CS CS Teaching Strategies - Subgoal Labeled Worked Examples Subgoal Labeling - Revisited Subgoal Labeling (Part 3) and CS Ed Week Web Design Reflections and Subgoal Labeling (Arrays) Anyone have more suggestions of resources for learning how to use sub goal labeling?"
"191","2018-12-31","2023-03-24","https://blog.acthompson.net/2018/12/looking-back-on-cs-education-in-2018.html","The last few years I have written start of the year posts about things I want to track in Computer Science education in the new year. Last year’s post is at Computer Science Education Things I'm Watching in 2018 At the end of the year, like today, I write about how those things tracked over the year. The first thing I wrote about last January was Advanced Placement Computer Science Principles. I was half way through the year teaching it for the first time at that point. Now I’ve been through a whole year and am half way through the second. APCSP grew a lot and continues to grow. Curriculum from Code.org, Beauty and Joy of Computing (BJC) from UC Berkeley, and Mobile Computer Science Principles (Mobile CSP) from MIT continue to be top curriculum in use. It’s a heady time for AP CS. At this point APCS P is pretty settled into many schools and looks to grow even more. The existing “canned” curriculum and related training are key factors. The next big item I was following was K-8 Computer Science Education. This is still an up and coming area. The #CSK8 twitter chat has been my best window into this area and it continues to grow. The first chat of 2019 will be 2 January 2019 at 5pm PT and 8PM eastern US time. I didn’t attend ISTE in 2018 and that is usually my other deep dive into K-8 CS. But K-8 CS continues to grow as the CSTA Annual Conference and local professional development events like the 2018 CSTA New England Regional Conference. State Standards continued to grow as more and more states adopted them. In the last year or so my home state, New Hampshire, adopted new CS teacher certification guidelines, state standards, and passed a law including computer science as part of the definition of an adequate education. Other states moved forward as well. I confess I spent a lot more time looking at NH than other states. It was a good year for computer science education in general. Here’s hoping we continue to see progress in 2019."
"192","2022-08-13","2023-03-24","https://blog.acthompson.net/2022/08/cyber-security-and-cs-education.html","Way back in time, cybersecurity was all about controlling access to the computer in the locked room with the raised floor. Well, you had to trust the people you did let in of course. I will not say much about the students I went t university with who competed to create the best, most realistic login emulator to steal passwords because, you know, that was all in fun. Later in life I actually had supporting the real login software as part of my job responsibility. We were more aware of security by then. It was the real world. We spent a lot of design time on our various OS subsystems to make sure that access was verified and that people could only access what they were authorized to access. Dial in lines and then networks made things a bit more risky. I remember one system that required a second password of 16 random characters that changed every 5 or ten minutes (I forget which). Someone broke in anyway. Social engineering not technical engineering. People were and are still the weak link in computer security. In the early days few people had access to a computer. Fewer still had technical knowledge enough to crack into systems And most of them were (it seems) fairly trust worthy. As more people got access to both computers and knowledge breaking into systems became more common. Today there is a lot of talk about cybersecurity and the need for more people to be trained in the field. What does that mean for high schools? For one thing, it means a lot of people are saying that high schools should teach it. What teaching cybersecurity means is a question with still developing answers. Should schools offer a whole course in it or can they cover enough in an existing course? If a full course, a semester? A year? Some part of a year? You’ll get a lot of answers but little in the way of a consensus. A lot of discussion about this on Facebook group for Cybersecurity Educators. Resources at CYBER.ORG are helpful as well. For now, individual schools are making their own decisions. These decisions are based on things like teacher knowledge to teach such information, room in the schedule, and resources available. Some school IT departments are not willing to let students experiment on networks in a school. Or even, in some cases, to have students learn about network vulnerabilities! I suspect that career technical schools are going to be the main source of high school courses in cybersecurity. There is less focus on AP exams and more focus on preparing students for the work force sooner rather than later. Oh yeah, colleges and universities but they are not my focus. Comprehensive high schools are more likely to add some cyber security information into existing courses. AP CS Principles for example. A few will have longer courses but I suspect most of those will be independent high schools and charters as they have fewer restrictions and their politics is different. (Different does not always mean better or worse to be clear.) Maybe when (if?) we get to a place where the learning of coding is done well enough and deep enough in middle school we can move away from HS courses that “just” teaching programming and start using that programming to learn about other things in computer science. Like cybersecurity. Like data science (although we are seeing some of that in middle school already (Bootstrap:Data Science ) which is pretty exciting. And like more artificial intelligence. Programming is cool (to me) and important (to everyone!) but there is more to computer science than programming. Security is an important part of that and high school CS educators have to have it on their radar and give serious thought to bringing it into their curriculum."
"193","2022-10-25","2023-03-24","https://blog.acthompson.net/2022/10/the-computer-science-professional.html","Mike Zamansky is stirring up trouble again. OK not really his intent I’m sure but people can get defensive. I have to say that I agree in principle with most of his post at Why PD doesn't work for CS Mike lists four different types of PDs. Teachers sharing practices conferences and meetings that teachers choose to attend PD run by content providers, that is, people selling something PD required by schools and districts It’s as good a break down as any though the fourth kind can really include any of the first three. So I will zero in on those for now. Full disclosure: I have given all three of those types of PD in my time. This includes working for a content provider, Microsoft in this case, that was more or less selling something even though the stuff I was presenting to teachers was free. I think that these types of PD can be great things for improving a teacher’s knowledge and skills. None of them are really good for starting from scratch. Teachers sharing practices is a wonderful thing. At least if the audience has a solid base to start. We see a lot of it in social media. Not as much on blogs as I would like but still some valuable stuff is shared on Facebook and even Twitter. I have learned a lot from teachers sharing practices. I hope I have helped some teachers as well. Short bursts of knowledge is not a foundation to start a CS teaching career on though. Conferences are wonderful. The sessions are short, typically 45 minutes to an hour and a half. They are great for sharing and for helping teachers to build on existing knowledge or to lead them in new directions for further exploration. But one should not expect a new to CS teacher to attend a conference (or two) and expect them to be a trained teacher. PD run by content providers are typically longer form. Usually a week, sometimes two. These can be awesome especially if they are given to educators who have prior experience For example, a teacher who has taught simple web page building attending a session of a more advanced toolset for a more advanced course. Or a teacher who is learning a new programming language who can relate it to previous knowledge. These sorts of PD can be a mixed bad of course. Some focus totally on the tool and not much of pedagogy. Others are concept focused as much a tool focused. Regardless, these can be very valuable especially when the content provider is a non-profit with goals beyond selling product. We’re getting to an interesting point in the development of CS for All. We’re rapidly outgrowing the availability of strong technical CS educators. Qualified CS teachers are hard to find. We’re not doing students any favor by putting untrained or antiquatedly trained teachers in the classroom. Colleges and universities have been complaining about having to reteach students who were poorly taught in high school for years. Do we really want to see more of that? I think not. We really need more long term training for CS teachers. We’re starting to see some programs and more universities are developing CS education research programs and working with schools of education. That really needs to ramp up. States have to start requiring more training for CS teachers AND put some money into making it happen."
"194","2018-08-05","2023-03-24","https://blog.acthompson.net/2018/08/computer-science-and-farming.html","One of the things I tell students is that computer science is relevant to a lot of careers that they may not think of at first. An announcement I read last week and a visit to a farm reminded me of that this past week. The article was about a joint effort between Microsoft and the Futures Farmers of America. (Future Farmers of America, Microsoft to develop tech-based agricultural curriculum) The FFA is an amazing group that does a lot to help prepared young people for careers in farming. Modern farming is a lot more than sticking seeds in the ground and waiting for plants to be harvested. Actually it has always been a lot more than that but technology has long had an expanding role in making farming for efficient and productive. As I said, I also visited a farm last week. The owners are friends of mine and they are working other jobs as they build up the farm. Technology is a big part of how they manage things at the farm while not living there full time. Obviously there is we-fi available throughout the a farm. There are remotely accessed cameras and a very nice weather reporting system for starters. As I toured the farm we talked about future efforts. One thing under consideration is RFID tags on each of the trees in their apple orchards. This would allow notes to be easily taken and recorded on the condition of individual trees. Other thoughts include computer (and remotely) controlled irrigation. Being able to pay more and better attention to individual plants or parts of a farm - precision agriculture – is something that computerization makes practical. I’ve been reading about using computers to plan grazing patterns that make for more productive pastures, robots that scan and treat individual plants at high speed, and artificial intelligence analysis of aerial photographs of crops. I think we’re on the verge of a big jump in technology use in farming with a jump in productivity and efficacy in farming. Pretty darn cool!"
"195","2018-08-08","2023-03-24","https://blog.acthompson.net/2018/08/computer-science-education-progress-in.html","Things have been moving right along in New Hampshire. First we developed CS teacher certification (a joint effort with the department of education and a team of computer science educators). Now we have CS included in the legal definition of an adequate education as of earlier this summer. A set of CS standards, based on the CSTA Standards and K12 CS Framework have been adopted officially this week. Implementation plans are in the works. The latest announcement I received follows: On June 18, 2018, NH House Bill 1674 was signed into law. https://legiscan.com/NH/text/HB1674/id/1656822 This bill renames our ""ICT Literacy"" program to ""Digital Literacy,"" and adds Computer Science (CS) as a core K-12 subject area. The NH Department of Education is currently working on the program rules (ED306) that will implement this law, as well as a timeline for developing CS programs. We are looking at a two-year implementation timeline, with a target date in 2020 for districts to have programs in place. There will be additional opportunities for educators and the broader public to provide feedback, with information posted on this group and on the Department website. Additionally, the NH State Board of education today (August 8, 2018), voted unanimously to adopt the NH Computer Science academic standards. Part 1 of these standards, ""Context and Guidance,"" provides additional clarification about the relationship between digital literacy and computer science, how CS relates to STEM and other disciplines, and recommendations for developing or strengthening programs. Part 2 is the grade-band standards. The standards, and additional resources, are available here: https://www.education.nh.gov/instruction/computer-science/ The policy tour slides provide a concise overview of our computer science policy efforts. The Department of Education will continue to support implementation of these policies through federal and state grant programs, partnerships, and guidance and support."
"196","2018-08-18","2023-03-24","https://blog.acthompson.net/2018/08/programming-fundamentals-books.html","Most programming textbooks just are not what I am looking for. They are too long. They are too dull. And they are written for teachers to use not for students to reference. Last winter I decided to write some thing for my students to use. Actually, two books for my students to use. II took some short suggesting papers I had written, used my PowerPoint lecture presentations for some details, and basically wrote what I teach. I teach some Visual Basic programming to freshmen and C# with my Honors Programming classes. That’s why two books. Visual Basic.NET FUNdamentals Visual C# FUNdamentals These are not typical textbooks. They are short, to the point, and, I hope, will not put students to sleep. There are few exercises and no end of chapter questions to assign. They are intended more for students to use as a reference. Students tend not to take good notes so these may fill that need for some. They also want to learn things that are not generally looked on as serious computer science but which make for more interesting programming projects. So there is a section on how to do fun things with timers, images, and other language/library features that I get asked about regularly. They’re probably not for everyone but the drafts worked well with my students last year. Take a look and if you like what you see buy one (or a classroom set). They’re priced low at $9.95. If they suck, send me an email. I’ll try to do better in a second edition. Thus ends my commercial"
"197","2018-08-29","2023-03-24","https://blog.acthompson.net/2018/08/teaching-programming-with-blocks-vs.html","Blocks or text? Which should I use with beginners? On one hand, I read research backed articles like Mark Guzdial’s High school students learning programming do better with block-based languages, and the impact is greatest for female and minority students which strongly suggest I should be using Block based programming languages. Well, at least in the first course. On the other hand, I had programming in block-based programming languages. Sure it should be an easy choice – go with the research. Sometimes I hate data. What happened to when we could all just go with our guts? Seriously, it is hard to argue with peer reviewed data and I am rethinking a lot of things. I currently teach four different courses and each one uses a different programming language. Advanced Placement uses a combination of block-based programming that migrates to text-based JavaScript. That’s ok I think. Most of these students have had previous programming in either or both blocks or text languages. My mobile application programming course does use a block based programming language (currently AppInventor) and it works well there. Most of these students have had very little if any previous programming experience. The pace is slower than my honors or AP courses and students seem to like it. I need better assessment tools to really understand how solid of a foundation they have for future computer science and programming. That is something I am working on. My Honors Programming course uses C#. These are students who, for the most part, are highly motivated, have a good base to build on, and want to be challenged. I think C# is a good language for them. Opinion I admit. Where I am really having to think hard is with our freshmen class. We currently introduce programming with Visual Basic. Should we be using a block language? Maybe. Unlike the other courses I teach I am not the only teacher. I teach two sections out of a total of 11 or 12 sections. Three other teachers also teach sections and the department chair teaches more of them anyone else. So it is not just my call. At least not for everyone. What I am currently thinking about is doing a pilot with my sections. What I need to do first is come up with some sort of way for use to assess the difference (if any) in results. Since I teach the second course for many of these students I could look at who takes more programming and how they do with the next course but that takes a lot of time. And how do I know if the language used influences (and in what direction) if students do or do not take more programming? I guess I have research to do. On the other hand, if there are some of you who have made this sort of change and would like to share what they have learned I’d love to know about it."
"198","2018-09-04","2023-03-24","https://blog.acthompson.net/2018/09/why-teach-binary-in-computer-science.html","Sometime when I was around age 11 or 12 I learned about different number systems. I was fascinated with the concepts involved. I literally spent hours experimenting with them. This stood me well when I started studying computer science. We were using Binary, Octal, and Hexadecimal. Octal and Hex are useful for grouping Binary into groups of three (octal) of 4 (hexadecimal). I worked on computers back when one could, and did, toggle code in Binary using switches on the front of the computer. It was awesome. I’m still fascinated with these systems. I have a Binary clock on my desk and six sided Binary dice in my desk drawer. And of course I try to teach Binary in particular and number systems in general. I’m still surprised that students don’t enter high school knowing this stuff but I guess priorities in education change. In any case, if you do an internet search for “teaching Binary” you will find a lot of resources and discussions about the how to teach. (My own list is at Resources For Teaching Binary Numbers FWIW) What I don’t find a lot, at least not easily, is justification for why we should teach Binary numbers. It’s obvious to us old-timers. It’s in the curriculum and standards for new teachers. That’s good enough for most of us. For students? Well, students want to know why it is important to learn something. I asked teachers on Twitter what they said to justify teaching binary. I got some good answers. There are more reasons as well. Binary explains the limits around the values different data types can hold. That is a key one to me. Now I want to organize my thoughts and figure out how to present things to my students when I next cover Binary and number systems. Letting students know the importance and having context is bound to help students see the value to what I am teaching. So, how do you explain the importance of learning Binary in computer science?"
"199","2020-09-15","2023-03-24","https://blog.acthompson.net/2020/09/why-computer-science-teachers-should.html","Since I retired I have been reading more computer science related books. You may have read my book reviews on Humble Pi, Weapons of Math Destruction, or Computer Science in K-12. More and more I realize that I missed out on a lot of good ideas and information. Each of those books has given me ideas that I wish I had thought of a long time ago. Currently, I am reading Nine Algorithms That Changed the Future: The Ingenious Ideas That Drive Today's Computers. I haven’t gotten very far yet but the book has covered indexing of web pages, PageRank, and public key encryption so far. I’ve started the chapter on error detection. Pattern recognition, data compression, data bases, and more are yet to come. I’m really looking forward to data compression. Teaching AP CS Principles has built up an interest that I didn’t have before. The indexing chapter is one I had read long ago. Many years ago I experimented with indexing. I wrote some code that indexed the Bible for me. The program was more general purpose than that but the Bible seemed like a good challenge. The program used a list of words and a text file of a book as input. It output a markup language file that worked with a product called VAX Document. VAX Document read the markup language, called SDML, and formatted a document including an index. I wish I still had the code so I could adapt it for some other backend processors. Sigh. In any case, the idea of creating and assigning indexing projects has some appeal for me. I can see this being interesting for students especially in the context of understanding search engines and more involved search queries. Other chapters include a lot of information that would be helpful in understanding and explaining various important concepts. And maybe inspire still more programming projects! So I do recommend this book to AP CS Principles teachers. PS: More of my book reviews at http://blog.acthompson.net/search/label/book%20reviews"
"200","2020-07-18","2023-03-24","https://blog.acthompson.net/2020/07/book-review-weapons-of-math-destruction.html","Weapons of Math Destruction has been out for a couple of years now and it is one of those books that a lot of people reference. I finally got around to reading my copy this week. For those of you who are not familiar with it, the book talks about algorithms involving huge amounts of data and how they are used and misused.These WMD are involved in increasing parts of our lives from teacher evaluations, to credit scores, to policing, to getting hired for a job. Companies make assumptions that the algorithms are fair, impartial, and that they get the results they are advertised to provide. Often all of those assumptions are wrong. In some ways I think the point could have been made with one or two chapters but providing a multitude of examples is definitely informative and convincing. The book is more than a little scary but I think that is the point. We should be concerned. Those of us involved in computing, perhaps especially those of us teaching computing, need an eye opening book like this. It can help us do better and perhaps avoid some of the unintended consequences that this book so clearly outlines. I’d love to assign this book as required reading to students. I could probably get away with that at the university level but high school students are both reading adverse and already loaded with a lot of reading. I think what I would do at the high school level would be to place a couple of copies on course reserve and assign specific chapters to individual students to read. I’d have them submit both an oral and a written report of their chapter. Some group discussions would also be a plus. This is a natural for an AP CS Principles course but I think it would fit in elsewhere as well. We need people in computing who can look at technology and think about unintended consequences and, perhaps more importantly, ask what are the impacts on society of what we are thinking about doing? Is it all just about money and the bottom line or are we actually making people’s lives better?"
"201","2020-07-30","2023-03-24","https://blog.acthompson.net/2020/07/changing-how-we-teach-computer-science.html","I haven't been blogging much lately. I'm adjusting to being retired for the most part but I have been reading and thinking a lot about teaching computer science along the way. Mark Guzdial has been thinking even harder and has posted a four part set of blog posts about the subject. I find that many of his ideas as close to how I have done things in the past. Of course at the high school level we see a lot fewer students with previous experience in CS than many university faculty do. SO we follow much of his suggestions in proposal #1 out of necessary. The whole series is worth reading. Don’t ignore the comments either. Changing Computer Science Education to eliminate structural inequities and in response to a pandemic: Starting a Four Part Series Proposal #1 to Change CS Education to Reduce Inequity: Teach computer science to advantage the students with less computing background Proposal #2 to Change CS Education to Reduce Inequity: Make the highest grades achievable by all students Proposal #3 to Change CS Education to Reduce Inequity: Call a truce on academic misconduct cases for programming assignments"
"202","2022-03-21","2023-03-24","https://blog.acthompson.net/2022/03/word-games-and-cryptography.html","My latest discovery, thanks to Doug Peterson, is Crazy Phrase. Crazy Phrase is something of a variation of Wordle except that in Crazy Phrase the player is a phrase to discover. Clues are similar to Wordle with visual clues like green being a letter in the right place, yellow being in the wrong place but in the right word and blue being a good letter for the phrase but placed in the wrong word. I was a bit intimidated when I first visited this new puzzle. I soon realized that some things involved in decoding cryptograms can be helpful. As with Wordle, looking for common letters is particularly helpful. With phrases we have the added option of looking for common words. This is especially true with two and three letter words. Words like “to”, “on”, “of” and the like can be very helpful in spotting the direction a phrase of going. There is a proliferation of games on the internet inspired by Wordle these days. They offer a lot of possibilities for teaching problem solving. Creating new versions of games is an obvious programming project. Discussing these as cryptography related is an other possible topic. The use of computers to analyze strings is widely used for many applications so getting students to think about the process as used in games can be very helpful. And fun."
"203","2022-01-04","2023-03-24","https://blog.acthompson.net/2022/01/is-wordle-project-to-assign-students-to.html","Seems like a lot of people are playing Wordle on social media these days. Have you tried it? It’s a word/letter version of old Mastermind game The idea is that you enter a five letter word and the game tells you if you have a letter from the word in the correct place (green highlight), a letter from the word in the wrong place (gold highlight), or a letter that isn’t in the word (grey highlight). You have 6 attempts to get it right. You can read more about the game many places but I read about it here. It’s a fun game to play especially if word puzzles are your thing. I’ve had students program Mastermind in the past. It goes pretty well. This might be a fun variation for students as well. The current tie in with social media may be a plus as well. Oh, wait, can we program the computer to solve Wordles?"
"204","2022-01-07","2023-03-24","https://blog.acthompson.net/2022/01/wordle-solving-for-fun-and-coding.html","After my post the other day (Is Wordle A Project To Assign Students to Program?) I got thinking about solver help for Wordle. I happen to have a huge word list I got some somewhere some time ago. For various reasons I had written a program to make sub list files of words of a specific length. So of course I have a list of 5 letter words – something over 8,000 of them. So that is a start. Phase one of my program was to find all the words that had a specific letter in a specific location. That narrows things down a bit was not near enough. Phase two was to ignore words that had specific letters which I knew were not in the correct answer. That was very helpful. If I don’t know where any letters were I was not getting close enough. So I added a method to include all words that had specific letters in any position while ignoring words with specific other letters. You would be surprised at how many 5 letter words have the same five letters but in different position by the way. On the other hand if you get enough information about what letters to exclude, what letters to include, and one or more letters with a specific location than finding the answer is pretty easy. This was a fun (for me anyway) coding exercise. Will it be fun for students? I have no idea. Let me know if you have an opinion or try it with students."
"205","2022-01-11","2023-03-24","https://blog.acthompson.net/2022/01/how-do-you-define-computer-scientist.html","The last few days have seem some social media discussion about requirements for a computer scientist. Is Calculus a requirement? Is Assembly/machine language a requirement? Among the “yes” and “no” answers there are requests for a definition of a computer scientist. I doubt we could get agreement on a single definition. The mental image people have of a computer scientist is closely related to what knowledge they think a computer scientist should have. In K-12 education I think we should be very careful and drawing too narrow a definition of a computer scientist. If truth there are many kinds of computer scientist and each kind has its own requirements. Someone exploring the science of compiler design and code optimization probably does need a solid understanding of machine language. Someone whose focus is on machine learning probably doesn’t as their tools will be at a higher level than the machine. Computer cryptography could probably use a good dose of Calculus. As could some other focuses. Does someone studying user interface? Maybe not. Should students focus on a special area while in (or before) high school? I don’t think so. They'll have more opportunity to find a focus later. Is Calculus useful? Sure, and for more than just computer science. But there isn’t much that students will do in your average HS CS course that requires it. The same is true of assembly language. Assembly language clearly gives students greater understanding of the machine below. Some exposure to it is good for programmers and computer scientists. Should it be required? Again, probably not at any depth unless there is a specific need to it. Back when I was learning CS we had a computer without the memory for an operating system. Programming in assembly language was required. I had to learn how to program subtraction, division, and multiplication on a machine that lacked built-in instructions for those operations. A great learning experience but not one I found much use for later in my (almost 50 year) career. I did work on some projects that required a firm knowledge of the execution speed of different instructions. And knowledge of assembly language helped there. But we don’t see that sort of need except in rare cases these days. What was required knowledge 50 years ago may not be the same as required knowledge today. We have to avoid the blind assumption that what we learned and the way we learned “back in the day” is the way things have to be today."
"206","2022-01-12","2023-03-24","https://blog.acthompson.net/2022/01/planning-before-coding.html","After all these years one would think I would know better. But it turns out that when coding for fun I don’t always do the planning that I should. It always comes back to hurt me. If you have been reading this blog lately you know that I have been playing with a Wordle solver. It’s going well. But .. I started well. I identified several thins my solver should look for: Words that include letters I know are in the word Words that don’t include letters I know are not in the word. Words where a letter (or letters) are in specific positions Words that include required letters that are not in positions I know they don't belong I coded up the first two options first and a partial implementation of the third option. So far so good. The problem came when I wanted to add an implementation of the fourth option and a more complete implementation of the third. The problem is that I had neglected to plan for where in the code I would do those checks. I tried tossing them in to the existing method but it was a mess. I had to change a good bit of the code around filtering words to make it both work and be more understandable. In hindsight, I think I would have been better off creating stub methods for all the options and filling them in one by one. It’s a technique I recommend to students all the time so I should have thought of it myself. This would have given me a stronger framework from the beginning and made my life easier. In any case, this exercise was a reminder not to start coding before enough of the planning has been done. I know the mod these days is to write fast and break things with a lot of rewriting. I find that to be less than ideal for me though."
"207","2022-01-17","2023-03-24","https://blog.acthompson.net/2022/01/computer-science-for-sake-of.html","My grandson in kindergarten has a class in reading. It makes sense as he is just learning how to read. Over time, school spends less time teaching how to read and a lot more time using using reading to support learning. For many years, I have been saying that computer science and its tools should be the same. Early on I thought of things like using spreadsheets to look at data. More and more I see programming as a learning tool as well. But coming back to data. I recently watched a TEDx talk by Emmanuel Schanzer titled Four Ingredients for K-12 Data Science. Watch it. It’s cool. In any case, it is clear that Bootstrap Data Science takes things I used to think about to a whole new level. I saw a presentation on this by students at a conference in the before times and was impressed with what students had learned. Now Bootstrap is probably best known for their mix of computer science and algebra but they are moving into more areas of the curriculum and I think that is a great thing. I’ve also mentioned Mark Guzdial’s work in teaspoon languages. (task-specific programming => TSP => Teaspoon) Mark’s work involves “adding a teaspoon of computing into other subjects.” It’s still some early days on this effort but it looks very promising. Last spring, while I was teaching at a new (to me) school I spend some time with a teacher of astronomy. He was having his students write Python programs to solve astrophysics problems. Faster and more accurate than the slide rule stuff back in my day. In many ways, I think the CS 4 All movement has been a bit too focused on stand alone computer science classes. Those have a role for sure and some great value. But ultimately, computer science is used in just about every discipline we have today. Teaching it in those various contexts and using CS to help learn those other areas of knowledge is were CS education can have its greatest impact. And greatest relevance. Finding more ways to do that should be a priority. Not just for CS bot for all areas of teaching and learning."
"208","2022-01-25","2023-03-24","https://blog.acthompson.net/2022/01/writing-wordle-clone.html","Kelly Powers posted a Wordle project document on the AP CS A Teachers Facebook page. It’s solid as one would expect from Kelly who is just awesome. It inspired me to write my own Wordle clone to better understand what is involved from a student project perspective. Of course I did it my way. A Wordle project must consist of several parts: Pick a word Accept a guess from the player Analyze the player’s guess Look for letters in the right place in the work Look for letters in the word but not in the right place Look for letters not in the target word Give the player feedback Repeat accept and analyze until player finds the work or had 6 tries Report on end of game Most of this is platform and language independent. The exception is giving the player feedback. I’ll get back to that. Picking a word can be easy (a hard coded selection – great for debugging) or a little more involved (picking randomly from a list). The list can be a small array or a large one that involved reading from a file. Which you select depends mostly on where students are with regards to reading from files and filling arrays or array lists. I have links to two large lists of 5 letter words at the end of the post. The first is one that I use and is on my web page. The other is a larger list on GitHub. Accepting the player guess can be as easy as reading a work from a line. Analyzing the word is the first place where students have to think things our. String methods like SubString for looking at individual letters, IndexOf for locating specific letters in a string, and others are very handy here. Once can create new arrays of a) letters that are in the right place b) letters in the word but not the right place, and c) letters not in the word at all can be useful. I’ve sure there are lots of other ways as well. Much will depend on how you display the results to the player. Feedback! One can reprint the player’s guess with letters that are in the correct place in UPPERCASE, letters in the word but the wrong place in lowercase, and empty spaces for letters that are not in the word at all. That’s probably a great way if you are totally text based. If you are graphically minded, you can try to duplicate how the web based game displays results. There are lost of graphic libraries that will let programmers display things graphically. Swing in Java, Processing (for Java or Python), as well as many online drag and drop tools will all do this. I worry that for most of them students spend more time on the graphics than on the nuts and bolts of the rest of the program. I’ve gotten a bit, ok maybe more than a bit, spoiled using Visual Studio and Windows Form projects in Visual Basic or C#. That is what I used to program my solution (image right). I have 6 arrays of label boxes. Yes, I should have used a two dimensional array. That would have made some things easier but I was not trying to make the best version ever. A lot of beginning programming classes skip multi-dimension arrays as well so I wanted to see how it would be done without them. As each letter of a guess was entered on the keyboard it was entered in a label box. After all 5 letters for a guess was entered I checked all the letters against the Wordle word and the back color of the box was changed appropriately. The result was pleasing. Checking for a winner was a matter of checking the state of all 5 label boxes in the row array. This would be similar in a text based display as well. All in all a very doable project for many programming classes. And it is current which I see as a plus. Additionally students will probably be very happy to play help debug their peer’s programs. List of five letter words (8,258) GitHub source of five letter words (12,972)"
"209","2022-01-27","2023-03-24","https://blog.acthompson.net/2022/01/what-do-computer-science-teachers-need.html","Mike Zamansky had a great post called Trends In Professional Development in CS - it's not all good. We’re still at a very interesting place in the development of computer science education. The shortage of qualified CS teachers is becoming more acute and more and more schools and school systems attempt to expand CS education. Professional development is also growing as well As Mike reports a lot of it is from content providers who have a vested interest in promoting their content. What do CS teachers really need for professional development? Learning about tools and established curriculum is helpful for sure. Increasingly though, we are seeing teachers without a strong CS background being asked to teach CS classes. Few would ask teachers who could not speak Spanish to teach AP Spanish but that doesn’t mean that teachers who don’t know a lot of CS aren’t asked to teach AP CS courses. Weird isn’t it? So clearly a lot of teachers need content knowledge. Learning along with students using canned curriculum sort of works I suppose but to be that feels like everyone is going to get shortchanged. We are starting to see more pre-service programs for CS teachers. The program Mike Zamansky is helping to build at Hunter College for example. And there is usually the option, time consuming and possibly expensive, of taking regular university CS courses. The key thing is that school systems have to be supportive (with time and money) for teachers to get this training. A week or two in the summer is not going to cut it for CS content anymore than a week or two is enough to prepare is Physics or Chemistry teacher. The other thing CS teachers need to know is how to teach CS. Content alone isn’t enough. As someone who entered teaching with lots of CS knowledge but nothing more than having been a student in terms of how to teach. That’s not as much as some might think! Teaching CS is different from a lot of other subjects. Similar in some ways for sure but also different. Learning how to use specific curriculum is helpful and I have learned a lot from content providers over the years. We could do more. While pre-service programs are starting to come online and include this sort of thing there is still a shortage of such education for in-service teachers. We’re starting to see more “how to teach” sessions in conferences like CSTA. The one I lead in 2020 was very well attended which suggests that there is demand. Books are starting to come out as well. Computer Science in K-12: An A-to-Z Handbook on Teaching Programming edited by Shuchi Grover is my favorite and one I recommend highly. We still need a lot of research on how to teach computer science. That looks like it is increasing as well. That’s great especially if researchers share their results in ways that are accusable to teachers. Not all K-12 teachers have access to papers that are behind paywalls. I’m sure hoping to see more research based teaching techniques at CSTA this summer. What do you want to see in CS teacher professional development? Who is doing it well? Any other books to recommend? Feel free to add in the comments."
"210","2022-03-04","2023-03-24","https://blog.acthompson.net/2022/03/sigcse-2022-day-2.html","The morning keynote was by Barbara Ericson. She talked about a lot of her early work including some of her online books CSAwesome and her work with the free online CS textbooks at Runestone Academy. I need to look at these some more https://runestone.academy/runestone/books/index She also talked a lot about Parsons Problems - a subject I am really interested in. One project is Sisters Rise Up which provides mentorship for women taking AP courses. She’s got a lot going now as well. She is an inspiration. First Paper Session:Trends in CS Teacher Professional Development: A Report from the CSTA PD Committee. A lot of CS teachers are experienced teachers but not experienced in CS. Teachers want PD but it can be hard to find. The PD committee is evaluating and accrediting CS Ed professional development. You can see their efforts at the CSTA web site Next up was Detecting Struggling Students from Interactive eBooks Data: A Case Study Using CSAwesome This talk was by Barbara Ericson and was about data from ebooks on Runestone and CSAwesome. Barb was able to collect a lot of data. Students don’t watch videos to completion a lot which doesn’t surprise me that much. A lot of information in this talk. I recommend reading the actual paper. (Available for free for a limited time) I really need to look at these ebooks and see if they are something I can/want to try and create myself. Last of my morning papers was Who Belongs in Computer Science? This study looked at middle school students to see what their perception was of computer scientists and how that impacted their feeling of belonging. In brief, boys and girls had the same perceptions but girls didn’t see themselves in what they perceived as being a computer scientist. I took advantage of the “hallway track” to talk to Aman Yadav (author of the paper above) about the importance of CS teachers talking about race and computing. We need students to understand how bias works its way, usually unintentionally, into software. Both white and non-white students need to know about this. We clearly need a diversity of involvement in computing if we are going to have a chance as software that is fair to all. After lunch, a GitHub Supporter Session: Scale your classroom with GitHub Classroom and Codespaces. A tough decision as there was also a panel I was interested in attending. I was curious about GitHub though so … The features of GitHub classroom including connections to LMSs, automated assignment distributing, auto grading and more seem pretty exciting. I also like the idea that students will create GitHub repositories that can act as a portfolio. The demo was great. I have set up a GitHub Classroom but I need to play around and try some things before I feel like I can use it. I think I need to create a “student account” as well. We’ll see how much time I can put to it. Next up was a Microsoft Supporter Session: Core developer tools for your computer science classroom because I wanted to see what Microsoft was promoting for educators to use for teaching CS. That was once my job. They started with talking about VS Code and VS Code Coding packs are a tool to make it easy for students to set up a development environment. They are available to set up VS Code for Java, Python, and .NET. The packs for .NET and Java are available for both Windows and MacOS. Next up was Development Containers and VSCode.dev which is a web past development environment so no installation is needed. This combination makes it easy to ensure that all students have the same development environment. This looks pretty cool for bring your own devices schools. There was a lot presented in a short period of time. I need to dig into some of these things on my own. Over all a great day for me. I have some things to look through tonight."
"211","2022-03-05","2023-03-24","https://blog.acthompson.net/2022/03/sigcse-2022-day-3.html","Saturday at SIGCSE was a short day but there was still plenty to learn. Shaundra Daily. Her talk, based on her own history, was about how their are barriers making it hard for women, especially women of color and women who are also mothers, and who generally don’t fit a specific mold. This fit in with other conversations I had this conference about getting students to start CS at the university level don’t have the support they need once they get there. Filling the pipeline is not enough if the exit is blocked. After the keynote I grabbed a quick bite to eat and ran into Mike Zamansky. Mike has a great blog post about the things he plans to write longer posts about. SIGCSE2022 - Things I plan to blog about We spent a lot of time discussing those topics. We agree on much and disagree (in a friendly way) on some. Look for future posts from both of us on these topics. Mike Zamansky blog My first paper session was CSF2: Formative Feedback in Autograding. I'm of mixed feelings about autograders but more on that another time. This particular tool moves away from the binary pass/fail of autograders to provide feedback and hints. The tool also helps educators see where students are getting stuck. I want to look into this one some more.BTW, hinting is hard. After the morning break, Nifty Assignments. I just could not resist as I love new assignments. This year’s assignments as well as previous year’s assignments are available at Nifty Assignments (stanford.edu) So I’m taking the easy way out and not saying much more about them. For lunch time, SIGCSE set up a K-12 meetup lunch time in a conference room. I really enjoyed chatting with other K-12 people. Next year I hope they can come up with a way for us to connect earlier though. The k-12 ribbons were nice but ribbons get visually lost at times."
"212","2021-08-23","2023-03-24","https://blog.acthompson.net/2021/08/hexapawnan-interesting-programming.html","I'm cleaning up and finding interesting things. Well, actually, interesting books. One find is called ""A Collection of Programming Problems and Techniques."" Copyright 1972 So obviously, continued cleaning up is on pause while I code up solutions to some of the problems. One of the problems in the book is Hexapawn (Hexapawn on Wikipedia) I remember this being a sort of challenge program when I was an undergraduate student. I didn’t take it on back then and forgot about it until running into it the other day. I decided to take this on. I think it will be a good project for students. As did my old professor. Hexapawn is played on a grid, often a 3 by 3 grid, with “pawns” on the top and bottom rows. Pawns, as in Chess, can move one square forward or diagonally right or diagonally left to capture pieces belonging to the other player. A player wins by advancing their pawn to the opposite side of the grid or by preventing the other team from making a legal move. It’s a simple game to play but takes some work to program. One of the issues is that there are some tricky edge cases to be aware of. While pawns in the center column need to check for three possible moves, pawns in the left and right columns only have two possible moves. That can be a lot of special casing. It gets even worse if one uses larger boards. Trying to check for a move to the left for the left most pawn will create an error in many cases. Years ago I ran into a boundary condition like this and a member of my team made a suggestion that I have used many times since. She suggested boxes outside the visible grid that, along with not showing, were marked as illegal moves. This means that one can check for straight, left, and right moves for all pawns without getting a subscript out of range error. An other project I have used this technique is with the lights out game. In that game there are four squares that have to be checked in interior squares, three for edge squares, and only two for corner squares. Using an outline of invisible squares outside the main set of squares allows the same code to be used for all squares. I wrote a bit about the Lights Out project some years ago at The Complex Question of Complexity in Programming by the way. I’m not quite done with my Hexapawn project but I am really understanding how it makes for a good programming project. One can set student requirements low or high. One can assign a two player game or ask students to write an artificial intelligence to play against a computer. It’s a game that lends itself to creating a heuristic program (think machine learning) for more advanced students. Low floor, high ceiling."
"213","2017-01-30","2023-03-24","https://blog.acthompson.net/2017/01/the-complex-question-of-complexity-in.html","I spent most of last week grading semester projects written by my students. Reading through the code of beginners is really interesting. It’s interesting in part because of the solutions they come up with. You see in my first course we really only have a few weeks to cover programming. It is part of a full semester course and we do a lot of other things. So the tools that students have are quite limited. We don’t get to arrays for example. And the event handlers we deal with are pretty basic as are the objects they learn about. One of the programs my beginners often select to program is the game “lights out.” This is how we describe it for students. When a student asks “is this hard?” I am tempted to answer “for you or for me?” Lights Out – The game starts with 25 red buttons arranged in 5x5 grid. Each button pressed toggles itself and the four buttons around it (above, below, to the right, and to the left) between green and red. The object of the game is to get all 25 buttons green. A typical board would look something like the image to the right. Most students wind up writing one event handler for each square on the board. Each event handler has between three (corners) and five if statements to determine color changes. I typically see something like a 14 page print out. Creating this is at once simple and complicated. Simple because all of the language tools are very basic. Complicated because tracking all the squares that need to be checked is tedious and error prone. My solution involves invisible boarder boxes and a single event handler that handles all cases simply and easily. Keeping track of what boxes to check is trivial. The print out is about 2 pages long and includes more features than the typical student project. This is also in some ways both simple and complicated. Simple for me because I have done this sort of thing many times before. Complicated because of the use of a two dimensional array (which my students haven't learned yet) and because some students have trouble grasping why the invisible boarder makes the code easier and not harder. Complexity seems to depend on a number of things. One is of course the “tools in the toolbox.” The more tools one has the more options one has. That’s pretty obvious. It seems like one of the biggest developments in programming in my time is the arrival of extensive libraries and functionality that is built into to programming languages. Anyone ever have to write code to subtract, multiply or divide? I remember doing that for a PDP-8 program I wrote in college. Everything was built on adding. I’m really class I don’t have to do that anymore. Of course there is a lot more to learn as well. The other thing is experience. The more code one has written and read (especially read) the more design options on knows and understands. After a while one naturally sees patterns that are not always obvious to beginners. Teaching the basic syntax still seems like the easy part of learning to program. Understanding how those building blocks can be assembled is the hard part. There is still a lot of “reinventing the wheel” on the part of students as they “solve” well understood problems. That is part of the learning experience in many disciplines but I often wish we could move that part along faster. And less painfully."
"214","2017-02-03","2023-03-24","https://blog.acthompson.net/2017/02/review-revised-k-12-computer-science-cs.html","The Computer Science Teachers Association (CSTA) revised K-12 Computer Science (CS) Standards is now available for review. This is not to be confused with the CS Education Framework (on which these standards build). The committee is now looking for interested people to review them. Below is more information with direct links to sections of the standards by grade level so that people can focus in on their particular areas of specialty. Please help make these the best they can be! The public review period for the revised K-12 Computer Science (CS) Standards is now open! In revising the K-12 CS Standards toward a more final form, the taskforce took specific steps to closely align its work with that of the K-12 CS Framework. This alignment will strengthen the value of both resources as tools to communicate the CS concepts and practices critical to student educational experiences today. The Computer Science Teachers Association invites teachers, curriculum supervisors, administrators, business leaders, the broad education and business communities to review the standards and offer feedback. Below are the links which will lead you to the Standards specific to various grade levels. The public review process is now open and ends Wednesday, February 15 at 11:59 PM PST. Level 1A – Grade Levels K-2 https://docs.google.com/forms/d/e/1FAIpQLSdbNoh56gnfOk7AawCOYwrcKbuFrnZUrSD46N_mb_-xWA40bw/viewform Level 1B – Grade Levels 3-5 https://docs.google.com/forms/d/e/1FAIpQLSeU9B4NjXpCMQ0pQeaIfCX8O57LeATZAJGiEaEVTj-w44ZEOw/viewform Level 2 – Grade Levels 6-8 https://docs.google.com/forms/d/e/1FAIpQLSdJVxgcjpWd286WXg-Y5-2MDXRKXpHj2FGvaijGpnZyBq7CEA/viewform Level 3A – Grade Levels 9-10 https://docs.google.com/forms/d/e/1FAIpQLScqBMLp3Vq-2iEp-GkNXvPa5l-zZ974B0eMmHfqgqX5G19BbQ/viewform Level 3B – Grade Level 11-12 https://docs.google.com/forms/d/e/1FAIpQLSc_GD6asyGBwV222i3eY6yEBbL6vbj86kBAfi95BnTOqR5djA/viewform All feedback is greatly appreciated! Thank you, CSTA Standards Revision Task Force"
"215","2017-02-10","2023-03-24","https://blog.acthompson.net/2017/02/software-developersquantity-vs-quality.html","Today is a snow day here in New Hampshire. My third one this week. So I have taken care of most of the errands I use snow days to take care of and have some time to think about things. One of them is developing quality developers. In part this is spurred today by an article in InforWorld. The sub headline is “A report from HackerRank finds that while the U.S. and India have lots of developers, Chinese and Russian programmers are the most talented” Really? I wonder. First off I wonder if this is really a valid way to make the determination. IT is based on people basically playing puzzle games online. Who makes time for that? Obviously some smart people who have time on their hands. And maybe some sort of need to prove themselves or gain attention. Is that situation more or less common in different parts of the world? I don’t really know for sure. I’ve written about the US student attitude towards programming contests before of course - What Is It With US Students and Programming Contests? I know no more about the cultural effects now than I did then. I wish someone would study it though. One big thing to think about it that programming challenges are by their nature artificial. They don’t take 5 people a year to “solve.” Real world developers don’t work alone and they don’t work on projects that can be done in a few hours or even days. So does these contests rate developers or some form of good on test people? But suppose the US doesn’t have the most talented software developers? If that is the case how do we fix it? Perhaps the way to start is to look at how the “really talented” developers in Russia and China are developed. Are they getting it in school or on their own? I wish I knew. I suspect that some of it may be how education is focused. In the US computer science departments are interested (largely) in creating computer scientists. That is a very different mind set than creating software developers. Software engineering degrees appear (and I should look at them deeper) to be focused on the development process. Yes there is always work on algorithms and problem solving but projects tend to be smaller. Frequently getting involved in a large multi-year multi-developer project is something graduate students work on. Developing developer tools like Scratch, Snap!, BlueJ and many more like that. Some awesome projects which I don’t see coming out of Russia or China by the way. More like the US, UK and others in western Europe. Are boot camps the answer? I don’t think so. I think we need more than that. Those programs are too short and too focused on mechanics like syntax and libraries and the like. I think we can do better in regular schools and universities but we need to time to do it. A couple of one semester courses in high school and a year long AP course are not enough for sure. At the university level we need even more change though. That’s what I am thinking about today. Anyone have any suggestions?"
"216","2017-02-17","2023-03-24","https://blog.acthompson.net/2017/02/youre-teaching-wrong-programming.html","No, really you are. If someone hasn’t told you this yet it’s probably because too few people know what programming language you are teaching. Of course someone probably thinks you are teaching the right language. After all you’re a smart person and you chose it. Asking what programming language should be taught first is probably the best way to start an argument a discussion among computer science educators. Should it be a block programming language? Of course it should because the cognitive load of traditional programming languages is too great. Of course not because those languages are too limited. Should it be Visual Basic? Of course because it is friendly and easy to create nice GUI applications. Of course not because BASIC == BAD. How about C++? Great as it lets you get right to basics. Of course not – have you seen the pointer errors? Scheme/Racket Of course because functional languages are more in tune with how we teach mathematics. Of course not because they are impractical and not real world. Java? No, too much cognitive load. Of course, great preparation for AP CS. Assembly language? If I had a dime for every time I read that suggestion on a site like reddit or slash dot or the like I could buy a pretty good meal. But talk about cognitive load! Need I go on? Probably not. You get the idea. There are good reasons to use and good reasons not to use most programming languages. Mike Zamansky took both sides on several languages recently. Starting with scheme and Selecting a starting language - why not Javascript Yesterday in conversation I heard some good arguments for Python which seems to be gathering steam in a lot of schools. Aman Yadav, and Steve Cooper talk about block programming languages in a recent CACM article. Fostering Creativity though Computing Everyone is an expert. What’s a teacher to do? I’m pretty convinced that a good teacher can do a good job teaching students using almost any programming language if they know it well and teach it well. I worry about less experienced teachers though. Frankly I am not sure even the best programming language, assuming one believes such exists, will work as well with an inexperienced teacher as a difficult language will work with an experienced teacher. My big worry is not so much about the right language or the right curriculum or the right text book as it is good preparation for the teacher. We’re really rushing a lot of people into teaching CS who don’t have a deep understanding of computer science and software development. How much can they really learn in a 5 day or even several week long professional development session? I’ve been working with some people to come up with licensing requirements for CS teachers in my home state. I like what we are coming up with but I really wonder how we’re going find or how we’re going to develop teachers who meet all of the expectations we are setting."
"217","2017-03-06","2023-03-24","https://blog.acthompson.net/2017/03/bit-rot-or-how-do-i-read-this-data.html","Last night I had a very weird dream. In it I was trying to recover the programs I wrote in college. I have saved most of them. Well in a manner of speaking. Some of them are on punch cards. Yes, I have 40+ year old punch cards in the attic. I can read them as they have the letters typed along the top. And I could probably figure out the hole punches if it came to that. On the other hand, more of my programs were saved on a DECtape. That was the subject of my dream FWIW. What? You don’t know about DECtape? It was a proprietary magnetic tape for storing data. A powerful and reliable tool in its day. These days machines that can read one exist for the most part in museums and the occasional Canadian Nuclear power plant. Since I have access to neither getting the data off of my old tape seems unlikely. This is a problem most of us do not pay much attention to. We think short term as in now or a few years. And yet time after time we have seen storage types become obsolete leaving access to the information stored on them inaccessible. Even when devices are still available often the media deteriorates. I’ve read a lot about Disc Rot as older CDs and other optical media are starting to stored deteriorate. This is not a new problem. There are many ancient documents (word used loosely) that are difficult if not impossible to read because the language has been lost. We don’t know how many things were done in ancient times because the information was lost. Just look at all the theories and questions about how the Egyptian pyramids would built for example. Some people do worry about this. I have heard that Apple, for example, has a vault with older computer hardware stored in case it is some day needed. And smart CIOs have plans to move data to newer data storage devices as they become commonly used. I suspect though that most regular people don’t give it a second thought. We just assume that all our data will always be there. If we’re careful maybe it will be. I typically move all the data from an old machine to a new one when I get one. Or I store the important stuff in “the cloud” assuming that someone else is keeping it safe and current. Over the years I have moved data from tapes to disks to CDs to USB drives to the cloud. Have I kept it all? Probably not. Without a good plan losing things is inevitable. Somehow I lost those student written programs of the 1970s. But I like to think I have kept the most important things. I’m thinking though that I need to talk about this with my students. If I don’t make them think about it will they see the problem on their own? Will they see it in time to do things about it? Now if only I could get to that DECtape and see how bad the code I wrote as a student is."
"218","2017-03-07","2023-03-24","https://blog.acthompson.net/2017/03/infosys-foundation-usa-asks-why-do-you.html","Thanks to a Facebook link I found a video interview created by Infosys Foundation USA. on why he “makes.” This lead to one with Adam Savage of mythbuster fame on the same topic.Infosys Foundation USA. is asking other people to share why they make using the #WhyIMake hashtag. So I’ve giving it a go. I’ve always like making things. As a kid I made push carts and push cars using wheels of all sorts. Mostly stuff we found discarded along the streets. Later we found bamboo poles that carpet had been rolled around for delivery and made interesting things like pole vault pits. Amazing we didn’t kill ourselves. As I got older making became somewhat more practical. Installing shelving in closets, building decks and docks, and other things we used to just call do it yourself work around the house. I think of it as making though. It’s one thing to install pre-fabricated materials and something more (better? Maybe. Different? for sure) to take and repurpose things in ways they were not originally created to use. Much of the making I do though is around software. It’s a blast to make some new creative program to do something interesting. Sometimes even useful. I’ve made games to play, demos to show and teach concepts, and just to solve small specific and perhaps just personal problems. Sometimes there are existing tools to do the job. The other CS teacher at my school has written programs to randomly call on students for example. I wrote my own. Not because his was bad or inadequate but because I had my own vision that was slightly different. And because the exercise of creation was just plain fun. That gets to the heart of it. Making someone of my onw design is not always the easiest thing to do. And it is not always the most cost effective. Pretty often though it is the most fun. Making things is fun. And while making can be educational and sometimes it can save you time and money most of the time being fun is reason enough. .@NolanBushnell, @Atari founder & father of #videogame industry, tells his #WhyIMake story. Tell us why YOU make! http://bit.ly/whyimakenb Adam Savage talks about what Making means to him and what inspires his Maker journey https://www.youtube.com/watch?v=JEGQMHvjWnI"
"219","2017-03-10","2023-03-24","https://blog.acthompson.net/2017/03/whats-new-in-c-70-for-beginning.html","Well it looks like Visual Studio 2017 is out. I've installed the community edition on my Surface (not enough disk for everything I'd like :-( ) but enough to try some things out. I found this awesome blog post on what is new with C# 7. I wonder if there is one coming for Visual Basic? As usual, many, perhaps most, of the improvements are exciting to professional developers or more advanced students. I teach raw beginners and I don’t have near enough time to cover as much as I would like. But there are a couple of new things in C# 7 that I think I will use with my students. The improvements in out variables will be useful for example. I use TryParse with my students a lot and being able to declare the variable inside the TryParse will save a step and prevent some errors. Maybe create others but that is ok. C# 7.0 allows _ to occur as a digit separator inside number literals now. This is cool. Especially with binary literals. This may let me do some additional cool stuff with Binary flag bits and maybe make parsing some numbers easier or more interesting. Well that is a first look from me. I’m still playing with things and hope to have some insights into what is new with Visual Basic and Visual Studio the IDE soon. IN the mean time, what is everyone else finding interesting?"
"220","2017-03-12","2023-03-24","https://blog.acthompson.net/2017/03/conferences-for-k-12-computer-science.html","If you are a K-12 teacher looking for conferences about using technology in education there are many conferences one can go to. If you are a post secondary school computer science educator there are a good number of conferences you can go to. If you are a K-12 computer science teacher you have fewer options. Sure you can go to the higher ed conferences and look for things applicable. And you can go to tech education conferences and hope for some good CS education content. But if you really want conferences with a lot of value for you in particular there are fewer options. I’m going to go over a few I like. The CSTA Annual Conference is of course your number one event. Workshops, concurrent sessions, networking with CS educators from all over – this conference has it all for K-12 CS educators. It’s my all time favorite. And it is growing in sessions and attendees every year. And it is during the summer so you don’t have to miss school to attend. You should be there. SIGCSE is my number two choice. Sure it looks like it is for higher education people but there is also a lot for K-12 people. The sessions on how to teach work for all levels. The chance to talk to great educators is a big plus as well. Friday has a lot of special sessions and events for K12 people My big problem is that it is during the school year. With snow days like we have here in New Hampshire I feel bad about skipping school to go. ISTE I really like ISTE. While it is really about using technology in education I have been seeing more and more computer science content in recent years. Plus it attracts a lot of people who see themselves as teachers of some other subject first and computer science second. So you get to meet some people who teach CS but who don’t go to CSTA or SIGCSE. A bunch of big computer companies exhibit here so I spend some time visiting with them. I get to ask some good questions and learn stuff which makes it worth while. TCEA is also a big conference about using tech in education but Texas has a lot of computer science education and that makes TCEA stand out for me. Like ISTE, TCEA has a lot of teachers who are not full time CS teachers. There are also more CS sessions than a lot of other ed tech conferences and with its size there are a lot of networking opportunities. A year ago I would not have brought up SxSWEdu (South by Southwest EDU) SxSWEdu has a reputation of being for and about tech companies and startups trying to sell tech to teachers. This year that was a lot of computer science education content. It may be too early to see if this continues but I hope it does. Other than SXSWEdu I’m been to all of these multiple times. I’ve learned a lot from these conferences over the years. I’d love to hear other people’s opinions both about these conferences and others I might have missed. Where do you go for K-12 CS learning?"
"221","2017-03-13","2023-03-24","https://blog.acthompson.net/2017/03/march-madness-and-programming-projects.html","Yesterday was selection Sunday and the NCAA announced the teams entering the 2017 basketball championships. So of course I thought about programming projects. I mean there is data and something a lot of my students are interested in so it is a natural. Now there are already all sorts of automated bracket generating tools on the Internet. LOTS of them. But being me I needed my own. The first thing I did was build a data file. (NCAA 2017 seeding information) That link gets the comma separated data file. It looks in part like this: It’s pretty basic with the seeding number, the university name and for most of them their record. Once I had that I could write a program to read in the data and display it. My next step was to write code to semi randomly (its weighted by seeding) pick which team went to each next step of the competition. I get graphic so I generated the following: I’m thinking I could let students do something more simple in output. I did this with parallel arrays but I can see creating a class making some things easier. In any case I get to p[lay with reading and parsing data, building and processing arrays, and other data manipulation. There are many variations I could do here. Students could create their own schemes for generating brackets. Or they could write code that lets the user select which teams would advance. I’m open to other suggestions as well. What sort of project would you assign with this data?"
"222","2017-03-17","2023-03-24","https://blog.acthompson.net/2017/03/hip-hip-array.html","My programming courses are a semester long. That’s it. After that someone else gets to teach them more programming and computer science. A semester is not a lot of time so we can only cover so much material. There are days when I really envy my friends who have students for years as in 2, 3, or even 4 year long courses. On the other hand I am finding that I am appreciating the basics more and more all the time. Take arrays for example. I’ve been around long enough and coded enough that I understand arrays pretty well. I’ve done the who pointer arithmetic thing in C. And the use of offsets in assembly language programming. So I understand what is behind arrays in ways I don’t have near enough time to explain to my students. I think this understanding gives me a greater appreciation for this tool in my toolbox. I literally spent an hour or so last night just contemplating the beauty and power of a simple array. Add to that the power of arrays of objects and mind blown. OK maybe I get excited easily. On the other hand in many ways writing code seems as new and cool to me as it did when I tool my first programming course over 40 years ago. If anything I am developing new appreciation for the simple less complicated elements of programming languages. One doesn’t need all the latest and greatest bells and whistles of languages and libraries to have fun writing code. Though that doesn’t mean I am giving up features like Array.Sort. I’m not totally crazy."
"223","2017-03-21","2023-03-24","https://blog.acthompson.net/2017/03/datasets-for-use-in-teaching-computer.html","I found this thanks to the APCS A mailing list. CORGIS Datasets Project The Collection of Really Great, Interesting, Situated Datasets “The CORGIS Datasets Project seeks to make highly-motivating introductory computing experiences through simple, easy-to-pick-up datasets for beginners. We offer a wide range of libraries for many different programming languages and contexts. “ I haven’t looked at the libraries yet as they are for languages (Java, Python, and Racket) that I am not currently using but I would be if I were using them. There are also raw data sets in sql, JSON, and CSV formats. I use CSV files a lot and was very please with the look of the 43 data sets in that format. I can see some interesting projects ahead for my programming classes, data analysis in Advanced Placement Computer Science Principles, and even my freshmen course where we use EXCEL. If you are interested in good data for real learning I recommend you take a look at https://think.cs.vt.edu/corgis/"
"224","2017-03-23","2023-03-24","https://blog.acthompson.net/2017/03/acm-and-csta-announce-cutler-bell-prize.html","Make no mistake I think the Cutler-Bell Prize is an outstanding award. I love that it recognizes early computer scientists (high school students!) for outstanding achievement. This year's winners appear (based on the names) to be computational focused magnet schools. On one hand that such schools exist is great and even exciting. On the other hand I worry about the kids who have great interest in computer science but who don't get the opportunity to spend several high school years learning the cool stuff and working on great projects. Will the publicity for this award motivate more school districts to set up more similar magnet programs? Or perhaps at least look at expanding the CS offerings they offer? I hope so. In the mean time I congratulate these students. It looks like they have done some serious work and I wish them great success in the future. ACM and the Computer Science Teachers Association (CSTA) have announced the 2016-2017 winners of the Cutler-Bell Prize in High School Computing. Three high school students were selected from among a pool of graduating high school seniors throughout the US. Eligible students applied for the award by submitting a project/artifact that engages modern technology and computer science. A panel of judges selected the recipients based on the ingenuity, complexity, relevancy and originality of their projects. The Cutler-Bell Prize promotes the field of computer science and empowers students to pursue computing challenges beyond the traditional classroom environment. In 2015, David Cutler and Gordon Bell established the award. Cutler is a software engineer, designer, and developer of several operating systems at Digital Equipment Corporation. Bell, an electrical engineer, is researcher emeritus at Microsoft Research. The winners are Elizabeth Hu, Thomas Jefferson High School for Science and Technology (Virginia); Avi Swartz, Cherry Creek High School for Computational Biology (Colorado); and Aaron Walter, Yorkville High School for Computer Science (Illinois). Their submissions ranged from using data to study refugee migration models; determining type and quantity of protein components in biological samples; and a software program that evaluates students’ understanding of curriculum components. Each Cutler-Bell Prize winner receives a $10,000 cash prize. This year’s recipients will be formally recognized at the Computer Science Teachers Association’s annual conference, July 8-11."
"225","2017-03-25","2023-03-24","https://blog.acthompson.net/2017/03/cspdweek-free-professional-development.html","The people I talk to who went to last year;s event rave about it. If you are looking for some good professional development this is well worth looking into. Thanks to funding from Infosys Foundation, NSF, NCWIT, and CSTA, CSPdWeek is *on* again for next year: July 17-21st, 2017 . CSPdWeek is a distinctive cross-curricular event that offers high-quality professional development for teachers planning to teach any of the following: AP CS Principles AP CS A (Java) Exploring Computer Science Bootstrap Each of these week-long workshops will be led by leaders in the field. In addition, counselors are invited to attend half the week (2.5 days) for professional development. Please share this email with anyone planning to teach computer science in K-12 during the 2017-18 academic year, as well as counselors at high schools. Extended details on each of the CSPdWeek tracks are below. Information and application materials are available at: http://www.cspdweek.org. Colorado School of Mines is excited to host this exceptional event."
"226","2017-03-28","2023-03-24","https://blog.acthompson.net/2017/03/computer-science-teachers-association-t.html","Are you a computer science education super hero? You know you are so now you need the t-shirt. Get yours here and also support the computer science teachers association. Just the thing to wear to the CSTA conference or really any education event. I would love to see lots of them at ISTE to let people know that CS educators are there"
"227","2017-03-28","2023-03-24","https://blog.acthompson.net/2017/03/math-vs-programming.html","Take a look at these two equations. I found the first one on Facebook. The second is my first attempt at rewriting it for the computer. What is the answer? Well the first answer is 1. The second answer is 9. How is that possible? If you think about it there is a sort of implied parenthesis around 1/3. It’s pretty clear in the more traditional mathematical expression that one is to divide by one third and not 1 divided by three. A more accurate expression for the computer would have some parenthesis to make things obvious. That would give one the answer 1 that the traditional expression provides. We see this sort of thing a lot – students assuming that equations in programming are exactly the same as the mathematical expressions their are used to using. The most common issue is students thinking that the = sign allows copies from left to right as well as right to left. After all in mathematics the = sign means that both sides of the equation have the same value. That is not the same think as the = sign meaning copy the value on the right into the location on the left. Some functional languages do things differently. The WeScheme IDE and DrRacket used by Bootstrap for example. That curriculum takes a much more algebra focused look at computer science. Or is that a more computer science focus approach to algebra? Either way it seems to be very effective. (Note that Bootstrap training is available though CSPdWeek and other venues.) Those of us using other platforms though have a lot to contend with as we teach students how to build expressions that mean what students think they mean. Is it worth the effort? I tend to think so. But it is confusing at times. Days like to today make me rethink things."
"228","2017-04-12","2023-03-24","https://blog.acthompson.net/2017/04/code-slow-finish-fast.html","Looking through student code today brought this quote to mind.“I didn't have time to write a short letter, so I wrote a long one instead.” Mark Twain Students are always in a hurry to write the code for programming projects. No matter how strongly I suggest they think about the problem and design their code most of them start coding right away. This often results is a lot of code where a small amount of code will work just as well if not better. Often the techniques for less code require a bit more thought. Setting up a long set of if statements with a bunch of different variable names is tedious but doesn’t always require as much planning as setting up an array and loop solution does. Students are in a hurry so they take what they think are shortcuts. Experience tells of course. My version of Whack A Mole (our current programming project) can be changed from 5 possible “moles” to 6 by changing one 5 to a 6. Some of my students would have to write, well let’s just say I don’t want to do the math. We’ll go over the options during our next class. The theme will be to think more before starting to code though."
"229","2017-04-26","2023-03-24","https://blog.acthompson.net/2017/04/surface-booka-first-look.html","I’ve had two Surface Pros. A Surface Pro 3 and a Surface Pro 4. I love them. Make no mistake these have been idea travel computers for me. And powerful enough for just about everything I could want. They are also great for teaching as I can carry them around the room, use the tablet, and project wirelessly to my LCD projector. But I have had my eyes on the Surface Book for a while. And now, thanks to the MIE Expert program and the Surface Experts program (https://education.microsoft.com/microsoft-innovative-educator-programs/mie-expert) I just received a new Surface Book. As someone who teaching computer science this means three things for me. 1) More disk space - more VS is being installed now 2) more memory (8gb) so emulators should run better for mobile development 3) a faster CPU. Actually the more memory means the most to me. More disk is a close second. Modern CPUs are fast enough for just about everything I do. Also the screen on the Surface Book is larger which is also a nice thing. As I said though memory and disk are big plusses for me. I’m not your average classroom teacher. I like to install lots of software (I’ve had as many as three versions of Visual Studio installed at once in the past) and I always want to try more things. The disk space on the Surface Pro limited me a bit. The Surface Book has twice as much disk so I have installed a bunch of Visual Studio things to play with. I may not need it all for teaching but I do for learning. Memory is the next big item. My Surface Pros have 4gb of RAM. I can run mobile emulators but barely and I have to be very careful about what else is running. With the Surface Book and its 8gb that problem goes away. With my computer lab being updated to 8gb systems over the summer I now have a lot more options to my Mobile Development course next year. To say nothing of my own “needs” for mobile development. The look of the Surface Book is nice as well. I’m not big on esthetics of computers but having a nice clean design is nice. I understand the keyboard (a very nice friendly keyboard BTW) comes off but I don’t need that very often. And I still have my Surface Pro 4 if I do. All in all I am very happy with it so far. It’s everything the Surface Pro is but more. Just what a computer science teacher who can’t stop trying new things needs."
"230","2017-04-27","2023-03-24","https://blog.acthompson.net/2017/04/how-important-is-first-programming_27.html","We really need people who have never faced a room full of students in their lives to teach us how to teach computer science. Said no CS teacher ever. What brought that on you may well ask. Long story. First Mark Guzdial posts about changes at Stanford (Stanford CS department updates introductory courses: Java is Gone) highlighting an experimental version of their first programming course to use JavaScript. Then it hits Reddit (Stanford is moving from using Java to JavaScript for their introductory CS course) where hundreds of comments follow. Yes, hundreds. Most appear to be from people who have never taught a class themselves but have strong opinions of what a first language should be. And the occasional journalist kicks in with something like Universities finally realize that Java is a bad introductory programming language How ever would we poor ignorant teachers get along without these experts? Fortunately for my sanity Mike Zamansky who actually is a teacher jumps in with some useful thought. A new first language? What's the follow up plan? I believe that a first programming course is very important. The language used, while important, is not the biggest consideration. Rather is is the concepts covered (see Mike’s post) and how well the instructor does in preparing students for what comes next. The new course at Stanford is going to be taught by Eric Roberts who is one of the al time outstanding CS educators. I’d sign up for that course because of the instructor even if it was in COBOL. Teacher is important. Curriculum is important. Projects and assignments that help learning are important. Language some where down the line. I figure I’ve learned a new programming language about once every three years for the last 45. While I joke that I can still write a good FORTRAN program in any language the truth of the matter is that learning new languages changes how I code and how I think about problems. The first language got me hooked. But that was not the end all and be all. The first course is just the first course. There is a lot more to come and it would be a mistake to try to cram a four year undergraduate curriculum into a one semester (or even full year) high school course. And yet that is what some ""experts"" seem to be trying to do."
"231","2017-05-01","2023-03-24","https://blog.acthompson.net/2017/05/punch-cards-comments-and-learning-from.html","Doug Peterson, whose blog always makes me think, had a post last week about internal documentation. Specifically things like comments which a lot of the popular block languages don’t really do that well. Of course this made me think about my code and what I teach. The image to the right is some code I wrote in university. Yes, I have a 45 year old deck of punch cards and yes, that is a FORTRAN program. I ran into it while cleaning up this past weekend. Doug’s post had me looking at the code. And the comments. The comments are great. They really let me know what is going on. That’s good because my variable names are horrible. What ever was I thinking? I’d do things a lot differently today. And in fact I do do things differently today. I have written programs like this one several times and in several different languages over the years. The variable names are much better. We’ll talk about comments in a moment. The first time I dug out this deck of cards was some years ago when I tried to rewrite this program in Visual Basic. The comments, one in particular, was critical for me making things work. I use this as an example for my students of why they should comment their code in fact. My most recent iteration of this program has been in TouchDevelop. I’m pleased to say my variable naming is MUCH better now. My commenting? Not so good. Part of the problem is the nature of the language. Comments are supported but somehow I never seem to think of them the same way as I do in other languages. This seems typical of block or drag and drop programming languages. (Doug brings this up which made me really think about it.) Of course lack of commenting is not unique to drag and drop programming. Students have pointed out that some sample code I wrote and gave to them to learn from could use a lot more comments. BLUSH They are quite correct. I really need to fix that. Perhaps I’ll take on as a summer task to well document the demo code I show students. I really should be modeling what I present. I do worry that we are losing the focus on internal documentation these days. There is this theory that well written code with well chosen variable names and identifiers should be understandable without comments. Like many theories that doesn’t seem to work as well in practice though. Well, I’m off to comment some code."
"232","2017-05-08","2023-03-24","https://blog.acthompson.net/2017/05/pseudo-random-numbers-are-confusing.html","Random numbers are really useful in computer science. We use them a lot for simulations (or games – pretty much the same thing) and to make programs more interesting. But they are not as simple as might appear. First off they are not really random and secondly there are often timing issues. And then there is the whole testing situation. Let’s start with the first of these. Those of us who understand random numbers in CS understand that it is impossible for computers to calculate truly random numbers. Cryptography which really relies on true randomness uses all sorts of tricks and tools to generate groups of random numbers. No serious cryptography person would use a standard library for use in cryptography. But for most things we do in high school computer science built in library random number tools are just fine. Where things have gotten complicated for my students lately is with timing issues. The libraries we are using use time from the computer’s clock as a seed value for the generator. If you instantiate two different random number objects at the same time, or rather within a single clock interval, you get two lists with the same values. Whoops! This is pretty much the opposite of what students really want. They’re generally better with one variable than with two but that is not obvious to many beginners. After all if one is good two is better right? And even if you have one variable if you instantiate it over and over again in a tight loop you can also get a lot of duplicates. Various languages have various ways around this (static variables for example) but hardly obvious to a student who just heard (or read) about generating random numbers. And then there is testing. Oh my. Seldom a student strong suit. After all if it compiles isn’t it right? The special problem with random numbers is how does one test if the data is different all the time? Visual Basic has a Randomize statement that makes things “more” random. If one doesn’t use it than the program will use the same random numbers every time. In other languages (libraries really) one can use a fixed seed value to get the same set of random values for each run. How ever one does it, it is useful to have a known set of data for testing purposes. Talking about this is an important part of the larger issues of understanding random numbers AND of testing program. One of my tasks for this summer is going to be trying to document this better for students. I realize that I need to cover this in more depth if students are going to really be able to use random numbers effectively. I can only talk so much in a single semester course. Perhaps if I provide supplementary reading for homework it will help. It’s a theory. Maybe I’ll bring random.org into the mix. Looks like some interesting tools there."
"233","2017-05-11","2023-03-24","https://blog.acthompson.net/2017/05/using-virtual-reality-for-teaching.html","Maybe you can help me? My gut tells me that virtual reality or even mixed reality can be useful for teaching computer science. How to do that is the question. I don’t want it to be just another device that students program. That’s not really innovative. I want to think of ways that help students learn computer science. I want them to “see” things that can not ordinarily be seen. My first thought was a virtual tour of a computer. While I do show students mother boards and other pieces of computers wouldn’t a “walk through” of a virtual computer be better? More interesting? On one hand a video, perhaps just an animation, can do that fairly well. On the other hand virtual reality is the opportunity to take different paths through the computer to trace things the way a student would like. A mixed reality tool would label items as a student looked at a physical device. Taking the tour would be more fun though. How about following instructions as data through the pipeline in a CPU? That could be fun and make things more real to students. In fact a general walk through a CPU could be good. The improvement over a simple video would be the ability to travel non linearly. IS that enough? I’d like to find out. How would virtually tracing the path of code in a program work? Could we set things up so a student could follow (visually) a variable through code to see what happens to it? Perhaps watching the variables as they appear (are instantiated) and disappear (as their scope expires)? The idea of being mixed in with the code ala TRON or The Matrix has a certain appeal to me. Do these ideas make sense to people? Would they help? Do you have other ideas? Is this even possible with current technology? Putting this together probably requires some talent, time, and even money. Who will do it first?"
"234","2017-05-24","2023-03-24","https://blog.acthompson.net/2017/05/interesting-links-24-may-2017.html","It’s been a while since I posted one of these collections. And I’ve been blogging a lot less lately. Call it a sort of blogging vacation. I just needed to prioritize other things for a while. We’ll see how things are going forward. In any case I felt like I had a lot of things I should share so here we go. I know a lot of people are using Python these days and with summer coming you may be looking at projects for next year as I am. So I thought I should share this Collection of free Python lessons (Shakespearean Insult Generator, Magic 8 ball, Sorting hat, Mad Libs, and more) I’ve used similar projects with students in other programming languages and they work well with students. Announcing Microsoft MakeCode for Circuit Playground Express – From Microsoft Education. The really cool thing about this online development tool is the variety of interesting and inexpensive hardware it can be used with. Combining programming with “making” opens some really interesting possibilities. Speaking of making – this look at what Doug Bergman is doing with his students is really impressive. A spirited teacher reshapes the computer science classroom for 21st-century makers He has a very interesting computer lab with movable tables, lots of interesting hardware (think several kinds of robots plus Kinects) and really lets students get creative. Researchers unveil new password meter - security is getting more and more attention lately so this information about good passwords may be a good discussion starter. The source code for this password meter (it’s in JavaScript) is available. The ACM Code of Ethics, Draft 2 is now available for comment. Deadline for Input Is June 5th, 2017. This update is designed to make sure that the code is current with the technology. I plan to have some discussions about ethics based around the final document with my AP CS Principles class. I will at least bring it up in the rest of my courses though. Ethics is VERY important and getting more important to teach all the time. From the UK there is a new edition of Hello World magazine out *now*. Download via Brought to you by Raspberry Pi, CAS and the BCS Academy. Lots of awesome in this edition. Things are really moving in CS education in the UK and the rest of us should take advantage of the resources. Check out the Computational Thinking Interview Series from CSTA “The CSTA's Professional Development Committee is gaining perspectives on computational thinking by meeting with leaders in the field. In this interview series, we are asking, ”What is computational thinking?”” Designing a Computer Science course with constraints by Mike @zamansky is a good look at how teachers often have to deal with constraints outside of their control when designing a course. Three Computer Games That Make Assembly Language Fun – They’re not free but they’re not all that expensive either. Some interesting possibilities for some classrooms I think. Acer Windows Mixed Reality Headset Developer Edition is one of two mixed reality headsets offered by the @MicrosoftStore Available in August when birthday comes. Seeing these inspired a blog post of mine. A post with some ideas and questions I am still looking for feedback on. Using Virtual Reality for Teaching Computer Science?"
"235","2017-05-30","2023-03-24","https://blog.acthompson.net/2017/05/cheating-in-computer-science-class.html","An article about cheating in CS classes from the New York Times (As Computer Coding Classes Swell, So Does Cheating) has been all over my social networking feed this last weekend. Harvard’s famous CS50 is the big name example in the article. I wonder if this points to a problem we may be crating inadvertently. Are we creating an environment where taking a CS course is seen as the end product rather than actually learning computer science? Has taking a CS course become the cool thing to the point where students without real interest in the subject take the course (or courses) more as a resume builder than as a real attempt at learning something valuable for the sake of using it? The article points out that a CS class can involve a lot of work. This often leads to cheating in many subjects. After all the end goal of taking a class for many students is to get a good grade. Oh sure there are courses where a student may really be interested in the topic and wants to learn as much as possible. But there is only so much time in the day so if a few corners are cut for the sake of a good grade outside the student's real interests what’s the harm? (Or so the rationalization goes.) My experience is that other students get very upset when their peers take shortcuts. It’s unfair if someone gets grades they don’t deserve. It makes me wonder if grades hurt more than they help. The same motivation seems to lead to cheating as often as it does hard work. It’s actually somewhat more complicated in computer science though. There is a fine line between collaboration and helping ones peers and actually cheating. Where is the line to be drawn? Once in industry the motto I heard often was “steal from the best” and code reuse was touted as a very good thing. Of course one was always expected to really understand the code they reused. And one usually learned from it. A course is a shorter term thing though and one can sometimes borrow code without understanding it. What is the answer to cheating? For some it is better detection of cheating and swift, firm, and noticeable punishment. An other option is projects that are more tuned to student interests. It can help if the student becomes more interested in completing the project and learning what they need to know to do so. But it is hard to come up with projects that motivate every student. Especially in a huge auditorium course like CS 50. High school teachers may have it easier there. BY degree at least. Maybe part of the answer is less focus on grades. That’s hard though. High school students are told over and over again that good grades get them into a good university which will get them a good career. Not good learning – good grades. The words we use matter. Clearly I don’t have a final answer. No teacher does and we have been dealing with this issue probably as long as we have had grades that matter. For now I find that semester projects of a student’s choice work best. They don’t eliminate cheating. But I think they reduce it. And that at least is a step in the right direction. FWIW here is a contrasting view - https://thenextweb.com/dd/2017/05/30/lets-teach-computer-science-students-to-cheat/#.tnw_oaJUHJAM I reply to it at http://blog.acthompson.net/2017/05/news-flash-school-and-industry-are-not.html"
"236","2017-05-31","2023-03-24","https://blog.acthompson.net/2017/05/on-becoming-better-computer-science.html","Andy Ko, Associate Professor at the University of Washington iSchool and Chief Scientist & Co-Founder @answerdash has posted a blog and slide presentation from a talk he gave called How to be a great (CS) teacher. It’s the best thing I have read on the topic is quite a while. If ever. The article is very good but I recommend you read and save to re-read the slide presentation. I wouldn’t say that all or even most of the ideas in it are new to me but they are explained very clearly and backed up with references. That is especially cool in that we often adopt ideas without real research behind them. Research is good. Over the years I have learned a lot from great teachers. Many years ago Carnegie Mellon ran summer workshops for CS teachers where one of the goals was to help us learn how to teach to a more diverse (i.e.. female students and other non traditional) student body. The 6APT program was a game changer for me. When I was at Microsoft I was able to travel and visit a lot of teachers around the US. And attend a lot of great conferences (SIGCSE, CSTA, and more) Since I returned to the classroom I have tried to adapt many of the things I learned in those years to my teaching practice. This summer as I put my plans together for next year the ideas in Andy Ko’s work will be a regular reference as I look to how I can improve next year. Always be learning."
"237","2017-05-31","2023-03-24","https://blog.acthompson.net/2017/05/news-flash-school-and-industry-are-not.html","Computer Science cheating has been a discussion lately. Not just in the NY Times article I referenced the other day (Cheating In Computer Science Class) but on Facebook, on Twitter, and other social media. One sort of rebuttal to the concern over cheating was a blog post - Computer science students should learn to cheat, not be punished for it - that also got a lot of attention. I see industry people nodding their heads in agreement. The problem is that the rebuttal author doesn’t seem to really understand the issue. There are some common misconceptions that I think need clarification. Misconception: The goal of a school project is a working program. That is what the goal is in industry. Make it work to spec and make the user happy. That is not the goal, or at least not the main goal, in a school project. The goal in a school project is to demonstrate what a student knows. Not what their friend or their parent knows but what they know. It is a diagnostic tool for the teacher to see how much learning is taking place. An imperfect tool to be sure but all we have are imperfect tools. We also want them to practice and use what we are teaching. Cut and paste is usually a poor substituted for figuring out how to solve a problem and properly use the tools that are being taught. One learns more by doing than by simple copy operations. Misconception: Students who copy code have to understand it to use it. Oh if only that were true. Any teacher will tell you that students use code acquired from others without understanding it all the time. If a student finds a snippet of code, understands it, and uses it in a project most teachers would see that as a win. The student learned something. Wonderful! We’re happy. Using code without understanding it helps no one. But it is not just snippets that are involved in cheating. Nothing so remotely borderline as partial borrowed code. Sometimes a student will hand in a full and complete program that they found on the Internet. And they will do it without understanding a bit of it. Who does that help? No one. Remember that in school the goal is gaining knowledge not just handing in something that works. Misconception: Teaches don't want students searching the Internet for help The internet is a wonderful learning resource. I know teachers who explicitly recommend sites like Stack Overflow to students and encourage them to look there for help. Some of us actually recommend reading the documentation online and even using sample code. As long as the student understands what they are using. Teaching is not just about covering the limited material but helping students learn how to learn. We’re thrilled when students use outside resources to go beyond the scope of the class. But we do want students to understand what they are doing. Misconception: Programming for school and for industry should be the same No. In industry the goal is a working program and in school the goal is learning. Industry expects employees to know things. School assumes they don’t and strives to teach things. The goals are different so the methods must be different. I have heard the argument that schools should teach the things that industry needs using the tools that industry uses. It’s the old trade school mentality. And that works great for trade schools which serve a valuable purpose. Computer science education has to be more than just the tools of the hour. It has to be on concepts that last for a career. And that process is different from short term goals. Sure using industry tools can be a good thing. And using things like Git and other source code repository/source code control tools is a good thing. Guess what? Many schools do teach those things. In fact arguably more CS departments teach more of the professional skills, especially soft skills, than many outside of education realize. Misconception: Computer Science and Software Engineering are the same thing Computer Science is more theoretical and software engineering is arguably more practical. One should not criticize one for not being the other. At the high school level we are not trying to create professional software developers any more than we are trying to create professional physicists or biologists. Rather we are trying to give students a conceptual basis for understanding the world in which they live. Links to more reading below. Software Engineering / Computer Science Difference David Janzen at CalPoly Software Engineering vs. Computer Science at Software Engineer Insider I’ll conclude with one more point which I think may be the most important one. We need computer science professionals with integrity. We need professionals who are honest, who are ethical, and who are dependable. Educators care about cheating in its various forms because we value those traits as much as we value the technical knowledge students gain in our classrooms and labs. If a student cheats in school will they not also cheat the companies they later work for? I think so. And that should concern industry people. It should concern them a lot."
"238","2017-06-01","2023-03-24","https://blog.acthompson.net/2017/06/how-to-make-computers-work-for-people.html","Years ago I was giving a career talk in Roxbury (a heavily minority neighborhood in Boston) to a group of students. At the end a young African American woman asked me why I, a middle aged white male was interested in seeing more people like her in computer science. A fair question for sure. My reply was basically that I worked for a company, Microsoft, that wanted to have customers of all types. While I have a pretty good idea of what middle age white men want, young African American women probably have different wants and needs that I don’t know so well. So to serve the needs of diverse customers we really need diverse people in the field. While that is true now and was then I have sense learned that things are worse than I knew without diversity. Take this article - Algorithms aren’t racist. Your skin is just too dark. – for example. If I am living in an all white world I might never notice this sort of built in bias – intentional or otherwise. It reminds me of other stories I have heard during my career. A company I worked for created color CRTs where the default colors were red and blue. The developers had no idea how common red/blue color blindness is. And there is thee famous story of the developers who were so proud of the handwriting recognition of the Apple Newton. Until they gave it to Steve Jobs to try. It turns out they hadn’t tested it with left handed people – like Jobs – and it could not read his handwriting. There are more examples out there but you get the idea. A reason to increase diversity in computer science is so that computers work better for more people. It’s a diverse world out there and we can’t have computers that only work for white and Asian males. Especially not if they are all cookie cutter examples of a few narrow types. The best way to have a future that is built for you is to build it yourself. With computers becoming more and more central to daily life we need that diversity building out future."
"239","2017-06-01","2023-03-24","https://blog.acthompson.net/2017/06/need-funds-to-attend-csta-conference.html","OK this is an opportunity too good to pass up if you are a K12 computer science teacher. Seriously. If you are a K12 teacher, then Rolls Royce wants to help get you to the conference in STYLE! CSTA and our partner Rolls Royce are excited to announce a scholarship to help K-12 teachers attend the CSTA Conference in Baltimore, Maryland this July. Thanks to a generous contribution from Rolls Royce, over the week of June 5 - 9 we will give away a total of twenty-five (25) $1,000 travel scholarships for the CSTA Annual Conference. Each day we will release five (5) scholarships until they are gone. How do you get one of these scholarships? Here are the rules: You must be a K12 Teacher to be eligible. No exceptions. You may only receive one scholarship to attend the conference. Recipients of other CSTA conference scholarships are not eligible. Each day by 9:00 AM EST we will post a unique application link for that day via Facebook, Twitter, and other media. Applicants can submit one entry each day. All applications become the property of CSTA. Each day there will be a simple question or activity to complete. Each application will remain open for 24 hours. Recipients will be randomly selected from eligible entries and notified by email. Recipients will have 24 hours to confirm the scholarship or it will be released to another applicant. Have fun, and we look forward to seeing you in Baltimore for fun and learning at THE event for and by CS teachers & teachers that teach CS! The CSTA Annual Conference will be held in Baltimore, MD on July 8-11 and we have a great lineup of sessions, workshops, and exhibitors planned. Click here to find out more about the conference. Need more information? Register for the conference here. View the program here. Click here for information on the Cyber Showcase & Education Discovery Forum."
"240","2017-06-07","2023-03-24","https://blog.acthompson.net/2017/06/what-cs-should-student-know-before-high.html","Recently a middle school teacher asked what computer science knowledge would high school computer science teachers like their incoming students to know. The first answer was the obvious “send them with enthusiasm and we’ll work with what ever knowledge level they have.” Pretty unsatisfying. I know because university CS faculty tell me the same thing when I ask what they want. So I had to think about it a bit. So what would I really like? Well I’d like them to know the way around the operating system they use. Creating folders, moving files, renaming files, connecting a network printer, and connecting to wi-fi. That’s not computer science you say! Yes it is. It involves knowing something about how computers work and how to get around in the system. It will save me a bunch of time and the students some heartache. I’d also like them to have some experience trying things out. They should know were to look for different things in menus, in tools, and online. How about understanding how the Internet works? DNS, packets, IP addresses, and stuff like that. I don’t mind teaching that. It’s actually fun. But students could learn that earlier. . For programming things? I’d love to spend less time on variables, loops, and decision structures. Can they use them to solve simple problems? Do they understand the connections between a variable name and a location in memory, a variable type and how much memory is uses, and how values are identified? Can they understand how a loop works and how an if statement works? If so I saved about three weeks that I can use for more advanced things like arrays and objects and methods and scope and a whole lot more. Even if they know those concepts in something like Scratch or Alice I can jump right to syntax for text based languages. Honestly though few of my feeders are going to do all that. So I’ll still need my current freshmen course. But if a couple of kids can jump right into Honors Programming or AP CS Principles I could be very happy."
"241","2017-06-09","2023-03-24","https://blog.acthompson.net/2017/06/what-is-purpose-of-computer-science.html","One of my former students posed that question. He then asked if it were: Building computer scientists Building software engineers Building citizens Now context is important in this question. At the university level, many schools see the first item as their main priority. Some see the second a a priority but then they may also see software engineering and computer science as very different majors. Where does the third item – building citizens – fit? Recent events (think Volkswagen diesel issues and hacking and more) suggest that building good citizens should have some thing of a higher priority. At the high school level , where I teach, the questions are different still. We are not, for the most part, trying to turn out job ready CS students. Oh sure, many of my students have gotten summer internships and part time jobs based on what they have learned in my classes. But I’m not trying to make everyone a professional developer. Nor am I expecting the end result of my course to be a serious (for example published) computer scientist. No, high school is more about preparing students to take their place in the world as informed and (hopefully) ethical citizens. I teach in a Catholic school so we are allowed to emphasize values pretty strongly. In fat that is part of our mission. I see the purpose of teaching computer science in high school as about several things. Not about making professional developers but giving students the tools to understand computers.What can computers do? What can they not (yet?) do? And how do these things impact the world they live in? I see my role as building enthusiasm for the subject. (See What CS Should a Student Know Before High School) Not every student will major in CS in college nor should they all. But if I can encourage a few smart kids to do so that is great. At least I don’t want to kill enthusiasm that students might have. I really want to instill some ideas about ethical practice. High school should be something what about citizenship. That is where I want students to start thinking about the consequences of computer science and what it enables. They really have to understand CS to understand what is happening though. They need a vocabulary and some understanding of basic concepts. They need to be able to participate in conversations intelligently and with some knowledge. And they have to learn how to learn more. High school computer science is a beginning and not an end in itself. A high school diploma is not a terminal degree. If students are a little more prepared for a world where computers are important we have been successful."
"242","2017-06-14","2023-03-24","https://blog.acthompson.net/2017/06/how-to-teach-computer-science.html","I always read articles like this one - The 5 Worst Ways to Teach Computer Science – with some trepidation. I always expect to find out that I’m doing it all wrong. The other thing that always concerns me is that the author will be all wrong. Everyone who knows how to code thinks they are an expert in teaching computer science. Many of them are wrong. But this article is a good one. (In other words it mostly talks about doing things the way I already do them.) I think to most experienced CS teachers it is review. I think it is written for teachers who are new to teaching CS though and it fits that role well. I do think there is a place for individual projects though. Not every project needs to be or even should be a group or team project. So the second thing that article did was get me thinking about good practices. One of the worst ways to teach computer science that the article doesn’t talk about is Do Everything On The Computer. I am seeing that that can be a real problem. My teaching focus is always concepts first and while after 40 years of writing code a lot of things on the computer seem obvious to me. Not so the “digital natives” I am teaching. Many of them separate real life from what is going on in the computer. We think they see them as the same because of the social aspects of computer use we observe but I don’t think that is really the case. Young people see the communication aspect of using computers as somewhat parallel to their real life but that is much different from most computer science concepts. Take counters and accumulators for example. They don’t think in terms of those computer science type words even though they use both in their daily lives. It’s hard for them to make the connection using code. I have them count a hand full of coins. Then I have a student total the value of the coins. Now we can have a conversation about counters and accumulators in the context of a loop. Speaking of loops I have students walk as a loop. Walk seven steps or walk to this point – demonstrates counting and while/until loops. I’m struggling with how to have them act out recursion though. Ideas? More and more I am looking for kinesthetic learning that gets students physically involved in computer science concepts. There are some great ideas at CS Unplugged which I use with several classes. “Steal from the best” I always say. We use some exercises from there when we teach sorting, parity checking, and more. They work well and get students involved. Of course kinesthetic learning is far from just a computer science teaching thing. The growth of maker spaces is one newer aspect of it and “making” has some potential in computer science education. We can also connect computer science to other subjects which will help students learn both/multiple subjects. The important thing is that we don’t narrow our teaching to just lecture and things the students do on the computer. We have to be more interactive and include ways to get students doing things."
"243","2017-06-20","2023-03-24","https://blog.acthompson.net/2017/06/microbit-small-board-computer-launches.html","The Micro:bit (nee BBC Micro:bit) is now available in the US and Canada. This little device has been in classrooms in the United Kingdom for about a year and a half but is only now become commonly available in the US and Canada. Now at first glance this may not seem like a bit deal. It is a little device that must be connected to a larger computer to program. Seems like an extra step. But it is a big deal and it is more than just a little device. In a word, the thing that makes the Micro:bit interesting is “Making.” This little device is easily included in little projects that can really interest students. Just programming the device on its own might get boring quickly. It was for me. But including it in a maker space sort of project is a game changer. Now you’re asking for resources. The device is programmable in a number of languages and tools from Scratch to Python and JavaScript. There is a 14 week curriculum developed for students by Microsoft. Project Lead the Way also has a curriculum. Both are designed around making things that include the Micro:bit. The Micro:Bit web site has a bunch of project ideas if you are looking for what others are doing. This could be fun!"
"244","2017-06-20","2023-03-24","https://blog.acthompson.net/2017/06/movies-for-computer-science-students.html","Today was watch movie day. I watched two movies that I have been thinking about showing to my computer science students. The first one I watched was ""The Imitation Game"" about Alan Turing. Frankly I didn't like it. I like it even less for showing to my students. Why? Because I don't think students will identify with Turing. He is just to weird. Make no mistake I think Turing was an amazing individual and there are lessons in his story. But, well, it just didn't inspire me to want to do things. The second movie was ""Hidden Figures."" This one I loved. Even though few of my students are females of color these women are real and normal in ways that Turing wasn't. They had children, families, and were concerned about others. They had things to overcome and fought to overcome them. That is a message that resonates. I think my students will see people to aspire to be like in this movie. My experience is that students who see stories like ""Hidden Figures"" see the injustices against both women and minorities. They understand how wrong that treatment was and is. Sure there were horrible injustices against Turing and his death was a tragedy. But his personality, at least in the movie, is not one to make people feel as sympathetic as the women in ""Hidden Figures."" And the women won! And in their winning they opened the doors for many others. So what other movies should I think about showing my computer science students?”"
"245","2017-06-21","2023-03-24","https://blog.acthompson.net/2017/06/become-computer-science-teacher-in-five.html","Garth Flint is a computer science teacher in Montana. While most computer science teachers are a bit isolated, most are the only CS teacher in their school. Garth is more so because Montana is a big state with a small population and few computer science t3eachers. Recently he attended a workshop to teach CS teachers. He wrote a review of the experience - A week of in-service: Another Python course Some of the teachers had no previous computer science background let alone experience teaching computer science. They were mostly told to teach a course in the fall and figure it out. Only a couple of us had actually done any CS/programming teaching. It was a bit interesting talking to the teachers that had been give the directive to offer a programming course at their school. It was a “come up with something” type of directive I hear this a lot. You know a good teacher can teach any subject with a little prep time. Well no they cannot. Can you imagine asking an English teacher who spoke no French to teach a French course after a one week PD even at a local college? I don’t think so. Why is it less crazy to do the same for computer science? As Garth points out in his post, teaching (and learning) programming syntax is the easy part but there is a lot more to teaching computer science than programming language syntax. One doesn’t just learn syntax rules and some vocabulary and suddenly speak French. No, there is idiom involved in a new natural language and that is no less true of computer science. A week long course can give a CS teacher enough to get ready to teach a new programming language or a new curriculum. What it can’t do is really get you seriously into computational thinking or go deeply into the how to teach or why things are done they way they are. There is just no time. The best professional development for teachers new to the subject are more involved (and longer) than 5 days. They involve pre-workshop work, post workshop work and ideally the workshop[ is longer than a week. Even then things are going to be pretty tough that first year (or three). What worries me the most about assuming enough can be learned in a week is a) students will get turned off b) students will have to be retaught later (if we can get them in class again) and c) that teachers will get frustrated and quit before they get good at it. There are many who believe that it is easier to teach a teacher to teach CS than to teach a CS person how to teach. Please do not mistake me for one of those people."
"246","2017-06-22","2023-03-24","https://blog.acthompson.net/2017/06/student-programmer-fix-this-code.html","Recently I came across this cartoon and shared it on Facebook. Responses were interesting. The newer one was to programming the more likely people seemed to be to explain why the if statement wasn’t working correctly. The more experienced one was the more likely they were to point out that you probably shouldn’t have written that code (an option to kill humans) in the first place. There is some validity in both responses of course. In teaching we often create code that is less than ideal to force a particular observation of a concept if less code. How often do we explain that to students? And how well does it take? I’m not sure but it does concern me. Returning to asking students to debug code. I like the idea and it is something I want to do more of in the future. The problem comes when students don’t have enough experience yet to find the less obvious errors. On the other hand how will they get experience if we don’t let (make?) them practice debugging? Most debugging practice students get is on their own code. Often they are too close to it to see what is wrong. Last semester I gave students code written by other students and asked them to test it. Most of the code worked as advertised and what students reported out was missing functionality rather than “broken” code. Maybe I need to write some broken code of my own and have students look at it? How are you helping students learn to debug code? Any ideas to share please leave them in the comments. BTW there is some discussion if asking students to debug code is better than asking them to write code on the new CS Educators Stack Exchange. You may want to join in there as well."
"247","2017-06-26","2023-03-24","https://blog.acthompson.net/2017/06/iste-2017-first-look.html","If I am seeing a theme at ISTE 2017 so far it is making. Session after session demonstrates learning by making things. No where is this more true than with computer science. Micro:bit and AdaFruit Circuit Playground Express are being seen in booths at poster sessions and discussed in workshops. Those two seem to be the tip of the ice burg though. This morning I saw a programmable (in Scratch) device that can be inserted in a flying disk. The image on the left here shows a “guitar” made from duct tape, cardboard, and a Micro:Bit. The accelerometer in the Micro:Bit means that when the guitar is shaken it plays sounds. And then there are these “magic wands” that respond to both movement and sounds. There seems to be a virtually unlimited set of ideas for making smart devices that include the various miniature devices that are becoming available. Microsoft MakeCode is usable to program many of these devices. One of the cool things about MakeCode is that you can switch between a block like language and JavaScript. That means students don’t grow out of it very quickly – if at all. What does this mean for computer science? Several things I think. One is that it means we can bring programming to younger and younger students. Most of these devices can be programmed with drag and drop block languages using words that young students can understand. Add to that color and creativity and you have a recipe for keeping lots of students engaged. But it means something for older students as well. A key thing for getting students engaged is tying their learning into things they are interested id doing. For some that is robots. People who teach in all female environments tell me that women and girls are interested in robots. They just see different robots than boys usually do. And fashion? NCWIT has e-Textiles-in-a-Box that looks very exiting. Just like robots are not just for boys, e-textiles are not just for girls either. I’ve seen a number of posters involving wearable items that mix electronics and or computer devices with clothing loosely defined. ISTE is really just getting started today. I expect to see a lot more and will share some of the best of it."
"248","2017-06-26","2023-03-24","https://blog.acthompson.net/2017/06/coding-is-not-four-letter-word.html","I am at ISTE and have lost count of the times today someone said ""you can program this without knowing how to code."" Usually they mean this because they use a block based programming environment like Scratch or Blockly or Snap! Well to me that is still coding. Just because the language is not text based doesn't mean it's not real programming or real coding. I come back to the idea that coding and programming can usually be used interchangeably. If anything coding is a superset of programming. HTML is certainly coded instructions but probably not really programming. At least not all the time. Arguably using CSS is programming of a sort. Arguably. Personally programming or coding, how ever you want to call it, is what I am teaching. If it doesn't need coding than I'm probably not interested. Of course when I talk like that they tell me that I can also use JavaScript or Python or Java or any number of other more traditional programming languages. Most of these companies are, I feel, really trying to sell some hardware. They must think that coding or programming is scary. Or perhaps that it is too much for someone. For students? For teachers? I'm not sure who. It shouldn't be scary though. It should be empowering. There is a place for block programming tools for sure. But some of us want the power and flexibility to say nothing of the easier transference of skills to other domains that text based programming languages give us. So don't tell me your device can be controlled without programming or coding because you are using Blockly. That just doesn't compute. And real coding might just be what I am looking for."
"249","2017-06-27","2023-03-24","https://blog.acthompson.net/2017/06/after-istemore-questions-than-answers.html","One of the great things about ISTE is a chance to talk to people face to face. When that happens a lot of things come up. Yesterday and today, along with walking the exhibit hall and attending sessions, I had some good conversations with people. It all has me thinking a lot. I’m going to dump a few thoughts here and hopefully follow up on them in future posts. Feel free to jump on them now though. There are lots of things at ISTE for beginners. Not just for the younger grades but for teacher who haven’t taught computer science before. What is there for people who have been teaching CS for a long time and who have advanced students? Not really a lot. This has come up at the CSTA Conference a few times as well but today it struck me that we (the CS Ed community) need to fix that NOW! More on that in a future post. Here’s another question that comes up. How many times can you teach students how loops work? If we have CS in grades K through 12 what is the sequence? Sure the standards are starting to cover that and the K12 CS Framework has stuff for all grade bands but how does that translate into curriculum sequences? More on that coming to this blog. All these cool news toys for teaching? Do they work and if so how do we know? Anyone reading know of some research or are we all working on wishful thinking – again? I only have questions on that. I still want to try some of them though. Does that make me part of the problem or the solution? Time will tell I guess. What should be the role of industry in developing curriculum? I got pretty excited about some of the things I saw from industry – especially from Microsoft. But the question becomes are they just gimmicks or are they the basis for real improvement in learning? Some companies are developing things that are clearly their platform specific – Apple and Swift and other iOS specific tools. Some less obviously platform specific. But clearly industry benefits from more and better trained CS people. Take a look at How Silicon Valley Pushed Coding Into American Classrooms on the New York Times. If that doesn’t raise questions read it again. Personally I see a lot of good coming from industry and Code.Org. But I have concerns as well. The exhibit hall has a surprising (to me) number of Chinese companies seeing things like robots and 3D printers. Competition is good and I can see this possibly lowering prices. On the other hand most of these products come without curriculum and other things teachers need for support. Most, though not all, of the American companies understand this and make an effort to provide some teacher support. Some more than others of course. My concern though is bean counters who show based on price alone. Anyone know administrators like that? I’ve got one more day at ISTE and I am not yet done walking the exhibit hall or attending sessions. Already though I have a lot to think about. And to think I still have the CSTA Annual conference to attend. If you will be there come find me and help me think about all these questions. If not, drop some comments. Please."
"250","2017-06-28","2023-03-24","https://blog.acthompson.net/2017/06/how-many-times-can-you-teach-loops.html","Suppose you have students learning computer science from first grade to high school. How many times can you teach loops? Maybe you start with blocks using Scratch or Alice and they learn counter loops and perhaps loop forever. Do you teach with that language a couple of years? Maybe. Do you reteach loops for each of t hose years? Next you switch to a text based language. Now you teach for loops (by some name or other) using words. Maybe you add in while loops. Next year maybe you add in loop until. At some point you add in For Each.Have you taught each of those several years running? Are your students bored yet? We’re looking at K-12 Computer Science Standards and there is a great K-12 CS Framework. But what exactly do we teach each year? Now perhaps we don’t teach CS every year. Perhaps we decide on one semester in each grade band (defined differently for your situation) where we teach Computer Science. Great now we can do it all together and avoid some duplication. In the two years or what ever between CS course the students forget much of what was taught so we have to reteach stuff. What stuff? Who knows so reteach it all? Seems like a pretty serious problem. Fortunately for me I don’t have to solve it for grades K-8. Well not right now anyway. I do have to look at what students entering my high school know though. I teach at a private Catholic school that gets students from over 20 different middle schools in only a few fewer districts than that. These days I can pretty much run my first class is if they know nothing about computer science. That is not going to last for much longer as CS moves into the lower grades. But for the near future there is going to be a wider and wider range of previous experience. That complicates things a bit. A related post is What CS Should a Student Know Before High School I expect that many high schools will have to have different entry points to the high school computer science curriculum. Some students will want/need to start somewhere between nothing and just a little. Some will have more than a little and even a bit of programming. Still others will have a good bass in programming and will be ready fro one of the Advanced Placement courses. When students enter high school ready for Advanced Placement or the equivalent we’ll have to think about what to offer them to keep them interested and learning to a deeper level. Wow! Sounds like another blog post. How do you see the K-12 landscape? What progression would you like to see in your school district or area? How long is it going to take to get to CS at all levels and what sort of changes do you see that making?"
"251","2017-06-29","2023-03-24","https://blog.acthompson.net/2017/06/finished-advanced-placement-computer.html","This question is now more complicated since we have two AP CS exams again. Does CS A follow CS P? Should it be one or the other but not both? But let’s put that aside for the moment. Suppose a student takes one of the AP CS courses as a junior (or younger – it happens) where do you go from there? This may seem related to How Many Times Can You Teach Loops? but it’s not really. We’ll assume that these students have some solid understanding of computer science and programming. Not undergraduate major level but really solid for a high school student. What do you do with them if they want more? And many will want more! There are a number of options as I see it. One is that you could have a domain specific course. Perhaps network programming. Or web backend programming? Maybe something like a cryptography course? (OK that one I would like to take.) Or go a bit more Information Technology with a system management course. Perhaps network security? Actually you could probably look at the average college catalog and get even more suggestions. All of them are good and interesting. I’ve been thinking along a different line though. How about a major project course were each student or group of two to four students take on some major programming effort? I’m thinking they should have a customer. Perhaps an app for the school or for a local non profit. That’s the ideal perhaps. But maybe it would ok if they thought about some real tour de force that required them to learn a lot of new things. Maybe even learn some hardware. What I’d really like to see is a self directed research sort of project. It would take motivated students and a teacher willing to let things get messy. Grading would be a challenge especially if one has to give regular grades to keep administration happy. I’m not really sure how it would work but I’ll bet some students would learn an awful lot."
"252","2017-06-30","2023-03-24","https://blog.acthompson.net/2017/06/professional-development-for-advanced.html","This is sort of a riff from yesterday’s post about what to teach students who are beyond the normal Advanced Placement CS level or perhaps looking to something advanced in place of the AP course. Most professional development for computer science educators is for teachers who are beginners at teaching CS or who are teaching beginners at learning CS. That’s wonderful as far as it goes but as we move more and more CS down to the younger and younger grades there has to be more. What is that more? Honestly I am not sure. Of course I have some ideas for topics and I have blogged about them. But are they the right ones and do I, or other teachers, know enough to teach them? OK some of them I think I could handle. I’ve been around the block a few times but there are a lot of teachers who are going to be facing students who know as much as they do very soon. Let’s face it some teachers are facing that already. IF they are not now they will be soon. We don’t have a good handle of the “what comes next” because it hasn’t often bee an issue. But it would be a good thing if some of those teachers who teach advanced students already (I’m talking about a large number of people at career/technical schools BTW) would share what they have learned with the rest of us. As I mentioned earlier (After ISTE–More Questions Than Answers ) this topic has come up in the past but we’ve never really addressed it as a community. I think it is time we put some effort into this situation. What are your thoughts?"
"253","2017-07-05","2023-03-24","https://blog.acthompson.net/2017/07/twitter-chat-teaching-computer-science.html","I'm going to host a twitter chat on Monday, July 10, 5PM PT / 8PM ET. Join me to talk about teaching computer science away from the computer. Bring your ideas and pick up more. Follow #InfyEdChat to take part. I think most of us are looking for ideas for helping students get the concepts and doing so away from the computer can be more comfortable for make. So jump in with what works to you. See you in Twitter on Monday!"
"254","2017-07-06","2023-03-24","https://blog.acthompson.net/2017/07/computer-science-teacher-or-teacher-of.html","In some respects we have an identity problem in computer science education. Some of us think of ourselves as computer science teachers. Generally that means we identify as teaching computer science first. Maybe that is all we teach. Other times it is not the only thing we teach but what we want to teach the most. Either way “computer science teacher” is how we self identify. Other people see themselves as teachers who also teach some computer science. Some of these teachers see themselves as math teachers, science teachers, gym teachers, or art teachers who also teach some computer science. Others are K-6 or middle school teachers who teach several things or “everything” and computer science is just part of what they do. But many of these teachers feel like they are not in the same category as “real computer science teachers.” This really shouldn’t be a problem as we all have computer science in common but sometimes it can be. It’s a problem when teachers who teach some computer science think that professional development for computer science teachers isn’t for them. It is though! When I look around the CSTA Annual Conference (which starts in a couple of days) I see all kinds of people who teach computer science and there is something for all of them there. No one asks if people teach something else at a CS PD event unless it is casual conversation or if they want to talk about cross curricula teaching. Many members of the Computer Science Teachers Association have membership in other subject matter associations of teachers and that is great! I guess it can be a problem if someone really doesn’t want to teach CS and want to be purely some other sort of teacher. As much as I love CS and teaching CS I understand that some people have other priorities. There is only so much time in a teacher’s life for professional development. Teachers of CS who want to learn more CS shouldn’t hesitate to jump into things with people they see as computer science (specialist) teachers. As we in our society work to bring computer science to more and more (hopefully all) students there are going to be many more teachers who teach computer science along with other subjects. I hope we can mix CS with more subjects as well. It will make everything more interesting and relevant to teachers and students alike. So computer science teacher or teacher of computer science – however you see yourself join CSTA, come to chapter meetings, come to our annual conference and know that we’re all in this together."
"255","2017-07-14","2023-03-24","https://blog.acthompson.net/2017/07/ethics-and-computer-science-education.html","Are ethics and the effects of computer science a reason to teach CS to everyone? Increasingly we are seeing all sort of impacts on daily life because of computing. Some are unintended but others are intended and often some of these impacts are not good. What is going on? Basically I think two things. One is that people are not going beyond asking if something can be done to should it be done. The other is just plain unethical behavior done for profit. Perhaps education in ethical thinking can help. It is at least something we should try. Computing and its effects are still relatively new. We’re doing things today with computers that were the stuff of science fiction not very long ago. Smart phones, GPS navigation, self-driving cars (I heard about self driving boats – big ones – at CSTA this week) and much more. Schools are teaching students how to make these things possible but are we teaching enough about how to weigh the consequences? Not always. But we should. Teaching good behavior on the Internet and in social media is becoming very common. In fact in some places it is required to be taught. That’s great as far as it goes but computing is so much more than that. The CS 2013 curriculum for undergraduate includes ethics and professional behavior. But what are we doing in K12? Are ethics part of the discussion in K12 standards? It is in the CS K12 Framework. Still it seems to be on the backburner for many teachers. Why? Well full curriculum for starters. There is not much room for it in the APCS A curriculum. There is in the AP CS Principles curriculum and hopefully there will be some good educational discussions in those classes. Really though it shouldn’t be a separate topic in my opinion. Ethical behavior is something that we should bake into the curriculum in various contexts. We need students to be thinking about ethics from the very start. I argue that students need to learn to think about if something should be done as they learn how to do it. Take big data for example. Data analysis is a powerful and wonderful tool. It can be used to solve all sorts of problems from medical research to how to get around the neighborhood. But it can also be used in negative ways. Can you imagine what the Nazis could have done with modern databases? Think on that for a while and realize that there are bad actors in governments in the world today. Computers can be used to make car engines cleaner and more efficient. They can also be used, as we saw with Volkswagen, to cheat on emissions tests. Did the engineers who wrote that cheat code think about the ethical implications? We’ll probably never know but our students should be taught to think about it. Some may argue that ethics belongs in a separate course or that CS teachers should leave that teaching to others but I think the special context of CS and in fact the special power that CS knowledge gives requires we, CS teachers, include it in out curriculum. More than that I think that everyone, not just the people who will be CS professionals, needs to understand how to think about ethical computing. Can we really expect business or political leaders to think about ethical use of computers if they don’t have training in the mix? I don’t think so. The ethics of using computers, how and why they are used and what they can do, is increasingly an important life skill. Ethical computing is another reason we should teach CS for all. BTW The other day there was a twitter chat about ethics and computer science education (Check the #EthicalCS twitter tag). Saber Khan is organizing them on Wednesday's during the summer (8pm Eastern time) and this was the first. It was an interesting conversation and brought a lot of ideas to light for me. I recommend joining in over the summer."
"256","2017-07-15","2023-03-24","https://blog.acthompson.net/2017/07/csta-2017some-thoughts.html","Normally I write several blog posts during a CSTA Annual Conference. Not this year. Why? Too much going on! The sessions I attended were very good and my time not at sessions was never boring. Lots of great conversations connecting with new friends and regular attendees. And the exhibits were worth the time as well. Let me start with the exhibits. I know that there are people with several different opinions about exhibits at conferences but I love them. This year there were over 40 exhibits and they were all relevant to attendees. What were my highlights? Well there was Rolls Royce showing off virtual reality technology that they use in manufacturing and development. They are a technology company make no mistake about it. They need our students. Making things was a big topic in the exhibit hall as well. Several people were showing off things to make/create in CS classes. 3D printing, robots, and programmable gadgets. I think physical computing is a coming thing. Microsoft was showing some really cool projects using the Micro:Bit and AdaFruit Circuit playground. Much of these were also at ISTE BTW. They have a web site called MakeCode.com that lets students program several devices and Minecraft it There were several exhibits showing robots with Wonder Workshop (makers of Dot and Dash) having the largest exhibit. There was a session on the legal ramifications of using drones in education as well. There were very few sessions on using robots and programmable small devices though. Maybe that will change in the future as there seems to be a lot of interest in all of these things especially in K-8 CS education. Cyber Security was another big topic at CSTA this year. Lots of people are looking into how that fits into the curriculum. Closely related was a session on ethics which has spawned conversations continuing over the summer on Twitter with the #EthicalCS twitter chat (See Ethics and Computer Science Education ) Social media was a big topic with a lot of people tweeting at the conference and a Birds of a Feature that included a short mini Twitter chat. I did tweet a good bit myself. The conference hashtag was #CSTA2017 and you can look for people’s tweets to see what others were interested in. Conversations for me were wide ranging. Talks about these cool new devices. Chats about the growth of CS for all and what that means. How we teach different things. What different things. I talked to a number of people about AP CS Principles. Most of us agree it can be a really good course that is rigorous and interesting for both students and teachers. So many ways to teach it though! A few other observations. I didn’t see as much interest or discussion of mobile phone development. Yes, people are using App Inventor more (or so it appears to me) but they are not as focused on phones. I didn’t hear any iPhone talk. That I didn’t hear something doesn’t mean it wasn’t talked about of course but I do hear a lot. There was more talk about AP CS Principles than AP CS A. Maybe all the APCS A people feel more established in that course but of a lot of us are still working our way though Principles. Interest in CS is sure growing. That we had 650+ people suggests that alone. And industry is being supportive with something like 150 people getting funding help from Infosys Foundation, Google, and Rolls Royce to attend. That’s all good. It feels like there were more K-8 teachers this year as well. That is a fast growing area in CS education. All in all I think I picked the Computer Science Education Things I’m Watching in 2017 back in January. Movement on all fronts. We’ll see what happens in September and the new school year but I think the CSTA Conference is still a leading edge professional development experience for CS educators. Were you at CSTA? There was much to much for any one person to see it all. What were the things that moved or interested you there?"
"257","2017-07-17","2023-03-24","https://blog.acthompson.net/2017/07/teach-me-how-to-teach.html","Garth Flint hits it out of the part with It is not about coding Key issue? ""Although both camps were for teachers neither dealt with any pedagogy on how to teach coding or programming. Both stressed syntax and how to read the curriculum they had designed. It was implied in both camps that although pedagogy was important it was something that would somehow be easier that coding and syntax."" This may be the biggest problem with professional development for computer science teachers - we are taught what to teach but not enough of how to do the teaching."
"258","2017-07-19","2023-03-24","https://blog.acthompson.net/2017/07/gpa-general-purpose-block-programming.html","I added GP to my list of block programming languages this morning. Mark Guzdial announced on his blog that it was available in Beta (The General Purpose Blocks Programming Language, GP, is now in beta) According to the website “GP is a free, general-purpose blocks programming language (similar to MIT's Scratch) that is powerful yet easy to learn. It runs on most platforms, including laptops, Chromebooks, tablets, and web browsers.” This one looks particularly interesting because the GP stands for General Purpose. What does that mean? I think it means more sorts of apps can be developed with it than the more domain specific block languages we have seen so much of. Since I am not a fan of web apps, that it is available as an executable for a wide variety of platforms (Windows, Raspberry Pi, Mac, and Linux) I’m happy. Available as a web app as well for you Chromebook people! The development team includes some pretty impressive people who have experience teaching with it. And they have some teaching resources available already because it has been used for teaching. This one seems really worth a deeper dive."
"259","2017-07-20","2023-03-24","https://blog.acthompson.net/2017/07/algorithms-bias-and-beautiful-women.html","I've been keeping my eyes open for things to discuss with students this fall, especially in Advanced Placement Computer Science Principles. This week bias in algorithms kept crossing my path. It was even a topic for the #EthicalCS Twitter chat this week. It's a real problem if we really want software to meet the needs of everyone. And really to keep people safe. I've got a couple of good examples to share. One is attempts to scientifically determine what beautiful women look like. Personally I think that is a silly goal as beautiful is in the eye of the beholder but it sells magazines I guess. Take a look at this story. The 10 Most Beautiful Women in the World, According to Science. All of the women are white. Do we really believe that beauty is limited to white women or is there perhaps a bias involved? I would suggest the latter. While that is sort of trivial in the scheme of things some biases in algorithms have a lot more risk. Take this story A white mask worked better': why algorithms are not colour blind about the discovery that some facial recognition doesn't recognize Black faces. More information at this TED Talk Joy Buolamwini - How I'm Fighting Bias in Algorithms. Imagine the possibilities. Police and other authorities use this sort of software and this suggests the possibilities for miss identification are frightening. Take a look at this story as well Samsung adds and swiftly removes sexist Bixby descriptor tags Not so much an algorithm bias is a software inclusion of biased opinions. How did they miss that? I wonder how many women were in on that decision? Biases are pretty much unavoidable. As one professor Tweeted me ""Most biases are inherent/unavoidable part of cognition. See books by D. Kahneman, R. Thaler, or D. Arielly."" If anything this agues for more diversity on software teams. Different biases may, one hopes, help to balance things out in algorithms and software in general. I think though that as educators it is the job of computer science teachers to discuss this issue with students. They need to be aware of the issue if they are to have any chance to moderate the effects."
"260","2017-07-21","2023-03-24","https://blog.acthompson.net/2017/07/five-must-read-blogs-for-computer.html","I maintain a computer science education blog roll with as many good blogs for computer science teachers as I can find. It's a good like for the most part. Some of the blogs listed are seldom updated though. And some are really more general purpose education or not as focused on CS education. (Doug Peterson's blog is an example but I never miss it.) So I decided to write about the five best in my humble opinion. Just to get people started. Other than the first, these are in no particular order. I always read these blogs. If you only read on blog it should probably be Mark Guzdial's Computing Education Blog Mark is probably doing more research in how to teach computer science right than anyone else I know. He talks about the work they are doing at Georgia Tech both in terms of teaching new and different courses there as well as the Georgia Computes! program that is helping to develop more CS education at the HS level in Georgia. I wish I wrote half as well as Mark. Whether if be his commentary on the various articles he finds or information about his own work or discussion of things his graduate students are doing what you will find here are well thought out, well written and informative posts. His are the first posts I read most days. For some often contrary opinions but always interesting reads try Mike Zamansky Mike used to run the computer science program at Stuyvesant High School in New York City (a top public magnet school). These days he is working on the honors program at Hunter College. He has strong opinions and a long background in teaching CS to back them up. If you want someone who doesn't just take ideas at face value Mike is the man to read. The small school perspective is a highlight on posts by Garth's CS Teacher Blog Garth Flint is a teacher at a private Catholic school in western Montana. Garth always gives me things to think about. He writes about curriculum (He's always trying new things), teaching, and even some system management. In many small schools the CS teacher is also tech support. I love his writing style as well. Doug Bergman is the award winning head of Computer Science at Porter-Gaud School in Charleston, SC. Doug is very innovative and a huge proponent of project based learning. He is also great at getting grant money to buy new hardware for teaching CS. Robots, Kinects, and even HoloLens devices show up in his lab (and blog posts) as he has students work on very interesting projects. Doug gets excited and it shows. I recommend my blog as well. I think to think I write with a teacher voice but my background in industry over the years gives me a different perspective. Plus I link to good stuff from the (possibly too many) blogs I follow as well other things I find on social media. If you don't care about my ideas you may still find value in the stuff I share. Sharing good ideas from others is my passion."
"261","2017-07-23","2023-03-24","https://blog.acthompson.net/2017/07/is-computer-science-education-facing.html","The other day Audrey Watters, one of my favorite contrarians, posted Why Are Coding Bootcamps Going Out of Business? which focused on the failure of some coding bootcamps and the consolidation of others. Today I read A Tech Bubble Killed Computer Science Once, Can It Do So Again? also posted in the last few days. Articles like these make on think about the future of CS education. Well I think about that a lot anyway but mostly I travel in upbeat circles. CS education is seeing growing interest and is being taught to more students. All good right? Both of these articles focus on CS education as a way to get jobs in software development. While that is probably a good reason to study CS it is not the only one. Of course we have seen lowering demand for CS professionals decrease interest in studying CS drop in the past. SO it is something we do have to look at and think about. Part of the problem here is getting a clear view of the demand for CS professionals. Many companies say there is a shortage of skilled developers. The contrarian view is that there is a shortage of people willing to do the job for the money being offered. Those people see the calls for more H1B visas as a way to keep salaries low more than as a way to fill a real shortage. I suspect the way the Trump administration looks at foreign workers (see the H2B visa shortage this summer) may give us a chance to find out. On the other hand some people predict that tech companies are headed for a bubble burst so there is that as well. If tech companies do falter that may indeed cause a drop in interest in CS education. I’m not quite ready to predict an eminent bubble burst there though. It really feels to me like a lot of things are moving forward very strongly and very widely across industries for that to happen soon. We’ll have to keep an eye on what this means for jobs though. While it looks like starting salaries for recent university graduates are up slightly (Salaries for 2017 College Grads Hit All-Time High) tech like many other industries has this tendency to hire young and squeeze out older more expensive workers. I hear lots of stories of how hard it is for experienced professionals in their 40s and 50, let alone 60s, to get jobs in tech. Personally I still maintain that learning CS is important for people in all lines of work and that becoming a professional software developer is not the only or even the best reason to teach CS to everyone. Even if there is a drop in people majoring in the field if there is an increase of people learning some CS we’ll be better off. The hard part is convincing all these other people that the reasons we teach all HS students Physics and Biology are just as valid, if not more so, for computer science. We need to go beyond the vocational idea of CS education. If we can do that we can continue to see CS education grow to the benefit of us all."
"262","2017-07-26","2023-03-24","https://blog.acthompson.net/2017/07/time-to-include-more-hardware-devices.html","Lately I have been thinking hard about including small programmable devices in my programming courses. Talking about his on Twitter brought me both encouragement and some discouragement. The discouragement challenged me to think harder about why I wanted to use these devices. Pat of that challenge was a link to a paper by Monica M. McGill called ""Learning to Program with Personal Robots: Influences on Student Motivation"" IF you don't have access to the ACM Library and really want to read it let me know. That research work focused on the use of robots as a motivational tool. The results were not that encouraging. A lot of the complexities of using robots, fickle hardware, batteries running out, software that is not quite there yet, and other logistical items probably apply to small programmable devices of other sorts. The robots didn't seem to be as motivating as the authors, and many supporters, would have hoped. Students didn't see the robots as relevant to their lives and interests. SO are the robots worth it? It's a fair question. Are my little devices going to be different? If so, different in what way? So many questions. My thinking is that I need to look at more things to determine how or if I should proceed. Addressing some of the logistical issues is of course important. The ""why"" of going through that is the bigger question. Here I look to relevancy. This is were I see some potential differences from robots. The challenge becomes more than creating projects that are meaningful and motivating for the students. I have to have and communicate a reason why students should be learning g about these devices. Something beyond the project of the hour. We're really moving, some would say have moved already, into an era with we are seeing smart devices everywhere. Many of these devices are tied in with ""the cloud."" Are we preparing students to deal with that reality with software only computer science education? I'm concerned that we are not. I asked the questions ""Wondering if it is time to more software people to learn more hardware? Do we need to be teaching more of this stuff as well?""and received a lot of positive responses from both educators and industry friends. The support did not come without more questions (I have smart friends) such as where in the K-16 CS curriculum should it come and what sort of things should be included? We are really still figuring out this whole CS for All thing. (BTW Mark Guzdial's CS Curricula, Standards, and Frameworks will Need to Change for more on this.) In a way, this needing to figure things out makes me want to try more. Someone has to do it. Trying things on a small scale seems to me to be worth the effort. I want students to think about hardware and how it is part of a complete system. I want them to see that they can combine hardware and software in new ways to create new things. Will this be more motivating? I don't know. Will it help them learn programming faster or better? Again I don't know and the research suggests not in a big way. On the other hand it seems likely to teach themselves some things they would not learn at all without the involvement of hardware. I haven't yet seen much research out of the UK on the impact of the BBC Micro:bit. They didn't really have a full year to work with it though so it is early. People using it still seem enthusiastic about it. People are starting to develop more software and curriculum around the Micro:bit, Arduino , Raspberry Pi, AdaFruit Circuit Playground and other similar devices so I don't feel alone. Well not completely at least. And I am going into it with modest expectations. I'd like to hear from others who are asking these questions as well. Do you use these small devices? If so, why? If not, why not?"
"263","2017-07-27","2023-03-24","https://blog.acthompson.net/2017/07/do-we-want-computer-science-to-be.html","Is making computer science a required course for everyone really a good idea? Doug Bergman made some interesting comments on Facebook today: ""A required course means people HAVE to take it, which on the surface is what we say we want in CS, but when you dive deeper forces us to ask different questions. I do not want to be like math where everyone takes it but few actually like it."" We're really a long way from that nationally of course. Mostly people are focusing on CS being at least available for everyone. The school I teach at does require a year (well two semesters) of computer science for graduation. So we're a bit ahead of the curve. We work hard to have a course that builds enthusiasm for the subject rather than killing it. And we offer several opportunities for a second semester after our first course that almost everyone takes. Other subjects do that as well I believe. We still often take the fun out of some courses. We need to avoid that everywhere but for CS which is still gaining acceptance this may even be more critical. IF we are to have CS as a required course we really did to be thoughtful about how those courses are taught. We have to make them relevant understanding that relevant means different things to students of different ages and backgrounds. One size does not fit all. We have to have classes taught by teachers who are enthusiastic about the course. The last things we need are teachers who don't want to be teaching computer science and who don't enjoy the material themselves. They'll teach students to also hate the subject in spite of their best intentions. In short, if we don't teach required courses in ways that encourage all (or at least most) students we risk losing traction in offering CS to everyone. We don't have hundreds of years of being a core subject to fall back on. So perhaps for now access for all students is enough. On the other hand if, as some of the data suggest, CS is offered a lot more often to students of privilege (for various definitions of that sometimes incendiary word) maybe we do need to push a few (many?) for people into the field to get the diversity that we know the field needs? Over the years, before we required a full year of CS, many of my students took advanced CS courses because their parents pushed them into it. Parents who are engineers, scientists, executives, and similar see the need for CS education and want it for their children. Do barbers, mechanics, sales clerks, and other jobs that traditionally haven't required advanced education see the need for their children? Obviously some do and they push and support and motivate their children just as hard, if not more so, than parents with a lot of education do. But are they there for all students? If a parent, like my grandparents a generation or two ago, think that high school is plenty of education are they going to push their child into CS? Can we bet their future on it? It's complicated. Ultimately I think we will get to requiring CS for all students. We'd better do it right though."
"264","2017-07-28","2023-03-24","https://blog.acthompson.net/2017/07/where-will-we-get-teachers.html","Computer Science Teachers Needed. But Who Will Pay to Train Them? It's always someone else's job. Or someone else's money. Who will step up and say ""I'll do it!."" A few companies have stood up. Google, Microsoft, and Infosys Foundation have all spent a lot of money teaching teachers. Take CS PD Week which was sponsored by the Infosys Foundation USA, with support from the National Science Foundation, the National Center for Women & IT and the Computer Science Teachers Association. The event was hosted by Colorado School of Mines. A great event that just finished its second year. But that is all only a start. Long term we need more funders to step up. It's not going to happen on philanthropy alone."
"265","2017-07-31","2023-03-24","https://blog.acthompson.net/2017/07/an-online-forum-for-computer-science.html","Stack Exchange is one of a number of online forums being used by the computer science community to ask and answer questions. While most of these are targeted at the professional or would be professional developer there is a new forum open for Computer Science Educators. The Stack Exchange for Computer Science Educators is now open in beta. What that means is that is is currently small but growing. Interestingly enough there are more people answering questions than asking them. That means it is a great opportunity for teachers, especially early career teachers, to get their questions answered. We all know that most computer science educators are isolated – often the only CS teacher in their building. Often one of only a few in a local area. Forums like this one are a good chance to build community and provide mutual support. An additional advantage of forums like this one is that it is easily search able. You may find that others have asked and answered your question already. A great time saver. And of course this being a community of CS educators there are often multiple answers looking at questions from different angles. Check it out at https://cseducators.stackexchange.com/ and read through it for a while. It can be very educational."
"266","2017-08-01","2023-03-24","https://blog.acthompson.net/2017/08/cybersecuritythis-summers-computer.html","Cybersecurity seems to be all the rage these days. It was a big topic of conversation at this summer's CSTA conference, I've had a number of parents ask me if we teach it at my school, and it is been big on the CS ed social media scene. The NSA even came to talk to teachers at the CSTA conference! It's a big deal! But what does it really mean? Well to quote the great philosopher: ""When I use a word,"" Humpty Dumpty said, in rather a scornful tone, ""it means just what I choose it to mean—neither more nor less."" Or perhaps the story of the blind men studying the elephant is even better? In short, every seems to have a different idea or no idea at all of what cybersecurity means or how it should be taught in schools. I've been asking around for people's thoughts on this lately. One of the people I asked is a former student who does security work at a local university. Some of his thoughts are below with some edits of my own. There are two 'tracks' in education that I've seen as a result of this. 1. Security IT people. These people think at a business-process level at best, and simply IT service provisioning at worse. They clean viruses, install operating systems, evaluate products, establish procedures, write policy, inspect network traffic etc. Security for these people is either strategic or tactical. They are concerned about 'doing the right thing' as far as security goes, even though they are usually not a technical nerds as one might generally like. When I've seen people do this at a college level, they do blue-team/red-team hacking and defending either as a class or in clubs. I personally _hate_ this approach, but I get why people do it. A. its fun, B. its sexy C. it can be competitive and cooperative and D. it give something much closer to real world experience. its also E. Not what _most_ people spend any serious time doing. That pen-testing stuff gets outsourced to whatever place can do it the cheapest. Its usually done as part of audits and other really-boring activities and the burnout rate for new people in those professions is 2-5 years. In my experience, students that do it need lots of oversight so they don't go hacking things they shouldn't and sometimes people need to make a 'safe' lab environment so they don't affect anything else. That can translate to a lot of time and resources. A better approach would be to do a IT modeling course of some reasonable kind. At one university, there was an course on networking at the grad level, and while they didn't do much actual networking, they would work in teams to design IT technology layouts. The students learned a lot about modern IT systems, servers, desktops, networking, software management, firewall, IDS/IPS tools, etc. The Big Project was, given a somewhat real-world-ish scenario (a courthouse, a college, a city, etc) design an IT system from the ground up. There was a presentation to a small panel and the winners won a prize. 2. The other track, secure programming. This is an extremely useful skill too, but its absolutely not sexy. These people design good algorithms, write solid encryption, read and debug code, do proper QA and acceptance testing, etc. The lower-level code, the better. I'm not sure how useful this is though to the average programmer.... never-mind a high school student.... given the fact that if you are using reasonable libraries and sticking to a high-level language, you are usually fine for most development. A similar approach that might have less direct programming, would be to look at a book like 'Threat Modeling' by Adam Shostack. He's a Microsoft guy and has done a lot of work thinking about applications of a threat model to different situations. You would have to do a little 'translation' of the book to high-school programming skills, but in it he talks about software design and thinking through potential security use-cases using a standard model. Being able to read and debug code someone else wrote, thinking about things in psuedo-code before writing something ('Ready', 'Fire', 'Aim'? ;-), and understanding Information Security goals of Security, Integrity, and Availability without getting all theoretical about it. The first category, Security IT, seems like the natural thing for high schools. It fits in very well with network management type courses. And there are all those CTF (Capture the Flag) contests that many students seem to like. Plus is plays into a desire that seems to be prevalent to learn hacking. It's not for everyone though and for some it doesn't feel like ""real computer science."" A term that is hard to define for many as well. The second category, secure programming, is more interesting to me personally. I spent some time doing operating system development where among other things I was responsible for maintaining the code that allowed users to log on and off. Plus we made major security changes to the OS while I was part of the team so threat analysis and design for security was a big part of what we were doing. It's not so glamorous as ""hacking into computers"" or even preventing malicious users fro breaking into your network for many students though. But it is oh so important. I'm still quite a way from deciding what a cybersecurity course might look like at my high school. I can easily think of a couple of ways it could work at the higher education level but fitting it into the high school curriculum seems harder. What I have decided is that I need to include some discussion of various cybersecurity issues in several existing courses. We talk about some security issues already, good passwords and their use for example. We could do more though. And in my programming courses we could talk about secure programming more. Most of all we could be including discussion of various cybersecurity issues in Advanced Placement Computer Science Principles. For the time being that is my plan. But I'm going to keep working on the idea of a dedicated computer security course. Let me know if you have suggestions or know of good existing cybersecurity courses at the secondary school level."
"267","2017-08-07","2023-03-24","https://blog.acthompson.net/2017/08/twitter-chats-for-computer-science.html","With the isolation that many computer science teachers feel social media can be an important part of both building community and professional development. Recently I have focused on blogs (Five Must Read Blogs for Computer Science Teachers ) and an online forum ( An Online Forum for Computer Science Educators ). Today I'd like to list a few useful Twitter chats. #csk8 5pm-6pm Pacific Time every other Wednesday during the school year. This is a must attend chat for CS teachers in pre-secondary education. I get a lot out of it myself FWIW. #ethicalCS 5pm PT/8pm ET Wednesdays during the summer. I'm hoping it continues as discussions so have have been fascinating. #caschat 8-9 pm London time, during term time.Hosted by Computing At School in the United Kingdom. Lots of value for those of us in other parts of the world as well. #PiChatUSA Thursdays 8:30-9pm Eastern Time, if you use Raspberry Pi. in class you'll want to join this one #InfyEdChat 5 PM PT / 8 PM ET Mondays. Each chat is hosted by a different person and very well run. I hosted one myself back in July 2017 Always interesting chats. #TynkerChat Mondays at 4pm PT / 7pm PT for a 1/2 hour. very useful for people who use Tynker in their classroom. The Exploring Computer Science people are running their first Twitter chat tonight at 5PM Pacific time. Follow at #ECSedu Personally I really like Twitter chats. I've really found a bunch of people to learn from through these events. And of course learned a lot from them. BTW I recommend checking those hash tags from time to time when there are not formal chats going on. People often use them to signel information of value to others who participate in these chats regularly."
"268","2017-08-08","2023-03-24","https://blog.acthompson.net/2017/08/how-to-retain-computer-science-teachers.html","One of the big topics around computer science education is the shortage of teachers with enough CS knowledge to properly teach the subject. One fear is that anyone well enough versed in computer science to teach it is likely to leave teaching for industry. Mike Zamansky addressed this a bit recently with his post On Retaining Teachers. And earlier in Will we lose CS teachers to industry? This sort of discussion comes up a lot. The typical ""answer"" advanced is higher pay. Sounds great but not really practical. Union rules in most public school systems prohibit paying premiums for different subject teachers. Where rules don't often custom or a systemic view of fairness (all teachers do the same job regardless of subject) prevent different salaries. If that is out, how does a school or school system retain teachers. Mike Zamansky in his posts suggests non financial benefits for teachers. New electives for example. Letting teachers teach courses they enjoy is a good incentive. In the case of computer science teachers I can think of other incentives. Of course everyone is different and is motivated in different ways. So what seems good to me may not make everyone happy enough to stay. But I think they'll appeal to many. Really things boil down to treating computer science teachers with trust and respect as well as giving them the tools to do their job better. For example, do computer science teachers have administrative privileges on the computers in their lab? If not, why not? One would expect that a well prepared CS teacher should be able to safely handle that responsibility. In fact it is often necessary for them to experiment with new tools and teaching techniques. Keeping administrative access from them shows a lack of respect and trust. That will make anyone feel less valued. How about keeping teaching labs up to date? Yes it costs money but if you want students to be current then the equipment they learn on should be current. Plus making CS teachers find work around and hacks to deal with inadequate computers leads to frustration and discouragement. And by the way, the CS teachers should be consulted on decisions about computers and software for their labs. Believe it or not stories of teachers returning from summer break to find that PCs have been replaced by Apple Macs or Google Chromebooks are far to common. This is incredibly disruptive and makes for serious stress and aggravation for teachers. Professional development is another area where CS teachers can use some support. While most systems have some money for professional development but teachers are not always encouraged to apply for it. With CS constantly moving regular PD is really necessary. Unfortunately it is not always close or inexpensive. Conferences like CSTA are wonderful but often districts are unwilling to pay the full cost (transportation and housing are the big costs.) These events are great for teachers but not all teacher can afford to pick up the slack on their own. Not on a teacher salary. Schools need to invest in CS teachers. Related to both professional development and new electives (there are huge opportunities for CS electives that appeal to teachers and students alike) is some funding for new equipment for teaching. Not just the previously mentioned lab computers but things like Micro:bits, robots, quadcopters, and other electronics that can make CS more interesting and even more cross curricula. Different teachers have different interests and encouraging them to follow those interests and bring them to their teaching can be very motivating. And help with retention. So that's my bit of brainstorming on the subject. What do you think? If you teach CS what sorts of thing motivate you to stay teaching and stay are your present school? What sorts of things make you want to leave? Maybe we can help our administrators out with some ideas."
"269","2017-08-10","2023-03-24","https://blog.acthompson.net/2017/08/builtbygirls-challenge-for-teen-girls.html","This looks interesting. Know a girl with entrepreneurship dreams and ideas? #BUILTBYGIRLS is looking for the next wave of startup founders and change-makers. Are you building a mobile app, hardware device, robotics project, game, or something no one has invented yet? Does it have the potential to succeed in the real world? Wow us with your product concept, designs and working prototype for the chance to win $10,000. Finalists will get the trip of a lifetime to San Francisco to pitch in front of expert girl judges, tech moguls and industry experts. Are you ready to build the next big startup? https://www.builtbygirls.com/programs/challenge Eligibility Girls 13-18 years old who can participate in SF from 9/14-20, 2017. Open to teams of up to 4."
"270","2017-08-15","2023-03-24","https://blog.acthompson.net/2017/08/ideas-for-computer-science-teachers.html","For me one of the big benefits of social media is getting and sharing ideas from other computer science teachers. Blogs, Twitter, and Facebook are regular sources of good information. I’ve got several to share today. It starts with Kimberly Laron’s Facebook post on a teaching aid for number systems. I’m always looking for new aids for teaching binary and the like. Her Google Sheets tool is pretty cool. I made my own version for Excel because I’m an Excel sort of guy. Then there are the cool images that Jill Westerlund shares on her blog at Say it better with Boolean && binary. She has a bunch of them and both shows images of how she is using them and direct links so you can download copies of them for your own use. Check them out. I’ll be using several of them in my own lab. Another favorite thing is new projects or new takes on older projects. Doug Peterson who had a recent birthday wrote about the Birthday Project. Maybe you’ve used on or maybe not. In either case Doug’s take on it is a great read. Plus he links to the Wikipedia article on the Birthday Project for more information. But there are more links than just that one. Visit Doug’s post for more."
"271","2017-08-31","2023-03-24","https://blog.acthompson.net/2017/08/gamification-and-teaching-computer.html","Gamification is a huge buzz word in education generally today. There are proponents and opponents of course. And both sides have good arguments behind their opinions. I’ve had mixed feelings about the whole topic for a while. This is largely because it is hard to re3ally know what it means and how it might work for me and my teaching style. A couple of recent events have me looking at it some more. I had one group of students brainstorm using how to get students more involved and attentive in class. They seemed to really like Kahoot!. I was hoping for something new and out of the box and I know a number of teachers who use Kahoot! (and some similar tools as well.) So I thought I would take a look at it again. It looks interesting. I am not sure I have enough time to set up sessions right now but apparently there is a huge library of questions from other teachers. I plan look through that when I have time. (Christmas break is coming.) Time is a problem for some of these gamification tools. The other event was sending my students to a somewhat addictive Binary number practice game from @codeorg. My students wanted to play it for a while. I could never have gotten to convert Binary to decimal or decimal to Binary as many times as they did playing this game using a worksheet. On one hand I can see where that looks like an old fashioned “drill and kill” sort of exercise. On the other the students had fun, got some great practice doing conversions, and they seem (how will I check? )to be a lot more comfortable with the idea of doing these conversions. So there is something there. An other tool I have used in the past that is along the lines of gamification is Code Hunt. It has coding puzzles available in C# and Java. A teacher can create their own or use the ones that are already there. I’ve had mixed success with this. Some students love it and some students struggle. Code Hunt involved writing code that works with test data that is generated and displayed with results. Some students are terrible at this and get frustrated. Other students just eat it up! Problets by Amruth N. Kumar are a somewhat similar tool. Problems for students to solve. Amruth describes Problets as “problem solving software assistants for learning, reinforcement and assessment of programming concepts.” All of the problets are available in C++, Java, and C#. Some are also available in Visual Basic. I may try problets this year. We’ll see. There is that whole time issue again. I want learning to be fun. I don’t want to have students playing games just to be “the cool teacher.” Things that look like games have to have real value and promote actual learning and/or indicate that learning has taken place.If a game does that I’m ok with it. But I need to make sure it has value first."
"272","2017-09-03","2023-03-24","https://blog.acthompson.net/2017/09/executive-director-for-computer-science.html","The CSTA is seeking an Executive Director. A link to the full position profile with the official details is here. That’s the official list of requirements. I have a bit of a wish list myself. It’s an ideal and I don’t know that anyone fits it all but since I have absolutely nothing to do with who is selected I’m going to give some opinions anyway. It’s my blog. I’d like someone who is already known in the computer science education community. Someone with some experience either teaching or managing computer science related outreach who people with say “oh yeah, good choice” rather than asking “Who?” The executive director has to do a lot of fundraising (something I am not that good at BTW – it’s hard) so previous experience dealing with funding organizations like NSF, various foundations, and large tech companies would be very helpful. Closely related to this is the ability to make the case for CSTA. By that I mean able to communicate the unique nature of CSTA (by, for, and about the people who teach), explain its contributions to expanding CS (research, advocating for over 10 years – since before CS Ed became “a thing”), and all the various ways CSTA is helping CS education (conference, chapters, standards development, and more). Clearly we need a strong and effective communicator. Our EDs have to present to a lot of different audiences both as a speaker and a writer. CSTA is getting bigger all the time in membership and that growth has to be managed well. It also means that we have to have a staff that works together and is well supported by the person at the top. I think that is laid out in the official requirements fairly well. CSTA is a special organization to me and I think to many members. We need a very special person in the Executive Director role. Here’s hoping we find someone great."
"273","2017-09-04","2023-03-24","https://blog.acthompson.net/2017/09/save-date-csta2018-omaha-nebraska.html","Dates for the next CSTA Annual conference have been announced. Put it in your calendar and start making plans now. Get your request for professional development funds into your school/district now and beat the rush. More information about the CSTA Annual Conference at the CSTA web site. CSTA will be bringing its world class professional development and educator community together again in July of 2018. We are excited to offer teachers of Computer Science the opportunity to build skills, meet other teachers, and get inspired! We are happy to announce that the National Integrated Cyber Education Research Center (NICERC) will again be joining us for the conference and offering their Education Discovery Forum immediately following the CSTA conference on July 10 & 11. To find out more about EDF: Omaha click here. Want to learn more about what Omaha has to offer? Click here. This family-friendly location is easy to navigate and offers our attendees world-class attractions, dining, and of course, professional development for teachers of computer science. Want to know more? Click here for a fact sheet on Omaha. Want to know more about the Silicon Prairie? Click here."
"274","2017-09-05","2023-03-24","https://blog.acthompson.net/2017/09/curriculum-is-hard.html","Generally speaking I am a roll my own sort of teacher when it comes to curriculum. This year that is a bit overwhelming because I am teaching four different courses. Now two of them are easy. I have been teaching our freshmen Explorations in CS course for about four years now. It’s well set up. I’m not the only teacher teaching it and between us it’s all laid out pretty well. Sure we tweak it a bit every time we teach it but mostly it is good to go. Honors Programming (mostly sophomores and juniors) is also pretty solid. The other two courses not so much. My Mobile Application Programming course is a total redo this year. I was not happy with how it went last year so I have switched to App Inventor. I’m putting things together from resources that are available from others (see http://appinventor.mit.edu/explore/) So a bit of mix and match with some ideas of my own. Still largely my own design in my eyes. It’s a one semester course and I know what I want to cover pretty well. Advanced Placement Computer Science Principles is a whole different matter though. For one thing it is a full year. All my other courses are a single semester. It’s also more high stakes. My students will be taking the AP exam and like it or not we (them and me) will be judged a bit more seriously on the results. It’s not like the other courses in other ways as well. There are performance tasks to accomplish for example. In a sense they are just big project and I use projects all the time. But in an other they are different in that I am not designing my own rubric. I need students prepared properly so they can be graded by others. I want to get this right for my students. So for AP CS P I am using a pre-written curriculum. There are several great ones out there. There is The Beauty and Joy of Computing out of US Berkley for example. It looks really good but I didn’t want to use Snap!. Not that Snap! isn’t pretty cool but I wanted something different from what I was using in Mobile App Programming and AppInventor and Snap! are very similar. Mobile CSP also looks great but it uses AppInventor which, again, I wanted to avoid since I was already using it in another class. Yes I know that some people think using the same language over and over again is a great thing. Even a preferred thing. Miles Berry makes the case for One Language at a Time in a recent article. I disagree and I may elaborate on that in a future post. So what did I go with? I went with the AP CS Principles curriculum from code.org. For programming it uses their app lab which uses both block and JavaScript. We’ll be moving into the JavaScript as much as possible when we get to the programming. JavaScript is a growing language and I see learning that as a good thing for my university bound students. They all know some Visual Basic and C# and a good number are also fairly fluent in Java. But AP CS P is more than just programming which is one reason I am enjoying teaching it. Code.org has a lot of good resources for teaching that. Videos (short and interesting) and collaborative exercises. Right now students are using an internet simulator to create and use their own communications protocols. It seems to be going well so far. We’re only two weeks in of course but so far I think this is going to work well for me. I’m still going to tweak things a bit as we go along. And next year, once I’m comfortable with the course and the curriculum I am sure I will tweak it more. Overall though I’m glad I am taking this route. Your mileage may vary of course. What are you using and why? I’m especially interested in opinions on AP CS Principles curriculum."
"275","2017-09-11","2023-03-24","https://blog.acthompson.net/2017/09/who-wants-to-be-dns-server.html","We’re studying how the Internet works in my AP CS Principles course. I wanted a little exercise to help students understand how DNS servers work and maybe through in a bit about address caching. So I came up with a little role play to try out. I think it worked ok. I’ll try it again tomorrow with some more instructions. Here’s what I did. I started by taking screen shots of a half dozen or so web sites. The usual suspects: Google, Apple, Microsoft, Twitter, CNN, MSNBC, and the school’s home page. I printed them out and assigned students to “serve” each site. An other students was assigned to be the DNS server. I handed him a form and asked him to record which student was “serving” each web site. So the address in this case was a student name. Another student was assigned as the user and still another was assigned to act as their computer. The computer had their own sheet for looking up addresses (student names) for each web site. As we started it was empty. This would become the address cache for the computer. The user asked the computer for a web page. If the address was known to the computer they asked the appropriate student to display the web page. If they address was not known the computer asked the DNS server for an address. The DNS server would return the address which the computer would record in cache and then ask the server to display the page. We ran through several request to see how this worked. I did this before any detailed explanation of the process. I followed the role play with a video from code.org called THE INTERNET: IP Addresses and DNS that can be found on their collection of videos. Not surprisingly, this video went into some good detail on the very things we observed in the role play. I’m hoping that the combination of the role play, the video, and in-class discussion will help with both understanding and retention of the information. What do you think? How would you add or change this? Do you do something similar?"
"276","2017-09-12","2023-03-24","https://blog.acthompson.net/2017/09/yet-another-example-of-importance-of.html","A little Tuesday humor. I think I may use this to help students understand the importance of good variable names and other identifiers."
"277","2017-09-12","2023-03-24","https://blog.acthompson.net/2017/09/national-briefing-call-on-k-12-computer.html","I'm told this will be very well worth the time. I may even join with my Advanced Placement Computer Science Principles students. We are pleased to invite you to join an important national briefing call on K-12 computer science education and the Computer Science for All (CSforAll) movement Monday, September 18 at 2:00 pm ET featuring remarks from a very special guest (please join 5 minutes early as our featured guest will be speaking at the top of the call). We will share important updates and progress towards Computer Science for All from key national leaders; mark the one-year anniversary of the launch of the CSforAll Consortium at the White House Summit on Computer Science for All; and provide a sneak peek into the agenda and speakers at the upcoming CSforAll Summit, October 16-17 at Washington University in St. Louis. Don’t miss this important conversation on K-12 computer science in the US and the role we all can play in achieving CSforAll. To join, add this call to your calendar using the links below. Feel free to share this opportunity with your networks. Students and educators are especially welcome. You can also follow along via social media using #csforall. September 18 @ 2pm ET Conference Line: (888) 946-4716 // Code: 3267553# ADD TO YOUR CALENDAR: iCalendar • Google Calendar • Outlook • Outlook Online • Yahoo! Calendar"
"278","2017-09-13","2023-03-24","https://blog.acthompson.net/2017/09/ncwit-aspirations-in-computing-2018.html","Several of my students have applied for this award and all found it quite worthwhile.There are many benefits for students in high school and college. It’s really helpful for girls and young women to be recognized for their interests and accomplishments in technology. Calling all 9th-12th grade women and educators, as well as college women in tech! 2018 Aspirations in Computing award applications are open: https://www.aspirations.org. Earn scholarships for college Find computing internships Connect with a large network of other technical young women Discover resources to increase your knowledge of technology See also Top 10 Reasons to Apply for the NCWIT Award for Aspirations in Computing"
"279","2017-09-14","2023-03-24","https://blog.acthompson.net/2017/09/be-router-and-share-messages.html","The curriculum I am using for Advanced Placement Computer Science Principles is the excellent Code.Org curriculum. I really like the Internet Simulator that is involved in many of the early lesson in the Internet unit. It really lets students try a lot of things. I like to add a bit of my own flavor though and involving physical objects and activities is part of that. So today I had my students send messages through routers where students played that part of routers. Here’s what I did. I semi-randomly assigned each student a two part address. The first number indicated a router and the second a student “connected” to that router. I randomly assigned a students to be routers. I selected the number of routers based on the number of students in the section. I think you need at least two routers but more would be better if the class size allows it. I prepared a bunch of “message packets.” and handed a couple of them to each student who was not a router. A list of students with their “IP addresses” was displayed on the board. I could have printed them out if I liked wasting paper but I don’t. Students were to write out a question in the message field as well as the send to and return addresses (the codes I had created) and send the message. They were to give the message to the “router” they were connected to. The router was then responsible for either handing the message directly to the intended recipient if they were “on the same router” or pass it along to the appropriate router if not. That router was responsible for passing it to the recipient connected to them. After a bunch of messages and replies were sent we discussed what happened. Some good things happened. Well bad things depending on how you want to look at them. I love learning moments so they were good from my point of view. One router was overwhelmed with messages and took a while to get them all to the right place. Great! Bottleneck simulated! Some addresses were not well written and could not be delivered. I may send some messages like that myself next time to make sure that happens. Dropped message and what that means for the learning experience! I did this with minimal discussion first so that students didn’t know exactly what to expect. I’m hopeful this made the later discussion and the exercise with the Internet Simulator. What do you think? Look reasonable to you? What do you do to help students understand routers and what they do?"
"280","2017-09-15","2023-03-24","https://blog.acthompson.net/2017/09/illustrating-difference-between.html","Earlier this week my AP CS Principles classes were discussing the difference between latency and bandwidth. My curriculum resource (I’m using the curriculum from code.org) describes these two words like this: Bandwidth - Transmission capacity measure by bit rate Latency - Time it takes for a bit to travel from its sender to its receiver. These are useful descriptions but how to make that real for students? Today I found two great examples of high bandwidth but low latency. One was in the form of this graphic on the right. The latency is slow. It takes a lot of time for the pigeon to fly to the other site. So moving one bit or even byte at a time would not be a good idea. On the other hand since all the data gets to the destination at the same time the bandwidth is high. The story is a bit dated but still interesting. I shared that graphic on Facebook and a friend of mine who works for Amazon Web Services pointed me to a more current story. Amazon’s Snowmobile is Actually a Truck Hauling a Large Hard Drive From the article: “Using multiple semis to shuttle data around might seem like overkill. But for such massive amounts of data, hitting the open road is still the most efficient way to go. Even with a one gigabit per-second connection such as Google Fiber, uploading 100 petabytes over the internet would take more than 28 years. At an average speed of 65 mph, on the other hand, you could drive a Snowmobile from San Francisco to New York City in about 45 hours—about 4,970 gigabits per second.” Now that is a story that speaks to moving really large amounts of data. And again, showing the difference between latency and bandwidth."
"281","2017-09-18","2023-03-24","https://blog.acthompson.net/2017/09/congressional-app-challenge-launches.html","Something that looks interesting at least in Congressional Districts where there is a sponsor. Visit the web site to check it out. Congressional App Challenge Launches Today! It begins today! The third annual Congressional App Challenge (CAC) has now launched and will run through November 1, 2017. The CAC is a congressional initiative to encourage student engagement in coding and computer science through local app challenges hosted by the Members of Congress. This year, there are over 165 Members of Congress signed up to participate! The CAC aims to bridge the gender, geographic, and racial gaps in tech. In its first two years, the program yielded 239 challenges across 33 states. Over 1,150 apps were created by nearly 4,000 students, and participant demographics surpassed all industry diversity metrics, with young women representing 30% of all competitors. This year, the Congressional App Challenge will strive to build upon those numbers. During the next 14 weeks, thousands of students in participating Congressional districts will create and submit their own original applications, that will be evaluated by panels of local judges.The Members of Congress will announce the winners during Computer Science Education Week in early December. Winners will be honored by their Member of Congress. More prizes will be announced throughout the Challenge. The CAC was created because Congress recognizes how essential computer science and STEM skills are for economic growth and innovation, and that the U.S. is currently experiencing a dearth of adequately trained technical talent. By some estimates there are nearly a quarter of a million unfilled programming jobs in the US, right now. The CAC is a congressional effort to maintain American competitiveness, by proactively inspiring our youth and encouraging them to pursue these crucial skills. The Challenge owes gratitude to Representatives Bob Goodlatte and Anna G. Eshoo, co-chairs of the Congressional Internet Caucus, who requested and supported the creation of the CAC. Challenge execution is supported by the efforts of our Advisory Board, which includes the American Indian Science and Engineering Society, the Computer Science Teachers Association, Girls Who Code, Hispanic Heritage Foundation, Capital One, and Cisco, as well as a broad coalition of CS-focused partners. For more information about the Congressional App Challenge, please visit CongressionalAppChallenge.us. If you are interested getting involved or in supporting the Congressional App Challenge, please contact our Director, Rachel Decoste, at rdecoste@congressionalappchallenge.us."
"282","2017-09-19","2023-03-24","https://blog.acthompson.net/2017/09/designing-projects-for-programming.html","Last night a teacher friend of mine gave me a USB stick with the projects he uses with his students. I have projects for C++, Python, Java, and Visual Basic from him. Oh and there are 60+ in each category. It’s going to take me quite some time to go through them. It’s got me thinking about projects in general though. Keeping students interested is important when designing and assigning projects. The projects I’ve looked at from my friend and the ones I have used myself over the years seem to mostly do that. Although knowing what students a quarter your age will find interesting can be tricky. For me a big issue is that the more interesting a project is the more programming features and functionality it usually requires. For that reason I am moving up where in the curriculum I teach reading files this year. Projects become a lot more interesting when larger amounts of data are being processed. It also means i can get some good test data in front of students. Determining the level of scaffolding is another trick. The projects I am looking at show a wide range of scaffolding. And that makes sense of course. In the early projects you want some solid scaffolding to avoid too much frustration. Over time as students get more comfortable with problem solving and how things work you want less. I usually have students work on a concept with me (following my demo step by step) as one way of scaffolding. Hinting is also an issue once a project has been assigned. I’ve written about that before - Would You Like a Hint? The more interesting the project the more willing students seem to be to figure things out on their own though. Sources for projects are an other interesting thing to think about. Some of my favorite projects have come from student suggestions. Others from textbooks. Still more for other teachers. BTW are you sharing cool projects with others? Blogs or conference talks are both great ways to do that. Do you know about Nifty Assignments from years of SIGCSE conferences? Many of them are for more advanced students but some will work with students still at the beginner ranks. Other sources are informal conversations like at CSTA Chapter Meetings or other events. I’ve been on a number of advisory boards for career technical programs. Those teachers have shared lots of great project ideas over the years. The Advanced Placement readings are still another great venue for sharing project ideas. Always look for chances to learn from other teachers. So where do you get project ideas? What makes for a good project for you?"
"283","2017-09-28","2023-03-24","https://blog.acthompson.net/2017/09/fear-and-loathing-and-required-computer.html","It seems like every time someone suggests that computer science be a required school subject someone (sometimes several people) bring up on particular objection – that making a subject required makes I a turn off for students. The problem is stated several ways. For example Requiring CS would result in students with unenthusiastic or unprepared teachers Required CS courses would have to be watered down courses Required CS courses force the wrong kind of motivation (extrinsic rather than intrinsic) While those are all valid concerns are they enough to prevent us from requiring CS? They are apparently not enough to keep us from requiring Math, English, Science, and (in many places) World Languages. A question that needs to be asked as well is, if students are never exposed to computer science how will they become excited by it? I’m sure we all know someone who got excited about writing from a required English course. Or a math wiz who didn’t know they loved math until that one inspired teacher of a required course got them interested. And the same for just about any subject. Are we going to turn off some students though poor teaching? Perhaps but that is no more a fear for CS than any other subject. We’re even more likely to excite more students if more students take CS though. Sure the idea of requiring CS is scary to some and the fears must be addressed. But we’re never going to achieve computer science knowledge for everyone if we limit CS courses to people who already know they want to learn it."
"284","2017-09-29","2023-03-24","https://blog.acthompson.net/2017/09/who-says-there-is-no-room-for-more.html","People keep asking me what required course I would remove to make room for a required computer science course. So I decided to take a look at current requirements for graduation in my home of New Hampshire. This is what I found: From the state itself: 20 credits? Five classes a day? And 6 of those credits are elective? Seems like a lot of room to me. Now of course in New Hampshire local school have a lot of control so I looked into the local public high school. Twelve and a half elective requirements. Seems like an additional credit of CS could be added without having fewer of any other required courses. I teach at a private Catholic high school that requires 4 credits of Religion and still have room for a full year computer science requirement. So where is the problem fitting in a required computer science course?"
"285","2017-10-03","2023-03-24","https://blog.acthompson.net/2017/10/cs-educator-interview-saber-khan.html","I believe I first met Saber Khan over Twitter. Since them we have interacted in a number of ways on and off line. We met face to face for the first time this past summer at the CSTA Conference. To say we’ve had some interesting conversations would be putting it mildly. His was one of the first names that popped into my head when I decided to restart interviewing CS educators for my blog. WHERE DO YOU TEACH? WHAT SORT OF SCHOOL IS IT? > I teach at the Browning School, a K-12 independent boy's school in Manhattan, NYC. HOW DID YOU GET STARTED TEACHING COMPUTER SCIENCE? > I used to teach math and science and was very interested in tech. I became a tech integrator and teaching some tech classes where I really enjoyed teaching coding. Over the past past five years I taken a deep dive into learning and teaching coding. DESCRIBE THE COMPUTER SCIENCE CURRICULUM AT YOUR SCHOOL. WHAT COURSES DO YOU HAVE AND WHAT ARE THE FOCUSES OF EACH? > I am fortunate that we have a comprehensive tech education program at our school. Starting in kindergarten and all the way up to the Upper School we have dedicated tech classes that focus on CS, design and engineering. We have electives in CS and Engineering in the Upper School. I love teaching Python, JavaScript, Ruby with resources and programs such as CodeHS, Codesters, Ruby the Hard Way, etc. I have outlined our program here - https://medium.com/@ed_saber/k-12-tech-ed-w-computing-engineering-e552f8abb9e9 WHAT IS YOUR OVERALL TEACHING PHILOSOPHY? PROJECT BASED LEARNING? FLIPPED CLASSROOM? IN SHORT, WHAT MAKES YOUR CS PROGRAM “YOUR CS PROGRAM?” > Learning together is essential, both because I am still learning but also it create a environment that supports risk-taking. Blended learning tools, such as CodeHS and Codesters, along with books and online tutorials and help sections such as Stack Overflow have been essential for me and my students. I explained this approach in a video with CS50 here - https://www.youtube.com/watch?v=t0I7wQhuHdI WHAT IS THE BIGGEST CHALLENGE IN TEACHING CS AT YOUR SCHOOL? > We are fortunate in many ways, we have a strong team, good resources, etc. Our challenges are turning student learning into projects to share with a larger community. We have started a Tech Expo to create more excitement about sharing projects. We are also focusing more on creative coding with the p5.js library. On a bigger scale, we need to figure out and act on being a helpful and supportive member to the CS learning community. I put on the CC Fest event in NYC and LA to create a K-12 community around creative coding - http://ccfest.rocks. CC Fests are organized collaboratively with a great group of people. In NYC I work with Danny Fenjves of Upperline Code, Stephen Lewis of the Heschel School, Dan Shiffman of NYU and others. The LA version was organized with Jolina Clement of Archer School for Girls, Maxwell Bigman of Immaculate Heart, and Lauren Mccarthy of UCLA. WHAT IS ADMINISTRATION’S SUPPORT (OR LACK OF SUPPORT) LIKE AT YOUR SCHOOL? > They are supportive and encouraging. The best thing they have done, aside from resources and staffing, is let us evolve as a department and let us find our focus on CS, design, and engineering. HOW DO YOU MEASURE SUCCESS FOR YOUR PROGRAM? FOR YOUR STUDENTS? > Good question, not sure this is the best answer but I look at enrollment in our elective class, which is going up. I also look at the quality of the projects and engagement in the Tech Expo. After a couple of years of doing that I think we have created an expectation about creativity and portfolios that will show the community what we do. WHAT IS THE ONE THING YOU LIKE TO TALK ABOUT REGARDING YOUR PROGRAM THAT I HAVEN’T ALREADY ASKED? > I am always striving to build an inclusive and diverse CS ed community. I am excited to collaborate with anyone on that. Please get in touch. THIS PAST SUMMER YOU STARTED #ETHICALCS CHAT ON TWITTER. WHAT MOTIVATED YOU TO DO THAT AND HOW IS IT GOING? > I think that despite good intentions we have not done a good job is showing our students the impact of computing. To support a holistic CS education we need to engage deeply in ethics and identity while we learn the tech. The #ethicalCS edchat is an attempt to build a community of teachers and experts that will work together to create this curriculum. This project is a collaboration with Jeannie Crowley (Ethical Culture Fieldston School), Kara Chesal and Aankit Patel (of NYC Department of Ed CS4All team). I outline our hopes in this Medium essay: https://medium.com/@ed_saber/ethicalcs-bring-ethics-identity-and-impact-to-computer-science-education-eae5a9d4682 TELL ME ABOUT YOUR ONLINE PRESENCE (IF ANY) School name and web site: www.browning.edu Twitter: https://twitter.com/ed_saber Blog: https://medium.com/@ed_saber Other: Creative Coding Festival http://ccfest.rocks Note: The index for this interview series is at http://blog.acthompson.net/2017/10/computer-science-educator-interview.html and is updated as new interviews are posted."
"286","2017-10-05","2023-03-24","https://blog.acthompson.net/2017/10/cs-educator-interview-rebecca-dovithe.html","Rebecca Dovi is a ball of energy. She is full of ideas and always doing cool things. When I last interviewed her (http://blog.acthompson.net/2013/08/cs-educator-interview-rebecca-dovi.html)she was a classroom teacher. Today she is the Director of education and co-founder of CodeVA, a non-profit CS education effort in Virginia. I thought is was time to catch up with her is learn more about what she is doing. Tell us a little about CodeVA and what your goals are? We are a statewide non-profit with the mission of bringing computer science education to all kids in Virginia. We are the first state in the country with mandatory computer science standards. The legislation that passed in 2016 makes computer science co-equal to the other four subjects. In other words computer science must be integrated with math, science, language arts and social studies from kindergarten through eighth grade. This includes coding, and non-coding computer science topics. Our goals are to support schools and teachers with the training and resources needed to support them as they implement the new standards. Why did you move from classroom teaching to starting something like CodeVA? I honestly never thought it would happen. My husband is our Executive Director. In his former life he was an investigative journalist, and saw the impact of poor access to computer science on the communities he covered. When he first mentioned me leaving and us forming a nonprofit I was not exactly enthusiastic about the idea. He made the case - and he was right. Over the last 7-8 years of my classroom life I was doing more and more teacher training. On top of teaching I was our district's computer science lead and doing curriculum and professional development. I also worked for the local NMSI group running AP Computer Science A training across the state. I developed a MOOC for AP CS A, which has been 10% of the growth in APCS A over the past three years - including a lot of the increase in the number of females taking the exam. Seeing the impact that these programs had on the number and diversity of kids able to access computer science was what finally convinced me we needed to try to do this at scale. I miss my classroom, but not including this year (we don't collect demographic data until mid-October) our teachers have taught over 21,000 middle and high school students computer science. I never could have done that from my little classroom. At CodeVA you are doing a lot of teacher education. How is preparing teachers to teach different from teaching students? Teachers won't ever shush! ;) Seriously though, adults really need to buy into what you are presenting. After 20 years in the classroom I experienced a lot of professional development, and very little of it impacted my classroom practice. Now we are able to deliver professional development that really meets the needs of computer science teachers. We have a group of 20 experienced facilitators, from elementary all the way through high school. Since 2014 we have trained over 330 middle and high school teachers and almost 1000 elementary teachers. The best part is watching the community the grows from the teachers in our programs. At CodeVA you also have student programs. What age groups are you working with and what are you doing with each age group? We do camps and programs for kids from first through twelfth grades. All of our programs are arts-integration. Kids spend half their time on computers, and half on hands on activities that support learning the concepts of computer science. As an example one of our most popular camps is called Critter Code. The students participate in a design process to create their own sock animal. They learn Scratch, sew their animal, and by the end of the week they use their sock animal as the sprite in their Scratch story. We've had everything from mosquitoes to falcons, they get really creative. We partner locally in Richmond VA with various organizations in town to bring computer science programs to kids that wouldn't otherwise get access. We are very proud of our numbers. This summer our programs were 55% underrepresented minorities, 49% female, and 35% underrepresented minority female. Out of the kids we served 44% were able to attend through needs based financial aid. This past year we were awarded a Google Rise grant to build an online platform to share out our camps to schools and programs across the state. This is especially important as districts move to incorporate computer science into their core curriculum. These camps give kids more access to computer science,and allow the teachers to practice and try out teaching computer science outside the pressure of the classroom. For high school students we also run a Computer Science Honor Society. We had a lot of requests from our teachers who were required to run co-curricular clubs. Central to the program is the completion of service hours. These hours help teachers run programs, recruit and do tutoring programs in support of computer science. As an example the students from Powhatan HS from a rural district with only one high school completed over 1700 hours of Computer Science Community Service. As a non-profit you must rely on external support. Who is supporting your work these days? We have been very fortunate in our partners. We work closely with a local foundation, the Robins Foundation, that has supported our programs since 2014. In addition we have great continuing corporate partners such as Capital One, Car Max among others. Grants like the Google Rise program have really supported spreading computer science across the state. We have worked closely with Microsoft on our legislative agenda and they have been invaluable in supporting our efforts. This summer we were awarded a grant from the The Tobacco Region Revitalization Commission grant of $361,625 to bring computer science programs to the most rural parts of the state. This is especially exciting for us as we move to learn about the unique needs of teachers and students in this part of the state. What else should people know about you and what CodeVA is doing? We have three really exciting things on the horizon. First, we have been working very closely with our department of education, and the computer science standards are about to come out of draft form and be finalized. Second, to support the new standards we are currently piloting a K5 Coaches Academy that prepares local school district personnel to be elementary computer science coaches and deliver professional development in their home districts. This past summer eighteen people participated, and next summer we will be running multiple cohorts across the state. And finally, to support districts we are working to create district Computer Science Roadmaps. Districts give us data, and participate in interviews, then we supply them with a list of suggestions as they work to implement the new computer science standards over the next few years. We are especially looking at what programs and systems districts already have in place that can be used to support the effort. Learn more about CodeVA at https://www.codevirginia.org/ Note: The index for this interview series is at http://blog.acthompson.net/2017/10/computer-science-educator-interview.html and is updated as new interviews are posted."
"287","2017-10-10","2023-03-24","https://blog.acthompson.net/2017/10/cs-educator-interview-vicky-sedgwick.html","My first teaching jobs were teaching in a pair of schools (half time in each) where I saw students from kindergarten through eight grade. It was a great learning experience but I was happy to move on to high school after a year. Vicky Sedgwick has been teaching computer science to grades K to 8 for ten years now and has developed a great program. I was very pleased when Vicky agreed to answer a few questions for this interview series. WHERE DO YOU TEACH? WHAT SORT OF SCHOOL IS IT? I teach at St. Martin’s Episcopal School which is located in the Los Angeles area, specifically in the San Fernando Valley. It is a very small Preschool-8th Grade private, religious school. I teach Kindergarten-8th Grade. HOW DID YOU GET STARTED TEACHING COMPUTER SCIENCE? In the summer of 2007, the computer teacher at my youngest daughter’s school left and I agreed to take over the computer classes – at least until December. Well it’s now 10 years later and I’m still there even though my daughter moved on from the school years ago. When I started teaching the classes, they were focused on learning computer applications, learning to keyboard, and playing curricular related games. In a previous life, I had been a programmer and systems analyst so when I got bored watching students type for class after class and wanted to do more, I started to investigate what others were doing with programming and kids. Initially, I started with having my Middle School students do some coding in Scratch. Then I found the CSTA 2011 standards and realized that I could be teaching all of my students about computer science and I had even been including some CS into classes already! That’s when I started adding more computer science to all the grades that I teach and each year has become more computer science and less other things. DESCRIBE THE COMPUTER SCIENCE CURRICULUM AT YOUR SCHOOL. WHAT COURSES DO YOU HAVE AND WHAT ARE THE FOCUSES OF EACH? At St. Martin’s, all Kindergarten through 8th grade students have class with me twice a week. Those classes focus on five main areas: Computer Science, Digital Citizenship & Literacy, Productivity Software (yes, I do still teach this), Computer Graphics / Computer Art, and Keyboarding (a small block of time at the beginning of the class to practice technique). We are on a quarter system at my school and at least one-quarter of the year for younger grades and about one-half of the year for older grades is devoted to Computer Science. I am lucky in that I can set my own curriculum which I try to scaffold each year based on what the classes have learned the year before, what new things are available, and this year, the new CSTA K-8 Standards that were released in July. I am really excited about using Micro:Bits and Circuit Playgrounds with my Middle School students and using some Raspberry Pis to teach networking concepts. WHAT IS YOUR OVERALL TEACHING PHILOSOPHY? PROJECT BASED LEARNING? FLIPPED CLASSROOM? IN SHORT, WHAT MAKES YOUR CS PROGRAM “YOUR CS PROGRAM?” I’m a “less me, more them” person as much as I can be. I do a lot of “flipped classroom” IN the classroom with tutorial videos that my students can watch if they need help rather than a lot of whole group lectures. I am also a big believer in students sharing their work. All classes have either a classroom blog (for K-2) or student websites (grades 3 and up) where students share what they are creating. For most grades, I like to have a major “project” that students will end up creating during their CS classes and often these will tie into another subject of the curriculum. For example: Kindergarten students used ScratchJr to show what they knew about the butterfly life cycle 2nd grade created tours of parts of the school in Scratch to share with a class outside of our school 3rd grade students also coded the butterfly life cycle, but they used Scratch 5th grade students created math games in Scratch last year that the younger students in the school played and rated Middle School students created light-up music boxes using Arduino and then had a showcase day at school to show them off WHAT IS THE BIGGEST CHALLENGE IN TEACHING CS AT YOUR SCHOOL? The biggest challenge is outdated equipment and lack of budget to update things. It is amazing what you can do with older equipment though and I like to think that I’m very good and coming up with solutions that cost little or no money. WHAT IS ADMINISTRATION’S SUPPORT (OR LACK OF SUPPORT) LIKE AT YOUR SCHOOL? My principal is great. She trusts me and lets me have control over the curriculum. She loves to tell the community what we are doing and makes sure to bring visitors to the lab to see what is happening there. HOW DO YOU MEASURE SUCCESS FOR YOUR PROGRAM? FOR YOUR STUDENTS? Since all students in my school are required to take computer classes, I measure success based on: The engagement in the classes The “fist bumps” or “hi-fives” when things work well The number of students who want to know if they can do this at home and then actually DO it at home The students who take interest in community events I share that are CS related The “when can we do that again” comments or questions like “Do we get to do that when we are in whatever grade?” In the future, I want to look at how many students take a CS course in high school, if I can get that information for all of them. WHAT IS THE ONE THING YOU LIKE TO TALK ABOUT REGARDING YOUR PROGRAM THAT I HAVEN’T ALREADY ASKED? There is something truly special about being able to teach all students from Kindergarten through 8th grade. It is a real asset to modifying the curriculum to the needs of the students when you see all of them every year they are at the school. It really is gratifying to see the growth of the students throughout their time at our school. They amaze me every single year. LAST QUESTION. YOU’RE ONE OF THE KEY PEOPLE INVOLVED IN THE #CSK8 CHAT. CAN YOU TELL US ABOUT THAT? WHEN, WHY, WHO, ETC? Back in late 2014, Sheena Vaidyanathan, who was the K-8 Teacher Representative on the CSTA Board at the time, put together a K-8 Task Group for CSTA which included: Sheena, Todd Lash, Aung Nay, Laura Blankenship, Patrice Gans, Myra Deister, Irene Lee, and me. We were tossing around ideas of what we could do to bring together K-8 (ages 5-14) CS teachers and help to promote CS in K-8 (ages 5-14). Back when Patrice Gans was the K-8 Teacher Rep on the CSTA Board, she had hosted some #csk8 chats on Twitter and we decided to resurrect those. They started up again in January of 2015 and have been going ever since. The task group doesn’t actually exist anymore but the chat continues with a core group of people which includes Sheena, Todd, Grant Smith, and me. We are also having guest chat moderators more regularly. The live #csk8 chats currently happen on Twitter on the 1st and 3rd Wednesdays of each month at 5pm PT/8pm ET and cover topics of interest to K-8 (ages 5-14) teachers of computer science. We invite anyone who is interested in computer science for students ages 5-14 (you don’t have to be a K-8 CS teacher) to join us during the live chat or just follow the hashtag #csk8 at any time for posts about K-8 Computer Science. TELL ME ABOUT YOUR ONLINE PRESENCE (IF ANY) School name and web site: St. Martin’s Episcopal School stmartinsschool.org Computer Lab Wiki: stmcomputers.wikispaces.com Computer Lab Blog: stmcomputers.edublogs.org Student Portfolios: stmcomputers.edublogs.org/student-eportfolios/ Twitter: @visionsbyvicky Blog: vsedgwick.edublogs.org K-8 CS G+ Community: goo.gl/Zx3Dh2 K-8 CS Chat Archives: goo.gl/nAtaoX Note: The index for this interview series is at http://blog.acthompson.net/2017/10/computer-science-educator-interview.html and is updated as new interviews are posted."
"288","2017-10-12","2023-03-24","https://blog.acthompson.net/2017/10/cs-educator-interview-bob-irving.html","Bob Irving teaches middle school students and seems to have a lot of fun doing so. He constantly learning new things to share with his students. He is half of of a great CS team at Porter-Gaud School in Charleston, SC. I interviewed the other half a couple of years ago – Doug Bergman. Between the two of them students have some great opportunities to learn computer science. WHERE DO YOU TEACH? WHAT SORT OF SCHOOL IS IT? I teach at the Porter-Gaud School in Charleston, SC. It's a 150 year old k-12 independent school with enrollment of about 900. HOW DID YOU GET STARTED TEACHING COMPUTER SCIENCE? I actually taught history and English in high school for years. Was an early adopter of computers (owned a Commodore 64!) and used them in my classes, eventually became a tech integration coordinator. Went back to school to learn application development, which included building business applications with databases. Plan at the time was to segue into development. Graduated just in time for the first tech bubble to burst! Decided to go back to teaching school and haven't looked back since! DESCRIBE THE COMPUTER SCIENCE CURRICULUM AT YOUR SCHOOL. WHAT COURSES DO YOU HAVE AND WHAT ARE THE FOCUSES OF EACH? We have a fabulous curriculum at Porter-Gaud, which was started by Doug Bergman. CS is a required course for all students from grades 5-9, after which students may apply to be in our program. Current upper school enrollment is about 35% of each class, with about that percentage of female participation. I teach grades 5-8. I have each student in the middle school for a quarter. We just were able to institute required classes in 5 and 6 this year, so I am building those out. CSTA said middle school computer science should be about exploration with different technologies, and I heartily concur. So in our ever-changing landscape of tech, right now I am teaching the following in various grades: micro:bit, Kodu, Dash robots, LEGO robots, Scratch game programming, HTML, Minecraft Pi (intro to Python by coding Minecraft), Sonic Pi (live music coding), and physical computing using Raspberry Pi's. I have 2 networks of computers in my room: Windows 10 and Raspberry Pi. I use both according to what best suits the needs. As always, there are other things on the horizon that I am investigating for future use. Right now that includes 3 new 3D printers and MIDI controlled music, and looking into Makerspace stuff that fits with what we do. WHAT IS YOUR OVERALL TEACHING PHILOSOPHY? PROJECT BASED LEARNING? FLIPPED CLASSROOM? IN SHORT, WHAT MAKES YOUR CS PROGRAM “YOUR CS PROGRAM?” I live for the ""aha"" moments in education, and I think they are best achieved by having a very hands-on, project-based experience. I like to answer student questions with other questions (""Where do you think you could find help for that?"" or ""Have any of your neighbors figured out how to do that?""). I believe in giving as little direct instruction as I can get away with, though I do supplement lessons with videos on my YouTube channel (crouchingpython). Middle school students do not want to listen to me talk! But I am sensitive to those who are struggling and need some hand-holding! WHAT IS THE BIGGEST CHALLENGE IN TEACHING CS AT YOUR SCHOOL? I really can't complain. We have amazing support from our administration and have a lot of latitude to explore different approaches. One factor that helps us is being an independent school. That not only frees us from mandated teaching to various tests, but our CS program has become a major selling point to prospective families. WHAT IS ADMINISTRATION’S SUPPORT (OR LACK OF SUPPORT) LIKE AT YOUR SCHOOL? See above. We get financial support, as well as time in the schedule. HOW DO YOU MEASURE SUCCESS FOR YOUR PROGRAM? FOR YOUR STUDENTS? This is going to sound a little cheesy, but I measure it by the excited students who usually run into my classroom to get started! I'm always trying to up the engagement factor. I also get a wide range of interest and ability, so I try to make sure that those students who are self-described ""not techy"" are also getting it, are engaged, and leave the class feeling that all this coding and stuff is actually pretty cool. WHAT IS THE ONE THING YOU LIKE TO TALK ABOUT REGARDING YOUR PROGRAM THAT I HAVEN’T ALREADY ASKED? I promise my students on day one.... HARD FUN. This is something that I stole from one of my heroes, Seymour Papert. They all know exactly what I mean by that in a week or two! It's not easy stuff, but they want to make it work. I also host a Minecraft Club here, which this year has over 70 members. This is just for ""playing"" Minecraft. TELL ME ABOUT YOUR ONLINE PRESENCE (IF ANY) School name and web site: Porter-Gaud. www.portergaud.edu Twitter: @birv2, @crouchingpython. I also host a weekly Twitter chat for Raspberry Pi teachers called #PiChatUSA. Blog: www.bob-irving.com YouTube: crouchingpython Note: The index for this interview series is at http://blog.acthompson.net/2017/10/computer-science-educator-interview.html and is updated as new interviews are posted."
"289","2017-10-13","2023-03-24","https://blog.acthompson.net/2017/10/csta-2018-conference-call-for-proposals.html","It’s that time again! I have to get to work on a proposal. Or two. This is the best conference for computer science educators. If you have something good to share you should definitely submit a proposal. The Computer Science Teachers Association (CSTA) invites you to submit a proposal to present at the 2018 CSTA Annual Conference. This event will be held July 7-10, 2018 in Omaha, Nebraska. The CSTA 2018 Program Committee seeks proposal submissions related to the practice of teaching and learning computer science and information technology in K-12. This year the conference is seeking 3 hour workshops; 1 hour sessions; 20 minute mini-sessions; and 1 hour Birds of a Feather sessions. Proposal submission requires presenter and presentation information including a brief overview/abstract used to inform attendees about the session; as well as a PDF providing more detailed information about the session. All proposals will be submitted through our online system; however, You may preview the application before starting your submission here. Proposals may be started and updated between the opening and closing of the system. The deadline for proposals is midnight (Hawaiian time) on November 26, 2017. Review of proposals will occur shortly thereafter and notification of the program committee's decisions will be made in December/January 2017. All submissions will be evaluated on the following criteria: appropriateness and relevancy for professional development for K-12 computing; feasibility of the proposal; timeliness of the topic; writing and presentation; completeness of the submitted information; and consideration for the breadth and balance of topics at the conference. Successful proposers should expect to submit a draft copy of their presentation by June 1, 2018. Draft presentations will be posted on the website for attendee reference and note-taking. Some sessions may be selected for videotaping, which will be shared online post-conference. All workshops and sessions will be photographed. Workshop presenters will be given a list of registered attendees prior to the conference so that they may email them with any pre-workshop materials or downloads. All presenters are expected to register for the conference. Why present at CSTA 2018? The CSTA annual conference is the only CS conference specifically dedicated to meeting the needs of K-12 computer science educators. Come network with your peers, present your great ideas, and learn best practices. Here is what some 2017 conference attendees had to say about the conference: I learned so much and am more motivated than ever to bring essential CS skills to my students and to my colleagues. Amazing conference with so many takeaways and ponderings. I am leaving with specific strategies for our district, and numerous contacts for help, as we move forward. It is a real live computer science conference. Loved it! The resources...Best Exhibit hall, great sessions.... it was just... timely Additional conference details can be found here. The deadline for proposals is midnight (Hawaiian time) on November 26, 2017. Submit your proposal here. We look forward to receiving your proposals and to your attendance at the conference. The 2018 Annual Conference Planning Committee"
"290","2017-10-17","2023-03-24","https://blog.acthompson.net/2017/10/cs-educator-interview-mike-thompson.html","I met Mike Thompson (no relation) just recently. He was giving a professional development session on teaching middle school students with AppInventor. I wanted to see how others taught that and I got some very helpful ideas and information from him. WHERE DO YOU TEACH? WHAT SORT OF SCHOOL IS IT? I teach Technology Education at Haverhill Cooperative Middle School in North Haverhill NH. It is a 4-8 Public Middle School in a rural district with around 250 students. HOW DID YOU GET STARTED TEACHING COMPUTER SCIENCE? My interest in Computer Science started in High School, then continued in college, and has always been some part of my life. Before being a Tech Ed teacher I was a Para Educator, and an enrichment provider with the after school program. I did an Enrichment using Lego Mindstorms, and part of the reason I was asked to apply for the Tech Ed position was the success of that program. As such, it was only natural that I add a heavy amount of Computer Science to my 4-8 curriculum. DESCRIBE THE COMPUTER SCIENCE CURRICULUM AT YOUR SCHOOL. WHAT COURSES DO YOU HAVE AND WHAT ARE THE FOCUSES OF EACH? I do all of the computer science here at HCMS, and am happy that 3 of the 5 grade levels I teach are heavily focused on Computer Science, and one other has a slight focus on it. My grade 4 students use Code.org pretty regularly to explore coding, my Grade 5 Students Learn Computer Science through programming Lego Mindstorms, my Grade 6 students continue their study of Lego Mindstorms, and my grade 8 students do Mobile Application Development with App Inventor 2. WHAT IS YOUR OVERALL TEACHING PHILOSOPHY? PROJECT BASED LEARNING? FLIPPED CLASSROOM? IN SHORT, WHAT MAKES YOUR CS PROGRAM “YOUR CS PROGRAM?” My program is project based, flipped, and focused on learning by exploration. Typically, I give my students some manner of design challenge, and guide them towards where they can find answers to solve the problem I present. Certainly some items, especially at first need to be given directly, but I find students are more engaged if they need to work for the answers they want. I am also developing some short videos on the basics of Lego Mindstorms Ev3 programming that my students will be able to use as refreshers when they get stuck. WHAT IS THE BIGGEST CHALLENGE IN TEACHING CS AT YOUR SCHOOL? The biggest challenge with trying to teach any subject other than Math or English is time. Each year the amount of time I have with my students has been reduced, or changed in a way that makes it difficult to have a rigorous program. WHAT IS ADMINISTRATION’S SUPPORT (OR LACK OF SUPPORT) LIKE AT YOUR SCHOOL? At my school the administration give lip service support to our STEM efforts, but continues to reduce class time for STEM. HOW DO YOU MEASURE SUCCESS FOR YOUR PROGRAM? FOR YOUR STUDENTS? I consider my program successful when I see my students engaged in learning. I consider my students successful, when their ability to problem solve increases. I certainly believe that the technology I am using to teach my students is important, as is gaining some level of mastery over that technology. The true measure of my SUCCESS as a teacher however, is my students ability to creatively solve problems in any situation, NOT just in my classroom. WHAT IS THE ONE THING YOU LIKE TO TALK ABOUT REGARDING YOUR PROGRAM THAT I HAVEN’T ALREADY ASKED? How do you effectively teach students? By figuring out how they learn. TELL ME ABOUT YOUR ONLINE PRESENCE (IF ANY) School name and web site: Haverhill Cooperative Middle School http://hcms.sau23.org/ Twitter: @kleenur Blog: www.SuperStarStem.com Facebook is SuperstarStem Blog Note: The index for this interview series is at http://blog.acthompson.net/2017/10/computer-science-educator-interview.html and is updated as new interviews are posted."
"291","2017-10-18","2023-03-24","https://blog.acthompson.net/2017/10/am-i-doing-it-all-wrong.html","My programming students are learning about methods. Functions, subroutines, what ever you want to call them they are important. Coming up with examples for demos and projects is an interesting exercise. There are actually several parts of teaching methods so starting with something that is too complex can overwhelm students. So I like to start easy. Yesterday I started using area and circumference of a circle methods. public double GetArea(double r) { return Math.PI * Math.Pow(r,2); } public double GetCircumference (double r) { return 2 * Math.PI * r; } Nice and simple. I can focus on the function specification – the function’s type, it’s name, and it’s short parameter list. I can also use the result very easily in the demo program. Student want to know why they can’t just use that simple bit of code from the body of the function inline with the rest of their code though. And it is a fair question. That lets me talk about reusable code, avoiding redundancy, and all that stuff. It’s almost convincing. It’s all true of course but it hardly makes an impression. That requires examples that are a bit longer and more complicated. Lately I have been using the Palindrome project for this next level. Now I have students create a program to determine if a string is a palindrome or not before this. They generally have the various steps (strip out not letters for example) inline in a single method. What I do here is ask them to break the various code segments out into methods. This makes the main routine simpler and easier to understand. (Assuming good names.) and this makes the point better, I think, than the simple one line methods. It’s still hard to get students to think of this sort of modularization when they do their own designs. It gets easier when we talk about writing classes though. I suspect that getting students to design around methods would be easier if I were teaching with functional programming language. I can actually hear several voices in my head saying “Yep” and “I told you so.” The problem for me is that a) I’ve never used a functional programming language, and b) since I tend to think of breaking things down into methods already there is a part of me that sees it as obvious. Yep, the old “I learned it this way so my students should learn it this way” attitude. Now I have an image of Grace Hopper standing next to me with a firm look on her face. What’s my point? I guess it is that I have to constantly look at what I am doing with a critical eye to what I can do better. I’ve really liked the way I have been teaching methods but I have to ask myself if the design part is coming too slowly should I be doing something different? Darn but this thinking and caring thing is hard."
"292","2017-10-19","2023-03-24","https://blog.acthompson.net/2017/10/cs-educator-interview-michelle-lagos.html","Michelle Lagos serves on the CSTA Board which is how I first met her. She is currently an At-Large member. Several years ago she was the International Representative. She brings some interesting perspectives to board meetings and CSTA is lucky to have her involved. I was very pleased when she agreed to this interview. WHERE DO YOU TEACH? WHAT SORT OF SCHOOL IS IT? I teach at the American School of Tegucigalpa, a bilingual private school in Honduras. We are a U.S. accredited school (by AdvaceEd) which grants us the right to extend High School degrees and for over a decade have been offering the International Baccalaureate Program as well. Our students have the opportunity to graduate with up to three diplomas: High school, IB and Honduran Science and Humanities Baccalaureate as granted by the Honduran Ministry of Education. The American School of Tegucigalpa was founded in 1946 and it´s legacy families are now in their third generation of students. HOW DID YOU GET STARTED TEACHING COMPUTER SCIENCE? I started teaching CS in 2000 as a senior at the Universidad Católica de Honduras (Catholic University) while finishing my CS Engineering degree. I was offered a job in a bilingual school as a Computer class teacher. From there I got hooked on teaching and have dedicated most of my professional career to education. DESCRIBE THE COMPUTER SCIENCE CURRICULUM AT YOUR SCHOOL. WHAT COURSES DO YOU HAVE AND WHAT ARE THE FOCUSES OF EACH? Our computer science curriculum runs from K-12. We started teaching application computing and over the course of a few years we have been moving gradually towards CS. We follow ISTE standards for K-2 and CSTA standards for 3-12. With high school (which is where I teach) we are currently basing our course in the Computer Science principles course, and using the common-sense media Curriculum for our digital citizenship unit. WHAT IS YOUR OVERALL TEACHING PHILOSOPHY? PROJECT BASED LEARNING? FLIPPED CLASSROOM? IN SHORT, WHAT MAKES YOUR CS PROGRAM “YOUR CS PROGRAM?” I consider my philosophy to be quite oriented to project based learning. Considering that our courses are one semester long, I find that we can get better results through projects. What makes it my CS program? My kids!!! Every year my course is different depending how fast my kids absorb the content. As any teacher I guess, I tweak and adapt my lessons sometimes on the spot and the “aha” moments I get are the best reward! WHAT IS THE BIGGEST CHALLENGE IN TEACHING CS AT YOUR SCHOOL? The biggest challenge is time! We only get one semester as our students have a full academic load so we have to adjust the schedule so it doesn’t become too much for them. This then contributes to a lack of interest in the subject by most stakeholders at school. YOU TEACH AT AN ""AMERICAN SCHOOL"" IN HONDURAS, IS WHAT YOU TEACH IN YOUR SCHOOL MUCH DIFFERENT FROM OTHER SCHOOLS IN HONDURAS? ANY SPECIAL CHALLENGES OR OPPORTUNITIES THAT YOU HAVE? I believe that what we teach is pretty different from our Honduran public system schools. (Honduras education system is divided into two mayor categories, public and private and within the private we have the Spanish-only speaking schools and then we have bilingual schools, mostly Spanish English. The latter is where my school fits into. For starters we teach in English, we aim for higher levels of academic performance than public schools but still try to comply with the country’s education curriculum objectives. We have the opportunity that my school is currently starting a STEM program and CS has found its place in it. Again, our biggest challenge is time. Most of our schools public and private struggle with budget but the public system struggles much more. Remember Honduras is a third world country, second poorest in all the western hemisphere. This means that sometimes getting the resources we would like takes time and much negotiating. However, because most of our students leave Honduras for their higher education, we have the goal to prepare them the best we can to be a competitive student in most areas anywhere they would like to go. An opportunity I, as a teacher, takes advantage of is that our government has made CS credits mandatory for graduation, so that helps a lot. WHAT IS ADMINISTRATION’S SUPPORT (OR LACK OF SUPPORT) LIKE AT YOUR SCHOOL? My administration is more supportive than in other schools. We have a great curriculum director that understands the need of CS in today’s students lives. Our principals are also supportive when my department (which I am the head of) bring up new project proposals, they take them seriously and bring it up to the rest of the decision-making authorities. If there is any room for improvement it is along the lines of people understanding that CS is much more that hardware, plain coding or software. But we are doing our best to shed light on the vastness of the subject and its scope. HOW DO YOU MEASURE SUCCESS FOR YOUR PROGRAM? FOR YOUR STUDENTS? I measure success in my program when I hear my students don’t have many issues in their CS courses in college. That feedback is extremely important and helpful. I assess my students by abilities and when I see them understanding coding and loving our robotics unit, I find my program successful. YOU'RE VERY INVOLVED IN CSTA AS A BOARD MEMBER. WHAT MADE YOU GET INVOLVED IN THAT WAY? Sometimes being a CS teacher is a lonely affair if your department is not that big and your school is a bit ahead than others. I started looking for a community of teachers where I felt I belonged and could rub elbows with. A place where I could go for news, resources and support. I browsed through many associations and felt that CSTA fulfilled the purpose of support I needed as a CS teacher. I wanted to be more involved, but I couldn’t belong to a chapter as international chapters don’t exist. So, when I read in The Voice the call for nominations I decided to apply for international representative. I thought it would be a long shot but I am so proud to say that I became the first female latina to be part of the board and now the first international member to be serving in a position other than the international representative. When I started working with the board, I felt right at home with a group of people that shared my passion for both CS and teaching. People that were doing serious work and proposals to improve CS around the world and I couldn’t be prouder to be a part of it. To this day I feel that CSTA is doing a great job supporting K-12 CS teachers. Every year the conference gets better and bigger. There are lots of opportunities for teachers to get PD and network with other CS teachers which becomes a valuable thing. WHAT IS THE ONE THING YOU LIKE TO TALK ABOUT REGARDING YOUR PROGRAM THAT I HAVEN’T ALREADY ASKED? Who can benefit from CSTA besides Michelle and AST? I am constantly trying to renew and update my curriculum and I want my kids to have more opportunities to learn what's out there. PD would be good as well as speakers and invitations to conferences. I also try to promote CS in girls and help them discover different opportunities in life. TELL ME ABOUT YOUR ONLINE PRESENCE (IF ANY) ·School name and web site: American School of Tegucigalpa www.amschool.org Twitter: @mglagos .IG: @mglagos .Facebook: Michelle Lagos Rico de Javier Note: The index for this interview series is at http://blog.acthompson.net/2017/10/computer-science-educator-interview.html and is updated as new interviews are posted."
"293","2017-10-20","2023-03-24","https://blog.acthompson.net/2017/10/computer-science-educator-interview.html","From time to time I like to highlight computer science teachers with virtual interviews posted on my blog. The first series was in 2013 (CS Educator Interviews: The Index ) and I decided it was time to start a new series in 2017. New interviews will appear on Tuesdays and Thursdays when I have new interviews to share. One improvement in this series is a larger number of teachers who teach elementary and middle school students. K-8 computer science is growing by leaps and bounds which is a wonderful thing. This post will be regularly updated as new interviews are posted. Here is the current list of interviews. Rebecca Dovi – The Director of education and co-founder of CodeVA, a non-profit CS education effort in Virginia. Emmanuel Schanzer - Director of Bootstrap - computer since mixed with algebra, physics, and more. Sheena Vaidyanathan - an amazing and innovative K-8 computer science teacher and technology integrator in California. Steven Floyd - Computer Science teacher from a secondary school in London, Ontario, Canada Mike Zamansky - Hunter College New York City - new since he left the high school classroom Saber Kahn – Computer Science teacher at the Browning School, a K-12 independent boy's school in Manhattan, NYC Bob Irving – middle school computer science teacher at Porter-Gaud School in Charleston SC Michelle Lagos De Javier – computer science teacher at the American School of Tegucigalpa, a bilingual private school in Honduras Mike Thompson - Technology Education at Haverhill Cooperative Middle School in North Haverhill NH. Adam Newall - middle school math/CS teacher using Bootstrap to teach algebra and CS Vicky Sedgwick – computer science teacher for grades k-8 at St. Martin’s Episcopal School in the Los Angeles California area Jackie Corricelli - High School CS teacher from Connecticut, also AP CS trainer/consultant Adam Michlin - Grade 6 through 12 computer science teacher in New Jersey."
"294","2017-10-24","2023-03-24","https://blog.acthompson.net/2017/10/cs-educator-interview-jackie-corricelli.html","Jackie Corricelli conducts Advanced Placement Computer Science summer institutes for teachers. That is how I first met here. And I learned a lot from her. She teaches workshops the way she teaches students so so practices what they preaches. She has won several state-wide and national awards for teaching. WHERE DO YOU TEACH? WHAT SORT OF SCHOOL IS IT? Conard High School, West Hartford, CT Public HS HOW DID YOU GET STARTED TEACHING COMPUTER SCIENCE? I had a background in programming due to working at Raytheon as a Systems Engineer. I learned C++ and Matlab on-the-job. In addition, while growing up, I played with Basic Programming on a Commodore Computer that my Aunt gave to me. The programs arrived in Ranger Rick Magazines and I would save them onto a tape. I used Basic to make shapes and later, in high school to program my graphing calculator. I never saw these things (playing on the Commodore or programming my calculator) as ""computer science"". I did not get the connection until I worked at Raytheon. My certification is in teaching math. I guess I started teaching CS when I helped students see how to program their calculator in math courses. My official start teaching computer science coursework was about 5 years ago at Conard when my supervisor and I agreed AP CS A would be helpful to our students to become better problem solvers. So we started AP CS A in Fall 2012. I was trained by Stevie Lord at Taft; two years in a row (Summer 2011, 2012). Then I got involved as an AP CS Principles Pilot Teacher in Summer 2013. This meant I received a lot of great training from College Board and many great CS Teachers from across the US and contributed to training for other teachers for College Board to support implementation of this course. I did not hear about the CSTA until the College Board Conference. I joined while at that conference in Summer 2013 and this gave me a network of CS teachers close to home. At Conard, we started offering CS Principles as a course in Fall 2014. DESCRIBE THE COMPUTER SCIENCE CURRICULUM AT YOUR SCHOOL. WHAT COURSES DO YOU HAVE AND WHAT ARE THE FOCUSES OF EACH? We have courses in computer science listed on page 22 here: https://drive.google.com/file/d/0B9qL2-maX-Q0R2NGUWVUcDJKd3U3bTJRWDdjOFctd2Z2eWNZ/view CS Courses are offered in our Math Department and in the Technology/Engineering Department. Computer Science Courses are assigned STEM Credit. WHAT IS YOUR OVERALL TEACHING PHILOSOPHY? PROJECT BASED LEARNING? FLIPPED CLASSROOM? IN SHORT, WHAT MAKES YOUR CS PROGRAM “YOUR CS PROGRAM?” My philosophy is to continue to love to learn with my students so I can help them to do the same to the best of my ability. What works each year depends on my students. Sometimes I create videos or ""flip"" the class, but that does not always work. Sometimes I create a great project as a way to help them to learn. For it to work, the project needs to be a good fit. Sometimes I lecture and/or drill a concept for them to help them become more fluent. It really depends on the students, the class, and what is working. My favorite thing to do is to help students do something with what they just learned. WHAT IS THE BIGGEST CHALLENGE IN TEACHING CS AT YOUR SCHOOL? The biggest challenge is to be sure that people understand what Computer Science is so that students understand the courses that they are signing up to take and how these courses are related to their future. Computer Science is interesting, accessible to all, and fun. However, when you really start tracing code or understanding programming languages, it is not easy. Helping students to see joy in this struggle is the key. We continue to use the Hour of Code and rely on the support of many adults in our large school to help all students realize this and sign up for computer science coursework. We have several amazing teachers, interesting courses and many great clubs, all to provide different access points for our students. The more ways students can see how they are connected to computer science and the more adults that are working together with this goal in mind, the more likely it is that they will sign up and love it! WHAT IS ADMINISTRATION’S SUPPORT (OR LACK OF SUPPORT) LIKE AT YOUR SCHOOL? Administration in West Hartford Public Schools is extremely supportive. The number of Computer Science teachers in our school has increased with student demand. We have teachers in our math department and our technology and engineering department working toward helping students learn computer science. For us to attend training, have time and space to run the Hour of Code, manage and be supported for Clubs related to CS, and continue to offer interesting and fun courses that appeal to our students, we have needed and enjoyed their support. Without it, we would not have been able to develop and sustain our growth. HOW DO YOU MEASURE SUCCESS FOR YOUR PROGRAM? FOR YOUR STUDENTS? Success is measured by the extent to which students feel supported and challenged while they are here and are able to graduate and be successful at college and career pursuits. My number one goal is to help students realize that they are in control of their lives and that their most important tool is knowledge. YOU TEACH ADVANCED PLACEMENT WORKSHOPS AND SUMMER INSTITUTES FOR TEACHERS. WHAT’S INVOLVED IN THAT AND HOW DID YOU GET STARTED? As a pilot teacher, I was asked to teach for AP CS Principles. I graded the Performance Tasks for ETS in June 2016 and June 2017 to continue to be sure I have the information teachers need to support their students. To become an institute teacher, I recommend that teachers participate in the grading. From there, you will develop experience with the course that could lead to having opportunities to teach. TELL ME ABOUT YOUR ONLINE PRESENCE (IF ANY) Twitter: @mrscorricelli Blog: www.corricelli.com Linkedin: https://www.linkedin.com/in/jacqueline-corricelli-918663145/ Book: https://www.amazon.com/Computer-Science-Principles-Advanced-Placement/dp/0738612340/ref=sr_1_1?ie=UTF8&qid=1507205695&sr=8-1&keywords=jacqueline+corricelli Note: The index for this interview series is at http://blog.acthompson.net/2017/10/computer-science-educator-interview.html and is updated as new interviews are posted."
"295","2017-10-25","2023-03-24","https://blog.acthompson.net/2017/10/observations-on-parents-shopping-for.html","We had an open house for prospective students and their parents at school on Sunday. We’re a private school so getting parents to see a reason to spend the money for their children to come is important. We talk to a lot of parents at these events. While not data I had a few interesting observations. One: More and more girls are expressing interest in computer science every year. Many of them are actually doing some programming of sorts in middle school. Some in school, some in clubs, some in FIRST Lego league, some on their own. A lot of Scratch for sure. But that’s fine. It is driving interest in learning more. Girls have been happy to talk about what they are doing. Two: Parents often tell me their child is into computers. I ask the student if that means they play video games or do they write programs. For boys it is usually video games or a mix of video games and some programming. For girls it is almost always programming. There is more programming by both boys and girls than these was a few years ago. Three: Lots of interest in robotics. I credit FIRST Lego League. On the other hand I had one father ask about girl's involvement in our robotics team. He seemed surprised when I told him that team wide and in leadership roles it was about 50/50 boys and girls. I think that was the answer he wanted though. Four: Mothers are as likely to come visit the CS department table as fathers. And both ask tough questions about the curriculum. Parents are looking for a solid CS program in high schools. One popular question is how long do students have to wait to take a CS course. For us, freshmen year with a required course. Parents seem to like that we start early and have a solid path for more depth in CS. Five: I'm hearing about more middle schools using Scratch with students. It will be interesting to see how that rolls into HS CS. Clearly though middle schools are jumping into computer science in increasing numbers. I worry about the students at those schools who go to high schools without real computer science programs. Will they lose the interest that is built in middle school?"
"296","2017-10-26","2023-03-24","https://blog.acthompson.net/2017/10/cs-educator-interview-adam-michlin.html","Adam and I interact mostly on Facebook where he has created a number of very active Facebook groups including one called Computer Science Educators He's a man of ideas and opinions as well as a seemingly insatiable drive to share information with others. I was pleased he was willing to take the time with my questions. Where do you teach? What sort of school is it? I just started a new job at Golda Och Academy (K-12), a Jewish school in West Orange, NJ where I am responsible for the 6-12th grade curriculum. How did you get started teaching computer science? Historically, I have a Bachelor's Degree in Computer Science from the University of California, Santa Cruz, where I was an undergraduate teaching assistant to a whole host of lower division and upper division Computer Science classes. When I finished my BS degree, I lasted (literally!) one day in the computer industry and went on to become a professional musician and music teacher. Later, living in Naples, FL, my full time music teaching load was cut to 50% due to the national financial crisis and a single computer science class of all levels was added to my schedule for the following year to increase my load to 66% and give me full benefits. Ultimately, that class turned into a full department of two teachers, 150+ students, and a four year 9-12 CS curriculum which I was training my fellow district teachers in for 3 years. Describe the computer science curriculum at your school. What courses do you have and what are the focuses of each? My previous private school had Introduction to Programming for students 8th-12th using Visual Basic taught by a colleague and I taught Intermediate Programming (C/C#), Advanced Video Game/Mobile Programming (C#/Swift), Advanced Computer Security/Web Programming (Assembly, C, PHP and JavaScript), and AP Computer Science A. I am currently working on expanding this curriculum to include 6th and 7th grade as well as to replace AP Computer Science A with a class of equal or more rigor and expect to be adding Data Structures in C++ shortly. What is your overall teaching philosophy? Project based learning? Flipped classroom? In short, what makes your CS program “your CS program?” Having first taught (as a TA) in an university environment, I find myself to be fairly traditional in my approach with lectures combined with lab time and prefer straight rows of desks with computers and mostly shy away from group work except in the most advanced classes. Where I depart from tradition is I avoid tests and homework and work very hard to intrinsically motivate students with project based learning. Students seem particularly motivated to write their own video games and learn advanced computer security (truthfully, hacking in the older MIT sense of the word - students are inundated with media surrounding computer security everywhere they get their news and I have found it to be my most popular class). My running joke is that my biggest discipline problem is that students don't want to leave my class when the bell rings, which isn't far from reality. What is the biggest challenge in teaching CS at your school? My current administration is extremely supportive, but I will say that historically there are always two main challenges. One, is getting the administration to understand that the material being taught is experimental creating somewhat of a disconnect with traditional teacher evaluation solutions. Other people have books that tell them what to teach in what order and pretty much everyone agrees what should be taught in, for example, an Algebra I class, whereas I am working on classes with little to no precedent in K-12 that I ultimately hope to write the book for others to use. Two, is getting Information Technology to understand that the staggering pace of change in Computer Science means that a, to be diplomatic, less conservative approach to new hardware and software is necessary. What is administration’s support (or lack of support) like at your school? As above, administration is at my current school is extremely supportive. They well understand that Computer Science is a young subject and allow me the flexibility to create new classes and curriculum. Access to the 6th and 7th grade students is particularly exciting and I am already finding 6th and 7th graders who are capable of doing collegiate level Computer Science work. How do you measure success for your program? For your students? Having grown two entirely elective programs, one public and one private, to the point of overloading my schedule, the percentage of students involved in the program is part of how I define my success. We instituted a Girls Who Code club at my previous school and grew the female representation in the program from 5 students to over 50 in 3 years, which is one of the achievements of which I am most proud. I also keep in touch with as many of my former students, particularly those majoring in Computer Science, to see how well prepared they felt walking in a collegiate computer science program. To me, a 5 on the AP exam means nothing if students aren't walking into college and knocking their CS classes out of ballpark. It fascinates me that one of most common things I hear from my students majoring in CS is how useful learning to programming in the Linux/UNIX command line was for them. What is the one thing you like to talk about regarding your program that I haven’t already asked? I am particularly proud of my interweaving of history with computer science. Students have access to a whole host of working vintage computer systems including Apple IIs, Ataris and (soon!) Commodores for hands on use. Vintage computers are also integrated into the curriculum using Apple IIs to teach beginners AppleBASIC, 6502 assembly to advanced students and we use famous early Atari games to teach concepts including object oriented design and applied trigonometry. At the same time, other parts of curriculum are cutting edge with tools like Swift 4/Xcode 9 and Visual Studio 2017 (C#/Visual Basic). In part, the goal is to get students to stop worrying about Windows vs. Macintosh vs. Linux and realize everything is just a computer whether an Apple II+ from 1979 or their brand new Apple iPhone <insert latest number here> in their pocket. Hence the term ""Cutting Edge Old School"" (ceos) Computer Science. Tell me about your online presence (if any) School name and web site: Golda Och Academy <http://www.goldaochacademy.org> Twitter: https://twitter.com/amichlin Blog: http://www.ceos.io/ Note: The index for this interview series is at http://blog.acthompson.net/2017/10/computer-science-educator-interview.html and is updated as new interviews are posted."
"297","2017-10-30","2023-03-24","https://blog.acthompson.net/2017/10/cs-teacher-interview-emmanuel.html","I interviewed Emmanuel Schanzer in my last series. But like so many things, Bootstrap, the program he directs has grown and expanded. A number of teachers in this series teach using Bootstrap curriculum as well. So an updated interview with Emmanuel seemed like a good idea. Besides that I am a big fan of both Emmanuel and the Bootstrap program so highlighting them is a logical move for me. Find out more about Bootstrap at http://www.bootstrapworld.org/ (Read my previous interview with Emmanuel Schanzer here). When I interviewed you four years ago, Bootstrap was a single curriculum that was largely a mix of Algebra and computer science with game creation tossed in to make it even more interesting. Today Bootstrap has several courses. How did that happen? Four years ago, Bootstrap offered a single course, which carefully-designed to align Algebra and Computer Science based on substantial research into both Math-Ed and CS-Ed (given the decade of work that went into it, I wouldn’t say the game was “tossed in” !). Back then we reached a little over 5,000 students each year. Things sure have changes since then! Today, we offer curricula for Algebra, Data Science, and more Advanced CS, and are piloting a course in Physics in conjunction with the American Association of Physics Teachers, the American Modeling Teachers Association, and STEMteachersNYC We reach more than 25,000 students annually, making us one of the largest providers of in-school programming in the country. There are two factors that led to this expansion: 1) We had hundreds of math teachers who dug into Computer Science with Bootstrap:Algebra, found that they liked it, and came back asking “what else have you got?” Schools that invested in Bootstrap:Algebra as a way to improve math instruction (or to check the “CS box”) suddenly found that there was now greater demand for dedicated CS classes, and were able to leverage their existing Bootstrap teachers teach them. This came as a happy surprise to us: rather than competing over the same small group of CS teachers nationwide, we were accidentally creating new CS teachers from the enormous pool of math teachers that have adopted our curriculum! 2) Lots of governors, superintendents and principals made pledges to bring CS to every child, but discovered that dedicated CS electives and required CS classes were either incredibly expensive (hiring/retaining new teachers), logistically impossible (adding a new class given finite hours in the day and rooms in the building), or actively undermined equity (opt-in classes are only taken by students with the means and/or inclination). As a result, they started asking how they might integrate CS into other subjects — and authentic integration is our special sauce! Squeezing CS into math is something folks have been trying to do for decades, with little success. Our success with Bootstrap:Algebra means we’ve got a track record of doing it right, which means we’ve been approached about integration into everything from Physics to Social Studies. Bootstrap: Physics appears to be a way of integrating computer science and physics as a way to teach both. Is that a fair read or would you describe it differently? Absolutely. When the AAPT and AMTA approached us about integrating computer science into Physics, we jumped at the chance! The modeling folks have an incredible research basis for their approach, which happens to dovetail perfectly with the pedagogical philosophy we use in Bootstrap. Modeling is a powerful approach to connecting the real world with mathematical abstractions, and students in Bootstrap:Physics blend empirical observations with mathematical models they literally build through programming. Seeing their own models running as a simulation - superimposed over data they’ve collected - is a potent experience. We’re piloting the course, now, and the response from teachers and students has been fantastic. Two of your courses, Reactive and Data Science, seem to be more purely computer science focused than anything else you do. Where do you see them fitting? Grade level, added to existing courses, etc.? We’ve building Bootstrap:Data Science for students in grades 8-12, and it’s scalable as a first CS class or an in-depth course on Data Science for students who’ve taken years of programming. The module covers introductory statistics (measures of center, linear regression, plotting and graphing, etc.) as well as introductory CS (looping/iteration, methods, functions, unit testing, data types and structures, etc.). In Bootstrap:Data Science, students select a dataset they care about, and learn how to analyze the data, identify trends, and search for correlations. We’re also making sure the curriculum addresses the infamous ""Austerity Problem” by teaching rigorous software engineering techniques — so that students know how to verify their claims, instead of just making them. Finally, every student in Bootstrap:Data Science completes a research paper that describes their dataset, their analysis, and their findings. The beauty of Data Science is that it’s applicable everywhere: Business teachers use tabular data and charts all the time to teach students about business models and sales data; Statistics teachers use tabular data, mean median and mode, and plotting; we think a lot of CS teachers will start to be looking at Data Science over the next few years, as a way to engage students in questions they care about (""who is the best quarterback of all time?”, “which restaurants are the best value?”, etc.). We’ve already had a lot of interest from each group, but there’s one other audience of teachers who have largely been left out of the STEM discussion: social studies teachers. What IS the impact of the electoral college? How do we know if a policy is successful or not? Is “Stop and Frisk” racist? Social Studies teachers regularly deal with questions about data and society, focusing heavily on making inferences from data and writing persuasively about the results. So yeah, plenty of folks will use Bootstrap:DS as a semester-long CS elective, but we think the magic comes from integrating into courses like social studies, where data analysis and writing matters most. Add this to our work in Physics and Algebra, and every school in the US can now offer three courses in Computer Science — all without having to find room in the budget for a new teacher or room in the schedule for a new class! Bootstrap:Reactive is your classic hardcore CS — we cover data structures, rigorous software engineering in a Python-like environment, and a twist on FRP and MVC-style architectures. We see it as a semester-long CS course, or an integrated module into a full-year AP or post-AP CS course. It’s designed to be a follow-up to our Algebra and/or Data Science modules, and allow students to build any program they can imagine. Even though it’s only been out for a short time, we’re already seeing hundreds of students each year complete the class, building everything from maze-solving and multiplayer games to cell-phone apps. Schools like New York’s Academy for Software Engineering are using Bootstrap:Reactive as the programming module for AP CS Principles, and seeing students build on what they know from algebra. Leveraging prior knowledge is a huge win for us, and when it’s prior knowledge from a class that every child takes it’s a win that reaches all children. The original Bootstrap: algebra continues to grow and evolve. How is it different from four years ago? People say “CS is like math” all the time, but it turns out that Math transfer is an incredibly difficult nut to crack. We’re thrilled to be the standard bearer here, and we’re constantly refining our approaches through careful research, student data and teacher feedback. With help from the entire Bootstrap:Algebra community, we’ve made improvements to the curriculum in terms of supplemental materials, deeper connections to graphing functions, and lessons dealing with topics like Ratio and Proportion, Quadratics, and Exponential Functions. We’re proud to be the first programming course to show real algebra transfer at this scale, and we’ll be announcing some exciting results at SIGCSE this year. I noticed a Bootstrap Hour of Code lesson recently. Is that a “hook” for students to do more with Bootstrap? Is it also a way to expose teachers to a different way of teaching that they might not otherwise see? Absolutely. For teachers who are curious about Bootstrap, or who are looking for something more challenging after the normal Hour of Code, give our Hour of Code a try this year during CSEdWeek I see announcements for Bootstrap professional development regularly. How do they workshops come about? Do districts come to you, ask for them, and fund them? Or is there some other model for when and where they are offered? We run trainings for all our courses year-round, though obviously we do the bulk of them in the summer when most teachers are available for PD. The vast majority of our workshops come from either districts or states reaching out to us directly (Austin, Dallas, NYC, CPS, and DCPS just to name a few), or from companies looking to sponsor CS Education in their communities (Facebook, Palantir, LinkedIn, 3M, and many more). We encourage states, districts, schools and companies to contact us directly about running a workshop, at contact@BootstrapWorld.org. What sort of background makes for a good Bootstrap teacher? Are you training mostly math and physics teachers to teach a new way of teaching their subjects? Who else picks up Bootstrap and adopts it? We get a good mix of CS and non-CS teachers. In fact, we probably have the most diverse cohort of teachers in the business — with such a variety of courses, we have CS, math, physics, business and social studies teachers working with students as young as 9 and as old as 25, in settings from continuation schools in California to accelerated elementary schools Maryland! When computer science becomes “teaching a tool”, as it so often does, you tend to only get teachers who are excited by tools. But when you focus on teaching content, you get a much larger, richer and more diverse set of teachers reaching students everywhere. That’s been our experience with Bootstrap, and we’re going to keep using that strategy moving forward. What might I not know about the current state of Bootstrap as an organization and curriculum that I should know? People know that Bootstrap is one of the largest providers of in-school CS nationwide, but not everyone knows that we’re also one of the largest providers of in-school computer science to girls and students of color nationwide. Of the 20,000 students we reached last year alone, nearly 9,000 of them are girls and young women and nearly 9,500 of them self-identify as African American or Latinx. We’re also investing heavily on making our materials accessible to differently-abled students, thanks to support from the NSF, Google, and the ESA Foundation, and are a proud development partner with AccessCSforAll. Note: The index for this interview series is at http://blog.acthompson.net/2017/10/computer-science-educator-interview.html and is updated as new interviews are posted."
"298","2017-10-31","2023-03-24","https://blog.acthompson.net/2017/10/cs-educator-interview-raji-gupta.html","Professional Development days are often a great opportunity to meet other teachers and share idea. Even though I pass his school twice a day on my way to my school I just met Raji Gupta recently at a CS4NH event. I was very interested in his school’s growing program and one course in particular - Edge of Computing . You’ll read about that below. And see a picture of his creative classroom! Where do you teach? What sort of school is it? I teach at Windham High School, in Windham, NH. We are a public high school just north of the border with Massachusetts. The school has just over 900 students. How did you get started teaching computer science? I am only in my third year teaching in total. During my first year as a teacher, I was teaching math (not in Windham). My friend/mentor reached out to me and asked if I would consider coming to Windham to grow a CS program. Having no CS background I was at first hesitant, but as we talked through it, I came to the conclusion that our kids need someone to step up and figure it out. And so here I am in my second year as a computer science teacher. Prior to teaching I had a career in industry, but felt called to make a difference, and teaching was the right channel for me to move into. Describe the computer science curriculum at your school. What courses do you have and what are the focuses of each? WHS offered an object-oriented programming class for a few years, and then last year added AP CS A. We had 44 students enrolled in AP CS A in its first year. This year we dropped the OOP class and now offer: AP CS A, AP CS Principles, App Development, and Edge of Computing. My overarching theme for all of my courses is that students are growing their problem solving, communication, and collaboration skills. Obviously with the AP courses, I am trying to also help the students achieve a strong AP score. I, frankly, think my role is less about instilling technical skills with my students and more helping them engage with CS and play with different environments and discover what they like. So I don't offer introductory Java, or teach Javascript or Python, for example... yet. When we talked in person recently you told me about a new course you were piloting this year. Can you elaborate on it? What’s it about and what was your motivation for creating it? Edge of Computing is a class that I sort of dreamt up. I wanted students who had taken AP CS A to have a chance to explore really cool topics in technology. We started the year by looking at Artificial Intelligence, for example. The process wasn't about learning the technical aspects about AI, but rather to examine the social implications of this emerging technology. Students ended up researching AI in ways I hadn't even thought of. I learned so much from them. Throughout the year we'll look at self-driving cars, quantum computing, Watson, virtual and augmented reality, etc. I like to think that my class is like a form of recess. My hope is that as the year finishes students will have dug into topics that they are curious about anyhow, and will be impassioned to really delve into that field during their undergraduate studies. What is your overall teaching philosophy? Project based learning? Flipped classroom? In short, what makes your CS program “your CS program?” As I said earlier, I am not technical. My prior career was in operations leadership. I understand technology, and am trying to become proficient in Java, but I think what differentiates my classes is that I create an environment where kids want to learn, that they can use self-discovery, and partner-work to grow their skills and knowledge. I am perfectly okay knowing less than my students. I am experienced enough in life that I can ask them questions when they are stuck that helps them solve their own problems. I think them growing this capability is really important. My role is mentor, rather than teacher. What is the biggest challenge in teaching CS at your school? Capacity! We had almost 200 students sign up for CS this year... as an elective! I'm teaching an extra class, and I had to recruit one of my colleagues to teach a section of AP CS Principles. It's a wonderful problem to have. What is administration’s support (or lack of support) like at your school? My director, Mike Koski, has been fantastic about giving me the freedom to develop a vision for CS at our school, and to then present that vision to our students. How do you measure success for your program? For your students? With the AP courses, I certainly want my students to do well as it relates to College Board requirements. But mostly I measure success by how many students we get to try CS. They don't need to love it. They don't need to take other CS courses. But I do want them to have at least been exposed to CS and felt like they had a safe place to try and fail, and learn and succeed. We have over 160 students taking at least one of the two AP CS courses this year. What is the one thing you like to talk about regarding your program that I haven’t already asked? My classroom! Last year I had all my APCSA students split into teams and enter the Verizon App Challenge. One of the teams won best in state for New Hampshire. Not only did the winning students get tablets, but the school also received a $5000 grant. We used the money to redo a classroom. You'll see in the picture that there is a good deal of whiteboard space (54' to be precise), there is fun furniture, and there are different levels that students can sit/stand at. Prior to teaching I worked at Google and Amazon, so I've tried to make our classroom feel more like a creative space, and less like a classroom. Tell me about your online presence (if any) · School name and web site: Windham High School. http://whs.windhamsd.org/ · Twitter: https://twitter.com/rajicgupta Note: The index for this interview series is at http://blog.acthompson.net/2017/10/computer-science-educator-interview.html and is updated as new interviews are posted."
"299","2017-11-01","2023-03-24","https://blog.acthompson.net/2017/11/vicki-davis-interviews-alfred-thompson.html","Vicki Davis has a wonderful podcast with interesting educators. Over the summer she interviewed me about teaching Computer Science. Topics include: How to get kids moving as you teach programming What happens when a school has every student learn Computer Science How to engage young women in Computer Science Programming Give it a listen!"
"300","2017-11-02","2023-03-24","https://blog.acthompson.net/2017/11/cs-educator-interview-steven-floyd.html","Computer Science education is important all over the world. Recently Steven Floyd who teaches at Mother Teresa Catholic Secondary School in London, Ontario, Canada agreed to answer my questions. Steven received the 2017 Award for Teaching Excellence in Computer Science. It sounds like there are some good things going on at his school. I also like the way he talks about his teaching style and how he defines success. Where do you teach? What sort of school is it? I teach grade 10, 11 and 12 Computer Science and Computer Engineering at a High School in London, Ontario Canada. Our school is made up of approximately 750 students and the school is a busy place with so many extra-curricular and classroom events. It's a diverse group of students with a wide range of interests, which is what makes it such an interesting place to teach. How did you get started teaching computer science? Back in 1999 I was taking a CS course in a dark, dreary lecture hall and I was just amazed at the concepts and ideas that allow our programs to run. The organization and design seemed almost ""magical"" and I wanted to bring that sense of wonder to students. After my first year of teaching CS and Phys-Ed our Principal let me know that there would be a few more opportunities in the Phys-Ed department. I told him I wanted to focus on the CS courses and since then I haven't really looked back. Right now, it's an especially exciting time in CS Education with work from organizations like the CSTA (https://www.csteachers.org/) and from researchers involved in Education and Mathematics like Dr. Gadanidis (http://researchideas.ca/) and many others. My wife, Lisa Floyd (@lisaannefloyd), started teaching CS around the same time as I did, so over the last few years some of our “date nights” away from the kids have eventually evolved into discussions about things like “What differentiates abstraction from decomposition?” She’s currently a Computer Science teacher and University Instructor and I'm proud to see her teaching CS and Computational Thinking to teachers and students around Canada and the world with Fair Chance Learning. Describe the computer science curriculum at your school. What courses do you have and what are the focuses of each? In Canada, each Province creates their own Curriculum and the CS curriculum in Ontario is fantastic (http://www.edu.gov.on.ca/eng/curriculum/secondary/computer10to12_2008.pdf) , although perhaps in need of a little refresh :) Students can take Computer Programming in grade 10, 11 and 12 and Computer Science is offered in grades 11 and 12. The big difference between the two is that the CS classes go into a little more detail in terms of things like efficiencies, problem solving and algorithms. Years ago, I took a step back and thought carefully about the students enrolling in our classes. I realized that only a few go on to study CS at University or College, and a handful pursue Engineering. The rest were interested in other areas. From this point on I decided I needed to teach in a way that focused on problem solving, computational thinking, algorithm design, creativity, innovation and entrepreneurship. I set a goal, which was to introduce the courses to a much wider group of students and to teach the course in a way that taught skills and concepts that might be applicable in any and all fields of study and work. Our class sizes have grown tremendously and I get a number students understanding that just about every career will involve some form of computational thinking and problem solving. They realize that knowledge is important, but what's becoming even more important is being able to do something with that knowledge. Being a good problem solver will help you in just about any career! What is your overall teaching philosophy? Project based learning? Flipped classroom? In short, what makes your CS program “your CS program?” My teaching philosophy centers around three main ideas: 1) providing multiple levels of entry to concepts, (2) providing multiple contexts in which to learn and apply concepts, and (3) facilitating multiple pathways for students. Many of the instructional methods that I implement involve what Seymour Papert described as “low floor/high ceiling” activities. These are activities in which a wide variety of students, with a wide variety of backgrounds, can enter into, grasp and apply. I also ensure the availability of multiple contexts in which to learn and apply concepts. We are fortunate to be teaching at a time where there exists a variety of programming environments and languages that are available at little or no cost. Finally, many of my instructional approaches are based on decisions that focus around the multiple pathways my students might take after High School. Some will pursue CS as a field of study, but many will pursue other fields in which a knowledge of CS concepts will provide them with an advantage. What is the biggest challenge in teaching CS at your school? I'm still struggling with the balance between the ""cool"", ""magical"" and creative elements of CS and the rigorous thinking that can sometimes be involved. I want to attract students to the program and show them how easy it is to get started, but I also want them to appreciate and participate in the complexity and quiet planning and analysis that goes in to worthwhile programs. It's a balance that we try to develop each day. I'm currently writing an online, Introduction to Computer Science course for the province and the course is being written with this theme in mind as well. What is administration’s support (or lack of support) like at your school? We have had a lot of support and it's only growing as more and more attention is being paid to CS, STEAM, Computational Thinking and Makerspaces. Administrators are doing a great job of looking past the technology and realizing that there are some very important skills and competencies being addressed within these areas. I'm lucky that at my school the Mathematics and Science Department Heads see the value of the Computer Science and Computer Engineering courses. They have helped purchase equipment, and over the years they've seen some interesting purchases show up on department bills including ""raspberry pis"", ""ECG sensors"" and ""drones"". Barham Dababneh and John Misek are two teachers at the school who help our students design, build and program our FIRST robotics robot. It's this type of support from colleagues that can transform a few dwindling courses into a thriving, school-wide program. Just last year the drama teacher asked if our Robot could play a part in the school Christmas play. This type of interest and support for CS from so many different staff members is very, very cool! How do you measure success for your program? For your students? We wanted students at our school to develop a better understanding of technology and to be able to become comfortable with it. It wasn't simply a goal to have more students in our courses, we also wanted to show the entire student body, as well as students from our surrounding elementary schools, how technology is evolving and how we can use it can be used effectively. Students in our school, and even younger students from the community, now recognize our Robotics Team members and they're often asked about their progress on large projects. This is success, just having students acknowledge, understand and appreciate the technology, but more importantly acknowledge, understand and appreciate the work of these Computer Science students. Years ago I wanted our school to be a place where students who were interested in the CS felt valued and felt that they had a place to belong and thrive. That’s what we continue to work on. What is the one thing you like to talk about regarding your program that I haven’t already asked? Staff members in the school are very supportive of our programming competitions and robotics teams, and they are always promoting and asking about our events and projects. We have been fortunate to have been invited to Comic Conventions and Art Events in the community and our students are teaching younger students from other schools about CS. The teachers at these schools have been inspiring! Our School Board Leaders are attending coding, robotics and Computational Thinking events and it's really been incredible to see so many different people support and become involved in the CS program. CS will have an impact on everyone’s day to day life very soon, if it doesn’t already. That’s why it’s so important for CS initiatives to be collaborative efforts that involve people from a variety of areas. A lot of resources I know about are US specific or at least US based. What sort of Canadian based or specific resources do you use? People, government resources, events, and maybe other things. There are some incredible Educators and Researchers in Canada that are doing some great things in CS. I often find inspiration, resources and support from many of the following: Association for Computer Studies Educators (http://www.acse.net/) Bring IT Together Conference: http://bringittogether.ca/ CONNECT Conference: http://www.canconnected.com/ TVO TeachOntario: https://www.teachontario.ca/welcome Dr. Gadanidis and Math + Code Zine: http://researchideas.ca/mc/ Dr. Jeannette Hughes and the UoIT STEAM-3DMakerLab: http://janettehughes.ca/lab/ The Ontario English Catholic Teachers Association http://www.catholicteachers.ca/ has also been very supportive. They have funded projects that have allowed us to bring CS to elementary teachers and students across the community, even before it was trendy https://www.teachontario.ca/community/explore/teachontario-talks/blog/2016/08/30/driving-student-engagement-in-mathematics-with-coding-and-programming And I know that I’m a little bias, but everyone has to see what my wife is doing! She’s an inspiration: @lisaannefloyd Tell me about your online presence (if any) My website of resources, etc: techthings.ca/learn Blog: https://stevenpfloyd.wordpress.com/ (like a few jobs around my house, this is a work in progress…) Twitter: @stevenpfloyd Note: The index for this interview series is at http://blog.acthompson.net/2017/10/computer-science-educator-interview.html and is updated as new interviews are posted."
"301","2017-11-07","2023-03-24","https://blog.acthompson.net/2017/11/cs-educator-interview-mike-zamanskythe.html","When I last talked to Mike Zamansky for this blog he was teaching computer science at Stuyvesant high school (one of New York City’s entrance exam high schools). Since then he has had something of a career change. Like many great teachers he was looking for a chance to make an impact beyond one school. But I’ll let him explain more. Since I last interviewed you, you’ve had some big changes. Tell us about what you are doing today. I left Stuyvesant a little under two years ago and I'm now at Hunter College, part of the City University of New York (CUNY). At Hunter I have two primary responsibilities. One is to develop K12 CS Teacher certification programs. The other is to build an undergraduate honors program in CS, connect Hunter CS to the tech industry and basically give NYC students a first rate option for a CS education that doesn't require taking on a mountain of debt. What made you decide it was time for a change? I think I accomplished all I could at Stuy and it was taking too much energy to keep the program where it was let alone advance it. It was also clear that the NYC DOE wasn't interested in engaging Stuy with at the helm so it was time to move on. It was also time for others to take the reins there. I've been privileged to work with some amazing teachers at Stuy and it was time for them to take the program to the next level. When I was connected with Hunter I saw two amazing opportunities. I've pretty much given up on the NYC DOE. I'm convinced that they're going to roll out CS4All hastily and we'll end up with bad CS for all. Poorly prepared teachers and a weak curriculum. I hope I'm wrong but I don't think I am. Regardless of what the DOE does, if a class has a strong teacher that class has a chance. Hunter prepares about 10% of NYC teachers so if I can steer the Hunter CS Education programs in the right direction then we can have a sizable impact. As to the CS Honors program, I mentioned above that the city needs a great affordable option. I'm proud of my work at Stuyvesant and proud that I worked at a public school all those years but at Stuy I only had access to kids that passed the test. True, we started our non-profit to get to more kids but that was limited. I'm still working with a select group in the honors program but as I'm also working with Hunter CS in general, I can impact a much wider range of students. That's exciting. You’re developing teacher certification programs in computer science and building an honors undergraduate CS cohort. Can you describe those two efforts and what you are doing to implement them in more detail? Are you part of the CS department or the education department? Or a foot in each? My appointment is in the school of education. That was mostly because I don't have a doctorate and this made things easier. Right now most of my work is in the computer science department under the school of Arts and Sciences since we're waiting for approval for my teacher ed programs. On the CS Education front, we've designed two programs - a Masters program in CS Education and a Certificate program for teachers already licensed in another subject area. Unlike some other proposed programs we don't offer courses tied to specific curricula (APCS-A AP-CSP etc.) although we do expose our teacher candidates to many of the current offerings. Rather, we are requiring courses that cover methods, and curriculum development along with a depth and breadth of content knowledge. Our teachers will be able to teach anything out there and also design their own experiences for students. We're also trying to convince NY State that programs like ours are the way to go rather than quick slapshot professional development and scripted curriculum. This means that we've also had to work out a way to transition to new certification requirements over a period of years and also allow for dual certification (math -> CS, CS -> math for example). Of course it remains to be seen what direction NY State goes in. On the honors CS front I've designed a new intro course for my students that combines Hunter's normal first year of CS with some software engineering best practices and a few extras. We also hold a number of special events. Last year and this we attended Catskills Conf -- one of my favorite events of the year - think ""tech conference meets summer camp"" and we've also had guest talks, workshops and more. I'm also working on recruiting all my former students who are now in the tech industry to support Hunter CS and work with the students -- I'm hoping this will be a huge win for both Hunter and ultimately New York City. It's an easy sell -- help an elite private university and you're not really helping equity and diversity. Help Hunter and you're still getting great kids but you can make a big impact on both equity and diversity. A lot of my time now is trying to get the word out and convince high schools that Hunter is a great option. How is the college environment different from the high school environment? Both for teaching and for “overhead?” Teaching is much more relaxed for me. I'm only teaching one class and it meets twice a week. That's both good and bad. That's a far cry from 5 classes of 32 a day 5 days a week. The overall schedule is much more flexible. At Stuy, even if I didn't have classes I had to be in the building. Leaving early for a meeting involved paperwork and approval. As a faculty member at Hunter, it's much more free. We're treated much more professionally than teachers. A big plus for me personally is the level of support I'm getting at Hunter. Everyone between me up to and including our president is on the same page for CS and CS Education. At Stuy I had an amazing team and amazing colleagues but the administration was never all that supportive and don't get me started on the DOE. The biggest downside of Hunter is that I'm much more isolated. I still have great kids but since my office is in the Ed department far away from undergrads I don't see them as much. Likewise professors aren't around the same way as teachers. I'm trying to convince the higher ups to find me a space near the students since I think that's really important as we try to build a positive CS culture but space at Hunter is hard to find. What did I not ask you about that you would like to know? I think that's about it. Where online can people learn more about the programs your working on at Hunter? Unfortunately, Hunter's in the middle of reworking its web site so there's a freeze on adding new content. There's a bit of info on the scholars program at http://hunter.cuny.edu/scholars but nothing specific to the Daedalus program. Once we have final CUNY and state approval of our Ed programs, those will go up as well but that's still pending. I hope to have more of a web presence on both soon. Do you have a Twitter account, blog, and/or other social media that I could share with my readers? Twitter: @zamansky Blog: http://cestlaz.github.io Note: The index for this interview series is at http://blog.acthompson.net/2017/10/computer-science-educator-interview.html and is updated as new interviews are posted."
"302","2017-11-09","2023-03-24","https://blog.acthompson.net/2017/11/cs-educator-interview-adam-newall.html","With increasing interest in computer science before high school these days you may have noticed that I have a number of K-8 teachers in this series. Several of them use Bootstrap in middle school. Bootstrap is a great combination of math and computer science. As such it fits easily into middle school programs.Adam Newall is the latest interview with one of these teachers. BTW did you miss my interview with Emmanuel Schanzer who created Bootstrap? WHERE DO YOU TEACH? WHAT SORT OF SCHOOL IS IT? I teach at Pembroke Community Middle School. A public school for grades 7 and 8. WHAT COURSES DO YOU TEACH? I teach a math applications class and Bootstrap: Algebra as an elective. HOW DID YOU GET STARTED TEACHING BOOTSTRAP? My district was looking to add electives to our schedule as well as curricula that would would help our students master algebra. Bootstrap fit that need perfectly and I've been proudly teaching it for the past six years. HOW IS BOOTSTRAP WORKING FOR YOU AND YOUR STUDENTS? DO YOU THINK IT GETS STUDENTS MORE INTERESTED IN PURSUING MORE COMPUTER SCIENCE? My students have felt very successful using Bootstrap and are proud of the accomplishments they have made in math and computer science as a result of their coursework. It's been incredibly empowering for all students who are interested in computer science to gain a foothold at such a young age that can propel them further into the field. DO YOU DESCRIBE YOURSELF AS A MATH TEACHER, A COMPUTER SCIENCE TEACHER, OR DO YOU DEFY SIMPLE CATEGORIES? HOW DOES YOUR SCHOOL SEE YOU? I think I would defy simple categories. I teach math, but not as I was taught it. A few colleagues and I have built a curriculum for our course, math applications, which every student in both 7th and 8th grade takes, that requires the students to think critically and problem solve, applying math skills they have already learned in their traditional math courses. I teach computer science, but I'm not a computer scientist. I am a lifelong learner in every sense and am always adjusting my practice. I think my school sees me as a teacher who is willing to take risks and question everything for the sake of making it better. WHAT IS YOUR OVERALL TEACHING PHILOSOPHY? PROJECT BASED LEARNING? FLIPPED CLASSROOM? IN SHORT, WHAT MAKES YOUR PROGRAM “YOUR PROGRAM?” I believe in the ""upside-down"" teaching model that empowers students to be part of the learning process. I frequently use project based learning to present students with scenarios that are authentic to real life in order to help them ""own"" on a deeper level the math skills that they already know. Bootstrap fits my teacher personality as it gives students the opportunity to ask the questions, to rely on their knowledge, to help each other, and to feel invested in their success. WHAT IS THE BIGGEST CHALLENGE IN TEACHING AT YOUR SCHOOL? I think that the biggest challenge in teaching at my school is our level of technology saturation. I would love to see students in a one-to-one model some day where they each have constant access to a school-authorized device. WHAT IS ADMINISTRATION’S SUPPORT (OR LACK OF SUPPORT) LIKE AT YOUR SCHOOL? My administration is incredibly supportive of teachers and the directions that we see for our classes. Teaching Bootstrap at my school is one example of my administration's support--allowing me to pursue my interests and take on a brand new subject area for our entire district. HOW DO YOU MEASURE SUCCESS FOR YOUR PROGRAM? FOR YOUR STUDENTS? I measure the success of my students first on their excitement and their confidence in using math and in computer programming. I then measure their success by the numbers from pre and post test data that shows they are able to apply their math knowledge from Bootstrap back into the math classroom. Our program has been successful as we were able to offer the first computer science curriculum in our district which has grown into the Bootstrap: Algebra and Reactive curriculums in the middle school as well as a new computer science teacher at the high school who teaches to the AP CS test. It's been awesome. WHAT IS THE ONE THING YOU LIKE TO TALK ABOUT REGARDING YOUR PROGRAM THAT I HAVE NOT ALREADY ASKED? I've never felt more important than the days I'm teaching Bootstrap. I can see students who have one ""aha"" moment after another because they made a dog move across their screen or their player jump up and down. Some students have blossomed as learners, finally feeling like they've found their niche and really beginning to engage in their own learning. Other students have grown in their persistence; they run buggy code and then go on to track it down time after time until it's perfect, no matter how long it takes. That is a model in perseverance that will follow them throughout their education and change how they view the world. They are learning to be superheroes and I get to know I put them on that path. TELL ME ABOUT YOUR ONLINE PRESENCE (IF ANY) · School name and web site: http://pcms.pembrokek12.org/pages/PembrokeCommunityMS · Twitter: @mr_newall Note: The index for this interview series is at http://blog.acthompson.net/2017/10/computer-science-educator-interview.html and is updated as new interviews are posted."
"303","2017-11-13","2023-03-24","https://blog.acthompson.net/2017/11/cant-we-computer-science-people-all.html","There is some real momentum in growing computer science for all people in the US. Even the Trump administration seems to be behind it (more or less). The pot of money for funding CS for All initiatives is growing. It’s not growing as fast as the number of people who are trying to work the problem though so it is still something of a zero sum game. And there in lies a problem – in fighting. At this point I feel like we are becoming our own worst enemies. Lately it seems like far too many people are taking sides against other who really have the same goals. Work with the Trump administration or fight them on every turn? Damned if you do, damned if you don’t. Work with industry supported programs or demand that companies give money without strings even if you are working in ways contrary to the company’s responsibilities to their shareholders and employees? Promote your own programs by attacking the motives and strategies of other programs? It’s getting as bad as the major political parties in some ways. There are dueling blog posts, contentious discussions (fights) on Facebook groups and Twitter. It’s starting to get embarrassing. If the media took a close look at us we’d really be in trouble. It’s only time before that happens though. I understand that lots of people have educational programs they really believe in. I understand that they really want others to use what they have developed, tested, and often have research to support. Great! But are we really well served when different groups attack others? I think not. Could money be at the heart of it all? I think perhaps it is. It often is when money is in short supply compared to demand. In the long run I think we’d all be better fighting for a bigger pie than a bigger piece of the existing pie. And then there is the gender issue. Oh boy! Now make no mistake I think programs like Girls Who Code and Black Girls Code are great. They are important. I’ve been pushing to increase the number of girls learning computer science for a very long time. I think it is essential for society in general and computer science in particular. I’m not sure that leaving boys behind should be a goal though and at times (especially if you are the parent of a boy) it looks like it is a goal. The assumption that boys will naturally get into computing on their own without help is as much a sexist bias as any suggesting girls are not interested in computing. This is especially true in poor, rural areas and in areas where minority students are the majority. Rural areas in general get overlooked as groups try to focus on large population centers and yet they have needs as great as any inner city. Now I am not saying we should stop having programs just for girls. Or that we don’t need programs specifically for other traditionally under represented groups. They are necessary. But let’s not be unsympathetic to other parts of our population just because they happen to be white or male. And I am not saying that people should not promote their own educational programs. The more the better. But let’s not build our own programs by tearing down those of others. Let’s work together, learn from each other, support each other, and present a united front to help the greater goal. Computer science for everyone."
"304","2017-11-14","2023-03-24","https://blog.acthompson.net/2017/11/joint-task-force-on-cybersecurity.html","The Joint Task Force on Cybersecurity Education is working on curriculum recommendations for post secondary schools but I think their work will be of interest to teachers of other levels as well. It is probably going to be interesting to cyber security professionals as well. Their latest draft report is now available for download and comments at CSEC2017 v. 0.95 Report Take a look. More information at the Joint Task Force on Cybersecurity Education website. The JTF was launched in September 2015 as a collaboration between major international computing societies: Association for Computing Machinery (ACM), IEEE Computer Society (IEEE CS), Association for Information Systems Special Interest Group on Security (AIS SIGSEC), and International Federation for Information Processing Technical Committee on Information Security Education (IFIP WG 11.8). The JTF grew out of the foundational efforts of the Cyber Education Project (CEP). Purpose... The purpose of the Joint Task Force on Cybersecurity Education (JTF) is to develop comprehensive curricular guidance in cybersecurity education that will support future program development and associated educational efforts. The curricular volume, CSEC 2017, is estimated to be published in December 2017."
"305","2017-11-16","2023-03-24","https://blog.acthompson.net/2017/11/resources-for-teachers-and-ap-cs.html","If you are teaching Advanced Placement Computer Science Principles for the first time as I am you probably still have lots of questions about the performance tasks. I know I do. Well it look like Jill Westerlund has our back. She has a series of blog posts on the subject that look very useful to me. Exploring & Creating 101 — Part 1 Exploring & Creating 101 – Part 2 Exploring & Creating — Part 3a Exploring & Creating – Part 3 Check out her abstractingCS blog regularly. I do. Building off of Jill’s work, code.org has created an ""Explore PT Survival Guide"" that also looks helpful."
"306","2017-11-20","2023-03-24","https://blog.acthompson.net/2017/11/learning-from-my-students.html","Some days I think my greatest edge over my students is that I am better at debugging than they are. Well there is that I actually read documentation as well but putting that aside for now. This semester I am teaching with AppInventor. It’s a pretty cool development tool and I have been playing with it off and on for some time. I’m far from expert at it though. Usually I am happy to keep a couple of lessons ahead of the students. There is only so much I can learn on my own though. So I learn a lot from my students. While anyone can learn from their own mistakes the really smart people learn from the mistakes of others. So I learn a lot because I see a lot of mistakes. Students make all sorts of mistakes. I’m not sure mistakes is the right work though. Perhaps I should say they try all sorts of things that don’t work as they expect them to work. At some point it becomes my job to help them figure out what is going on. Since they are so clever about try9ing things that would not occur to me this is a wonderful learning experience. Fortunately I have seed a lot of things go wrong using a lot of programming languages and tools over the years so I can usually figure things out pretty quickly. The advantage of this style of learning is that it helps me anticipate things – misunderstandings, incorrect assumptions, and what not – that I can build into my teaching going further. While I can’t cover every possible error even if I knew them all I can at least point students in better directions. At the same time I have been having students learn things beyond what I am teaching on their own. I have a couple of students who just love to try things in Appinventor on their own. Sometimes in class but often at home. These students are more than happy to share what they learn. They share with me and they share with their peers. Encouraging this sort of experimentation is, I believe, key to being a good teacher as well as being a life long learner. Teaching this course has probably taught me more about Appinventor than I could ever have learned on my own. I call that a win."
"307","2022-07-19","2023-03-24","https://blog.acthompson.net/2022/07/freedom-to-teach-computer-science-our.html","Mike Zamansky had another interesting post (CS - it isn't all that) that got me thinking. The last three paragraphs started me going. For example As CS becomes more part of the system I expect teachers to have less freedom in what they teach and how they teach. As a community we might be able to steer the ship towards keeping the good stuff but then again, we might not. In talking to a lot of teachers at CSTA 2022, I realized that most CS teachers have a lot of freedom in what they teach as CS and how they teach it. Other than the Advanced Placement courses there are not many real limits on what and how we teach CS. One teacher said “as long as the students are happy I’m left alone.” That is both exciting and scary. It’s exciting if a teacher with good content knowledge and skills in CS pedagogy says it, Scary if that is not the case. And the later is probably more common than the former. Of course there is a positive move in standards development and teacher certifiably rules that is trying to fix the problem of “anyone can teach CS.” That has its risks as well. While most standards programs I am aware of are deeply involving experienced CS educators in their development, once standards start getting implemented by bureaucrats all bets are off. Standards can be inspiration or shackles. They can include people who are good at passing tests and exclude qualified people who don’t fit in the usual boxes. Many, dare I say most, education administrators don’t really understand computers let a lone what it means to teach computer science. That is the source of some of our freedom but can also be a source of constriction if effective advocates for specific curriculum and teaching resources convince them to push things top down on classroom educators. I see it all too often “My administration wants me to use [some well sold curriculum]. Is it any good?” Seems to me that excluding subject matter experts in the school should be making those decisions not people inexperienced with teaching the subject. How we teach today is going to be influential If we teach everyone well we are more likely to keep some freedom in how we do things in the future. People tend to teach the same way they were taught. Given how much we still have to learn about how to teach CS we need to avoid that trap AND to promote a growth mindset that is open to new ways of teaching and learning. It will be hard to keep computer science from being constrained in someone’s idea of neat little boxes. That is what bureaucrats like to see. As CS continues to grow we have to be flexible and we have to promote the need to be flexable to all the publics we deal with."
"308","2022-03-03","2023-03-24","https://blog.acthompson.net/2022/03/sigcse-2022-day-1.html","SIGCSE 2022 is my first in-person conference in over 2.5 years. It’s my first SIGCSE in a lot longer than that. It looks to be a great conference . There are 1518 people registered in total with 780 attending in person. I HAD to come in person. Honestly, I missed people and a lot of people I know in CS Education and CS Ed research are here. There is a lot to learn here as well. The opening keynote was Barbara Liskov. This was a fascinating talk that covered a lot of the history of her work. She started publishing and researching what became object oriented programming while I was in the early stages of my career. Several papers she studied and referenced were published the year I got my undergraduate degree. I remember clearly many of the issues she discussed and problems she was looking to solve back then. I hope we can get access to her talk and show it to students. My first session of the day was a panel discussion of should AP CS A switch to Python from Java. Needless to say, the room was full. The stick with Java people had two main issues. One was the work involved in changing – new resources, teaching aids, test questions, and the like. The second was that while there is a slight edge in universities using Python over Java for CS1, Java and C++ are FAR more widely used in CS2 courses. The current course results in students who do very well in CS2 and that is important. The argument for Python is multiple. One is that it opens the door wider for using APIs for making more interesting projects. Another is that there is less syntactic “cruft” in Python which reduces cognitive load. A third is that Python is increasingly used in disciplines that are not computer science. For example the Physics and Chemistry departments are Stanford want their students to take a Python based CS1 course. FWIW, the school I retired from added Python in part because the Physics teachers encouraged it. I am finding the arguments for Python more convincing than I expected. After lunch, It Seemed Like a Good Idea At The Time (COVID-19 Edition). The session opened with examples from the past: see if you can hack the department mail server; open book exams without a time limit; exponential time examples are actually cubic. Victoria Hong shared a study she did where she asked one section to write questions for the final exam. The cohort that wrote questions did worse on the final than the cohort that didn’t write questions. The opposite of what was expected. Ellen Spertus talked about a course without deadlines. This set off a lot of discussion about deadlines and the different ways to allow or not extensions. Some have tokens that students can use for an extension. I hope this was recorded because I can’t do the discussion justice here. Next up for me was another panel: Advancing Opportunities for CS Teachers: How To Best Support Professional Development for Experienced Teachers in K-12 CS Education This session was hybrid which means that most of the panel was remote and not physically at the conference. More on that later perhaps. Most professional development for CS teachers is focused on new and early career CS educators. We have a good number of experienced teachers (10+ years of teaching CS) and their needs and backgrounds tend to be different from new CS teachers. A lot of the initial presentations was stating the problem. Don’t tell anyone but I jumped out early and dropped in on a Special Session: K-12 Computing Education and Education Research Resources. Colleen Lewis talked about Computer Science Teaching Tips (csteachingtips.org) and a Teaching Practices Game. This can help teach about microaggressions. Briana Morrison introduced Engage CSEDU: www.engage-csedu.org which has a searchable database of CS Ed resources. Davina Pruitt-Mentle introduced NATIONAL INITIATIVE FOR CYBERSECURITY EDUCATION (NICE) which has a lot of resources for teaching and learning about cybersecurity. More information can be found at Cyberseek. Got some dinner skipping the Birds of a Feather but I’ll go back for the reception. Overall, a very good day for me. Learned some things and connected with a bunch of great people. More tomorrow I expect. If you are reading this and at SIGCSE please look me up and say “hello.”"
"309","2021-06-28","2023-03-24","https://blog.acthompson.net/2021/06/phun-with-phidgets.html","Recently I requested a free (for educators) starter kit from Phidgets. Phidgets are small controllers and sensors that are easy to use and with a helpful API. The starter kit includes a bunch of things to introduce the platform. The Getting Started Kit provides an introduction to students and teachers. We offer a self-guided, online curriculum with challenges and projects for students. • Programming languages: Python, Java, C#, Swift • Device compatibility: Windows, macOS, Linux, iOS, Android • What's in the box: VINT Hub, Push Buttons (2), LEDs (2), Humidity Phidget and all required cables • Suitable for school grades: 9 – 12 I spent some time with the starter kit today. What I was looking for was pieces that were easy to assemble and sample code that was reliable and easy to use. That’s what I found. The first thing I did was assemble a sort of control box with two push buttons and two LEDs. I plugged the controller in to my laptop with a USB cable and fired up Visual Studio. There are samples and tutorials in Python, Java, Swift, and C#. The systems work with Windows, Mac OCS, and Raspberry Pi. Projects are available in a wide variety of IDES including Processing, Eclipse, NetBeans, and Visual Studio among others. That;s a lot of options. IT looks like more languages are supported less directly. So anyway, I followed the starter tutorials to get a feel for both the type of tutorials supported and to get a feel for using the Phidgets themselves. They were very easy to follow with a lot of code you can copy and paste to get started. In a classroom I would spend some additional time explaining the code in more detail. Students could use this on their own but would really benefit from the sort of deeper explanation a teacher can provide. I do like that there are suggestions of next steps without sample code for the student. That should encourage students to experiment a bit. Solutions are available to educators on request though. Besides the buttons and lights I ran though the sample code for the temperature and humidity device as well. Equally easy to use. I was gifted a couple of other devices – a Power Plug Phidget and a Distance Phidget. I have some Raspberry Pis around here somewhere so my plan is to try these Phidget devices with one of them. That will give me a chance to learn something about the Pi devices as well. I can see a lot of potential for interesting projects combining Raspberry Pi and Phidget devices. These feel like the sort of devices I have been looking for to do a variety of hardware and software mixes. In other words, physical computing. There are classroom sets available that while not cheap are in range for a lot of schools. You can’t give hardware away for free and these devices are high quality and well worth the prices. IMHO. Note that I got the kit and devices for free but without any expectations of quid quo pro. I really like this stuff."
"310","2021-07-12","2023-03-24","https://blog.acthompson.net/2021/07/avoiding-tour-de-force-sample-code.html","Sample code is a wonderful way to teach and learn coding. The problem with a lot of sample code is that it is just too complicated and to fancy. I call it tour de force code because it seems like the authors are trying to show off how awesome their coding skills are. That’s probably a bit harsh but I feel like using 1,000 lines of code to show off every single feature of a concept/API/Class or what ever is overwhelming. It is the sort of thing that sends beginners a message that things are over their head. I’ve always tried to avoid over complicated examples that I write for students. Far too many of the samples one finds from major vendors are either too complicated or leave out important information that beginners are not likely to have. Of course most samples on the internet are written for professional developers so that’s understandable. Beginners (students) requirements are far different from those of professional developers. It doesn’t have to be that way though. The Phidgets website (see my post on Phun with Phidgets for context) has a sample code generator that I really like. (https://www.phidgets.com/?view=code_samples ) There are a number of options depending on how much a developer wants to do themselves and how much they want generated. Any way you do it there will be lots to do to make your final program. The samples are very basic but they do let one test a device and see some of its features. I wish more companies did things like this. Over the years I have written some code generators myself. In fact, one of my masters degree projects was a simple “compiler” that generated code in multiple languages to work with a user interface library. It generated very basic code that handled the most repetitious and tedious parts of the code so that a developer could focus on the interesting parts of code. It had the advantage that it used as input the markup language for the documentation system. It’s a shame that commercial systems like that don’t exist today. I’m starting to think that writing code generators might be an interesting project. Something like a user interface that asks for variable names and things like loop parameters and generates code snippets. Some provisional IDEs, Visual Studio for example. provide help with generated snippets but I think that coding a generator might help students understand the code they use better. It’s just an idea at this point but I want to think more about it."
"311","2021-07-13","2023-03-24","https://blog.acthompson.net/2021/07/learning-my-nth-programming-language.html","They say that the second programming language is the hardest to learn. That’s mostly because one learns how to program using their first language but each language has its own idiom. I was lucky in that before I completed my BS degree I had learned enough of at least six programming language to write usable programs. So when at my first professional programming job they handed me a language reference manual and a functional specification and asked me to develop on a new (to me) operating system I got on fairly well. I continued to learn new programming languages over the following years and have lost count of them all. But having a project, a good reference manual, and usually some good sample code I had a lot of fun learning. This spring I had to reconnect with Java and learn the Processing system. To be honest I used the code students had written before I took over the class for some of how I learned Processing. Syntax is new but concepts change a lot slower and experience (in this case with XNA) was very helpful. Having a wide range of experience sure does help. And I used Bing a lot These days I am attempting to learn Python. I have a number of Python books written for beginners. They look great for beginners but for me they just don’t work. There is to much about how to program in general and finding what I need becomes tedious. Programming language documentation has changed over the years. For the most part that’s probably good. For me, well, let’s just say I miss the old dead tree simple language reference manual. Finding good sample programs for what I want to learn has been a struggle as well. Search engine AIs are not as good as we need them to be yet. What to do? Well, this is were community comes into play. I asked for samples on the Computer Science Educator group on Facebook. Some brief conversations and Lisa Hines, a CS teacher from Canada, shared two wonderful samples that look like they should give me a real start. The Internet sure has made for some great community building for computer science teachers."
"312","2021-07-14","2023-03-24","https://blog.acthompson.net/2021/07/day-onecsta2021.html","Today was the first day of the Computer Science Teachers Association conference. All online of course. It was a pretty cool day. I got myself set up with a two monitor system, headphones, and a notepad for notes. Being on the conference committee I had some specific commitments. The two monitors made that easier. I spend the first hour working the help desk so I missed some of the opening keynote and welcomes. It felt good to be able to help out that. My first session of the day was AI and Machine Learning with Code.org with Daniel Schneider , a Code.org Curriculum developer. His Slides are at https://bit.ly/csta2021-aiml. One expects a high level of production quality from Code.Org and this program seem to have that. The curriculum can be used several ways as a stand alone or modules can be used in a larger course. If you are looking to teach about artificial intelligence and machine learning this is a great place to look for materials. Code.org AI/ML Curriculum Next you was Secret Coders Teach Computational Thinking with Dr. Rachelle Haroldson and Dave Ballard Slides at https://bit.ly/2UUPDUf They started with an introduction to as 6book set of books for younger students called Secret Coders. Now K-5 is not my usual thing but I have a grandson who just finished kindergarten who is already interested in computers so … After introducing the books they presented some good exercises to go along with the stories. Some were offline like the one at Fun-with-Coding.pdf which I can totally see adapting for older students as well. And some were online interactive. Overall, I thought it was a pretty good program for younger students. The mid-day keynote was from Tim Bell, the man behind CS Unplugged, You know its going to be a good talk when the presenter starts by playing a huge pipe organ. Dr. Bell is a great presenter. He had a lot of good things to say. For example, ""We write programs for people to use. There may be a few people that need that memo."" The big learning for me though was him saying that Combining unplugged activities with coding activity works better than unplugged along. Having students do an unplugged activity should be followed with some actual coding activity. Makes me think a lot about how I use unplugged activities. Next up for me was a session on the Carnegie Mellon University (CMU) CS Academy curriculum Link to presentation slides. CMU has several courses of different lengths and for different levels of complexity. Course are Python based and have been developed and well tested in actual classrooms. The demos show some great production values with a lot of thought given to teacher tools.Courses start at the middle school level and into high school. Some of the modules will fit nicely into the coding parts of Advanced Computer Science Principles. And its all FREE! Last session of the day for me was Coding with Scratch Junior in the PreK–2 Years. Looking for ideas for my grandson again. This session provide a slide deck of resources and a Slide deck. Scratch Jr is an Android tablet app that look crazy easy for students in PreK to grade 2. I think my grandson will like it. There are many ways it can be used cross-curriculum as well. Pretty cool stuff. There were a bunch of sessions I would have liked to attend but one can only be in one place at a time. Thank goodness that all sessions were recorded and I will be able to watch them come August. Tomorrow I will be back in the Help Desk at 10:30 Eastern US time. I’m looking forward to a bunch of great sessions after that."
"313","2021-07-15","2023-03-24","https://blog.acthompson.net/2021/07/notes-on-day-two-of-csta2021.html","Today started, for me, with help desk duty. While I was there no one needed any help which I suppose says good thi8ngs about the HopIn platform CSTA is using. The other committee member on duty, the amazing Myra Deister, and I spend most of the time catching up. We’ve known each other through CSTA for a long time. It was just like a “hallway track” time for us. I’d love to see tools specifically for that sort of thing. First session of the morning I was bad. Well, fidgety I guess. I hoped in and out of a number of sessions the whole time. I started with Misconceptions as Learning Opportunities (slides here) and learned some good things about assessment. An area I frankly need to learn more about. I will be watching the whole session when the videos are available. I next hopped in to Introduction to Micro:bit with MakeCode just to see what they were presenting. I did pick up a couple of links to related research that I read later. https://aka.ms/MakeCodeResearch ,https://aka.ms/PhysicalComp, https://microbit.org/research Release notes: https://makecode.com/blog/microbit/2021-release BirdBrain Technologies dropped in to the session to say that they “ loved the micro:bit so much that [they] based the newest version of [their] products on it! US educators can try a free demo of [their]micro:bit based robots: at https://www.birdbraintechnologies.com/demo I spend most of the rest of the time at Block-Based Machine Learning and AI with mBlock “ mBlock is a powerful programming environment that combines the familiarity of Scratch with cutting-edge technologies like Google’s Teachable Machine and Microsoft’s Azure Cognitive Services.” (Slides here) I should have started here and I will definitely be watching the full video when available. BTW, If you are looking for resources about teaching AI check out https://ai-4-all.org Next up was the keynote by Dr. Amy Ko. I have been familiar with her work from both social media and published papers so I was really looking forward to hearing her speak. Follow her on Twitter (https://twitter.com/amyjko) and read her blog posts (https://amyjko.medium.com/) Dr. Ko gave a great talk which showed all of the levels involved in where things can go wrong in encouraging students to take and continue in computer science. Talks like this are a reminded for me of the many forms of diversity that I have to be aware of and how I need to adapt to meet the needs of people who are not like me. Dr. Ko posts her talks on her web site. This one should be there soon if it is not there right away. Updated: with links to Dr. Ko’s talk: Video: https://youtube.com/watch?v=p7IzFIDfyKY Slides: https://faculty.washington.edu/ajko/slides/CSTA2021Keynote.pdf CSTA Keynote After the keynote, I hopped into Teaching Exciting Computer Science Frontiers in High School for some ideas about advanced courses and students. The talk introduced me to NetsBlox which is a visual programming language and cloud-based environment that enables novice programmers to create networked programs such as multi-player games. Network programming, yeah! The system also connects to a variety of databases online. So a lot of possibilities for data science or cross curricula projects. I need to look into this a lot more. Next up was Selecting and Supporting a New CS Teacher. (Slides here) This mini-session was part of the administrator tack. Love that there is an administrator track BTW. In any case, there was a lot of good information for administrators including some helpful links in the slide deck. Teaching with YouTube with Oscar Velizin was next for me. Oscar Velizin has a YouTube channel with videos that mix math and CS. No surprise. One of the takeaways for me was the idea of providing access to the code that is demonstrated via GitHub or some other online system. (Slide deck here) He had some good reasons for using PowerPoint compared to some other presentation tools. Specifically the ability to screen capture, to rerecord individual slides, the built in Equation editor, and the ability to easy export videos. Don’t tell anyone but I skipped the Birds of a Feature. Enough screen time and I wanted to be rested for the last keynote of the day. The afternoon keynote as Zaretta Hammond who talked about Changing the Complexion of Computer Science Education. Yes, equity was a big focus at this year’s conference. I that that was wonderful. As we look at the events of the last few years we can see that a lot of work needs to be done to promote Computer Science for everyone. A note of process. Yesterday I took notes in a text document. Today I took my notes in Open Live Writer which is my blogging tool. I filled things in during breaks between sessions. That made it easier for me. I like having my notes in blog form both to share with others and to return to for my own follow-up on sessions."
"314","2021-07-16","2023-03-24","https://blog.acthompson.net/2021/07/notes-on-day-three-of-csta2021.html","No morning help desk duty for me today so I watches the whole “Morning Java” session. For those of you not at CSTA, Moring Java was an introduction to the day with our conference chairs and guests. Today.Michelle Lippoli, Senior Operations Manager (Events and Membership) for CSTA, talked about all the work that goes into running a conference like this one. And it is a lot of work! Next year CSTA will be in-person in Chicago. There is a lot of excitement about being able to meet in-person but I hope we have the virtual option as it makes the conference possible for so many more people. First session of the day for me was Nifty Assignments. Though I was tempted by Python and Micro:bit…on a Calculator? and I will look for the video in the future. Nifty is a conference favorite. The idea started at SIGCSE (See more on that here) and I have used projects from previous sessions at CSTA and SIGCSE. Michele Lombardi - Unplug the Internet! 9-12 Review internet vocabulary, how messages are sent, and introduce potential cyber attacks using this unplugged internet simulation. I’ve done something similar but I love the forms she uses and the other information about things to do. Cindy Gonzalez - Bring your 3D world to life! K-5 Design a 3D design in Tinkercad, upload your design to Cospace, code your design & enter your 3D world using the DoInk Green Screen app Talk about making students creators and not just consumers. I love the cross curriculum opportunities. Roger Jaffe - RSA Encryption Without the Math 9-12 How to teach RSA encryption without having to teach the math I struggle with teaching public key encryption so this set of resources looks very exciting to me. I can see using this lesson in Advanced Placement Computer Science Principles. Learn more about CSTA Nifty Assignments at: https://sites.google.com/site/cstaniftyassignments/ After Nifty Assignments, I attended Teach Cybersecurity. Change the Future/ (Slide deck here) Did you know that there are guidelines for what to teach about cyber security? There was a lot of discussion about teaching cyber security in the chat. A lot of teachers are, not unreasonably I think, worried about students misusing the knowledge. The Teach Cyber program, and every other program I have looked at, included ethical thinking integrated into the curriculum. This is a curriculum worth looking into if you are thinking about adding a cyber security course. Last mini session of the day for me was My CSP Experiment – teaching Advanced Placement CS Principles with two different programming languages at the same time (JavaScript/AppLab and Python) This teacher developed a detailed scope and sequence with dates and time and then mapped the concepts to unites from different curriculum programs (code.org, CodeHS and others) Concepts were taught largely with pseudo code and unplugged activities. That was a lot of work. I really admire her skills. (Slides are here) Well, that’s a wrap for me. It’s been a great conference and I learned a lot. I’m glad I don’t have to travel for hours to get home."
"315","2021-07-16","2023-03-24","https://blog.acthompson.net/2021/07/observations-on-csta2021-virtual.html","The CSTA 2021 Virtual Conference is in the books. I really did enjoy it and I learned a lot. Virtual conferences are different from in-person conferences and I plan a post on that. But for now I want to talk about this year. First off, the conference program was pretty awesome if I can say that as part of the conference committee that selected them. Not only was content good but the presentations were very well done. At least the ones I sat in on were. I wonder if the experience of teaching online as so many have had to do played a role in preparing teachers to present at a virtual conference. Thoughts on that? Secondly, the chat feature in Hopin got a lot of use. As one person pointed out, yelling things out in a live presentation is rude but adding questions, comments, or additional resources in a chat windows is not. More than that it adds to the value of the presentation. Sessions for grades younger than high school are growing in number. This is hugely important in my opinion. This year, Nifty Lessons had a lesson for the very young grades. There were not many teachers of those grades to hear it though. I would love to see more nifty lessons for younger grades. Elementary school and middle school teachers are doing amazing things and we need to share them. I ran two monitors during the conference. One monitor was on the conference itself while the second was split screen between the Slack channel the conference staff and committee used to handle things behinds the scenes. The other window was following the #CSTA2021 Twitter hashtag. I don’t have data but it felt like the Twitter stream was less busy than most years. I suspect two causes. One the aforementioned chat activity in Hopin and the other the fact that computers and phones were occupied with attending the conference rather than social media. Is this god, bad, indifferent? I don’t know. Being virtual we had many more people AT THE CONFERENCE so maybe we don’t need as many Tweeting for the people not there? There was a clear theme of equity in CS education in this year’s conference. Given the last few years, equity is and will continue to be an awfully important topic. The keynotes were all on that topic and at the risk of taking criticism, was that necessary? I love people talking about how they bring equity into the teaching. I will listen to Amy Ko again in a heartbeat for example. The last keynote at CSTA 2021 had some inspiring stories. It was great to hear the success of students from students. We can probably all do even more to bring equity to teaching CS. I would just have liked a little more variety in the keynotes. I have been thinking about what else I would like to see in keynotes for next year. One is talk about the need for ethics in CS education. I am not sure what form this keynote should be given or who should give it but ethics in computing is a critical topic in my eyes. We’re seeing ransomware and cracking into systems all the time. We need to make sure we are bringing ethical thinking into our teaching. Students need to ask “should I?” as often as they ask “can I?” The second thing I would like to see is pure inspiration. At this point in the year teachers are tired, drained and most of us could use some excitement. The future of technology is amazing and hearing about the possibilities and ideas that we can share with students to encourage them would be a great thing. Again, I am not sure who is the person to bring it but I want to hear a positive and exciting message about the future. I want energy! So what do you think? How was the conference for you? What was great or not so great? What do you want to see next year? BTW, my daily notes on the conference are at: Notes on Day Three of #CSTA2021 Notes on Day Two of #CSTA2021 Day One–#CSTA2021"
"316","2021-07-19","2023-03-24","https://blog.acthompson.net/2021/07/pluses-and-minuses-of-unary-increment.html","There has been a conversation on Twitter about the unary increment operator (++) and related (+=, –, etc.). I tend to gloss over these when teaching beginners. Especially those in a first programming course. A friend of mine disagrees. It started with: Would you ever write, or teach a beginner, a = a + 1 if your language supports a += 1 If so, why? Now obviously professional programming and beginner programming are not exactly apples and apples but we should probably be teaching best practices. Right? On the other hand, there is thing called cognitive load. There are really at least four ways (in most C-style languages) to ad one to a variable. a = a + 1 a += 1 a++ ++a I generally teach options 1 and 3. I mention the others but don’t really expect students in a first class to use them all. Cognitive load. It’s enough for students to remember two ways to do something and they don’t need all four. The first one has an advantage that it follows a general form. A value is added to a variable and saved in the original variable. This works for a lot more than adding one. Now arguably a += 1 does the same thing but the other format is a building block for more complicated assignments with out the complexity of figuring out where += fits into the order of operations. Now the pre and post increment (and decrement) operators are sort of special. It makes a difference which one you use; foo = bar[I++] and foo = bar[++I] give very different results. Personally I don’t want beginners using either except as a standalone statement. So I teach it for incrementing loop control values but don’t talk much about using it other places. Now obviously there are cases when using these operators in other places is a good idea. But I think beginners have enough trouble as it is without adding some unneeded complexity. As time goes on and students become more comfortable with the language and the art of programming, by all means, show them the cool stuff. But remember that code should be readable by people as well as computers. When I was doing code reviews as a professional developer I always looked to readable and easy to maintain code. That’s how I want my students thinking as well. Agree? Disagree? Jump in in the comments below."
"317","2021-07-29","2023-03-24","https://blog.acthompson.net/2021/07/playing-with-bacons-cipher.html","Bacon's cipher is a fairly well-known and simple cipher. Its considered a form of steganography. Unlike most steganography, the code is hidden in the text and not an image. The format is a 5-bit binary encoding where each letter of the plaintext is replaced by a group of five of the letters 'A' or 'B'. This binary code has A as 00000 or ""aaaaa"" and Z is 11010 or ""bbaba"". There are variations and the original version used the same codes for the letters ""I"" and ""J"" and for ""U"" and ""V"". The usual implementation is to use one type face for ""a"" and a different type face for ""b"". Often this is done with a serif and a sans serif font. Other options, and the first one I use below, uses italics and non-italics. thequickbrownfoxesjumpedoverthelazy One other option I have used is mixing upper and lower case letters. The QUicK brOwn FoXes JUmPed ovER tHe lAZy The big disadvantage of using mixed case letters is that it is not very subtle. It’s almost obvious that there is something special going on. Italics is less noticeable. Serif and Sans Serif are even more subtle. One semi-famous example of the use of serif and Sans Serif fonts is the Cipher on the William and Elizebeth Friedman tombstone. The biography of Elizebeth Friedman,The Woman Who Smashed Codes: A True Story of Love, Spies, and the Unlikely Heroine Who Outwitted America's Enemies,is a seriously recommended read BTW. I’ve been experimenting with coding and decoding using this method using a computer program. The upper/lower case combination is pretty easy both to encode and decode. C# has a nice Char.IsUpper method that was very handy for decoding. Encoding with different font faces was trickier for me. I finally used HTML for output. Parsing an HTML file is not to bad, though I haven’t coded that at this time. The obviousness of this method still rules this out as a serious method for me. If fact just making a raw HTML file available, no matter what sort of type facing one uses, just feels to obvious for me. I suppose that getting an image of the message and posting that would work pretty well. It doesn’t lend itself to computerized decoding however. Maybe some AI pattern recognition would work well? Speaking of images, there are examples of using this encoding in pictures of groups of people. Some people facing straight ahead and some turned to the side. Just about any possibility of two different options would work. Its a pretty flexible system. This is not the sort of encryption that holds up to serious attack but I had some fun playing with it. I have updated my Tiny Book of Simple Cryptography with a chapter on Bacon's Cipher. This is the seventh chapter with a simple cryptography technique."
"318","2021-08-20","2023-03-24","https://blog.acthompson.net/2021/08/playing-with-coderecursion.html","Recursion was never a big part of my toolbox but I am starting to appreciate it more recently. Regular readers know that I have been writing about and writing code for some older, simpler cryptography systems. For one of them I needed a list of letter in the alphabet without duplicating previous letters. I needed to take a letter from the alphabet (I had a string of it) and see if it was in a list of used letters. If the letter was used already I wanted to check the next letter. It’s pretty straight forward if you can assume that not two letters in a row are used in the previous string. There is probably a decent iterative way to do this but I was coming up blank. Until it occurred to me that a recursive solution might be just what I needed. I came up with the following code. It checks of the letter at location k in the alphabet list is in the string to check. If it has not been used it returns the index of the letter to use. If it has been use the same function is called again looking at the next letter index. This continues until we find an unused letter. private int getNext(int k, string check) { if (check.IndexOf(alpha.Substring(k, 1)) < 0) return k; else return getNext(k + 1, check); } I really like this solution because it emulates the way I think about the task. It’s also easy to understand. Recursion is not always hard and confusing. Sometimes it really makes things easier. Program note: The nice people at Feedspot have compiled a Top 20 Computer Science Blogs list. Yes, I made the list but there are a lot of very good blogs on that list. They cover computer science more broadly and many will be worth a follow. In cryptography news, the NSA Codebreaker Challenge 2021 is now open. While you are here, I have been regularly updating my Tiny Book of Simple Cryptography. The current list includes: Caesar Cipher Vigenère cipher One Time Pad Polybius Square PigPen Cipher Columnar Transposition Cipher Keyword Columnar Transposition Cipher Random Block Transposition Cipher Steganography Bacon’s Cipher"
"319","2018-06-01","2023-03-24","https://blog.acthompson.net/2018/06/microbits-and-teaching-networking.html","This year i taught advanced Placement Computer Science Principles with a mix of high school juniors and seniors. Because of the schedule I had the juniors for several days after the seniors were done. The challenge was to come up with something useful and interesting to keep them busy and learning. I looked at the classroom set of BBC Micro:bits and thought – networking! Obvious right? OK maybe not but I had been thinking about the ability of these little devices to communicate using radio signs and this seemed like a good opportunity for some experimentation. I broke the students in to groups of two and three and asked them to create an app that used communication between two of the devices. Other than pointing them to the MakeCode for Micro:bit app for Windows (in beta - requires Windows 10 though there are also iOS and Android versions) and the MakeCode web site I didn’t give them more instructions. Hey, it’s an AP course! A few students decided to use the Python editor from the Micro:bit web site but most used MakeCode. The MakeCode students used a mix of the block editing and the JavaScript editing. I think having options was a plus as students worked with what they were most comfortable using. On one hand the students didn’t quite get to the level of application I had hoped for. I wasn’t any help there so I think I need to dig deeper into this myself over the summer. Time was an issue as well since the end of the year brings a lot of interruptions. On the other hand, they did learn a lot. Several students told me they learned more sending between actual devices than using a software simulator. The Code.org APCS P resources I used have an outstanding simulator which the students did use. The devices made it more real, dare I say solid, to the students. One student suggested starting with the simulator and moving on to the devices for deeper learning. As I listened to them talk about their projects under development they discussed things like throughput and bandwidth as well as how to encode information. These are all topics we had discussed during the year of course. Here though was a practical application and visuals that really brought things home. There is something about pressing buttons and seeing lights on another device light up that brings extra meaning. My thinking now is that I will be bringing these little devices out earlier next year. We’ll do some networking with them for sure. Maybe some other projects as well. They seem motivating and interesting. Finding thinks that students want to use, want to learn more about, and which reinforce concepts is a wonderful thing."
"320","2018-06-05","2023-03-24","https://blog.acthompson.net/2018/06/programming-projectsthe-good-bad-and.html","End of the semester project time for me. All of my programming students have been finishing up[ their self-selected projects and I have been grading. It’s always an interesting ex3ercise. None of the students have much experience designing and writing programs. One thing that is clear is that they don’t always spend enough time planning before they start. Students often seem to think in small steps without thinking about what steps will follow. Sometimes this results in user interfaces that look great and are fairly sophisticated. Unfortunately, they often haven’t thought about how to implement more of the code behind the user interface. Other times they do think further but not far enough. In either case they run into road blocks because the initial design is just not complete. As ugly as these designs can get it is interesting and challenging to try to develop workaround for them. I’ve learned a few tricks over the years. I only wish we had time to restart from scratch and redesign the programs. Some of the mort popular projects are easy enough to design and code but can be tedious with the limited background in programming the students have. These designs require a lot of code. That takes time to write and to debug but is usually manageable. What concerns me this year is the number of my advanced students who don’t use language or features that they have taught and should know to use that they don’t use. No matter how many times I tell students that a list of variables that are differentiated only by a number should probably be an array some students take what they think is a short cut. They are almost always wrong about that. I’ve got to work on that next year. On the plus side, some of my students take it upon themselves to learn features, methods, and functions that we don’t have time to cover in class. this year students found a couple I didn’t know about. Modern programming libraries have far too many features for anyone to know all of them. Some of these features will get covered next year as they are more efficient than what I have been using. Others I have to think about how or if I cover them. Sometimes features make things easier for programming but harder for a teacher to instill an understanding of concepts. Students seems to learn a lot from this end of semester projects. That is great. It’s a real plus when I can learn things from them as well."
"321","2018-06-06","2023-03-24","https://blog.acthompson.net/2018/06/looking-back-at-apcs-principlesmy-first.html","During a conversation with my dean, he said it takes about three years to really get teaching an Advanced Placement course down pat. I don't know if that is the right number but it is surely more than one. This past school year I taught APCS Principles using the curriculum from Code.Org. It was a life saver. I had four preps this year and two of them were first time for me. Well one of them wasn't completely first time but I was doing a complete starting from zero rewrite of it. So there was a lot of work to do. The tools supplied online were really quite good. The simulators were amazing and let me do some things I could not have done without them. Code's videos, some of which I used in other courses as well, are just outstanding. High production values, outstanding and diverse presenters, and just the right length to not lose kids. In all honesty, a properly motivated students could probably use it as a self-passed course. They would not get as much out of it as being part of a class but they would do ok. We had some great discussions in class which I think were very valuable. I had three students from China which made talking about issues like censorship and government control of the internet, among other things, extra interesting. There are a few things I know I need to do differently next year though. The performance tasks are a big part of what I need to do differently. I gave the Explore task in the start of the second semester. That has to get moved to first semester. That will give me some more flexibility in the second part of the year. Like a lot of people I made the Create task due at the official “drop dead” date set by the College Board. Huge mistake as panic set in and only an extension owing to system glitches on the College Board site made it possible for all the students to submit. Next year, we’re doing it earlier. No midnight deadlines on a system that will be overloaded. I also need to work on making sure the students understand the requirements on the performance tasks better. Now I had to be teaching to the test and that is what I’d be doing. At the same time they REALLY need to learn to read and follow requirements. That is an important lesson. That makes me feel better about it. My students all come in with previous programming experience but what I found this year was that was somewhat uneven. I have to be more aware of the students who are not as into coding as others. APCSP is about a lot more than programming but I don’t want students to miss out on that piece. I may reorder some things in the course around that as well. I need to get more programming in before I assign the Create Task I think. I still have a bunch of processing to do and I hope to talk to other teachers at the CSTA Conference next month. I figure that knowing I have to do things differently is half the battle though. If you taught APCSP, with the code.org curriculum or with something else, I hope you’ll share what you learned about teaching it in the comments."
"322","2018-06-08","2023-03-24","https://blog.acthompson.net/2018/06/computer-science-teacher-as-unicorn.html","The t-shirt image here showed up on my Facebook feed the other day. My first thought was “Yes, computer teachers are the coolest.” Of course I know a lot of teachers who teach other subjects who are every bit as exciting as any computer science teacher but there is another thought here. Unicorns are both magical and rare. I would argue that all good teachers have a bit of magic to them. Computer science teachers are more rare though. And frankly, computer science feels a lot like magic to a lot of people. Today is the last day with students at my school and what I’m thinking about is “did I make magic this year?” and “how can I make more magic next year?” Maybe being the unicorn is the goal."
"323","2018-06-08","2023-03-24","https://blog.acthompson.net/2018/06/thoughts-on-textbooks-in-progress.html","My first published book, Microsoft Visual Basic FUNdamentals, came out 18 years ago. It was for Visual Basic version 6 and what I did was to take what and how I taught and turn it into a textbook. It was a good book. It didn’t sell a ton of books but I was able to take my wife out to dinner a couple of times. I wrote several others after that. Both of them were new editions of a book someone else first wrote. But they were good books and I am proud of that work. Honestly though I haven’t used textbooks in class for a number of years now. They just don’t fit my style of teaching. What I have done is supply students with copies of my PowerPoints (with speaker notes) and some short one or two page documents on various language features. Plus the occasional video presentation. I've been working on a couple of reference books to use in my programming classes since the first of the year. They're getting close to done. I decided to bring home a real C# textbook to look at as I work. There are 17 chapters and over 700 pages. I cover things from about 9 of them in my one semester course. This might be a good book if I were teaching university students. Maybe. For high school and the limited time I have no way. Obviously it has a lot of depth and that is great. The problem is that I really need to make projects interesting to hold student attention. So I teach things like simple file handling, timers, adding images dynamically, collision detection (essential for a lot of games), and a few other things that are in my books under ""Fun Stuff."" I find very little of that in the real textbook. What I do find is hard to find and it is not obvious how they lead to fun stuff. And then there is that whole 700 pages thing. Your average high school student is going to put that in their locker and never look at it unless you assign questions from the book. Well forget that! Homework sucks! Besides I can come up with my own quizzes, projects, tests, and other evaluative instruments and they will be far more tailored to the needs of my course. My VB book is currently at 76 pages including table of contents and index. My C# book at 80 pages. They're not going to get much longer either. They've got everything I cover in class and more for the real go getters. Short and to the point and things are explained in context and directed at high school kids. They're designed to be a reference, a study guide, and something like advanced notes. That is really all most students really need. They should not have to dig though 700 pages to get what they need in a very first programming course. Students seemed to get real value from the drafts I gave them this year. I don't know if they'll work for anyone else. The work is worth it if it helps my students."
"324","2018-06-11","2023-03-24","https://blog.acthompson.net/2018/06/school-year-is-over-time-to-get-ready.html","It is teacher wrap up day at Bishop Guertin. The warning bell for homeroom just rang but of course the students were done on Friday so there are no students coming into my room. It feels a bit off. I started planning for next year already. Over the weekend I got about half way through creating my day by day schedule for Advanced Placement computer science principles. Oh who am I kidding. I got a lot of it done but probably not half way. And I'll spend a lot more time reading through all the lesson plans and will probably make more adjustments. I learned so much teaching it this past year. I've got to do the same for Mobile Application Programming and I have less to start with there. At least I have last year’s experience to build on. I didn’t really have that last summer. Honors Programming is probably the easiest to plan for but I have work there. I have already organized a lot of that but want to write some new things. This is my favorite course to teach so I may leave working on it as my reward for finishing the others. I feel like I have plans better laid for my summer organization than ever before. We'll see if I can follow the plan. I really want next year to be the best year of teaching ever."
"325","2018-06-12","2023-03-24","https://blog.acthompson.net/2018/06/reflections-on-programming-and-teaching.html","Mark Guzdial has an interesting post called Reflections of a CS Professor and an End-User Programmer in which he compares end-user programming and professional programming and how.if/what we teach for the two. I started a comment but decided it didn’t really fit there. I'm pretty much in the same boat Mark is in. While I have been a professional programmer, these days I mostly write code to use as examples or to solve my own little problems. I like to think that I bring some of what I learned and did as a professional into my little projects but it's hard sometimes. I was talking to another teacher today about a program that he wrote that we both use to track our course schedules. He gave me a new version and said to let him know if I found anything weird because he was so used to it that he probably subconsciously ignores some things. That is why a lot of end user programs are only usable by the programmer. I know that some of my projects are the same - not usable by anyone but me. I'm starting to think that is a problem. But do I really want to spend the time to make them usable by others when the problems they solve are so personal and individual? Perhaps the best I can hope for is that they don't embarrass me too much if someone else sees the code. I teach beginners. Real beginners who usually have no prior programming experience. I am not turning out professional developers. Oh sure some of them go on to internships with what they learn in my classes but I would not call them profession ready. I can’t teach them all that in a semester or even three semesters of high school. That doesn’t mean I can afford to teach them to be sloppy. The basics I can deal with. Good naming, planning ahead, top down design, breaking down problems into small, manageable chunks, and some good error handling. I’m pretty careful about the code I show them. Some of my personal code I wouldn’t show them while others I would. I remember showing a game I was working on to some students once. One of the students remarked to the other “look at that! He’s already coding preparation for expansion.” That I can teach. So where do I come down on this? Well, I think I can lead by example if I am careful. And maybe I should take my own code more seriously."
"326","2018-06-16","2023-03-24","https://blog.acthompson.net/2018/06/congressional-app-challenge-2018.html","One of my students won for her district last year. She found it a very valuable experience. I highly support this challenge. Share it with high school students you know. What is the Congressional App Challenge? The Congressional App Challenge (CAC) is a congressional effort to encourage high school students to learn how to code. Last year, 200+ Members of U.S. Congress in 42 states conducted an App Challenge in their respective districts. Nationally, the contest inspired 4,956 students to code in 2017, and over 8,800 students cumulative in past 3 years. Students (in teams of up to 4) code applications for the chance to: get recognition from their Member of Congress, win prizes, display their app in the Capitol Building in Washington, DC. How can your students get in on it? Here's a 3-minute ""explainer"" video: https://youtu.be/cnM-Bb3TmCU We would love to see a diverse range of students shine on the national stage! Website: www.CongressionalAppChallenge.us In the first 3 years of the Congressional App Challenge, the program has yielded 605 App Challenges across 42 states. Over 2,400 apps have been created by nearly 9,000 students, and participant demographics surpass all industry diversity metrics, with young women representing 30% of all competitors. This year, the CAC initiative aims to reach even more constituents."
"327","2018-06-21","2023-03-24","https://blog.acthompson.net/2018/06/autonomy-motivation-and-teaching.html","Of the several courses I teach, my favorite course is call Honors Programming. Its a one semester course that is the first real programing course for my students. Its my favorite course because it is the one I have the most autonomy teaching and because I am very prepared to teach it. I extend this autonomy to my students as much as possible. I find that the end of year semester wrap up project is the best learning experience of the course. In large part that is because the students select their own projects and seem very motivated to learn what ever they need (and somehow missed during the semester) to get their projects to work. My biggest frustration with the course is that students get a solid base, do one pretty interesting proj3ect and then they are done. At least for a while. Many take Advanced Placement CS (some AP CS A and some AP CS Principles) but both of those courses tend to be pretty constrained. They don't really allow for really big projects that as self selected. What I really want to do is teach a follow on course that is purely project based. I want students to pick a major project that they are really interested in and commit to learning, on their own, the things they need to know to complete it. Yes, I want a whole classroom full of students learning different things and working on different projects. I've seen amazing projects come out of classrooms run this way over the years. I am tired of grading simple easy to create programs that are only mildly challenging. I'm working on a proposal for this sort of course. My friend Doug Bergman runs some serious project based courses and is partly the inspiration for this. As are a couple of other teachers I have learned from over the years. It seems that students really get motivated to work on big projects, even scary projects, when those projects are meaningful to them. A motivated student will really put in a lot of work. They also pay attention when a teacher points them in a direction. One plus about Doug is that he has written the book on this sort of thing. I'm learning a lot from Computer Science K-12: Imagining the possibilities!: Bringing creative and innovative Computer Science to your school It really has me excited. (I recommend Doug's book BTW for anyone looking to create or expand a computer science program. Lots of good stuff there. I'm looking for more ideas as well. Grading is a concern especially for administrators and parents. Doug has some stuff on that in his book but I'm always open to more ideas. I know that giving students too much autonomy scares some people. Keeping them on task and making steady progress can be an issue. Students often think they can goof off now or change priorities for what they think will be temporary needs and still get everything done at the end. They often guess incorrectly so keeping track is important. In the long run, I think that this sort of opportunity with motivated and interested students can result in a lot of learning. It can also help build interest in computer science, help students learn to learn, and result in benefits for all concerned. BTW, earlier today I heard an interesting, and I think related, report on NPR. A Lost Secret: How To Get Kids To Pay Attention One key quote. “Many studies have shown that when teachers foster autonomy, it stimulates kids' motivation to learn, tackle challenges and pay attention, Deci says. “ That’s what I am talking about!"
"328","2018-06-26","2023-03-24","https://blog.acthompson.net/2018/06/facial-recognition-augmented-reality.html","Summer is a time of reflection and learning for me. I really want to be a better teacher and summer give me a chance to read more and to think more. This week I have been thinking a lot about facial recognition and augmented reality. One of the things that I know from experience and from research is that knowing students, especially their names, is a powerful thing for a teacher. Faces are hard for me. I don’t know if it is the way my brain is wired (there is a thing called prosopagnosia or face blindness that I would like to blame) or if I am just not working hard enough at it (as my son who knows every student in his elementary school – he’s the principal – suggests) but I would really love augmented reality that would let me know each student’s name. I also think “wouldn’t if be nice if a computer scanned the class room and took attendance for me?” On the other hand if we take that to a (perhaps) logical conclusion were get computers that track every student’s face to see who is paying attention. They are trying that in China (link below) and that scares me. It especially scares me if it gets tied into a ‘social credit’ ranking system like China is setting up. (Link below or search for China social credit) Oh boy! I can’t see a lot of students liking that one! Below you will find a link to an article about the CEO of a company that develops facial recognition who warns about how ready it is – or is not! Are we really ready to have it judge people? I think I’d rather see people doing the evaluations. BTW, there are schools experimenting with tracking students with RFID chips. Does using facial recognition take this to a new level or is it just a logical next step? Do we really want to normalize this level of tracking? I’m a little uneasy with the idea. Maybe more than a little. But to keep this positive and closer to education and making teaching better, Vicki Davis is seeing a lot of artificial reality and augmented reality at the ISTE conference (link to her recent post below) and seeing some positive things. As well as some risks. Could artificial intelligence replace teachers? Maybe the bad ones but what about the good ones? She doesn’t talk about the costs of teachers vs AI though. You and I know that some people would rather have poor to average “teacher” who are inexpensive than spend more money for the best. I see artificial reality and augmented reality as being very different. Later this week I am getting a demo of the VR system my wife’s school has installed. I may blog about that after. But for now, augmented reality. Things that lead to more and better interaction between students and teachers is a good thing. Imagine if every teacher in the school could address every student by name the first time they saw them. My gut tells me that is a good thing. Students want to be known and a name is a powerful part of that. What if a student showed up at my desk and asked me what they got on the recent test? They do that you know. Somehow they think you remember every grade for every one of their students. A AR system could pop that information up for a teacher. That would be good. Right? Potential for abuse? Sure. There is a fine line between deciding to call or not call on a student based on their grades as a good thing or a bad thing. A reminder that a student is on a concussion protocol might be a good thing though. So both risk and benefit to facial recognition and AR. How we balance that determines if we use it to improve education and learning or just become control freaks who limit student options. Do we use it to build relationships or to hand off everything to computers? Do we use it to share excitement and new ideas or do we just use it to make education inexpensive at the cost of quality? So much to think about! Recommended reading Vicki Davis talks about The Irreplaceables: What AR and AI Mean for the Future of Teaching A Chinese high school is using facial-recognition technology to monitor and analyze students' behavior. China has started ranking citizens with a creepy 'social credit' system — here's what you can do wrong, and the embarrassing, demeaning ways they can punish you Tracking School Children With RFID Tags? It's All About the Benjamins The CEO of a company that develops facial recognition says “using commercial facial recognition in law enforcement is irresponsible and dangerous.”"
"329","2018-06-27","2023-03-24","https://blog.acthompson.net/2018/06/teach-me-how-to-teach-not-what-to-teach.html","Today is the last day of ISTE and I’m not there. I am following a lot of conversation from there on Twitter though. One thing that is coming up is that a lot of the computer science related professional development there is for beginners and/or for K-8 teachers. Now this is wonderful but it is not what I need. Sarah Judd had a couple of wonderful tweets that sum things up for me. Some of us have a lot of content knowledge. This is especially true for career changers from industry such as myself. It is equally true for many teachers who have been teaching for some number of years. What many of us need is more about how to teach. In a word pedagogy. I don’t mean “here is this robot and here are some example projects and code” and that sort of thing. I mean that is nice and all but it is usually a lot more about the tool and not the pedagogy. We are finally seeing some real research in how to teach computer science better. I’ve personally learned a lot from papers submitted to the SIGCSE conference and I’d really like to attend in person again. The problem with SIGCSE for a lot of teachers is it at a tough time to get away for a lot of us. And there is that whole perception (not 100% wrong) that it is for higher education educators. ISTE is going to be highly focused on beginners for some time to come. I don’t have a problem with that. I think ISTE can have a large impact on generating awareness among school administrators and technology integrators and teachers who are really serious about preparing students for a modern world that includes computers. CSTA is the group I think should really increase their focus on training teachers how to teach. I would love to see a pedagogy track at the 2019 conference. Let’s hear about people using Parsons Problems, sub goal labeling, and other techniques. (BTW maybe take a look at How To Teach Computer Science where I talk about some of this) How about some case studies of project based learning? Not with a focus on the projects but with a focus on evaluation, maintaining student progress, and what does and doesn’t work about them? I am reminded of a conversation with a peer when I was an undergraduate. Someone asked him why he was a business major when he grew up on a farm and planned to stay in the family business. Why not agriculture? He replied that he knew how to farm. Modern farming is also a business and that is the peace he didn’t learn growing up. Those of us who “grew up” in the computer science field know about computer science. Now we need help becoming bettor teachers."
"330","2018-07-06","2023-03-24","https://blog.acthompson.net/2018/07/thoughts-before-csta2018.html","My bags are packed. Normally I pack the night before a trip but my suitcase has been packed for days for my trip to the annual CSTA Conference. I even got a haircut this morning. I cleaned out my computer backpack and loaded my Kindle with books for the plane rides. I’ve been to just about every one of these conferences dating back to before there was a CSTA and it was the CS & IT Conference. Somehow this year feels different. My level of excitement is higher. Sure there are more workshops than ever before and the sessions next week look awesome. But there is more to it than that. There is real energy in the computer science education community these days. We’re making progress in getting computer science moved into the mainstream of education. Here in New Hampshire, teaching computer science is defined in law as being part of an adequate education. Similar things are happening across the country. We’re seeing tremendous growth in students taking computer science courses. Advanced Placement Computer Science numbers are seeing amazing upticks. Teachers are more and more involved in conversations in social media. Twitter, Facebook, blogs, and anywhere else teachers communicate online. The ISTE conference has more CS every year as well. But for most of us in K-12 computer science the CSTA conference is the place to meet in real life. Besides sessions and workshops the hallway conversations look to me amazing. Informal gatherings of all sorts are being planned and more will happen spontaneously. They’ll happen in the exhibit hall. (Can I say I love that the companies and organizations who come to exhibit really see to understand our community?) They will happen in hallways, lobbies, nearby food and drink establishments, bus rides to receptions, and anywhere two or more CS teachers bump into each other. I already know there will be conversations about pedagogy training rather than just content. I know there will be talk about training for more advanced teachers who have a solid content knowledge already. And this is besides the scheduled birds of a feature sessions. I can’t wait. Hope to see many of you there. I’ll be wearing my hat so come find me."
"331","2018-07-08","2023-03-24","https://blog.acthompson.net/2018/07/and-it-beginscsta2018.html","Yesterday opened the CSTA Conference with afternoon workshops. And there was a nice reception put on by Google. For me it was a travel day and a getting settled day for the most part. Thant and a lot of opportunities to have conversations. I didn’t take any of the workshops so I can’t report on them first hand but from Twitter it seems like they went very well. The conference bag had some real treats in it though. The big surprise was this Chibi chip starter kit. There is a microchip and accessories with a book. I expect a lot of people will have some fun with that. I’m helping out at the registration booth for a while this morning. Volunteering is a great way to meet people as well as to help the conference run smoothly. I’m glad I had time in my schedule to do so. After lunch the exhibit hall opens. There are a lot more exhibitors this year and I am really excited about that. My next blog will be a report on that."
"332","2018-07-08","2023-03-24","https://blog.acthompson.net/2018/07/pictures-from-csta2018.html","Before I get into some pictures of the exhibit hall let me tell you that there are a lot of people here. This was lunch on Sunday. Arkansas is in the house. A large and visible group from Arkansas. And they brought flags and pins and lots of personality. Arkansas is doing great things with developing CS for All The exhibit hall is much larger than in previous years and it really looks like a real exhibit hall. I went around while they were still setting up and took a few pictures. This is just a taste of who was there. I may post more pictures tomorrow but this gives you some ideas. CoderZ showing off their virtual robots. Amazon Web Services are here. No not selling books but sharing some of there tools and options for teachers to teach cloud computing. I will be looking closer at this for my AP CS Principles class among other things. Birdbrain always has an interesting table. Physical computing is big again this year at CSTA. Is this the largest Micro:bit in the world? Firia Labs has some interesting things on display. I need to spend more time there tomorrow. CodeHS has a big booth and a large team here. A great opportunity to talk to them about their offerings – free and paid. I used some of their free materials last year with my AP CS Principles students. Vernier had some great sensor projects. Some even programmed in Scratch. I have to get their catalogue. I want to make some of those projects myself. TEALS was here with a good crew. Very exciting program that places industry professionals in the classroom to co-teach with (and train) classroom teachers teaching computer science. IBM is at CSTA for the first time. They are talking about heir Master the Mainframe contest, IBM Activity Kits, and other offerings. Surprisingly mainframes are a growing business for IBM and there are jobs for people who understand them. I’ve heard from others that kids learn a lot from that competition."
"333","2018-07-09","2023-03-24","https://blog.acthompson.net/2018/07/computer-science-teachers-association.html","One of the big announcements at CSTA today was a new premium level of membership in CSTA. There is and will continue to be a free membership. This new premium membership offers some additional benefits and will also provide money for local chapters. Half of the CSTA+ dues will go to local chapters to enable them to expand their program. This is something that has been under discussion for several years. My local ISTE affiliate, NHSTE has had a similar two levels of membership for some years and I have benefited from that paid level. I expect this CSTA+ membership to be well worth the money. Yes, I’ve signed up! Find out more at CSTA.plus There you can find some additional benefits and sign up."
"334","2018-07-10","2023-03-24","https://blog.acthompson.net/2018/07/reflecting-on-csta2018.html","I feel like I have really fallen behind on reporting on the CSTA Conference in Omaha. Part of the problem is being a bit overwhelmed. Usually I write blog posts in boring sessions. I didn’t attend any boring sessions. I have to absorb some of it and I will write a more detailed post soon. I hope. Right now I am sitting in an airport waiting for a delayed flight and not up to gathering all my notes. Who am I kidding. What I have for notes are tweets I have posted with the #CSTA2018 hashtag. A lot of people tweeted a lot of good stuff and others have already posted summaries on blogs. This conference was a bit different for me. I wasn’t there as a presenter, a CSTA board member, or representing a company. Just me – teacher from New Hampshire. In some ways that was freeing but it felt different. The size of the conference is different as well. Back when there were 50 or 60 of us at the conference I knew almost everyone. At 700 attendees there was an amazing number of new faces. First time attendees. People brand new to teaching Computer Science and people in district roles that didn’t exist a few years ago. That’s not a bad thing at all. It’s a great thing. When we were so small a group we risked too much group think. Now we have lots and lots of views. Having people with so many backgrounds and experiences is an amazing opportunity. So while I loved spending time with people I have known for years and years it was wonderful to meet and talk to so many new people. A lot of people told me they read this blog or follow me on Twitter (@AlfredTwo) which was very encouraging. Like many who post to social media I don’t always know if there is anyone out there or if I am yelling in a vacuum. Speaking of Twitter. I talked about that already but it was humming. Lots more teachers are tweeting these days. It really is a good way to share information. The exhibit hall was a lot larger this year,. I blogged about that the other day (Pictures From #CSTA2018) and I really appreciate the companies and organizations (three universities for example) who show up to talk to teachers. Even at 700 attendees, CSTA has an atmosphere that is a lot more conducive to real conversations with exhibitors than a conference like ISTE or TCEA (as great as those conferences are in their own ways.) There were a lot of people who were at CSTA because of company funded scholarships. Rolls Royce funded about 25 people (including me). Oracle Academy provided grants and goodie bags to a bunch of people. Google provided money for CSTA Chapter leaders to come for two days of special training and the conference. This is real support of teacher development. These companies understand the need for teachers who actually know what they are doing and are willing to put some money behind their talk. If you were there and we didn’t connect I am sorry. 700 people can make that harder than we might like. I hope though that you had some great conversations with others and learned as much as I did. Next year CSTA will be in Phoenix, Arizona from July 7th to 10th, 2019. It’s going to be even better. I just know it."
"335","2018-07-11","2023-03-24","https://blog.acthompson.net/2018/07/taking-microsoft-technology-associate.html","Contrary to popular opinion I did not do it for the free t-shirt. Certaport was offering teachers at the CSTA Conference the opportunity to take a MTA exam (or exams) for free. If you passed you also got a t-shirt with your certificate. I had other reasons to take it though. Yes, I wanted to test myself a bit. I had not studied for any of them and I hadn’t planned on taking any exams. When several of my friends took exams (and passed of course) I decided maybe I should try. I chose the Block Based Programming exam because I teach some block based programming. The exam is currently based around TouchDevelop which has been discontinued but the exam will be rewritten for the blocks in MakeCode.com soon. In any case, I know some TouchDevelop so it seemed a good choice. More importantly I was curious as to how the tests were given. What sort of questions where asked? How are they presented to the test taker? And more process sorts of questions. It turns out that questions are asked several ways. There are a few ordinary multiple choice questions. There are a few questions where you have to read and understand code. There are also questions where a problem is explained and code is shown with “holes” that you have to fill from drop down lists. There are also Parsons Problems types of questions. In these you are presented with a problem, 6 to 8 lines or blocks of code and asked to place the right blocks in the correct order to solve the problem. There are usually extra blocks of code. It’s harder than you might think. There were also questions I would categorize as software design or software engineering questions. In fact, the whole test is harder than you might think. You really do have to think and I was concerned about the 60 minute time limit for the 39 questions. My friend, Doug Bergman took the Java certification and told me he thought it was Advanced Placement CS level of hard. I feel pretty confident in saying that these are rigorous (especially for first level certifications) exams. I wish I had a system like that to give quizzes and exams to my students. Especially the Parsons Problems style of questions. Oh, yes, I did pass and I did get my free t-shirt."
"336","2018-04-05","2023-03-24","https://blog.acthompson.net/2018/04/thoughts-on-where-cs-education-tools.html","TouchDevelop is being retired. It’s not the first tool with educational use to be retired by Microsoft. Or from other companies either. While I have used TouchDevelop with my students I was getting ready to move to MakeCode anyway so it is not a fatal move for me by any stretch. I know other teachers who have been using it more extensively who are going to feel some pain though. I tend to divide CS educational tool sources into four categories. Professional tools that are useful in education. In this category we see things like Eclipse, Visual Studio, and other development tools that are being used to create real products. These tools are not going anywhere anytime soon. Companies, both those that use them and those who create them, have a vested interest in supporting and improving them. University developed tools. This includes things like Alice and Scratch but also BlueJ and Snap! and, well, far too many to mention. These are also likely to stay around for quite a while. People tend to build careers around them and use them to attract graduate students who use them, enhance them, and generally want them to be around. Education companies. Companies like Tynker and Birdbrain are included in this group. As long as these companies can make enough money to keep going their tools will be around. Industry Research Projects This is often the most state of the art and cool new things. On the other hand they are the least to be around for a long time. AppInventor was originally one such. Fortunately for educators who adopted it, when Google was done with it they were able to hand it off to a major university where it continues. TouchDevelop is another. Hear though, when the researchers moved on to new ideas there was no similar handoff. Both the Touch Develop web app and cloud backend are open source under the MIT license: https://github.com/microsoft/touchdevelop https://github.com/microsoft/touchdevelop-backend There is no indication that anyone is going to take it on though. I always assumed this day would come to be honest. Industry research groups have changing priorities and in some ways that is a good thing. I could argue it is a very good thing in terms of advancing the state of the art in computer science. It’s sad for us in education who aren’t always as quick to adjust as industry is. As one tool fades another grows. MakeCode is pretty cool and there is a lot there learned from TouchDevelop, the Micro:Bit and educational uses of them both in there. Microsoft is developing a sprite-based game engine for MakeCode and a new course on game programming, in the spirit of CCGA (an interesting curriculum based on TouchDevelop.). One hopes it will be available in some form for teachers to learn it this summer. I’m not sure where the materials developed by code.org fit into my classifications though. They are a non-profit with industry funding but they are neither industry or academia. They have some great stuff though. I am using their CS Principles program for example. Chances are I’ll retire before they “go out of business” so I can probably depend on them plenty long enough. Nothing lasts for ever though and change is the most constant thing in computer science. So we have to learn to adjust and change our tools and our curriculum, probably, a lot more often than educators in other disciplines. At least we’re not going to get bored."
"337","2018-04-06","2023-03-24","https://blog.acthompson.net/2018/04/idealism-and-computer-science.html","Idealism is a good thing. Well, mostly it is. This morning I heard Facebook COO Sheryl Sandberg say that Facebook was too idealistic about somethings and that lead to the current Cambridge Analytica scandal. In another interview she said that Facebook was told by Cambridge Analytica that they had deleted their data which turned out not to be true. But Facebook trusted them. When people have good intentions they tend to assume that others also have good intentions. The very early computers and Internet had very little in the way of security. Most people had only good intentions and assumed that everyone else had them as well. Why secure things if you are sure that no one will misuse them? One of the things I learned early in my career is that any program of any size and complexity can be used in ways that the people who created it never intended. We’d all like to assume that no one would using things in bad ways. Alas, this is not the case. These days we teach a lot about being safe with computers and protecting data. It’s a complex problem and one that I think students don’t always absorb as well as they should. Idealism is strong in the young even though there is evidence of people acting badly all around them. Many of us get into the field of computing as a way to make the world a better place. Facebook wants to connect everyone in the world to build community. Google wants to index all the world’s information to make it accessible and available for everyone to learn. Most companies at their core have some ideal of “good” as their mission. This is especially true of many companies, like Google and Facebook, that are founded by young idealistic people. Somehow we have to get people to understand that there are people who will misuse data and we have to find ways to minimize the negative aspects while enabling the positive. And we need to start with the young so that they can continue their idealism and ideals and at the same time protect the people they are trying to help."
"338","2018-04-09","2023-03-24","https://blog.acthompson.net/2018/04/why-programmers-need-to-ask-questions.html","I keep seeing suggestions that people don’t need to learn programming because computers will do it better. I am skeptical. In part I am a skeptic because I have been hearing this sot of thing for scores of years and I don’t think we’re getting close to this that quickly. But more importantly I worry that it will take language processing a long time to get good enough at understanding people and language. For example you may have seen this old joke: A wife asks her husband, a software engineer ""Could you please go shopping for me and buy one carton of milk, and if they have eggs, get 6!"" A short time later the husband comes back with 6 cartons of milk. The wife asks him, ""Why the hell did you buy 6 cartons of milk?"" He replied, ""They had eggs."" I like to share that with my students to help them understand ambiguity in language. Today I saw this somewhat macabre version. I’m still not 100% sure I want to use this one in class but it does highlight the risks of unclear speech. One of the things I learned developing applications early in my career was that users use language that works for them and for people in their field but which may not be clear to others. It is important to understand their vocabulary, their understanding of the tasks, and how they work. Without a common set of assumptions trouble is an unavoidable result. In the first joke above there is no clear connection between eggs and milk and bad assumptions are made. I’ve learned to question my wife closely about the shopping lists she gives me. Things that are totally clear in her head may be totally opaque to me. Will computers be able to know how to ask the right questions? Or will they make assumptions of their own? I’m guessing this will take a while to work out. In the mean time we, people, are going to have to be very careful about how we instruct computers."
"339","2018-04-12","2023-03-24","https://blog.acthompson.net/2018/04/can-we-afford-digitally-illiterate.html","Like many people I found the Zuckerberg Congressional Hearings disturbing on several levels. Yes, there are some serious issues with Facebook and other Internet services with regards to privacy, security, and social impact. We clearly need to deal with them. That is probably a topic for more discussion and blog posts. The lack of understanding of how technology and the Internet works on the part of people who can and likely will pass laws about them was also deeply concerning. Doug Bergman talked about this at length in his post “The Elephant in the Room.” That’s a great read and I recommend it highly. But I have to stick in my own two cents. Someone asked me if we required deep aviation knowledge in the members of Congress who questioned Howard Hughes. I think their point was that we don’t expect our Congress people to be deeply technical on all subjects that come before them. That’s a valid point but at the same time we would hope that they would consult with experts before making decisions. And frankly some of the questions should have been general knowledge and were not deeply technical. A lot of people who disturbed when Senator Hatch asked how Facebook could maintain a business model where its users didn’t pay for the service. I know I was. Advertising support is a model that predates the internet. It’s a model that allows us free radio and TV for example. To not know that this is how Facebook supports itself is worrying to me. That and other questions could have been and should have been explained during staff preparation of the Congress people while they prepared their questions. They are pretty basic. These hearings were one of the best arguments that everyone needs some computer science knowledge. Not just the computer people. Not just the STEM people. Everyone! And just maybe, with the way things are going, its particularly important for those planning on a career in politics. It also seemed that several people had trouble understanding the answers even though Zuckerberg tried to make them simple. It seemed like one Congress person had no real understanding of what an encrypted message was about. That’s not just a Facebook or even internet thing. Though we do often discuss it in digitally literacy units (I know I do.)"
"340","2018-04-13","2023-03-24","https://blog.acthompson.net/2018/04/teachers-for-now-or-teachers-forever.html","One really can get a lot out of following Twitter hashtags from conferences and other events. Today I saw the following Tweet: This in a nutshell is the concern with a lot of current efforts to prepare computer science teachers in a hurry. Yes, you can teach a teacher to teach a specific course and you can give them a lot of scaffolding and tools to get by. They may even see great results. But what happens when things change? My school has something like 20 different courses in the Math department. Can you imagine hiring a teacher who could only teach one of them? Even one that is a soft of default course? Seems like a long shot. We want our Math teachers to be able to teach a range of courses. We want that not just so they can be moved around as needs change or to give them diversity during the day but because we want teachers who know where their course fits into the whole curriculum stream. Shouldn’t we want that for computer science teachers. The #Home4CS event, from what I can tell from Twitter, was about preparing pre-service computer science teachers in university schools of education. One can easily find Masters degree programs in teaching English or teaching Math or teaching other sciences. A MS is Teaching Computer Science? That’s a bit harder to find. That’s really going to be essential if computer science education is going to grow and mature the way we really need it to develop. Content knowledge is absolutely critical for teachers to be able to continue as computer science changes. It’s necessary but not sufficient though. Teachers need to know how to teach computer science. It’s not the same as other subjects. Yes, people with deep content knowledge can learn to be good teachers. And teachers can pick up content knowledge and develop into good CS teachers. Learning content AND how to deliver it before starting in the classroom would be a huge advantage. It would be better for teacher and students alike. It is not going to happen until schools of education start making a home for computer science educators."
"341","2018-04-17","2023-03-24","https://blog.acthompson.net/2018/04/training-next-generation-of-computer.html","The biggest problem in computer science education is training the teachers we need. That seems to be the big thing on my social media in the last few days. This past week was a major document release in New York of ""Priming the Computer Science Teacher Pump: Integrating CS Education into Schools of Ed”. Mark Guzdial wrote about it here. You can also download the actual report here. Mark also shared the slide deck from the event on Slideshare here. If you don’t have time for the whole report the slides make interesting reading as a sort of summary. It has been clear to many of us in CS education for a while that we really need schools of education to step up and prepare CS teachers. This report addresses what is needed with some solid recommendations. This being computer science education, others are tossing in their opinions. Mike Zamansky, who was at the release event, gave some of his thoughts on his blog at - Math For Math Teachers - watering down CS Ed before we even start. Mike comes from a heavy CS background and many years teaching at a highly rated, entrance exam, public high school in New York City. That gives him a particular perspective. Garth Flint, who teaches as a smaller private Catholic K-12 school in Montana, wrote a blog post on the subject - CS Ed – to water or not to water, that is the question which really covered the situation for a lot of teachers especially those in rural areas and other smaller schools. It’s a different perspective from Mike’s. One is not better than another – they’re just different. In a sense those two posts show some of the diversity of educational environments we’re seeing in computer science education. Preparing teachers for this wide range of needs is definitely going to be part of the challenge. I can’t see a one size fits all CS teacher preparation scheme working. There is really going to have to be some local variation as well as consideration as to different age level preparation. I’m not sure one can easily prepare for the full range of Kindergarten though Advanced Placement Computer Science. Content is one thing but the how to teach is another. OK, now there is something of a roadmap. Will schools of education move into this space the way we need them to do? We’ll see I guess but I hope so."
"342","2018-04-18","2023-03-24","https://blog.acthompson.net/2018/04/arrays-loops-and-racing-horses.html","One of the things I like about using Visual Studio and C# (and Visual Basic for that matter) is the ability to easily create some fun graphical projects. I’ve been using variations of the horse race program for years now. I though it might be fun to share my latest use. Students sometimes have trouble seeing the benefits of arrays because they are used to small projects that can get by without them. I want them to see how the combination of loops and arrays make expanding programs easier. My students were given a mostly empty project with the objects you see in the image above already part of the project. I don’t want them to get lost in setting up the GUI. There is a “Race” button, a “Reset” button, four picture boxes, and the finish line (a nicely formatted label.) No code though. We’ll create that as a class. The first thing we do is allocate an array of three picture boxes. Next we assign the value of the existing picture boxes to the array. We talk about how the picture boxes now have two names or two ways of addressing them. This is related to people’s names – formal name, nickname, etc. public Form1() { InitializeComponent(); Horses[0] = picHorse0; Horses[1] = picHorse1; Horses[2] = picHorse2 } The naming I use (I hope) drives home how identifiers that differ only by a number at the end leads one naturally to thinking about arrays. We write code to move the “horses” random distances each time a timer fires. Using timers is not absolutely necessary and I have used while loops but timers open some ideas for interesting projects. The “Race” button enables the timer and the horses start moving by changing the Left properties by random numbers of pixels.. for (int index = 0; index < Horses.Length; index++) { Horses[index].Left += r.Next(3, 8); } Next we add the code to check to see if the Left property plus the width of the box crosses past the left property of the finish line. Students are asked to figure out the Reset button on their own and most do so easily. At this point we’ve had a lot of discussion about the code we’ve written so far. Next I ask them to add more horses to the problem. They soon discover that this is a fairly trivial task because of the way we have designed the program. Since we get to work with interesting arrays and see how setting up loops we cover some important topics. Best of all, students seem to like this project. There is room for student creativity as well. Some add only a few horses, some add many. Some get fancy with reporting winners. Some explore other images from what I provide. Others decided they wanted that last place horse to disappear before the next race. That involved a lot more work then they expected but they were motivated to try things. But no one, including me, get bored."
"343","2018-04-26","2023-03-24","https://blog.acthompson.net/2018/04/computer-science-k-12-imagining.html","My friend Doug Bergman has a new book out called Computer Science K-12: Imagining the possibilities! I reviewed drafts of the book while it was being written and I can tell you there is a lot of good stuff in it. For teachers new to Computer Science who have been charged with starting a new class at your school, and just don't know where to start. I'll walk you through what you need to be considering such as which technologies, what type of curriculum, student recruitment, professional development, connecting with other CS teachers, and pedagogy. For school leaders, board members, and decision makers who need to know what Computer Science really is, what it looks like in the real world, and what it can look like in education-- this book will guide you through many of those early questions as you consider if, how, and where Computer Science fits in your schools: What are the attributes of successful CS teachers? Where can I hire teachers? Do I need ""experts"" in CS? How do I evaluate a project-based class? Standards? Training for new teachers? What successful programs can I look at for ideas? For those experienced CS teachers who are just not seeing the energy and engagement in your classes, this book will be a wealth of innovative ideas and strategies to help you engage differently with your students. Technology today is interactive, engaging, and dynamic; Computer Science classes should have that same feel. You'll see how to create a student-centered classroom where students lead their own learning."
"344","2018-04-30","2023-03-24","https://blog.acthompson.net/2018/04/are-you-in-on-social-media-conversation.html","Today is the absolute deadline for my students in Advanced Placement Computer Science Principles to upload their Create Performance Task to the Digital Portfolio. One of my top students was having trouble getting a file to upload. When he told me that I remembered that some teachers had talked about similar problems in the Facebook AP CS Principles group. A quick look (fortunately my school does not block Facebook) and I had the solution. Apparently short filenames work best. Problem solved. Student work submitted. I’ve seen a lot of problems solved for teachers via conversations in various Facebook groups. Besides the group for AP CS Principles teachers there is a group for AP CS A teachers, one for Computer Science Education: Researchers & Practitioners, a general Computer Science Educators group, and don’t forget the CSTA group. I’m sure there are other groups that are useful. I know that several CSTA Chapters have their own groups. Are you a member of one? There is more than Facebook though. There are frequently interesting conversations going on with CS education blogs. Sometimes these conversations take place in the comments. Sometimes through posts in one blog that reference posts in a second. Or more. Some of the best take place in blogs by: Mark Guzdial Garth Flint Mike Zamansky Doug Bergman. I’ve seen posts in several of these that refer to posts by others either directly or indirectly. For example, a recent post by Mark Guzdial wrote Lack of funding leads to lack of teachers leads to lack of CS classes: We may need to change our strategy. Mike Zamansky made a case that time and money are not as big a problem as prioritization and will in a post called Is there room for CS for All. Garth Flint addressed some of the cost factor in a post called CS on the Cheap. Garth also referred to a book and a video that Doug Bergman blogged about. You’ll find comments on most of these posts as well. Are you following these blogs? Maybe you want to add to the conversations either in the comments or by firing up your own blog? Don’t forget Twitter either. If you are a K-8 CS teacher you will want to follow the #csk8 chat. This week it is about Scratch. No matter how you do it there is a lot to learn by sharing with your peers via social media. Jump on in the water is fine. Edit: Note that my full Computer Science Education blog roll is at http://blog.acthompson.net/2012/11/computer-science-education-blog-roll.html"
"345","2018-05-03","2023-03-24","https://blog.acthompson.net/2018/05/my-code-is-same-as-yours-but-mine.html","We're all heard it from students ""My code is the same as yours but mine doesn't work."" The implication is clear – it is the computer's fault that the program doesn't work. Of course something is always different. Often times it is a small difference. A student confused and lowercase l for a 1 perhaps. Or the is an extra or a missing semi colon. Sometimes the problem is in related code that the student hasn’t though to check. One thing I see a lot of is students referencing form objects (a button or a textbox) that they didn’t name the same way I did. Trying to reference txtName.Next as my code does will not work correctly if their textbox is still named textBox1. Computers are picky that way. Names matter, semi colons matter, and many other little details that our minds easily fill in for us are not obvious at all to the compiler. Nor are they obvious to students. Students rush. They take shortcuts. They are used to things working out. Computers don’t work that way. Sometimes I think the hardest thing about learning to program is to understand that details matter and that sometimes you have to look in less obvious places. Students are used to quick fixes though. The TV murder is solved in 60 minutes (45 minutes plus commercials). The family crises is solved in 30 minutes on TV. Real life is not like that and programming is real life. I hear over and over again that research doesn’t support the idea that teaching programming automatically teaches problem solving. I have to wonder though if at some point debugging doesn’t click into the idea that details matter and that you need to look beyond the obvious answers."
"346","2018-05-08","2023-03-24","https://blog.acthompson.net/2018/05/visual-studio-live-sharesomething-cs.html","Microsoft is having their big MS Build event this week. I don’t have time to watch it live but I have been seeing hints of things via social media. Most of what they are talking about it for professional developers and is far more advanced than what I have time to get to with my students. But sometimes there are things I can really use. Visual Studio Live Share looks to be one of those things. With Visual Studio Live Share two people can actually look at and work on the same code at the same time. Merge that with a Skype call and it is like being there. Think Google Docs for Visual Studio. (Someone will object to that characterization for sure.) So far I have just tried it locally (two computers next to each other with me operating both) but I can see some educational uses. For one thing I can see sharing code with students and having them work on code I have on the screen from their own desks. I can also see easier pair/team working in rooms that don’t lend themselves to a lot of student movement. My tables don’t move and things can get crowded if people mover around too much. I can also see using it to help students with their own work. Now in the classroom it may still make more sense to walk over to where the student is working. On the other hand if a student is working from home we now have a great way to work together. I’ve been thinking about using it to watch students as they code (with their permission and their controlling the share) from time to time. That may give me some insights without being quite as intimidating as literally looking over their shoulder. For those students who pretend to be working this may be just the thing. There are likely to be more ideas that others come up with. Time will tell. At least for now I have a few ideas worth trying out. What do you think? Do you see some educational potential?"
"347","2018-05-09","2023-03-24","https://blog.acthompson.net/2018/05/programming-is-easy-debugging-is-hard.html","I may be in a minority in this but in some ways the most fun part of my job is debugging student code. Students are very clever at wring code that doesn’t work in obscure ways. Some how they manage to create errors that look like they are in one place but are really in a completely different place. The end of the year involves a lot of debugging. Students know more ways to do things wrong than every before. It’s a lot of fun. No, really it is. Now I know that letting students struggle with logic errors is sometimes (often? mostly?) a good thing. On the other hand they usually lack the experience to see the possibilities. In general I find that struggling students are focused on the wrong part of their code. At some point a teacher has to step in and help out a little. Today I had a student working on a Pong program and it was not recognizing when the ball hit a paddle. He was looking at the speed of the ball, the arrangement of the code, the working of the if statements and generally focused on a lot of different code. The problem could not be with the IntersectsWith method of the rectangle class. That is part of the system library so it must work. Right? Maybe we are not updating the location of the rectangle in the right place and time? Maybe we’re checking in the wrong place in the code? Maybe it is a timing problem? In the end it turns out that all of the code was correct EXCEPT that he was updating the height and width when he should have been updating the width and height. Yes, the order of the parameters matters. I’m kicking myself that I didn’t check that first but at least I did think of it eventually. Next time I will check that first. And to think I posted a somewhat related post last week (My Code is the Same as Yours But Mine Doesn’t work ) Sigh! I should have known better."
"348","2018-05-11","2023-03-24","https://blog.acthompson.net/2018/05/academically-rigorous-is-incomplete.html","Mark Guzdial linked to this post on his blog - Feeling disadvantaged in CS courses at University of XXX – Original post at Minimal exposure Interesting line from the original post: ""Although my high school was academically rigorous, we didn’t have any computer science courses."" Maybe we need to decide that calling a high school “academically rigorous” is incompatible with saying there are no computer science courses?"
"349","2018-05-13","2023-03-24","https://blog.acthompson.net/2018/05/does-it-matter-what-programming.html","I’m tempted to just leave this post blank and see what sort of comments it gets. But I am incapable of that. Sorry. Assuming we are preparing high school students for university and other advanced education and not for jobs right out of high school, what difference does it make what languages we teach? After all, concepts are what really matters. It is hard to pick what languages our students will be expected to learn when they get to higher education. Universities are using C++, Java, Python, Scheme, and who knows what else as their first programming language.Can we teach them all? Not hardly. Often we only have students for a semester or two. If we’re lucky three or four semesters. A few students in a few schools will have more. But still there is an awful lot we could and probably should be teaching them. Overloading the languages is not likely to be helpful. There is some indication that the second programming language is the hardest to learn so maybe we try to teach two and not worry too much about which two. At least they will be well situated to learn what ever their university professors throw at them. On the other hand some would argue that with limited time we should go all in on just one. One or two the question becomes which one or two? Does it matter as long as the basic concepts are taught?"
"350","2018-05-17","2023-03-24","https://blog.acthompson.net/2018/05/can-i-plan-for-next-year-yet.html","My school has a couple of weeks left but it’s getting close. My Advanced Placement Computer Science Principles students have taken their AP exam. My own exam for them is next week. My underclassmen have a bit more to do and I still have some topics to teach them. Soon the underclassmen will be starting their semester summative projects. So other than grading my workload is lessening. Not gone but at least I have some time to think. Thank about what? While things are still fresh in my mind I am starting to plan for next year. This was my first time teaching APCS Principles so I learned a lot about pacing and scheduling. I need to modify my plan for next year. I want to move the explore task into the first semester I think. The Create Task should be earlier in the second semester because it was much too stressful to have it due right at the “drop dead” deadline with the College Board. I’ve got some work to figure out how to make that happen. I’d like to incorporate some small device programming as well. I want to explore the possibility of teaching networking using Micro:bit which can communicate with each other. I need some time to work on that. My mobile app development course went well using AppInventor but it was also the first year teaching that course with that tool. I’ve got to clean up the pacing for that as well as thinking about more or better projects for students. If they release a version that supports iPhones I have to borrow my wife’s iPhone and test it out. My Honors Programming course has gone very well and I am really pleased with pacing and projects. My collection of resources is a mess though so I need to organize that. I’ve already been filtering through duplicated PowerPoint presentations and trying to build the perfect ones. No doubt I will continue to modify each one after every time I use them but at least I will not have to search through to find the current ones. I want to organize all of my resources by topic unit. If I have time, I want to record short videos on most topics as well. I wrote a reference guide to C# in the middle of the year and gave it to my students. Now I need to fix all the problems that they found and modify explanations based on what confused students this time around. Our freshmen course is taught by two other teachers so the pacing and much of the rest is determined as a team. It’s in good shape but I still want to look at organizing the materials a little. And we teach Visual Basic there so I am created a reference book for that using as well. That draft needs review and corrections. It’s going to be a busy summer. And that is not even including attending the CSTA Conference in July. (Hope to see some of you there.)"
"351","2018-05-21","2023-03-24","https://blog.acthompson.net/2018/05/teaching-history-of-computing.html","History is important. We’ve all heard, if not quoted, the adage that “those who do not learn from history are doomed to repeat it.” Mark Guzdial has a blog post (Computer science education is far bigger than maker education) that is almost as much a history lesson as it is an argument for the maker movement as covering only a subset of computer science. In his post, he talks about the big ideas developed by Alan Turing , Ada Byron, Lady Lovelace, and Grace Hopper. “What Lovelace and Hopper did mattered, and we demonstrate that it mattered by teaching it and explaining why it’s important.” One of the things we talk about in the course we teach freshmen at my school is the history of computing. Names like Turing , Lovelace, and Hopper come up along with many others. That is good as far as it goes but lately I have been thinking we need to talk history in more courses. How did we get to where we are and how and why? Erik Meijer, the Dutch computer scientist, told me once that if I wanted to know what the next big thing in computing is going to be I should look at what was the big thing in computing 20 years in the past. It’s true. Things in computing do move in cycles. I look at the way we do screen/form design now and see ideas I first saw in the Trax operating system in 1978. Cloud based computing is similar to the days when we had remote terminals connected to large mainframes. The whole idea of client/server applications keeps getting reinvented and redeveloped. The past is a good place to look for new ideas and we forget that are our peril. My students once asked me how I “learned all this stuff” after a history lesson. I replied that I didn’t learn it – I lived it. A lot has happened in the 45 years since my first computer science class as a university student. I’ve gotten to meet and talk to some important people in the development of CS over those years. But what about new teachers? How will they learn the history of computing? Is it taught in university? I suspect not much of it is being taught. What ideas will be missed because of a lack of historical knowledge and perspective? Am I the only one worried about this? [Now get off my grass.]"
"352","2018-05-23","2023-03-24","https://blog.acthompson.net/2018/05/teaching-through-stories.html","This time of year I think a lot about how I teach. There is something about the end of the year and evaluating how much my students have (or have not) learned that causes me to think about how much of what they learn (or don’t) is my responsibility. I look at the projects I assigned, the quizzes I gave, the lectures I presented, and every other aspect of teaching. The last few days have been about the stories I tell. Brett Becker wrote Computing history in the classroom: The cereal box toy that was an early hacking device, and nuclear weapons systems that depend on floppy disks In part, this made me think of my own post on teaching computer history but it also make me think deeper about the how we teach history. History is not taught well as a mere recitation of facts and dates and names. It is better taught as stories. The authors of “Made to Stick: Why Some Ideas Survive and Others Die” write convincingly about the importance of stores for getting information that ""sticks"" in people's minds. Teaching computer science is a lot more than just history though. If we want to teach concepts and have them stick shouldn’t we also be finding stories to explore the concepts? I think so. This can be harder than it seems though. The best and most convincing stories involve projects that are harder and more complex than the ones we can assign in a first programming course. When we talk about avoiding hard coded “magic numbers” and replacing them with concepts I have a good story. Picture a team of four people working for a year on a software package that will spread across 16 computers. They use the number 15 in hundreds of places among thousands of lines of code. One day their boss tells them they need to account for 32 systems not 16. Hilarity ensues. OK hilarity is not the right word. A month or two of editing and testing ensues. This time the team gets smart and uses a defined constant rather than a magic number. Six months later when they are told that 32 is no longer the number but 128 is they change a single line of code and everything works fine. I think that is a story that works. Well, as much as anything does with high school students. I use smaller stories all the time but lately I have been wondering if there are longer more meaningful stories I can use for other concepts. They don’t always just come to me spontaneously though. One of the things I’d like to do is collect other stores. After all the smart people learn from other people’s mistakes and not only their own. Wouldn't a collection of teaching stores be a wonderful aid to teachers? What stories do you tell to make concepts real to students?"
"353","2018-05-24","2023-03-24","https://blog.acthompson.net/2018/05/why-dont-universities-require-computer.html","We talk a lot about requiring computer science as a high school graduation requirement. It is an issue that is not without controversy. (Should Palo Alto students be required to study computer science?) While discussing that article in a Facebook group Mark Guzdial asked an interesting question. Why are we talking about making CS a high school grad requirement when it’s not yet an undergrad requirement at most schools. Why is it so important at the high school level but not at all at the undergrad level? It’s a fair question. Shouldn’t colleges and universities require some computer science as part of their general education requirements? If it is important for all high school students, and I think it is, isn’t it even more important for university students? At the university level, students should be able to learn even more and go deeper as well. This might also have a side benefit of driving more K-12 computer science as school work to prepare students for something they know they have to study in post secondary education."
"354","2018-05-25","2023-03-24","https://blog.acthompson.net/2018/05/can-we-get-there-csforall-from-here.html","When I was in high school (I graduated in 1971 so this was a while ago) there was a computer in the building. If you got an A in Calculous as a junior you could take the computer class as a senior. With 5,000 students in the school and only one computer teaching computer science to everyone was not an option. We’ve come a long way since then and lack of computers is seldom the problem. And yet, not every high school student takes or even has the option to take computer science. The obstacles today are different. Some of the problems are the old chicken and egg problem. Not enough teachers so we can’t offer the courses. Not enough courses so there is no incentive to prepare teachers to teach it. Some of the problems are perceptual. Administrators don’t see the need or the demand. Other people see a need for other things first. Or don’t see the need at all. There are assumptions that may or may not be correct about “room in the schedule” or “it costs too much.” We see all of those things debated over and over again. Sometimes the path to getting computer science education for everyone feels like this: We as a computer science education community are taking several paths. Cities like New York City are moving to put CS education as an option in all schools. Not quite the same as everyone taking it but access is an important first step. It is coming with in-service professional development as well. It’s all great. Several states are moving in the same direction at the state level. Kudos to Arkansas which is doing outstanding work for example. The questions then include two important ones: What is the step from CS for many to CS for all? What is the sustainability path? There are a lot of ideas out there. One is that if we get more universities to require CS for there students CS will move down to more high schools the way things like calculous have in the past. That could help a lot. The teachers who are being trained now as in-service will be retiring. Some soon, some not so soon. Those teachers will have to be replaced and there is no guarantee that the funding we as seeing today will be around in the future. Perhaps legislatures will declare victory and move on to other things. Clearly we need pre-service education for teachers to be the CS educators of tomorrow. We’re starting to see some interest in actually doing pre-service CS education but we’ve got a long way to go. And don’t forget the shortage of schools who want/need to hire CS educators. Is there enough pull from schools or push from requirements that schools offer CS to make this preparation worth the interest of schools of education? I hope so but you never know. Let’s not forget the looming teacher shortage in general either. While teachers in many states are actively pushing for better compensation and other changes to make teaching a better (for various definitions of better) experience the field has a bad rap in many quarters. There is a lot to be said for taking ones CS knowledge and going into industry. I’m still optimistic. Some days VERY optimistic. My own state of New Hampshire is slowly but surely moving in the right direction. We’ll get to CS for many in the next few years. CS for all is still going to be a big step."
"355","2018-05-28","2023-03-24","https://blog.acthompson.net/2018/05/assumptions-misunderstandings-and.html","My beginning students have big problems with writing decision statements. Boolean expressions are a real problem. Most of the time it is because they expect the syntax of a programming language to be close to how they express things in English. For example, in English one can say “give me a number between one and 10” and it is pretty clear. When they try to say the same thing in programming language they write something like: if index >= 1 and <= 10 then or if index = 1 - 10 then Of course neither of the work as students expect. The first gives a syntax error and the second compares index to -9 with is probably never going to happen. Try as I might, there are always some students who get this wrong. It just isn't logical in their minds. They are used to making certain assumptions and filling in some blanks or ambiguities and they expect the computer to do the same. I'm running out of ideas on how to get this across. The opposite end of the spectrum is when students think something is necessary when it is not. For example, if there are only two options than a simple if/else will work. You do not need and if/else if. I see all sorts of unnecessary comparisons from beginners. Many students get this right away. A few, more than I would like, struggle with this. Generally this sort of code does actually work so it is hard to get students to realize that here is a better way. ""But it works!"" is all that matters. For someone like me who worked in a time when programmers counted comparisons and had a ready handle on instruction speeds for optimization of memory and performance this is a painful observation. In some of my classes I have enough time to get into the nitty gritty of this. With my freshmen for whom programming is only part of a quarter it is harder. One of my goals for this summer as I review all of my curriculum is to try to find some more/better/different ways to work on these misconceptions. Parsons Problems may be part of the answer. I have experimented a little with them this year and they seem to help. Maybe some animations will work if I can figure out have to make them. I've already written more specifically about these issues in the book I have been writing for my classes. I could still use ideas. Surely someone out there has solutions to this issue. Any suggestions?"
"356","2021-11-08","2023-03-24","https://blog.acthompson.net/2021/11/money-is-hard-in-programming.html","Last week I wrote about the making change for a dollar project. It got me thinking about how hard dealing with money in programming really is. The problem with money is that 1/10 is an infinitely repeating fraction in Binary.If one adds 1/10 Take the following C$ code. double penny = 1.0 / 10.0; double dime = 0.0; Console.WriteLine(penny); for (int I = 0; I < 100; I++) { dime += penny; } if (dime == 10.0) Console.WriteLine(""Dime""); Console.WriteLine(dime); One might expect that the word “dime” would be printed but it’s not. What this code actually prints is the following. 0.1 9.99999999999998 The 0.1 is expected but as you can see, adding the 0.1 100 times doesn’t give exactly 10.0. The problem often doesn’t show up right away. This sort of thing often confuses beginners because the programming language “helpfully” hides the issue. When I had the program display the value of “dime” after every addition the discrepancy don’t show up until around 6.0. 5.8 5.9 5.99999999999999 It’s not only beginners who struggle with this issue. It’s a pretty common issue and some languages support a currency data type for that reason. The currency data type adds some overhead to operations and not everyone is a fan of using it. A different alternative is to use integers and insert a decimal point on display. One of the first programming languages I used for business related software, called DIBOL, didn’t support floating point numbers at all. It supported 18 digits of integer accuracy. It was an interesting language. Using it did make it easier for me to think about using integers for money later in my career though. Most beginners don’t have that sort of a helpful start. They are used to thinking in digital rather than binary. To my way of thinking this reinforces my thinking that learning binary is an important part of computer science education."
"357","2021-12-03","2023-03-24","https://blog.acthompson.net/2021/12/first-understand-problem.html","Things are different for me being retired. I don’t get the blogging inspiration the way I used to. Today a post by Mike Zamansky (Work through the example!!!!!) got me thinking. I used to talk to students about problem solving and one of the things I tried to highlight was the need to understand the problem as completely as possible. All too often students read or listen to instructions lightly and make assumptions that are not really supported by what has been presented to them. It is often tempting to skim and assume with the idea that it will save time. It works often enough, for simple enough problems, to help people to fall into the trap of thinking they are smart enough to do this always. Until it doesn’t work. It’s hard to get students to focus on understanding the problem completely. Honestly, it can be hard for more experienced people to do this as well. The urge to jump into the coding is strong. I have been known to start coding too early myself. The more important the project/problem the more important it is to make sure you really understand the problem. In what seems like a different life I was a developer in an operating system group. The sub team I was on was writing a new print/batch subsystem from scratch. The three of us spent weeks looking at what features should be there and how they should be set up. We spent more weeks designing the code. All before we wrote a line of code. Honestly, the groups leadership was on our case to start coding before we were done understanding and planning. Long story short, we finished on-time without having to work crazy overtime hours. Planning paid off. It’s a story I told regularly to students over the years. It may or may not have helped but I tried."
"358","2021-12-06","2023-03-24","https://blog.acthompson.net/2021/12/computer-science-education-week-2021.html","Well, its CS Ed Week again. Still no cards in the Hallmark store for it. I’ll get back to that in a moment. CS Ed Week has long been a time to introduce more students to computer science. When it started there were only small percentage of schools that offered any computer science education at all. We’ve made a lot of progress. There is still a long way to go though as even though more schools offer CS the number of students taking it are still very low. There is no shortage of ways to introduce students to computer science during CS Ed Week. Hour of Code is probably the best known and widest platform in use. And it is a great one.Miles Berry has several activates in his blog post Five (out of twenty) things to do with a computer with more information about using Turtles one another blog post - Make a Turtle! I never made a big deal of CS Ed Week when I was teaching for the very simple reason that the school I was teaching at required a full year (or two semesters) of computer science as a graduation requirement. Getting students to take courses was not an issue. We spent more time trying to make the course interesting, relevant, and even fun while being rigorous. In hind sight, perhaps I missed an opportunity to have students celebrate what they were doing though. There are some activates not involving code that we could have done. Maybe you want to try them as well. Grace Hopper – The timing of CS Ed Week is the week that includes Grace Hopper’s birthday – December 9th. So it is a good time to talk about her and other women in computing. Women have played a huge and often underrecognized role in computing. Maybe younger students would like to make Grace Hopper birthday cards? CSTA ran a number of contests for student for CS Ed Week some years ago. They make good activities. For example, filming a PSA video to promote computer science in general or specific courses. Posters to promote taking a CS course might be fun. In fact, have students create posters for a specific course that might be over looked. That may help fill courses that students don’t understand from a course description in a program of studies. Speaking of programs of studies, ask students to write their own description of the course they are or have taken. You may gain insights into how students view the course that help you make the course better. About that greeting cards, what would a CS Ed Week greeting card look like? Ask students to create some. Let’s make is have a celebratory feel!"
"359","2021-09-30","2023-03-24","https://blog.acthompson.net/2021/09/define-learn-to-code.html","I saw an interesting question today on Twitter: Hey coding enthusiasts! In your opinion, what's the best laptop for students to learn how to code on? #edchat #edtechchat #pdchat — Mary Jo Madda (@MJMadda) September 30, 2021 My first response is that there is no definitive answer to that question. I thought about it for a while. One can learn to program by hooking a Raspberry Pi to a monitor, keyboard, and mouse and firing up Thonny and learn Python. One can use any number of online IDEs and a Chrome book. The last classes I taught had a mix of students running Eclipse and Processing on Mac and PC laptops with no appreciable difference. In short, does the computer even matter? Maybe there is a question that has to be asked and answered before discussing the right or best laptop to use. That question is “what does it mean to “learn how to code?” I suspect we could have quite a long discussion on that question alone. To me it boils down to: What problem are you trying to solve – how do you define “learning to code” What software helps you best learn to code by your definition What hardware runs the software you want to run Picking the hardware should almost always be the last thing one picks. Now I have to go think about what it means to “learn how to code.”"
"360","2021-11-04","2023-03-24","https://blog.acthompson.net/2021/11/how-many-ways-to-make-dollar.html","I ran into a reminder of an interesting programming problem the other day. One I meant to use with students but never did. Other teachers I know do use it. Simply pot, how many possible combinations of coins are there that add up to a dollar. It’s easily solved with a set of nested loops like the ones below. int count = 0; for (int halves = 0; halves <= 2; halves++) { for (int quarter = 0; quarter <= 4; quarter++) { for (int dimes = 0; dimes <= 10; dimes++) { for (int nickels = 0; nickels <= 20; nickels++) { for (int penny = 0; penny <= 100; penny++) { int value = halves * 50 + quarter * 25 + dimes * 10 + nickels * 5 + penny; if (value == 100) { count++; } } } } } } Console.WriteLine(count); It’s pretty straight forward. The key thing is understanding what coins there are and what their value it. The code above doesn’t include a dollar coin. Should it? Probably but it depends on the way the problem is specified. Also these are the coins currently being minted. Over the history of the country there have been a number of other coins in circulation US TREASURY: What denominations of coins are no longer being produced? There are quite a few denominations of coins that the United States Mint does not produce any longer for general circulation. They are the half-cent coin, the two-cent coin, the three-cent coin, the half-dime coin (although it was replaced by the five-cent coin), a twenty-cent coins, and the various denominations of gold coins. Although the Mint does produce a series of gold bullion coins, these are not intended for circulation. The problem would be more interesting if some of these were allowed. I keep thinking that there must be another way to solve the problem though. I just can’t think of what it might be. [Edit] Jeremiah Simmons shared information about solving this problem using Dynamic Programming. It's more complicated but scales better. Take a look. Understanding The Coin Change Problem With Dynamic Programming It is so sawesome when educators share ideas with each other."
"361","2021-06-11","2023-03-24","https://blog.acthompson.net/2021/06/exploring-ternary-operator.html","I’ve never had a lot of use for the ternary operator. Until recently, I think I under appreciated it. I Don’t recall ever using it in professional development though that may be largely related to using languages that didn’t support it. I never taught it to beginners either. Between time available and topics to be covered it never rose to a high enough priority for me. I’m starting to rethink that. But first, what am I talking about? In C-style languages the syntax is: (expression-1) ? expression-2 : expression-3 There is a Boolean expression inside the parenthesis, followed by a ? and a value for a true case, a : and a value for a false case. For example: (Player == WHITE) ? ""White"" : ""Black""; Other languages have different formats. For example, in Python the true option comes before the Boolean expression. [on_true] if [expression] else [on_false] >>> x, y = 5, 6
>>> print(""x"" if x> y else ""y"") We actually see this sort of thing in spreadsheets though I never really thought of it as a type of ternary operator. This example from Excel is really a ternary operation =IF(G10 <  G11  ,""big"",""small"") Back in the day we had something not all that different in FORTRAN. There was (probably still is) an IF statement in FORTRAN that branches to one of three lines depending on if an arithmetic value is less than, equal to, or greater than zero. IF ( N ) 10, 20, 30 But enough history. What really changed my mind about this operator? As is typical for me I revalued it when I found a good use for it. I have been writing a version of the Reversi program in .NET and C#. I borrowed a bunch of Java code from my friend Tom Indelicato (read about that program here) Steal from the best is my motto and Tom is an outstanding programmer. Along with the syntactic changes moving from Java to C# I wrote a lot of code to make the game work in a graphical user interface. I made some different design decisions as well which changed how some things are handled. I created a user control class for the game squares for starters. As part of this I used three different integer values to indicate whether the square held a black disk,a white disk, or was empty. In the past I have often used a Boolean value to indicate which of two players was the current player. Switching players is pretty simple with a Boolean value. currentPlayer = !curentPlayer; That wasn’t going to work if my player indicators were integers. I decided to use the ternary operator because I didn’t want to write multiple lines of code for something that simple. So I wrote: Player = (Player == WHITE) ? BLACK : WHITE; WHITE and BLACK are defined constants. The next thing I knew, I was finding uses for this operator in all sorts of places. The really cool thing (ok for a geek like me) was that I could use this statement inside other statements. message = “No legal moves for "" + ((Player == BLACK) ? ""Black"" : ""White""); I guess this old dog can learn new (to him) tricks. Do you use/teach this operator? Are there other language features you have ignored until one day you realized they would be just right for something you were doing?"
"362","2021-05-27","2023-03-24","https://blog.acthompson.net/2021/05/othelloreversi-for-after-apcs-exam.html","My good friend and former teaching partner, Tom Indelicato posted about his end of year project for his AP CS A student recently. With his permission I share it with you. I said goodbye to my seniors today (last day of classes for them). We wrapped up the post-Exam project (I gave them the framework for a Reversi / Othello game, and they wrote an AI for it) by having them play against each other. I put up a randomized tournament bracket, and awarded a $10 Dunks card to the winner. An incredibly good class of students, they told me that they thought this was the greatest final project ever! I'm gonna miss them. Tom also generously shared his framework code at https://1drv.ms/u/s!AmXKuaTMPmyCpVBNCyiB0h3t5uWi?e=j9Gv1N Interestingly, a similar project was in the Nifty Projects session at the CSTA Annual conference in 2018. Unfortunately the GitHub code repository that was associated with it seems to have disappeared. There are other related and useful resources still there at https://sites.google.com/.../roger-jaffe-othello-competition Most likely Tom's framework would fit along with it with a few minor tweaks."
"363","2021-06-03","2023-03-24","https://blog.acthompson.net/2021/06/trip-report-teaching-as-long-term-sub.html","Well, this is not actually a trip report but its something like it. I spend the last couple of months teaching at Phillips Exeter Academy as a long term substitute. It was an interesting experience for many reasons. Not the least of those was the pandemic precautions. Everyone wore masks inside and out, there were clear dividers between all of the seats around the table (more about that table in a minute), and for most of the time faculty were tested for COVID twice a week. I was fully vaccinated before I started there and the school ran vaccination clinics for faculty and students during the term. Phillips is different from most other schools. It is the literal definition of an exclusive New England boarding school for a start. With a very competitive admissions process one is not surprised that the students are smart and highly motivated. Many of the students I talked to were looking for more academic rigor than their local schools. Needless to say classroom management was never even close to an issue. As I alluded to earlier, classes at PEA are taught around a table. It’s a big table but class size is limited to about 13. None of my classes were larger than 12 and two sections were 10 students. Yes, that’s wonderful for a teacher. Between the small class size and teaching around a table it is not easy for a student to get lost. Teaching around a table forces a more conversational method of teaching. Its very interactive. I really enjoyed the format. Another part of the system there is something they call METIC. I forget what that stands for but basically what it is is a mid-term check in. Students in the class are given some time without the teacher present to discuss what was going well in the class, what is not going well, and what students and teacher can do to make the rest of the term go better. Now this can be hard on the ego for some teachers especially if students are hard on them. My students, and from what I hear most students at PEA, are very respectful and honest. Following time without the teacher, the teacher returns and the items the students brought up (written on the white board) are discussed. For me as a new comer to the particular school environment this was extremely valuable. This is something I wish had happened earlier in my teaching career. I think it would have made me a better teacher. Everything was not all smooth sailing of course. I took over the course in the fourth week of the term and my students had two other teachers in the first three weeks. Figuring out what students knew and didn’t know took me a while. I also had to figure out a plan for the rest of the term. Fortunately, other members of the CS department were incredibly helpful and supportive. I was give full access to curriculum from a previous time these two courses had been taught. This saved immeasurable amounts of prep time.They were also always available for my many questions about the courses and the school’s processes. As I alluded to in my earlier post (Back in the Classroom Again) I had to reacquaint myself with Java and learn my way around two IDEs (Eclipse and Processing) that I had never used before. Its tough answering questions about IDEs when you have no real experience with them. Fortunately I am good at exploring menus and looking up things on the Internet. I’m far from expert at either IDE but I’m not totally lost either. I found Processing and its graphics library fun and interesting. My old experience with XNA from years ago helped me out there. Though I do wish Processing had some built in collision detection. Probably good for students to figure out and code that for themselves but I’ve been spoiled by .NET. I would use Processing again for Java. Overall, I had a great experience. I learned a lot, got to work with great teachers, and teach some awesome students. I’m not unhappy about getting back into retirement though."
"364","2021-04-25","2023-03-24","https://blog.acthompson.net/2021/04/back-in-classroom-again.html","“What would motivate you to come out of retirement to teach during a pandemic?” That was the question I was asked during an interview for a long term substitution position. My retirement last June had been planned for a year or more. I was very content in retirement. I wasn’t bored, COVID restrictions were not being particularly hard on me.So why was I considering this opening? My wife and I were fully vaccinated so going back was not as scary as it had been but that just made the decision possible. There were really two reasons I was open to the idea. One is that the schools was Phillips Exeter Academy. They have small classes (I am now teaching two classes of 10 and one of 12) and they teach around a Harkness Table. I’ve long been curious about that style of teaching. The other reason was that they really needed someone in a hurry. The person they initially hired to fill in for a teacher on sabbatical resigned after a couple of weeks into the semester. I guess I am a sucker for that sort of problem. So what is it like for me? Well, I feel good about the COVID precautions. There are Plexiglas partitions around the table, students and faculty wear masks everywhere, and faculty are tested for covid twice a week. I believe students are tested often as well. Teaching with a mask is awkward and sometimes it is hard to tell which student is talking because I can’t see anyone’s lips move. But teaching more conversationally around a big table is pretty nice. I have two students attending via Zoom which takes some getting used to but the students are good about it. The hardest part is jumping in to without a clear idea of what students already know or don’t know. And figuring out how to move forward. The classes are in Java using Processing and Eclipse as IDEs. Both IDEs are new to me and it has been a while since I taught Java. AP teachers may remember the Marine biology Case Study? That was when I last taught Java. Catching up on the IDEs has been interesting. Returning to Java makes me appreciate C# and .NET even more. But we’re managing. Having smart, motivated students and small classrooms helps a lot. So, how is your school year going?"
"365","2021-05-13","2023-03-24","https://blog.acthompson.net/2021/05/which-sort-do-you-use.html","My algorithms class is studying sorts this week. I felt like we needed a little hands on sorting to get an understanding of how some sorts related to the types of sorting people do. I had a number of decks of playing cards and their easy yo hand out and to sort. I don’t have one deck for each student and watching others sort is boring. You really want to avoid boring this close to the end of the year so I decided that I could split the decks by suit and have enough small decks for each student. Faster is often better anyway. My students had been assigned some reading on Insertion, selection, and bubble sorts. I was interested to see if they would relate any of these to their chosen sort methods. Not bubble sort though. I wonder if we should even teach that one. But I digress. The students were asked to sort their deck which they all did pretty quickly. Than I asked them if they used a selection sort or an insertion sort. About half of the students choose each one. This led to a good discussion of the two methods. It made for a good exercise introduction. As a side issue, I had my beginner class separate the decks into suits. This was part of a discussion about While loops and the need to properly plan for data storage (the four output files), That it meant I didn’t have to do the separation was a nice side benefit. In both classes, we had a brief talk about parallel processing and breaking a problem up into parts that could be run in parallels by separate processors. I take my lessons where I find them."
"366","2021-05-18","2023-03-24","https://blog.acthompson.net/2021/05/learning-from-my-students.html","Being back in the classroom has been a learning experience for me. For one thing I have had to learn a bit of Processing (the IDE) as students had been using it prior to my coming in as a replacement teacher. That’s been fun actually. And learning Processing has been on my to-do list for a while. It’s a pretty useful tool and makes graphics programming in Java almost as easy as C#/Visual Basic and the .NET library. I have had to get reacquainted with Java as well. That’s more of a refresher than a new learning but students have given me some fresh insights into using it. One of the disadvantages of having programmed for so long is that my mindset is, to some extent, stuck in old ways of thinking. Take for loops for example. I am rather stuck in the idea that the comparisons in a for loop are just simple single Booleans when of course the Boolean expression can be a lot more complicated than that. My students are not as stuck so they suggest various options. That has been helpful in broadening my thinking. CodingBat is a web site I have come to appreciate as well. I’ve known about it for a long time of course but never used it before because I wasn’t teaching either Java or Python. It includes a lot of very good projects that make for great homework being web based. It’s a little like Code Hunt, which sadly no longer exists. CodingBat is easier for beginners to use though which is a plus. I found it very useful and recommend it to other teachers. For one course I have had to review my knowledge of some data structures. Again, a refresher rather than all new learning but I think I picked up some things I either forgot or never knew. (Memory is a fickle thing) I’ve also learned some things about teaching but that will be another post at a later date."
"367","2021-09-26","2023-03-24","https://blog.acthompson.net/2021/09/phun-with-phone-numbers.html","Among the programming projects I ran into recently was one to calculate all of the combinations of letters one could make from a phone number. Companies do this sort of thing all the time. They generate the combinations and then look for words related to their business so they can use it as a mnemonic and help people remember their phone number. Probably a bigger deal before domain names than now but still useful. How many possible combinations are there? Well, that depends. It can be a low or 2187 (3 to the 7th power) and a high of 16384 (4 to the 7th power). The highest number is for phone numbers with all 7s and/or 9s. I’m trying to write small bits of code to keep my mind active and solving interesting (to me) little programs. Initially I didn’t care to write this program (though eventually I did) so was thinking around the problem from other directions. What if I took a word and had a program generate a phone number? That was fun. And pretty easy. So I thought about the logical (to me anyway) next step. What if I had a list of 7 letter words and generated a file with the phone numbers that matched each word? It turns out I have a small word list with just under 114,000 words in it. Step one was building a new file with only the seven letter words in it. A nice little project that is simple even for beginners. I borrowed the code from the earlier program that turned a word into a number. A handy thing that shows the value of methods and reusable code. I used that to create the file with a list of seven letter words and phone numbers. A list of just over 22,000 for what its worth. When I did write the program to create all the possible combinations of characters for a phone number I had a nice data file to use to check my work. That was surprisingly helpful. Anyone out there assigning the program to create all the combinations of letters for a phone number? What interesting solutions are students coming up with?"
"368","2021-03-10","2023-03-24","https://blog.acthompson.net/2021/03/inch-by-inchthe-inchworm-problem.html","I am reading a bunch of papers from the SIGCSE 2021conference. The papers are available for free for a limited time.Get them while you can. I started with Exploring the Inchworm Problem's Ability to Measure Basic CS Skills The Inchworm problem has been around for a while but was new to me. It’s an interesting problem for beginners for sure. Here is the description from TopCoder: The inchworm is a creature of regular habits. She inches forward some distance along the branch of a tree, then stops to rest. If she has stopped at a leaf, she makes a meal of it. Then she inches forward the same distance as before, and repeats this routine until she has reached or passed the end of the branch. Consider an inchworm traveling the length of a branch whose leaves are spaced at uniform intervals. Depending on the distance between her resting points, the inchworm may or may not be able to eat all of the leaves. There is always a leaf at the beginning of the branch, which is where the inchworm rests before setting out on her journey. You are given three int values that specify, in inches: the length of the branch; the distance traveled by the inchworm between rests; and the distance between each consecutive pair of leaves. Given that the inchworm only eats at rest, calculate the number of leaves she will consume. There is a bit more to the description but that's a start. There were 5 basic ways the paper’s authors found students use to solve the problem. Four are simulations and one is purely mathematical. I confess that a simulation was my first thought about a solution. The mathematical solution is much faster than the simulations. The paper included multiple solutions and I found a solution on TopCoder pretty easily. That demonstrates a problem typical of interesting programming problems – cheating is easy. The author of the paper use a couple of things to reduce cheating. For starters, there are few grade points for a solution. I assume the idea is that students will not work too hard to cheat for small point values. I am skeptical of this idea myself. Secondly, and probably a lot more importantly, students were required to document their design and process in digital journals. I had mixed results asking students to document designs in high school. It may be better at the university level. Overall, this was an interesting paper and I like the new (to me) project idea. I was thinking about how it might be set up with hints but my fear is that too much scaffolding would force students into one solution rather than letting students get creative."
"369","2021-03-17","2023-03-24","https://blog.acthompson.net/2021/03/programming-using-text-or-blocks-why.html","Continuing my look at papers from the SIGCSE 2021conference. The papers are available for free for a limited time. Get them while you can. In this post, I take a look at Dual Modality Instruction & Programming Environments: Student Usage & Perceptions. This paper took a look at the usage of Dual Modality IDE with students. Dual modality means that the IDE is capable of switching between text based programming and block based programming. The authors used the JetBrains plug-in Amphibian which creates Java code. While teaching AP CS Principles using the code.org curriculum, I used AppLab from code.org with students AppLab is also Dual modality though with JavaScript rather than Java. I was curious to see if the author’s conclusions matches my far less rigorous observations. They basically did. That is to say that they saw students using the blocks to learn concepts and gradually move to text. Blocks often become a reference for learning concept and less for developing program solutions. I noticed much the same thing. Students might also use blocks to learn and switch to text when writing final solutions. In my course, I did not mandate either blocks or text but let students switch at will. What I noticed is that students with a prior programming background in text moved to mostly text much sooner than students with no prior programming. Some students seldom used text even near the end of the year. This did not seem to impact final grades in my classes. As the authors of this paper found, I saw even the very comfortable with text students use the blocks to explore new concepts. If you are thinking about dual modality environments (or not) I recommend this paper. I think you will find it supports the value of this sort of environment. Are you using a dual modality environment? What are you seeing with it?"
"370","2021-03-23","2023-03-24","https://blog.acthompson.net/2021/03/to-many-ways-to-add-one.html","Someone posted a questions asking which sort of programmer one was from a list of ways to add one to a variable: X++ ++X X+=1 X = X + 1 Actually the initial question didn’t include ++X but it soon showed up in replies. With all these ways to do what appear to be the same thing it is no wonder students get confused. Daniel Moix replied to my Facebook post with X = X++ This doesn't work (at least not in C# or Java). While one might expect that the value in X would be increased by one after the statement executes it is in fact unchanged. X = ++X does work as you would expect though. It’s not surprising that students, clever people that they are, come up with variations that should work in their eyes but do not work. Why do we have so many ways to add one? I can’t speak for the language designers (I assume most of this started with C or some earlier language) but lots of us like shortcuts. And it seems like every programmer has his or her own idea of how things should be done. There are few programs that have been around for any length of time that have only one way to do anything. All of this is great for experienced programmers but can be a nightmare for novices. I used to debate in my head if I should even show all of the ways above. X=X+1 and X++ covers most cases for beginners. Why confuse them? I usually did briefly talk about X+=1 because a) students are likely to see it in other code and b) it is useful when adding (and other operations) where one is not changing by one. This all adds some cognitive load. I think that teaching all the various ways at one time can be a bit much. It may be better to add things as they are needed. For example, maybe waiting until teaching loops to introduce X++ and X+=1. That context and specific use may be helpful. I didn’t do that before but I wonder if I should have. Opinions are welcome."
"371","2021-03-29","2023-03-24","https://blog.acthompson.net/2021/03/learning-to-teach-to-learn.html","A blog post by Eugene Wallingford (TEACHING YOURSELF THE MATERIAL) reminded me of some things. As he says, “A common complaint from students is that the professor makes them teach themselves the material.” During a graduate course I took in distributed Operating systems the professor assigned each student a topic to research and then teach to the class. I had a couple of peers who complained (privately) that it was his job to teach not theirs. I took it as an opportunity to dig deep in my topic and came away thinking it was a great learning experience. As a teacher myself, I assigned topics to students to research and teach to the class on several occasions. I’m not sure if students complained behind my back but they were pretty good in my hearing. I found that this was beneficial to the students as well as to myself. In several cases students found features or uses that I had not considered. Students seem to lesson to peers more closely than to their teacher. I also asked each students to write a couple of quiz questions (with answers) for me to use in a quiz for the whole class.The quality of the questions was mixed as one might expect but they also gave me insights into what students saw as the important part of their topic. One thing I should have done is to have more rounds of this sort of thing. Students need to practice how to present material. One would like to think that they have enough examples of how to present from sitting through presentations day after day but that doesn’t seem to be the case. Students definitely need some more formal training in presentations than most of them get. Do you assign students to research and teach topics? How does it work for you?"
"372","2021-04-16","2023-03-24","https://blog.acthompson.net/2021/04/csta-2021-scholarships.html","Are you looking to attend the CSTA 2021 Conference but funding is an issue? There are a great many scholarships available that can help. Visit the scholarship site for full details and application information. I copied a lot of the information below. Note that there are scholarships for international attendees and not just US based teachers. Applications close on April 30, 2021. So apply soon so you don’t miss out! CSTA prides itself in promoting equitable access to the CSTA Annual Conference, our premier professional learning program for K-12 CS teachers, by offering scholarships that subsidize 100% of the program cost. These scholarships are intended to support teachers whose limited financial resources may prevent them from attending. Our goal is to support as many teachers as possible. We currently have funding available for 325 scholarships for U.S. teachers but expect to secure additional funding. We will first prioritize awarding scholarships to: Black teachers and other teachers of color, those who teach marginalized students (BIPOC students, low-income, rural communities), and first-time conference attendees. If you have a disability or require assistance completing your application, we are happy to help. Please reach out to conference@csteachers.org. Applications close on April 30, 2021. To be eligible for scholarships to the 2021 CSTA Conference, you must: be a CSTA Basic or CSTA+ member, directly teach computer science to K-12 students, and not have access to funding from your school or organization to cover conference registration fees. Conference presenters and chapter leaders already receive complimentary conference registration and need not apply."
"373","2021-06-25","2023-03-24","https://blog.acthompson.net/2021/06/is-picking-first-programming-language.html","All of a sudden the subject of the first programming language is getting discussed everywhere. OK, maybe not every where but it is in Twitter, Blogs, and Facebook. At least. Mark Guzdial gets part of the blame (credit?) for this with his conversation starting post on the Blog@ACM Why Did We Ever Think the First Programming Language Didn't Matter? It’s hard to find the conversations on Twitter but several of the CS education groups on Facebook have conversations around this post. For example, the Computer Science Teachers group here. Now this a a topic that comes up regularly. I’ve made reference to it myself several times. Back in 2017 I asked the question How important is the first programming language really? and answered that I thought it was important but that curriculum and the teacher were more important. The language has always mattered though. In 2016, I posted a link to an article called How Your First Programming Language Warps Your Brain One can find similar opinions widely spread on the Internet with special attention paid to Dijkstra It is practically impossible to teach good programming to students that have had a prior exposure to BASIC: as potential programmers they are mentally mutilated beyond hope of regeneration. I think we have always known that a person’s first programming language has a major impact on how they view programming. My first language was FORTRAN and it took me a long time before I stopped writing FORTRAN programs in different languages. What does this obvious importance of the first programming language mean for CS educators? Well, its complicated. For one thing,Elementary and middle school have different constraints than high schools which have different constraints from universities. I had a conversation with a middle school student recently. She attended after school programs at a university near her that taught her Scratch. She loved it. At the same time she saw older students (she’s a rising 7th grader) using a text based language and found it intimidating. She’s not convinced that she can handle what she called “real programming.” I tried to encourage her but one conversation only goes so far. Research tells us (the professionals) that block based language are a good first programming experience but if students don’t see it as authentic they may think that is as far as they can go. While block based languages give many the confidence and concept base to move on and advance are some students falling into the trap that it is not real enough? I don’t know. I’ve taught a number of language as a first programming language over the years. Visual Basic, Java, C#, PASCAL, and I’m probably forgetting some language.I am not ready to say that there is one best first language though. It really depends on ones goals. Selecting the right language is important. Important decisions are seldom simple or uncomplicated."
"374","2021-06-21","2023-03-24","https://blog.acthompson.net/2021/06/why-are-arrays-so-hard-for-beginners.html","Beginner programmers often, dare I say usually, struggle with arrays. Sometimes it is hard for experienced programmers like myself to understand why but with years of using them in many languages they’re second nature for us Beginners have trouble differentiating between the index and the contents of a part of an array.That seems to be the most common issue. Somehow the idea that the index is, in some sense, part of the name and not the value being stored is hard for some to grasp. Though come to think of it, I never talked about an index as being like a name. Perhaps I should but as a very experienced programmer with a background in Assembly language words like index and offset are natural to me. Beginners should not need to know how arrays are stored and accessed at the Assembly or machine language levels. Perhaps I will discuss indexes as part of the name next time I teach arrays. What do others think? Or what sort of language do you use? While vocabulary is important, and students should understand words like offset and index, perhaps we need vocabulary that is meaningful to beginners before we teach them the vocabulary of experts. It’s a thought. And then there is the whole “index values start at zero” thing which I have written about in the past. Zero Zero Indexing Considered Harmful The other think I have been thinking about that seems hard for some beginners is the need to initialize an array. They tend to assume that if one declares an array the elements in it should be assigned some sort of default value. Of course some programming languages do this for some data types. Numeric types get set to zero for example. It’s seldom a good idea to depend on this action and most of us do teach students to initialize the elements in an array. It’s a great way to tie arrays and loops together early in the learning process. I wonder why there are not library routines for this sort of thing. The .NET Framework has Array.Sort, among other things, so why not Array.Initialize? That’s probably not practical for arrays of many types but for some of the built in types why not? On Twitter last week someone suggested that perhaps the problem was with arrays themselves. That seems reasonable but solving that problem is for people smarter than me. I’m just asking questions."
"375","2021-03-15","2023-03-24","https://blog.acthompson.net/2021/03/zero-indexing-considered-harmful.html","As the old computer geek joke goes. the three hardest things in programming are naming things and off by one errors. Lately I have been thinking about off by one errors and wondering if having array and similar indexes start from zero rather that one is contributing the off by one errors by novice programmers. I understand why many programming languages start indexes at zero. It’s a natural outgrowth of pointer arithmetic. After all if the pointer is to the beginning of an array or other data structure the first element is an offset of zero. The language could hide this though. In fact, FORTRAN and several other languages do start at 1. I used to use a version of BASIC (Basic-Plus) where not only was the first element an index of 1 but a programmer could specify the low and high index of an array at what ever numbers they wanted. Individual characters in a string could be accessed as if they were in an array as well. The first letter was at index of 1. An index of zero held the length of the string. So we don’t have to start at zero. Does it matter? I don’t have any studies or data (someone please research this for their PhD) but I suspect that starting from zero promotes off by one errors especially for novices. Getting beginners to grok that the first element in an array is zero is a struggle. It seems like a great many of novice errors come from assuming that the first item is a list is item number 1. I see the same issue with loops. Going from zero to less that some value does not come as easy to beginners as from 1 to some value. So there is my theory, starting from one is better than starting from zero and could reduce off by one errors. As the meme goes, prove me wrong."
"376","2021-03-11","2023-03-24","https://blog.acthompson.net/2021/03/whats-up-with-novice-programmers-and.html","Continuing my look at papers from the SIGCSE 2021conference. The papers are available for free for a limited time. Get them while you can. I take a look at Usage of the Java Language by Novices over Time: Implications for Tool and Language Design. The BlueJ tool for teaching Java has the (opt in) ability to collect data on language usage by the novices who use it. This is a valuable research tool and the authors of this paper have taken a good look at it for a number of research questions. I recommend the paper for more insights but I was particularly struck by one finding. Students, in large numbers, delete the comments that BlueJ inserts in code automatically. BlueJ adds stub JavaDoc comments (which can be used to generate documentation) into objects that are created. Over 45% of projects analyzed had no JavaDoc comments in them Students had gone out of their way to delete them. Not answered in the paper but I suspect many of the comments were not expanded from the default either. What is it with students and comments? In my own teaching I often created stub projects with comments as sub-goal labels. In several cases I saw those comments deleted before coding started. In other cases the comments were left completely separate from the code created in ways that suggest they were ignored. I know that students don’t see the value in adding comments to their code. Is that our (educators) fault? I know that most of us try to teach good commenting practice but at the same time the projects we assign are easy enough to understand (usually) without comments. But why ignore comments clearly designed to help students? What’s going on here? This looks like a great research question to me. I wonder if anyone is looking at it? What do you think?"
"377","2021-06-15","2023-03-24","https://blog.acthompson.net/2021/06/getting-excited-for-csta-2021.html","As a member of the CSTA Conference Committee, I attended the first of two presenter training sessions today. Wow! CSTA 2021 will be good. Now I have read most of the proposals for presentations and helped select them so I had a pretty good idea this is going to be a great conference but today brought home a couple of things for me. The big one is the shear number of online tools that teachers are using to make online (and probably in-person) teaching more interactive and engaging. I taught online last spring and in a mix of online and in-person this spring but I never had the time to lean about all of these tools. That is mainly because I retired at the end of the 2019/2021 school year and didn’t spend last summer learning about teaching online. I kind of wish I had though.Never say never even about returning to the classroom. But that aside, I am really looking forward to learning at the conference this summer. CSTA 2021 is going to be awesome! Hope to see you there. So much to learn!"
"378","2019-09-17","2023-03-24","https://blog.acthompson.net/2019/09/book-review-tools-and-weapons.html","""Tools and Weapons"" by Brad Smith and Carol Ann Browne is a look at some important computing issues through a Microsoft lens. It is a pretty revealing look as the authors write seriously about the thinking behind Microsoft’s dealing with issues like the Snowden leaks, suits against the government about over reaching subpoenas, protection of users data, transparency, cyber security, and more. I really like this line from the introduction ""When your technology changes the world, you have a responsibility to help address the world you helped create."" There were several threads moving through the book. One was the need for building guiding principles for looking at technology and its uses. An other was the need for diversity among people developing technology and the guiding principles. There is frank talk about embedded bias in algorithms and how diversity is essential to fixing that problem. Responsibility for what technology does is another key thread. Without using these words, the book suggests that “should we” is as important if not more so than “can we.” The chapters on Artificial Intelligence and facial recognition are the best look at the pros and cons I have read so far. Many people seem to have a doomsday view of AI but Smith and Browne have a more nuanced look; one that is not apocalyptic but more practical and near term. There is a lot to think about in these chapters but the picture painted is more about how we need to think about issues going forward than that we should either panic or be unconcerned. I found the chapter on China very interesting. It was clearly written carefully to outline cultural and political differences without appearing to attack anyone. I might have preferred a stronger stance but I’m not the president of a global company. One clear takeaway for me is that today’s Microsoft is not the same Microsoft as it was under Ballmer or Gates. Satya Nadella is a different sort of leader altogether and ethics and principles of a company are set at the top. Where Gates was naïve in some ways and Ballmer was focused on the bottom line Nadella, while not losing sight of the bottom line and still naïve in some ways (remember his gaffs about women getting ahead) looks at things differently, listens better, and is interested in the better good. His decision to release Windows XP patches for the WannaCry virus for free is one I have to wonder if Ballmer would have made the same way. Maybe he would have but that I have to wonder is telling. The book is not a difficult read. The language is non technical and technology is explained in layman’s terms. That is not to say that the book is only for non-technical people. I think technical people should read it. So should policy makers in both government and the private sector. It would make a great supplemental reading for an ethics course, especially for an ethics course for technical people. One last interesting thought from the book. No one graduates from a US military academy without taking an ethics course but many people graduate with technical degrees without taking an ethics course. Maybe that should change."
"379","2019-09-25","2023-03-24","https://blog.acthompson.net/2019/09/if-statement-programming-projects.html","Over the years I have used a number of projects to give students practice using if statements – especially those that involved nesting or checking lots of values. Currently I am using: Hurricanes – user enters a wind speed and the program reports the storm category Voting – User enters an age, and checks boxes to indicate citizenship and registration Pizza pricing – Base pizza prices plus add-ons for veggies, meats, or different cheeses. Movie theatre pricing – a bit easy as there is only ages to check but ranges require some thought. Ski tickets – prizes based on age and whether or not they are staying at the resort. I could add holiday/weekend of midweek as well. Jumanji – If the random number generator “rolls” two dice whose totals are a 5 or and 8 let the player out of the jungle. These all work fairly well. Students relate to most of those. Voting gets kids thinking about their future so that is a plus. Obviously decision structures show up in other projects all semester long but these have that as a special focus. I’m trying to think of some new ones. Projects that are relatable and that are complicated enough to make students think but not so hard that they get frustrated easily. What are you using? What works well with your students?"
"380","2019-09-30","2023-03-24","https://blog.acthompson.net/2019/09/the-problem-of-cheating-on-programming.html","This seems to be the year a lot of people are really getting concerned about cheating on computer science programming projects. There has been some discussion of the issue on one of the mailing lists I am on. Garth Flint blogged about it at Finding cool projects for programming classes. And I caught a student searching for exercise solutions for Code.Org’s AP CS Principles course work. Of course cheating on programming projects is nothing new. I know that people shared punch cards back in the early days. Yeah, I’ve been around a while. I have also caught students sharing code via Google Docs. With the tools we have today, cheating has never been easier. Solutions to popular coding projects are easily available on the Internet and found using search engines. It’s amazing that students don’t think teachers can recognize and then find solutions that a student copied from the network. We can and we do. One common refrain I hear is that professionals get code off the Internet. And they do. GitHub is all about sharing and reusing code. StackOverflow and sites like it are were professional and amateurs find solutions to their problems and use them. It is considered good practice to use these tools. But school is different. School is about learning and projects are assigned both to provide practice and to evaluate what students have learned. Students have a tendency to grab code they don’t understand and try to shoehorn it into a project. Or to copy a while project and turn it in as their own. Interviews can usually determine is a student understands what they used or not. Ideally though, students would only hand in their own individual work. That is better than catching them and docking them points. Today’s students have more pressure to get good grades and (apparently) less understanding of the correlation between knowledge of the material and those good grades. Garth wrote in his blog about trying to come up with unique projects that don’t have solutions on the Internet already. That’s hard. It seems like a lot of us teachers think of the same projects. Or we get them from third party curriculum and textbooks. Once a project is in wide use solutions will appear on the Internet pretty quickly. Even if a teacher does come up with a project that can’t be found on the Internet, if you have one really bright student who is willing to share their solution you can have cheating. The only thing I can think of is making the issue part of a discussion of ethics and the meaning of school. Using code from the Internet correctly requires that students actually understand what they are using. Students who cheat their way through are going to find themselves in a bind eventually. If not in post secondary school than in their careers. Somehow we need to make them understand that."
"381","2019-10-01","2023-03-24","https://blog.acthompson.net/2019/10/2019-champions-of-computer-science.html","Know a student or teacher or administrator who has achieved something this year to increase access and quality of CS education. I can think of a number of people who should be nominated. Maybe you can think of someone as well? Don’t assume they will nominate themselves! Deadline is midnight Pacific Time October 21, 2019. 2019 Champions of Computer Science Awards The Award Tell us about a student, educator, administrator, or organization that has achieved something in computer science this past year for the opportunity to be recognized as a 2019 Champion of Computer Science. These awards are a collaboration between CSTA and Code.org. The Champions of Computer Science Awards identify and promote students, teachers, administrators, and organizations who have made a significant impact to improve access to and the quality of CS education. Eligibility Any K-12 student, teacher, or administrator may be nominated for the Champions of CS Awards. Organizations that work directly to improve access to and the quality of CS education may also be nominated (examples: afterschool coding clubs, local CSTA chapters, regional or national nonprofits, etc.). Nominations Award winners and a guest of choice will receive an all-expenses paid trip (travel and hotel) to attend the CSEdWeek event on December 9th (location to be confirmed). This opportunity is only available for US submissions. This form closes Monday, October 21, 2019 at midnight PT. Email awards@csteachers.org if you have questions."
"382","2021-02-25","2023-03-24","https://blog.acthompson.net/2021/02/how-should-we-evaluate-high-school.html","Mark Guzdial posted several articles about evaluating the teaching records of undergraduate faculty. (Links below) They really got me thinking. Now evaluating secondary school (high school) and university teaching is pretty different. Class sizes are the most obvious difference especially in large universities. First and second year computer science courses in universities can have hundreds of students. One can’t teach 600 students the same way one teaches 20. University faculty also have different supports which often include teaching assistants to manage labs, help with grading, and other assistance. So the question becomes, how to you evaluate the teaching record of a high school CS teacher? Some obvious things to look at as student evaluations, and student results on standardized tests like the AP CS exams. I’m not a fan of either of those. I had a class of highly capable students one year who just decided they would blow off the AP exam for a variety of reasons. They told me they did it. being evaluated on that year’s test results would have been a big mistake. I think most teachers would agree that there are things far outside a classroom teacher’s control that impact test results. COVID-19 anyone? Student evaluations are also unreliable. Male teachers tend to be rated higher than females' teachers. Fun and/or easy teachers get evaluated higher than “hard” teachers whose rigor helps students learn more. And generally, students are not that good at evaluating teachers. I think that peers and administrators at the high school level have a better idea of what a good teacher is/does than university faculty so I would give weight to peer/admin evaluations. Of course, being able to watch a teacher teach would be ideal. The time I did interview for a university faculty job teaching two classes was part of the process. I think that is very helpful. I would also like to see what a teacher does to improve their practice. What are they doing for professional development? Are they taking workshops? Attending conferences? Online conferences are making that more affordable and practical? Do they read – articles, blogs, etc.? I have maintained membership in SIGCE for years to get access to research on how to teach and found that very helpful for my professional growth.CSTA has been great as well opening up chapter meetings, the annual conference, the publications, and general community building. I would ask what things they have learned from others and added to their practice. Importantly, what does a teacher do now differently from when they started teaching? There is a difference between one year of teaching ten times and ten years of teaching. I should add that I want to know how they are growing their content knowledge over time as well. But pedagogy improvement is really critical. Teaching the way we were taught years ago is probably not the best way to teach. Live long learning is something teachers should model so I want to see (read) how a teacher candidate does that. What else should one look for in evaluating a teacher’s record? Posts by Mark Guzdial that are related How I evaluate College Computer Science Teaching Become a Better CS Teacher by Seeing Differently"
"383","2021-01-25","2023-03-24","https://blog.acthompson.net/2021/01/does-bad-code-lead-to-good-learning.html","Last week a teacher posted an interesting problem. They were looking for an explanation of why to code produced the answer that it did. The code is this: static void Main(string[] args) { int x = 2; while (x < 12 || (x % 3) != 0) { x += 3; } Console.WriteLine(x); } } The answer, which takes a while to appear, is 12. But why? It turns out that the value of x overflows. It overflows a lot! Eventually the combination of overflows results in a 12 appearing. It’s not at all obvious how this happens or even why this is not an infinite loop. There was a lot of discussion of this in the AP CS A Teachers Facebook group. I did find it fascinating and wrote some debugging code to see what was going on. I have to wonder about the value of showing this code to beginners. Or anyone really. What is the value of the learning, if indeed it does teach anything that beginners are ready to learn. Mostly it is not a great plan, in my opinion at least, to rely on number overflows. Different architectures, especially those with different work lengths, are going to take different numbers of iterations. Are they some that would never get to 12? I’m not sure and I don’t like relying on specific architectures. BTW on my system with a full word this took 1,431,655,765 overflows. With a short it happens after 21,845 overflows. I still don’t know why it takes so many overflows but I am content for now. In any case, is there value in asking students to figure out why 12 comes out? I can see people disagreeing on its value as an exercise in debugging. I’m not a fan of it though for a couple of reasons. Firstly, why would you write that code? What is its value? Some people will find it to be an interesting puzzle for the sake of solving a puzzle. I did. But not everyone is “in to” such puzzles. I think most people want to solve a problem to make something work and do something interesting. I’m also not fond of code that is unclear as to its purpose and goal. In the Facebook group there were a lot of comments from experienced teachers who expected something completely different from the code. Infinite loops being the most common expectation. In fact, that this isn’t an infinite loop is highly unexpected. Code should be written so that someone can figure out what it does without actually executing the code. Especially for beginners. Now I am not going to be critical of a teacher who does see value in this particular exercise but it’s not for me. As educators we often do create code just for the purpose of highlighting a specific language feature and small, not very useful pieces of code, often make up quiz/test questions for the sake of space and time. But for the most part I believe that students learn better with more context and with code that solves an interesting – to them – problem. Related posts: Why Do I care About This Program I am Coding? Explain This Confusing Code"
"384","2019-12-12","2023-03-24","https://blog.acthompson.net/2019/12/explain-this-confusing-code.html","My major task today has been finishing off the semester exam for my Advanced Placement Computer Science Principles students. They’re not happy about having an exam but that’s life. Writing a good exam is difficult. Fortunately I have some previous exams to work with. Some I wrote, some other AP CS P teachers wrote. I’m getting close to done. I want to have AP exam style questions to help my students prepare for the actual AP exam in the spring but of course the main purpose is to put a grade in the grade book. OK I’m half kidding. I seriously want to get a handle on what information they have learned and what I should review before we move on. Coincidently someone posted a question for the AP CS A question bank on Facebook asking for help with explaining it. How does this evaluate for Java: x / 10 % 2 ? This is exactly the sort of question that had one of my APCS A students some years ago say there were a lot of examples of poor coding practice in the AP Exam. And this, in my opinion, is a terrible coding practice. I can understand why the question may be attractive to some. The whole order of operations thing. Students should understand it. But good coding practice is to avoid ambiguity and this code is loaded with ambiguity. Is this integer division? 10 looks like an integer to me. Making it 10.0 would make it look like a floating point number of course. How do you make “x” look like a specific data type? This is not FORTRAN IV where it would be a double since it doesn’t start with a letter from “i” through “n.” And remembering the order of precedence between modulus and division? Who has room in their brain for that to be top of mind? This makes a great discussion question. A great question to emphasis the need to use parentheses to remove ambiguity. There is no way it would pass code review in a professional development environment though. At least not a review I want to be part of. Well, I should go finish writing my test and trying to avoid writing horrible questions."
"385","2019-12-09","2023-03-24","https://blog.acthompson.net/2019/12/coding-without-net.html","My Programming Honors students are struggling with creating classes in C#. They really wanted me to code up a project live (again) and have them follow along. But I’ve used my usual examples and samples and projects already. First message is that I need more but I had to come up with one for today. And I had writers block. About a half hour before class, with a bit of panic setting in, the other computer teacher suggested a reindeer class. For Santa’s sled. For data use a name, their position on the sled, and if they have a red or black nose. Ok a bit of a goof perhaps but simple and seasonal. Why not? Now I don’t know about you, but I prefer to write demo code several times before writing it again live in front of an audience. Not an option today but how hard can it be? I’ve written classes many times before and my content knowledge is solid. I honestly hoped I would make some mistakes. Hopefully the students would catch them. Great learning experience. And yes, I did make a couple of mistakes. I forgot to make the class data private right off the bat. I called for a string parameter in the constructor that should have been an integer. A student caught that one. Winning! The hardest part for me is that I had only thought through writing the class but now how to test it. I had thought about the constructor (and prepared a data file with 8 normal reindeer and Rudolph) and using ToString (overridden of course) for testing purposes. I had to make up a test for various other properties on the fly. At least that meant students got to see/hear my design thoughts as they happened. I’ve also been thinking about a Santa’s sled class that would have an array of reindeer objects. That might be fun if I figure it all out. Things went pretty well actually. I got a lot of ideas which doing the demo and I’ll be more prepared in the next semester. I need to come up with something seasonal for the spring though. A prom dress class perhaps?So many ideas."
"386","2019-12-04","2023-03-24","https://blog.acthompson.net/2019/12/coding-for-fun-and-advent-of-code.html","My friend Mike Zamansky is a big proponent of the Advent of Code – 25 days of coding problems leading up the Christmas. Since I have been thinking I want to write more code for my personal enjoyment I started in on it myself. Day 1 and Day 2 were interesting (to me) problems and I enjoyed doing them. Day 3 didn’t appeal to me. It looked like something I would want to be paid to write so I didn’t do it. Day 4 looks interesting so I plan on taking it one some time today. After all, it is not coding for fun if it isn’t fun. I’m not looking to prove anything to myself or anyone else at this point in my life. Mike has been blogging about the problems he has been doing from a teacher’s perspective. I highly recommend his commentary https://cestlaz.github.io/ The Day 2 problem was particularly interesting to me though. It is a very simplified computer simulator. Only 3 instructions – 1 for add, 2 for multiply, and 99 for halt. with each of the first two operators having three parameters – location of the two numbers to operate on and the location to save the result. It is potentially self modifying code if any of the addresses points to an operator later in the list of instructions. The obvious enhancement is to add more operators – division and subtraction for sure. Having a set number of parameters makes things easy so having variable numbers of parameters adds some complication. The more I thought about expansion the more I found myself contemplating a more complete “assembly language” especially as I found myself thinking about literal data and pointers as different types of parameters. Maybe I spent too much of my career writing in various assembly languages. In any case, as a thought exercise I found myself going far beyond what I would want to assign to a beginning programmer. So I am pulling back a bit. I’m thinking about several smaller pieces. The easy part of a simulator with a few more operators. But maybe, also, what would a compiler look like that would create input for such a simulator? How would it load data into appropriate places? That’s a more advanced project but maybe something for me to write to make it easier to create input for the simulator? If nothing else, looking at Advent of Code is giving me ideas for both students and myself. Now that is fun."
"387","2021-01-19","2023-03-24","https://blog.acthompson.net/2021/01/scratching-programming-itch.html","Programming is fun for me. It always has been.I’ve always written code to scratch a personal itch. That is to say that I like to write programs that interest me. If I can learn something new or try something different that is a plus. Not having a time pressure makes this even more enjoyable. I’ve written a couple of fun programs lately. I think they have some potential for student projects as well. For example, my wife bought us some clothing from a company called Two Blind Brothers. It’s nice clothing and profits go to fight blindness according to the web site. The clothing all has labels in the braised bumps of Braille. Naturally one wants to know what the Braille says and while it is probably documented in the company web site I was looking it up letter by letter with a chart. Eventually I decided to write a program to help me out. Yes, programmers will spend an hour writing code to save themselves 5 minutes. My program has a pattern of 6 dots that can be set or unset to match a Braille patter with the program displaying the appropriate letter. Or I can enter a letter and the program will display the pattern. I’d love to assign this to students just to see the different ways students come up with to do the parsing and display. I’m probably going to use it as a platform for more experimentation. I have some other ideas about parsing and translating. It’s modular enough to make experimentation easier. I’ve also been playing with a Yahtzee program. There are a lot of interesting facets to this program. One of them is verifying options. How do you recognize a full house? How do you recognize a straight? How do you make sure the values entered for a Chance or a three of a kind at legitimate? A couple of years ago I thought about using this as a project to use and enhance over the course of a semester. I ran out of time developing that but now that I have a program almost finished I may try to write up something like that. Loops, arrays, classes (dice class anyone?) and more are all part of a project like this. It’s been fun writing it. I’ve learned a few things that may help me with some additional games."
"388","2021-01-15","2023-03-24","https://blog.acthompson.net/2021/01/comments-on-commenting-code.html","Comments sometimes seem to be a hot button for software developers. Opinions range from the manager I had who actually did want a comment on every line of code to the people who think comments are completely unnecessary. I tend to fall somewhere in the middle as I think most people are. We may draw the line differently but most people think there is a sweet spot for how many comments are a good idea. Some people don’t see the value in comments. They believe that code should be self documenting. The variables and functions should have descriptive names for example. To some extent that is a valid goal. Code should be understandable by itself. That’s not always as easy as it seems. When we write code we do so with some specific, obvious to us at the time, information. This might not be the case for others who come to the code later. Or even to the original programmer after some time has passed. When I talk to students about comments I often relate an experience of my own. I wrote a really cool (in my opinion) program while I was a university student. It drew pictures on a drum plotter. Pictures took about a half hour to draw on that device. Some years ago, decades after I wrote the original program, I decided to write the program again for a modern display device. I wrote the program, compiled it, and ran it. It didn’t look right at all. I stared at the screen and thought “that looks familiar. I think I made that mistake the first time.” Now it turns out that I still had the punch card deck (yeah, I’m that old) and could read through the original program. I came across a comment that read “this function takes degrees in radian” Ah, ha! That is what I got wrong both times. I simple fix and my program worked as I wanted. Clearly writing comments, especially that one, paid off big time. Something that took a while to figure out should always be commented in my opinion. When ever the subject of comments come up someone brings up the case where code changes mean that comments do not match the code. There is no doubt that this happens but frankly I have no sympathy for the situation. A serious professional should be mindful of details like that in their code. When the code and comments do not match it means someone was in too much of a hurry to do a complete job. Comments should document difficult things, non-obvious things (parameter lists to called methods are a good example, and anything that required some involved logic. Student projects in a first programming course often don’t have the sort of complexity that a larger professional program might have so it is hard to get students to comment code. I always insisted on a complete header of comments at least. And a comment that describes the purpose of each method written. As I think on it today, I wish I had produced some larger piece of well commented code to have students read. How do you feel about comments in code? And how do you communicate it to students? Please share some ideas in the comments."
"389","2021-01-11","2023-03-24","https://blog.acthompson.net/2021/01/early-registration-open-for-csta-annual.html","Just registered for the 2021 CSTA Annual Conference Early discounted registration for CSTA+ members is now open https://web.cvent.com/event/354be991-0b98-48e0-b4d3-0e32b72a6e49/summary If you are a CSTA+ member you should have the email.. If you’re not a CSTA+ member maybe you should think about becoming one! I think its going to be a great conference. We learned a lot from last years conference on many levels."
"390","2021-01-02","2023-03-24","https://blog.acthompson.net/2021/01/recursionhow-and-when-to-teach.html","I’ll start with a confession. Recursion is one of those concepts that I struggled to understand in the beginning. Was it me or was it how it was taught? An open question that I don’t want to look for blame. A recent article by Shriram Krishnamurthi, CS Professor at Brown University, called How Not to Teach Recursion suggests that maybe I was taught badly and worse still that I taught it badly. Adam Michlin wrote an interesting, related, post called Why you shouldn’t teach recursion (yet) The teaching of recursion is one of those topics that really gets people talking. I hope thinking as well. Certainly I have been thinking about it lately. Teaching it early, teach it late (as Adam suggests), not teach it at all? All question people ask and answer differently. My key takeaway is that recursion has to be the natural solution to a problem for it to really make sense to students. Navigating a tree structure, file directories for example. This implies a prior understanding of the related data structure is also required. Some languages and teachers use recursion for iteration. I guess for some that feels natural but it never has for me. Perhaps I am to old school and too deep into for statements and while loops. When I started programming there were languages that didn’t support recursion at all! I have had several students discover recursion (and stack overflows) by having the main function call itself. Very instructive. I’ve been programming for about 48 years now and very seldom have I had a real need to use recursion. By need, I mean that was the bests and only way to code a solution. One time I wrote a really cool recursive method which I was writing code for a living. Upon code review the rest of the team made me rewrite it as an iterative method because they decided it was too complicated and no one else wanted to try to debug it some day. Most of the teach was fairly young and were recent graduates from top CS universities too! How important is recursion really? The AP CS A exam tests it lightly in the multiple choice questions (as I understand it). The AP CS Principles didn’t test it at all. SO if you are basing decisions on those exams (which is a whole other problem IMHO) its not that important. Do an advanced data structures course on the other hand it is probably fairly important. If you are teaching it though I think the important things are outlined in Shriram ‘s article. The popular examples are problematic at best. From the post: Where does recursion come from? HTDP argues that it arises from self-references in data. That is, recursive data suggest recursive solutions. This is the key insight you need for understanding recursion. Not only does it make sense once you think about it, it also demonstrates why most other approaches to teaching recursion are essentially incorrect. But do read Shriram’s article. He explains it much better than I can. [Edit: Mike Zamansky gives some thoughts on teaching recursion at On Teaching Recursion Worth the read. ] [Edit: Michele Lombardi gives here thoughts at Chiming in on Recursion"
"391","2021-01-01","2023-03-24","https://blog.acthompson.net/2021/01/looking-forward-to-2021-in-cs-education.html","What a strange year it has been. The pandemic and more took a lot of the steam out of what I had hoped to dig deeply into in 2020. Surviving is success in these times I guess. I taught online for the winter/spring semester of 2020 and then retired. Teaching online was not so bad but it didn’t leave me with much time to improve on things. Running as fast as possible to stay in the same place seems to have been the norm for most teachers. But this is time to look forward not back. One thing that seems to have grown among the teachers I see on social media is cybersecurity. While we have seen cyber security at the CSTA conference the last several years is feels like 2020 was the year teachers started teaching it in larger numbers. I think that is only going to continue. I see a lot of teachers looking for new courses that are relevant to students and cybersecurity certainly counts as that. We can also fit more of it into other CS courses. Students love it. Well, mostly. CYBER.ORG (formerly NICERC) is one of several organizations supplying curriculum and professional development. And it is all free.I love that team. Teach Cyber is another group as is TryHackMe There is a pretty active Cybersecurity Educators group on Facebook where a lot of teachers are sharing ideas and resources. I highly recommend that group. Other than cybersecurity what am I looking to see more of in 2021? Well, online IDEs which really came into their own in 2020 are going to only get better. We’ll probably see more competition there as well. In fact, any option for teaching online will see growth even if, as we all hope, schools all return to in-person learning. Giving access to students outside of computer labs is just too powerful a tool to avoid. I expect computer science, indeed most, conferences to retain a virtual component in 2021. Will they be mixed with both in-person and virtual aspects? I’m not sure but I see more and more conferences having the ability for people to attend virtually. The cost of that is coming down for the conferences and the ability of teachers to spend money for airfare and hotels is not growing as fast as the need for more teachers. There is also a growing interest in reducing carbon footprints on that part of many people. Computer science education research has been gaining traction in universities. That’s pretty exciting to me as I think there is still a lot we can learn about how to teach CS more effectively. I am hoping that learning about the results of this research will be more available to teachers as well. We can’t all go to conferences or afford expensive peer reviewed journals. The real value of CS Ed research is getting the knowledge to actual teachers. I see reason to be optimistic about CS education in 2021. We made it through 2020 and it is all going to get better. I can’t wait to see what happens!"
"392","2020-10-01","2023-03-24","https://blog.acthompson.net/2020/10/microblocks-for-iot-and-other-physical.html","Well, there is a new tool in town for programming micro devices like the Micro:bit and the AdaFruit Circuit Playground Express and many more! It's called MicroBlocks and was created by a rock star team with experience with creation of such tools as Scratch and Snap!. It’s pretty exciting for a number of reasons. One of them is the wide variety of devices it works with. Another is the Natural Languages it supports. Live Coding is another interesting feature. MicroBlocks is a live environment. Click on a block and it runs immediately, right on the board. Try out commands. See and graph sensor values in real time. No more waiting for code to compile and download. And Multi Tasking. Want to display an animation while controlling a motor? No problem! MicroBlocks lets you write separate scripts for each task and run them at the same time. Your code is simpler to write and easier to understand I played with it a bit and it looks pretty intuitive especially for those with previous block programming experience. I made the mistake of trying it without having a device to use with it handy. I have several at home and so I’ll be trying them next week. But I wanted to get the word out so that if people want to try it over the weekend (yeah, I know you don’t have as much free time as you want) or have some students try it out you could. Sometime next week I want to do a side by side comparison with MakeCode which supports several of the same devices. Some obvious differences are that MicroBlocks supports running the exact same app on different types of devices and that MakeCode has emulators. Since most people only use one type at a time and have physical devices the impact of those differences will be different in different environments. We are living in exciting times!"
"393","2020-09-22","2023-03-24","https://blog.acthompson.net/2020/09/what-i-miss-and-dont-miss-about-teaching.html","Fall has come and while students are back in school I am not. I’ve been reflecting a bit about that. I don’t miss getting up at 6 AM and driving for close to an hour to get to school. I don’t miss running my life by a bell schedule. I don’t miss grading, report cards, and other administrivia. I don’t miss classroom management issues. On the other hand, I do miss interacting with students. I especially miss the interactions that take place outside of class. I miss the look, and sound, of students when they get a concept or when their program works – finally. I miss debugging student problems with programs or their project. Students are very good at finding ways to mess up a Visual Studio project. That’s the one big downside to using a professional tool. But I had fun putting things back together. There are all sort of debugging issues that come up in the code. There is syntax issues (semi colon hide and seek anyone?) and logic problems. Both are fun little puzzles to solve. And I am sure there are still many that students have not discovered. But the big miss is the students. I still think I retired at the right time for me. I hope your school year is going well. I am following all sort of teacher/school things on social media and I know its not easy. Stay safe. And if you have a student program you can’t debug let me know."
"394","2020-07-15","2023-03-24","https://blog.acthompson.net/2020/07/thoughts-on-virtual-conferences-csta.html","The first online CSTA Conference is now about 24 hours behind me. I was fortunate to experience it both as an attendee and a presenter. After mulling it over a bit I have to say it was a much better experience than I expected it would be. Attending was very low friction. No travel half a day each way (with attendant airfare) no hotel to book and pay for and that is just to start. Attending sessions was easy. No hunting for rooms for example. I have put in a lot of steps in previous conferences going to the wrong room or finding a room at out of the way locations. None of that here. No trouble entering and finding a seat. Or leaving if I wanted to switch sessions. Really very smooth. Attending sessions was great this way. I particularly liked the chat window as it allowed others to share resources and for more people to ask questions. I hope there is a way to capture the chat session information. I would like to have the comments from my presentation at least. Presentations were of the usual high caliber for a CSTA conference. Sure some were better than others but over all much higher than some other conferences I will not name. Presenters seemed comfortable presenting online. Some of this may because a lot of us have been doing so for school but the preparation for presenters was really very well done. As a presenter I felt very prepared for the platform. As a presenter things went pretty well. I had wanted to have a second monitor running but due to some technical issues that were all my fault I didn’t get that working. Let that be a lesson to me. Not being able to see the chat window while I was presenting was a disadvantage but the wonderful CSTA proctor was able to see it and fed me questions as appropriate. Having a person who can do it is very important in an online presentation. While presenting I obviously could not see the reactions so setting an audience based pace was difficult at best. Attendee questions did help there. I also missed hearing people laugh at my jokes (be they intentional or otherwise). There were some comments in the chat that said people did laugh so that’s good. Presenting online is not as much fun for me as presenting in person. One the other hand, I don’t think any of us presenters would have had the size audience we had online if we’d had the conference in person. The hopin platform worked very well – flawlessly for me. I recommend it. We had a reception area for finding out what was happening and when. A “main stage” for keynotes, breakout rooms for the concurrent sessions, a networking area, and a virtual exhibit hall. The networking area was very interesting. It placed you in a session with a random attendee for 5 minutes. Just enough time to meet someone and be very low stress. You didn’t have to find an excuse to “walk away.” I took part a few times but as an introvert I have my limits. The exhibit hall didn’t quite work for me. I like to look at booths and the physical objects in them. It was great if you like to listen to exhibitor presentations and I know that many people do. So that was a mixed story for me. I would love to know what exhibitors thought of the experience. I was going to write about missing the “hallway track” in this post but I think that deserves a post of its own. So that will probably show up tomorrow."
"395","2020-07-14","2023-03-24","https://blog.acthompson.net/2020/07/csta-online-conference-2020day-two.html","The first thing I did this morning was to prepare for my presentation. I may have made some last minute changes to my presentation deck. The first thing I attended was a Birds of a Feather session called White Teachers as Anti-Racist Allies. I listened closely. Living in New Hampshire were we don’t have a lot of people of color it is easy to fall into the idea that race is not an issue. But of course I have been teaching in a school with more than the average number of people of color for the area so I know better. This BoF gave me some things to think about. I couldn’t focus on anything after the BoF. In all honesty I couldn’t get my mind off of getting myself set for you presentation. This tends to happen to be at in-person conferences as well. I probably missed something valuable but hopefully I can watch recordings later. If you are interested, my presentation slides can be downloaded from Techniques for Teaching Programming. Someone else will have to review that session. Please be kind. After lunch was a keynote by Dr. Ruha Benjamin called Keynote: 2020 Vision: Re-imagining the Default Settings of Technology and Society She focused on the intersection of technology and bias. Really thought provoking. She shared a really interesting video called ""Racial Sensitivity"" from Better Off Ted Recommended. How does data and algorithm incorporate bias? After the keynote I started with Our Code From Miles Away: CS via Distance Learning, which according to to the slides was going to be about Pear Deck and FlipGrid. The main presenter had some issues with time zone coordination which is more a problem with online conferences than in-person ones. Anyway, I left early and moved to Machine Learning in the High School Classroom. It was well done but jumping in 20 minutes late means I missed some important context. I look forward to viewing the recording from the beginning And reading through the website I linked in the session title.. Not much else I can say about this one I am afraid. Next up was Git and GitHub: How to Use It, How to Teach It, which was of course about Git and GitHub. This was a very fast paced session by a pair of experts. I learned a lot from this one. I dropped into Nifty Assignments for my last session of the day. Memory Trainer (Dale Reed) - a lot like mine parity project http://blog.acthompson.net/2013/11/making-magic-with-software.html Though Dale’s app looks cooler. Abstract Data Art (Josh Caldwell) - Interesting use of data and visualization The archive of CSTA Nifty Assignments is here. Check them out! So the virtual conference is over. For me there were a lot of great sessions. If you were there, what sessions did you like? Let me know which ones I should look for when the recordings are ready."
